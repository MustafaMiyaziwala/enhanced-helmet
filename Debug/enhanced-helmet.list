
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d884  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  0800da28  0800da28  0001da28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5c4  0800e5c4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5c4  0800e5c4  0001e5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5cc  0800e5cc  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5cc  0800e5cc  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5d0  0800e5d0  0001e5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800e5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017bc  200001f8  0800e7cc  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019b4  0800e7cc  000219b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5dd  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9b  00000000  00000000  0003b805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  0003f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00040a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c32a  00000000  00000000  000420e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020172  00000000  00000000  0005e412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1497  00000000  00000000  0007e584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fa1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007500  00000000  00000000  0011fa6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800da0c 	.word	0x0800da0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800da0c 	.word	0x0800da0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <HAL_TIM_PeriodElapsedCallback>:
#include "headlamp.h"
#include <stdio.h>

extern int input_connected;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	if (htim == HEADLAMP_TIMER) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d108      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2101      	movs	r1, #1
 8000ed0:	480a      	ldr	r0, [pc, #40]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ed2:	f003 f9fd 	bl	80042d0 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
 8000ed6:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ed8:	f005 fb68 	bl	80065ac <HAL_TIM_Base_Stop_IT>
	} else if (htim == FILE_TIMER) {
		XBee_Transmit_File();
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
	}
}
 8000edc:	e008      	b.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x34>
	} else if (htim == FILE_TIMER) {
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d104      	bne.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x34>
		XBee_Transmit_File();
 8000ee6:	f001 fe69 	bl	8002bbc <XBee_Transmit_File>
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000eec:	f005 fb5e 	bl	80065ac <HAL_TIM_Base_Stop_IT>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200003c8 	.word	0x200003c8
 8000efc:	40020000 	.word	0x40020000
 8000f00:	20000410 	.word	0x20000410

08000f04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
	if (pin & (1 << 8) && input_connected) {
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <HAL_GPIO_EXTI_Callback+0x20>
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x28>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_GPIO_EXTI_Callback+0x20>
		Input_Resolve();
 8000f20:	f000 fdc8 	bl	8001ab4 <Input_Resolve>
	}
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000004 	.word	0x20000004

08000f30 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2102      	movs	r1, #2
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <SELECT+0x18>)
 8000f3a:	f003 f9c9 	bl	80042d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f002 f8a8 	bl	8003094 <HAL_Delay>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40020800 	.word	0x40020800

08000f4c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2102      	movs	r1, #2
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <DESELECT+0x18>)
 8000f56:	f003 f9bb 	bl	80042d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f002 f89a 	bl	8003094 <HAL_Delay>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40020800 	.word	0x40020800

08000f68 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f72:	bf00      	nop
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <SPI_TxByte+0x30>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d1f8      	bne.n	8000f74 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f82:	1df9      	adds	r1, r7, #7
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	2201      	movs	r2, #1
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <SPI_TxByte+0x30>)
 8000f8a:	f004 feb4 	bl	8005cf6 <HAL_SPI_Transmit>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000318 	.word	0x20000318

08000f9c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fa8:	bf00      	nop
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <SPI_TxBuffer+0x30>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d1f8      	bne.n	8000faa <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000fb8:	887a      	ldrh	r2, [r7, #2]
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4803      	ldr	r0, [pc, #12]	; (8000fcc <SPI_TxBuffer+0x30>)
 8000fc0:	f004 fe99 	bl	8005cf6 <HAL_SPI_Transmit>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000318 	.word	0x20000318

08000fd0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000fd6:	23ff      	movs	r3, #255	; 0xff
 8000fd8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fda:	bf00      	nop
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <SPI_RxByte+0x34>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d1f8      	bne.n	8000fdc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000fea:	1dba      	adds	r2, r7, #6
 8000fec:	1df9      	adds	r1, r7, #7
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <SPI_RxByte+0x34>)
 8000ff6:	f004 ffba 	bl	8005f6e <HAL_SPI_TransmitReceive>

	return data;
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000318 	.word	0x20000318

08001008 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001010:	f7ff ffde 	bl	8000fd0 <SPI_RxByte>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	701a      	strb	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <SD_ReadyWait+0x30>)
 800102c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001030:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001032:	f7ff ffcd 	bl	8000fd0 <SPI_RxByte>
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2bff      	cmp	r3, #255	; 0xff
 800103e:	d003      	beq.n	8001048 <SD_ReadyWait+0x24>
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SD_ReadyWait+0x30>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f4      	bne.n	8001032 <SD_ReadyWait+0xe>

	return res;
 8001048:	79fb      	ldrb	r3, [r7, #7]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000216 	.word	0x20000216

08001058 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800105e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001062:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001064:	f7ff ff72 	bl	8000f4c <DESELECT>
	for(int i = 0; i < 10; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	e005      	b.n	800107a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800106e:	20ff      	movs	r0, #255	; 0xff
 8001070:	f7ff ff7a 	bl	8000f68 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	3301      	adds	r3, #1
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2b09      	cmp	r3, #9
 800107e:	ddf6      	ble.n	800106e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001080:	f7ff ff56 	bl	8000f30 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001084:	2340      	movs	r3, #64	; 0x40
 8001086:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001098:	2395      	movs	r3, #149	; 0x95
 800109a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800109c:	463b      	mov	r3, r7
 800109e:	2106      	movs	r1, #6
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff7b 	bl	8000f9c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80010a6:	e002      	b.n	80010ae <SD_PowerOn+0x56>
	{
		cnt--;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80010ae:	f7ff ff8f 	bl	8000fd0 <SPI_RxByte>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d002      	beq.n	80010be <SD_PowerOn+0x66>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f4      	bne.n	80010a8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80010be:	f7ff ff45 	bl	8000f4c <DESELECT>
	SPI_TxByte(0XFF);
 80010c2:	20ff      	movs	r0, #255	; 0xff
 80010c4:	f7ff ff50 	bl	8000f68 <SPI_TxByte>

	PowerFlag = 1;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <SD_PowerOn+0x80>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000219 	.word	0x20000219

080010dc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <SD_PowerOff+0x14>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	20000219 	.word	0x20000219

080010f4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <SD_CheckPower+0x14>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000219 	.word	0x20000219

0800110c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <SD_RxDataBlock+0x58>)
 8001118:	22c8      	movs	r2, #200	; 0xc8
 800111a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800111c:	f7ff ff58 	bl	8000fd0 <SPI_RxByte>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2bff      	cmp	r3, #255	; 0xff
 8001128:	d103      	bne.n	8001132 <SD_RxDataBlock+0x26>
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <SD_RxDataBlock+0x58>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f4      	bne.n	800111c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	2bfe      	cmp	r3, #254	; 0xfe
 8001136:	d001      	beq.n	800113c <SD_RxDataBlock+0x30>
 8001138:	2300      	movs	r3, #0
 800113a:	e00f      	b.n	800115c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff60 	bl	8001008 <SPI_RxBytePtr>
	} while(len--);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	603a      	str	r2, [r7, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f4      	bne.n	800113c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001152:	f7ff ff3d 	bl	8000fd0 <SPI_RxByte>
	SPI_RxByte();
 8001156:	f7ff ff3b 	bl	8000fd0 <SPI_RxByte>

	return TRUE;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000214 	.word	0x20000214

08001168 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001178:	f7ff ff54 	bl	8001024 <SD_ReadyWait>
 800117c:	4603      	mov	r3, r0
 800117e:	2bff      	cmp	r3, #255	; 0xff
 8001180:	d001      	beq.n	8001186 <SD_TxDataBlock+0x1e>
 8001182:	2300      	movs	r3, #0
 8001184:	e02f      	b.n	80011e6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff feed 	bl	8000f68 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2bfd      	cmp	r3, #253	; 0xfd
 8001192:	d020      	beq.n	80011d6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff feff 	bl	8000f9c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800119e:	f7ff ff17 	bl	8000fd0 <SPI_RxByte>
		SPI_RxByte();
 80011a2:	f7ff ff15 	bl	8000fd0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80011a6:	e00b      	b.n	80011c0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80011a8:	f7ff ff12 	bl	8000fd0 <SPI_RxByte>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	2b05      	cmp	r3, #5
 80011b8:	d006      	beq.n	80011c8 <SD_TxDataBlock+0x60>
			i++;
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	3301      	adds	r3, #1
 80011be:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	2b40      	cmp	r3, #64	; 0x40
 80011c4:	d9f0      	bls.n	80011a8 <SD_TxDataBlock+0x40>
 80011c6:	e000      	b.n	80011ca <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80011c8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80011ca:	bf00      	nop
 80011cc:	f7ff ff00 	bl	8000fd0 <SPI_RxByte>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0fa      	beq.n	80011cc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d101      	bne.n	80011e4 <SD_TxDataBlock+0x7c>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	6039      	str	r1, [r7, #0]
 80011f8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80011fa:	f7ff ff13 	bl	8001024 <SD_ReadyWait>
 80011fe:	4603      	mov	r3, r0
 8001200:	2bff      	cmp	r3, #255	; 0xff
 8001202:	d001      	beq.n	8001208 <SD_SendCmd+0x1a>
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	e042      	b.n	800128e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff feac 	bl	8000f68 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	0e1b      	lsrs	r3, r3, #24
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fea6 	bl	8000f68 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	0c1b      	lsrs	r3, r3, #16
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fea0 	bl	8000f68 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	0a1b      	lsrs	r3, r3, #8
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fe9a 	bl	8000f68 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fe95 	bl	8000f68 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b40      	cmp	r3, #64	; 0x40
 8001242:	d102      	bne.n	800124a <SD_SendCmd+0x5c>
 8001244:	2395      	movs	r3, #149	; 0x95
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e007      	b.n	800125a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b48      	cmp	r3, #72	; 0x48
 800124e:	d102      	bne.n	8001256 <SD_SendCmd+0x68>
 8001250:	2387      	movs	r3, #135	; 0x87
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e001      	b.n	800125a <SD_SendCmd+0x6c>
	else crc = 1;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe83 	bl	8000f68 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b4c      	cmp	r3, #76	; 0x4c
 8001266:	d101      	bne.n	800126c <SD_SendCmd+0x7e>
 8001268:	f7ff feb2 	bl	8000fd0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800126c:	230a      	movs	r3, #10
 800126e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001270:	f7ff feae 	bl	8000fd0 <SPI_RxByte>
 8001274:	4603      	mov	r3, r0
 8001276:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001278:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800127c:	2b00      	cmp	r3, #0
 800127e:	da05      	bge.n	800128c <SD_SendCmd+0x9e>
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	3b01      	subs	r3, #1
 8001284:	73bb      	strb	r3, [r7, #14]
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f1      	bne.n	8001270 <SD_SendCmd+0x82>

	return res;
 800128c:	7b7b      	ldrb	r3, [r7, #13]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SD_disk_initialize+0x14>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0d1      	b.n	8001450 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <SD_disk_initialize+0x1c0>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <SD_disk_initialize+0x2a>
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <SD_disk_initialize+0x1c0>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	e0c6      	b.n	8001450 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80012c2:	f7ff fec9 	bl	8001058 <SD_PowerOn>

	/* slave select */
	SELECT();
 80012c6:	f7ff fe33 	bl	8000f30 <SELECT>

	/* check disk type */
	type = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80012ce:	2100      	movs	r1, #0
 80012d0:	2040      	movs	r0, #64	; 0x40
 80012d2:	f7ff ff8c 	bl	80011ee <SD_SendCmd>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	f040 80a1 	bne.w	8001420 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80012de:	4b5f      	ldr	r3, [pc, #380]	; (800145c <SD_disk_initialize+0x1c4>)
 80012e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80012e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012ea:	2048      	movs	r0, #72	; 0x48
 80012ec:	f7ff ff7f 	bl	80011ee <SD_SendCmd>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d155      	bne.n	80013a2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	e00c      	b.n	8001316 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80012fc:	7bfc      	ldrb	r4, [r7, #15]
 80012fe:	f7ff fe67 	bl	8000fd0 <SPI_RxByte>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	f104 0310 	add.w	r3, r4, #16
 800130a:	443b      	add	r3, r7
 800130c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	3301      	adds	r3, #1
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d9ef      	bls.n	80012fc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800131c:	7abb      	ldrb	r3, [r7, #10]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d17e      	bne.n	8001420 <SD_disk_initialize+0x188>
 8001322:	7afb      	ldrb	r3, [r7, #11]
 8001324:	2baa      	cmp	r3, #170	; 0xaa
 8001326:	d17b      	bne.n	8001420 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001328:	2100      	movs	r1, #0
 800132a:	2077      	movs	r0, #119	; 0x77
 800132c:	f7ff ff5f 	bl	80011ee <SD_SendCmd>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d807      	bhi.n	8001346 <SD_disk_initialize+0xae>
 8001336:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800133a:	2069      	movs	r0, #105	; 0x69
 800133c:	f7ff ff57 	bl	80011ee <SD_SendCmd>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d004      	beq.n	8001350 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001346:	4b45      	ldr	r3, [pc, #276]	; (800145c <SD_disk_initialize+0x1c4>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1ec      	bne.n	8001328 <SD_disk_initialize+0x90>
 800134e:	e000      	b.n	8001352 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001350:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001352:	4b42      	ldr	r3, [pc, #264]	; (800145c <SD_disk_initialize+0x1c4>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d062      	beq.n	8001420 <SD_disk_initialize+0x188>
 800135a:	2100      	movs	r1, #0
 800135c:	207a      	movs	r0, #122	; 0x7a
 800135e:	f7ff ff46 	bl	80011ee <SD_SendCmd>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d15b      	bne.n	8001420 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e00c      	b.n	8001388 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800136e:	7bfc      	ldrb	r4, [r7, #15]
 8001370:	f7ff fe2e 	bl	8000fd0 <SPI_RxByte>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	f104 0310 	add.w	r3, r4, #16
 800137c:	443b      	add	r3, r7
 800137e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	3301      	adds	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d9ef      	bls.n	800136e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800138e:	7a3b      	ldrb	r3, [r7, #8]
 8001390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SD_disk_initialize+0x104>
 8001398:	230c      	movs	r3, #12
 800139a:	e000      	b.n	800139e <SD_disk_initialize+0x106>
 800139c:	2304      	movs	r3, #4
 800139e:	73bb      	strb	r3, [r7, #14]
 80013a0:	e03e      	b.n	8001420 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80013a2:	2100      	movs	r1, #0
 80013a4:	2077      	movs	r0, #119	; 0x77
 80013a6:	f7ff ff22 	bl	80011ee <SD_SendCmd>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d808      	bhi.n	80013c2 <SD_disk_initialize+0x12a>
 80013b0:	2100      	movs	r1, #0
 80013b2:	2069      	movs	r0, #105	; 0x69
 80013b4:	f7ff ff1b 	bl	80011ee <SD_SendCmd>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d801      	bhi.n	80013c2 <SD_disk_initialize+0x12a>
 80013be:	2302      	movs	r3, #2
 80013c0:	e000      	b.n	80013c4 <SD_disk_initialize+0x12c>
 80013c2:	2301      	movs	r3, #1
 80013c4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80013c6:	7bbb      	ldrb	r3, [r7, #14]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d10e      	bne.n	80013ea <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013cc:	2100      	movs	r1, #0
 80013ce:	2077      	movs	r0, #119	; 0x77
 80013d0:	f7ff ff0d 	bl	80011ee <SD_SendCmd>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d80e      	bhi.n	80013f8 <SD_disk_initialize+0x160>
 80013da:	2100      	movs	r1, #0
 80013dc:	2069      	movs	r0, #105	; 0x69
 80013de:	f7ff ff06 	bl	80011ee <SD_SendCmd>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d107      	bne.n	80013f8 <SD_disk_initialize+0x160>
 80013e8:	e00c      	b.n	8001404 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013ea:	2100      	movs	r1, #0
 80013ec:	2041      	movs	r0, #65	; 0x41
 80013ee:	f7ff fefe 	bl	80011ee <SD_SendCmd>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <SD_disk_initialize+0x1c4>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e2      	bne.n	80013c6 <SD_disk_initialize+0x12e>
 8001400:	e000      	b.n	8001404 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001402:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <SD_disk_initialize+0x1c4>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d007      	beq.n	800141c <SD_disk_initialize+0x184>
 800140c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001410:	2050      	movs	r0, #80	; 0x50
 8001412:	f7ff feec 	bl	80011ee <SD_SendCmd>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SD_disk_initialize+0x188>
 800141c:	2300      	movs	r3, #0
 800141e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <SD_disk_initialize+0x1c8>)
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001426:	f7ff fd91 	bl	8000f4c <DESELECT>
	SPI_RxByte();
 800142a:	f7ff fdd1 	bl	8000fd0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <SD_disk_initialize+0x1c0>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SD_disk_initialize+0x1c0>)
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	e001      	b.n	800144a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001446:	f7ff fe49 	bl	80010dc <SD_PowerOff>
	}

	return Stat;
 800144a:	4b03      	ldr	r3, [pc, #12]	; (8001458 <SD_disk_initialize+0x1c0>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	20000000 	.word	0x20000000
 800145c:	20000214 	.word	0x20000214
 8001460:	20000218 	.word	0x20000218

08001464 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SD_disk_status+0x14>
 8001474:	2301      	movs	r3, #1
 8001476:	e002      	b.n	800147e <SD_disk_status+0x1a>
	return Stat;
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <SD_disk_status+0x28>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000

08001490 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <SD_disk_read+0x1c>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <SD_disk_read+0x20>
 80014ac:	2304      	movs	r3, #4
 80014ae:	e051      	b.n	8001554 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <SD_disk_read+0xcc>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SD_disk_read+0x32>
 80014be:	2303      	movs	r3, #3
 80014c0:	e048      	b.n	8001554 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <SD_disk_read+0xd0>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <SD_disk_read+0x44>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	025b      	lsls	r3, r3, #9
 80014d2:	607b      	str	r3, [r7, #4]

	SELECT();
 80014d4:	f7ff fd2c 	bl	8000f30 <SELECT>

	if (count == 1)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d111      	bne.n	8001502 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	2051      	movs	r0, #81	; 0x51
 80014e2:	f7ff fe84 	bl	80011ee <SD_SendCmd>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d129      	bne.n	8001540 <SD_disk_read+0xb0>
 80014ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f0:	68b8      	ldr	r0, [r7, #8]
 80014f2:	f7ff fe0b 	bl	800110c <SD_RxDataBlock>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d021      	beq.n	8001540 <SD_disk_read+0xb0>
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	e01e      	b.n	8001540 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	2052      	movs	r0, #82	; 0x52
 8001506:	f7ff fe72 	bl	80011ee <SD_SendCmd>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d117      	bne.n	8001540 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f7ff fdf9 	bl	800110c <SD_RxDataBlock>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00a      	beq.n	8001536 <SD_disk_read+0xa6>
				buff += 512;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001526:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	3b01      	subs	r3, #1
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1ed      	bne.n	8001510 <SD_disk_read+0x80>
 8001534:	e000      	b.n	8001538 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001536:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001538:	2100      	movs	r1, #0
 800153a:	204c      	movs	r0, #76	; 0x4c
 800153c:	f7ff fe57 	bl	80011ee <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001540:	f7ff fd04 	bl	8000f4c <DESELECT>
	SPI_RxByte();
 8001544:	f7ff fd44 	bl	8000fd0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000000 	.word	0x20000000
 8001560:	20000218 	.word	0x20000218

08001564 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <SD_disk_write+0x1c>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <SD_disk_write+0x20>
 8001580:	2304      	movs	r3, #4
 8001582:	e06b      	b.n	800165c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <SD_disk_write+0x100>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SD_disk_write+0x32>
 8001592:	2303      	movs	r3, #3
 8001594:	e062      	b.n	800165c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <SD_disk_write+0x100>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SD_disk_write+0x44>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e059      	b.n	800165c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <SD_disk_write+0x104>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <SD_disk_write+0x56>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	025b      	lsls	r3, r3, #9
 80015b8:	607b      	str	r3, [r7, #4]

	SELECT();
 80015ba:	f7ff fcb9 	bl	8000f30 <SELECT>

	if (count == 1)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d110      	bne.n	80015e6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	2058      	movs	r0, #88	; 0x58
 80015c8:	f7ff fe11 	bl	80011ee <SD_SendCmd>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d13a      	bne.n	8001648 <SD_disk_write+0xe4>
 80015d2:	21fe      	movs	r1, #254	; 0xfe
 80015d4:	68b8      	ldr	r0, [r7, #8]
 80015d6:	f7ff fdc7 	bl	8001168 <SD_TxDataBlock>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d033      	beq.n	8001648 <SD_disk_write+0xe4>
			count = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	e030      	b.n	8001648 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <SD_disk_write+0x104>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80015f2:	2100      	movs	r1, #0
 80015f4:	2077      	movs	r0, #119	; 0x77
 80015f6:	f7ff fdfa 	bl	80011ee <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	2057      	movs	r0, #87	; 0x57
 80015fe:	f7ff fdf6 	bl	80011ee <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	2059      	movs	r0, #89	; 0x59
 8001606:	f7ff fdf2 	bl	80011ee <SD_SendCmd>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d11b      	bne.n	8001648 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001610:	21fc      	movs	r1, #252	; 0xfc
 8001612:	68b8      	ldr	r0, [r7, #8]
 8001614:	f7ff fda8 	bl	8001168 <SD_TxDataBlock>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00a      	beq.n	8001634 <SD_disk_write+0xd0>
				buff += 512;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001624:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	3b01      	subs	r3, #1
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ee      	bne.n	8001610 <SD_disk_write+0xac>
 8001632:	e000      	b.n	8001636 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001634:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001636:	21fd      	movs	r1, #253	; 0xfd
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fd95 	bl	8001168 <SD_TxDataBlock>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <SD_disk_write+0xe4>
			{
				count = 1;
 8001644:	2301      	movs	r3, #1
 8001646:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001648:	f7ff fc80 	bl	8000f4c <DESELECT>
	SPI_RxByte();
 800164c:	f7ff fcc0 	bl	8000fd0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	20000218 	.word	0x20000218

0800166c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b08b      	sub	sp, #44	; 0x2c
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	603a      	str	r2, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	460b      	mov	r3, r1
 800167a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SD_disk_ioctl+0x1e>
 8001686:	2304      	movs	r3, #4
 8001688:	e115      	b.n	80018b6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	2b05      	cmp	r3, #5
 8001694:	d124      	bne.n	80016e0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d012      	beq.n	80016c4 <SD_disk_ioctl+0x58>
 800169e:	2b02      	cmp	r3, #2
 80016a0:	dc1a      	bgt.n	80016d8 <SD_disk_ioctl+0x6c>
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <SD_disk_ioctl+0x40>
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d006      	beq.n	80016b8 <SD_disk_ioctl+0x4c>
 80016aa:	e015      	b.n	80016d8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80016ac:	f7ff fd16 	bl	80010dc <SD_PowerOff>
			res = RES_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016b6:	e0fc      	b.n	80018b2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80016b8:	f7ff fcce 	bl	8001058 <SD_PowerOn>
			res = RES_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016c2:	e0f6      	b.n	80018b2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	1c5c      	adds	r4, r3, #1
 80016c8:	f7ff fd14 	bl	80010f4 <SD_CheckPower>
 80016cc:	4603      	mov	r3, r0
 80016ce:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016d6:	e0ec      	b.n	80018b2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80016d8:	2304      	movs	r3, #4
 80016da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016de:	e0e8      	b.n	80018b2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016e0:	4b77      	ldr	r3, [pc, #476]	; (80018c0 <SD_disk_ioctl+0x254>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SD_disk_ioctl+0x86>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0e1      	b.n	80018b6 <SD_disk_ioctl+0x24a>

		SELECT();
 80016f2:	f7ff fc1d 	bl	8000f30 <SELECT>

		switch (ctrl)
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	2b0d      	cmp	r3, #13
 80016fa:	f200 80cb 	bhi.w	8001894 <SD_disk_ioctl+0x228>
 80016fe:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <SD_disk_ioctl+0x98>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	080017ff 	.word	0x080017ff
 8001708:	0800173d 	.word	0x0800173d
 800170c:	080017ef 	.word	0x080017ef
 8001710:	08001895 	.word	0x08001895
 8001714:	08001895 	.word	0x08001895
 8001718:	08001895 	.word	0x08001895
 800171c:	08001895 	.word	0x08001895
 8001720:	08001895 	.word	0x08001895
 8001724:	08001895 	.word	0x08001895
 8001728:	08001895 	.word	0x08001895
 800172c:	08001895 	.word	0x08001895
 8001730:	08001811 	.word	0x08001811
 8001734:	08001835 	.word	0x08001835
 8001738:	08001859 	.word	0x08001859
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800173c:	2100      	movs	r1, #0
 800173e:	2049      	movs	r0, #73	; 0x49
 8001740:	f7ff fd55 	bl	80011ee <SD_SendCmd>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 80a8 	bne.w	800189c <SD_disk_ioctl+0x230>
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2110      	movs	r1, #16
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fcda 	bl	800110c <SD_RxDataBlock>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 809e 	beq.w	800189c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001760:	7b3b      	ldrb	r3, [r7, #12]
 8001762:	099b      	lsrs	r3, r3, #6
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d10e      	bne.n	8001788 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800176a:	7d7b      	ldrb	r3, [r7, #21]
 800176c:	b29a      	uxth	r2, r3
 800176e:	7d3b      	ldrb	r3, [r7, #20]
 8001770:	b29b      	uxth	r3, r3
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b29b      	uxth	r3, r3
 8001776:	4413      	add	r3, r2
 8001778:	b29b      	uxth	r3, r3
 800177a:	3301      	adds	r3, #1
 800177c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	029a      	lsls	r2, r3, #10
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e02e      	b.n	80017e6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001788:	7c7b      	ldrb	r3, [r7, #17]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	b2da      	uxtb	r2, r3
 8001790:	7dbb      	ldrb	r3, [r7, #22]
 8001792:	09db      	lsrs	r3, r3, #7
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4413      	add	r3, r2
 8001798:	b2da      	uxtb	r2, r3
 800179a:	7d7b      	ldrb	r3, [r7, #21]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f003 0306 	and.w	r3, r3, #6
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3302      	adds	r3, #2
 80017ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017b0:	7d3b      	ldrb	r3, [r7, #20]
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	7cfb      	ldrb	r3, [r7, #19]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	7cbb      	ldrb	r3, [r7, #18]
 80017c6:	029b      	lsls	r3, r3, #10
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4413      	add	r3, r2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80017d8:	8bfa      	ldrh	r2, [r7, #30]
 80017da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017de:	3b09      	subs	r3, #9
 80017e0:	409a      	lsls	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80017ec:	e056      	b.n	800189c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017fc:	e055      	b.n	80018aa <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017fe:	f7ff fc11 	bl	8001024 <SD_ReadyWait>
 8001802:	4603      	mov	r3, r0
 8001804:	2bff      	cmp	r3, #255	; 0xff
 8001806:	d14b      	bne.n	80018a0 <SD_disk_ioctl+0x234>
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800180e:	e047      	b.n	80018a0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001810:	2100      	movs	r1, #0
 8001812:	2049      	movs	r0, #73	; 0x49
 8001814:	f7ff fceb 	bl	80011ee <SD_SendCmd>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d142      	bne.n	80018a4 <SD_disk_ioctl+0x238>
 800181e:	2110      	movs	r1, #16
 8001820:	6a38      	ldr	r0, [r7, #32]
 8001822:	f7ff fc73 	bl	800110c <SD_RxDataBlock>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d03b      	beq.n	80018a4 <SD_disk_ioctl+0x238>
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001832:	e037      	b.n	80018a4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001834:	2100      	movs	r1, #0
 8001836:	204a      	movs	r0, #74	; 0x4a
 8001838:	f7ff fcd9 	bl	80011ee <SD_SendCmd>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d132      	bne.n	80018a8 <SD_disk_ioctl+0x23c>
 8001842:	2110      	movs	r1, #16
 8001844:	6a38      	ldr	r0, [r7, #32]
 8001846:	f7ff fc61 	bl	800110c <SD_RxDataBlock>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d02b      	beq.n	80018a8 <SD_disk_ioctl+0x23c>
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001856:	e027      	b.n	80018a8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001858:	2100      	movs	r1, #0
 800185a:	207a      	movs	r0, #122	; 0x7a
 800185c:	f7ff fcc7 	bl	80011ee <SD_SendCmd>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d116      	bne.n	8001894 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001866:	2300      	movs	r3, #0
 8001868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800186c:	e00b      	b.n	8001886 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800186e:	6a3c      	ldr	r4, [r7, #32]
 8001870:	1c63      	adds	r3, r4, #1
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	f7ff fbac 	bl	8000fd0 <SPI_RxByte>
 8001878:	4603      	mov	r3, r0
 800187a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800187c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001880:	3301      	adds	r3, #1
 8001882:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001886:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800188a:	2b03      	cmp	r3, #3
 800188c:	d9ef      	bls.n	800186e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001894:	2304      	movs	r3, #4
 8001896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800189a:	e006      	b.n	80018aa <SD_disk_ioctl+0x23e>
			break;
 800189c:	bf00      	nop
 800189e:	e004      	b.n	80018aa <SD_disk_ioctl+0x23e>
			break;
 80018a0:	bf00      	nop
 80018a2:	e002      	b.n	80018aa <SD_disk_ioctl+0x23e>
			break;
 80018a4:	bf00      	nop
 80018a6:	e000      	b.n	80018aa <SD_disk_ioctl+0x23e>
			break;
 80018a8:	bf00      	nop
		}

		DESELECT();
 80018aa:	f7ff fb4f 	bl	8000f4c <DESELECT>
		SPI_RxByte();
 80018ae:	f7ff fb8f 	bl	8000fd0 <SPI_RxByte>
	}

	return res;
 80018b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	372c      	adds	r7, #44	; 0x2c
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000

080018c4 <Headlamp_Init>:
#include <stdio.h>
#include "main.h"

int headlamp_on = 0;

void Headlamp_Init() {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	//HAL_Delay(500);
	HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2101      	movs	r1, #1
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <Headlamp_Init+0x14>)
 80018ce:	f002 fcff 	bl	80042d0 <HAL_GPIO_WritePin>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40020000 	.word	0x40020000

080018dc <toggle_headlamp>:

void toggle_headlamp() {
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_GetState(HEADLAMP_TIMER) == HAL_TIM_STATE_READY) {
 80018e0:	481b      	ldr	r0, [pc, #108]	; (8001950 <toggle_headlamp+0x74>)
 80018e2:	f004 ffc2 	bl	800686a <HAL_TIM_Base_GetState>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d12f      	bne.n	800194c <toggle_headlamp+0x70>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin,
 80018ec:	2200      	movs	r2, #0
 80018ee:	2101      	movs	r1, #1
 80018f0:	4818      	ldr	r0, [pc, #96]	; (8001954 <toggle_headlamp+0x78>)
 80018f2:	f002 fced 	bl	80042d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		if (headlamp_on) {
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <toggle_headlamp+0x7c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00f      	beq.n	800191e <toggle_headlamp+0x42>
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 10000);
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <toggle_headlamp+0x74>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f242 7210 	movw	r2, #10000	; 0x2710
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <toggle_headlamp+0x74>)
 800190a:	f242 7210 	movw	r2, #10000	; 0x2710
 800190e:	60da      	str	r2, [r3, #12]
			printf("Light off\n");
 8001910:	4812      	ldr	r0, [pc, #72]	; (800195c <toggle_headlamp+0x80>)
 8001912:	f00a f8a9 	bl	800ba68 <puts>
			headlamp_on = 0;
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <toggle_headlamp+0x7c>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e00e      	b.n	800193c <toggle_headlamp+0x60>
		} else {
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 2500);
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <toggle_headlamp+0x74>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <toggle_headlamp+0x74>)
 800192a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800192e:	60da      	str	r2, [r3, #12]
			printf("Light on\n");
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <toggle_headlamp+0x84>)
 8001932:	f00a f899 	bl	800ba68 <puts>
			headlamp_on = 1;
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <toggle_headlamp+0x7c>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
		}
		FIX_TIMER_TRIGGER(HEADLAMP_TIMER);
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <toggle_headlamp+0x74>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0201 	mvn.w	r2, #1
 8001944:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 8001946:	4802      	ldr	r0, [pc, #8]	; (8001950 <toggle_headlamp+0x74>)
 8001948:	f004 fdce 	bl	80064e8 <HAL_TIM_Base_Start_IT>
	}
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200003c8 	.word	0x200003c8
 8001954:	40020000 	.word	0x40020000
 8001958:	2000021c 	.word	0x2000021c
 800195c:	0800da28 	.word	0x0800da28
 8001960:	0800da34 	.word	0x0800da34

08001964 <Input_Touched>:
uint8_t status[8];
int input_connected = 1;

extern XBee_Data XBee_Send;

void Input_Touched(int button) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	if (button <= NUM_ELECTRODES) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b04      	cmp	r3, #4
 8001970:	dc04      	bgt.n	800197c <Input_Touched+0x18>
		printf("Button %i pressed\n", button);
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4807      	ldr	r0, [pc, #28]	; (8001994 <Input_Touched+0x30>)
 8001976:	f009 fff1 	bl	800b95c <iprintf>
 800197a:	e002      	b.n	8001982 <Input_Touched+0x1e>
	} else {
		printf("Button not configured\n");
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <Input_Touched+0x34>)
 800197e:	f00a f873 	bl	800ba68 <puts>
	}
	if (button == 2) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d101      	bne.n	800198c <Input_Touched+0x28>
		toggle_headlamp();
 8001988:	f7ff ffa8 	bl	80018dc <toggle_headlamp>
//		toggle_headlamp();
//		break;
//	default:
//		printf("Button not configured\n");
//	}
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	0800da40 	.word	0x0800da40
 8001998:	0800da54 	.word	0x0800da54

0800199c <Input_Released>:

void Input_Released(int button) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	if (button <= NUM_ELECTRODES) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	dc04      	bgt.n	80019b4 <Input_Released+0x18>
		printf("Button %i released\n", button);
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <Input_Released+0x28>)
 80019ae:	f009 ffd5 	bl	800b95c <iprintf>
	} else {
		printf("Button not configured\n");
	}
}
 80019b2:	e002      	b.n	80019ba <Input_Released+0x1e>
		printf("Button not configured\n");
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <Input_Released+0x2c>)
 80019b6:	f00a f857 	bl	800ba68 <puts>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	0800da6c 	.word	0x0800da6c
 80019c8:	0800da54 	.word	0x0800da54

080019cc <Input_Write>:

void Input_Write(uint16_t MemAddress, uint8_t *pData, uint16_t Size) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af04      	add	r7, sp, #16
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	80fb      	strh	r3, [r7, #6]
 80019d8:	4613      	mov	r3, r2
 80019da:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2301      	movs	r3, #1
 80019ee:	21b4      	movs	r1, #180	; 0xb4
 80019f0:	4807      	ldr	r0, [pc, #28]	; (8001a10 <Input_Write+0x44>)
 80019f2:	f002 fde3 	bl	80045bc <HAL_I2C_Mem_Write>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	if (ret != HAL_OK) {
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <Input_Write+0x3a>
		input_connected = 0;
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <Input_Write+0x48>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
	}
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200002c4 	.word	0x200002c4
 8001a14:	20000004 	.word	0x20000004

08001a18 <Input_Write_Byte>:

void Input_Write_Byte(uint16_t MemAddress, uint8_t pData) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460a      	mov	r2, r1
 8001a22:	80fb      	strh	r3, [r7, #6]
 8001a24:	4613      	mov	r3, r2
 8001a26:	717b      	strb	r3, [r7, #5]
	uint8_t buf[] = { pData };
 8001a28:	797b      	ldrb	r3, [r7, #5]
 8001a2a:	733b      	strb	r3, [r7, #12]
	Input_Write(MemAddress, buf, 1);
 8001a2c:	f107 010c 	add.w	r1, r7, #12
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	2201      	movs	r2, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ffc9 	bl	80019cc <Input_Write>
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <Input_Read>:

void Input_Read(uint16_t MemAddress, uint8_t *pData, uint16_t Size) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	80fb      	strh	r3, [r7, #6]
 8001a50:	4613      	mov	r3, r2
 8001a52:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001a54:	88fa      	ldrh	r2, [r7, #6]
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	88bb      	ldrh	r3, [r7, #4]
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2301      	movs	r3, #1
 8001a66:	21b4      	movs	r1, #180	; 0xb4
 8001a68:	4807      	ldr	r0, [pc, #28]	; (8001a88 <Input_Read+0x44>)
 8001a6a:	f002 fea1 	bl	80047b0 <HAL_I2C_Mem_Read>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	if (ret != HAL_OK) {
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <Input_Read+0x3a>
		input_connected = 0;
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <Input_Read+0x48>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
	}
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200002c4 	.word	0x200002c4
 8001a8c:	20000004 	.word	0x20000004

08001a90 <Input_Read_Byte>:

uint8_t Input_Read_Byte(uint16_t MemAddress) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[1];
	Input_Read(MemAddress, buf, 1);
 8001a9a:	f107 010c 	add.w	r1, r7, #12
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ffce 	bl	8001a44 <Input_Read>
	return buf[0];
 8001aa8:	7b3b      	ldrb	r3, [r7, #12]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <Input_Resolve>:

void Input_Resolve() {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
	uint8_t read = Input_Read_Byte(MPR121_TOUCHSTATUS_L);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff ffe8 	bl	8001a90 <Input_Read_Byte>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 8; i++) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	e02a      	b.n	8001b20 <Input_Resolve+0x6c>
		uint8_t button = read & (1 << i);
 8001aca:	2201      	movs	r2, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	b25a      	sxtb	r2, r3
 8001ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	70bb      	strb	r3, [r7, #2]
		if (button && !status[i]) {
 8001ade:	78bb      	ldrb	r3, [r7, #2]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <Input_Resolve+0x44>
 8001ae4:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <Input_Resolve+0x7c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d103      	bne.n	8001af8 <Input_Resolve+0x44>
			Input_Touched(i);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff37 	bl	8001964 <Input_Touched>
 8001af6:	e00b      	b.n	8001b10 <Input_Resolve+0x5c>
		} else if (!button && status[i]) {
 8001af8:	78bb      	ldrb	r3, [r7, #2]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d108      	bne.n	8001b10 <Input_Resolve+0x5c>
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <Input_Resolve+0x7c>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <Input_Resolve+0x5c>
			Input_Released(i);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff46 	bl	800199c <Input_Released>
		}
		status[i] = button;
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <Input_Resolve+0x7c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	78ba      	ldrb	r2, [r7, #2]
 8001b18:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	ddd1      	ble.n	8001aca <Input_Resolve+0x16>
	}
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000220 	.word	0x20000220

08001b34 <Input_Set_Thresholds>:

void Input_Set_Thresholds(uint8_t touch, uint8_t release) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 12; i++) {
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e017      	b.n	8001b7a <Input_Set_Thresholds+0x46>
		Input_Write_Byte(MPR121_TOUCHTH_0 + 2 * i, touch);
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3341      	adds	r3, #65	; 0x41
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	79fa      	ldrb	r2, [r7, #7]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff5c 	bl	8001a18 <Input_Write_Byte>
		Input_Write_Byte(MPR121_RELEASETH_0 + 2 * i, release);
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	3321      	adds	r3, #33	; 0x21
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	79ba      	ldrb	r2, [r7, #6]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff52 	bl	8001a18 <Input_Write_Byte>
	for (uint8_t i = 0; i < 12; i++) {
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	3301      	adds	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b0b      	cmp	r3, #11
 8001b7e:	d9e4      	bls.n	8001b4a <Input_Set_Thresholds+0x16>
	}
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <Input_Init>:

void Input_Init() {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
	Input_Write_Byte(MPR121_SOFTRESET, 0x63);
 8001b92:	2163      	movs	r1, #99	; 0x63
 8001b94:	2080      	movs	r0, #128	; 0x80
 8001b96:	f7ff ff3f 	bl	8001a18 <Input_Write_Byte>
	HAL_Delay(1);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f001 fa7a 	bl	8003094 <HAL_Delay>
	Input_Write_Byte(MPR121_ECR, 0x00);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	205e      	movs	r0, #94	; 0x5e
 8001ba4:	f7ff ff38 	bl	8001a18 <Input_Write_Byte>
	Input_Set_Thresholds(MPR121_TOUCH_THRESHOLD, MPR121_RELEASE_THRESHOLD);
 8001ba8:	2106      	movs	r1, #6
 8001baa:	200c      	movs	r0, #12
 8001bac:	f7ff ffc2 	bl	8001b34 <Input_Set_Thresholds>
	Input_Write_Byte(MPR121_MHDR, 0x01);
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	202b      	movs	r0, #43	; 0x2b
 8001bb4:	f7ff ff30 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_NHDR, 0x01);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	202c      	movs	r0, #44	; 0x2c
 8001bbc:	f7ff ff2c 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_NCLR, 0x0E);
 8001bc0:	210e      	movs	r1, #14
 8001bc2:	202d      	movs	r0, #45	; 0x2d
 8001bc4:	f7ff ff28 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_FDLR, 0x00);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	202e      	movs	r0, #46	; 0x2e
 8001bcc:	f7ff ff24 	bl	8001a18 <Input_Write_Byte>

	Input_Write_Byte(MPR121_MHDF, 0x01);
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	202f      	movs	r0, #47	; 0x2f
 8001bd4:	f7ff ff20 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_NHDF, 0x05);
 8001bd8:	2105      	movs	r1, #5
 8001bda:	2030      	movs	r0, #48	; 0x30
 8001bdc:	f7ff ff1c 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_NCLF, 0x01);
 8001be0:	2101      	movs	r1, #1
 8001be2:	2031      	movs	r0, #49	; 0x31
 8001be4:	f7ff ff18 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_FDLF, 0x00);
 8001be8:	2100      	movs	r1, #0
 8001bea:	2032      	movs	r0, #50	; 0x32
 8001bec:	f7ff ff14 	bl	8001a18 <Input_Write_Byte>

	Input_Write_Byte(MPR121_NHDT, 0x00);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2033      	movs	r0, #51	; 0x33
 8001bf4:	f7ff ff10 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_NCLT, 0x00);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2034      	movs	r0, #52	; 0x34
 8001bfc:	f7ff ff0c 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_FDLT, 0x00);
 8001c00:	2100      	movs	r1, #0
 8001c02:	2035      	movs	r0, #53	; 0x35
 8001c04:	f7ff ff08 	bl	8001a18 <Input_Write_Byte>

	Input_Write_Byte(MPR121_DEBOUNCE, 0);
 8001c08:	2100      	movs	r1, #0
 8001c0a:	205b      	movs	r0, #91	; 0x5b
 8001c0c:	f7ff ff04 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 8001c10:	2110      	movs	r1, #16
 8001c12:	205c      	movs	r0, #92	; 0x5c
 8001c14:	f7ff ff00 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 8001c18:	2120      	movs	r1, #32
 8001c1a:	205d      	movs	r0, #93	; 0x5d
 8001c1c:	f7ff fefc 	bl	8001a18 <Input_Write_Byte>

	Input_Write_Byte(MPR121_AUTOCONFIG0, 0x0B);
 8001c20:	210b      	movs	r1, #11
 8001c22:	207b      	movs	r0, #123	; 0x7b
 8001c24:	f7ff fef8 	bl	8001a18 <Input_Write_Byte>

	// correct values for Vdd = 3.3V
	Input_Write_Byte(MPR121_UPLIMIT, 200);     // ((Vdd - 0.7)/Vdd) * 256
 8001c28:	21c8      	movs	r1, #200	; 0xc8
 8001c2a:	207d      	movs	r0, #125	; 0x7d
 8001c2c:	f7ff fef4 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_TARGETLIMIT, 180); // UPLIMIT * 0.9
 8001c30:	21b4      	movs	r1, #180	; 0xb4
 8001c32:	207f      	movs	r0, #127	; 0x7f
 8001c34:	f7ff fef0 	bl	8001a18 <Input_Write_Byte>
	Input_Write_Byte(MPR121_LOWLIMIT, 130);    // UPLIMIT * 0.65
 8001c38:	2182      	movs	r1, #130	; 0x82
 8001c3a:	207e      	movs	r0, #126	; 0x7e
 8001c3c:	f7ff feec 	bl	8001a18 <Input_Write_Byte>

	// enable X electrodes and start MPR121
	uint8_t ECR_SETTING = 0b10000000 + NUM_ELECTRODES; // 5 bits for baseline tracking & proximity disabled + N electrodes running
 8001c40:	2384      	movs	r3, #132	; 0x84
 8001c42:	71fb      	strb	r3, [r7, #7]
	Input_Write_Byte(MPR121_ECR, ECR_SETTING); // start with above ECR setting
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	4619      	mov	r1, r3
 8001c48:	205e      	movs	r0, #94	; 0x5e
 8001c4a:	f7ff fee5 	bl	8001a18 <Input_Write_Byte>
	if (input_connected) {
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <Input_Init+0xe0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <Input_Init+0xd2>
		printf("Capacitive touch board initialized\n");
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <Input_Init+0xe4>)
 8001c58:	f009 ff06 	bl	800ba68 <puts>
	} else {
		printf("Capacitive touch board not connected\n");
	}
}
 8001c5c:	e002      	b.n	8001c64 <Input_Init+0xd8>
		printf("Capacitive touch board not connected\n");
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <Input_Init+0xe8>)
 8001c60:	f009 ff02 	bl	800ba68 <puts>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	0800da80 	.word	0x0800da80
 8001c74:	0800daa4 	.word	0x0800daa4

08001c78 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c7c:	f001 f998 	bl	8002fb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c80:	f000 f822 	bl	8001cc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c84:	f000 fa6c 	bl	8002160 <MX_GPIO_Init>
	MX_DMA_Init();
 8001c88:	f000 fa42 	bl	8002110 <MX_DMA_Init>
	MX_I2C1_Init();
 8001c8c:	f000 f8da 	bl	8001e44 <MX_I2C1_Init>
	MX_SPI2_Init();
 8001c90:	f000 f934 	bl	8001efc <MX_SPI2_Init>
	MX_SPI3_Init();
 8001c94:	f000 f968 	bl	8001f68 <MX_SPI3_Init>
	MX_USART2_UART_Init();
 8001c98:	f000 fa10 	bl	80020bc <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8001c9c:	f006 f95a 	bl	8007f54 <MX_FATFS_Init>
	MX_ADC1_Init();
 8001ca0:	f000 f87e 	bl	8001da0 <MX_ADC1_Init>
	MX_TIM10_Init();
 8001ca4:	f000 f998 	bl	8001fd8 <MX_TIM10_Init>
	MX_USART1_UART_Init();
 8001ca8:	f000 f9de 	bl	8002068 <MX_USART1_UART_Init>
	MX_I2C3_Init();
 8001cac:	f000 f8f8 	bl	8001ea0 <MX_I2C3_Init>
	MX_TIM11_Init();
 8001cb0:	f000 f9b6 	bl	8002020 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
//	XBee_Init();
	Input_Init();
 8001cb4:	f7ff ff6a 	bl	8001b8c <Input_Init>
//	FS_Init();
	Headlamp_Init();
 8001cb8:	f7ff fe04 	bl	80018c4 <Headlamp_Init>

//	XBee_Broadcast_Identity("/me.wav");

	printf("System ready\n");
 8001cbc:	4801      	ldr	r0, [pc, #4]	; (8001cc4 <main+0x4c>)
 8001cbe:	f009 fed3 	bl	800ba68 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001cc2:	e7fe      	b.n	8001cc2 <main+0x4a>
 8001cc4:	0800db1c 	.word	0x0800db1c

08001cc8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b094      	sub	sp, #80	; 0x50
 8001ccc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	2230      	movs	r2, #48	; 0x30
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f009 f8ee 	bl	800aeb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <SystemClock_Config+0xd0>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <SystemClock_Config+0xd0>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <SystemClock_Config+0xd0>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <SystemClock_Config+0xd4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d14:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <SystemClock_Config+0xd4>)
 8001d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <SystemClock_Config+0xd4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d30:	2310      	movs	r3, #16
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d34:	2302      	movs	r3, #2
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001d40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d44:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d46:	2304      	movs	r3, #4
 8001d48:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 faae 	bl	80052b4 <HAL_RCC_OscConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <SystemClock_Config+0x9a>
		Error_Handler();
 8001d5e:	f000 fabd 	bl	80022dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d62:	230f      	movs	r3, #15
 8001d64:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d66:	2302      	movs	r3, #2
 8001d68:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fd10 	bl	80057a4 <HAL_RCC_ClockConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0xc6>
		Error_Handler();
 8001d8a:	f000 faa7 	bl	80022dc <Error_Handler>
	}
}
 8001d8e:	bf00      	nop
 8001d90:	3750      	adds	r7, #80	; 0x50
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40007000 	.word	0x40007000

08001da0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001da6:	463b      	mov	r3, r7
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <MX_ADC1_Init+0x9c>)
 8001db6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001dba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dbe:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001de2:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <MX_ADC1_Init+0xa0>)
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001e02:	f001 f96b 	bl	80030dc <HAL_ADC_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001e0c:	f000 fa66 	bl	80022dc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001e10:	2308      	movs	r3, #8
 8001e12:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_ADC1_Init+0x98>)
 8001e22:	f001 f99f 	bl	8003164 <HAL_ADC_ConfigChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001e2c:	f000 fa56 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000228 	.word	0x20000228
 8001e3c:	40012000 	.word	0x40012000
 8001e40:	0f000001 	.word	0x0f000001

08001e44 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e4a:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <MX_I2C1_Init+0x54>)
 8001e4c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <MX_I2C1_Init+0x58>)
 8001e52:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e66:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e82:	f002 fa57 	bl	8004334 <HAL_I2C_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001e8c:	f000 fa26 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000270 	.word	0x20000270
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	000186a0 	.word	0x000186a0

08001ea0 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <MX_I2C3_Init+0x50>)
 8001ea6:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <MX_I2C3_Init+0x54>)
 8001ea8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_I2C3_Init+0x50>)
 8001eac:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <MX_I2C3_Init+0x58>)
 8001eae:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_I2C3_Init+0x50>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_I2C3_Init+0x50>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_I2C3_Init+0x50>)
 8001ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ec2:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <MX_I2C3_Init+0x50>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_I2C3_Init+0x50>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <MX_I2C3_Init+0x50>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_I2C3_Init+0x50>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <MX_I2C3_Init+0x50>)
 8001ede:	f002 fa29 	bl	8004334 <HAL_I2C_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_I2C3_Init+0x4c>
		Error_Handler();
 8001ee8:	f000 f9f8 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200002c4 	.word	0x200002c4
 8001ef4:	40005c00 	.word	0x40005c00
 8001ef8:	000186a0 	.word	0x000186a0

08001efc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f02:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <MX_SPI2_Init+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f0c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f30:	2210      	movs	r2, #16
 8001f32:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f48:	220a      	movs	r2, #10
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_SPI2_Init+0x64>)
 8001f4e:	f003 fe49 	bl	8005be4 <HAL_SPI_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_SPI2_Init+0x60>
		Error_Handler();
 8001f58:	f000 f9c0 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000318 	.word	0x20000318
 8001f64:	40003800 	.word	0x40003800

08001f68 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001f6e:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <MX_SPI3_Init+0x6c>)
 8001f70:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f78:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f86:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9a:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001f9e:	2218      	movs	r2, #24
 8001fa0:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001fb6:	220a      	movs	r2, #10
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_SPI3_Init+0x68>)
 8001fbc:	f003 fe12 	bl	8005be4 <HAL_SPI_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_SPI3_Init+0x62>
		Error_Handler();
 8001fc6:	f000 f989 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000370 	.word	0x20000370
 8001fd4:	40003c00 	.word	0x40003c00

08001fd8 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_TIM10_Init+0x40>)
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <MX_TIM10_Init+0x44>)
 8001fe0:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 8400 - 1;
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <MX_TIM10_Init+0x40>)
 8001fe4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001fe8:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <MX_TIM10_Init+0x40>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <MX_TIM10_Init+0x40>)
 8001ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff6:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <MX_TIM10_Init+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <MX_TIM10_Init+0x40>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <MX_TIM10_Init+0x40>)
 8002006:	f004 fa1f 	bl	8006448 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM10_Init+0x3c>
		Error_Handler();
 8002010:	f000 f964 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200003c8 	.word	0x200003c8
 800201c:	40014400 	.word	0x40014400

08002020 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_TIM11_Init+0x40>)
 8002026:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <MX_TIM11_Init+0x44>)
 8002028:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 8400 - 1;
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <MX_TIM11_Init+0x40>)
 800202c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002030:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_TIM11_Init+0x40>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_TIM11_Init+0x40>)
 800203a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800203e:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <MX_TIM11_Init+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_TIM11_Init+0x40>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <MX_TIM11_Init+0x40>)
 800204e:	f004 f9fb 	bl	8006448 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM11_Init+0x3c>
		Error_Handler();
 8002058:	f000 f940 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000410 	.word	0x20000410
 8002064:	40014800 	.word	0x40014800

08002068 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <MX_USART1_UART_Init+0x50>)
 8002070:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002078:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800208e:	220c      	movs	r2, #12
 8002090:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002094:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002098:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80020a0:	4804      	ldr	r0, [pc, #16]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 80020a2:	f004 fc85 	bl	80069b0 <HAL_UART_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART1_UART_Init+0x48>
		Error_Handler();
 80020ac:	f000 f916 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000458 	.word	0x20000458
 80020b8:	40011000 	.word	0x40011000

080020bc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <MX_USART2_UART_Init+0x50>)
 80020c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020f4:	f004 fc5c 	bl	80069b0 <HAL_UART_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80020fe:	f000 f8ed 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000049c 	.word	0x2000049c
 800210c:	40004400 	.word	0x40004400

08002110 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <MX_DMA_Init+0x4c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a0f      	ldr	r2, [pc, #60]	; (800215c <MX_DMA_Init+0x4c>)
 8002120:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <MX_DMA_Init+0x4c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2101      	movs	r1, #1
 8002136:	203a      	movs	r0, #58	; 0x3a
 8002138:	f001 fb0d 	bl	8003756 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800213c:	203a      	movs	r0, #58	; 0x3a
 800213e:	f001 fb26 	bl	800378e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2046      	movs	r0, #70	; 0x46
 8002148:	f001 fb05 	bl	8003756 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800214c:	2046      	movs	r0, #70	; 0x46
 800214e:	f001 fb1e 	bl	800378e <HAL_NVIC_EnableIRQ>

}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
 8002174:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <MX_GPIO_Init+0x148>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a4a      	ldr	r2, [pc, #296]	; (80022a8 <MX_GPIO_Init+0x148>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <MX_GPIO_Init+0x148>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b44      	ldr	r3, [pc, #272]	; (80022a8 <MX_GPIO_Init+0x148>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a43      	ldr	r2, [pc, #268]	; (80022a8 <MX_GPIO_Init+0x148>)
 800219c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <MX_GPIO_Init+0x148>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <MX_GPIO_Init+0x148>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a3c      	ldr	r2, [pc, #240]	; (80022a8 <MX_GPIO_Init+0x148>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <MX_GPIO_Init+0x148>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <MX_GPIO_Init+0x148>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a35      	ldr	r2, [pc, #212]	; (80022a8 <MX_GPIO_Init+0x148>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <MX_GPIO_Init+0x148>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_SPI2_CS_GPIO_Port, SD_SPI2_CS_Pin, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2102      	movs	r1, #2
 80021ea:	4830      	ldr	r0, [pc, #192]	; (80022ac <MX_GPIO_Init+0x14c>)
 80021ec:	f002 f870 	bl	80042d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, HEADLAMP_OUT_Pin | LD2_Pin, GPIO_PIN_RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2121      	movs	r1, #33	; 0x21
 80021f4:	482e      	ldr	r0, [pc, #184]	; (80022b0 <MX_GPIO_Init+0x150>)
 80021f6:	f002 f86b 	bl	80042d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2104      	movs	r1, #4
 80021fe:	482d      	ldr	r0, [pc, #180]	; (80022b4 <MX_GPIO_Init+0x154>)
 8002200:	f002 f866 	bl	80042d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : B1_Pin INPUT_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | INPUT_INT1_Pin;
 8002204:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8002208:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800220a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800220e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	4824      	ldr	r0, [pc, #144]	; (80022ac <MX_GPIO_Init+0x14c>)
 800221c:	f001 fed4 	bl	8003fc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_SPI2_CS_Pin */
	GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 8002220:	2302      	movs	r3, #2
 8002222:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	481d      	ldr	r0, [pc, #116]	; (80022ac <MX_GPIO_Init+0x14c>)
 8002238:	f001 fec6 	bl	8003fc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : HEADLAMP_OUT_Pin */
	GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin;
 800223c:	2301      	movs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002240:	2311      	movs	r3, #17
 8002242:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HEADLAMP_OUT_GPIO_Port, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	4817      	ldr	r0, [pc, #92]	; (80022b0 <MX_GPIO_Init+0x150>)
 8002254:	f001 feb8 	bl	8003fc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002258:	2320      	movs	r3, #32
 800225a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	4810      	ldr	r0, [pc, #64]	; (80022b0 <MX_GPIO_Init+0x150>)
 8002270:	f001 feaa 	bl	8003fc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DAC_SPI2_CS_Pin */
	GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 8002274:	2304      	movs	r3, #4
 8002276:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002278:	2301      	movs	r3, #1
 800227a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4619      	mov	r1, r3
 800228a:	480a      	ldr	r0, [pc, #40]	; (80022b4 <MX_GPIO_Init+0x154>)
 800228c:	f001 fe9c 	bl	8003fc8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2101      	movs	r1, #1
 8002294:	2017      	movs	r0, #23
 8002296:	f001 fa5e 	bl	8003756 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800229a:	2017      	movs	r0, #23
 800229c:	f001 fa77 	bl	800378e <HAL_NVIC_EnableIRQ>

}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400

080022b8 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80022c0:	1d39      	adds	r1, r7, #4
 80022c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c6:	2201      	movs	r2, #1
 80022c8:	4803      	ldr	r0, [pc, #12]	; (80022d8 <__io_putchar+0x20>)
 80022ca:	f004 fbbe 	bl	8006a4a <HAL_UART_Transmit>
	return ch;
 80022ce:	687b      	ldr	r3, [r7, #4]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000049c 	.word	0x2000049c

080022dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022e4:	e7fe      	b.n	80022e4 <Error_Handler+0x8>
	...

080022e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_MspInit+0x4c>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <HAL_MspInit+0x4c>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_MspInit+0x4c>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_MspInit+0x4c>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_MspInit+0x4c>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_MspInit+0x4c>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002326:	2006      	movs	r0, #6
 8002328:	f001 fa0a 	bl	8003740 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800

08002338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <HAL_ADC_MspInit+0xb0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d141      	bne.n	80023de <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b23      	ldr	r3, [pc, #140]	; (80023ec <HAL_ADC_MspInit+0xb4>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a22      	ldr	r2, [pc, #136]	; (80023ec <HAL_ADC_MspInit+0xb4>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_ADC_MspInit+0xb4>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <HAL_ADC_MspInit+0xb4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_ADC_MspInit+0xb4>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_ADC_MspInit+0xb4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_ADC_MspInit+0xb4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a14      	ldr	r2, [pc, #80]	; (80023ec <HAL_ADC_MspInit+0xb4>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_ADC_MspInit+0xb4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 80023ae:	2301      	movs	r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b2:	2303      	movs	r3, #3
 80023b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	480b      	ldr	r0, [pc, #44]	; (80023f0 <HAL_ADC_MspInit+0xb8>)
 80023c2:	f001 fe01 	bl	8003fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 80023c6:	2303      	movs	r3, #3
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ca:	2303      	movs	r3, #3
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	4806      	ldr	r0, [pc, #24]	; (80023f4 <HAL_ADC_MspInit+0xbc>)
 80023da:	f001 fdf5 	bl	8003fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40012000 	.word	0x40012000
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020400 	.word	0x40020400

080023f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08c      	sub	sp, #48	; 0x30
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a42      	ldr	r2, [pc, #264]	; (8002520 <HAL_I2C_MspInit+0x128>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d12c      	bne.n	8002474 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a40      	ldr	r2, [pc, #256]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002436:	23c0      	movs	r3, #192	; 0xc0
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800243a:	2312      	movs	r3, #18
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002446:	2304      	movs	r3, #4
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	4619      	mov	r1, r3
 8002450:	4835      	ldr	r0, [pc, #212]	; (8002528 <HAL_I2C_MspInit+0x130>)
 8002452:	f001 fdb9 	bl	8003fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	4b32      	ldr	r3, [pc, #200]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a31      	ldr	r2, [pc, #196]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 8002460:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002472:	e050      	b.n	8002516 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2c      	ldr	r2, [pc, #176]	; (800252c <HAL_I2C_MspInit+0x134>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d14b      	bne.n	8002516 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a27      	ldr	r2, [pc, #156]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b25      	ldr	r3, [pc, #148]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a20      	ldr	r2, [pc, #128]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024bc:	2312      	movs	r3, #18
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024c8:	2304      	movs	r3, #4
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	4619      	mov	r1, r3
 80024d2:	4817      	ldr	r0, [pc, #92]	; (8002530 <HAL_I2C_MspInit+0x138>)
 80024d4:	f001 fd78 	bl	8003fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024de:	2312      	movs	r3, #18
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024ea:	2304      	movs	r3, #4
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	4619      	mov	r1, r3
 80024f4:	480f      	ldr	r0, [pc, #60]	; (8002534 <HAL_I2C_MspInit+0x13c>)
 80024f6:	f001 fd67 	bl	8003fc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 8002504:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_I2C_MspInit+0x12c>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
}
 8002516:	bf00      	nop
 8002518:	3730      	adds	r7, #48	; 0x30
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40005400 	.word	0x40005400
 8002524:	40023800 	.word	0x40023800
 8002528:	40020400 	.word	0x40020400
 800252c:	40005c00 	.word	0x40005c00
 8002530:	40020800 	.word	0x40020800
 8002534:	40020000 	.word	0x40020000

08002538 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 031c 	add.w	r3, r7, #28
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a42      	ldr	r2, [pc, #264]	; (8002660 <HAL_SPI_MspInit+0x128>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d14b      	bne.n	80025f2 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	4b41      	ldr	r3, [pc, #260]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 8002564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a39      	ldr	r2, [pc, #228]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a32      	ldr	r2, [pc, #200]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b30      	ldr	r3, [pc, #192]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 80025ae:	230c      	movs	r3, #12
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025be:	2305      	movs	r3, #5
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	4619      	mov	r1, r3
 80025c8:	4827      	ldr	r0, [pc, #156]	; (8002668 <HAL_SPI_MspInit+0x130>)
 80025ca:	f001 fcfd 	bl	8003fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 80025ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025e0:	2305      	movs	r3, #5
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80025e4:	f107 031c 	add.w	r3, r7, #28
 80025e8:	4619      	mov	r1, r3
 80025ea:	4820      	ldr	r0, [pc, #128]	; (800266c <HAL_SPI_MspInit+0x134>)
 80025ec:	f001 fcec 	bl	8003fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80025f0:	e031      	b.n	8002656 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <HAL_SPI_MspInit+0x138>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d12c      	bne.n	8002656 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 8002606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260a:	6413      	str	r3, [r2, #64]	; 0x40
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6313      	str	r3, [r2, #48]	; 0x30
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_SPI_MspInit+0x12c>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DAC_SPI3_SCK_Pin|DAC_SPI3_MOSI_Pin;
 8002634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002642:	2303      	movs	r3, #3
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002646:	2306      	movs	r3, #6
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	4805      	ldr	r0, [pc, #20]	; (8002668 <HAL_SPI_MspInit+0x130>)
 8002652:	f001 fcb9 	bl	8003fc8 <HAL_GPIO_Init>
}
 8002656:	bf00      	nop
 8002658:	3730      	adds	r7, #48	; 0x30
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40003800 	.word	0x40003800
 8002664:	40023800 	.word	0x40023800
 8002668:	40020800 	.word	0x40020800
 800266c:	40020400 	.word	0x40020400
 8002670:	40003c00 	.word	0x40003c00

08002674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_TIM_Base_MspInit+0x80>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d116      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_TIM_Base_MspInit+0x84>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a1a      	ldr	r2, [pc, #104]	; (80026f8 <HAL_TIM_Base_MspInit+0x84>)
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_TIM_Base_MspInit+0x84>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2019      	movs	r0, #25
 80026a8:	f001 f855 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026ac:	2019      	movs	r0, #25
 80026ae:	f001 f86e 	bl	800378e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80026b2:	e01a      	b.n	80026ea <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_TIM_Base_MspInit+0x88>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d115      	bne.n	80026ea <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <HAL_TIM_Base_MspInit+0x84>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <HAL_TIM_Base_MspInit+0x84>)
 80026c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_TIM_Base_MspInit+0x84>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	201a      	movs	r0, #26
 80026e0:	f001 f839 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80026e4:	201a      	movs	r0, #26
 80026e6:	f001 f852 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40014800 	.word	0x40014800

08002700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	; 0x30
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a65      	ldr	r2, [pc, #404]	; (80028b4 <HAL_UART_MspInit+0x1b4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	f040 8092 	bne.w	8002848 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	4b63      	ldr	r3, [pc, #396]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	4a62      	ldr	r2, [pc, #392]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 800272e:	f043 0310 	orr.w	r3, r3, #16
 8002732:	6453      	str	r3, [r2, #68]	; 0x44
 8002734:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4a5b      	ldr	r2, [pc, #364]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6313      	str	r3, [r2, #48]	; 0x30
 8002750:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = XBEE_USART_TX_Pin|XBEE_USART_RX_Pin|XBEE_USART_CTS_Pin|XBEE_USART_RTS_Pin;
 800275c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800276e:	2307      	movs	r3, #7
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	f107 031c 	add.w	r3, r7, #28
 8002776:	4619      	mov	r1, r3
 8002778:	4850      	ldr	r0, [pc, #320]	; (80028bc <HAL_UART_MspInit+0x1bc>)
 800277a:	f001 fc25 	bl	8003fc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800277e:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <HAL_UART_MspInit+0x1c4>)
 8002782:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002784:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 8002786:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800278a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800278c:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002792:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 8002794:	2200      	movs	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002798:	4b49      	ldr	r3, [pc, #292]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 800279a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800279e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027a0:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027a6:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80027ac:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027b2:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b8:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80027be:	4840      	ldr	r0, [pc, #256]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 80027c0:	f001 f800 	bl	80037c4 <HAL_DMA_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80027ca:	f7ff fd87 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a3b      	ldr	r2, [pc, #236]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
 80027d4:	4a3a      	ldr	r2, [pc, #232]	; (80028c0 <HAL_UART_MspInit+0x1c0>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 80027dc:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <HAL_UART_MspInit+0x1cc>)
 80027de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80027e0:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 80027e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ee:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 80027f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002802:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002814:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 8002816:	2200      	movs	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800281a:	482b      	ldr	r0, [pc, #172]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 800281c:	f000 ffd2 	bl	80037c4 <HAL_DMA_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002826:	f7ff fd59 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a26      	ldr	r2, [pc, #152]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 800282e:	635a      	str	r2, [r3, #52]	; 0x34
 8002830:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <HAL_UART_MspInit+0x1c8>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2101      	movs	r1, #1
 800283a:	2025      	movs	r0, #37	; 0x25
 800283c:	f000 ff8b 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002840:	2025      	movs	r0, #37	; 0x25
 8002842:	f000 ffa4 	bl	800378e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002846:	e030      	b.n	80028aa <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <HAL_UART_MspInit+0x1d0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d12b      	bne.n	80028aa <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 800285c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_UART_MspInit+0x1b8>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 800288a:	230c      	movs	r3, #12
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800289a:	2307      	movs	r3, #7
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	4805      	ldr	r0, [pc, #20]	; (80028bc <HAL_UART_MspInit+0x1bc>)
 80028a6:	f001 fb8f 	bl	8003fc8 <HAL_GPIO_Init>
}
 80028aa:	bf00      	nop
 80028ac:	3730      	adds	r7, #48	; 0x30
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40011000 	.word	0x40011000
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020000 	.word	0x40020000
 80028c0:	200004e0 	.word	0x200004e0
 80028c4:	40026440 	.word	0x40026440
 80028c8:	20000540 	.word	0x20000540
 80028cc:	400264b8 	.word	0x400264b8
 80028d0:	40004400 	.word	0x40004400

080028d4 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile extern uint8_t Timer1, Timer2;

void SDTimer_Handler() {
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

	if (Timer1 > 0) {
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <SDTimer_Handler+0x40>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <SDTimer_Handler+0x1c>
		--Timer1;
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <SDTimer_Handler+0x40>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <SDTimer_Handler+0x40>)
 80028ee:	701a      	strb	r2, [r3, #0]
	}

	if (Timer2 > 0) {
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <SDTimer_Handler+0x44>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <SDTimer_Handler+0x34>
		--Timer2;
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <SDTimer_Handler+0x44>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SDTimer_Handler+0x44>)
 8002906:	701a      	strb	r2, [r3, #0]
	}
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000214 	.word	0x20000214
 8002918:	20000216 	.word	0x20000216

0800291c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002920:	e7fe      	b.n	8002920 <NMI_Handler+0x4>

08002922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <HardFault_Handler+0x4>

08002928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <MemManage_Handler+0x4>

0800292e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002932:	e7fe      	b.n	8002932 <BusFault_Handler+0x4>

08002934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <UsageFault_Handler+0x4>

0800293a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <SysTick_Handler+0x30>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3301      	adds	r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <SysTick_Handler+0x30>)
 8002974:	701a      	strb	r2, [r3, #0]

	if (FatFsCnt >= 10) {
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <SysTick_Handler+0x30>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b09      	cmp	r3, #9
 800297e:	d904      	bls.n	800298a <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SysTick_Handler+0x30>)
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002986:	f7ff ffa5 	bl	80028d4 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298a:	f000 fb63 	bl	8003054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200016c4 	.word	0x200016c4

08002998 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT_INT1_Pin);
 800299c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029a0:	f001 fcb0 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029ae:	f003 fe2c 	bl	800660a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200003c8 	.word	0x200003c8

080029bc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80029c2:	f003 fe22 	bl	800660a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000410 	.word	0x20000410

080029d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <USART1_IRQHandler+0x10>)
 80029d6:	f004 f979 	bl	8006ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000458 	.word	0x20000458

080029e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <DMA2_Stream2_IRQHandler+0x10>)
 80029ea:	f001 f883 	bl	8003af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200004e0 	.word	0x200004e0

080029f8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <DMA2_Stream7_IRQHandler+0x10>)
 80029fe:	f001 f879 	bl	8003af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000540 	.word	0x20000540

08002a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
	return 1;
 8002a10:	2301      	movs	r3, #1
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <_kill>:

int _kill(int pid, int sig)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a26:	f008 fa0d 	bl	800ae44 <__errno>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2216      	movs	r2, #22
 8002a2e:	601a      	str	r2, [r3, #0]
	return -1;
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_exit>:

void _exit (int status)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a44:	f04f 31ff 	mov.w	r1, #4294967295
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ffe7 	bl	8002a1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a4e:	e7fe      	b.n	8002a4e <_exit+0x12>

08002a50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	e00a      	b.n	8002a78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a62:	f3af 8000 	nop.w
 8002a66:	4601      	mov	r1, r0
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	60ba      	str	r2, [r7, #8]
 8002a6e:	b2ca      	uxtb	r2, r1
 8002a70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	dbf0      	blt.n	8002a62 <_read+0x12>
	}

return len;
 8002a80:	687b      	ldr	r3, [r7, #4]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e009      	b.n	8002ab0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	60ba      	str	r2, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fc07 	bl	80022b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3301      	adds	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	dbf1      	blt.n	8002a9c <_write+0x12>
	}
	return len;
 8002ab8:	687b      	ldr	r3, [r7, #4]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_close>:

int _close(int file)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
	return -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aea:	605a      	str	r2, [r3, #4]
	return 0;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <_isatty>:

int _isatty(int file)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
	return 1;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <_sbrk+0x5c>)
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <_sbrk+0x60>)
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b40:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <_sbrk+0x64>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <_sbrk+0x64>)
 8002b4a:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <_sbrk+0x68>)
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <_sbrk+0x64>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d207      	bcs.n	8002b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b5c:	f008 f972 	bl	800ae44 <__errno>
 8002b60:	4603      	mov	r3, r0
 8002b62:	220c      	movs	r2, #12
 8002b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6a:	e009      	b.n	8002b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <_sbrk+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b72:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <_sbrk+0x64>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <_sbrk+0x64>)
 8002b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20018000 	.word	0x20018000
 8002b8c:	00000400 	.word	0x00000400
 8002b90:	200016c8 	.word	0x200016c8
 8002b94:	200019b8 	.word	0x200019b8

08002b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <SystemInit+0x20>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <SystemInit+0x20>)
 8002ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <XBee_Transmit_File>:
	}
	printf("Already transmitting file\n");
	return -1;
}

void XBee_Transmit_File() {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	printf("Transmitting file\n");
 8002bc0:	4808      	ldr	r0, [pc, #32]	; (8002be4 <XBee_Transmit_File+0x28>)
 8002bc2:	f008 ff51 	bl	800ba68 <puts>
	HAL_UART_Transmit_DMA(XBEE_UART, file_buf, fsize);
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <XBee_Transmit_File+0x2c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a08      	ldr	r2, [pc, #32]	; (8002bec <XBee_Transmit_File+0x30>)
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	b292      	uxth	r2, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <XBee_Transmit_File+0x34>)
 8002bd4:	f003 ffcc 	bl	8006b70 <HAL_UART_Transmit_DMA>
	transmitting_file = 2;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <XBee_Transmit_File+0x38>)
 8002bda:	2202      	movs	r2, #2
 8002bdc:	601a      	str	r2, [r3, #0]
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	0800dbbc 	.word	0x0800dbbc
 8002be8:	20001744 	.word	0x20001744
 8002bec:	20001748 	.word	0x20001748
 8002bf0:	20000458 	.word	0x20000458
 8002bf4:	2000173c 	.word	0x2000173c

08002bf8 <XBee_Receive>:

void XBee_Receive(XBee_Data *data) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8002c00:	226c      	movs	r2, #108	; 0x6c
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <XBee_Receive+0x1c>)
 8002c06:	f004 f831 	bl	8006c6c <HAL_UART_Receive_DMA>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000458 	.word	0x20000458

08002c18 <XBee_Receive_File>:

void XBee_Receive_File() {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
	if (!receiving_file) {
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <XBee_Receive_File+0x48>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d118      	bne.n	8002c56 <XBee_Receive_File+0x3e>
		printf("Receiving file\n");
 8002c24:	480f      	ldr	r0, [pc, #60]	; (8002c64 <XBee_Receive_File+0x4c>)
 8002c26:	f008 ff1f 	bl	800ba68 <puts>
		file_buf = (uint8_t *) malloc(rsize);
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <XBee_Receive_File+0x50>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f008 f932 	bl	800ae98 <malloc>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <XBee_Receive_File+0x54>)
 8002c3a:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(XBEE_UART, file_buf, rsize);
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <XBee_Receive_File+0x54>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a09      	ldr	r2, [pc, #36]	; (8002c68 <XBee_Receive_File+0x50>)
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	b292      	uxth	r2, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	4809      	ldr	r0, [pc, #36]	; (8002c70 <XBee_Receive_File+0x58>)
 8002c4a:	f004 f80f 	bl	8006c6c <HAL_UART_Receive_DMA>
		receiving_file = 1;
 8002c4e:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <XBee_Receive_File+0x48>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
	} else {
		printf("Already receiving file\n");
	}
}
 8002c54:	e002      	b.n	8002c5c <XBee_Receive_File+0x44>
		printf("Already receiving file\n");
 8002c56:	4807      	ldr	r0, [pc, #28]	; (8002c74 <XBee_Receive_File+0x5c>)
 8002c58:	f008 ff06 	bl	800ba68 <puts>
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20001740 	.word	0x20001740
 8002c64:	0800dbd0 	.word	0x0800dbd0
 8002c68:	2000174c 	.word	0x2000174c
 8002c6c:	20001744 	.word	0x20001744
 8002c70:	20000458 	.word	0x20000458
 8002c74:	0800dbe0 	.word	0x0800dbe0

08002c78 <XBee_Resolve>:

void XBee_Resolve() {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
	if (XBee_Received.target == 0 || XBee_Received.target == UID) {
 8002c7e:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <XBee_Resolve+0x118>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <XBee_Resolve+0x1a>
 8002c86:	4b42      	ldr	r3, [pc, #264]	; (8002d90 <XBee_Resolve+0x118>)
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4b42      	ldr	r3, [pc, #264]	; (8002d94 <XBee_Resolve+0x11c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d179      	bne.n	8002d86 <XBee_Resolve+0x10e>
		switch (XBee_Received.command) {
 8002c92:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <XBee_Resolve+0x118>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d86b      	bhi.n	8002d72 <XBee_Resolve+0xfa>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <XBee_Resolve+0x28>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cb9 	.word	0x08002cb9
 8002ca8:	08002d49 	.word	0x08002d49
 8002cac:	08002d65 	.word	0x08002d65
		case PrintMessage:
			printf("%s\n", (char *) XBee_Received.data);
 8002cb0:	4839      	ldr	r0, [pc, #228]	; (8002d98 <XBee_Resolve+0x120>)
 8002cb2:	f008 fed9 	bl	800ba68 <puts>
			break;
 8002cb6:	e05f      	b.n	8002d78 <XBee_Resolve+0x100>
		case BroadcastIdentity:
			if (num_registered_devices == MAX_DEVICES) {
 8002cb8:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <XBee_Resolve+0x124>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b0a      	cmp	r3, #10
 8002cbe:	d103      	bne.n	8002cc8 <XBee_Resolve+0x50>
				printf("Maximum registered network devices reached\n");
 8002cc0:	4837      	ldr	r0, [pc, #220]	; (8002da0 <XBee_Resolve+0x128>)
 8002cc2:	f008 fed1 	bl	800ba68 <puts>
				break;
 8002cc6:	e057      	b.n	8002d78 <XBee_Resolve+0x100>
			}
			uint32_t uid = *((uint32_t *) XBee_Received.data);
 8002cc8:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <XBee_Resolve+0x120>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	603b      	str	r3, [r7, #0]
			for (int i = 0; i < num_registered_devices; i++) {
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	e013      	b.n	8002cfc <XBee_Resolve+0x84>
				if (devices[i].uid == uid) {
 8002cd4:	4933      	ldr	r1, [pc, #204]	; (8002da4 <XBee_Resolve+0x12c>)
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d105      	bne.n	8002cf6 <XBee_Resolve+0x7e>
					printf("Already registered device %u\n", (unsigned int) uid);
 8002cea:	6839      	ldr	r1, [r7, #0]
 8002cec:	482e      	ldr	r0, [pc, #184]	; (8002da8 <XBee_Resolve+0x130>)
 8002cee:	f008 fe35 	bl	800b95c <iprintf>
					goto done;
 8002cf2:	bf00      	nop
			devices[num_registered_devices].uid = uid;
			strcpy(devices[num_registered_devices].file_path, (TCHAR *) &XBee_Received.data[sizeof(uint32_t)]);
			num_registered_devices++;
			printf("Registered new device with UID %u\n", (unsigned int) uid);
done:
			break;
 8002cf4:	e040      	b.n	8002d78 <XBee_Resolve+0x100>
			for (int i = 0; i < num_registered_devices; i++) {
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <XBee_Resolve+0x124>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	dbe6      	blt.n	8002cd4 <XBee_Resolve+0x5c>
			devices[num_registered_devices].uid = uid;
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <XBee_Resolve+0x124>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4926      	ldr	r1, [pc, #152]	; (8002da4 <XBee_Resolve+0x12c>)
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	601a      	str	r2, [r3, #0]
			strcpy(devices[num_registered_devices].file_path, (TCHAR *) &XBee_Received.data[sizeof(uint32_t)]);
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <XBee_Resolve+0x124>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <XBee_Resolve+0x12c>)
 8002d28:	4413      	add	r3, r2
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	491f      	ldr	r1, [pc, #124]	; (8002dac <XBee_Resolve+0x134>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f008 feb2 	bl	800ba98 <strcpy>
			num_registered_devices++;
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <XBee_Resolve+0x124>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <XBee_Resolve+0x124>)
 8002d3c:	6013      	str	r3, [r2, #0]
			printf("Registered new device with UID %u\n", (unsigned int) uid);
 8002d3e:	6839      	ldr	r1, [r7, #0]
 8002d40:	481b      	ldr	r0, [pc, #108]	; (8002db0 <XBee_Resolve+0x138>)
 8002d42:	f008 fe0b 	bl	800b95c <iprintf>
			break;
 8002d46:	e017      	b.n	8002d78 <XBee_Resolve+0x100>
		case ReceiveFile:
			printf("Preparing to receive file\n");
 8002d48:	481a      	ldr	r0, [pc, #104]	; (8002db4 <XBee_Resolve+0x13c>)
 8002d4a:	f008 fe8d 	bl	800ba68 <puts>
			rsize = *((FSIZE_t *) XBee_Received.data);
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <XBee_Resolve+0x120>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <XBee_Resolve+0x140>)
 8002d54:	6013      	str	r3, [r2, #0]
			strcpy(rpath, (TCHAR *) &XBee_Received.data[sizeof(FSIZE_t)]);
 8002d56:	4915      	ldr	r1, [pc, #84]	; (8002dac <XBee_Resolve+0x134>)
 8002d58:	4818      	ldr	r0, [pc, #96]	; (8002dbc <XBee_Resolve+0x144>)
 8002d5a:	f008 fe9d 	bl	800ba98 <strcpy>
			XBee_Receive_File();
 8002d5e:	f7ff ff5b 	bl	8002c18 <XBee_Receive_File>
			break;
 8002d62:	e009      	b.n	8002d78 <XBee_Resolve+0x100>
		case ImpactEvent:
			printf("Impacted detected on device %u\n", XBee_Received.data[0]);
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <XBee_Resolve+0x118>)
 8002d66:	7a1b      	ldrb	r3, [r3, #8]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4815      	ldr	r0, [pc, #84]	; (8002dc0 <XBee_Resolve+0x148>)
 8002d6c:	f008 fdf6 	bl	800b95c <iprintf>
			break;
 8002d70:	e002      	b.n	8002d78 <XBee_Resolve+0x100>
		default:
			printf("Unknown command received over network\n");
 8002d72:	4814      	ldr	r0, [pc, #80]	; (8002dc4 <XBee_Resolve+0x14c>)
 8002d74:	f008 fe78 	bl	800ba68 <puts>
		}
		if (!receiving_file) {
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <XBee_Resolve+0x150>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <XBee_Resolve+0x10e>
			XBee_Receive(&XBee_Received);
 8002d80:	4803      	ldr	r0, [pc, #12]	; (8002d90 <XBee_Resolve+0x118>)
 8002d82:	f7ff ff39 	bl	8002bf8 <XBee_Receive>
		}
	}
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200016d0 	.word	0x200016d0
 8002d94:	200016cc 	.word	0x200016cc
 8002d98:	200016d8 	.word	0x200016d8
 8002d9c:	20000690 	.word	0x20000690
 8002da0:	0800dbf8 	.word	0x0800dbf8
 8002da4:	200005a0 	.word	0x200005a0
 8002da8:	0800dc24 	.word	0x0800dc24
 8002dac:	200016dc 	.word	0x200016dc
 8002db0:	0800dc44 	.word	0x0800dc44
 8002db4:	0800dc68 	.word	0x0800dc68
 8002db8:	2000174c 	.word	0x2000174c
 8002dbc:	20001750 	.word	0x20001750
 8002dc0:	0800dc84 	.word	0x0800dc84
 8002dc4:	0800dca4 	.word	0x0800dca4
 8002dc8:	20001740 	.word	0x20001740

08002dcc <XBee_Resolve_File>:

int XBee_Resolve_File() {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
	int ret = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
	ret = f_open(&fil, rpath, FA_OPEN_ALWAYS | FA_WRITE);
 8002dd6:	2212      	movs	r2, #18
 8002dd8:	4922      	ldr	r1, [pc, #136]	; (8002e64 <XBee_Resolve_File+0x98>)
 8002dda:	4823      	ldr	r0, [pc, #140]	; (8002e68 <XBee_Resolve_File+0x9c>)
 8002ddc:	f007 fb07 	bl	800a3ee <f_open>
 8002de0:	4603      	mov	r3, r0
 8002de2:	607b      	str	r3, [r7, #4]
	if(ret != FR_OK) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d006      	beq.n	8002df8 <XBee_Resolve_File+0x2c>
		printf("Failed to open file (%i) \r\n", ret);
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	481f      	ldr	r0, [pc, #124]	; (8002e6c <XBee_Resolve_File+0xa0>)
 8002dee:	f008 fdb5 	bl	800b95c <iprintf>
		return -1;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	e031      	b.n	8002e5c <XBee_Resolve_File+0x90>
	}
	UINT bytes_written;
	ret = f_write(&fil, file_buf, rsize, &bytes_written);
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <XBee_Resolve_File+0xa4>)
 8002dfa:	6819      	ldr	r1, [r3, #0]
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <XBee_Resolve_File+0xa8>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	463b      	mov	r3, r7
 8002e02:	4819      	ldr	r0, [pc, #100]	; (8002e68 <XBee_Resolve_File+0x9c>)
 8002e04:	f007 fcbf 	bl	800a786 <f_write>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	607b      	str	r3, [r7, #4]
	if(ret != FR_OK) {
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <XBee_Resolve_File+0x54>
		printf("Failed to write file (%i) \r\n", ret);
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4818      	ldr	r0, [pc, #96]	; (8002e78 <XBee_Resolve_File+0xac>)
 8002e16:	f008 fda1 	bl	800b95c <iprintf>
		return -1;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	e01d      	b.n	8002e5c <XBee_Resolve_File+0x90>
	}
	ret = f_close(&fil);
 8002e20:	4811      	ldr	r0, [pc, #68]	; (8002e68 <XBee_Resolve_File+0x9c>)
 8002e22:	f007 fec2 	bl	800abaa <f_close>
 8002e26:	4603      	mov	r3, r0
 8002e28:	607b      	str	r3, [r7, #4]
	if(ret != FR_OK) {
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d006      	beq.n	8002e3e <XBee_Resolve_File+0x72>
		printf("Failed to close file (%i) \r\n", ret);
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4812      	ldr	r0, [pc, #72]	; (8002e7c <XBee_Resolve_File+0xb0>)
 8002e34:	f008 fd92 	bl	800b95c <iprintf>
		return -1;
 8002e38:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3c:	e00e      	b.n	8002e5c <XBee_Resolve_File+0x90>
	}
	printf("Received file\n");
 8002e3e:	4810      	ldr	r0, [pc, #64]	; (8002e80 <XBee_Resolve_File+0xb4>)
 8002e40:	f008 fe12 	bl	800ba68 <puts>
	free(file_buf);
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <XBee_Resolve_File+0xa4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f008 f82d 	bl	800aea8 <free>
	receiving_file = 0;
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <XBee_Resolve_File+0xb8>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
	XBee_Receive(&XBee_Received);
 8002e54:	480c      	ldr	r0, [pc, #48]	; (8002e88 <XBee_Resolve_File+0xbc>)
 8002e56:	f7ff fecf 	bl	8002bf8 <XBee_Receive>
	return ret;
 8002e5a:	687b      	ldr	r3, [r7, #4]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20001750 	.word	0x20001750
 8002e68:	20000694 	.word	0x20000694
 8002e6c:	0800db48 	.word	0x0800db48
 8002e70:	20001744 	.word	0x20001744
 8002e74:	2000174c 	.word	0x2000174c
 8002e78:	0800dccc 	.word	0x0800dccc
 8002e7c:	0800db80 	.word	0x0800db80
 8002e80:	0800dcec 	.word	0x0800dcec
 8002e84:	20001740 	.word	0x20001740
 8002e88:	200016d0 	.word	0x200016d0

08002e8c <HAL_UART_ErrorCallback>:
	printf("UID: %u\n", (unsigned int) UID);
	__HAL_TIM_SET_AUTORELOAD(FILE_TIMER, 5000);
	XBee_Receive(&XBee_Received);
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	if (huart == XBEE_UART) {
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <HAL_UART_ErrorCallback+0x20>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d102      	bne.n	8002ea2 <HAL_UART_ErrorCallback+0x16>
		printf("XBee Error\n");
 8002e9c:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <HAL_UART_ErrorCallback+0x24>)
 8002e9e:	f008 fde3 	bl	800ba68 <puts>
	}
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000458 	.word	0x20000458
 8002eb0:	0800dd20 	.word	0x0800dd20

08002eb4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	if (huart == XBEE_UART) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <HAL_UART_TxCpltCallback+0x60>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d122      	bne.n	8002f0a <HAL_UART_TxCpltCallback+0x56>
		if (transmitting_file == 1) {
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_UART_TxCpltCallback+0x64>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d10f      	bne.n	8002eec <HAL_UART_TxCpltCallback+0x38>
			while (HAL_TIM_Base_GetState(FILE_TIMER) != HAL_TIM_STATE_READY);
 8002ecc:	bf00      	nop
 8002ece:	4813      	ldr	r0, [pc, #76]	; (8002f1c <HAL_UART_TxCpltCallback+0x68>)
 8002ed0:	f003 fccb 	bl	800686a <HAL_TIM_Base_GetState>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d1f9      	bne.n	8002ece <HAL_UART_TxCpltCallback+0x1a>
			FIX_TIMER_TRIGGER(FILE_TIMER);
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_UART_TxCpltCallback+0x68>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f06f 0201 	mvn.w	r2, #1
 8002ee2:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(FILE_TIMER);
 8002ee4:	480d      	ldr	r0, [pc, #52]	; (8002f1c <HAL_UART_TxCpltCallback+0x68>)
 8002ee6:	f003 faff 	bl	80064e8 <HAL_TIM_Base_Start_IT>
			printf("Transmitted file\n");
			free(file_buf);
			transmitting_file = 0;
		}
	}
}
 8002eea:	e00e      	b.n	8002f0a <HAL_UART_TxCpltCallback+0x56>
		} else if (transmitting_file == 2) {
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_UART_TxCpltCallback+0x64>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d10a      	bne.n	8002f0a <HAL_UART_TxCpltCallback+0x56>
			printf("Transmitted file\n");
 8002ef4:	480a      	ldr	r0, [pc, #40]	; (8002f20 <HAL_UART_TxCpltCallback+0x6c>)
 8002ef6:	f008 fdb7 	bl	800ba68 <puts>
			free(file_buf);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_UART_TxCpltCallback+0x70>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f007 ffd2 	bl	800aea8 <free>
			transmitting_file = 0;
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <HAL_UART_TxCpltCallback+0x64>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000458 	.word	0x20000458
 8002f18:	2000173c 	.word	0x2000173c
 8002f1c:	20000410 	.word	0x20000410
 8002f20:	0800dd2c 	.word	0x0800dd2c
 8002f24:	20001744 	.word	0x20001744

08002f28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	if (huart == XBEE_UART) {
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <HAL_UART_RxCpltCallback+0x2c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d108      	bne.n	8002f4a <HAL_UART_RxCpltCallback+0x22>
//		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
//				XBee_Received.command, (unsigned int) XBee_Received.target,
//				XBee_Received.data[0], XBee_Received.data[1],
//				XBee_Received.data[2]);
		if (!receiving_file) {
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_UART_RxCpltCallback+0x30>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <HAL_UART_RxCpltCallback+0x1e>
			XBee_Resolve();
 8002f40:	f7ff fe9a 	bl	8002c78 <XBee_Resolve>
		} else {
			XBee_Resolve_File();
		}
	}
}
 8002f44:	e001      	b.n	8002f4a <HAL_UART_RxCpltCallback+0x22>
			XBee_Resolve_File();
 8002f46:	f7ff ff41 	bl	8002dcc <XBee_Resolve_File>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000458 	.word	0x20000458
 8002f58:	20001740 	.word	0x20001740

08002f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f60:	480d      	ldr	r0, [pc, #52]	; (8002f98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f62:	490e      	ldr	r1, [pc, #56]	; (8002f9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f64:	4a0e      	ldr	r2, [pc, #56]	; (8002fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f68:	e002      	b.n	8002f70 <LoopCopyDataInit>

08002f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f6e:	3304      	adds	r3, #4

08002f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f74:	d3f9      	bcc.n	8002f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f76:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f78:	4c0b      	ldr	r4, [pc, #44]	; (8002fa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f7c:	e001      	b.n	8002f82 <LoopFillZerobss>

08002f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f80:	3204      	adds	r2, #4

08002f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f84:	d3fb      	bcc.n	8002f7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f86:	f7ff fe07 	bl	8002b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f8a:	f007 ff61 	bl	800ae50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f8e:	f7fe fe73 	bl	8001c78 <main>
  bx  lr    
 8002f92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f9c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002fa0:	0800e5d4 	.word	0x0800e5d4
  ldr r2, =_sbss
 8002fa4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002fa8:	200019b4 	.word	0x200019b4

08002fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fac:	e7fe      	b.n	8002fac <ADC_IRQHandler>
	...

08002fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <HAL_Init+0x40>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <HAL_Init+0x40>)
 8002fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_Init+0x40>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_Init+0x40>)
 8002fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <HAL_Init+0x40>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <HAL_Init+0x40>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd8:	2003      	movs	r0, #3
 8002fda:	f000 fbb1 	bl	8003740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f000 f808 	bl	8002ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe4:	f7ff f980 	bl	80022e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023c00 	.word	0x40023c00

08002ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <HAL_InitTick+0x54>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_InitTick+0x58>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4619      	mov	r1, r3
 8003006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300a:	fbb3 f3f1 	udiv	r3, r3, r1
 800300e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fbc9 	bl	80037aa <HAL_SYSTICK_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e00e      	b.n	8003040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b0f      	cmp	r3, #15
 8003026:	d80a      	bhi.n	800303e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003028:	2200      	movs	r2, #0
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	f000 fb91 	bl	8003756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003034:	4a06      	ldr	r2, [pc, #24]	; (8003050 <HAL_InitTick+0x5c>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e000      	b.n	8003040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000008 	.word	0x20000008
 800304c:	20000010 	.word	0x20000010
 8003050:	2000000c 	.word	0x2000000c

08003054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_IncTick+0x20>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_IncTick+0x24>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4413      	add	r3, r2
 8003064:	4a04      	ldr	r2, [pc, #16]	; (8003078 <HAL_IncTick+0x24>)
 8003066:	6013      	str	r3, [r2, #0]
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000010 	.word	0x20000010
 8003078:	20001764 	.word	0x20001764

0800307c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return uwTick;
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_GetTick+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20001764 	.word	0x20001764

08003094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800309c:	f7ff ffee 	bl	800307c <HAL_GetTick>
 80030a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d005      	beq.n	80030ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <HAL_Delay+0x44>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ba:	bf00      	nop
 80030bc:	f7ff ffde 	bl	800307c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d8f7      	bhi.n	80030bc <HAL_Delay+0x28>
  {
  }
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000010 	.word	0x20000010

080030dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e033      	b.n	800315a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff f91c 	bl	8002338 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d118      	bne.n	800314c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003122:	f023 0302 	bic.w	r3, r3, #2
 8003126:	f043 0202 	orr.w	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f93a 	bl	80033a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
 800314a:	e001      	b.n	8003150 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x1c>
 800317c:	2302      	movs	r3, #2
 800317e:	e105      	b.n	800338c <HAL_ADC_ConfigChannel+0x228>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b09      	cmp	r3, #9
 800318e:	d925      	bls.n	80031dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68d9      	ldr	r1, [r3, #12]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	3b1e      	subs	r3, #30
 80031a6:	2207      	movs	r2, #7
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43da      	mvns	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	400a      	ands	r2, r1
 80031b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68d9      	ldr	r1, [r3, #12]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4618      	mov	r0, r3
 80031c8:	4603      	mov	r3, r0
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4403      	add	r3, r0
 80031ce:	3b1e      	subs	r3, #30
 80031d0:	409a      	lsls	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	e022      	b.n	8003222 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6919      	ldr	r1, [r3, #16]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	2207      	movs	r2, #7
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	400a      	ands	r2, r1
 80031fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6919      	ldr	r1, [r3, #16]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	4618      	mov	r0, r3
 8003212:	4603      	mov	r3, r0
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4403      	add	r3, r0
 8003218:	409a      	lsls	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b06      	cmp	r3, #6
 8003228:	d824      	bhi.n	8003274 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	3b05      	subs	r3, #5
 800323c:	221f      	movs	r2, #31
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43da      	mvns	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	400a      	ands	r2, r1
 800324a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	4618      	mov	r0, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	3b05      	subs	r3, #5
 8003266:	fa00 f203 	lsl.w	r2, r0, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	635a      	str	r2, [r3, #52]	; 0x34
 8003272:	e04c      	b.n	800330e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d824      	bhi.n	80032c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	3b23      	subs	r3, #35	; 0x23
 800328e:	221f      	movs	r2, #31
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43da      	mvns	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	400a      	ands	r2, r1
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	4618      	mov	r0, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b23      	subs	r3, #35	; 0x23
 80032b8:	fa00 f203 	lsl.w	r2, r0, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
 80032c4:	e023      	b.n	800330e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	3b41      	subs	r3, #65	; 0x41
 80032d8:	221f      	movs	r2, #31
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	400a      	ands	r2, r1
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	4618      	mov	r0, r3
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	3b41      	subs	r3, #65	; 0x41
 8003302:	fa00 f203 	lsl.w	r2, r0, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_ADC_ConfigChannel+0x234>)
 8003310:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a21      	ldr	r2, [pc, #132]	; (800339c <HAL_ADC_ConfigChannel+0x238>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d109      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x1cc>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b12      	cmp	r3, #18
 8003322:	d105      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <HAL_ADC_ConfigChannel+0x238>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d123      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x21e>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b10      	cmp	r3, #16
 8003340:	d003      	beq.n	800334a <HAL_ADC_ConfigChannel+0x1e6>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b11      	cmp	r3, #17
 8003348:	d11b      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b10      	cmp	r3, #16
 800335c:	d111      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_ADC_ConfigChannel+0x23c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_ADC_ConfigChannel+0x240>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	0c9a      	lsrs	r2, r3, #18
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003374:	e002      	b.n	800337c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3b01      	subs	r3, #1
 800337a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f9      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40012300 	.word	0x40012300
 800339c:	40012000 	.word	0x40012000
 80033a0:	20000008 	.word	0x20000008
 80033a4:	431bde83 	.word	0x431bde83

080033a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b0:	4b79      	ldr	r3, [pc, #484]	; (8003598 <ADC_Init+0x1f0>)
 80033b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	021a      	lsls	r2, r3, #8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003400:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6899      	ldr	r1, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	4a58      	ldr	r2, [pc, #352]	; (800359c <ADC_Init+0x1f4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800344e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6899      	ldr	r1, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e00f      	b.n	80034a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0202 	bic.w	r2, r2, #2
 80034b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6899      	ldr	r1, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7e1b      	ldrb	r3, [r3, #24]
 80034c0:	005a      	lsls	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01b      	beq.n	800350c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	3b01      	subs	r3, #1
 8003500:	035a      	lsls	r2, r3, #13
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	e007      	b.n	800351c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	3b01      	subs	r3, #1
 8003538:	051a      	lsls	r2, r3, #20
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6899      	ldr	r1, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800355e:	025a      	lsls	r2, r3, #9
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003576:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6899      	ldr	r1, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	029a      	lsls	r2, r3, #10
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40012300 	.word	0x40012300
 800359c:	0f000001 	.word	0x0f000001

080035a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035bc:	4013      	ands	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035d2:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	60d3      	str	r3, [r2, #12]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <__NVIC_GetPriorityGrouping+0x18>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0307 	and.w	r3, r3, #7
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	2b00      	cmp	r3, #0
 8003614:	db0b      	blt.n	800362e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <__NVIC_EnableIRQ+0x38>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2001      	movs	r0, #1
 8003626:	fa00 f202 	lsl.w	r2, r0, r2
 800362a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100

08003640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db0a      	blt.n	800366a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	490c      	ldr	r1, [pc, #48]	; (800368c <__NVIC_SetPriority+0x4c>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	440b      	add	r3, r1
 8003664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003668:	e00a      	b.n	8003680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4908      	ldr	r1, [pc, #32]	; (8003690 <__NVIC_SetPriority+0x50>)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3b04      	subs	r3, #4
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	440b      	add	r3, r1
 800367e:	761a      	strb	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	; 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f1c3 0307 	rsb	r3, r3, #7
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf28      	it	cs
 80036b2:	2304      	movcs	r3, #4
 80036b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d902      	bls.n	80036c4 <NVIC_EncodePriority+0x30>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3b03      	subs	r3, #3
 80036c2:	e000      	b.n	80036c6 <NVIC_EncodePriority+0x32>
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	401a      	ands	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	4313      	orrs	r3, r2
         );
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	; 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800370c:	d301      	bcc.n	8003712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800370e:	2301      	movs	r3, #1
 8003710:	e00f      	b.n	8003732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <SysTick_Config+0x40>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800371a:	210f      	movs	r1, #15
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	f7ff ff8e 	bl	8003640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <SysTick_Config+0x40>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372a:	4b04      	ldr	r3, [pc, #16]	; (800373c <SysTick_Config+0x40>)
 800372c:	2207      	movs	r2, #7
 800372e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	e000e010 	.word	0xe000e010

08003740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff29 	bl	80035a0 <__NVIC_SetPriorityGrouping>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003768:	f7ff ff3e 	bl	80035e8 <__NVIC_GetPriorityGrouping>
 800376c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f7ff ff8e 	bl	8003694 <NVIC_EncodePriority>
 8003778:	4602      	mov	r2, r0
 800377a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff5d 	bl	8003640 <__NVIC_SetPriority>
}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	4603      	mov	r3, r0
 8003796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff31 	bl	8003604 <__NVIC_EnableIRQ>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ffa2 	bl	80036fc <SysTick_Config>
 80037b8:	4603      	mov	r3, r0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037d0:	f7ff fc54 	bl	800307c <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e099      	b.n	8003914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003800:	e00f      	b.n	8003822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003802:	f7ff fc3b 	bl	800307c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b05      	cmp	r3, #5
 800380e:	d908      	bls.n	8003822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2203      	movs	r2, #3
 800381a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e078      	b.n	8003914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e8      	bne.n	8003802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4b38      	ldr	r3, [pc, #224]	; (800391c <HAL_DMA_Init+0x158>)
 800383c:	4013      	ands	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800384e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b04      	cmp	r3, #4
 800387a:	d107      	bne.n	800388c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	4313      	orrs	r3, r2
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f023 0307 	bic.w	r3, r3, #7
 80038a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d117      	bne.n	80038e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00e      	beq.n	80038e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fb01 	bl	8003ed0 <DMA_CheckFifoParam>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038e2:	2301      	movs	r3, #1
 80038e4:	e016      	b.n	8003914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fab8 	bl	8003e64 <DMA_CalcBaseAndBitshift>
 80038f4:	4603      	mov	r3, r0
 80038f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	223f      	movs	r2, #63	; 0x3f
 80038fe:	409a      	lsls	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	f010803f 	.word	0xf010803f

08003920 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_DMA_Start_IT+0x26>
 8003942:	2302      	movs	r3, #2
 8003944:	e040      	b.n	80039c8 <HAL_DMA_Start_IT+0xa8>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d12f      	bne.n	80039ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fa4a 	bl	8003e08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	223f      	movs	r2, #63	; 0x3f
 800397a:	409a      	lsls	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0216 	orr.w	r2, r2, #22
 800398e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0208 	orr.w	r2, r2, #8
 80039a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e005      	b.n	80039c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
 80039c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039de:	f7ff fb4d 	bl	800307c <HAL_GetTick>
 80039e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d008      	beq.n	8003a02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e052      	b.n	8003aa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0216 	bic.w	r2, r2, #22
 8003a10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <HAL_DMA_Abort+0x62>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0208 	bic.w	r2, r2, #8
 8003a40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a52:	e013      	b.n	8003a7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a54:	f7ff fb12 	bl	800307c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	d90c      	bls.n	8003a7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e015      	b.n	8003aa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e4      	bne.n	8003a54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	223f      	movs	r2, #63	; 0x3f
 8003a90:	409a      	lsls	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d004      	beq.n	8003ace <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e00c      	b.n	8003ae8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2205      	movs	r2, #5
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b00:	4b8e      	ldr	r3, [pc, #568]	; (8003d3c <HAL_DMA_IRQHandler+0x248>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a8e      	ldr	r2, [pc, #568]	; (8003d40 <HAL_DMA_IRQHandler+0x24c>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0a9b      	lsrs	r3, r3, #10
 8003b0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	2208      	movs	r2, #8
 8003b20:	409a      	lsls	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01a      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d013      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0204 	bic.w	r2, r2, #4
 8003b46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	f043 0201 	orr.w	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b64:	2201      	movs	r2, #1
 8003b66:	409a      	lsls	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d012      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	2201      	movs	r2, #1
 8003b84:	409a      	lsls	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	f043 0202 	orr.w	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d012      	beq.n	8003bcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	2204      	movs	r2, #4
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d043      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d03c      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	2210      	movs	r2, #16
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d018      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d108      	bne.n	8003c24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d024      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
 8003c22:	e01f      	b.n	8003c64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01b      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	4798      	blx	r3
 8003c34:	e016      	b.n	8003c64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d107      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0208 	bic.w	r2, r2, #8
 8003c52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	2220      	movs	r2, #32
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 808f 	beq.w	8003d94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8087 	beq.w	8003d94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b05      	cmp	r3, #5
 8003c9c:	d136      	bne.n	8003d0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0216 	bic.w	r2, r2, #22
 8003cac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_DMA_IRQHandler+0x1da>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0208 	bic.w	r2, r2, #8
 8003cdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce2:	223f      	movs	r2, #63	; 0x3f
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d07e      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4798      	blx	r3
        }
        return;
 8003d0a:	e079      	b.n	8003e00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01d      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10d      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d031      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	4798      	blx	r3
 8003d38:	e02c      	b.n	8003d94 <HAL_DMA_IRQHandler+0x2a0>
 8003d3a:	bf00      	nop
 8003d3c:	20000008 	.word	0x20000008
 8003d40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d023      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
 8003d54:	e01e      	b.n	8003d94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10f      	bne.n	8003d84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0210 	bic.w	r2, r2, #16
 8003d72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d032      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d022      	beq.n	8003dee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2205      	movs	r2, #5
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d307      	bcc.n	8003ddc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f2      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0x2cc>
 8003dda:	e000      	b.n	8003dde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ddc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
 8003dfe:	e000      	b.n	8003e02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e00:	bf00      	nop
    }
  }
}
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d108      	bne.n	8003e48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e46:	e007      	b.n	8003e58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	3b10      	subs	r3, #16
 8003e74:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x64>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e7e:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <DMA_CalcBaseAndBitshift+0x68>)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d909      	bls.n	8003ea6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	1d1a      	adds	r2, r3, #4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ea4:	e007      	b.n	8003eb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eae:	f023 0303 	bic.w	r3, r3, #3
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	aaaaaaab 	.word	0xaaaaaaab
 8003ecc:	0800dda0 	.word	0x0800dda0

08003ed0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11f      	bne.n	8003f2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d856      	bhi.n	8003f9e <DMA_CheckFifoParam+0xce>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <DMA_CheckFifoParam+0x28>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f09 	.word	0x08003f09
 8003efc:	08003f1b 	.word	0x08003f1b
 8003f00:	08003f09 	.word	0x08003f09
 8003f04:	08003f9f 	.word	0x08003f9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d046      	beq.n	8003fa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f18:	e043      	b.n	8003fa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f22:	d140      	bne.n	8003fa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f28:	e03d      	b.n	8003fa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f32:	d121      	bne.n	8003f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d837      	bhi.n	8003faa <DMA_CheckFifoParam+0xda>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <DMA_CheckFifoParam+0x70>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f57 	.word	0x08003f57
 8003f48:	08003f51 	.word	0x08003f51
 8003f4c:	08003f69 	.word	0x08003f69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e030      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d025      	beq.n	8003fae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f66:	e022      	b.n	8003fae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f70:	d11f      	bne.n	8003fb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f76:	e01c      	b.n	8003fb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d903      	bls.n	8003f86 <DMA_CheckFifoParam+0xb6>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d003      	beq.n	8003f8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f84:	e018      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8a:	e015      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f9c:	e00b      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e00a      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e008      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e006      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003faa:	bf00      	nop
 8003fac:	e004      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb6:	bf00      	nop
    }
  } 
  
  return status; 
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop

08003fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b089      	sub	sp, #36	; 0x24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e159      	b.n	8004298 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	f040 8148 	bne.w	8004292 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d005      	beq.n	800401a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004016:	2b02      	cmp	r3, #2
 8004018:	d130      	bne.n	800407c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	2203      	movs	r2, #3
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004050:	2201      	movs	r2, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 0201 	and.w	r2, r3, #1
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b03      	cmp	r3, #3
 8004086:	d017      	beq.n	80040b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	2203      	movs	r2, #3
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d123      	bne.n	800410c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	08da      	lsrs	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3208      	adds	r2, #8
 80040cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	220f      	movs	r2, #15
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	08da      	lsrs	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3208      	adds	r2, #8
 8004106:	69b9      	ldr	r1, [r7, #24]
 8004108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	2203      	movs	r2, #3
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0203 	and.w	r2, r3, #3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80a2 	beq.w	8004292 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	4b57      	ldr	r3, [pc, #348]	; (80042b0 <HAL_GPIO_Init+0x2e8>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	4a56      	ldr	r2, [pc, #344]	; (80042b0 <HAL_GPIO_Init+0x2e8>)
 8004158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800415c:	6453      	str	r3, [r2, #68]	; 0x44
 800415e:	4b54      	ldr	r3, [pc, #336]	; (80042b0 <HAL_GPIO_Init+0x2e8>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800416a:	4a52      	ldr	r2, [pc, #328]	; (80042b4 <HAL_GPIO_Init+0x2ec>)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	089b      	lsrs	r3, r3, #2
 8004170:	3302      	adds	r3, #2
 8004172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	220f      	movs	r2, #15
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43db      	mvns	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4013      	ands	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a49      	ldr	r2, [pc, #292]	; (80042b8 <HAL_GPIO_Init+0x2f0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d019      	beq.n	80041ca <HAL_GPIO_Init+0x202>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a48      	ldr	r2, [pc, #288]	; (80042bc <HAL_GPIO_Init+0x2f4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_GPIO_Init+0x1fe>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a47      	ldr	r2, [pc, #284]	; (80042c0 <HAL_GPIO_Init+0x2f8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00d      	beq.n	80041c2 <HAL_GPIO_Init+0x1fa>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a46      	ldr	r2, [pc, #280]	; (80042c4 <HAL_GPIO_Init+0x2fc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <HAL_GPIO_Init+0x1f6>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a45      	ldr	r2, [pc, #276]	; (80042c8 <HAL_GPIO_Init+0x300>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <HAL_GPIO_Init+0x1f2>
 80041b6:	2304      	movs	r3, #4
 80041b8:	e008      	b.n	80041cc <HAL_GPIO_Init+0x204>
 80041ba:	2307      	movs	r3, #7
 80041bc:	e006      	b.n	80041cc <HAL_GPIO_Init+0x204>
 80041be:	2303      	movs	r3, #3
 80041c0:	e004      	b.n	80041cc <HAL_GPIO_Init+0x204>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e002      	b.n	80041cc <HAL_GPIO_Init+0x204>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_GPIO_Init+0x204>
 80041ca:	2300      	movs	r3, #0
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	f002 0203 	and.w	r2, r2, #3
 80041d2:	0092      	lsls	r2, r2, #2
 80041d4:	4093      	lsls	r3, r2
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041dc:	4935      	ldr	r1, [pc, #212]	; (80042b4 <HAL_GPIO_Init+0x2ec>)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	089b      	lsrs	r3, r3, #2
 80041e2:	3302      	adds	r3, #2
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041ea:	4b38      	ldr	r3, [pc, #224]	; (80042cc <HAL_GPIO_Init+0x304>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800420e:	4a2f      	ldr	r2, [pc, #188]	; (80042cc <HAL_GPIO_Init+0x304>)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004214:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <HAL_GPIO_Init+0x304>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004238:	4a24      	ldr	r2, [pc, #144]	; (80042cc <HAL_GPIO_Init+0x304>)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800423e:	4b23      	ldr	r3, [pc, #140]	; (80042cc <HAL_GPIO_Init+0x304>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004262:	4a1a      	ldr	r2, [pc, #104]	; (80042cc <HAL_GPIO_Init+0x304>)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004268:	4b18      	ldr	r3, [pc, #96]	; (80042cc <HAL_GPIO_Init+0x304>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800428c:	4a0f      	ldr	r2, [pc, #60]	; (80042cc <HAL_GPIO_Init+0x304>)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3301      	adds	r3, #1
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	2b0f      	cmp	r3, #15
 800429c:	f67f aea2 	bls.w	8003fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	3724      	adds	r7, #36	; 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40013800 	.word	0x40013800
 80042b8:	40020000 	.word	0x40020000
 80042bc:	40020400 	.word	0x40020400
 80042c0:	40020800 	.word	0x40020800
 80042c4:	40020c00 	.word	0x40020c00
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40013c00 	.word	0x40013c00

080042d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	807b      	strh	r3, [r7, #2]
 80042dc:	4613      	mov	r3, r2
 80042de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042e0:	787b      	ldrb	r3, [r7, #1]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042e6:	887a      	ldrh	r2, [r7, #2]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042ec:	e003      	b.n	80042f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042ee:	887b      	ldrh	r3, [r7, #2]
 80042f0:	041a      	lsls	r2, r3, #16
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	619a      	str	r2, [r3, #24]
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d006      	beq.n	8004328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	4618      	mov	r0, r3
 8004324:	f7fc fdee 	bl	8000f04 <HAL_GPIO_EXTI_Callback>
  }
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40013c00 	.word	0x40013c00

08004334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e12b      	b.n	800459e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fe f84c 	bl	80023f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2224      	movs	r2, #36	; 0x24
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004386:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004396:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004398:	f001 fbfc 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 800439c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4a81      	ldr	r2, [pc, #516]	; (80045a8 <HAL_I2C_Init+0x274>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d807      	bhi.n	80043b8 <HAL_I2C_Init+0x84>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a80      	ldr	r2, [pc, #512]	; (80045ac <HAL_I2C_Init+0x278>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	bf94      	ite	ls
 80043b0:	2301      	movls	r3, #1
 80043b2:	2300      	movhi	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e006      	b.n	80043c6 <HAL_I2C_Init+0x92>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4a7d      	ldr	r2, [pc, #500]	; (80045b0 <HAL_I2C_Init+0x27c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	bf94      	ite	ls
 80043c0:	2301      	movls	r3, #1
 80043c2:	2300      	movhi	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e0e7      	b.n	800459e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4a78      	ldr	r2, [pc, #480]	; (80045b4 <HAL_I2C_Init+0x280>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	0c9b      	lsrs	r3, r3, #18
 80043d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4a6a      	ldr	r2, [pc, #424]	; (80045a8 <HAL_I2C_Init+0x274>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d802      	bhi.n	8004408 <HAL_I2C_Init+0xd4>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3301      	adds	r3, #1
 8004406:	e009      	b.n	800441c <HAL_I2C_Init+0xe8>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	4a69      	ldr	r2, [pc, #420]	; (80045b8 <HAL_I2C_Init+0x284>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	099b      	lsrs	r3, r3, #6
 800441a:	3301      	adds	r3, #1
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	430b      	orrs	r3, r1
 8004422:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800442e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	495c      	ldr	r1, [pc, #368]	; (80045a8 <HAL_I2C_Init+0x274>)
 8004438:	428b      	cmp	r3, r1
 800443a:	d819      	bhi.n	8004470 <HAL_I2C_Init+0x13c>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1e59      	subs	r1, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	fbb1 f3f3 	udiv	r3, r1, r3
 800444a:	1c59      	adds	r1, r3, #1
 800444c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004450:	400b      	ands	r3, r1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_I2C_Init+0x138>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1e59      	subs	r1, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fbb1 f3f3 	udiv	r3, r1, r3
 8004464:	3301      	adds	r3, #1
 8004466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446a:	e051      	b.n	8004510 <HAL_I2C_Init+0x1dc>
 800446c:	2304      	movs	r3, #4
 800446e:	e04f      	b.n	8004510 <HAL_I2C_Init+0x1dc>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d111      	bne.n	800449c <HAL_I2C_Init+0x168>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1e58      	subs	r0, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	440b      	add	r3, r1
 8004486:	fbb0 f3f3 	udiv	r3, r0, r3
 800448a:	3301      	adds	r3, #1
 800448c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e012      	b.n	80044c2 <HAL_I2C_Init+0x18e>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1e58      	subs	r0, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	0099      	lsls	r1, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b2:	3301      	adds	r3, #1
 80044b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_I2C_Init+0x196>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e022      	b.n	8004510 <HAL_I2C_Init+0x1dc>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10e      	bne.n	80044f0 <HAL_I2C_Init+0x1bc>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1e58      	subs	r0, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6859      	ldr	r1, [r3, #4]
 80044da:	460b      	mov	r3, r1
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	440b      	add	r3, r1
 80044e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e4:	3301      	adds	r3, #1
 80044e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ee:	e00f      	b.n	8004510 <HAL_I2C_Init+0x1dc>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1e58      	subs	r0, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6859      	ldr	r1, [r3, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	0099      	lsls	r1, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	fbb0 f3f3 	udiv	r3, r0, r3
 8004506:	3301      	adds	r3, #1
 8004508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800450c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	6809      	ldr	r1, [r1, #0]
 8004514:	4313      	orrs	r3, r2
 8004516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69da      	ldr	r2, [r3, #28]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800453e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6911      	ldr	r1, [r2, #16]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68d2      	ldr	r2, [r2, #12]
 800454a:	4311      	orrs	r1, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	430b      	orrs	r3, r1
 8004552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	000186a0 	.word	0x000186a0
 80045ac:	001e847f 	.word	0x001e847f
 80045b0:	003d08ff 	.word	0x003d08ff
 80045b4:	431bde83 	.word	0x431bde83
 80045b8:	10624dd3 	.word	0x10624dd3

080045bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	817b      	strh	r3, [r7, #10]
 80045ce:	460b      	mov	r3, r1
 80045d0:	813b      	strh	r3, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045d6:	f7fe fd51 	bl	800307c <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	f040 80d9 	bne.w	800479c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2319      	movs	r3, #25
 80045f0:	2201      	movs	r2, #1
 80045f2:	496d      	ldr	r1, [pc, #436]	; (80047a8 <HAL_I2C_Mem_Write+0x1ec>)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fc7f 	bl	8004ef8 <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
 8004602:	e0cc      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_I2C_Mem_Write+0x56>
 800460e:	2302      	movs	r3, #2
 8004610:	e0c5      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d007      	beq.n	8004638 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004646:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2221      	movs	r2, #33	; 0x21
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2240      	movs	r2, #64	; 0x40
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a3a      	ldr	r2, [r7, #32]
 8004662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a4d      	ldr	r2, [pc, #308]	; (80047ac <HAL_I2C_Mem_Write+0x1f0>)
 8004678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800467a:	88f8      	ldrh	r0, [r7, #6]
 800467c:	893a      	ldrh	r2, [r7, #8]
 800467e:	8979      	ldrh	r1, [r7, #10]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	4603      	mov	r3, r0
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fab6 	bl	8004bfc <I2C_RequestMemoryWrite>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d052      	beq.n	800473c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e081      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fd00 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d107      	bne.n	80046c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e06b      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b04      	cmp	r3, #4
 8004702:	d11b      	bne.n	800473c <HAL_I2C_Mem_Write+0x180>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d017      	beq.n	800473c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1aa      	bne.n	800469a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fcec 	bl	8005126 <I2C_WaitOnBTFFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00d      	beq.n	8004770 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	2b04      	cmp	r3, #4
 800475a:	d107      	bne.n	800476c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e016      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	e000      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800479c:	2302      	movs	r3, #2
  }
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	00100002 	.word	0x00100002
 80047ac:	ffff0000 	.word	0xffff0000

080047b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08c      	sub	sp, #48	; 0x30
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	817b      	strh	r3, [r7, #10]
 80047c2:	460b      	mov	r3, r1
 80047c4:	813b      	strh	r3, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047ca:	f7fe fc57 	bl	800307c <HAL_GetTick>
 80047ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b20      	cmp	r3, #32
 80047da:	f040 8208 	bne.w	8004bee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2319      	movs	r3, #25
 80047e4:	2201      	movs	r2, #1
 80047e6:	497b      	ldr	r1, [pc, #492]	; (80049d4 <HAL_I2C_Mem_Read+0x224>)
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fb85 	bl	8004ef8 <I2C_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
 80047f6:	e1fb      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_I2C_Mem_Read+0x56>
 8004802:	2302      	movs	r3, #2
 8004804:	e1f4      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x440>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d007      	beq.n	800482c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2222      	movs	r2, #34	; 0x22
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2240      	movs	r2, #64	; 0x40
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800485c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a5b      	ldr	r2, [pc, #364]	; (80049d8 <HAL_I2C_Mem_Read+0x228>)
 800486c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800486e:	88f8      	ldrh	r0, [r7, #6]
 8004870:	893a      	ldrh	r2, [r7, #8]
 8004872:	8979      	ldrh	r1, [r7, #10]
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4603      	mov	r3, r0
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fa52 	bl	8004d28 <I2C_RequestMemoryRead>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e1b0      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004892:	2b00      	cmp	r3, #0
 8004894:	d113      	bne.n	80048be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004896:	2300      	movs	r3, #0
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	623b      	str	r3, [r7, #32]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	623b      	str	r3, [r7, #32]
 80048aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e184      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d11b      	bne.n	80048fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e164      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004902:	2b02      	cmp	r3, #2
 8004904:	d11b      	bne.n	800493e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004914:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004926:	2300      	movs	r3, #0
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	e144      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004954:	e138      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	2b03      	cmp	r3, #3
 800495c:	f200 80f1 	bhi.w	8004b42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	2b01      	cmp	r3, #1
 8004966:	d123      	bne.n	80049b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fc1b 	bl	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e139      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049ae:	e10b      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d14e      	bne.n	8004a56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	2200      	movs	r2, #0
 80049c0:	4906      	ldr	r1, [pc, #24]	; (80049dc <HAL_I2C_Mem_Read+0x22c>)
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fa98 	bl	8004ef8 <I2C_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e10e      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x440>
 80049d2:	bf00      	nop
 80049d4:	00100002 	.word	0x00100002
 80049d8:	ffff0000 	.word	0xffff0000
 80049dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a54:	e0b8      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4966      	ldr	r1, [pc, #408]	; (8004bf8 <HAL_I2C_Mem_Read+0x448>)
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fa49 	bl	8004ef8 <I2C_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0bf      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2200      	movs	r2, #0
 8004aba:	494f      	ldr	r1, [pc, #316]	; (8004bf8 <HAL_I2C_Mem_Read+0x448>)
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fa1b 	bl	8004ef8 <I2C_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e091      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b40:	e042      	b.n	8004bc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fb2e 	bl	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e04c      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d118      	bne.n	8004bc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f47f aec2 	bne.w	8004956 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e000      	b.n	8004bf0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004bee:	2302      	movs	r3, #2
  }
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3728      	adds	r7, #40	; 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	00010004 	.word	0x00010004

08004bfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	817b      	strh	r3, [r7, #10]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	813b      	strh	r3, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f960 	bl	8004ef8 <I2C_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4c:	d103      	bne.n	8004c56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e05f      	b.n	8004d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c5a:	897b      	ldrh	r3, [r7, #10]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	492d      	ldr	r1, [pc, #180]	; (8004d24 <I2C_RequestMemoryWrite+0x128>)
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f998 	bl	8004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e04c      	b.n	8004d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	6a39      	ldr	r1, [r7, #32]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 fa02 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00d      	beq.n	8004cc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d107      	bne.n	8004cbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e02b      	b.n	8004d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d105      	bne.n	8004cd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc8:	893b      	ldrh	r3, [r7, #8]
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	611a      	str	r2, [r3, #16]
 8004cd2:	e021      	b.n	8004d18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cd4:	893b      	ldrh	r3, [r7, #8]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce4:	6a39      	ldr	r1, [r7, #32]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f9dc 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d107      	bne.n	8004d0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e005      	b.n	8004d1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d0e:	893b      	ldrh	r3, [r7, #8]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	00010002 	.word	0x00010002

08004d28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	4608      	mov	r0, r1
 8004d32:	4611      	mov	r1, r2
 8004d34:	461a      	mov	r2, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	817b      	strh	r3, [r7, #10]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	813b      	strh	r3, [r7, #8]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f8c2 	bl	8004ef8 <I2C_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00d      	beq.n	8004d96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d88:	d103      	bne.n	8004d92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0aa      	b.n	8004eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d96:	897b      	ldrh	r3, [r7, #10]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004da4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	6a3a      	ldr	r2, [r7, #32]
 8004daa:	4952      	ldr	r1, [pc, #328]	; (8004ef4 <I2C_RequestMemoryRead+0x1cc>)
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f8fa 	bl	8004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e097      	b.n	8004eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd4:	6a39      	ldr	r1, [r7, #32]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f964 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d107      	bne.n	8004dfa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e076      	b.n	8004eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d105      	bne.n	8004e10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e04:	893b      	ldrh	r3, [r7, #8]
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	611a      	str	r2, [r3, #16]
 8004e0e:	e021      	b.n	8004e54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e10:	893b      	ldrh	r3, [r7, #8]
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e20:	6a39      	ldr	r1, [r7, #32]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f93e 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00d      	beq.n	8004e4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d107      	bne.n	8004e46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e050      	b.n	8004eec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e4a:	893b      	ldrh	r3, [r7, #8]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e56:	6a39      	ldr	r1, [r7, #32]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f923 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00d      	beq.n	8004e80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d107      	bne.n	8004e7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e035      	b.n	8004eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f82b 	bl	8004ef8 <I2C_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00d      	beq.n	8004ec4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb6:	d103      	bne.n	8004ec0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e013      	b.n	8004eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ec4:	897b      	ldrh	r3, [r7, #10]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	6a3a      	ldr	r2, [r7, #32]
 8004ed8:	4906      	ldr	r1, [pc, #24]	; (8004ef4 <I2C_RequestMemoryRead+0x1cc>)
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f863 	bl	8004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	00010002 	.word	0x00010002

08004ef8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f08:	e025      	b.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d021      	beq.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f12:	f7fe f8b3 	bl	800307c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e023      	b.n	8004f9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	0c1b      	lsrs	r3, r3, #16
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d10d      	bne.n	8004f7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf0c      	ite	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2300      	movne	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	e00c      	b.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	43da      	mvns	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4013      	ands	r3, r2
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2301      	moveq	r3, #1
 8004f90:	2300      	movne	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d0b6      	beq.n	8004f0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fb4:	e051      	b.n	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc4:	d123      	bne.n	800500e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f043 0204 	orr.w	r2, r3, #4
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e046      	b.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d021      	beq.n	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005016:	f7fe f831 	bl	800307c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d302      	bcc.n	800502c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d116      	bne.n	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f043 0220 	orr.w	r2, r3, #32
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e020      	b.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10c      	bne.n	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	43da      	mvns	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	bf14      	ite	ne
 8005076:	2301      	movne	r3, #1
 8005078:	2300      	moveq	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	e00b      	b.n	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	43da      	mvns	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d18d      	bne.n	8004fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050b0:	e02d      	b.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f8ce 	bl	8005254 <I2C_IsAcknowledgeFailed>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e02d      	b.n	800511e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d021      	beq.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fd ffd7 	bl	800307c <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d116      	bne.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e007      	b.n	800511e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	2b80      	cmp	r3, #128	; 0x80
 800511a:	d1ca      	bne.n	80050b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005132:	e02d      	b.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f88d 	bl	8005254 <I2C_IsAcknowledgeFailed>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e02d      	b.n	80051a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d021      	beq.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514c:	f7fd ff96 	bl	800307c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d116      	bne.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	f043 0220 	orr.w	r2, r3, #32
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e007      	b.n	80051a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b04      	cmp	r3, #4
 800519c:	d1ca      	bne.n	8005134 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051b4:	e042      	b.n	800523c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d119      	bne.n	80051f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0210 	mvn.w	r2, #16
 80051cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e029      	b.n	800524c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f8:	f7fd ff40 	bl	800307c <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d116      	bne.n	800523c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e007      	b.n	800524c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d1b5      	bne.n	80051b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526a:	d11b      	bne.n	80052a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005274:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	f043 0204 	orr.w	r2, r3, #4
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e267      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d075      	beq.n	80053be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052d2:	4b88      	ldr	r3, [pc, #544]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d00c      	beq.n	80052f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052de:	4b85      	ldr	r3, [pc, #532]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d112      	bne.n	8005310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ea:	4b82      	ldr	r3, [pc, #520]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f6:	d10b      	bne.n	8005310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f8:	4b7e      	ldr	r3, [pc, #504]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d05b      	beq.n	80053bc <HAL_RCC_OscConfig+0x108>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d157      	bne.n	80053bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e242      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005318:	d106      	bne.n	8005328 <HAL_RCC_OscConfig+0x74>
 800531a:	4b76      	ldr	r3, [pc, #472]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a75      	ldr	r2, [pc, #468]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e01d      	b.n	8005364 <HAL_RCC_OscConfig+0xb0>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005330:	d10c      	bne.n	800534c <HAL_RCC_OscConfig+0x98>
 8005332:	4b70      	ldr	r3, [pc, #448]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a6f      	ldr	r2, [pc, #444]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	4b6d      	ldr	r3, [pc, #436]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a6c      	ldr	r2, [pc, #432]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e00b      	b.n	8005364 <HAL_RCC_OscConfig+0xb0>
 800534c:	4b69      	ldr	r3, [pc, #420]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a68      	ldr	r2, [pc, #416]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4b66      	ldr	r3, [pc, #408]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a65      	ldr	r2, [pc, #404]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 800535e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d013      	beq.n	8005394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536c:	f7fd fe86 	bl	800307c <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005374:	f7fd fe82 	bl	800307c <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	; 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e207      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005386:	4b5b      	ldr	r3, [pc, #364]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCC_OscConfig+0xc0>
 8005392:	e014      	b.n	80053be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005394:	f7fd fe72 	bl	800307c <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800539c:	f7fd fe6e 	bl	800307c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b64      	cmp	r3, #100	; 0x64
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e1f3      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ae:	4b51      	ldr	r3, [pc, #324]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0xe8>
 80053ba:	e000      	b.n	80053be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d063      	beq.n	8005492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ca:	4b4a      	ldr	r3, [pc, #296]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00b      	beq.n	80053ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053d6:	4b47      	ldr	r3, [pc, #284]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d11c      	bne.n	800541c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053e2:	4b44      	ldr	r3, [pc, #272]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d116      	bne.n	800541c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ee:	4b41      	ldr	r3, [pc, #260]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d005      	beq.n	8005406 <HAL_RCC_OscConfig+0x152>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d001      	beq.n	8005406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e1c7      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005406:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4937      	ldr	r1, [pc, #220]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005416:	4313      	orrs	r3, r2
 8005418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800541a:	e03a      	b.n	8005492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d020      	beq.n	8005466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005424:	4b34      	ldr	r3, [pc, #208]	; (80054f8 <HAL_RCC_OscConfig+0x244>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542a:	f7fd fe27 	bl	800307c <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005432:	f7fd fe23 	bl	800307c <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e1a8      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005444:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005450:	4b28      	ldr	r3, [pc, #160]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4925      	ldr	r1, [pc, #148]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005460:	4313      	orrs	r3, r2
 8005462:	600b      	str	r3, [r1, #0]
 8005464:	e015      	b.n	8005492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005466:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <HAL_RCC_OscConfig+0x244>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fd fe06 	bl	800307c <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005474:	f7fd fe02 	bl	800307c <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e187      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005486:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d036      	beq.n	800550c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d016      	beq.n	80054d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a6:	4b15      	ldr	r3, [pc, #84]	; (80054fc <HAL_RCC_OscConfig+0x248>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ac:	f7fd fde6 	bl	800307c <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b4:	f7fd fde2 	bl	800307c <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e167      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c6:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_RCC_OscConfig+0x240>)
 80054c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x200>
 80054d2:	e01b      	b.n	800550c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <HAL_RCC_OscConfig+0x248>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054da:	f7fd fdcf 	bl	800307c <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e0:	e00e      	b.n	8005500 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054e2:	f7fd fdcb 	bl	800307c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d907      	bls.n	8005500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e150      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 80054f4:	40023800 	.word	0x40023800
 80054f8:	42470000 	.word	0x42470000
 80054fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005500:	4b88      	ldr	r3, [pc, #544]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1ea      	bne.n	80054e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8097 	beq.w	8005648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800551e:	4b81      	ldr	r3, [pc, #516]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	4b7d      	ldr	r3, [pc, #500]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	4a7c      	ldr	r2, [pc, #496]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005538:	6413      	str	r3, [r2, #64]	; 0x40
 800553a:	4b7a      	ldr	r3, [pc, #488]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005546:	2301      	movs	r3, #1
 8005548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554a:	4b77      	ldr	r3, [pc, #476]	; (8005728 <HAL_RCC_OscConfig+0x474>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d118      	bne.n	8005588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005556:	4b74      	ldr	r3, [pc, #464]	; (8005728 <HAL_RCC_OscConfig+0x474>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a73      	ldr	r2, [pc, #460]	; (8005728 <HAL_RCC_OscConfig+0x474>)
 800555c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005562:	f7fd fd8b 	bl	800307c <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556a:	f7fd fd87 	bl	800307c <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e10c      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557c:	4b6a      	ldr	r3, [pc, #424]	; (8005728 <HAL_RCC_OscConfig+0x474>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d106      	bne.n	800559e <HAL_RCC_OscConfig+0x2ea>
 8005590:	4b64      	ldr	r3, [pc, #400]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005594:	4a63      	ldr	r2, [pc, #396]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6713      	str	r3, [r2, #112]	; 0x70
 800559c:	e01c      	b.n	80055d8 <HAL_RCC_OscConfig+0x324>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCC_OscConfig+0x30c>
 80055a6:	4b5f      	ldr	r3, [pc, #380]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	4a5e      	ldr	r2, [pc, #376]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055ac:	f043 0304 	orr.w	r3, r3, #4
 80055b0:	6713      	str	r3, [r2, #112]	; 0x70
 80055b2:	4b5c      	ldr	r3, [pc, #368]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	4a5b      	ldr	r2, [pc, #364]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	6713      	str	r3, [r2, #112]	; 0x70
 80055be:	e00b      	b.n	80055d8 <HAL_RCC_OscConfig+0x324>
 80055c0:	4b58      	ldr	r3, [pc, #352]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c4:	4a57      	ldr	r2, [pc, #348]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	6713      	str	r3, [r2, #112]	; 0x70
 80055cc:	4b55      	ldr	r3, [pc, #340]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d0:	4a54      	ldr	r2, [pc, #336]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80055d2:	f023 0304 	bic.w	r3, r3, #4
 80055d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d015      	beq.n	800560c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fd fd4c 	bl	800307c <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e8:	f7fd fd48 	bl	800307c <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e0cb      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fe:	4b49      	ldr	r3, [pc, #292]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0ee      	beq.n	80055e8 <HAL_RCC_OscConfig+0x334>
 800560a:	e014      	b.n	8005636 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560c:	f7fd fd36 	bl	800307c <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005612:	e00a      	b.n	800562a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005614:	f7fd fd32 	bl	800307c <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e0b5      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562a:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1ee      	bne.n	8005614 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d105      	bne.n	8005648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800563c:	4b39      	ldr	r3, [pc, #228]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	4a38      	ldr	r2, [pc, #224]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005646:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80a1 	beq.w	8005794 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005652:	4b34      	ldr	r3, [pc, #208]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b08      	cmp	r3, #8
 800565c:	d05c      	beq.n	8005718 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d141      	bne.n	80056ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005666:	4b31      	ldr	r3, [pc, #196]	; (800572c <HAL_RCC_OscConfig+0x478>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566c:	f7fd fd06 	bl	800307c <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005674:	f7fd fd02 	bl	800307c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e087      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005686:	4b27      	ldr	r3, [pc, #156]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	019b      	lsls	r3, r3, #6
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	085b      	lsrs	r3, r3, #1
 80056aa:	3b01      	subs	r3, #1
 80056ac:	041b      	lsls	r3, r3, #16
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	061b      	lsls	r3, r3, #24
 80056b6:	491b      	ldr	r1, [pc, #108]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056bc:	4b1b      	ldr	r3, [pc, #108]	; (800572c <HAL_RCC_OscConfig+0x478>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c2:	f7fd fcdb 	bl	800307c <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ca:	f7fd fcd7 	bl	800307c <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e05c      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056dc:	4b11      	ldr	r3, [pc, #68]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x416>
 80056e8:	e054      	b.n	8005794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <HAL_RCC_OscConfig+0x478>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fd fcc4 	bl	800307c <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fd fcc0 	bl	800307c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e045      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_RCC_OscConfig+0x470>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x444>
 8005716:	e03d      	b.n	8005794 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e038      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 8005724:	40023800 	.word	0x40023800
 8005728:	40007000 	.word	0x40007000
 800572c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <HAL_RCC_OscConfig+0x4ec>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d028      	beq.n	8005790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d121      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d11a      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005760:	4013      	ands	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005768:	4293      	cmp	r3, r2
 800576a:	d111      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	3b01      	subs	r3, #1
 800577a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	d107      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40023800 	.word	0x40023800

080057a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0cc      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057b8:	4b68      	ldr	r3, [pc, #416]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d90c      	bls.n	80057e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c6:	4b65      	ldr	r3, [pc, #404]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b63      	ldr	r3, [pc, #396]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0b8      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d020      	beq.n	800582e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057f8:	4b59      	ldr	r3, [pc, #356]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	4a58      	ldr	r2, [pc, #352]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005810:	4b53      	ldr	r3, [pc, #332]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	4a52      	ldr	r2, [pc, #328]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800581a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800581c:	4b50      	ldr	r3, [pc, #320]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	494d      	ldr	r1, [pc, #308]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d044      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d107      	bne.n	8005852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005842:	4b47      	ldr	r3, [pc, #284]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d119      	bne.n	8005882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e07f      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d003      	beq.n	8005862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800585e:	2b03      	cmp	r3, #3
 8005860:	d107      	bne.n	8005872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005862:	4b3f      	ldr	r3, [pc, #252]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e06f      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005872:	4b3b      	ldr	r3, [pc, #236]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e067      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005882:	4b37      	ldr	r3, [pc, #220]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f023 0203 	bic.w	r2, r3, #3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	4934      	ldr	r1, [pc, #208]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	4313      	orrs	r3, r2
 8005892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005894:	f7fd fbf2 	bl	800307c <HAL_GetTick>
 8005898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589a:	e00a      	b.n	80058b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800589c:	f7fd fbee 	bl	800307c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e04f      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b2:	4b2b      	ldr	r3, [pc, #172]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 020c 	and.w	r2, r3, #12
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d1eb      	bne.n	800589c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058c4:	4b25      	ldr	r3, [pc, #148]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d20c      	bcs.n	80058ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d2:	4b22      	ldr	r3, [pc, #136]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e032      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058f8:	4b19      	ldr	r3, [pc, #100]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4916      	ldr	r1, [pc, #88]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005916:	4b12      	ldr	r3, [pc, #72]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	490e      	ldr	r1, [pc, #56]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800592a:	f000 f821 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 800592e:	4602      	mov	r2, r0
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	091b      	lsrs	r3, r3, #4
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	490a      	ldr	r1, [pc, #40]	; (8005964 <HAL_RCC_ClockConfig+0x1c0>)
 800593c:	5ccb      	ldrb	r3, [r1, r3]
 800593e:	fa22 f303 	lsr.w	r3, r2, r3
 8005942:	4a09      	ldr	r2, [pc, #36]	; (8005968 <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_RCC_ClockConfig+0x1c8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fd fb52 	bl	8002ff4 <HAL_InitTick>

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40023c00 	.word	0x40023c00
 8005960:	40023800 	.word	0x40023800
 8005964:	0800dd88 	.word	0x0800dd88
 8005968:	20000008 	.word	0x20000008
 800596c:	2000000c 	.word	0x2000000c

08005970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005974:	b094      	sub	sp, #80	; 0x50
 8005976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	647b      	str	r3, [r7, #68]	; 0x44
 800597c:	2300      	movs	r3, #0
 800597e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005980:	2300      	movs	r3, #0
 8005982:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005988:	4b79      	ldr	r3, [pc, #484]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 030c 	and.w	r3, r3, #12
 8005990:	2b08      	cmp	r3, #8
 8005992:	d00d      	beq.n	80059b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005994:	2b08      	cmp	r3, #8
 8005996:	f200 80e1 	bhi.w	8005b5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_RCC_GetSysClockFreq+0x34>
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d003      	beq.n	80059aa <HAL_RCC_GetSysClockFreq+0x3a>
 80059a2:	e0db      	b.n	8005b5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059a4:	4b73      	ldr	r3, [pc, #460]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80059a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059a8:	e0db      	b.n	8005b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059aa:	4b73      	ldr	r3, [pc, #460]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x208>)
 80059ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059ae:	e0d8      	b.n	8005b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059b0:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ba:	4b6d      	ldr	r3, [pc, #436]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d063      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c6:	4b6a      	ldr	r3, [pc, #424]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	099b      	lsrs	r3, r3, #6
 80059cc:	2200      	movs	r2, #0
 80059ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80059d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
 80059da:	2300      	movs	r3, #0
 80059dc:	637b      	str	r3, [r7, #52]	; 0x34
 80059de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059e2:	4622      	mov	r2, r4
 80059e4:	462b      	mov	r3, r5
 80059e6:	f04f 0000 	mov.w	r0, #0
 80059ea:	f04f 0100 	mov.w	r1, #0
 80059ee:	0159      	lsls	r1, r3, #5
 80059f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059f4:	0150      	lsls	r0, r2, #5
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4621      	mov	r1, r4
 80059fc:	1a51      	subs	r1, r2, r1
 80059fe:	6139      	str	r1, [r7, #16]
 8005a00:	4629      	mov	r1, r5
 8005a02:	eb63 0301 	sbc.w	r3, r3, r1
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a14:	4659      	mov	r1, fp
 8005a16:	018b      	lsls	r3, r1, #6
 8005a18:	4651      	mov	r1, sl
 8005a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a1e:	4651      	mov	r1, sl
 8005a20:	018a      	lsls	r2, r1, #6
 8005a22:	4651      	mov	r1, sl
 8005a24:	ebb2 0801 	subs.w	r8, r2, r1
 8005a28:	4659      	mov	r1, fp
 8005a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a42:	4690      	mov	r8, r2
 8005a44:	4699      	mov	r9, r3
 8005a46:	4623      	mov	r3, r4
 8005a48:	eb18 0303 	adds.w	r3, r8, r3
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	462b      	mov	r3, r5
 8005a50:	eb49 0303 	adc.w	r3, r9, r3
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a62:	4629      	mov	r1, r5
 8005a64:	024b      	lsls	r3, r1, #9
 8005a66:	4621      	mov	r1, r4
 8005a68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	024a      	lsls	r2, r1, #9
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a76:	2200      	movs	r2, #0
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a80:	f7fb f89a 	bl	8000bb8 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4613      	mov	r3, r2
 8005a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a8c:	e058      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a8e:	4b38      	ldr	r3, [pc, #224]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	099b      	lsrs	r3, r3, #6
 8005a94:	2200      	movs	r2, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	4611      	mov	r1, r2
 8005a9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	464b      	mov	r3, r9
 8005aac:	f04f 0000 	mov.w	r0, #0
 8005ab0:	f04f 0100 	mov.w	r1, #0
 8005ab4:	0159      	lsls	r1, r3, #5
 8005ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aba:	0150      	lsls	r0, r2, #5
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	00eb      	lsls	r3, r5, #3
 8005af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005af6:	00e2      	lsls	r2, r4, #3
 8005af8:	4614      	mov	r4, r2
 8005afa:	461d      	mov	r5, r3
 8005afc:	4643      	mov	r3, r8
 8005afe:	18e3      	adds	r3, r4, r3
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	464b      	mov	r3, r9
 8005b04:	eb45 0303 	adc.w	r3, r5, r3
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b16:	4629      	mov	r1, r5
 8005b18:	028b      	lsls	r3, r1, #10
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b20:	4621      	mov	r1, r4
 8005b22:	028a      	lsls	r2, r1, #10
 8005b24:	4610      	mov	r0, r2
 8005b26:	4619      	mov	r1, r3
 8005b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	61fa      	str	r2, [r7, #28]
 8005b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b34:	f7fb f840 	bl	8000bb8 <__aeabi_uldivmod>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b5a:	e002      	b.n	8005b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3750      	adds	r7, #80	; 0x50
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6e:	bf00      	nop
 8005b70:	40023800 	.word	0x40023800
 8005b74:	00f42400 	.word	0x00f42400
 8005b78:	007a1200 	.word	0x007a1200

08005b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b80:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b82:	681b      	ldr	r3, [r3, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20000008 	.word	0x20000008

08005b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b98:	f7ff fff0 	bl	8005b7c <HAL_RCC_GetHCLKFreq>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	0a9b      	lsrs	r3, r3, #10
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	4903      	ldr	r1, [pc, #12]	; (8005bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005baa:	5ccb      	ldrb	r3, [r1, r3]
 8005bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	0800dd98 	.word	0x0800dd98

08005bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bc0:	f7ff ffdc 	bl	8005b7c <HAL_RCC_GetHCLKFreq>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	0b5b      	lsrs	r3, r3, #13
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	4903      	ldr	r1, [pc, #12]	; (8005be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bd2:	5ccb      	ldrb	r3, [r1, r3]
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	0800dd98 	.word	0x0800dd98

08005be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e07b      	b.n	8005cee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d108      	bne.n	8005c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c06:	d009      	beq.n	8005c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	61da      	str	r2, [r3, #28]
 8005c0e:	e005      	b.n	8005c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fc fc7e 	bl	8002538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca0:	ea42 0103 	orr.w	r1, r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	f003 0104 	and.w	r1, r3, #4
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	f003 0210 	and.w	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b088      	sub	sp, #32
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	603b      	str	r3, [r7, #0]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_SPI_Transmit+0x22>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e126      	b.n	8005f66 <HAL_SPI_Transmit+0x270>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d20:	f7fd f9ac 	bl	800307c <HAL_GetTick>
 8005d24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d002      	beq.n	8005d3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
 8005d38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d3a:	e10b      	b.n	8005f54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_SPI_Transmit+0x52>
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d4c:	e102      	b.n	8005f54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2203      	movs	r2, #3
 8005d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	88fa      	ldrh	r2, [r7, #6]
 8005d66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	88fa      	ldrh	r2, [r7, #6]
 8005d6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d94:	d10f      	bne.n	8005db6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005db4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc0:	2b40      	cmp	r3, #64	; 0x40
 8005dc2:	d007      	beq.n	8005dd4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ddc:	d14b      	bne.n	8005e76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <HAL_SPI_Transmit+0xf6>
 8005de6:	8afb      	ldrh	r3, [r7, #22]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d13e      	bne.n	8005e6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	881a      	ldrh	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfc:	1c9a      	adds	r2, r3, #2
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e10:	e02b      	b.n	8005e6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d112      	bne.n	8005e46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	881a      	ldrh	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	1c9a      	adds	r2, r3, #2
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e44:	e011      	b.n	8005e6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e46:	f7fd f919 	bl	800307c <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d803      	bhi.n	8005e5e <HAL_SPI_Transmit+0x168>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	d102      	bne.n	8005e64 <HAL_SPI_Transmit+0x16e>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e68:	e074      	b.n	8005f54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1ce      	bne.n	8005e12 <HAL_SPI_Transmit+0x11c>
 8005e74:	e04c      	b.n	8005f10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <HAL_SPI_Transmit+0x18e>
 8005e7e:	8afb      	ldrh	r3, [r7, #22]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d140      	bne.n	8005f06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	7812      	ldrb	r2, [r2, #0]
 8005e90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005eaa:	e02c      	b.n	8005f06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d113      	bne.n	8005ee2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330c      	adds	r3, #12
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ee0:	e011      	b.n	8005f06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ee2:	f7fd f8cb 	bl	800307c <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d803      	bhi.n	8005efa <HAL_SPI_Transmit+0x204>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d102      	bne.n	8005f00 <HAL_SPI_Transmit+0x20a>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f04:	e026      	b.n	8005f54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1cd      	bne.n	8005eac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 fa55 	bl	80063c4 <SPI_EndRxTxTransaction>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e000      	b.n	8005f54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f64:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3720      	adds	r7, #32
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b08c      	sub	sp, #48	; 0x30
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_SPI_TransmitReceive+0x26>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e18a      	b.n	80062aa <HAL_SPI_TransmitReceive+0x33c>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f9c:	f7fd f86e 	bl	800307c <HAL_GetTick>
 8005fa0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005fb2:	887b      	ldrh	r3, [r7, #2]
 8005fb4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d00f      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x70>
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fc4:	d107      	bne.n	8005fd6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <HAL_SPI_TransmitReceive+0x68>
 8005fce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d003      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005fdc:	e15b      	b.n	8006296 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x82>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x82>
 8005fea:	887b      	ldrh	r3, [r7, #2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d103      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ff6:	e14e      	b.n	8006296 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b04      	cmp	r3, #4
 8006002:	d003      	beq.n	800600c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2205      	movs	r2, #5
 8006008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	887a      	ldrh	r2, [r7, #2]
 800601c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	887a      	ldrh	r2, [r7, #2]
 8006022:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	887a      	ldrh	r2, [r7, #2]
 800602e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	887a      	ldrh	r2, [r7, #2]
 8006034:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d007      	beq.n	8006060 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800605e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006068:	d178      	bne.n	800615c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x10a>
 8006072:	8b7b      	ldrh	r3, [r7, #26]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d166      	bne.n	8006146 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	881a      	ldrh	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800609c:	e053      	b.n	8006146 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d11b      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x176>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <HAL_SPI_TransmitReceive+0x176>
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d113      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	881a      	ldrh	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d119      	bne.n	8006126 <HAL_SPI_TransmitReceive+0x1b8>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d014      	beq.n	8006126 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	b292      	uxth	r2, r2
 8006108:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	1c9a      	adds	r2, r3, #2
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006122:	2301      	movs	r3, #1
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006126:	f7fc ffa9 	bl	800307c <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006132:	429a      	cmp	r2, r3
 8006134:	d807      	bhi.n	8006146 <HAL_SPI_TransmitReceive+0x1d8>
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d003      	beq.n	8006146 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006144:	e0a7      	b.n	8006296 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1a6      	bne.n	800609e <HAL_SPI_TransmitReceive+0x130>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1a1      	bne.n	800609e <HAL_SPI_TransmitReceive+0x130>
 800615a:	e07c      	b.n	8006256 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <HAL_SPI_TransmitReceive+0x1fc>
 8006164:	8b7b      	ldrh	r3, [r7, #26]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d16b      	bne.n	8006242 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006190:	e057      	b.n	8006242 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b02      	cmp	r3, #2
 800619e:	d11c      	bne.n	80061da <HAL_SPI_TransmitReceive+0x26c>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d017      	beq.n	80061da <HAL_SPI_TransmitReceive+0x26c>
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d114      	bne.n	80061da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d119      	bne.n	800621c <HAL_SPI_TransmitReceive+0x2ae>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d014      	beq.n	800621c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006218:	2301      	movs	r3, #1
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800621c:	f7fc ff2e 	bl	800307c <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006228:	429a      	cmp	r2, r3
 800622a:	d803      	bhi.n	8006234 <HAL_SPI_TransmitReceive+0x2c6>
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d102      	bne.n	800623a <HAL_SPI_TransmitReceive+0x2cc>
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006240:	e029      	b.n	8006296 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1a2      	bne.n	8006192 <HAL_SPI_TransmitReceive+0x224>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d19d      	bne.n	8006192 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006258:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f8b2 	bl	80063c4 <SPI_EndRxTxTransaction>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d006      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2220      	movs	r2, #32
 8006270:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006272:	e010      	b.n	8006296 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10b      	bne.n	8006294 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	e000      	b.n	8006296 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006294:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3730      	adds	r7, #48	; 0x30
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	4613      	mov	r3, r2
 80062c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062c4:	f7fc feda 	bl	800307c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	4413      	add	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062d4:	f7fc fed2 	bl	800307c <HAL_GetTick>
 80062d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062da:	4b39      	ldr	r3, [pc, #228]	; (80063c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	015b      	lsls	r3, r3, #5
 80062e0:	0d1b      	lsrs	r3, r3, #20
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	fb02 f303 	mul.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ea:	e054      	b.n	8006396 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	d050      	beq.n	8006396 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062f4:	f7fc fec2 	bl	800307c <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	429a      	cmp	r2, r3
 8006302:	d902      	bls.n	800630a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d13d      	bne.n	8006386 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006318:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006322:	d111      	bne.n	8006348 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632c:	d004      	beq.n	8006338 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006336:	d107      	bne.n	8006348 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006346:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006350:	d10f      	bne.n	8006372 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006370:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e017      	b.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	3b01      	subs	r3, #1
 8006394:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4013      	ands	r3, r2
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	bf0c      	ite	eq
 80063a6:	2301      	moveq	r3, #1
 80063a8:	2300      	movne	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d19b      	bne.n	80062ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000008 	.word	0x20000008

080063c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063d0:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <SPI_EndRxTxTransaction+0x7c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1b      	ldr	r2, [pc, #108]	; (8006444 <SPI_EndRxTxTransaction+0x80>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	0d5b      	lsrs	r3, r3, #21
 80063dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063e0:	fb02 f303 	mul.w	r3, r2, r3
 80063e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ee:	d112      	bne.n	8006416 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	2180      	movs	r1, #128	; 0x80
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff ff5a 	bl	80062b4 <SPI_WaitFlagStateUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d016      	beq.n	8006434 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640a:	f043 0220 	orr.w	r2, r3, #32
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e00f      	b.n	8006436 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	3b01      	subs	r3, #1
 8006420:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642c:	2b80      	cmp	r3, #128	; 0x80
 800642e:	d0f2      	beq.n	8006416 <SPI_EndRxTxTransaction+0x52>
 8006430:	e000      	b.n	8006434 <SPI_EndRxTxTransaction+0x70>
        break;
 8006432:	bf00      	nop
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000008 	.word	0x20000008
 8006444:	165e9f81 	.word	0x165e9f81

08006448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e041      	b.n	80064de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fc f900 	bl	8002674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f000 f9fe 	bl	8006888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d001      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e044      	b.n	800658a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0201 	orr.w	r2, r2, #1
 8006516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1e      	ldr	r2, [pc, #120]	; (8006598 <HAL_TIM_Base_Start_IT+0xb0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d018      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x6c>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652a:	d013      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x6c>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1a      	ldr	r2, [pc, #104]	; (800659c <HAL_TIM_Base_Start_IT+0xb4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00e      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x6c>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a19      	ldr	r2, [pc, #100]	; (80065a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d009      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x6c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a17      	ldr	r2, [pc, #92]	; (80065a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x6c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a16      	ldr	r2, [pc, #88]	; (80065a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d111      	bne.n	8006578 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b06      	cmp	r3, #6
 8006564:	d010      	beq.n	8006588 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0201 	orr.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	e007      	b.n	8006588 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40014000 	.word	0x40014000

080065ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6a1a      	ldr	r2, [r3, #32]
 80065ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10f      	bne.n	80065f4 <HAL_TIM_Base_Stop_IT+0x48>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6a1a      	ldr	r2, [r3, #32]
 80065da:	f240 4344 	movw	r3, #1092	; 0x444
 80065de:	4013      	ands	r3, r2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d107      	bne.n	80065f4 <HAL_TIM_Base_Stop_IT+0x48>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0201 	bic.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d122      	bne.n	8006666 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d11b      	bne.n	8006666 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f06f 0202 	mvn.w	r2, #2
 8006636:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f8ee 	bl	800682e <HAL_TIM_IC_CaptureCallback>
 8006652:	e005      	b.n	8006660 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f8e0 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f8f1 	bl	8006842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b04      	cmp	r3, #4
 8006672:	d122      	bne.n	80066ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b04      	cmp	r3, #4
 8006680:	d11b      	bne.n	80066ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f06f 0204 	mvn.w	r2, #4
 800668a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f8c4 	bl	800682e <HAL_TIM_IC_CaptureCallback>
 80066a6:	e005      	b.n	80066b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f8b6 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f8c7 	bl	8006842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d122      	bne.n	800670e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d11b      	bne.n	800670e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f06f 0208 	mvn.w	r2, #8
 80066de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2204      	movs	r2, #4
 80066e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f89a 	bl	800682e <HAL_TIM_IC_CaptureCallback>
 80066fa:	e005      	b.n	8006708 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f88c 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f89d 	bl	8006842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	2b10      	cmp	r3, #16
 800671a:	d122      	bne.n	8006762 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b10      	cmp	r3, #16
 8006728:	d11b      	bne.n	8006762 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f06f 0210 	mvn.w	r2, #16
 8006732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2208      	movs	r2, #8
 8006738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f870 	bl	800682e <HAL_TIM_IC_CaptureCallback>
 800674e:	e005      	b.n	800675c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f862 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f873 	bl	8006842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b01      	cmp	r3, #1
 800676e:	d10e      	bne.n	800678e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	d107      	bne.n	800678e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f06f 0201 	mvn.w	r2, #1
 8006786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7fa fb97 	bl	8000ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006798:	2b80      	cmp	r3, #128	; 0x80
 800679a:	d10e      	bne.n	80067ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a6:	2b80      	cmp	r3, #128	; 0x80
 80067a8:	d107      	bne.n	80067ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f8f1 	bl	800699c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	d10e      	bne.n	80067e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d107      	bne.n	80067e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f838 	bl	8006856 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d10e      	bne.n	8006812 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d107      	bne.n	8006812 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f06f 0220 	mvn.w	r2, #32
 800680a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f8bb 	bl	8006988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006812:	bf00      	nop
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  return htim->State;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006878:	b2db      	uxtb	r3, r3
}
 800687a:	4618      	mov	r0, r3
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
	...

08006888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a34      	ldr	r2, [pc, #208]	; (800696c <TIM_Base_SetConfig+0xe4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00f      	beq.n	80068c0 <TIM_Base_SetConfig+0x38>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a6:	d00b      	beq.n	80068c0 <TIM_Base_SetConfig+0x38>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a31      	ldr	r2, [pc, #196]	; (8006970 <TIM_Base_SetConfig+0xe8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d007      	beq.n	80068c0 <TIM_Base_SetConfig+0x38>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a30      	ldr	r2, [pc, #192]	; (8006974 <TIM_Base_SetConfig+0xec>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_Base_SetConfig+0x38>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a2f      	ldr	r2, [pc, #188]	; (8006978 <TIM_Base_SetConfig+0xf0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d108      	bne.n	80068d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a25      	ldr	r2, [pc, #148]	; (800696c <TIM_Base_SetConfig+0xe4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d01b      	beq.n	8006912 <TIM_Base_SetConfig+0x8a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e0:	d017      	beq.n	8006912 <TIM_Base_SetConfig+0x8a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a22      	ldr	r2, [pc, #136]	; (8006970 <TIM_Base_SetConfig+0xe8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d013      	beq.n	8006912 <TIM_Base_SetConfig+0x8a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a21      	ldr	r2, [pc, #132]	; (8006974 <TIM_Base_SetConfig+0xec>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00f      	beq.n	8006912 <TIM_Base_SetConfig+0x8a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a20      	ldr	r2, [pc, #128]	; (8006978 <TIM_Base_SetConfig+0xf0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00b      	beq.n	8006912 <TIM_Base_SetConfig+0x8a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1f      	ldr	r2, [pc, #124]	; (800697c <TIM_Base_SetConfig+0xf4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d007      	beq.n	8006912 <TIM_Base_SetConfig+0x8a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1e      	ldr	r2, [pc, #120]	; (8006980 <TIM_Base_SetConfig+0xf8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d003      	beq.n	8006912 <TIM_Base_SetConfig+0x8a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <TIM_Base_SetConfig+0xfc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d108      	bne.n	8006924 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a08      	ldr	r2, [pc, #32]	; (800696c <TIM_Base_SetConfig+0xe4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d103      	bne.n	8006958 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	615a      	str	r2, [r3, #20]
}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40010000 	.word	0x40010000
 8006970:	40000400 	.word	0x40000400
 8006974:	40000800 	.word	0x40000800
 8006978:	40000c00 	.word	0x40000c00
 800697c:	40014000 	.word	0x40014000
 8006980:	40014400 	.word	0x40014400
 8006984:	40014800 	.word	0x40014800

08006988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e03f      	b.n	8006a42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d106      	bne.n	80069dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fb fe92 	bl	8002700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2224      	movs	r2, #36	; 0x24
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f839 	bl	8007a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695a      	ldr	r2, [r3, #20]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b08a      	sub	sp, #40	; 0x28
 8006a4e:	af02      	add	r7, sp, #8
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	4613      	mov	r3, r2
 8006a58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d17c      	bne.n	8006b64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_UART_Transmit+0x2c>
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e075      	b.n	8006b66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_UART_Transmit+0x3e>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e06e      	b.n	8006b66 <HAL_UART_Transmit+0x11c>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2221      	movs	r2, #33	; 0x21
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a9e:	f7fc faed 	bl	800307c <HAL_GetTick>
 8006aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	88fa      	ldrh	r2, [r7, #6]
 8006aa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab8:	d108      	bne.n	8006acc <HAL_UART_Transmit+0x82>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d104      	bne.n	8006acc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	e003      	b.n	8006ad4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006adc:	e02a      	b.n	8006b34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2180      	movs	r1, #128	; 0x80
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 fcf0 	bl	80074ce <UART_WaitOnFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e036      	b.n	8006b66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10b      	bne.n	8006b16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	3302      	adds	r3, #2
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	e007      	b.n	8006b26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	781a      	ldrb	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	3301      	adds	r3, #1
 8006b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1cf      	bne.n	8006ade <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2200      	movs	r2, #0
 8006b46:	2140      	movs	r1, #64	; 0x40
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 fcc0 	bl	80074ce <UART_WaitOnFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e006      	b.n	8006b66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e000      	b.n	8006b66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b64:	2302      	movs	r3, #2
  }
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08c      	sub	sp, #48	; 0x30
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d165      	bne.n	8006c56 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <HAL_UART_Transmit_DMA+0x26>
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e05e      	b.n	8006c58 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_UART_Transmit_DMA+0x38>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e057      	b.n	8006c58 <HAL_UART_Transmit_DMA+0xe8>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	88fa      	ldrh	r2, [r7, #6]
 8006bba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	88fa      	ldrh	r2, [r7, #6]
 8006bc0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2221      	movs	r2, #33	; 0x21
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd4:	4a22      	ldr	r2, [pc, #136]	; (8006c60 <HAL_UART_Transmit_DMA+0xf0>)
 8006bd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bdc:	4a21      	ldr	r2, [pc, #132]	; (8006c64 <HAL_UART_Transmit_DMA+0xf4>)
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be4:	4a20      	ldr	r2, [pc, #128]	; (8006c68 <HAL_UART_Transmit_DMA+0xf8>)
 8006be6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	2200      	movs	r2, #0
 8006bee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006bf0:	f107 0308 	add.w	r3, r7, #8
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	6819      	ldr	r1, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3304      	adds	r3, #4
 8006c04:	461a      	mov	r2, r3
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	f7fc fe8a 	bl	8003920 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c14:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3314      	adds	r3, #20
 8006c24:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3e:	627a      	str	r2, [r7, #36]	; 0x24
 8006c40:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6a39      	ldr	r1, [r7, #32]
 8006c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e000      	b.n	8006c58 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006c56:	2302      	movs	r3, #2
  }
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3730      	adds	r7, #48	; 0x30
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	08007229 	.word	0x08007229
 8006c64:	080072c3 	.word	0x080072c3
 8006c68:	0800743b 	.word	0x0800743b

08006c6c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d11d      	bne.n	8006cc2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_UART_Receive_DMA+0x26>
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e016      	b.n	8006cc4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_UART_Receive_DMA+0x38>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e00f      	b.n	8006cc4 <HAL_UART_Receive_DMA+0x58>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fc77 	bl	80075ac <UART_Start_Receive_DMA>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	e000      	b.n	8006cc4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006cc2:	2302      	movs	r3, #2
  }
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b0ba      	sub	sp, #232	; 0xe8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10f      	bne.n	8006d32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HAL_UART_IRQHandler+0x66>
 8006d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fde3 	bl	80078f6 <UART_Receive_IT>
      return;
 8006d30:	e256      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 80de 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x22c>
 8006d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80d1 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <HAL_UART_IRQHandler+0xae>
 8006d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f043 0201 	orr.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <HAL_UART_IRQHandler+0xd2>
 8006d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0202 	orr.w	r2, r3, #2
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xf6>
 8006daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f043 0204 	orr.w	r2, r3, #4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d011      	beq.n	8006df2 <HAL_UART_IRQHandler+0x126>
 8006dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	f043 0208 	orr.w	r2, r3, #8
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 81ed 	beq.w	80071d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <HAL_UART_IRQHandler+0x14e>
 8006e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fd6e 	bl	80078f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e24:	2b40      	cmp	r3, #64	; 0x40
 8006e26:	bf0c      	ite	eq
 8006e28:	2301      	moveq	r3, #1
 8006e2a:	2300      	movne	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <HAL_UART_IRQHandler+0x17a>
 8006e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d04f      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fc76 	bl	8007738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	d141      	bne.n	8006ede <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3314      	adds	r3, #20
 8006e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1d9      	bne.n	8006e5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d013      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	4a7d      	ldr	r2, [pc, #500]	; (80070a8 <HAL_UART_IRQHandler+0x3dc>)
 8006eb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fc fdf8 	bl	8003ab0 <HAL_DMA_Abort_IT>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d016      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed4:	e00e      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fb ffd8 	bl	8002e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	e00a      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fb ffd4 	bl	8002e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee4:	e006      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fb ffd0 	bl	8002e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ef2:	e170      	b.n	80071d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	bf00      	nop
    return;
 8006ef6:	e16e      	b.n	80071d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	f040 814a 	bne.w	8007196 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8143 	beq.w	8007196 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 813c 	beq.w	8007196 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	f040 80b4 	bne.w	80070ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8140 	beq.w	80071da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f62:	429a      	cmp	r2, r3
 8006f64:	f080 8139 	bcs.w	80071da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7a:	f000 8088 	beq.w	800708e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	330c      	adds	r3, #12
 8006f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006faa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1d9      	bne.n	8006f7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3314      	adds	r3, #20
 8006fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e1      	bne.n	8006fca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3314      	adds	r3, #20
 800700c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3314      	adds	r3, #20
 8007026:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800702a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800702c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007030:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e3      	bne.n	8007006 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007056:	e853 3f00 	ldrex	r3, [r3]
 800705a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800705c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800705e:	f023 0310 	bic.w	r3, r3, #16
 8007062:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007070:	65ba      	str	r2, [r7, #88]	; 0x58
 8007072:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800707e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e3      	bne.n	800704c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	4618      	mov	r0, r3
 800708a:	f7fc fca1 	bl	80039d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007096:	b29b      	uxth	r3, r3
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	b29b      	uxth	r3, r3
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f8b6 	bl	8007210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070a4:	e099      	b.n	80071da <HAL_UART_IRQHandler+0x50e>
 80070a6:	bf00      	nop
 80070a8:	080077ff 	.word	0x080077ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 808b 	beq.w	80071de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80070c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8086 	beq.w	80071de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	330c      	adds	r3, #12
 80070f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070f6:	647a      	str	r2, [r7, #68]	; 0x44
 80070f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070fe:	e841 2300 	strex	r3, r2, [r1]
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1e3      	bne.n	80070d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3314      	adds	r3, #20
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	e853 3f00 	ldrex	r3, [r3]
 8007118:	623b      	str	r3, [r7, #32]
   return(result);
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3314      	adds	r3, #20
 800712a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800712e:	633a      	str	r2, [r7, #48]	; 0x30
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e3      	bne.n	800710a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0310 	bic.w	r3, r3, #16
 8007166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	330c      	adds	r3, #12
 8007170:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007174:	61fa      	str	r2, [r7, #28]
 8007176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	69b9      	ldr	r1, [r7, #24]
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	617b      	str	r3, [r7, #20]
   return(result);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e3      	bne.n	8007150 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f83e 	bl	8007210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007194:	e023      	b.n	80071de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <HAL_UART_IRQHandler+0x4ea>
 80071a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fb39 	bl	8007826 <UART_Transmit_IT>
    return;
 80071b4:	e014      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00e      	beq.n	80071e0 <HAL_UART_IRQHandler+0x514>
 80071c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fb79 	bl	80078c6 <UART_EndTransmit_IT>
    return;
 80071d4:	e004      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
    return;
 80071d6:	bf00      	nop
 80071d8:	e002      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
      return;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
      return;
 80071de:	bf00      	nop
  }
}
 80071e0:	37e8      	adds	r7, #232	; 0xe8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop

080071e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b090      	sub	sp, #64	; 0x40
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d137      	bne.n	80072b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007246:	2200      	movs	r2, #0
 8007248:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800724a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3314      	adds	r3, #20
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	623b      	str	r3, [r7, #32]
   return(result);
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007260:	63bb      	str	r3, [r7, #56]	; 0x38
 8007262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3314      	adds	r3, #20
 8007268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800726a:	633a      	str	r2, [r7, #48]	; 0x30
 800726c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e5      	bne.n	800724a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800727e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	60fb      	str	r3, [r7, #12]
   return(result);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
 8007296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	330c      	adds	r3, #12
 800729c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800729e:	61fa      	str	r2, [r7, #28]
 80072a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	69b9      	ldr	r1, [r7, #24]
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	617b      	str	r3, [r7, #20]
   return(result);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e5      	bne.n	800727e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072b2:	e002      	b.n	80072ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80072b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072b6:	f7fb fdfd 	bl	8002eb4 <HAL_UART_TxCpltCallback>
}
 80072ba:	bf00      	nop
 80072bc:	3740      	adds	r7, #64	; 0x40
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff ff89 	bl	80071e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b09c      	sub	sp, #112	; 0x70
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d172      	bne.n	80073e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80072fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fc:	2200      	movs	r2, #0
 80072fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	330c      	adds	r3, #12
 8007306:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007316:	66bb      	str	r3, [r7, #104]	; 0x68
 8007318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	330c      	adds	r3, #12
 800731e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007320:	65ba      	str	r2, [r7, #88]	; 0x58
 8007322:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800732e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007346:	f023 0301 	bic.w	r3, r3, #1
 800734a:	667b      	str	r3, [r7, #100]	; 0x64
 800734c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3314      	adds	r3, #20
 8007352:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007354:	647a      	str	r2, [r7, #68]	; 0x44
 8007356:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800735a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e5      	bne.n	8007334 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3314      	adds	r3, #20
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	623b      	str	r3, [r7, #32]
   return(result);
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800737e:	663b      	str	r3, [r7, #96]	; 0x60
 8007380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3314      	adds	r3, #20
 8007386:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007388:	633a      	str	r2, [r7, #48]	; 0x30
 800738a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800738e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e5      	bne.n	8007368 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800739c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739e:	2220      	movs	r2, #32
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d119      	bne.n	80073e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	330c      	adds	r3, #12
 80073b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0310 	bic.w	r3, r3, #16
 80073c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	330c      	adds	r3, #12
 80073ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073cc:	61fa      	str	r2, [r7, #28]
 80073ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	69b9      	ldr	r1, [r7, #24]
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	617b      	str	r3, [r7, #20]
   return(result);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e5      	bne.n	80073ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d106      	bne.n	80073f6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073ec:	4619      	mov	r1, r3
 80073ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80073f0:	f7ff ff0e 	bl	8007210 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073f4:	e002      	b.n	80073fc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80073f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80073f8:	f7fb fd96 	bl	8002f28 <HAL_UART_RxCpltCallback>
}
 80073fc:	bf00      	nop
 80073fe:	3770      	adds	r7, #112	; 0x70
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007410:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	2b01      	cmp	r3, #1
 8007418:	d108      	bne.n	800742c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	b29b      	uxth	r3, r3
 8007422:	4619      	mov	r1, r3
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff fef3 	bl	8007210 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800742a:	e002      	b.n	8007432 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f7ff fee5 	bl	80071fc <HAL_UART_RxHalfCpltCallback>
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007456:	2b80      	cmp	r3, #128	; 0x80
 8007458:	bf0c      	ite	eq
 800745a:	2301      	moveq	r3, #1
 800745c:	2300      	movne	r3, #0
 800745e:	b2db      	uxtb	r3, r3
 8007460:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b21      	cmp	r3, #33	; 0x21
 800746c:	d108      	bne.n	8007480 <UART_DMAError+0x46>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2200      	movs	r2, #0
 8007478:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800747a:	68b8      	ldr	r0, [r7, #8]
 800747c:	f000 f934 	bl	80076e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	bf0c      	ite	eq
 800748e:	2301      	moveq	r3, #1
 8007490:	2300      	movne	r3, #0
 8007492:	b2db      	uxtb	r3, r3
 8007494:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b22      	cmp	r3, #34	; 0x22
 80074a0:	d108      	bne.n	80074b4 <UART_DMAError+0x7a>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2200      	movs	r2, #0
 80074ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80074ae:	68b8      	ldr	r0, [r7, #8]
 80074b0:	f000 f942 	bl	8007738 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	f043 0210 	orr.w	r2, r3, #16
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074c0:	68b8      	ldr	r0, [r7, #8]
 80074c2:	f7fb fce3 	bl	8002e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c6:	bf00      	nop
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b090      	sub	sp, #64	; 0x40
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	4613      	mov	r3, r2
 80074dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074de:	e050      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d04c      	beq.n	8007582 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <UART_WaitOnFlagUntilTimeout+0x30>
 80074ee:	f7fb fdc5 	bl	800307c <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d241      	bcs.n	8007582 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	330c      	adds	r3, #12
 8007504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	330c      	adds	r3, #12
 800751c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800751e:	637a      	str	r2, [r7, #52]	; 0x34
 8007520:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e5      	bne.n	80074fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3314      	adds	r3, #20
 8007538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	613b      	str	r3, [r7, #16]
   return(result);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	63bb      	str	r3, [r7, #56]	; 0x38
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3314      	adds	r3, #20
 8007550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007552:	623a      	str	r2, [r7, #32]
 8007554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	69f9      	ldr	r1, [r7, #28]
 8007558:	6a3a      	ldr	r2, [r7, #32]
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e5      	bne.n	8007532 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e00f      	b.n	80075a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	4013      	ands	r3, r2
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	429a      	cmp	r2, r3
 8007590:	bf0c      	ite	eq
 8007592:	2301      	moveq	r3, #1
 8007594:	2300      	movne	r3, #0
 8007596:	b2db      	uxtb	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	429a      	cmp	r2, r3
 800759e:	d09f      	beq.n	80074e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3740      	adds	r7, #64	; 0x40
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b098      	sub	sp, #96	; 0x60
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4613      	mov	r3, r2
 80075b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	88fa      	ldrh	r2, [r7, #6]
 80075c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2222      	movs	r2, #34	; 0x22
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	4a40      	ldr	r2, [pc, #256]	; (80076dc <UART_Start_Receive_DMA+0x130>)
 80075da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	4a3f      	ldr	r2, [pc, #252]	; (80076e0 <UART_Start_Receive_DMA+0x134>)
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	4a3e      	ldr	r2, [pc, #248]	; (80076e4 <UART_Start_Receive_DMA+0x138>)
 80075ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	2200      	movs	r2, #0
 80075f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80075f4:	f107 0308 	add.w	r3, r7, #8
 80075f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	f7fc f988 	bl	8003920 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007610:	2300      	movs	r3, #0
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d019      	beq.n	800766a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	330c      	adds	r3, #12
 800763c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800764c:	65bb      	str	r3, [r7, #88]	; 0x58
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	330c      	adds	r3, #12
 8007654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007656:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007658:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800765c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e5      	bne.n	8007636 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3314      	adds	r3, #20
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	f043 0301 	orr.w	r3, r3, #1
 8007680:	657b      	str	r3, [r7, #84]	; 0x54
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3314      	adds	r3, #20
 8007688:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800768a:	63ba      	str	r2, [r7, #56]	; 0x38
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e5      	bne.n	800766a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3314      	adds	r3, #20
 80076a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	617b      	str	r3, [r7, #20]
   return(result);
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b4:	653b      	str	r3, [r7, #80]	; 0x50
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3314      	adds	r3, #20
 80076bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076be:	627a      	str	r2, [r7, #36]	; 0x24
 80076c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6a39      	ldr	r1, [r7, #32]
 80076c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e5      	bne.n	800769e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3760      	adds	r7, #96	; 0x60
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	080072df 	.word	0x080072df
 80076e0:	08007405 	.word	0x08007405
 80076e4:	0800743b 	.word	0x0800743b

080076e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b089      	sub	sp, #36	; 0x24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	330c      	adds	r3, #12
 80076f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007706:	61fb      	str	r3, [r7, #28]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	330c      	adds	r3, #12
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	61ba      	str	r2, [r7, #24]
 8007712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6979      	ldr	r1, [r7, #20]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	613b      	str	r3, [r7, #16]
   return(result);
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e5      	bne.n	80076f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2220      	movs	r2, #32
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800772c:	bf00      	nop
 800772e:	3724      	adds	r7, #36	; 0x24
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007738:	b480      	push	{r7}
 800773a:	b095      	sub	sp, #84	; 0x54
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	330c      	adds	r3, #12
 8007746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	330c      	adds	r3, #12
 800775e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007760:	643a      	str	r2, [r7, #64]	; 0x40
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e5      	bne.n	8007740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3314      	adds	r3, #20
 800777a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	61fb      	str	r3, [r7, #28]
   return(result);
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f023 0301 	bic.w	r3, r3, #1
 800778a:	64bb      	str	r3, [r7, #72]	; 0x48
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3314      	adds	r3, #20
 8007792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800779a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e5      	bne.n	8007774 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d119      	bne.n	80077e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	330c      	adds	r3, #12
 80077b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	60bb      	str	r3, [r7, #8]
   return(result);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f023 0310 	bic.w	r3, r3, #16
 80077c6:	647b      	str	r3, [r7, #68]	; 0x44
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077d0:	61ba      	str	r2, [r7, #24]
 80077d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6979      	ldr	r1, [r7, #20]
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	613b      	str	r3, [r7, #16]
   return(result);
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e5      	bne.n	80077b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077f2:	bf00      	nop
 80077f4:	3754      	adds	r7, #84	; 0x54
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7fb fb37 	bl	8002e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007826:	b480      	push	{r7}
 8007828:	b085      	sub	sp, #20
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b21      	cmp	r3, #33	; 0x21
 8007838:	d13e      	bne.n	80078b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007842:	d114      	bne.n	800786e <UART_Transmit_IT+0x48>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d110      	bne.n	800786e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007860:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	1c9a      	adds	r2, r3, #2
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	621a      	str	r2, [r3, #32]
 800786c:	e008      	b.n	8007880 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	1c59      	adds	r1, r3, #1
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6211      	str	r1, [r2, #32]
 8007878:	781a      	ldrb	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29b      	uxth	r3, r3
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	4619      	mov	r1, r3
 800788e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10f      	bne.n	80078b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	e000      	b.n	80078ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078b8:	2302      	movs	r3, #2
  }
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fb fae4 	bl	8002eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b08c      	sub	sp, #48	; 0x30
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b22      	cmp	r3, #34	; 0x22
 8007908:	f040 80ab 	bne.w	8007a62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007914:	d117      	bne.n	8007946 <UART_Receive_IT+0x50>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d113      	bne.n	8007946 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	b29b      	uxth	r3, r3
 8007930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007934:	b29a      	uxth	r2, r3
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793e:	1c9a      	adds	r2, r3, #2
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	629a      	str	r2, [r3, #40]	; 0x28
 8007944:	e026      	b.n	8007994 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800794c:	2300      	movs	r3, #0
 800794e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007958:	d007      	beq.n	800796a <UART_Receive_IT+0x74>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <UART_Receive_IT+0x82>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e008      	b.n	800798a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007984:	b2da      	uxtb	r2, r3
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29b      	uxth	r3, r3
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	4619      	mov	r1, r3
 80079a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d15a      	bne.n	8007a5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0220 	bic.w	r2, r2, #32
 80079b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695a      	ldr	r2, [r3, #20]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0201 	bic.w	r2, r2, #1
 80079d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2220      	movs	r2, #32
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d135      	bne.n	8007a54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	330c      	adds	r3, #12
 80079f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	613b      	str	r3, [r7, #16]
   return(result);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f023 0310 	bic.w	r3, r3, #16
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	330c      	adds	r3, #12
 8007a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0e:	623a      	str	r2, [r7, #32]
 8007a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	69f9      	ldr	r1, [r7, #28]
 8007a14:	6a3a      	ldr	r2, [r7, #32]
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e5      	bne.n	80079ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b10      	cmp	r3, #16
 8007a2e:	d10a      	bne.n	8007a46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff fbdf 	bl	8007210 <HAL_UARTEx_RxEventCallback>
 8007a52:	e002      	b.n	8007a5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7fb fa67 	bl	8002f28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e002      	b.n	8007a64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e000      	b.n	8007a64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a62:	2302      	movs	r3, #2
  }
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3730      	adds	r7, #48	; 0x30
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a70:	b0c0      	sub	sp, #256	; 0x100
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	68d9      	ldr	r1, [r3, #12]
 8007a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	ea40 0301 	orr.w	r3, r0, r1
 8007a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ac4:	f021 010c 	bic.w	r1, r1, #12
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae6:	6999      	ldr	r1, [r3, #24]
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	ea40 0301 	orr.w	r3, r0, r1
 8007af2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	4b8f      	ldr	r3, [pc, #572]	; (8007d38 <UART_SetConfig+0x2cc>)
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d005      	beq.n	8007b0c <UART_SetConfig+0xa0>
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	4b8d      	ldr	r3, [pc, #564]	; (8007d3c <UART_SetConfig+0x2d0>)
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d104      	bne.n	8007b16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b0c:	f7fe f856 	bl	8005bbc <HAL_RCC_GetPCLK2Freq>
 8007b10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b14:	e003      	b.n	8007b1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b16:	f7fe f83d 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 8007b1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b28:	f040 810c 	bne.w	8007d44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b3e:	4622      	mov	r2, r4
 8007b40:	462b      	mov	r3, r5
 8007b42:	1891      	adds	r1, r2, r2
 8007b44:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b46:	415b      	adcs	r3, r3
 8007b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b4e:	4621      	mov	r1, r4
 8007b50:	eb12 0801 	adds.w	r8, r2, r1
 8007b54:	4629      	mov	r1, r5
 8007b56:	eb43 0901 	adc.w	r9, r3, r1
 8007b5a:	f04f 0200 	mov.w	r2, #0
 8007b5e:	f04f 0300 	mov.w	r3, #0
 8007b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b6e:	4690      	mov	r8, r2
 8007b70:	4699      	mov	r9, r3
 8007b72:	4623      	mov	r3, r4
 8007b74:	eb18 0303 	adds.w	r3, r8, r3
 8007b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b7c:	462b      	mov	r3, r5
 8007b7e:	eb49 0303 	adc.w	r3, r9, r3
 8007b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	18db      	adds	r3, r3, r3
 8007b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	eb42 0303 	adc.w	r3, r2, r3
 8007ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007bac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007bb0:	f7f9 f802 	bl	8000bb8 <__aeabi_uldivmod>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4b61      	ldr	r3, [pc, #388]	; (8007d40 <UART_SetConfig+0x2d4>)
 8007bba:	fba3 2302 	umull	r2, r3, r3, r2
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	011c      	lsls	r4, r3, #4
 8007bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007bd4:	4642      	mov	r2, r8
 8007bd6:	464b      	mov	r3, r9
 8007bd8:	1891      	adds	r1, r2, r2
 8007bda:	64b9      	str	r1, [r7, #72]	; 0x48
 8007bdc:	415b      	adcs	r3, r3
 8007bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007be4:	4641      	mov	r1, r8
 8007be6:	eb12 0a01 	adds.w	sl, r2, r1
 8007bea:	4649      	mov	r1, r9
 8007bec:	eb43 0b01 	adc.w	fp, r3, r1
 8007bf0:	f04f 0200 	mov.w	r2, #0
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c04:	4692      	mov	sl, r2
 8007c06:	469b      	mov	fp, r3
 8007c08:	4643      	mov	r3, r8
 8007c0a:	eb1a 0303 	adds.w	r3, sl, r3
 8007c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c12:	464b      	mov	r3, r9
 8007c14:	eb4b 0303 	adc.w	r3, fp, r3
 8007c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c30:	460b      	mov	r3, r1
 8007c32:	18db      	adds	r3, r3, r3
 8007c34:	643b      	str	r3, [r7, #64]	; 0x40
 8007c36:	4613      	mov	r3, r2
 8007c38:	eb42 0303 	adc.w	r3, r2, r3
 8007c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c46:	f7f8 ffb7 	bl	8000bb8 <__aeabi_uldivmod>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4b3b      	ldr	r3, [pc, #236]	; (8007d40 <UART_SetConfig+0x2d4>)
 8007c52:	fba3 2301 	umull	r2, r3, r3, r1
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	2264      	movs	r2, #100	; 0x64
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
 8007c5e:	1acb      	subs	r3, r1, r3
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c66:	4b36      	ldr	r3, [pc, #216]	; (8007d40 <UART_SetConfig+0x2d4>)
 8007c68:	fba3 2302 	umull	r2, r3, r3, r2
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c74:	441c      	add	r4, r3
 8007c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c88:	4642      	mov	r2, r8
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	1891      	adds	r1, r2, r2
 8007c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c90:	415b      	adcs	r3, r3
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c98:	4641      	mov	r1, r8
 8007c9a:	1851      	adds	r1, r2, r1
 8007c9c:	6339      	str	r1, [r7, #48]	; 0x30
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	414b      	adcs	r3, r1
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007cb0:	4659      	mov	r1, fp
 8007cb2:	00cb      	lsls	r3, r1, #3
 8007cb4:	4651      	mov	r1, sl
 8007cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cba:	4651      	mov	r1, sl
 8007cbc:	00ca      	lsls	r2, r1, #3
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	189b      	adds	r3, r3, r2
 8007cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ccc:	464b      	mov	r3, r9
 8007cce:	460a      	mov	r2, r1
 8007cd0:	eb42 0303 	adc.w	r3, r2, r3
 8007cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ce4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ce8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cec:	460b      	mov	r3, r1
 8007cee:	18db      	adds	r3, r3, r3
 8007cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	eb42 0303 	adc.w	r3, r2, r3
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d02:	f7f8 ff59 	bl	8000bb8 <__aeabi_uldivmod>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	; (8007d40 <UART_SetConfig+0x2d4>)
 8007d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	2164      	movs	r1, #100	; 0x64
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	3332      	adds	r3, #50	; 0x32
 8007d1e:	4a08      	ldr	r2, [pc, #32]	; (8007d40 <UART_SetConfig+0x2d4>)
 8007d20:	fba2 2303 	umull	r2, r3, r2, r3
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	f003 0207 	and.w	r2, r3, #7
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4422      	add	r2, r4
 8007d32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d34:	e105      	b.n	8007f42 <UART_SetConfig+0x4d6>
 8007d36:	bf00      	nop
 8007d38:	40011000 	.word	0x40011000
 8007d3c:	40011400 	.word	0x40011400
 8007d40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d56:	4642      	mov	r2, r8
 8007d58:	464b      	mov	r3, r9
 8007d5a:	1891      	adds	r1, r2, r2
 8007d5c:	6239      	str	r1, [r7, #32]
 8007d5e:	415b      	adcs	r3, r3
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
 8007d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d66:	4641      	mov	r1, r8
 8007d68:	1854      	adds	r4, r2, r1
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	eb43 0501 	adc.w	r5, r3, r1
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	00eb      	lsls	r3, r5, #3
 8007d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d7e:	00e2      	lsls	r2, r4, #3
 8007d80:	4614      	mov	r4, r2
 8007d82:	461d      	mov	r5, r3
 8007d84:	4643      	mov	r3, r8
 8007d86:	18e3      	adds	r3, r4, r3
 8007d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d8c:	464b      	mov	r3, r9
 8007d8e:	eb45 0303 	adc.w	r3, r5, r3
 8007d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007da2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007da6:	f04f 0200 	mov.w	r2, #0
 8007daa:	f04f 0300 	mov.w	r3, #0
 8007dae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007db2:	4629      	mov	r1, r5
 8007db4:	008b      	lsls	r3, r1, #2
 8007db6:	4621      	mov	r1, r4
 8007db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	008a      	lsls	r2, r1, #2
 8007dc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007dc4:	f7f8 fef8 	bl	8000bb8 <__aeabi_uldivmod>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4b60      	ldr	r3, [pc, #384]	; (8007f50 <UART_SetConfig+0x4e4>)
 8007dce:	fba3 2302 	umull	r2, r3, r3, r2
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	011c      	lsls	r4, r3, #4
 8007dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007de0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007de4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	1891      	adds	r1, r2, r2
 8007dee:	61b9      	str	r1, [r7, #24]
 8007df0:	415b      	adcs	r3, r3
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007df8:	4641      	mov	r1, r8
 8007dfa:	1851      	adds	r1, r2, r1
 8007dfc:	6139      	str	r1, [r7, #16]
 8007dfe:	4649      	mov	r1, r9
 8007e00:	414b      	adcs	r3, r1
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e10:	4659      	mov	r1, fp
 8007e12:	00cb      	lsls	r3, r1, #3
 8007e14:	4651      	mov	r1, sl
 8007e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e1a:	4651      	mov	r1, sl
 8007e1c:	00ca      	lsls	r2, r1, #3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4619      	mov	r1, r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	4642      	mov	r2, r8
 8007e26:	189b      	adds	r3, r3, r2
 8007e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	460a      	mov	r2, r1
 8007e30:	eb42 0303 	adc.w	r3, r2, r3
 8007e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e50:	4649      	mov	r1, r9
 8007e52:	008b      	lsls	r3, r1, #2
 8007e54:	4641      	mov	r1, r8
 8007e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e5a:	4641      	mov	r1, r8
 8007e5c:	008a      	lsls	r2, r1, #2
 8007e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e62:	f7f8 fea9 	bl	8000bb8 <__aeabi_uldivmod>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4b39      	ldr	r3, [pc, #228]	; (8007f50 <UART_SetConfig+0x4e4>)
 8007e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	2164      	movs	r1, #100	; 0x64
 8007e74:	fb01 f303 	mul.w	r3, r1, r3
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	011b      	lsls	r3, r3, #4
 8007e7c:	3332      	adds	r3, #50	; 0x32
 8007e7e:	4a34      	ldr	r2, [pc, #208]	; (8007f50 <UART_SetConfig+0x4e4>)
 8007e80:	fba2 2303 	umull	r2, r3, r2, r3
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e8a:	441c      	add	r4, r3
 8007e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e90:	2200      	movs	r2, #0
 8007e92:	673b      	str	r3, [r7, #112]	; 0x70
 8007e94:	677a      	str	r2, [r7, #116]	; 0x74
 8007e96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e9a:	4642      	mov	r2, r8
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	1891      	adds	r1, r2, r2
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	415b      	adcs	r3, r3
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eaa:	4641      	mov	r1, r8
 8007eac:	1851      	adds	r1, r2, r1
 8007eae:	6039      	str	r1, [r7, #0]
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	414b      	adcs	r3, r1
 8007eb4:	607b      	str	r3, [r7, #4]
 8007eb6:	f04f 0200 	mov.w	r2, #0
 8007eba:	f04f 0300 	mov.w	r3, #0
 8007ebe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	00cb      	lsls	r3, r1, #3
 8007ec6:	4651      	mov	r1, sl
 8007ec8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ecc:	4651      	mov	r1, sl
 8007ece:	00ca      	lsls	r2, r1, #3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	4642      	mov	r2, r8
 8007ed8:	189b      	adds	r3, r3, r2
 8007eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8007edc:	464b      	mov	r3, r9
 8007ede:	460a      	mov	r2, r1
 8007ee0:	eb42 0303 	adc.w	r3, r2, r3
 8007ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	663b      	str	r3, [r7, #96]	; 0x60
 8007ef0:	667a      	str	r2, [r7, #100]	; 0x64
 8007ef2:	f04f 0200 	mov.w	r2, #0
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007efe:	4649      	mov	r1, r9
 8007f00:	008b      	lsls	r3, r1, #2
 8007f02:	4641      	mov	r1, r8
 8007f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f08:	4641      	mov	r1, r8
 8007f0a:	008a      	lsls	r2, r1, #2
 8007f0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f10:	f7f8 fe52 	bl	8000bb8 <__aeabi_uldivmod>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <UART_SetConfig+0x4e4>)
 8007f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	2164      	movs	r1, #100	; 0x64
 8007f22:	fb01 f303 	mul.w	r3, r1, r3
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	3332      	adds	r3, #50	; 0x32
 8007f2c:	4a08      	ldr	r2, [pc, #32]	; (8007f50 <UART_SetConfig+0x4e4>)
 8007f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	f003 020f 	and.w	r2, r3, #15
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4422      	add	r2, r4
 8007f40:	609a      	str	r2, [r3, #8]
}
 8007f42:	bf00      	nop
 8007f44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f4e:	bf00      	nop
 8007f50:	51eb851f 	.word	0x51eb851f

08007f54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007f58:	4904      	ldr	r1, [pc, #16]	; (8007f6c <MX_FATFS_Init+0x18>)
 8007f5a:	4805      	ldr	r0, [pc, #20]	; (8007f70 <MX_FATFS_Init+0x1c>)
 8007f5c:	f002 fe9c 	bl	800ac98 <FATFS_LinkDriver>
 8007f60:	4603      	mov	r3, r0
 8007f62:	461a      	mov	r2, r3
 8007f64:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <MX_FATFS_Init+0x20>)
 8007f66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f68:	bf00      	nop
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	2000176c 	.word	0x2000176c
 8007f70:	20000014 	.word	0x20000014
 8007f74:	20001768 	.word	0x20001768

08007f78 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7f9 f97f 	bl	8001298 <SD_disk_initialize>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	4603      	mov	r3, r0
 8007fae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f9 fa56 	bl	8001464 <SD_disk_status>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007fd4:	7bf8      	ldrb	r0, [r7, #15]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	f7f9 fa58 	bl	8001490 <SD_disk_read>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007ffc:	7bf8      	ldrb	r0, [r7, #15]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	68b9      	ldr	r1, [r7, #8]
 8008004:	f7f9 faae 	bl	8001564 <SD_disk_write>
 8008008:	4603      	mov	r3, r0
 800800a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	4603      	mov	r3, r0
 800801c:	603a      	str	r2, [r7, #0]
 800801e:	71fb      	strb	r3, [r7, #7]
 8008020:	460b      	mov	r3, r1
 8008022:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	79b9      	ldrb	r1, [r7, #6]
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	4618      	mov	r0, r3
 800802c:	f7f9 fb1e 	bl	800166c <SD_disk_ioctl>
 8008030:	4603      	mov	r3, r0
 8008032:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	4a08      	ldr	r2, [pc, #32]	; (800806c <disk_status+0x30>)
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	79fa      	ldrb	r2, [r7, #7]
 8008054:	4905      	ldr	r1, [pc, #20]	; (800806c <disk_status+0x30>)
 8008056:	440a      	add	r2, r1
 8008058:	7a12      	ldrb	r2, [r2, #8]
 800805a:	4610      	mov	r0, r2
 800805c:	4798      	blx	r3
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008062:	7bfb      	ldrb	r3, [r7, #15]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20001998 	.word	0x20001998

08008070 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	4a0d      	ldr	r2, [pc, #52]	; (80080b8 <disk_initialize+0x48>)
 8008082:	5cd3      	ldrb	r3, [r2, r3]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d111      	bne.n	80080ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	4a0b      	ldr	r2, [pc, #44]	; (80080b8 <disk_initialize+0x48>)
 800808c:	2101      	movs	r1, #1
 800808e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	4a09      	ldr	r2, [pc, #36]	; (80080b8 <disk_initialize+0x48>)
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	79fa      	ldrb	r2, [r7, #7]
 800809e:	4906      	ldr	r1, [pc, #24]	; (80080b8 <disk_initialize+0x48>)
 80080a0:	440a      	add	r2, r1
 80080a2:	7a12      	ldrb	r2, [r2, #8]
 80080a4:	4610      	mov	r0, r2
 80080a6:	4798      	blx	r3
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20001998 	.word	0x20001998

080080bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80080bc:	b590      	push	{r4, r7, lr}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	4a0a      	ldr	r2, [pc, #40]	; (80080f8 <disk_read+0x3c>)
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	689c      	ldr	r4, [r3, #8]
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	4a07      	ldr	r2, [pc, #28]	; (80080f8 <disk_read+0x3c>)
 80080dc:	4413      	add	r3, r2
 80080de:	7a18      	ldrb	r0, [r3, #8]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	68b9      	ldr	r1, [r7, #8]
 80080e6:	47a0      	blx	r4
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd90      	pop	{r4, r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20001998 	.word	0x20001998

080080fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80080fc:	b590      	push	{r4, r7, lr}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	607a      	str	r2, [r7, #4]
 8008106:	603b      	str	r3, [r7, #0]
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	4a0a      	ldr	r2, [pc, #40]	; (8008138 <disk_write+0x3c>)
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	68dc      	ldr	r4, [r3, #12]
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	4a07      	ldr	r2, [pc, #28]	; (8008138 <disk_write+0x3c>)
 800811c:	4413      	add	r3, r2
 800811e:	7a18      	ldrb	r0, [r3, #8]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	47a0      	blx	r4
 8008128:	4603      	mov	r3, r0
 800812a:	75fb      	strb	r3, [r7, #23]
  return res;
 800812c:	7dfb      	ldrb	r3, [r7, #23]
}
 800812e:	4618      	mov	r0, r3
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	bd90      	pop	{r4, r7, pc}
 8008136:	bf00      	nop
 8008138:	20001998 	.word	0x20001998

0800813c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	603a      	str	r2, [r7, #0]
 8008146:	71fb      	strb	r3, [r7, #7]
 8008148:	460b      	mov	r3, r1
 800814a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	4a09      	ldr	r2, [pc, #36]	; (8008174 <disk_ioctl+0x38>)
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	79fa      	ldrb	r2, [r7, #7]
 800815a:	4906      	ldr	r1, [pc, #24]	; (8008174 <disk_ioctl+0x38>)
 800815c:	440a      	add	r2, r1
 800815e:	7a10      	ldrb	r0, [r2, #8]
 8008160:	79b9      	ldrb	r1, [r7, #6]
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	4798      	blx	r3
 8008166:	4603      	mov	r3, r0
 8008168:	73fb      	strb	r3, [r7, #15]
  return res;
 800816a:	7bfb      	ldrb	r3, [r7, #15]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20001998 	.word	0x20001998

08008178 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3301      	adds	r3, #1
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008188:	89fb      	ldrh	r3, [r7, #14]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	b21a      	sxth	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	b21b      	sxth	r3, r3
 8008194:	4313      	orrs	r3, r2
 8008196:	b21b      	sxth	r3, r3
 8008198:	81fb      	strh	r3, [r7, #14]
	return rv;
 800819a:	89fb      	ldrh	r3, [r7, #14]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3303      	adds	r3, #3
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	021b      	lsls	r3, r3, #8
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	3202      	adds	r2, #2
 80081c0:	7812      	ldrb	r2, [r2, #0]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	021b      	lsls	r3, r3, #8
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	3201      	adds	r2, #1
 80081ce:	7812      	ldrb	r2, [r2, #0]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	021b      	lsls	r3, r3, #8
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	7812      	ldrb	r2, [r2, #0]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
	return rv;
 80081e0:	68fb      	ldr	r3, [r7, #12]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	460b      	mov	r3, r1
 80081f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	887a      	ldrh	r2, [r7, #2]
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	887b      	ldrh	r3, [r7, #2]
 8008208:	0a1b      	lsrs	r3, r3, #8
 800820a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	887a      	ldrh	r2, [r7, #2]
 8008214:	b2d2      	uxtb	r2, r2
 8008216:	701a      	strb	r2, [r3, #0]
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	0a1b      	lsrs	r3, r3, #8
 800823e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	607a      	str	r2, [r7, #4]
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	b2d2      	uxtb	r2, r2
 800824a:	701a      	strb	r2, [r3, #0]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	0a1b      	lsrs	r3, r3, #8
 8008250:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	0a1b      	lsrs	r3, r3, #8
 8008262:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	b2d2      	uxtb	r2, r2
 800826e:	701a      	strb	r2, [r3, #0]
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00d      	beq.n	80082b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	1c53      	adds	r3, r2, #1
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	1c59      	adds	r1, r3, #1
 80082a0:	6179      	str	r1, [r7, #20]
 80082a2:	7812      	ldrb	r2, [r2, #0]
 80082a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	607b      	str	r3, [r7, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1f1      	bne.n	8008296 <mem_cpy+0x1a>
	}
}
 80082b2:	bf00      	nop
 80082b4:	371c      	adds	r7, #28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80082be:	b480      	push	{r7}
 80082c0:	b087      	sub	sp, #28
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	617a      	str	r2, [r7, #20]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3b01      	subs	r3, #1
 80082de:	607b      	str	r3, [r7, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1f3      	bne.n	80082ce <mem_set+0x10>
}
 80082e6:	bf00      	nop
 80082e8:	bf00      	nop
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80082f4:	b480      	push	{r7}
 80082f6:	b089      	sub	sp, #36	; 0x24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	61fb      	str	r3, [r7, #28]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	61fa      	str	r2, [r7, #28]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	4619      	mov	r1, r3
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	61ba      	str	r2, [r7, #24]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	1acb      	subs	r3, r1, r3
 8008320:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	3b01      	subs	r3, #1
 8008326:	607b      	str	r3, [r7, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <mem_cmp+0x40>
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0eb      	beq.n	800830c <mem_cmp+0x18>

	return r;
 8008334:	697b      	ldr	r3, [r7, #20]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3724      	adds	r7, #36	; 0x24
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800834c:	e002      	b.n	8008354 <chk_chr+0x12>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3301      	adds	r3, #1
 8008352:	607b      	str	r3, [r7, #4]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <chk_chr+0x26>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	461a      	mov	r2, r3
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	4293      	cmp	r3, r2
 8008366:	d1f2      	bne.n	800834e <chk_chr+0xc>
	return *str;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	781b      	ldrb	r3, [r3, #0]
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008382:	2300      	movs	r3, #0
 8008384:	60bb      	str	r3, [r7, #8]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	e029      	b.n	80083e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800838c:	4a27      	ldr	r2, [pc, #156]	; (800842c <chk_lock+0xb4>)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	4413      	add	r3, r2
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d01d      	beq.n	80083d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800839a:	4a24      	ldr	r2, [pc, #144]	; (800842c <chk_lock+0xb4>)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	4413      	add	r3, r2
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d116      	bne.n	80083da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80083ac:	4a1f      	ldr	r2, [pc, #124]	; (800842c <chk_lock+0xb4>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	4413      	add	r3, r2
 80083b4:	3304      	adds	r3, #4
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083bc:	429a      	cmp	r2, r3
 80083be:	d10c      	bne.n	80083da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80083c0:	4a1a      	ldr	r2, [pc, #104]	; (800842c <chk_lock+0xb4>)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	4413      	add	r3, r2
 80083c8:	3308      	adds	r3, #8
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d102      	bne.n	80083da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80083d4:	e007      	b.n	80083e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80083d6:	2301      	movs	r3, #1
 80083d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3301      	adds	r3, #1
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d9d2      	bls.n	800838c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d109      	bne.n	8008400 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <chk_lock+0x80>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d101      	bne.n	80083fc <chk_lock+0x84>
 80083f8:	2300      	movs	r3, #0
 80083fa:	e010      	b.n	800841e <chk_lock+0xa6>
 80083fc:	2312      	movs	r3, #18
 80083fe:	e00e      	b.n	800841e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d108      	bne.n	8008418 <chk_lock+0xa0>
 8008406:	4a09      	ldr	r2, [pc, #36]	; (800842c <chk_lock+0xb4>)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	4413      	add	r3, r2
 800840e:	330c      	adds	r3, #12
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008416:	d101      	bne.n	800841c <chk_lock+0xa4>
 8008418:	2310      	movs	r3, #16
 800841a:	e000      	b.n	800841e <chk_lock+0xa6>
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	20001778 	.word	0x20001778

08008430 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008436:	2300      	movs	r3, #0
 8008438:	607b      	str	r3, [r7, #4]
 800843a:	e002      	b.n	8008442 <enq_lock+0x12>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3301      	adds	r3, #1
 8008440:	607b      	str	r3, [r7, #4]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d806      	bhi.n	8008456 <enq_lock+0x26>
 8008448:	4a09      	ldr	r2, [pc, #36]	; (8008470 <enq_lock+0x40>)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	4413      	add	r3, r2
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1f2      	bne.n	800843c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b02      	cmp	r3, #2
 800845a:	bf14      	ite	ne
 800845c:	2301      	movne	r3, #1
 800845e:	2300      	moveq	r3, #0
 8008460:	b2db      	uxtb	r3, r3
}
 8008462:	4618      	mov	r0, r3
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	20001778 	.word	0x20001778

08008474 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	e01f      	b.n	80084c4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008484:	4a41      	ldr	r2, [pc, #260]	; (800858c <inc_lock+0x118>)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	011b      	lsls	r3, r3, #4
 800848a:	4413      	add	r3, r2
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	d113      	bne.n	80084be <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008496:	4a3d      	ldr	r2, [pc, #244]	; (800858c <inc_lock+0x118>)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	4413      	add	r3, r2
 800849e:	3304      	adds	r3, #4
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d109      	bne.n	80084be <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80084aa:	4a38      	ldr	r2, [pc, #224]	; (800858c <inc_lock+0x118>)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	4413      	add	r3, r2
 80084b2:	3308      	adds	r3, #8
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d006      	beq.n	80084cc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3301      	adds	r3, #1
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d9dc      	bls.n	8008484 <inc_lock+0x10>
 80084ca:	e000      	b.n	80084ce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80084cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d132      	bne.n	800853a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80084d4:	2300      	movs	r3, #0
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e002      	b.n	80084e0 <inc_lock+0x6c>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3301      	adds	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d806      	bhi.n	80084f4 <inc_lock+0x80>
 80084e6:	4a29      	ldr	r2, [pc, #164]	; (800858c <inc_lock+0x118>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	4413      	add	r3, r2
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1f2      	bne.n	80084da <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d101      	bne.n	80084fe <inc_lock+0x8a>
 80084fa:	2300      	movs	r3, #0
 80084fc:	e040      	b.n	8008580 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	4922      	ldr	r1, [pc, #136]	; (800858c <inc_lock+0x118>)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	440b      	add	r3, r1
 800850a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	491e      	ldr	r1, [pc, #120]	; (800858c <inc_lock+0x118>)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	011b      	lsls	r3, r3, #4
 8008516:	440b      	add	r3, r1
 8008518:	3304      	adds	r3, #4
 800851a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	695a      	ldr	r2, [r3, #20]
 8008520:	491a      	ldr	r1, [pc, #104]	; (800858c <inc_lock+0x118>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	440b      	add	r3, r1
 8008528:	3308      	adds	r3, #8
 800852a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800852c:	4a17      	ldr	r2, [pc, #92]	; (800858c <inc_lock+0x118>)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	4413      	add	r3, r2
 8008534:	330c      	adds	r3, #12
 8008536:	2200      	movs	r2, #0
 8008538:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d009      	beq.n	8008554 <inc_lock+0xe0>
 8008540:	4a12      	ldr	r2, [pc, #72]	; (800858c <inc_lock+0x118>)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	4413      	add	r3, r2
 8008548:	330c      	adds	r3, #12
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <inc_lock+0xe0>
 8008550:	2300      	movs	r3, #0
 8008552:	e015      	b.n	8008580 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d108      	bne.n	800856c <inc_lock+0xf8>
 800855a:	4a0c      	ldr	r2, [pc, #48]	; (800858c <inc_lock+0x118>)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	4413      	add	r3, r2
 8008562:	330c      	adds	r3, #12
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	3301      	adds	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	e001      	b.n	8008570 <inc_lock+0xfc>
 800856c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008570:	4906      	ldr	r1, [pc, #24]	; (800858c <inc_lock+0x118>)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	440b      	add	r3, r1
 8008578:	330c      	adds	r3, #12
 800857a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3301      	adds	r3, #1
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	20001778 	.word	0x20001778

08008590 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3b01      	subs	r3, #1
 800859c:	607b      	str	r3, [r7, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d825      	bhi.n	80085f0 <dec_lock+0x60>
		n = Files[i].ctr;
 80085a4:	4a17      	ldr	r2, [pc, #92]	; (8008604 <dec_lock+0x74>)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	011b      	lsls	r3, r3, #4
 80085aa:	4413      	add	r3, r2
 80085ac:	330c      	adds	r3, #12
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80085b2:	89fb      	ldrh	r3, [r7, #14]
 80085b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b8:	d101      	bne.n	80085be <dec_lock+0x2e>
 80085ba:	2300      	movs	r3, #0
 80085bc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80085be:	89fb      	ldrh	r3, [r7, #14]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <dec_lock+0x3a>
 80085c4:	89fb      	ldrh	r3, [r7, #14]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80085ca:	4a0e      	ldr	r2, [pc, #56]	; (8008604 <dec_lock+0x74>)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	4413      	add	r3, r2
 80085d2:	330c      	adds	r3, #12
 80085d4:	89fa      	ldrh	r2, [r7, #14]
 80085d6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80085d8:	89fb      	ldrh	r3, [r7, #14]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d105      	bne.n	80085ea <dec_lock+0x5a>
 80085de:	4a09      	ldr	r2, [pc, #36]	; (8008604 <dec_lock+0x74>)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	4413      	add	r3, r2
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	737b      	strb	r3, [r7, #13]
 80085ee:	e001      	b.n	80085f4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80085f0:	2302      	movs	r3, #2
 80085f2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80085f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	20001778 	.word	0x20001778

08008608 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	e010      	b.n	8008638 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008616:	4a0d      	ldr	r2, [pc, #52]	; (800864c <clear_lock+0x44>)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	4413      	add	r3, r2
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d105      	bne.n	8008632 <clear_lock+0x2a>
 8008626:	4a09      	ldr	r2, [pc, #36]	; (800864c <clear_lock+0x44>)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	4413      	add	r3, r2
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3301      	adds	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d9eb      	bls.n	8008616 <clear_lock+0xe>
	}
}
 800863e:	bf00      	nop
 8008640:	bf00      	nop
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	20001778 	.word	0x20001778

08008650 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	78db      	ldrb	r3, [r3, #3]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d034      	beq.n	80086ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008668:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	7858      	ldrb	r0, [r3, #1]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008674:	2301      	movs	r3, #1
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	f7ff fd40 	bl	80080fc <disk_write>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008682:	2301      	movs	r3, #1
 8008684:	73fb      	strb	r3, [r7, #15]
 8008686:	e022      	b.n	80086ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	1ad2      	subs	r2, r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	429a      	cmp	r2, r3
 800869c:	d217      	bcs.n	80086ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	789b      	ldrb	r3, [r3, #2]
 80086a2:	613b      	str	r3, [r7, #16]
 80086a4:	e010      	b.n	80086c8 <sync_window+0x78>
					wsect += fs->fsize;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4413      	add	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	7858      	ldrb	r0, [r3, #1]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80086ba:	2301      	movs	r3, #1
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	f7ff fd1d 	bl	80080fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	613b      	str	r3, [r7, #16]
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d8eb      	bhi.n	80086a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d01b      	beq.n	8008728 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff ffad 	bl	8008650 <sync_window>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d113      	bne.n	8008728 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7858      	ldrb	r0, [r3, #1]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800870a:	2301      	movs	r3, #1
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	f7ff fcd5 	bl	80080bc <disk_read>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008718:	f04f 33ff 	mov.w	r3, #4294967295
 800871c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800871e:	2301      	movs	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ff87 	bl	8008650 <sync_window>
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d159      	bne.n	8008800 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	2b03      	cmp	r3, #3
 8008752:	d149      	bne.n	80087e8 <sync_fs+0xb4>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	791b      	ldrb	r3, [r3, #4]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d145      	bne.n	80087e8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	899b      	ldrh	r3, [r3, #12]
 8008766:	461a      	mov	r2, r3
 8008768:	2100      	movs	r1, #0
 800876a:	f7ff fda8 	bl	80082be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3338      	adds	r3, #56	; 0x38
 8008772:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008776:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800877a:	4618      	mov	r0, r3
 800877c:	f7ff fd37 	bl	80081ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3338      	adds	r3, #56	; 0x38
 8008784:	4921      	ldr	r1, [pc, #132]	; (800880c <sync_fs+0xd8>)
 8008786:	4618      	mov	r0, r3
 8008788:	f7ff fd4c 	bl	8008224 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3338      	adds	r3, #56	; 0x38
 8008790:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008794:	491e      	ldr	r1, [pc, #120]	; (8008810 <sync_fs+0xdc>)
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff fd44 	bl	8008224 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3338      	adds	r3, #56	; 0x38
 80087a0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	4619      	mov	r1, r3
 80087aa:	4610      	mov	r0, r2
 80087ac:	f7ff fd3a 	bl	8008224 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3338      	adds	r3, #56	; 0x38
 80087b4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	4619      	mov	r1, r3
 80087be:	4610      	mov	r0, r2
 80087c0:	f7ff fd30 	bl	8008224 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	7858      	ldrb	r0, [r3, #1]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087dc:	2301      	movs	r3, #1
 80087de:	f7ff fc8d 	bl	80080fc <disk_write>
			fs->fsi_flag = 0;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	2200      	movs	r2, #0
 80087ee:	2100      	movs	r1, #0
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff fca3 	bl	800813c <disk_ioctl>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <sync_fs+0xcc>
 80087fc:	2301      	movs	r3, #1
 80087fe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	41615252 	.word	0x41615252
 8008810:	61417272 	.word	0x61417272

08008814 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	3b02      	subs	r3, #2
 8008822:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	3b02      	subs	r3, #2
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d301      	bcc.n	8008834 <clust2sect+0x20>
 8008830:	2300      	movs	r3, #0
 8008832:	e008      	b.n	8008846 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	895b      	ldrh	r3, [r3, #10]
 8008838:	461a      	mov	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	fb03 f202 	mul.w	r2, r3, r2
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008844:	4413      	add	r3, r2
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b086      	sub	sp, #24
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d904      	bls.n	8008872 <get_fat+0x20>
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	69db      	ldr	r3, [r3, #28]
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d302      	bcc.n	8008878 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008872:	2301      	movs	r3, #1
 8008874:	617b      	str	r3, [r7, #20]
 8008876:	e0bb      	b.n	80089f0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
 800887c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b03      	cmp	r3, #3
 8008884:	f000 8083 	beq.w	800898e <get_fat+0x13c>
 8008888:	2b03      	cmp	r3, #3
 800888a:	f300 80a7 	bgt.w	80089dc <get_fat+0x18a>
 800888e:	2b01      	cmp	r3, #1
 8008890:	d002      	beq.n	8008898 <get_fat+0x46>
 8008892:	2b02      	cmp	r3, #2
 8008894:	d056      	beq.n	8008944 <get_fat+0xf2>
 8008896:	e0a1      	b.n	80089dc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	085b      	lsrs	r3, r3, #1
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	899b      	ldrh	r3, [r3, #12]
 80088ae:	4619      	mov	r1, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80088b6:	4413      	add	r3, r2
 80088b8:	4619      	mov	r1, r3
 80088ba:	6938      	ldr	r0, [r7, #16]
 80088bc:	f7ff ff0c 	bl	80086d8 <move_window>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f040 808d 	bne.w	80089e2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	60fa      	str	r2, [r7, #12]
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	8992      	ldrh	r2, [r2, #12]
 80088d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80088d6:	fb01 f202 	mul.w	r2, r1, r2
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	4413      	add	r3, r2
 80088e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	899b      	ldrh	r3, [r3, #12]
 80088ee:	4619      	mov	r1, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80088f6:	4413      	add	r3, r2
 80088f8:	4619      	mov	r1, r3
 80088fa:	6938      	ldr	r0, [r7, #16]
 80088fc:	f7ff feec 	bl	80086d8 <move_window>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d16f      	bne.n	80089e6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	899b      	ldrh	r3, [r3, #12]
 800890a:	461a      	mov	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008912:	fb01 f202 	mul.w	r2, r1, r2
 8008916:	1a9b      	subs	r3, r3, r2
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	4413      	add	r3, r2
 800891c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008920:	021b      	lsls	r3, r3, #8
 8008922:	461a      	mov	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4313      	orrs	r3, r2
 8008928:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <get_fat+0xe8>
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	091b      	lsrs	r3, r3, #4
 8008938:	e002      	b.n	8008940 <get_fat+0xee>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008940:	617b      	str	r3, [r7, #20]
			break;
 8008942:	e055      	b.n	80089f0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	899b      	ldrh	r3, [r3, #12]
 800894c:	085b      	lsrs	r3, r3, #1
 800894e:	b29b      	uxth	r3, r3
 8008950:	4619      	mov	r1, r3
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	fbb3 f3f1 	udiv	r3, r3, r1
 8008958:	4413      	add	r3, r2
 800895a:	4619      	mov	r1, r3
 800895c:	6938      	ldr	r0, [r7, #16]
 800895e:	f7ff febb 	bl	80086d8 <move_window>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d140      	bne.n	80089ea <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	8992      	ldrh	r2, [r2, #12]
 8008976:	fbb3 f0f2 	udiv	r0, r3, r2
 800897a:	fb00 f202 	mul.w	r2, r0, r2
 800897e:	1a9b      	subs	r3, r3, r2
 8008980:	440b      	add	r3, r1
 8008982:	4618      	mov	r0, r3
 8008984:	f7ff fbf8 	bl	8008178 <ld_word>
 8008988:	4603      	mov	r3, r0
 800898a:	617b      	str	r3, [r7, #20]
			break;
 800898c:	e030      	b.n	80089f0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	899b      	ldrh	r3, [r3, #12]
 8008996:	089b      	lsrs	r3, r3, #2
 8008998:	b29b      	uxth	r3, r3
 800899a:	4619      	mov	r1, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	fbb3 f3f1 	udiv	r3, r3, r1
 80089a2:	4413      	add	r3, r2
 80089a4:	4619      	mov	r1, r3
 80089a6:	6938      	ldr	r0, [r7, #16]
 80089a8:	f7ff fe96 	bl	80086d8 <move_window>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d11d      	bne.n	80089ee <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	8992      	ldrh	r2, [r2, #12]
 80089c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80089c4:	fb00 f202 	mul.w	r2, r0, r2
 80089c8:	1a9b      	subs	r3, r3, r2
 80089ca:	440b      	add	r3, r1
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7ff fbeb 	bl	80081a8 <ld_dword>
 80089d2:	4603      	mov	r3, r0
 80089d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089d8:	617b      	str	r3, [r7, #20]
			break;
 80089da:	e009      	b.n	80089f0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80089dc:	2301      	movs	r3, #1
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	e006      	b.n	80089f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089e2:	bf00      	nop
 80089e4:	e004      	b.n	80089f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089e6:	bf00      	nop
 80089e8:	e002      	b.n	80089f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089ea:	bf00      	nop
 80089ec:	e000      	b.n	80089f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089ee:	bf00      	nop
		}
	}

	return val;
 80089f0:	697b      	ldr	r3, [r7, #20]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80089fa:	b590      	push	{r4, r7, lr}
 80089fc:	b089      	sub	sp, #36	; 0x24
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a06:	2302      	movs	r3, #2
 8008a08:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	f240 8102 	bls.w	8008c16 <put_fat+0x21c>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	f080 80fc 	bcs.w	8008c16 <put_fat+0x21c>
		switch (fs->fs_type) {
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	f000 80b6 	beq.w	8008b94 <put_fat+0x19a>
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	f300 80fd 	bgt.w	8008c28 <put_fat+0x22e>
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d003      	beq.n	8008a3a <put_fat+0x40>
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	f000 8083 	beq.w	8008b3e <put_fat+0x144>
 8008a38:	e0f6      	b.n	8008c28 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	61bb      	str	r3, [r7, #24]
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	085b      	lsrs	r3, r3, #1
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	4413      	add	r3, r2
 8008a46:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	899b      	ldrh	r3, [r3, #12]
 8008a50:	4619      	mov	r1, r3
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a58:	4413      	add	r3, r2
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f7ff fe3b 	bl	80086d8 <move_window>
 8008a62:	4603      	mov	r3, r0
 8008a64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a66:	7ffb      	ldrb	r3, [r7, #31]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f040 80d6 	bne.w	8008c1a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	61ba      	str	r2, [r7, #24]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	8992      	ldrh	r2, [r2, #12]
 8008a7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a82:	fb00 f202 	mul.w	r2, r0, r2
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	440b      	add	r3, r1
 8008a8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00d      	beq.n	8008ab2 <put_fat+0xb8>
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	b25b      	sxtb	r3, r3
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	b25a      	sxtb	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	b25b      	sxtb	r3, r3
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	e001      	b.n	8008ab6 <put_fat+0xbc>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	899b      	ldrh	r3, [r3, #12]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ad0:	4413      	add	r3, r2
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f7ff fdff 	bl	80086d8 <move_window>
 8008ada:	4603      	mov	r3, r0
 8008adc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ade:	7ffb      	ldrb	r3, [r7, #31]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f040 809c 	bne.w	8008c1e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	899b      	ldrh	r3, [r3, #12]
 8008af0:	461a      	mov	r2, r3
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008af8:	fb00 f202 	mul.w	r2, r0, r2
 8008afc:	1a9b      	subs	r3, r3, r2
 8008afe:	440b      	add	r3, r1
 8008b00:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <put_fat+0x11a>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	091b      	lsrs	r3, r3, #4
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	e00e      	b.n	8008b32 <put_fat+0x138>
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	b25b      	sxtb	r3, r3
 8008b1a:	f023 030f 	bic.w	r3, r3, #15
 8008b1e:	b25a      	sxtb	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	0a1b      	lsrs	r3, r3, #8
 8008b24:	b25b      	sxtb	r3, r3
 8008b26:	f003 030f 	and.w	r3, r3, #15
 8008b2a:	b25b      	sxtb	r3, r3
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	b25b      	sxtb	r3, r3
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	70da      	strb	r2, [r3, #3]
			break;
 8008b3c:	e074      	b.n	8008c28 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	899b      	ldrh	r3, [r3, #12]
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b52:	4413      	add	r3, r2
 8008b54:	4619      	mov	r1, r3
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f7ff fdbe 	bl	80086d8 <move_window>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b60:	7ffb      	ldrb	r3, [r7, #31]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d15d      	bne.n	8008c22 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	8992      	ldrh	r2, [r2, #12]
 8008b74:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b78:	fb00 f202 	mul.w	r2, r0, r2
 8008b7c:	1a9b      	subs	r3, r3, r2
 8008b7e:	440b      	add	r3, r1
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	b292      	uxth	r2, r2
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7ff fb31 	bl	80081ee <st_word>
			fs->wflag = 1;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	70da      	strb	r2, [r3, #3]
			break;
 8008b92:	e049      	b.n	8008c28 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	899b      	ldrh	r3, [r3, #12]
 8008b9c:	089b      	lsrs	r3, r3, #2
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ba8:	4413      	add	r3, r2
 8008baa:	4619      	mov	r1, r3
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f7ff fd93 	bl	80086d8 <move_window>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bb6:	7ffb      	ldrb	r3, [r7, #31]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d134      	bne.n	8008c26 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	8992      	ldrh	r2, [r2, #12]
 8008bd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bd4:	fb00 f202 	mul.w	r2, r0, r2
 8008bd8:	1a9b      	subs	r3, r3, r2
 8008bda:	440b      	add	r3, r1
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff fae3 	bl	80081a8 <ld_dword>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008be8:	4323      	orrs	r3, r4
 8008bea:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	8992      	ldrh	r2, [r2, #12]
 8008bfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bfe:	fb00 f202 	mul.w	r2, r0, r2
 8008c02:	1a9b      	subs	r3, r3, r2
 8008c04:	440b      	add	r3, r1
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fb0b 	bl	8008224 <st_dword>
			fs->wflag = 1;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2201      	movs	r2, #1
 8008c12:	70da      	strb	r2, [r3, #3]
			break;
 8008c14:	e008      	b.n	8008c28 <put_fat+0x22e>
		}
	}
 8008c16:	bf00      	nop
 8008c18:	e006      	b.n	8008c28 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008c1a:	bf00      	nop
 8008c1c:	e004      	b.n	8008c28 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008c1e:	bf00      	nop
 8008c20:	e002      	b.n	8008c28 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008c22:	bf00      	nop
 8008c24:	e000      	b.n	8008c28 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008c26:	bf00      	nop
	return res;
 8008c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3724      	adds	r7, #36	; 0x24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd90      	pop	{r4, r7, pc}

08008c32 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b088      	sub	sp, #32
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d904      	bls.n	8008c58 <remove_chain+0x26>
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d301      	bcc.n	8008c5c <remove_chain+0x2a>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e04b      	b.n	8008cf4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00c      	beq.n	8008c7c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008c62:	f04f 32ff 	mov.w	r2, #4294967295
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	69b8      	ldr	r0, [r7, #24]
 8008c6a:	f7ff fec6 	bl	80089fa <put_fat>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008c72:	7ffb      	ldrb	r3, [r7, #31]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <remove_chain+0x4a>
 8008c78:	7ffb      	ldrb	r3, [r7, #31]
 8008c7a:	e03b      	b.n	8008cf4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c7c:	68b9      	ldr	r1, [r7, #8]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f7ff fde7 	bl	8008852 <get_fat>
 8008c84:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d031      	beq.n	8008cf0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <remove_chain+0x64>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e02e      	b.n	8008cf4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9c:	d101      	bne.n	8008ca2 <remove_chain+0x70>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e028      	b.n	8008cf4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	69b8      	ldr	r0, [r7, #24]
 8008ca8:	f7ff fea7 	bl	80089fa <put_fat>
 8008cac:	4603      	mov	r3, r0
 8008cae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008cb0:	7ffb      	ldrb	r3, [r7, #31]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <remove_chain+0x88>
 8008cb6:	7ffb      	ldrb	r3, [r7, #31]
 8008cb8:	e01c      	b.n	8008cf4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	3b02      	subs	r3, #2
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d20b      	bcs.n	8008ce0 <remove_chain+0xae>
			fs->free_clst++;
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	791b      	ldrb	r3, [r3, #4]
 8008cd6:	f043 0301 	orr.w	r3, r3, #1
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d3c6      	bcc.n	8008c7c <remove_chain+0x4a>
 8008cee:	e000      	b.n	8008cf2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008cf0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3720      	adds	r7, #32
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10d      	bne.n	8008d2e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d004      	beq.n	8008d28 <create_chain+0x2c>
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d31b      	bcc.n	8008d60 <create_chain+0x64>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	61bb      	str	r3, [r7, #24]
 8008d2c:	e018      	b.n	8008d60 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff fd8e 	bl	8008852 <get_fat>
 8008d36:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d801      	bhi.n	8008d42 <create_chain+0x46>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e070      	b.n	8008e24 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d48:	d101      	bne.n	8008d4e <create_chain+0x52>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	e06a      	b.n	8008e24 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d201      	bcs.n	8008d5c <create_chain+0x60>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	e063      	b.n	8008e24 <create_chain+0x128>
		scl = clst;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	3301      	adds	r3, #1
 8008d68:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d307      	bcc.n	8008d84 <create_chain+0x88>
				ncl = 2;
 8008d74:	2302      	movs	r3, #2
 8008d76:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d901      	bls.n	8008d84 <create_chain+0x88>
 8008d80:	2300      	movs	r3, #0
 8008d82:	e04f      	b.n	8008e24 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d84:	69f9      	ldr	r1, [r7, #28]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7ff fd63 	bl	8008852 <get_fat>
 8008d8c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00e      	beq.n	8008db2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d003      	beq.n	8008da2 <create_chain+0xa6>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da0:	d101      	bne.n	8008da6 <create_chain+0xaa>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	e03e      	b.n	8008e24 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d1da      	bne.n	8008d64 <create_chain+0x68>
 8008dae:	2300      	movs	r3, #0
 8008db0:	e038      	b.n	8008e24 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008db2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295
 8008db8:	69f9      	ldr	r1, [r7, #28]
 8008dba:	6938      	ldr	r0, [r7, #16]
 8008dbc:	f7ff fe1d 	bl	80089fa <put_fat>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d109      	bne.n	8008dde <create_chain+0xe2>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d006      	beq.n	8008dde <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6938      	ldr	r0, [r7, #16]
 8008dd6:	f7ff fe10 	bl	80089fa <put_fat>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d116      	bne.n	8008e12 <create_chain+0x116>
		fs->last_clst = ncl;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	699a      	ldr	r2, [r3, #24]
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	3b02      	subs	r3, #2
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d804      	bhi.n	8008e02 <create_chain+0x106>
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	1e5a      	subs	r2, r3, #1
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	791b      	ldrb	r3, [r3, #4]
 8008e06:	f043 0301 	orr.w	r3, r3, #1
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	711a      	strb	r2, [r3, #4]
 8008e10:	e007      	b.n	8008e22 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d102      	bne.n	8008e1e <create_chain+0x122>
 8008e18:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1c:	e000      	b.n	8008e20 <create_chain+0x124>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e22:	69fb      	ldr	r3, [r7, #28]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3720      	adds	r7, #32
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	3304      	adds	r3, #4
 8008e42:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	899b      	ldrh	r3, [r3, #12]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	8952      	ldrh	r2, [r2, #10]
 8008e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e58:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	1d1a      	adds	r2, r3, #4
 8008e5e:	613a      	str	r2, [r7, #16]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <clmt_clust+0x42>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e010      	b.n	8008e90 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d307      	bcc.n	8008e86 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	3304      	adds	r3, #4
 8008e82:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e84:	e7e9      	b.n	8008e5a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008e86:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	4413      	add	r3, r2
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	371c      	adds	r7, #28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eb2:	d204      	bcs.n	8008ebe <dir_sdi+0x22>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	f003 031f 	and.w	r3, r3, #31
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e071      	b.n	8008fa6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d106      	bne.n	8008ee2 <dir_sdi+0x46>
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d902      	bls.n	8008ee2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10c      	bne.n	8008f02 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	095b      	lsrs	r3, r3, #5
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	8912      	ldrh	r2, [r2, #8]
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d301      	bcc.n	8008ef8 <dir_sdi+0x5c>
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e056      	b.n	8008fa6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	61da      	str	r2, [r3, #28]
 8008f00:	e02d      	b.n	8008f5e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	895b      	ldrh	r3, [r3, #10]
 8008f06:	461a      	mov	r2, r3
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	899b      	ldrh	r3, [r3, #12]
 8008f0c:	fb02 f303 	mul.w	r3, r2, r3
 8008f10:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f12:	e019      	b.n	8008f48 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6979      	ldr	r1, [r7, #20]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff fc9a 	bl	8008852 <get_fat>
 8008f1e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f26:	d101      	bne.n	8008f2c <dir_sdi+0x90>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e03c      	b.n	8008fa6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d904      	bls.n	8008f3c <dir_sdi+0xa0>
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d301      	bcc.n	8008f40 <dir_sdi+0xa4>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e032      	b.n	8008fa6 <dir_sdi+0x10a>
			ofs -= csz;
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d2e1      	bcs.n	8008f14 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008f50:	6979      	ldr	r1, [r7, #20]
 8008f52:	6938      	ldr	r0, [r7, #16]
 8008f54:	f7ff fc5e 	bl	8008814 <clust2sect>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <dir_sdi+0xd4>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e01a      	b.n	8008fa6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	69da      	ldr	r2, [r3, #28]
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	899b      	ldrh	r3, [r3, #12]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f80:	441a      	add	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	899b      	ldrh	r3, [r3, #12]
 8008f90:	461a      	mov	r2, r3
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f98:	fb00 f202 	mul.w	r2, r0, r2
 8008f9c:	1a9b      	subs	r3, r3, r2
 8008f9e:	18ca      	adds	r2, r1, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	3320      	adds	r3, #32
 8008fc4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <dir_next+0x28>
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fd4:	d301      	bcc.n	8008fda <dir_next+0x2c>
 8008fd6:	2304      	movs	r3, #4
 8008fd8:	e0bb      	b.n	8009152 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	899b      	ldrh	r3, [r3, #12]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fe6:	fb01 f202 	mul.w	r2, r1, r2
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f040 809d 	bne.w	800912c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10b      	bne.n	800901c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	095b      	lsrs	r3, r3, #5
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	8912      	ldrh	r2, [r2, #8]
 800900c:	4293      	cmp	r3, r2
 800900e:	f0c0 808d 	bcc.w	800912c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	61da      	str	r2, [r3, #28]
 8009018:	2304      	movs	r3, #4
 800901a:	e09a      	b.n	8009152 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	899b      	ldrh	r3, [r3, #12]
 8009020:	461a      	mov	r2, r3
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	fbb3 f3f2 	udiv	r3, r3, r2
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	8952      	ldrh	r2, [r2, #10]
 800902c:	3a01      	subs	r2, #1
 800902e:	4013      	ands	r3, r2
 8009030:	2b00      	cmp	r3, #0
 8009032:	d17b      	bne.n	800912c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	4619      	mov	r1, r3
 800903c:	4610      	mov	r0, r2
 800903e:	f7ff fc08 	bl	8008852 <get_fat>
 8009042:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d801      	bhi.n	800904e <dir_next+0xa0>
 800904a:	2302      	movs	r3, #2
 800904c:	e081      	b.n	8009152 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009054:	d101      	bne.n	800905a <dir_next+0xac>
 8009056:	2301      	movs	r3, #1
 8009058:	e07b      	b.n	8009152 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	429a      	cmp	r2, r3
 8009062:	d359      	bcc.n	8009118 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d104      	bne.n	8009074 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	61da      	str	r2, [r3, #28]
 8009070:	2304      	movs	r3, #4
 8009072:	e06e      	b.n	8009152 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	4619      	mov	r1, r3
 800907c:	4610      	mov	r0, r2
 800907e:	f7ff fe3d 	bl	8008cfc <create_chain>
 8009082:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <dir_next+0xe0>
 800908a:	2307      	movs	r3, #7
 800908c:	e061      	b.n	8009152 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d101      	bne.n	8009098 <dir_next+0xea>
 8009094:	2302      	movs	r3, #2
 8009096:	e05c      	b.n	8009152 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	d101      	bne.n	80090a4 <dir_next+0xf6>
 80090a0:	2301      	movs	r3, #1
 80090a2:	e056      	b.n	8009152 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff fad3 	bl	8008650 <sync_window>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <dir_next+0x106>
 80090b0:	2301      	movs	r3, #1
 80090b2:	e04e      	b.n	8009152 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	899b      	ldrh	r3, [r3, #12]
 80090be:	461a      	mov	r2, r3
 80090c0:	2100      	movs	r1, #0
 80090c2:	f7ff f8fc 	bl	80082be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090c6:	2300      	movs	r3, #0
 80090c8:	613b      	str	r3, [r7, #16]
 80090ca:	6979      	ldr	r1, [r7, #20]
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f7ff fba1 	bl	8008814 <clust2sect>
 80090d2:	4602      	mov	r2, r0
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	635a      	str	r2, [r3, #52]	; 0x34
 80090d8:	e012      	b.n	8009100 <dir_next+0x152>
						fs->wflag = 1;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f7ff fab5 	bl	8008650 <sync_window>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <dir_next+0x142>
 80090ec:	2301      	movs	r3, #1
 80090ee:	e030      	b.n	8009152 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	3301      	adds	r3, #1
 80090f4:	613b      	str	r3, [r7, #16]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	635a      	str	r2, [r3, #52]	; 0x34
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	895b      	ldrh	r3, [r3, #10]
 8009104:	461a      	mov	r2, r3
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	4293      	cmp	r3, r2
 800910a:	d3e6      	bcc.n	80090da <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	1ad2      	subs	r2, r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800911e:	6979      	ldr	r1, [r7, #20]
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f7ff fb77 	bl	8008814 <clust2sect>
 8009126:	4602      	mov	r2, r0
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	899b      	ldrh	r3, [r3, #12]
 800913c:	461a      	mov	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	fbb3 f0f2 	udiv	r0, r3, r2
 8009144:	fb00 f202 	mul.w	r2, r0, r2
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	18ca      	adds	r2, r1, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b086      	sub	sp, #24
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800916a:	2100      	movs	r1, #0
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff fe95 	bl	8008e9c <dir_sdi>
 8009172:	4603      	mov	r3, r0
 8009174:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d12b      	bne.n	80091d4 <dir_alloc+0x7a>
		n = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	4619      	mov	r1, r3
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7ff faa6 	bl	80086d8 <move_window>
 800918c:	4603      	mov	r3, r0
 800918e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d11d      	bne.n	80091d2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	2be5      	cmp	r3, #229	; 0xe5
 800919e:	d004      	beq.n	80091aa <dir_alloc+0x50>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a1b      	ldr	r3, [r3, #32]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d107      	bne.n	80091ba <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	3301      	adds	r3, #1
 80091ae:	613b      	str	r3, [r7, #16]
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d102      	bne.n	80091be <dir_alloc+0x64>
 80091b8:	e00c      	b.n	80091d4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80091ba:	2300      	movs	r3, #0
 80091bc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80091be:	2101      	movs	r1, #1
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff fef4 	bl	8008fae <dir_next>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0d7      	beq.n	8009180 <dir_alloc+0x26>
 80091d0:	e000      	b.n	80091d4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80091d2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	2b04      	cmp	r3, #4
 80091d8:	d101      	bne.n	80091de <dir_alloc+0x84>
 80091da:	2307      	movs	r3, #7
 80091dc:	75fb      	strb	r3, [r7, #23]
	return res;
 80091de:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	331a      	adds	r3, #26
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe ffbe 	bl	8008178 <ld_word>
 80091fc:	4603      	mov	r3, r0
 80091fe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2b03      	cmp	r3, #3
 8009206:	d109      	bne.n	800921c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	3314      	adds	r3, #20
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe ffb3 	bl	8008178 <ld_word>
 8009212:	4603      	mov	r3, r0
 8009214:	041b      	lsls	r3, r3, #16
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	4313      	orrs	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800921c:	68fb      	ldr	r3, [r7, #12]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	60f8      	str	r0, [r7, #12]
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	331a      	adds	r3, #26
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	b292      	uxth	r2, r2
 800923a:	4611      	mov	r1, r2
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe ffd6 	bl	80081ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b03      	cmp	r3, #3
 8009248:	d109      	bne.n	800925e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f103 0214 	add.w	r2, r3, #20
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	0c1b      	lsrs	r3, r3, #16
 8009254:	b29b      	uxth	r3, r3
 8009256:	4619      	mov	r1, r3
 8009258:	4610      	mov	r0, r2
 800925a:	f7fe ffc8 	bl	80081ee <st_word>
	}
}
 800925e:	bf00      	nop
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009268:	b590      	push	{r4, r7, lr}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	331a      	adds	r3, #26
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe ff7e 	bl	8008178 <ld_word>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <cmp_lfn+0x1e>
 8009282:	2300      	movs	r3, #0
 8009284:	e059      	b.n	800933a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800928e:	1e5a      	subs	r2, r3, #1
 8009290:	4613      	mov	r3, r2
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800929c:	2301      	movs	r3, #1
 800929e:	81fb      	strh	r3, [r7, #14]
 80092a0:	2300      	movs	r3, #0
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	e033      	b.n	800930e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80092a6:	4a27      	ldr	r2, [pc, #156]	; (8009344 <cmp_lfn+0xdc>)
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	4413      	add	r3, r2
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	4413      	add	r3, r2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe ff5f 	bl	8008178 <ld_word>
 80092ba:	4603      	mov	r3, r0
 80092bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80092be:	89fb      	ldrh	r3, [r7, #14]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01a      	beq.n	80092fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2bfe      	cmp	r3, #254	; 0xfe
 80092c8:	d812      	bhi.n	80092f0 <cmp_lfn+0x88>
 80092ca:	89bb      	ldrh	r3, [r7, #12]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f001 fd2f 	bl	800ad30 <ff_wtoupper>
 80092d2:	4603      	mov	r3, r0
 80092d4:	461c      	mov	r4, r3
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	617a      	str	r2, [r7, #20]
 80092dc:	005b      	lsls	r3, r3, #1
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	4413      	add	r3, r2
 80092e2:	881b      	ldrh	r3, [r3, #0]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f001 fd23 	bl	800ad30 <ff_wtoupper>
 80092ea:	4603      	mov	r3, r0
 80092ec:	429c      	cmp	r4, r3
 80092ee:	d001      	beq.n	80092f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80092f0:	2300      	movs	r3, #0
 80092f2:	e022      	b.n	800933a <cmp_lfn+0xd2>
			}
			wc = uc;
 80092f4:	89bb      	ldrh	r3, [r7, #12]
 80092f6:	81fb      	strh	r3, [r7, #14]
 80092f8:	e006      	b.n	8009308 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80092fa:	89bb      	ldrh	r3, [r7, #12]
 80092fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009300:	4293      	cmp	r3, r2
 8009302:	d001      	beq.n	8009308 <cmp_lfn+0xa0>
 8009304:	2300      	movs	r3, #0
 8009306:	e018      	b.n	800933a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	3301      	adds	r3, #1
 800930c:	613b      	str	r3, [r7, #16]
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	2b0c      	cmp	r3, #12
 8009312:	d9c8      	bls.n	80092a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <cmp_lfn+0xd0>
 8009320:	89fb      	ldrh	r3, [r7, #14]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d008      	beq.n	8009338 <cmp_lfn+0xd0>
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <cmp_lfn+0xd0>
 8009334:	2300      	movs	r3, #0
 8009336:	e000      	b.n	800933a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009338:	2301      	movs	r3, #1
}
 800933a:	4618      	mov	r0, r3
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	bd90      	pop	{r4, r7, pc}
 8009342:	bf00      	nop
 8009344:	0800de28 	.word	0x0800de28

08009348 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	4611      	mov	r1, r2
 8009354:	461a      	mov	r2, r3
 8009356:	460b      	mov	r3, r1
 8009358:	71fb      	strb	r3, [r7, #7]
 800935a:	4613      	mov	r3, r2
 800935c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	330d      	adds	r3, #13
 8009362:	79ba      	ldrb	r2, [r7, #6]
 8009364:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	330b      	adds	r3, #11
 800936a:	220f      	movs	r2, #15
 800936c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	330c      	adds	r3, #12
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	331a      	adds	r3, #26
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe ff36 	bl	80081ee <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	1e5a      	subs	r2, r3, #1
 8009386:	4613      	mov	r3, r2
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	4413      	add	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	82fb      	strh	r3, [r7, #22]
 8009396:	2300      	movs	r3, #0
 8009398:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800939a:	8afb      	ldrh	r3, [r7, #22]
 800939c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d007      	beq.n	80093b4 <put_lfn+0x6c>
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	61fa      	str	r2, [r7, #28]
 80093aa:	005b      	lsls	r3, r3, #1
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4413      	add	r3, r2
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80093b4:	4a17      	ldr	r2, [pc, #92]	; (8009414 <put_lfn+0xcc>)
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	4413      	add	r3, r2
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	8afa      	ldrh	r2, [r7, #22]
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe ff11 	bl	80081ee <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80093cc:	8afb      	ldrh	r3, [r7, #22]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <put_lfn+0x90>
 80093d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093d6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	3301      	adds	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	2b0c      	cmp	r3, #12
 80093e2:	d9da      	bls.n	800939a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80093e4:	8afb      	ldrh	r3, [r7, #22]
 80093e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d006      	beq.n	80093fc <put_lfn+0xb4>
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	4413      	add	r3, r2
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d103      	bne.n	8009404 <put_lfn+0xbc>
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009402:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	79fa      	ldrb	r2, [r7, #7]
 8009408:	701a      	strb	r2, [r3, #0]
}
 800940a:	bf00      	nop
 800940c:	3720      	adds	r7, #32
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	0800de28 	.word	0x0800de28

08009418 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08c      	sub	sp, #48	; 0x30
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009426:	220b      	movs	r2, #11
 8009428:	68b9      	ldr	r1, [r7, #8]
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f7fe ff26 	bl	800827c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	2b05      	cmp	r3, #5
 8009434:	d92b      	bls.n	800948e <gen_numname+0x76>
		sr = seq;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800943a:	e022      	b.n	8009482 <gen_numname+0x6a>
			wc = *lfn++;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	1c9a      	adds	r2, r3, #2
 8009440:	607a      	str	r2, [r7, #4]
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009446:	2300      	movs	r3, #0
 8009448:	62bb      	str	r3, [r7, #40]	; 0x28
 800944a:	e017      	b.n	800947c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	005a      	lsls	r2, r3, #1
 8009450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	4413      	add	r3, r2
 8009458:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800945a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800945c:	085b      	lsrs	r3, r3, #1
 800945e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d005      	beq.n	8009476 <gen_numname+0x5e>
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009470:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009474:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	3301      	adds	r3, #1
 800947a:	62bb      	str	r3, [r7, #40]	; 0x28
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	2b0f      	cmp	r3, #15
 8009480:	d9e4      	bls.n	800944c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1d8      	bne.n	800943c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800948e:	2307      	movs	r3, #7
 8009490:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	b2db      	uxtb	r3, r3
 8009496:	f003 030f 	and.w	r3, r3, #15
 800949a:	b2db      	uxtb	r3, r3
 800949c:	3330      	adds	r3, #48	; 0x30
 800949e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80094a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094a6:	2b39      	cmp	r3, #57	; 0x39
 80094a8:	d904      	bls.n	80094b4 <gen_numname+0x9c>
 80094aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094ae:	3307      	adds	r3, #7
 80094b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	1e5a      	subs	r2, r3, #1
 80094b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80094ba:	3330      	adds	r3, #48	; 0x30
 80094bc:	443b      	add	r3, r7
 80094be:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80094c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	091b      	lsrs	r3, r3, #4
 80094ca:	603b      	str	r3, [r7, #0]
	} while (seq);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1df      	bne.n	8009492 <gen_numname+0x7a>
	ns[i] = '~';
 80094d2:	f107 0214 	add.w	r2, r7, #20
 80094d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d8:	4413      	add	r3, r2
 80094da:	227e      	movs	r2, #126	; 0x7e
 80094dc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80094de:	2300      	movs	r3, #0
 80094e0:	627b      	str	r3, [r7, #36]	; 0x24
 80094e2:	e002      	b.n	80094ea <gen_numname+0xd2>
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	3301      	adds	r3, #1
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
 80094ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d205      	bcs.n	80094fe <gen_numname+0xe6>
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	4413      	add	r3, r2
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	d1f2      	bne.n	80094e4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	2b07      	cmp	r3, #7
 8009502:	d807      	bhi.n	8009514 <gen_numname+0xfc>
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	62ba      	str	r2, [r7, #40]	; 0x28
 800950a:	3330      	adds	r3, #48	; 0x30
 800950c:	443b      	add	r3, r7
 800950e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009512:	e000      	b.n	8009516 <gen_numname+0xfe>
 8009514:	2120      	movs	r1, #32
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	627a      	str	r2, [r7, #36]	; 0x24
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4413      	add	r3, r2
 8009520:	460a      	mov	r2, r1
 8009522:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	2b07      	cmp	r3, #7
 8009528:	d9e9      	bls.n	80094fe <gen_numname+0xe6>
}
 800952a:	bf00      	nop
 800952c:	bf00      	nop
 800952e:	3730      	adds	r7, #48	; 0x30
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009540:	230b      	movs	r3, #11
 8009542:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	b2da      	uxtb	r2, r3
 8009548:	0852      	lsrs	r2, r2, #1
 800954a:	01db      	lsls	r3, r3, #7
 800954c:	4313      	orrs	r3, r2
 800954e:	b2da      	uxtb	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	1c59      	adds	r1, r3, #1
 8009554:	6079      	str	r1, [r7, #4]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	4413      	add	r3, r2
 800955a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	3b01      	subs	r3, #1
 8009560:	60bb      	str	r3, [r7, #8]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1ed      	bne.n	8009544 <sum_sfn+0x10>
	return sum;
 8009568:	7bfb      	ldrb	r3, [r7, #15]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b086      	sub	sp, #24
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009584:	2100      	movs	r1, #0
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff fc88 	bl	8008e9c <dir_sdi>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <dir_find+0x24>
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	e0a9      	b.n	80096ee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800959a:	23ff      	movs	r3, #255	; 0xff
 800959c:	753b      	strb	r3, [r7, #20]
 800959e:	7d3b      	ldrb	r3, [r7, #20]
 80095a0:	757b      	strb	r3, [r7, #21]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f04f 32ff 	mov.w	r2, #4294967295
 80095a8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6938      	ldr	r0, [r7, #16]
 80095b2:	f7ff f891 	bl	80086d8 <move_window>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f040 8090 	bne.w	80096e2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80095ca:	7dbb      	ldrb	r3, [r7, #22]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <dir_find+0x60>
 80095d0:	2304      	movs	r3, #4
 80095d2:	75fb      	strb	r3, [r7, #23]
 80095d4:	e08a      	b.n	80096ec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	330b      	adds	r3, #11
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095e2:	73fb      	strb	r3, [r7, #15]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	7bfa      	ldrb	r2, [r7, #15]
 80095e8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80095ea:	7dbb      	ldrb	r3, [r7, #22]
 80095ec:	2be5      	cmp	r3, #229	; 0xe5
 80095ee:	d007      	beq.n	8009600 <dir_find+0x8a>
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <dir_find+0x98>
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	2b0f      	cmp	r3, #15
 80095fe:	d006      	beq.n	800960e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009600:	23ff      	movs	r3, #255	; 0xff
 8009602:	757b      	strb	r3, [r7, #21]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f04f 32ff 	mov.w	r2, #4294967295
 800960a:	631a      	str	r2, [r3, #48]	; 0x30
 800960c:	e05e      	b.n	80096cc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800960e:	7bfb      	ldrb	r3, [r7, #15]
 8009610:	2b0f      	cmp	r3, #15
 8009612:	d136      	bne.n	8009682 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800961a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	d154      	bne.n	80096cc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009622:	7dbb      	ldrb	r3, [r7, #22]
 8009624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00d      	beq.n	8009648 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	7b5b      	ldrb	r3, [r3, #13]
 8009632:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009634:	7dbb      	ldrb	r3, [r7, #22]
 8009636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800963a:	75bb      	strb	r3, [r7, #22]
 800963c:	7dbb      	ldrb	r3, [r7, #22]
 800963e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	695a      	ldr	r2, [r3, #20]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009648:	7dba      	ldrb	r2, [r7, #22]
 800964a:	7d7b      	ldrb	r3, [r7, #21]
 800964c:	429a      	cmp	r2, r3
 800964e:	d115      	bne.n	800967c <dir_find+0x106>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	330d      	adds	r3, #13
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	7d3a      	ldrb	r2, [r7, #20]
 800965a:	429a      	cmp	r2, r3
 800965c:	d10e      	bne.n	800967c <dir_find+0x106>
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	691a      	ldr	r2, [r3, #16]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7ff fdfd 	bl	8009268 <cmp_lfn>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <dir_find+0x106>
 8009674:	7d7b      	ldrb	r3, [r7, #21]
 8009676:	3b01      	subs	r3, #1
 8009678:	b2db      	uxtb	r3, r3
 800967a:	e000      	b.n	800967e <dir_find+0x108>
 800967c:	23ff      	movs	r3, #255	; 0xff
 800967e:	757b      	strb	r3, [r7, #21]
 8009680:	e024      	b.n	80096cc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009682:	7d7b      	ldrb	r3, [r7, #21]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d109      	bne.n	800969c <dir_find+0x126>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	4618      	mov	r0, r3
 800968e:	f7ff ff51 	bl	8009534 <sum_sfn>
 8009692:	4603      	mov	r3, r0
 8009694:	461a      	mov	r2, r3
 8009696:	7d3b      	ldrb	r3, [r7, #20]
 8009698:	4293      	cmp	r3, r2
 800969a:	d024      	beq.n	80096e6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <dir_find+0x14a>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a18      	ldr	r0, [r3, #32]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3324      	adds	r3, #36	; 0x24
 80096b2:	220b      	movs	r2, #11
 80096b4:	4619      	mov	r1, r3
 80096b6:	f7fe fe1d 	bl	80082f4 <mem_cmp>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d014      	beq.n	80096ea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80096c0:	23ff      	movs	r3, #255	; 0xff
 80096c2:	757b      	strb	r3, [r7, #21]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ca:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80096cc:	2100      	movs	r1, #0
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7ff fc6d 	bl	8008fae <dir_next>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f43f af65 	beq.w	80095aa <dir_find+0x34>
 80096e0:	e004      	b.n	80096ec <dir_find+0x176>
		if (res != FR_OK) break;
 80096e2:	bf00      	nop
 80096e4:	e002      	b.n	80096ec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80096ea:	bf00      	nop

	return res;
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08c      	sub	sp, #48	; 0x30
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800970c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <dir_register+0x20>
 8009714:	2306      	movs	r3, #6
 8009716:	e0e0      	b.n	80098da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009718:	2300      	movs	r3, #0
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
 800971c:	e002      	b.n	8009724 <dir_register+0x2c>
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009720:	3301      	adds	r3, #1
 8009722:	627b      	str	r3, [r7, #36]	; 0x24
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	4413      	add	r3, r2
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f4      	bne.n	800971e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800973a:	f107 030c 	add.w	r3, r7, #12
 800973e:	220c      	movs	r2, #12
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe fd9b 	bl	800827c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d032      	beq.n	80097b6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2240      	movs	r2, #64	; 0x40
 8009754:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009758:	2301      	movs	r3, #1
 800975a:	62bb      	str	r3, [r7, #40]	; 0x28
 800975c:	e016      	b.n	800978c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	f107 010c 	add.w	r1, r7, #12
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	f7ff fe53 	bl	8009418 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7ff feff 	bl	8009576 <dir_find>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800977e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009782:	2b00      	cmp	r3, #0
 8009784:	d106      	bne.n	8009794 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	3301      	adds	r3, #1
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28
 800978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978e:	2b63      	cmp	r3, #99	; 0x63
 8009790:	d9e5      	bls.n	800975e <dir_register+0x66>
 8009792:	e000      	b.n	8009796 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009794:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	2b64      	cmp	r3, #100	; 0x64
 800979a:	d101      	bne.n	80097a0 <dir_register+0xa8>
 800979c:	2307      	movs	r3, #7
 800979e:	e09c      	b.n	80098da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80097a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	d002      	beq.n	80097ae <dir_register+0xb6>
 80097a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097ac:	e095      	b.n	80098da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80097ae:	7dfa      	ldrb	r2, [r7, #23]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <dir_register+0xd8>
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	330c      	adds	r3, #12
 80097c4:	4a47      	ldr	r2, [pc, #284]	; (80098e4 <dir_register+0x1ec>)
 80097c6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ca:	089b      	lsrs	r3, r3, #2
 80097cc:	3301      	adds	r3, #1
 80097ce:	e000      	b.n	80097d2 <dir_register+0xda>
 80097d0:	2301      	movs	r3, #1
 80097d2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80097d4:	6a39      	ldr	r1, [r7, #32]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff fcbf 	bl	800915a <dir_alloc>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80097e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d148      	bne.n	800987c <dir_register+0x184>
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	623b      	str	r3, [r7, #32]
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d042      	beq.n	800987c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695a      	ldr	r2, [r3, #20]
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	015b      	lsls	r3, r3, #5
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7ff fb4a 	bl	8008e9c <dir_sdi>
 8009808:	4603      	mov	r3, r0
 800980a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800980e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009812:	2b00      	cmp	r3, #0
 8009814:	d132      	bne.n	800987c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3324      	adds	r3, #36	; 0x24
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fe8a 	bl	8009534 <sum_sfn>
 8009820:	4603      	mov	r3, r0
 8009822:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	4619      	mov	r1, r3
 800982a:	69f8      	ldr	r0, [r7, #28]
 800982c:	f7fe ff54 	bl	80086d8 <move_window>
 8009830:	4603      	mov	r3, r0
 8009832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800983a:	2b00      	cmp	r3, #0
 800983c:	d11d      	bne.n	800987a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	6918      	ldr	r0, [r3, #16]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a19      	ldr	r1, [r3, #32]
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	b2da      	uxtb	r2, r3
 800984a:	7efb      	ldrb	r3, [r7, #27]
 800984c:	f7ff fd7c 	bl	8009348 <put_lfn>
				fs->wflag = 1;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	2201      	movs	r2, #1
 8009854:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009856:	2100      	movs	r1, #0
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff fba8 	bl	8008fae <dir_next>
 800985e:	4603      	mov	r3, r0
 8009860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009868:	2b00      	cmp	r3, #0
 800986a:	d107      	bne.n	800987c <dir_register+0x184>
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	3b01      	subs	r3, #1
 8009870:	623b      	str	r3, [r7, #32]
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1d5      	bne.n	8009824 <dir_register+0x12c>
 8009878:	e000      	b.n	800987c <dir_register+0x184>
				if (res != FR_OK) break;
 800987a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800987c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009880:	2b00      	cmp	r3, #0
 8009882:	d128      	bne.n	80098d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	4619      	mov	r1, r3
 800988a:	69f8      	ldr	r0, [r7, #28]
 800988c:	f7fe ff24 	bl	80086d8 <move_window>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800989a:	2b00      	cmp	r3, #0
 800989c:	d11b      	bne.n	80098d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	2220      	movs	r2, #32
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fd09 	bl	80082be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a18      	ldr	r0, [r3, #32]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3324      	adds	r3, #36	; 0x24
 80098b4:	220b      	movs	r2, #11
 80098b6:	4619      	mov	r1, r3
 80098b8:	f7fe fce0 	bl	800827c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	330c      	adds	r3, #12
 80098c8:	f002 0218 	and.w	r2, r2, #24
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2201      	movs	r2, #1
 80098d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80098d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3730      	adds	r7, #48	; 0x30
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	4ec4ec4f 	.word	0x4ec4ec4f

080098e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08a      	sub	sp, #40	; 0x28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	2300      	movs	r3, #0
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	61ba      	str	r2, [r7, #24]
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	4413      	add	r3, r2
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009918:	2b1f      	cmp	r3, #31
 800991a:	d940      	bls.n	800999e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800991c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800991e:	2b2f      	cmp	r3, #47	; 0x2f
 8009920:	d006      	beq.n	8009930 <create_name+0x48>
 8009922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009924:	2b5c      	cmp	r3, #92	; 0x5c
 8009926:	d110      	bne.n	800994a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009928:	e002      	b.n	8009930 <create_name+0x48>
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	3301      	adds	r3, #1
 800992e:	61bb      	str	r3, [r7, #24]
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	4413      	add	r3, r2
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b2f      	cmp	r3, #47	; 0x2f
 800993a:	d0f6      	beq.n	800992a <create_name+0x42>
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	4413      	add	r3, r2
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b5c      	cmp	r3, #92	; 0x5c
 8009946:	d0f0      	beq.n	800992a <create_name+0x42>
			break;
 8009948:	e02a      	b.n	80099a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2bfe      	cmp	r3, #254	; 0xfe
 800994e:	d901      	bls.n	8009954 <create_name+0x6c>
 8009950:	2306      	movs	r3, #6
 8009952:	e17d      	b.n	8009c50 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009956:	b2db      	uxtb	r3, r3
 8009958:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800995a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800995c:	2101      	movs	r1, #1
 800995e:	4618      	mov	r0, r3
 8009960:	f001 f9aa 	bl	800acb8 <ff_convert>
 8009964:	4603      	mov	r3, r0
 8009966:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <create_name+0x8a>
 800996e:	2306      	movs	r3, #6
 8009970:	e16e      	b.n	8009c50 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009974:	2b7f      	cmp	r3, #127	; 0x7f
 8009976:	d809      	bhi.n	800998c <create_name+0xa4>
 8009978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800997a:	4619      	mov	r1, r3
 800997c:	488d      	ldr	r0, [pc, #564]	; (8009bb4 <create_name+0x2cc>)
 800997e:	f7fe fce0 	bl	8008342 <chk_chr>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <create_name+0xa4>
 8009988:	2306      	movs	r3, #6
 800998a:	e161      	b.n	8009c50 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	617a      	str	r2, [r7, #20]
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800999a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800999c:	e7b4      	b.n	8009908 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800999e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	441a      	add	r2, r3
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80099aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099ac:	2b1f      	cmp	r3, #31
 80099ae:	d801      	bhi.n	80099b4 <create_name+0xcc>
 80099b0:	2304      	movs	r3, #4
 80099b2:	e000      	b.n	80099b6 <create_name+0xce>
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80099ba:	e011      	b.n	80099e0 <create_name+0xf8>
		w = lfn[di - 1];
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099c2:	3b01      	subs	r3, #1
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80099ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	d002      	beq.n	80099da <create_name+0xf2>
 80099d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099d6:	2b2e      	cmp	r3, #46	; 0x2e
 80099d8:	d106      	bne.n	80099e8 <create_name+0x100>
		di--;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	3b01      	subs	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1ea      	bne.n	80099bc <create_name+0xd4>
 80099e6:	e000      	b.n	80099ea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80099e8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4413      	add	r3, r2
 80099f2:	2200      	movs	r2, #0
 80099f4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <create_name+0x118>
 80099fc:	2306      	movs	r3, #6
 80099fe:	e127      	b.n	8009c50 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3324      	adds	r3, #36	; 0x24
 8009a04:	220b      	movs	r2, #11
 8009a06:	2120      	movs	r1, #32
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe fc58 	bl	80082be <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	e002      	b.n	8009a1a <create_name+0x132>
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	3301      	adds	r3, #1
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4413      	add	r3, r2
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	2b20      	cmp	r3, #32
 8009a26:	d0f5      	beq.n	8009a14 <create_name+0x12c>
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	2b2e      	cmp	r3, #46	; 0x2e
 8009a34:	d0ee      	beq.n	8009a14 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d009      	beq.n	8009a50 <create_name+0x168>
 8009a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a40:	f043 0303 	orr.w	r3, r3, #3
 8009a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009a48:	e002      	b.n	8009a50 <create_name+0x168>
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d009      	beq.n	8009a6a <create_name+0x182>
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	2b2e      	cmp	r3, #46	; 0x2e
 8009a68:	d1ef      	bne.n	8009a4a <create_name+0x162>

	i = b = 0; ni = 8;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a70:	2300      	movs	r3, #0
 8009a72:	623b      	str	r3, [r7, #32]
 8009a74:	2308      	movs	r3, #8
 8009a76:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	61ba      	str	r2, [r7, #24]
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 8090 	beq.w	8009bb0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a92:	2b20      	cmp	r3, #32
 8009a94:	d006      	beq.n	8009aa4 <create_name+0x1bc>
 8009a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a98:	2b2e      	cmp	r3, #46	; 0x2e
 8009a9a:	d10a      	bne.n	8009ab2 <create_name+0x1ca>
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d006      	beq.n	8009ab2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa8:	f043 0303 	orr.w	r3, r3, #3
 8009aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ab0:	e07d      	b.n	8009bae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009ab2:	6a3a      	ldr	r2, [r7, #32]
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d203      	bcs.n	8009ac2 <create_name+0x1da>
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d123      	bne.n	8009b0a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	2b0b      	cmp	r3, #11
 8009ac6:	d106      	bne.n	8009ad6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009acc:	f043 0303 	orr.w	r3, r3, #3
 8009ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ad4:	e075      	b.n	8009bc2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d005      	beq.n	8009aea <create_name+0x202>
 8009ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ae2:	f043 0303 	orr.w	r3, r3, #3
 8009ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d866      	bhi.n	8009bc0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	2308      	movs	r3, #8
 8009af8:	623b      	str	r3, [r7, #32]
 8009afa:	230b      	movs	r3, #11
 8009afc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009afe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b08:	e051      	b.n	8009bae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8009b0e:	d914      	bls.n	8009b3a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009b10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b12:	2100      	movs	r1, #0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 f8cf 	bl	800acb8 <ff_convert>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <create_name+0x246>
 8009b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b26:	3b80      	subs	r3, #128	; 0x80
 8009b28:	4a23      	ldr	r2, [pc, #140]	; (8009bb8 <create_name+0x2d0>)
 8009b2a:	5cd3      	ldrb	r3, [r2, r3]
 8009b2c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b32:	f043 0302 	orr.w	r3, r3, #2
 8009b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d007      	beq.n	8009b50 <create_name+0x268>
 8009b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b42:	4619      	mov	r1, r3
 8009b44:	481d      	ldr	r0, [pc, #116]	; (8009bbc <create_name+0x2d4>)
 8009b46:	f7fe fbfc 	bl	8008342 <chk_chr>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d008      	beq.n	8009b62 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009b50:	235f      	movs	r3, #95	; 0x5f
 8009b52:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b58:	f043 0303 	orr.w	r3, r3, #3
 8009b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b60:	e01b      	b.n	8009b9a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009b62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b64:	2b40      	cmp	r3, #64	; 0x40
 8009b66:	d909      	bls.n	8009b7c <create_name+0x294>
 8009b68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b6a:	2b5a      	cmp	r3, #90	; 0x5a
 8009b6c:	d806      	bhi.n	8009b7c <create_name+0x294>
					b |= 2;
 8009b6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b72:	f043 0302 	orr.w	r3, r3, #2
 8009b76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b7a:	e00e      	b.n	8009b9a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b7e:	2b60      	cmp	r3, #96	; 0x60
 8009b80:	d90b      	bls.n	8009b9a <create_name+0x2b2>
 8009b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b84:	2b7a      	cmp	r3, #122	; 0x7a
 8009b86:	d808      	bhi.n	8009b9a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009b88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b8c:	f043 0301 	orr.w	r3, r3, #1
 8009b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b96:	3b20      	subs	r3, #32
 8009b98:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	623a      	str	r2, [r7, #32]
 8009ba0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ba2:	b2d1      	uxtb	r1, r2
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	460a      	mov	r2, r1
 8009baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009bae:	e763      	b.n	8009a78 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009bb0:	bf00      	nop
 8009bb2:	e006      	b.n	8009bc2 <create_name+0x2da>
 8009bb4:	0800dd40 	.word	0x0800dd40
 8009bb8:	0800dda8 	.word	0x0800dda8
 8009bbc:	0800dd4c 	.word	0x0800dd4c
			if (si > di) break;			/* No extension */
 8009bc0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009bc8:	2be5      	cmp	r3, #229	; 0xe5
 8009bca:	d103      	bne.n	8009bd4 <create_name+0x2ec>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2205      	movs	r2, #5
 8009bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	d104      	bne.n	8009be4 <create_name+0x2fc>
 8009bda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009be8:	f003 030c 	and.w	r3, r3, #12
 8009bec:	2b0c      	cmp	r3, #12
 8009bee:	d005      	beq.n	8009bfc <create_name+0x314>
 8009bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bf4:	f003 0303 	and.w	r3, r3, #3
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d105      	bne.n	8009c08 <create_name+0x320>
 8009bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c00:	f043 0302 	orr.w	r3, r3, #2
 8009c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d117      	bne.n	8009c44 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009c14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c18:	f003 0303 	and.w	r3, r3, #3
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d105      	bne.n	8009c2c <create_name+0x344>
 8009c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c24:	f043 0310 	orr.w	r3, r3, #16
 8009c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c30:	f003 030c 	and.w	r3, r3, #12
 8009c34:	2b04      	cmp	r3, #4
 8009c36:	d105      	bne.n	8009c44 <create_name+0x35c>
 8009c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c3c:	f043 0308 	orr.w	r3, r3, #8
 8009c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009c4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009c4e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3728      	adds	r7, #40	; 0x28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009c6c:	e002      	b.n	8009c74 <follow_path+0x1c>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b2f      	cmp	r3, #47	; 0x2f
 8009c7a:	d0f8      	beq.n	8009c6e <follow_path+0x16>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b5c      	cmp	r3, #92	; 0x5c
 8009c82:	d0f4      	beq.n	8009c6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2200      	movs	r2, #0
 8009c88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b1f      	cmp	r3, #31
 8009c90:	d80a      	bhi.n	8009ca8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2280      	movs	r2, #128	; 0x80
 8009c96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff f8fd 	bl	8008e9c <dir_sdi>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
 8009ca6:	e048      	b.n	8009d3a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ca8:	463b      	mov	r3, r7
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff fe1b 	bl	80098e8 <create_name>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d139      	bne.n	8009d30 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff fc5a 	bl	8009576 <dir_find>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ccc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00a      	beq.n	8009cea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	2b04      	cmp	r3, #4
 8009cd8:	d12c      	bne.n	8009d34 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009cda:	7afb      	ldrb	r3, [r7, #11]
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d127      	bne.n	8009d34 <follow_path+0xdc>
 8009ce4:	2305      	movs	r3, #5
 8009ce6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ce8:	e024      	b.n	8009d34 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	f003 0304 	and.w	r3, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d121      	bne.n	8009d38 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	799b      	ldrb	r3, [r3, #6]
 8009cf8:	f003 0310 	and.w	r3, r3, #16
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d102      	bne.n	8009d06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009d00:	2305      	movs	r3, #5
 8009d02:	75fb      	strb	r3, [r7, #23]
 8009d04:	e019      	b.n	8009d3a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	8992      	ldrh	r2, [r2, #12]
 8009d14:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d18:	fb00 f202 	mul.w	r2, r0, r2
 8009d1c:	1a9b      	subs	r3, r3, r2
 8009d1e:	440b      	add	r3, r1
 8009d20:	4619      	mov	r1, r3
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f7ff fa60 	bl	80091e8 <ld_clust>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d2e:	e7bb      	b.n	8009ca8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009d30:	bf00      	nop
 8009d32:	e002      	b.n	8009d3a <follow_path+0xe2>
				break;
 8009d34:	bf00      	nop
 8009d36:	e000      	b.n	8009d3a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d38:	bf00      	nop
			}
		}
	}

	return res;
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d50:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d031      	beq.n	8009dbe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	617b      	str	r3, [r7, #20]
 8009d60:	e002      	b.n	8009d68 <get_ldnumber+0x24>
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	3301      	adds	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b1f      	cmp	r3, #31
 8009d6e:	d903      	bls.n	8009d78 <get_ldnumber+0x34>
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b3a      	cmp	r3, #58	; 0x3a
 8009d76:	d1f4      	bne.n	8009d62 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b3a      	cmp	r3, #58	; 0x3a
 8009d7e:	d11c      	bne.n	8009dba <get_ldnumber+0x76>
			tp = *path;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	60fa      	str	r2, [r7, #12]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	3b30      	subs	r3, #48	; 0x30
 8009d90:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b09      	cmp	r3, #9
 8009d96:	d80e      	bhi.n	8009db6 <get_ldnumber+0x72>
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d10a      	bne.n	8009db6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d107      	bne.n	8009db6 <get_ldnumber+0x72>
					vol = (int)i;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	3301      	adds	r3, #1
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	e002      	b.n	8009dc0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009dba:	2300      	movs	r3, #0
 8009dbc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009dbe:	693b      	ldr	r3, [r7, #16]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	371c      	adds	r7, #28
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	70da      	strb	r2, [r3, #3]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7fe fc76 	bl	80086d8 <move_window>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <check_fs+0x2a>
 8009df2:	2304      	movs	r3, #4
 8009df4:	e038      	b.n	8009e68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3338      	adds	r3, #56	; 0x38
 8009dfa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fe f9ba 	bl	8008178 <ld_word>
 8009e04:	4603      	mov	r3, r0
 8009e06:	461a      	mov	r2, r3
 8009e08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d001      	beq.n	8009e14 <check_fs+0x48>
 8009e10:	2303      	movs	r3, #3
 8009e12:	e029      	b.n	8009e68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e1a:	2be9      	cmp	r3, #233	; 0xe9
 8009e1c:	d009      	beq.n	8009e32 <check_fs+0x66>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e24:	2beb      	cmp	r3, #235	; 0xeb
 8009e26:	d11e      	bne.n	8009e66 <check_fs+0x9a>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e2e:	2b90      	cmp	r3, #144	; 0x90
 8009e30:	d119      	bne.n	8009e66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3338      	adds	r3, #56	; 0x38
 8009e36:	3336      	adds	r3, #54	; 0x36
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fe f9b5 	bl	80081a8 <ld_dword>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e44:	4a0a      	ldr	r2, [pc, #40]	; (8009e70 <check_fs+0xa4>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d101      	bne.n	8009e4e <check_fs+0x82>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e00c      	b.n	8009e68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	3338      	adds	r3, #56	; 0x38
 8009e52:	3352      	adds	r3, #82	; 0x52
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fe f9a7 	bl	80081a8 <ld_dword>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	4a05      	ldr	r2, [pc, #20]	; (8009e74 <check_fs+0xa8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d101      	bne.n	8009e66 <check_fs+0x9a>
 8009e62:	2300      	movs	r3, #0
 8009e64:	e000      	b.n	8009e68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e66:	2302      	movs	r3, #2
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	00544146 	.word	0x00544146
 8009e74:	33544146 	.word	0x33544146

08009e78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b096      	sub	sp, #88	; 0x58
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	4613      	mov	r3, r2
 8009e84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7ff ff59 	bl	8009d44 <get_ldnumber>
 8009e92:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	da01      	bge.n	8009e9e <find_volume+0x26>
 8009e9a:	230b      	movs	r3, #11
 8009e9c:	e265      	b.n	800a36a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e9e:	4a9f      	ldr	r2, [pc, #636]	; (800a11c <find_volume+0x2a4>)
 8009ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ea6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <find_volume+0x3a>
 8009eae:	230c      	movs	r3, #12
 8009eb0:	e25b      	b.n	800a36a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eb6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009eb8:	79fb      	ldrb	r3, [r7, #7]
 8009eba:	f023 0301 	bic.w	r3, r3, #1
 8009ebe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01a      	beq.n	8009efe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	785b      	ldrb	r3, [r3, #1]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fe f8b5 	bl	800803c <disk_status>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10c      	bne.n	8009efe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d007      	beq.n	8009efa <find_volume+0x82>
 8009eea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009ef6:	230a      	movs	r3, #10
 8009ef8:	e237      	b.n	800a36a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009efa:	2300      	movs	r3, #0
 8009efc:	e235      	b.n	800a36a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	2200      	movs	r2, #0
 8009f02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0e:	785b      	ldrb	r3, [r3, #1]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe f8ad 	bl	8008070 <disk_initialize>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009f1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e21e      	b.n	800a36a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009f2c:	79fb      	ldrb	r3, [r7, #7]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d007      	beq.n	8009f42 <find_volume+0xca>
 8009f32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f36:	f003 0304 	and.w	r3, r3, #4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009f3e:	230a      	movs	r3, #10
 8009f40:	e213      	b.n	800a36a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f44:	7858      	ldrb	r0, [r3, #1]
 8009f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f48:	330c      	adds	r3, #12
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	2102      	movs	r1, #2
 8009f4e:	f7fe f8f5 	bl	800813c <disk_ioctl>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <find_volume+0xe4>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e206      	b.n	800a36a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	899b      	ldrh	r3, [r3, #12]
 8009f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f64:	d80d      	bhi.n	8009f82 <find_volume+0x10a>
 8009f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f68:	899b      	ldrh	r3, [r3, #12]
 8009f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f6e:	d308      	bcc.n	8009f82 <find_volume+0x10a>
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	899b      	ldrh	r3, [r3, #12]
 8009f74:	461a      	mov	r2, r3
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	899b      	ldrh	r3, [r3, #12]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <find_volume+0x10e>
 8009f82:	2301      	movs	r3, #1
 8009f84:	e1f1      	b.n	800a36a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009f8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f8e:	f7ff ff1d 	bl	8009dcc <check_fs>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009f98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d149      	bne.n	800a034 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8009fa4:	e01e      	b.n	8009fe4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fae:	011b      	lsls	r3, r3, #4
 8009fb0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009fb4:	4413      	add	r3, r2
 8009fb6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fba:	3304      	adds	r3, #4
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d006      	beq.n	8009fd0 <find_volume+0x158>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe f8ee 	bl	80081a8 <ld_dword>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	e000      	b.n	8009fd2 <find_volume+0x15a>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	3358      	adds	r3, #88	; 0x58
 8009fd8:	443b      	add	r3, r7
 8009fda:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8009fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d9dd      	bls.n	8009fa6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009fea:	2300      	movs	r3, #0
 8009fec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <find_volume+0x182>
 8009ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	3358      	adds	r3, #88	; 0x58
 800a000:	443b      	add	r3, r7
 800a002:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a006:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <find_volume+0x1a2>
 800a00e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a010:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a012:	f7ff fedb 	bl	8009dcc <check_fs>
 800a016:	4603      	mov	r3, r0
 800a018:	e000      	b.n	800a01c <find_volume+0x1a4>
 800a01a:	2303      	movs	r3, #3
 800a01c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a024:	2b01      	cmp	r3, #1
 800a026:	d905      	bls.n	800a034 <find_volume+0x1bc>
 800a028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a02a:	3301      	adds	r3, #1
 800a02c:	643b      	str	r3, [r7, #64]	; 0x40
 800a02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a030:	2b03      	cmp	r3, #3
 800a032:	d9e2      	bls.n	8009ffa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a038:	2b04      	cmp	r3, #4
 800a03a:	d101      	bne.n	800a040 <find_volume+0x1c8>
 800a03c:	2301      	movs	r3, #1
 800a03e:	e194      	b.n	800a36a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a040:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a044:	2b01      	cmp	r3, #1
 800a046:	d901      	bls.n	800a04c <find_volume+0x1d4>
 800a048:	230d      	movs	r3, #13
 800a04a:	e18e      	b.n	800a36a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	3338      	adds	r3, #56	; 0x38
 800a050:	330b      	adds	r3, #11
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe f890 	bl	8008178 <ld_word>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05e:	899b      	ldrh	r3, [r3, #12]
 800a060:	429a      	cmp	r2, r3
 800a062:	d001      	beq.n	800a068 <find_volume+0x1f0>
 800a064:	230d      	movs	r3, #13
 800a066:	e180      	b.n	800a36a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06a:	3338      	adds	r3, #56	; 0x38
 800a06c:	3316      	adds	r3, #22
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe f882 	bl	8008178 <ld_word>
 800a074:	4603      	mov	r3, r0
 800a076:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d106      	bne.n	800a08c <find_volume+0x214>
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	3338      	adds	r3, #56	; 0x38
 800a082:	3324      	adds	r3, #36	; 0x24
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe f88f 	bl	80081a8 <ld_dword>
 800a08a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a090:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09e:	789b      	ldrb	r3, [r3, #2]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d005      	beq.n	800a0b0 <find_volume+0x238>
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a6:	789b      	ldrb	r3, [r3, #2]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d001      	beq.n	800a0b0 <find_volume+0x238>
 800a0ac:	230d      	movs	r3, #13
 800a0ae:	e15c      	b.n	800a36a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b2:	789b      	ldrb	r3, [r3, #2]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b8:	fb02 f303 	mul.w	r3, r2, r3
 800a0bc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0cc:	895b      	ldrh	r3, [r3, #10]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <find_volume+0x26c>
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	895b      	ldrh	r3, [r3, #10]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0da:	895b      	ldrh	r3, [r3, #10]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <find_volume+0x270>
 800a0e4:	230d      	movs	r3, #13
 800a0e6:	e140      	b.n	800a36a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	3338      	adds	r3, #56	; 0x38
 800a0ec:	3311      	adds	r3, #17
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe f842 	bl	8008178 <ld_word>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	891b      	ldrh	r3, [r3, #8]
 800a100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a102:	8992      	ldrh	r2, [r2, #12]
 800a104:	0952      	lsrs	r2, r2, #5
 800a106:	b292      	uxth	r2, r2
 800a108:	fbb3 f1f2 	udiv	r1, r3, r2
 800a10c:	fb01 f202 	mul.w	r2, r1, r2
 800a110:	1a9b      	subs	r3, r3, r2
 800a112:	b29b      	uxth	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <find_volume+0x2a8>
 800a118:	230d      	movs	r3, #13
 800a11a:	e126      	b.n	800a36a <find_volume+0x4f2>
 800a11c:	20001770 	.word	0x20001770

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	3338      	adds	r3, #56	; 0x38
 800a124:	3313      	adds	r3, #19
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe f826 	bl	8008178 <ld_word>
 800a12c:	4603      	mov	r3, r0
 800a12e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a132:	2b00      	cmp	r3, #0
 800a134:	d106      	bne.n	800a144 <find_volume+0x2cc>
 800a136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a138:	3338      	adds	r3, #56	; 0x38
 800a13a:	3320      	adds	r3, #32
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe f833 	bl	80081a8 <ld_dword>
 800a142:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a146:	3338      	adds	r3, #56	; 0x38
 800a148:	330e      	adds	r3, #14
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe f814 	bl	8008178 <ld_word>
 800a150:	4603      	mov	r3, r0
 800a152:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a154:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <find_volume+0x2e6>
 800a15a:	230d      	movs	r3, #13
 800a15c:	e105      	b.n	800a36a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a15e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a162:	4413      	add	r3, r2
 800a164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a166:	8911      	ldrh	r1, [r2, #8]
 800a168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a16a:	8992      	ldrh	r2, [r2, #12]
 800a16c:	0952      	lsrs	r2, r2, #5
 800a16e:	b292      	uxth	r2, r2
 800a170:	fbb1 f2f2 	udiv	r2, r1, r2
 800a174:	b292      	uxth	r2, r2
 800a176:	4413      	add	r3, r2
 800a178:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a17a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	429a      	cmp	r2, r3
 800a180:	d201      	bcs.n	800a186 <find_volume+0x30e>
 800a182:	230d      	movs	r3, #13
 800a184:	e0f1      	b.n	800a36a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a18e:	8952      	ldrh	r2, [r2, #10]
 800a190:	fbb3 f3f2 	udiv	r3, r3, r2
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <find_volume+0x328>
 800a19c:	230d      	movs	r3, #13
 800a19e:	e0e4      	b.n	800a36a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d802      	bhi.n	800a1b6 <find_volume+0x33e>
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d802      	bhi.n	800a1c6 <find_volume+0x34e>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	1c9a      	adds	r2, r3, #2
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1d2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a1d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1d8:	441a      	add	r2, r3
 800a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1dc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a1de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	441a      	add	r2, r3
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a1e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d11e      	bne.n	800a22e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	3338      	adds	r3, #56	; 0x38
 800a1f4:	332a      	adds	r3, #42	; 0x2a
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fd ffbe 	bl	8008178 <ld_word>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <find_volume+0x38e>
 800a202:	230d      	movs	r3, #13
 800a204:	e0b1      	b.n	800a36a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	891b      	ldrh	r3, [r3, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <find_volume+0x39a>
 800a20e:	230d      	movs	r3, #13
 800a210:	e0ab      	b.n	800a36a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a214:	3338      	adds	r3, #56	; 0x38
 800a216:	332c      	adds	r3, #44	; 0x2c
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fd ffc5 	bl	80081a8 <ld_dword>
 800a21e:	4602      	mov	r2, r0
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	647b      	str	r3, [r7, #68]	; 0x44
 800a22c:	e01f      	b.n	800a26e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	891b      	ldrh	r3, [r3, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <find_volume+0x3c2>
 800a236:	230d      	movs	r3, #13
 800a238:	e097      	b.n	800a36a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a23e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a240:	441a      	add	r2, r3
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a246:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d103      	bne.n	800a256 <find_volume+0x3de>
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	e00a      	b.n	800a26c <find_volume+0x3f4>
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	69da      	ldr	r2, [r3, #28]
 800a25a:	4613      	mov	r3, r2
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	4413      	add	r3, r2
 800a260:	085a      	lsrs	r2, r3, #1
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	69db      	ldr	r3, [r3, #28]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a26c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a270:	6a1a      	ldr	r2, [r3, #32]
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	899b      	ldrh	r3, [r3, #12]
 800a276:	4619      	mov	r1, r3
 800a278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a27a:	440b      	add	r3, r1
 800a27c:	3b01      	subs	r3, #1
 800a27e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a280:	8989      	ldrh	r1, [r1, #12]
 800a282:	fbb3 f3f1 	udiv	r3, r3, r1
 800a286:	429a      	cmp	r2, r3
 800a288:	d201      	bcs.n	800a28e <find_volume+0x416>
 800a28a:	230d      	movs	r3, #13
 800a28c:	e06d      	b.n	800a36a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	f04f 32ff 	mov.w	r2, #4294967295
 800a294:	619a      	str	r2, [r3, #24]
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	699a      	ldr	r2, [r3, #24]
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	2280      	movs	r2, #128	; 0x80
 800a2a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a2a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d149      	bne.n	800a340 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	3338      	adds	r3, #56	; 0x38
 800a2b0:	3330      	adds	r3, #48	; 0x30
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fd ff60 	bl	8008178 <ld_word>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d140      	bne.n	800a340 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a2be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2c6:	f7fe fa07 	bl	80086d8 <move_window>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d137      	bne.n	800a340 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d8:	3338      	adds	r3, #56	; 0x38
 800a2da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fd ff4a 	bl	8008178 <ld_word>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d127      	bne.n	800a340 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f2:	3338      	adds	r3, #56	; 0x38
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fd ff57 	bl	80081a8 <ld_dword>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	4a1d      	ldr	r2, [pc, #116]	; (800a374 <find_volume+0x4fc>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d11e      	bne.n	800a340 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	3338      	adds	r3, #56	; 0x38
 800a306:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fd ff4c 	bl	80081a8 <ld_dword>
 800a310:	4603      	mov	r3, r0
 800a312:	4a19      	ldr	r2, [pc, #100]	; (800a378 <find_volume+0x500>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d113      	bne.n	800a340 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31a:	3338      	adds	r3, #56	; 0x38
 800a31c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a320:	4618      	mov	r0, r3
 800a322:	f7fd ff41 	bl	80081a8 <ld_dword>
 800a326:	4602      	mov	r2, r0
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	3338      	adds	r3, #56	; 0x38
 800a330:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a334:	4618      	mov	r0, r3
 800a336:	f7fd ff37 	bl	80081a8 <ld_dword>
 800a33a:	4602      	mov	r2, r0
 800a33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a342:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a346:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a348:	4b0c      	ldr	r3, [pc, #48]	; (800a37c <find_volume+0x504>)
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	3301      	adds	r3, #1
 800a34e:	b29a      	uxth	r2, r3
 800a350:	4b0a      	ldr	r3, [pc, #40]	; (800a37c <find_volume+0x504>)
 800a352:	801a      	strh	r2, [r3, #0]
 800a354:	4b09      	ldr	r3, [pc, #36]	; (800a37c <find_volume+0x504>)
 800a356:	881a      	ldrh	r2, [r3, #0]
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35e:	4a08      	ldr	r2, [pc, #32]	; (800a380 <find_volume+0x508>)
 800a360:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a362:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a364:	f7fe f950 	bl	8008608 <clear_lock>
#endif
	return FR_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3758      	adds	r7, #88	; 0x58
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	41615252 	.word	0x41615252
 800a378:	61417272 	.word	0x61417272
 800a37c:	20001774 	.word	0x20001774
 800a380:	20001798 	.word	0x20001798

0800a384 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a38e:	2309      	movs	r3, #9
 800a390:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d01c      	beq.n	800a3d2 <validate+0x4e>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d018      	beq.n	800a3d2 <validate+0x4e>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d013      	beq.n	800a3d2 <validate+0x4e>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	889a      	ldrh	r2, [r3, #4]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	88db      	ldrh	r3, [r3, #6]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d10c      	bne.n	800a3d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	785b      	ldrb	r3, [r3, #1]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fd fe3c 	bl	800803c <disk_status>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <validate+0x4e>
			res = FR_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <validate+0x5a>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	e000      	b.n	800a3e0 <validate+0x5c>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	6013      	str	r3, [r2, #0]
	return res;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b09a      	sub	sp, #104	; 0x68
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <f_open+0x18>
 800a402:	2309      	movs	r3, #9
 800a404:	e1bb      	b.n	800a77e <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a40c:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a40e:	79fa      	ldrb	r2, [r7, #7]
 800a410:	f107 0114 	add.w	r1, r7, #20
 800a414:	f107 0308 	add.w	r3, r7, #8
 800a418:	4618      	mov	r0, r3
 800a41a:	f7ff fd2d 	bl	8009e78 <find_volume>
 800a41e:	4603      	mov	r3, r0
 800a420:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a424:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f040 819f 	bne.w	800a76c <f_open+0x37e>
		dj.obj.fs = fs;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	f107 0318 	add.w	r3, r7, #24
 800a438:	4611      	mov	r1, r2
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fc0c 	bl	8009c58 <follow_path>
 800a440:	4603      	mov	r3, r0
 800a442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a446:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d11a      	bne.n	800a484 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a44e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a452:	b25b      	sxtb	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	da03      	bge.n	800a460 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a458:	2306      	movs	r3, #6
 800a45a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a45e:	e011      	b.n	800a484 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	f023 0301 	bic.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	bf14      	ite	ne
 800a46a:	2301      	movne	r3, #1
 800a46c:	2300      	moveq	r3, #0
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	461a      	mov	r2, r3
 800a472:	f107 0318 	add.w	r3, r7, #24
 800a476:	4611      	mov	r1, r2
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fd ff7d 	bl	8008378 <chk_lock>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a484:	79fb      	ldrb	r3, [r7, #7]
 800a486:	f003 031c 	and.w	r3, r3, #28
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d07f      	beq.n	800a58e <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a48e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a492:	2b00      	cmp	r3, #0
 800a494:	d017      	beq.n	800a4c6 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a496:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a49a:	2b04      	cmp	r3, #4
 800a49c:	d10e      	bne.n	800a4bc <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a49e:	f7fd ffc7 	bl	8008430 <enq_lock>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d006      	beq.n	800a4b6 <f_open+0xc8>
 800a4a8:	f107 0318 	add.w	r3, r7, #24
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff f923 	bl	80096f8 <dir_register>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	e000      	b.n	800a4b8 <f_open+0xca>
 800a4b6:	2312      	movs	r3, #18
 800a4b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a4bc:	79fb      	ldrb	r3, [r7, #7]
 800a4be:	f043 0308 	orr.w	r3, r3, #8
 800a4c2:	71fb      	strb	r3, [r7, #7]
 800a4c4:	e010      	b.n	800a4e8 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a4c6:	7fbb      	ldrb	r3, [r7, #30]
 800a4c8:	f003 0311 	and.w	r3, r3, #17
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d003      	beq.n	800a4d8 <f_open+0xea>
					res = FR_DENIED;
 800a4d0:	2307      	movs	r3, #7
 800a4d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a4d6:	e007      	b.n	800a4e8 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	f003 0304 	and.w	r3, r3, #4
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <f_open+0xfa>
 800a4e2:	2308      	movs	r3, #8
 800a4e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a4e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d168      	bne.n	800a5c2 <f_open+0x1d4>
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	f003 0308 	and.w	r3, r3, #8
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d063      	beq.n	800a5c2 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a4fa:	f7fd fd3d 	bl	8007f78 <get_fattime>
 800a4fe:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	330e      	adds	r3, #14
 800a504:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a506:	4618      	mov	r0, r3
 800a508:	f7fd fe8c 	bl	8008224 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	3316      	adds	r3, #22
 800a510:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a512:	4618      	mov	r0, r3
 800a514:	f7fd fe86 	bl	8008224 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51a:	330b      	adds	r3, #11
 800a51c:	2220      	movs	r2, #32
 800a51e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe fe5e 	bl	80091e8 <ld_clust>
 800a52c:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a532:	2200      	movs	r2, #0
 800a534:	4618      	mov	r0, r3
 800a536:	f7fe fe76 	bl	8009226 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	331c      	adds	r3, #28
 800a53e:	2100      	movs	r1, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f7fd fe6f 	bl	8008224 <st_dword>
					fs->wflag = 1;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2201      	movs	r2, #1
 800a54a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a54c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d037      	beq.n	800a5c2 <f_open+0x1d4>
						dw = fs->winsect;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a558:	f107 0318 	add.w	r3, r7, #24
 800a55c:	2200      	movs	r2, #0
 800a55e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a560:	4618      	mov	r0, r3
 800a562:	f7fe fb66 	bl	8008c32 <remove_chain>
 800a566:	4603      	mov	r3, r0
 800a568:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a56c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a570:	2b00      	cmp	r3, #0
 800a572:	d126      	bne.n	800a5c2 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe f8ad 	bl	80086d8 <move_window>
 800a57e:	4603      	mov	r3, r0
 800a580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a588:	3a01      	subs	r2, #1
 800a58a:	615a      	str	r2, [r3, #20]
 800a58c:	e019      	b.n	800a5c2 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a58e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a592:	2b00      	cmp	r3, #0
 800a594:	d115      	bne.n	800a5c2 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a596:	7fbb      	ldrb	r3, [r7, #30]
 800a598:	f003 0310 	and.w	r3, r3, #16
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d003      	beq.n	800a5a8 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a5a0:	2304      	movs	r3, #4
 800a5a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a5a6:	e00c      	b.n	800a5c2 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a5a8:	79fb      	ldrb	r3, [r7, #7]
 800a5aa:	f003 0302 	and.w	r3, r3, #2
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d007      	beq.n	800a5c2 <f_open+0x1d4>
 800a5b2:	7fbb      	ldrb	r3, [r7, #30]
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <f_open+0x1d4>
						res = FR_DENIED;
 800a5bc:	2307      	movs	r3, #7
 800a5be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a5c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d128      	bne.n	800a61c <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	f003 0308 	and.w	r3, r3, #8
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d003      	beq.n	800a5dc <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5da:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a5e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	f023 0301 	bic.w	r3, r3, #1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	bf14      	ite	ne
 800a5f4:	2301      	movne	r3, #1
 800a5f6:	2300      	moveq	r3, #0
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f107 0318 	add.w	r3, r7, #24
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f7fd ff36 	bl	8008474 <inc_lock>
 800a608:	4602      	mov	r2, r0
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d102      	bne.n	800a61c <f_open+0x22e>
 800a616:	2302      	movs	r3, #2
 800a618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a61c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a620:	2b00      	cmp	r3, #0
 800a622:	f040 80a3 	bne.w	800a76c <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a62a:	4611      	mov	r1, r2
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fe fddb 	bl	80091e8 <ld_clust>
 800a632:	4602      	mov	r2, r0
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	331c      	adds	r3, #28
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fd fdb3 	bl	80081a8 <ld_dword>
 800a642:	4602      	mov	r2, r0
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	88da      	ldrh	r2, [r3, #6]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	79fa      	ldrb	r2, [r7, #7]
 800a660:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3330      	adds	r3, #48	; 0x30
 800a678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a67c:	2100      	movs	r1, #0
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fd fe1d 	bl	80082be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	f003 0320 	and.w	r3, r3, #32
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d06e      	beq.n	800a76c <f_open+0x37e>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d06a      	beq.n	800a76c <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	68da      	ldr	r2, [r3, #12]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	895b      	ldrh	r3, [r3, #10]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	899b      	ldrh	r3, [r3, #12]
 800a6a8:	fb02 f303 	mul.w	r3, r2, r3
 800a6ac:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6ba:	e016      	b.n	800a6ea <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe f8c6 	bl	8008852 <get_fat>
 800a6c6:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a6c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d802      	bhi.n	800a6d4 <f_open+0x2e6>
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a6d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6da:	d102      	bne.n	800a6e2 <f_open+0x2f4>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a6e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d103      	bne.n	800a6fa <f_open+0x30c>
 800a6f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d8e0      	bhi.n	800a6bc <f_open+0x2ce>
				}
				fp->clust = clst;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6fe:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a700:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a704:	2b00      	cmp	r3, #0
 800a706:	d131      	bne.n	800a76c <f_open+0x37e>
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	899b      	ldrh	r3, [r3, #12]
 800a70c:	461a      	mov	r2, r3
 800a70e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a710:	fbb3 f1f2 	udiv	r1, r3, r2
 800a714:	fb01 f202 	mul.w	r2, r1, r2
 800a718:	1a9b      	subs	r3, r3, r2
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d026      	beq.n	800a76c <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe f876 	bl	8008814 <clust2sect>
 800a728:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d103      	bne.n	800a738 <f_open+0x34a>
						res = FR_INT_ERR;
 800a730:	2302      	movs	r3, #2
 800a732:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a736:	e019      	b.n	800a76c <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	899b      	ldrh	r3, [r3, #12]
 800a73c:	461a      	mov	r2, r3
 800a73e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a740:	fbb3 f2f2 	udiv	r2, r3, r2
 800a744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a746:	441a      	add	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	7858      	ldrb	r0, [r3, #1]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6a1a      	ldr	r2, [r3, #32]
 800a75a:	2301      	movs	r3, #1
 800a75c:	f7fd fcae 	bl	80080bc <disk_read>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d002      	beq.n	800a76c <f_open+0x37e>
 800a766:	2301      	movs	r3, #1
 800a768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a76c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a770:	2b00      	cmp	r3, #0
 800a772:	d002      	beq.n	800a77a <f_open+0x38c>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a77a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3768      	adds	r7, #104	; 0x68
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b08c      	sub	sp, #48	; 0x30
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	60f8      	str	r0, [r7, #12]
 800a78e:	60b9      	str	r1, [r7, #8]
 800a790:	607a      	str	r2, [r7, #4]
 800a792:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	2200      	movs	r2, #0
 800a79c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f107 0210 	add.w	r2, r7, #16
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7ff fdec 	bl	800a384 <validate>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a7b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d107      	bne.n	800a7ca <f_write+0x44>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	7d5b      	ldrb	r3, [r3, #21]
 800a7be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a7c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <f_write+0x4a>
 800a7ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7ce:	e16a      	b.n	800aaa6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	7d1b      	ldrb	r3, [r3, #20]
 800a7d4:	f003 0302 	and.w	r3, r3, #2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <f_write+0x5a>
 800a7dc:	2307      	movs	r3, #7
 800a7de:	e162      	b.n	800aaa6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	699a      	ldr	r2, [r3, #24]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	441a      	add	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	f080 814c 	bcs.w	800aa8a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	43db      	mvns	r3, r3
 800a7f8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a7fa:	e146      	b.n	800aa8a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	699b      	ldr	r3, [r3, #24]
 800a800:	693a      	ldr	r2, [r7, #16]
 800a802:	8992      	ldrh	r2, [r2, #12]
 800a804:	fbb3 f1f2 	udiv	r1, r3, r2
 800a808:	fb01 f202 	mul.w	r2, r1, r2
 800a80c:	1a9b      	subs	r3, r3, r2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f040 80f1 	bne.w	800a9f6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	8992      	ldrh	r2, [r2, #12]
 800a81c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	8952      	ldrh	r2, [r2, #10]
 800a824:	3a01      	subs	r2, #1
 800a826:	4013      	ands	r3, r2
 800a828:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d143      	bne.n	800a8b8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10c      	bne.n	800a852 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a840:	2b00      	cmp	r3, #0
 800a842:	d11a      	bne.n	800a87a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2100      	movs	r1, #0
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fe fa57 	bl	8008cfc <create_chain>
 800a84e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a850:	e013      	b.n	800a87a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d007      	beq.n	800a86a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	4619      	mov	r1, r3
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f7fe fae3 	bl	8008e2c <clmt_clust>
 800a866:	62b8      	str	r0, [r7, #40]	; 0x28
 800a868:	e007      	b.n	800a87a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	4619      	mov	r1, r3
 800a872:	4610      	mov	r0, r2
 800a874:	f7fe fa42 	bl	8008cfc <create_chain>
 800a878:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 8109 	beq.w	800aa94 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a884:	2b01      	cmp	r3, #1
 800a886:	d104      	bne.n	800a892 <f_write+0x10c>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2202      	movs	r2, #2
 800a88c:	755a      	strb	r2, [r3, #21]
 800a88e:	2302      	movs	r3, #2
 800a890:	e109      	b.n	800aaa6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a898:	d104      	bne.n	800a8a4 <f_write+0x11e>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2201      	movs	r2, #1
 800a89e:	755a      	strb	r2, [r3, #21]
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e100      	b.n	800aaa6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8a8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d102      	bne.n	800a8b8 <f_write+0x132>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8b6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	7d1b      	ldrb	r3, [r3, #20]
 800a8bc:	b25b      	sxtb	r3, r3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da18      	bge.n	800a8f4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	7858      	ldrb	r0, [r3, #1]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6a1a      	ldr	r2, [r3, #32]
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	f7fd fc13 	bl	80080fc <disk_write>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d004      	beq.n	800a8e6 <f_write+0x160>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	755a      	strb	r2, [r3, #21]
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e0df      	b.n	800aaa6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	7d1b      	ldrb	r3, [r3, #20]
 800a8ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	f7fd ff89 	bl	8008814 <clust2sect>
 800a902:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d104      	bne.n	800a914 <f_write+0x18e>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2202      	movs	r2, #2
 800a90e:	755a      	strb	r2, [r3, #21]
 800a910:	2302      	movs	r3, #2
 800a912:	e0c8      	b.n	800aaa6 <f_write+0x320>
			sect += csect;
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	4413      	add	r3, r2
 800a91a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	899b      	ldrh	r3, [r3, #12]
 800a920:	461a      	mov	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	fbb3 f3f2 	udiv	r3, r3, r2
 800a928:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d043      	beq.n	800a9b8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a930:	69ba      	ldr	r2, [r7, #24]
 800a932:	6a3b      	ldr	r3, [r7, #32]
 800a934:	4413      	add	r3, r2
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	8952      	ldrh	r2, [r2, #10]
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d905      	bls.n	800a94a <f_write+0x1c4>
					cc = fs->csize - csect;
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	895b      	ldrh	r3, [r3, #10]
 800a942:	461a      	mov	r2, r3
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	7858      	ldrb	r0, [r3, #1]
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	69f9      	ldr	r1, [r7, #28]
 800a954:	f7fd fbd2 	bl	80080fc <disk_write>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d004      	beq.n	800a968 <f_write+0x1e2>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	755a      	strb	r2, [r3, #21]
 800a964:	2301      	movs	r3, #1
 800a966:	e09e      	b.n	800aaa6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a1a      	ldr	r2, [r3, #32]
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	6a3a      	ldr	r2, [r7, #32]
 800a972:	429a      	cmp	r2, r3
 800a974:	d918      	bls.n	800a9a8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6a1a      	ldr	r2, [r3, #32]
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	8992      	ldrh	r2, [r2, #12]
 800a988:	fb02 f303 	mul.w	r3, r2, r3
 800a98c:	69fa      	ldr	r2, [r7, #28]
 800a98e:	18d1      	adds	r1, r2, r3
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	899b      	ldrh	r3, [r3, #12]
 800a994:	461a      	mov	r2, r3
 800a996:	f7fd fc71 	bl	800827c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	7d1b      	ldrb	r3, [r3, #20]
 800a99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	899b      	ldrh	r3, [r3, #12]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	fb02 f303 	mul.w	r3, r2, r3
 800a9b4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a9b6:	e04b      	b.n	800aa50 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d016      	beq.n	800a9f0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	699a      	ldr	r2, [r3, #24]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d210      	bcs.n	800a9f0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	7858      	ldrb	r0, [r3, #1]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a9d8:	2301      	movs	r3, #1
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	f7fd fb6e 	bl	80080bc <disk_read>
 800a9e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d004      	beq.n	800a9f0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	755a      	strb	r2, [r3, #21]
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e05a      	b.n	800aaa6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	899b      	ldrh	r3, [r3, #12]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	8992      	ldrh	r2, [r2, #12]
 800aa04:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa08:	fb01 f202 	mul.w	r2, r1, r2
 800aa0c:	1a9b      	subs	r3, r3, r2
 800aa0e:	1ac3      	subs	r3, r0, r3
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aa12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d901      	bls.n	800aa1e <f_write+0x298>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	8992      	ldrh	r2, [r2, #12]
 800aa2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa30:	fb00 f202 	mul.w	r2, r0, r2
 800aa34:	1a9b      	subs	r3, r3, r2
 800aa36:	440b      	add	r3, r1
 800aa38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa3a:	69f9      	ldr	r1, [r7, #28]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fd fc1d 	bl	800827c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	7d1b      	ldrb	r3, [r3, #20]
 800aa46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aa50:	69fa      	ldr	r2, [r7, #28]
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	4413      	add	r3, r2
 800aa56:	61fb      	str	r3, [r7, #28]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	699a      	ldr	r2, [r3, #24]
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	441a      	add	r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	619a      	str	r2, [r3, #24]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	68da      	ldr	r2, [r3, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	bf38      	it	cc
 800aa70:	461a      	movcc	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	60da      	str	r2, [r3, #12]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7c:	441a      	add	r2, r3
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f47f aeb5 	bne.w	800a7fc <f_write+0x76>
 800aa92:	e000      	b.n	800aa96 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aa94:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	7d1b      	ldrb	r3, [r3, #20]
 800aa9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3730      	adds	r7, #48	; 0x30
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b086      	sub	sp, #24
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f107 0208 	add.w	r2, r7, #8
 800aabc:	4611      	mov	r1, r2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7ff fc60 	bl	800a384 <validate>
 800aac4:	4603      	mov	r3, r0
 800aac6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d168      	bne.n	800aba0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	7d1b      	ldrb	r3, [r3, #20]
 800aad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d062      	beq.n	800aba0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	7d1b      	ldrb	r3, [r3, #20]
 800aade:	b25b      	sxtb	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	da15      	bge.n	800ab10 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	7858      	ldrb	r0, [r3, #1]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a1a      	ldr	r2, [r3, #32]
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	f7fd fb02 	bl	80080fc <disk_write>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <f_sync+0x54>
 800aafe:	2301      	movs	r3, #1
 800ab00:	e04f      	b.n	800aba2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7d1b      	ldrb	r3, [r3, #20]
 800ab06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ab10:	f7fd fa32 	bl	8007f78 <get_fattime>
 800ab14:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4610      	mov	r0, r2
 800ab20:	f7fd fdda 	bl	80086d8 <move_window>
 800ab24:	4603      	mov	r3, r0
 800ab26:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ab28:	7dfb      	ldrb	r3, [r7, #23]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d138      	bne.n	800aba0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab32:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	330b      	adds	r3, #11
 800ab38:	781a      	ldrb	r2, [r3, #0]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	330b      	adds	r3, #11
 800ab3e:	f042 0220 	orr.w	r2, r2, #32
 800ab42:	b2d2      	uxtb	r2, r2
 800ab44:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	68f9      	ldr	r1, [r7, #12]
 800ab52:	f7fe fb68 	bl	8009226 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f103 021c 	add.w	r2, r3, #28
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	4619      	mov	r1, r3
 800ab62:	4610      	mov	r0, r2
 800ab64:	f7fd fb5e 	bl	8008224 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3316      	adds	r3, #22
 800ab6c:	6939      	ldr	r1, [r7, #16]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fd fb58 	bl	8008224 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	3312      	adds	r3, #18
 800ab78:	2100      	movs	r1, #0
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fd fb37 	bl	80081ee <st_word>
					fs->wflag = 1;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2201      	movs	r2, #1
 800ab84:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fd fdd3 	bl	8008734 <sync_fs>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	7d1b      	ldrb	r3, [r3, #20]
 800ab96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab9a:	b2da      	uxtb	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff ff7b 	bl	800aaae <f_sync>
 800abb8:	4603      	mov	r3, r0
 800abba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d118      	bne.n	800abf4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f107 0208 	add.w	r2, r7, #8
 800abc8:	4611      	mov	r1, r2
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff fbda 	bl	800a384 <validate>
 800abd0:	4603      	mov	r3, r0
 800abd2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10c      	bne.n	800abf4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fd fcd6 	bl	8008590 <dec_lock>
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac16:	4b1f      	ldr	r3, [pc, #124]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac18:	7a5b      	ldrb	r3, [r3, #9]
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d131      	bne.n	800ac84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac20:	4b1c      	ldr	r3, [pc, #112]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac22:	7a5b      	ldrb	r3, [r3, #9]
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	461a      	mov	r2, r3
 800ac28:	4b1a      	ldr	r3, [pc, #104]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac2e:	4b19      	ldr	r3, [pc, #100]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac30:	7a5b      	ldrb	r3, [r3, #9]
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	4a17      	ldr	r2, [pc, #92]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac3e:	4b15      	ldr	r3, [pc, #84]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac40:	7a5b      	ldrb	r3, [r3, #9]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	461a      	mov	r2, r3
 800ac46:	4b13      	ldr	r3, [pc, #76]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac48:	4413      	add	r3, r2
 800ac4a:	79fa      	ldrb	r2, [r7, #7]
 800ac4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac50:	7a5b      	ldrb	r3, [r3, #9]
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	b2d1      	uxtb	r1, r2
 800ac58:	4a0e      	ldr	r2, [pc, #56]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac5a:	7251      	strb	r1, [r2, #9]
 800ac5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac5e:	7dbb      	ldrb	r3, [r7, #22]
 800ac60:	3330      	adds	r3, #48	; 0x30
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	223a      	movs	r2, #58	; 0x3a
 800ac6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	3302      	adds	r3, #2
 800ac74:	222f      	movs	r2, #47	; 0x2f
 800ac76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	3303      	adds	r3, #3
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	371c      	adds	r7, #28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20001998 	.word	0x20001998

0800ac98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aca2:	2200      	movs	r2, #0
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff ffaa 	bl	800ac00 <FATFS_LinkDriverEx>
 800acac:	4603      	mov	r3, r0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
	...

0800acb8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	6039      	str	r1, [r7, #0]
 800acc2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800acc4:	88fb      	ldrh	r3, [r7, #6]
 800acc6:	2b7f      	cmp	r3, #127	; 0x7f
 800acc8:	d802      	bhi.n	800acd0 <ff_convert+0x18>
		c = chr;
 800acca:	88fb      	ldrh	r3, [r7, #6]
 800accc:	81fb      	strh	r3, [r7, #14]
 800acce:	e025      	b.n	800ad1c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00b      	beq.n	800acee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800acd6:	88fb      	ldrh	r3, [r7, #6]
 800acd8:	2bff      	cmp	r3, #255	; 0xff
 800acda:	d805      	bhi.n	800ace8 <ff_convert+0x30>
 800acdc:	88fb      	ldrh	r3, [r7, #6]
 800acde:	3b80      	subs	r3, #128	; 0x80
 800ace0:	4a12      	ldr	r2, [pc, #72]	; (800ad2c <ff_convert+0x74>)
 800ace2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ace6:	e000      	b.n	800acea <ff_convert+0x32>
 800ace8:	2300      	movs	r3, #0
 800acea:	81fb      	strh	r3, [r7, #14]
 800acec:	e016      	b.n	800ad1c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800acee:	2300      	movs	r3, #0
 800acf0:	81fb      	strh	r3, [r7, #14]
 800acf2:	e009      	b.n	800ad08 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800acf4:	89fb      	ldrh	r3, [r7, #14]
 800acf6:	4a0d      	ldr	r2, [pc, #52]	; (800ad2c <ff_convert+0x74>)
 800acf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acfc:	88fa      	ldrh	r2, [r7, #6]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d006      	beq.n	800ad10 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ad02:	89fb      	ldrh	r3, [r7, #14]
 800ad04:	3301      	adds	r3, #1
 800ad06:	81fb      	strh	r3, [r7, #14]
 800ad08:	89fb      	ldrh	r3, [r7, #14]
 800ad0a:	2b7f      	cmp	r3, #127	; 0x7f
 800ad0c:	d9f2      	bls.n	800acf4 <ff_convert+0x3c>
 800ad0e:	e000      	b.n	800ad12 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ad10:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ad12:	89fb      	ldrh	r3, [r7, #14]
 800ad14:	3380      	adds	r3, #128	; 0x80
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ad1c:	89fb      	ldrh	r3, [r7, #14]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3714      	adds	r7, #20
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	0800de38 	.word	0x0800de38

0800ad30 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b087      	sub	sp, #28
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4603      	mov	r3, r0
 800ad38:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ad3a:	88fb      	ldrh	r3, [r7, #6]
 800ad3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad40:	d201      	bcs.n	800ad46 <ff_wtoupper+0x16>
 800ad42:	4b3e      	ldr	r3, [pc, #248]	; (800ae3c <ff_wtoupper+0x10c>)
 800ad44:	e000      	b.n	800ad48 <ff_wtoupper+0x18>
 800ad46:	4b3e      	ldr	r3, [pc, #248]	; (800ae40 <ff_wtoupper+0x110>)
 800ad48:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	1c9a      	adds	r2, r3, #2
 800ad4e:	617a      	str	r2, [r7, #20]
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ad54:	8a7b      	ldrh	r3, [r7, #18]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d068      	beq.n	800ae2c <ff_wtoupper+0xfc>
 800ad5a:	88fa      	ldrh	r2, [r7, #6]
 800ad5c:	8a7b      	ldrh	r3, [r7, #18]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d364      	bcc.n	800ae2c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	1c9a      	adds	r2, r3, #2
 800ad66:	617a      	str	r2, [r7, #20]
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	823b      	strh	r3, [r7, #16]
 800ad6c:	8a3b      	ldrh	r3, [r7, #16]
 800ad6e:	0a1b      	lsrs	r3, r3, #8
 800ad70:	81fb      	strh	r3, [r7, #14]
 800ad72:	8a3b      	ldrh	r3, [r7, #16]
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ad78:	88fa      	ldrh	r2, [r7, #6]
 800ad7a:	8a79      	ldrh	r1, [r7, #18]
 800ad7c:	8a3b      	ldrh	r3, [r7, #16]
 800ad7e:	440b      	add	r3, r1
 800ad80:	429a      	cmp	r2, r3
 800ad82:	da49      	bge.n	800ae18 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ad84:	89fb      	ldrh	r3, [r7, #14]
 800ad86:	2b08      	cmp	r3, #8
 800ad88:	d84f      	bhi.n	800ae2a <ff_wtoupper+0xfa>
 800ad8a:	a201      	add	r2, pc, #4	; (adr r2, 800ad90 <ff_wtoupper+0x60>)
 800ad8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad90:	0800adb5 	.word	0x0800adb5
 800ad94:	0800adc7 	.word	0x0800adc7
 800ad98:	0800addd 	.word	0x0800addd
 800ad9c:	0800ade5 	.word	0x0800ade5
 800ada0:	0800aded 	.word	0x0800aded
 800ada4:	0800adf5 	.word	0x0800adf5
 800ada8:	0800adfd 	.word	0x0800adfd
 800adac:	0800ae05 	.word	0x0800ae05
 800adb0:	0800ae0d 	.word	0x0800ae0d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800adb4:	88fa      	ldrh	r2, [r7, #6]
 800adb6:	8a7b      	ldrh	r3, [r7, #18]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	4413      	add	r3, r2
 800adc0:	881b      	ldrh	r3, [r3, #0]
 800adc2:	80fb      	strh	r3, [r7, #6]
 800adc4:	e027      	b.n	800ae16 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800adc6:	88fa      	ldrh	r2, [r7, #6]
 800adc8:	8a7b      	ldrh	r3, [r7, #18]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	b29b      	uxth	r3, r3
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	b29b      	uxth	r3, r3
 800add4:	88fa      	ldrh	r2, [r7, #6]
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	80fb      	strh	r3, [r7, #6]
 800adda:	e01c      	b.n	800ae16 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800addc:	88fb      	ldrh	r3, [r7, #6]
 800adde:	3b10      	subs	r3, #16
 800ade0:	80fb      	strh	r3, [r7, #6]
 800ade2:	e018      	b.n	800ae16 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ade4:	88fb      	ldrh	r3, [r7, #6]
 800ade6:	3b20      	subs	r3, #32
 800ade8:	80fb      	strh	r3, [r7, #6]
 800adea:	e014      	b.n	800ae16 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800adec:	88fb      	ldrh	r3, [r7, #6]
 800adee:	3b30      	subs	r3, #48	; 0x30
 800adf0:	80fb      	strh	r3, [r7, #6]
 800adf2:	e010      	b.n	800ae16 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800adf4:	88fb      	ldrh	r3, [r7, #6]
 800adf6:	3b1a      	subs	r3, #26
 800adf8:	80fb      	strh	r3, [r7, #6]
 800adfa:	e00c      	b.n	800ae16 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800adfc:	88fb      	ldrh	r3, [r7, #6]
 800adfe:	3308      	adds	r3, #8
 800ae00:	80fb      	strh	r3, [r7, #6]
 800ae02:	e008      	b.n	800ae16 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ae04:	88fb      	ldrh	r3, [r7, #6]
 800ae06:	3b50      	subs	r3, #80	; 0x50
 800ae08:	80fb      	strh	r3, [r7, #6]
 800ae0a:	e004      	b.n	800ae16 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ae0c:	88fb      	ldrh	r3, [r7, #6]
 800ae0e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ae12:	80fb      	strh	r3, [r7, #6]
 800ae14:	bf00      	nop
			}
			break;
 800ae16:	e008      	b.n	800ae2a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ae18:	89fb      	ldrh	r3, [r7, #14]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d195      	bne.n	800ad4a <ff_wtoupper+0x1a>
 800ae1e:	8a3b      	ldrh	r3, [r7, #16]
 800ae20:	005b      	lsls	r3, r3, #1
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	4413      	add	r3, r2
 800ae26:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ae28:	e78f      	b.n	800ad4a <ff_wtoupper+0x1a>
			break;
 800ae2a:	bf00      	nop
	}

	return chr;
 800ae2c:	88fb      	ldrh	r3, [r7, #6]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	371c      	adds	r7, #28
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	0800df38 	.word	0x0800df38
 800ae40:	0800e12c 	.word	0x0800e12c

0800ae44 <__errno>:
 800ae44:	4b01      	ldr	r3, [pc, #4]	; (800ae4c <__errno+0x8>)
 800ae46:	6818      	ldr	r0, [r3, #0]
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	20000028 	.word	0x20000028

0800ae50 <__libc_init_array>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	4d0d      	ldr	r5, [pc, #52]	; (800ae88 <__libc_init_array+0x38>)
 800ae54:	4c0d      	ldr	r4, [pc, #52]	; (800ae8c <__libc_init_array+0x3c>)
 800ae56:	1b64      	subs	r4, r4, r5
 800ae58:	10a4      	asrs	r4, r4, #2
 800ae5a:	2600      	movs	r6, #0
 800ae5c:	42a6      	cmp	r6, r4
 800ae5e:	d109      	bne.n	800ae74 <__libc_init_array+0x24>
 800ae60:	4d0b      	ldr	r5, [pc, #44]	; (800ae90 <__libc_init_array+0x40>)
 800ae62:	4c0c      	ldr	r4, [pc, #48]	; (800ae94 <__libc_init_array+0x44>)
 800ae64:	f002 fdd2 	bl	800da0c <_init>
 800ae68:	1b64      	subs	r4, r4, r5
 800ae6a:	10a4      	asrs	r4, r4, #2
 800ae6c:	2600      	movs	r6, #0
 800ae6e:	42a6      	cmp	r6, r4
 800ae70:	d105      	bne.n	800ae7e <__libc_init_array+0x2e>
 800ae72:	bd70      	pop	{r4, r5, r6, pc}
 800ae74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae78:	4798      	blx	r3
 800ae7a:	3601      	adds	r6, #1
 800ae7c:	e7ee      	b.n	800ae5c <__libc_init_array+0xc>
 800ae7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae82:	4798      	blx	r3
 800ae84:	3601      	adds	r6, #1
 800ae86:	e7f2      	b.n	800ae6e <__libc_init_array+0x1e>
 800ae88:	0800e5cc 	.word	0x0800e5cc
 800ae8c:	0800e5cc 	.word	0x0800e5cc
 800ae90:	0800e5cc 	.word	0x0800e5cc
 800ae94:	0800e5d0 	.word	0x0800e5d0

0800ae98 <malloc>:
 800ae98:	4b02      	ldr	r3, [pc, #8]	; (800aea4 <malloc+0xc>)
 800ae9a:	4601      	mov	r1, r0
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	f000 b87f 	b.w	800afa0 <_malloc_r>
 800aea2:	bf00      	nop
 800aea4:	20000028 	.word	0x20000028

0800aea8 <free>:
 800aea8:	4b02      	ldr	r3, [pc, #8]	; (800aeb4 <free+0xc>)
 800aeaa:	4601      	mov	r1, r0
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	f000 b80b 	b.w	800aec8 <_free_r>
 800aeb2:	bf00      	nop
 800aeb4:	20000028 	.word	0x20000028

0800aeb8 <memset>:
 800aeb8:	4402      	add	r2, r0
 800aeba:	4603      	mov	r3, r0
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d100      	bne.n	800aec2 <memset+0xa>
 800aec0:	4770      	bx	lr
 800aec2:	f803 1b01 	strb.w	r1, [r3], #1
 800aec6:	e7f9      	b.n	800aebc <memset+0x4>

0800aec8 <_free_r>:
 800aec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeca:	2900      	cmp	r1, #0
 800aecc:	d044      	beq.n	800af58 <_free_r+0x90>
 800aece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed2:	9001      	str	r0, [sp, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f1a1 0404 	sub.w	r4, r1, #4
 800aeda:	bfb8      	it	lt
 800aedc:	18e4      	addlt	r4, r4, r3
 800aede:	f001 ff4f 	bl	800cd80 <__malloc_lock>
 800aee2:	4a1e      	ldr	r2, [pc, #120]	; (800af5c <_free_r+0x94>)
 800aee4:	9801      	ldr	r0, [sp, #4]
 800aee6:	6813      	ldr	r3, [r2, #0]
 800aee8:	b933      	cbnz	r3, 800aef8 <_free_r+0x30>
 800aeea:	6063      	str	r3, [r4, #4]
 800aeec:	6014      	str	r4, [r2, #0]
 800aeee:	b003      	add	sp, #12
 800aef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aef4:	f001 bf4a 	b.w	800cd8c <__malloc_unlock>
 800aef8:	42a3      	cmp	r3, r4
 800aefa:	d908      	bls.n	800af0e <_free_r+0x46>
 800aefc:	6825      	ldr	r5, [r4, #0]
 800aefe:	1961      	adds	r1, r4, r5
 800af00:	428b      	cmp	r3, r1
 800af02:	bf01      	itttt	eq
 800af04:	6819      	ldreq	r1, [r3, #0]
 800af06:	685b      	ldreq	r3, [r3, #4]
 800af08:	1949      	addeq	r1, r1, r5
 800af0a:	6021      	streq	r1, [r4, #0]
 800af0c:	e7ed      	b.n	800aeea <_free_r+0x22>
 800af0e:	461a      	mov	r2, r3
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	b10b      	cbz	r3, 800af18 <_free_r+0x50>
 800af14:	42a3      	cmp	r3, r4
 800af16:	d9fa      	bls.n	800af0e <_free_r+0x46>
 800af18:	6811      	ldr	r1, [r2, #0]
 800af1a:	1855      	adds	r5, r2, r1
 800af1c:	42a5      	cmp	r5, r4
 800af1e:	d10b      	bne.n	800af38 <_free_r+0x70>
 800af20:	6824      	ldr	r4, [r4, #0]
 800af22:	4421      	add	r1, r4
 800af24:	1854      	adds	r4, r2, r1
 800af26:	42a3      	cmp	r3, r4
 800af28:	6011      	str	r1, [r2, #0]
 800af2a:	d1e0      	bne.n	800aeee <_free_r+0x26>
 800af2c:	681c      	ldr	r4, [r3, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	6053      	str	r3, [r2, #4]
 800af32:	4421      	add	r1, r4
 800af34:	6011      	str	r1, [r2, #0]
 800af36:	e7da      	b.n	800aeee <_free_r+0x26>
 800af38:	d902      	bls.n	800af40 <_free_r+0x78>
 800af3a:	230c      	movs	r3, #12
 800af3c:	6003      	str	r3, [r0, #0]
 800af3e:	e7d6      	b.n	800aeee <_free_r+0x26>
 800af40:	6825      	ldr	r5, [r4, #0]
 800af42:	1961      	adds	r1, r4, r5
 800af44:	428b      	cmp	r3, r1
 800af46:	bf04      	itt	eq
 800af48:	6819      	ldreq	r1, [r3, #0]
 800af4a:	685b      	ldreq	r3, [r3, #4]
 800af4c:	6063      	str	r3, [r4, #4]
 800af4e:	bf04      	itt	eq
 800af50:	1949      	addeq	r1, r1, r5
 800af52:	6021      	streq	r1, [r4, #0]
 800af54:	6054      	str	r4, [r2, #4]
 800af56:	e7ca      	b.n	800aeee <_free_r+0x26>
 800af58:	b003      	add	sp, #12
 800af5a:	bd30      	pop	{r4, r5, pc}
 800af5c:	200019a4 	.word	0x200019a4

0800af60 <sbrk_aligned>:
 800af60:	b570      	push	{r4, r5, r6, lr}
 800af62:	4e0e      	ldr	r6, [pc, #56]	; (800af9c <sbrk_aligned+0x3c>)
 800af64:	460c      	mov	r4, r1
 800af66:	6831      	ldr	r1, [r6, #0]
 800af68:	4605      	mov	r5, r0
 800af6a:	b911      	cbnz	r1, 800af72 <sbrk_aligned+0x12>
 800af6c:	f000 fd84 	bl	800ba78 <_sbrk_r>
 800af70:	6030      	str	r0, [r6, #0]
 800af72:	4621      	mov	r1, r4
 800af74:	4628      	mov	r0, r5
 800af76:	f000 fd7f 	bl	800ba78 <_sbrk_r>
 800af7a:	1c43      	adds	r3, r0, #1
 800af7c:	d00a      	beq.n	800af94 <sbrk_aligned+0x34>
 800af7e:	1cc4      	adds	r4, r0, #3
 800af80:	f024 0403 	bic.w	r4, r4, #3
 800af84:	42a0      	cmp	r0, r4
 800af86:	d007      	beq.n	800af98 <sbrk_aligned+0x38>
 800af88:	1a21      	subs	r1, r4, r0
 800af8a:	4628      	mov	r0, r5
 800af8c:	f000 fd74 	bl	800ba78 <_sbrk_r>
 800af90:	3001      	adds	r0, #1
 800af92:	d101      	bne.n	800af98 <sbrk_aligned+0x38>
 800af94:	f04f 34ff 	mov.w	r4, #4294967295
 800af98:	4620      	mov	r0, r4
 800af9a:	bd70      	pop	{r4, r5, r6, pc}
 800af9c:	200019a8 	.word	0x200019a8

0800afa0 <_malloc_r>:
 800afa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa4:	1ccd      	adds	r5, r1, #3
 800afa6:	f025 0503 	bic.w	r5, r5, #3
 800afaa:	3508      	adds	r5, #8
 800afac:	2d0c      	cmp	r5, #12
 800afae:	bf38      	it	cc
 800afb0:	250c      	movcc	r5, #12
 800afb2:	2d00      	cmp	r5, #0
 800afb4:	4607      	mov	r7, r0
 800afb6:	db01      	blt.n	800afbc <_malloc_r+0x1c>
 800afb8:	42a9      	cmp	r1, r5
 800afba:	d905      	bls.n	800afc8 <_malloc_r+0x28>
 800afbc:	230c      	movs	r3, #12
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	2600      	movs	r6, #0
 800afc2:	4630      	mov	r0, r6
 800afc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc8:	4e2e      	ldr	r6, [pc, #184]	; (800b084 <_malloc_r+0xe4>)
 800afca:	f001 fed9 	bl	800cd80 <__malloc_lock>
 800afce:	6833      	ldr	r3, [r6, #0]
 800afd0:	461c      	mov	r4, r3
 800afd2:	bb34      	cbnz	r4, 800b022 <_malloc_r+0x82>
 800afd4:	4629      	mov	r1, r5
 800afd6:	4638      	mov	r0, r7
 800afd8:	f7ff ffc2 	bl	800af60 <sbrk_aligned>
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	4604      	mov	r4, r0
 800afe0:	d14d      	bne.n	800b07e <_malloc_r+0xde>
 800afe2:	6834      	ldr	r4, [r6, #0]
 800afe4:	4626      	mov	r6, r4
 800afe6:	2e00      	cmp	r6, #0
 800afe8:	d140      	bne.n	800b06c <_malloc_r+0xcc>
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	4631      	mov	r1, r6
 800afee:	4638      	mov	r0, r7
 800aff0:	eb04 0803 	add.w	r8, r4, r3
 800aff4:	f000 fd40 	bl	800ba78 <_sbrk_r>
 800aff8:	4580      	cmp	r8, r0
 800affa:	d13a      	bne.n	800b072 <_malloc_r+0xd2>
 800affc:	6821      	ldr	r1, [r4, #0]
 800affe:	3503      	adds	r5, #3
 800b000:	1a6d      	subs	r5, r5, r1
 800b002:	f025 0503 	bic.w	r5, r5, #3
 800b006:	3508      	adds	r5, #8
 800b008:	2d0c      	cmp	r5, #12
 800b00a:	bf38      	it	cc
 800b00c:	250c      	movcc	r5, #12
 800b00e:	4629      	mov	r1, r5
 800b010:	4638      	mov	r0, r7
 800b012:	f7ff ffa5 	bl	800af60 <sbrk_aligned>
 800b016:	3001      	adds	r0, #1
 800b018:	d02b      	beq.n	800b072 <_malloc_r+0xd2>
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	442b      	add	r3, r5
 800b01e:	6023      	str	r3, [r4, #0]
 800b020:	e00e      	b.n	800b040 <_malloc_r+0xa0>
 800b022:	6822      	ldr	r2, [r4, #0]
 800b024:	1b52      	subs	r2, r2, r5
 800b026:	d41e      	bmi.n	800b066 <_malloc_r+0xc6>
 800b028:	2a0b      	cmp	r2, #11
 800b02a:	d916      	bls.n	800b05a <_malloc_r+0xba>
 800b02c:	1961      	adds	r1, r4, r5
 800b02e:	42a3      	cmp	r3, r4
 800b030:	6025      	str	r5, [r4, #0]
 800b032:	bf18      	it	ne
 800b034:	6059      	strne	r1, [r3, #4]
 800b036:	6863      	ldr	r3, [r4, #4]
 800b038:	bf08      	it	eq
 800b03a:	6031      	streq	r1, [r6, #0]
 800b03c:	5162      	str	r2, [r4, r5]
 800b03e:	604b      	str	r3, [r1, #4]
 800b040:	4638      	mov	r0, r7
 800b042:	f104 060b 	add.w	r6, r4, #11
 800b046:	f001 fea1 	bl	800cd8c <__malloc_unlock>
 800b04a:	f026 0607 	bic.w	r6, r6, #7
 800b04e:	1d23      	adds	r3, r4, #4
 800b050:	1af2      	subs	r2, r6, r3
 800b052:	d0b6      	beq.n	800afc2 <_malloc_r+0x22>
 800b054:	1b9b      	subs	r3, r3, r6
 800b056:	50a3      	str	r3, [r4, r2]
 800b058:	e7b3      	b.n	800afc2 <_malloc_r+0x22>
 800b05a:	6862      	ldr	r2, [r4, #4]
 800b05c:	42a3      	cmp	r3, r4
 800b05e:	bf0c      	ite	eq
 800b060:	6032      	streq	r2, [r6, #0]
 800b062:	605a      	strne	r2, [r3, #4]
 800b064:	e7ec      	b.n	800b040 <_malloc_r+0xa0>
 800b066:	4623      	mov	r3, r4
 800b068:	6864      	ldr	r4, [r4, #4]
 800b06a:	e7b2      	b.n	800afd2 <_malloc_r+0x32>
 800b06c:	4634      	mov	r4, r6
 800b06e:	6876      	ldr	r6, [r6, #4]
 800b070:	e7b9      	b.n	800afe6 <_malloc_r+0x46>
 800b072:	230c      	movs	r3, #12
 800b074:	603b      	str	r3, [r7, #0]
 800b076:	4638      	mov	r0, r7
 800b078:	f001 fe88 	bl	800cd8c <__malloc_unlock>
 800b07c:	e7a1      	b.n	800afc2 <_malloc_r+0x22>
 800b07e:	6025      	str	r5, [r4, #0]
 800b080:	e7de      	b.n	800b040 <_malloc_r+0xa0>
 800b082:	bf00      	nop
 800b084:	200019a4 	.word	0x200019a4

0800b088 <__cvt>:
 800b088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b08c:	ec55 4b10 	vmov	r4, r5, d0
 800b090:	2d00      	cmp	r5, #0
 800b092:	460e      	mov	r6, r1
 800b094:	4619      	mov	r1, r3
 800b096:	462b      	mov	r3, r5
 800b098:	bfbb      	ittet	lt
 800b09a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b09e:	461d      	movlt	r5, r3
 800b0a0:	2300      	movge	r3, #0
 800b0a2:	232d      	movlt	r3, #45	; 0x2d
 800b0a4:	700b      	strb	r3, [r1, #0]
 800b0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b0ac:	4691      	mov	r9, r2
 800b0ae:	f023 0820 	bic.w	r8, r3, #32
 800b0b2:	bfbc      	itt	lt
 800b0b4:	4622      	movlt	r2, r4
 800b0b6:	4614      	movlt	r4, r2
 800b0b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0bc:	d005      	beq.n	800b0ca <__cvt+0x42>
 800b0be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b0c2:	d100      	bne.n	800b0c6 <__cvt+0x3e>
 800b0c4:	3601      	adds	r6, #1
 800b0c6:	2102      	movs	r1, #2
 800b0c8:	e000      	b.n	800b0cc <__cvt+0x44>
 800b0ca:	2103      	movs	r1, #3
 800b0cc:	ab03      	add	r3, sp, #12
 800b0ce:	9301      	str	r3, [sp, #4]
 800b0d0:	ab02      	add	r3, sp, #8
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	ec45 4b10 	vmov	d0, r4, r5
 800b0d8:	4653      	mov	r3, sl
 800b0da:	4632      	mov	r2, r6
 800b0dc:	f000 fe30 	bl	800bd40 <_dtoa_r>
 800b0e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0e4:	4607      	mov	r7, r0
 800b0e6:	d102      	bne.n	800b0ee <__cvt+0x66>
 800b0e8:	f019 0f01 	tst.w	r9, #1
 800b0ec:	d022      	beq.n	800b134 <__cvt+0xac>
 800b0ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0f2:	eb07 0906 	add.w	r9, r7, r6
 800b0f6:	d110      	bne.n	800b11a <__cvt+0x92>
 800b0f8:	783b      	ldrb	r3, [r7, #0]
 800b0fa:	2b30      	cmp	r3, #48	; 0x30
 800b0fc:	d10a      	bne.n	800b114 <__cvt+0x8c>
 800b0fe:	2200      	movs	r2, #0
 800b100:	2300      	movs	r3, #0
 800b102:	4620      	mov	r0, r4
 800b104:	4629      	mov	r1, r5
 800b106:	f7f5 fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 800b10a:	b918      	cbnz	r0, 800b114 <__cvt+0x8c>
 800b10c:	f1c6 0601 	rsb	r6, r6, #1
 800b110:	f8ca 6000 	str.w	r6, [sl]
 800b114:	f8da 3000 	ldr.w	r3, [sl]
 800b118:	4499      	add	r9, r3
 800b11a:	2200      	movs	r2, #0
 800b11c:	2300      	movs	r3, #0
 800b11e:	4620      	mov	r0, r4
 800b120:	4629      	mov	r1, r5
 800b122:	f7f5 fcd9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b126:	b108      	cbz	r0, 800b12c <__cvt+0xa4>
 800b128:	f8cd 900c 	str.w	r9, [sp, #12]
 800b12c:	2230      	movs	r2, #48	; 0x30
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	454b      	cmp	r3, r9
 800b132:	d307      	bcc.n	800b144 <__cvt+0xbc>
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b138:	1bdb      	subs	r3, r3, r7
 800b13a:	4638      	mov	r0, r7
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	b004      	add	sp, #16
 800b140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b144:	1c59      	adds	r1, r3, #1
 800b146:	9103      	str	r1, [sp, #12]
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	e7f0      	b.n	800b12e <__cvt+0xa6>

0800b14c <__exponent>:
 800b14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b14e:	4603      	mov	r3, r0
 800b150:	2900      	cmp	r1, #0
 800b152:	bfb8      	it	lt
 800b154:	4249      	neglt	r1, r1
 800b156:	f803 2b02 	strb.w	r2, [r3], #2
 800b15a:	bfb4      	ite	lt
 800b15c:	222d      	movlt	r2, #45	; 0x2d
 800b15e:	222b      	movge	r2, #43	; 0x2b
 800b160:	2909      	cmp	r1, #9
 800b162:	7042      	strb	r2, [r0, #1]
 800b164:	dd2a      	ble.n	800b1bc <__exponent+0x70>
 800b166:	f10d 0407 	add.w	r4, sp, #7
 800b16a:	46a4      	mov	ip, r4
 800b16c:	270a      	movs	r7, #10
 800b16e:	46a6      	mov	lr, r4
 800b170:	460a      	mov	r2, r1
 800b172:	fb91 f6f7 	sdiv	r6, r1, r7
 800b176:	fb07 1516 	mls	r5, r7, r6, r1
 800b17a:	3530      	adds	r5, #48	; 0x30
 800b17c:	2a63      	cmp	r2, #99	; 0x63
 800b17e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b182:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b186:	4631      	mov	r1, r6
 800b188:	dcf1      	bgt.n	800b16e <__exponent+0x22>
 800b18a:	3130      	adds	r1, #48	; 0x30
 800b18c:	f1ae 0502 	sub.w	r5, lr, #2
 800b190:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b194:	1c44      	adds	r4, r0, #1
 800b196:	4629      	mov	r1, r5
 800b198:	4561      	cmp	r1, ip
 800b19a:	d30a      	bcc.n	800b1b2 <__exponent+0x66>
 800b19c:	f10d 0209 	add.w	r2, sp, #9
 800b1a0:	eba2 020e 	sub.w	r2, r2, lr
 800b1a4:	4565      	cmp	r5, ip
 800b1a6:	bf88      	it	hi
 800b1a8:	2200      	movhi	r2, #0
 800b1aa:	4413      	add	r3, r2
 800b1ac:	1a18      	subs	r0, r3, r0
 800b1ae:	b003      	add	sp, #12
 800b1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b1ba:	e7ed      	b.n	800b198 <__exponent+0x4c>
 800b1bc:	2330      	movs	r3, #48	; 0x30
 800b1be:	3130      	adds	r1, #48	; 0x30
 800b1c0:	7083      	strb	r3, [r0, #2]
 800b1c2:	70c1      	strb	r1, [r0, #3]
 800b1c4:	1d03      	adds	r3, r0, #4
 800b1c6:	e7f1      	b.n	800b1ac <__exponent+0x60>

0800b1c8 <_printf_float>:
 800b1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	ed2d 8b02 	vpush	{d8}
 800b1d0:	b08d      	sub	sp, #52	; 0x34
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b1d8:	4616      	mov	r6, r2
 800b1da:	461f      	mov	r7, r3
 800b1dc:	4605      	mov	r5, r0
 800b1de:	f001 fd55 	bl	800cc8c <_localeconv_r>
 800b1e2:	f8d0 a000 	ldr.w	sl, [r0]
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	f7f4 fffa 	bl	80001e0 <strlen>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	9305      	str	r3, [sp, #20]
 800b1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1fc:	3307      	adds	r3, #7
 800b1fe:	f023 0307 	bic.w	r3, r3, #7
 800b202:	f103 0208 	add.w	r2, r3, #8
 800b206:	f8c8 2000 	str.w	r2, [r8]
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b212:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b216:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b21a:	9307      	str	r3, [sp, #28]
 800b21c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b220:	ee08 0a10 	vmov	s16, r0
 800b224:	4b9f      	ldr	r3, [pc, #636]	; (800b4a4 <_printf_float+0x2dc>)
 800b226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b22a:	f04f 32ff 	mov.w	r2, #4294967295
 800b22e:	f7f5 fc85 	bl	8000b3c <__aeabi_dcmpun>
 800b232:	bb88      	cbnz	r0, 800b298 <_printf_float+0xd0>
 800b234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b238:	4b9a      	ldr	r3, [pc, #616]	; (800b4a4 <_printf_float+0x2dc>)
 800b23a:	f04f 32ff 	mov.w	r2, #4294967295
 800b23e:	f7f5 fc5f 	bl	8000b00 <__aeabi_dcmple>
 800b242:	bb48      	cbnz	r0, 800b298 <_printf_float+0xd0>
 800b244:	2200      	movs	r2, #0
 800b246:	2300      	movs	r3, #0
 800b248:	4640      	mov	r0, r8
 800b24a:	4649      	mov	r1, r9
 800b24c:	f7f5 fc4e 	bl	8000aec <__aeabi_dcmplt>
 800b250:	b110      	cbz	r0, 800b258 <_printf_float+0x90>
 800b252:	232d      	movs	r3, #45	; 0x2d
 800b254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b258:	4b93      	ldr	r3, [pc, #588]	; (800b4a8 <_printf_float+0x2e0>)
 800b25a:	4894      	ldr	r0, [pc, #592]	; (800b4ac <_printf_float+0x2e4>)
 800b25c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b260:	bf94      	ite	ls
 800b262:	4698      	movls	r8, r3
 800b264:	4680      	movhi	r8, r0
 800b266:	2303      	movs	r3, #3
 800b268:	6123      	str	r3, [r4, #16]
 800b26a:	9b05      	ldr	r3, [sp, #20]
 800b26c:	f023 0204 	bic.w	r2, r3, #4
 800b270:	6022      	str	r2, [r4, #0]
 800b272:	f04f 0900 	mov.w	r9, #0
 800b276:	9700      	str	r7, [sp, #0]
 800b278:	4633      	mov	r3, r6
 800b27a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b27c:	4621      	mov	r1, r4
 800b27e:	4628      	mov	r0, r5
 800b280:	f000 f9d8 	bl	800b634 <_printf_common>
 800b284:	3001      	adds	r0, #1
 800b286:	f040 8090 	bne.w	800b3aa <_printf_float+0x1e2>
 800b28a:	f04f 30ff 	mov.w	r0, #4294967295
 800b28e:	b00d      	add	sp, #52	; 0x34
 800b290:	ecbd 8b02 	vpop	{d8}
 800b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b298:	4642      	mov	r2, r8
 800b29a:	464b      	mov	r3, r9
 800b29c:	4640      	mov	r0, r8
 800b29e:	4649      	mov	r1, r9
 800b2a0:	f7f5 fc4c 	bl	8000b3c <__aeabi_dcmpun>
 800b2a4:	b140      	cbz	r0, 800b2b8 <_printf_float+0xf0>
 800b2a6:	464b      	mov	r3, r9
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bfbc      	itt	lt
 800b2ac:	232d      	movlt	r3, #45	; 0x2d
 800b2ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b2b2:	487f      	ldr	r0, [pc, #508]	; (800b4b0 <_printf_float+0x2e8>)
 800b2b4:	4b7f      	ldr	r3, [pc, #508]	; (800b4b4 <_printf_float+0x2ec>)
 800b2b6:	e7d1      	b.n	800b25c <_printf_float+0x94>
 800b2b8:	6863      	ldr	r3, [r4, #4]
 800b2ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b2be:	9206      	str	r2, [sp, #24]
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	d13f      	bne.n	800b344 <_printf_float+0x17c>
 800b2c4:	2306      	movs	r3, #6
 800b2c6:	6063      	str	r3, [r4, #4]
 800b2c8:	9b05      	ldr	r3, [sp, #20]
 800b2ca:	6861      	ldr	r1, [r4, #4]
 800b2cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9303      	str	r3, [sp, #12]
 800b2d4:	ab0a      	add	r3, sp, #40	; 0x28
 800b2d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b2da:	ab09      	add	r3, sp, #36	; 0x24
 800b2dc:	ec49 8b10 	vmov	d0, r8, r9
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	6022      	str	r2, [r4, #0]
 800b2e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	f7ff fecd 	bl	800b088 <__cvt>
 800b2ee:	9b06      	ldr	r3, [sp, #24]
 800b2f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2f2:	2b47      	cmp	r3, #71	; 0x47
 800b2f4:	4680      	mov	r8, r0
 800b2f6:	d108      	bne.n	800b30a <_printf_float+0x142>
 800b2f8:	1cc8      	adds	r0, r1, #3
 800b2fa:	db02      	blt.n	800b302 <_printf_float+0x13a>
 800b2fc:	6863      	ldr	r3, [r4, #4]
 800b2fe:	4299      	cmp	r1, r3
 800b300:	dd41      	ble.n	800b386 <_printf_float+0x1be>
 800b302:	f1ab 0b02 	sub.w	fp, fp, #2
 800b306:	fa5f fb8b 	uxtb.w	fp, fp
 800b30a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b30e:	d820      	bhi.n	800b352 <_printf_float+0x18a>
 800b310:	3901      	subs	r1, #1
 800b312:	465a      	mov	r2, fp
 800b314:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b318:	9109      	str	r1, [sp, #36]	; 0x24
 800b31a:	f7ff ff17 	bl	800b14c <__exponent>
 800b31e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b320:	1813      	adds	r3, r2, r0
 800b322:	2a01      	cmp	r2, #1
 800b324:	4681      	mov	r9, r0
 800b326:	6123      	str	r3, [r4, #16]
 800b328:	dc02      	bgt.n	800b330 <_printf_float+0x168>
 800b32a:	6822      	ldr	r2, [r4, #0]
 800b32c:	07d2      	lsls	r2, r2, #31
 800b32e:	d501      	bpl.n	800b334 <_printf_float+0x16c>
 800b330:	3301      	adds	r3, #1
 800b332:	6123      	str	r3, [r4, #16]
 800b334:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d09c      	beq.n	800b276 <_printf_float+0xae>
 800b33c:	232d      	movs	r3, #45	; 0x2d
 800b33e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b342:	e798      	b.n	800b276 <_printf_float+0xae>
 800b344:	9a06      	ldr	r2, [sp, #24]
 800b346:	2a47      	cmp	r2, #71	; 0x47
 800b348:	d1be      	bne.n	800b2c8 <_printf_float+0x100>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1bc      	bne.n	800b2c8 <_printf_float+0x100>
 800b34e:	2301      	movs	r3, #1
 800b350:	e7b9      	b.n	800b2c6 <_printf_float+0xfe>
 800b352:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b356:	d118      	bne.n	800b38a <_printf_float+0x1c2>
 800b358:	2900      	cmp	r1, #0
 800b35a:	6863      	ldr	r3, [r4, #4]
 800b35c:	dd0b      	ble.n	800b376 <_printf_float+0x1ae>
 800b35e:	6121      	str	r1, [r4, #16]
 800b360:	b913      	cbnz	r3, 800b368 <_printf_float+0x1a0>
 800b362:	6822      	ldr	r2, [r4, #0]
 800b364:	07d0      	lsls	r0, r2, #31
 800b366:	d502      	bpl.n	800b36e <_printf_float+0x1a6>
 800b368:	3301      	adds	r3, #1
 800b36a:	440b      	add	r3, r1
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b370:	f04f 0900 	mov.w	r9, #0
 800b374:	e7de      	b.n	800b334 <_printf_float+0x16c>
 800b376:	b913      	cbnz	r3, 800b37e <_printf_float+0x1b6>
 800b378:	6822      	ldr	r2, [r4, #0]
 800b37a:	07d2      	lsls	r2, r2, #31
 800b37c:	d501      	bpl.n	800b382 <_printf_float+0x1ba>
 800b37e:	3302      	adds	r3, #2
 800b380:	e7f4      	b.n	800b36c <_printf_float+0x1a4>
 800b382:	2301      	movs	r3, #1
 800b384:	e7f2      	b.n	800b36c <_printf_float+0x1a4>
 800b386:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b38c:	4299      	cmp	r1, r3
 800b38e:	db05      	blt.n	800b39c <_printf_float+0x1d4>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	6121      	str	r1, [r4, #16]
 800b394:	07d8      	lsls	r0, r3, #31
 800b396:	d5ea      	bpl.n	800b36e <_printf_float+0x1a6>
 800b398:	1c4b      	adds	r3, r1, #1
 800b39a:	e7e7      	b.n	800b36c <_printf_float+0x1a4>
 800b39c:	2900      	cmp	r1, #0
 800b39e:	bfd4      	ite	le
 800b3a0:	f1c1 0202 	rsble	r2, r1, #2
 800b3a4:	2201      	movgt	r2, #1
 800b3a6:	4413      	add	r3, r2
 800b3a8:	e7e0      	b.n	800b36c <_printf_float+0x1a4>
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	055a      	lsls	r2, r3, #21
 800b3ae:	d407      	bmi.n	800b3c0 <_printf_float+0x1f8>
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	4642      	mov	r2, r8
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	47b8      	blx	r7
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	d12c      	bne.n	800b418 <_printf_float+0x250>
 800b3be:	e764      	b.n	800b28a <_printf_float+0xc2>
 800b3c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b3c4:	f240 80e0 	bls.w	800b588 <_printf_float+0x3c0>
 800b3c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f7f5 fb82 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d034      	beq.n	800b442 <_printf_float+0x27a>
 800b3d8:	4a37      	ldr	r2, [pc, #220]	; (800b4b8 <_printf_float+0x2f0>)
 800b3da:	2301      	movs	r3, #1
 800b3dc:	4631      	mov	r1, r6
 800b3de:	4628      	mov	r0, r5
 800b3e0:	47b8      	blx	r7
 800b3e2:	3001      	adds	r0, #1
 800b3e4:	f43f af51 	beq.w	800b28a <_printf_float+0xc2>
 800b3e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	db02      	blt.n	800b3f6 <_printf_float+0x22e>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	07d8      	lsls	r0, r3, #31
 800b3f4:	d510      	bpl.n	800b418 <_printf_float+0x250>
 800b3f6:	ee18 3a10 	vmov	r3, s16
 800b3fa:	4652      	mov	r2, sl
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4628      	mov	r0, r5
 800b400:	47b8      	blx	r7
 800b402:	3001      	adds	r0, #1
 800b404:	f43f af41 	beq.w	800b28a <_printf_float+0xc2>
 800b408:	f04f 0800 	mov.w	r8, #0
 800b40c:	f104 091a 	add.w	r9, r4, #26
 800b410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b412:	3b01      	subs	r3, #1
 800b414:	4543      	cmp	r3, r8
 800b416:	dc09      	bgt.n	800b42c <_printf_float+0x264>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	079b      	lsls	r3, r3, #30
 800b41c:	f100 8105 	bmi.w	800b62a <_printf_float+0x462>
 800b420:	68e0      	ldr	r0, [r4, #12]
 800b422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b424:	4298      	cmp	r0, r3
 800b426:	bfb8      	it	lt
 800b428:	4618      	movlt	r0, r3
 800b42a:	e730      	b.n	800b28e <_printf_float+0xc6>
 800b42c:	2301      	movs	r3, #1
 800b42e:	464a      	mov	r2, r9
 800b430:	4631      	mov	r1, r6
 800b432:	4628      	mov	r0, r5
 800b434:	47b8      	blx	r7
 800b436:	3001      	adds	r0, #1
 800b438:	f43f af27 	beq.w	800b28a <_printf_float+0xc2>
 800b43c:	f108 0801 	add.w	r8, r8, #1
 800b440:	e7e6      	b.n	800b410 <_printf_float+0x248>
 800b442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b444:	2b00      	cmp	r3, #0
 800b446:	dc39      	bgt.n	800b4bc <_printf_float+0x2f4>
 800b448:	4a1b      	ldr	r2, [pc, #108]	; (800b4b8 <_printf_float+0x2f0>)
 800b44a:	2301      	movs	r3, #1
 800b44c:	4631      	mov	r1, r6
 800b44e:	4628      	mov	r0, r5
 800b450:	47b8      	blx	r7
 800b452:	3001      	adds	r0, #1
 800b454:	f43f af19 	beq.w	800b28a <_printf_float+0xc2>
 800b458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b45c:	4313      	orrs	r3, r2
 800b45e:	d102      	bne.n	800b466 <_printf_float+0x29e>
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	07d9      	lsls	r1, r3, #31
 800b464:	d5d8      	bpl.n	800b418 <_printf_float+0x250>
 800b466:	ee18 3a10 	vmov	r3, s16
 800b46a:	4652      	mov	r2, sl
 800b46c:	4631      	mov	r1, r6
 800b46e:	4628      	mov	r0, r5
 800b470:	47b8      	blx	r7
 800b472:	3001      	adds	r0, #1
 800b474:	f43f af09 	beq.w	800b28a <_printf_float+0xc2>
 800b478:	f04f 0900 	mov.w	r9, #0
 800b47c:	f104 0a1a 	add.w	sl, r4, #26
 800b480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b482:	425b      	negs	r3, r3
 800b484:	454b      	cmp	r3, r9
 800b486:	dc01      	bgt.n	800b48c <_printf_float+0x2c4>
 800b488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b48a:	e792      	b.n	800b3b2 <_printf_float+0x1ea>
 800b48c:	2301      	movs	r3, #1
 800b48e:	4652      	mov	r2, sl
 800b490:	4631      	mov	r1, r6
 800b492:	4628      	mov	r0, r5
 800b494:	47b8      	blx	r7
 800b496:	3001      	adds	r0, #1
 800b498:	f43f aef7 	beq.w	800b28a <_printf_float+0xc2>
 800b49c:	f109 0901 	add.w	r9, r9, #1
 800b4a0:	e7ee      	b.n	800b480 <_printf_float+0x2b8>
 800b4a2:	bf00      	nop
 800b4a4:	7fefffff 	.word	0x7fefffff
 800b4a8:	0800e1ec 	.word	0x0800e1ec
 800b4ac:	0800e1f0 	.word	0x0800e1f0
 800b4b0:	0800e1f8 	.word	0x0800e1f8
 800b4b4:	0800e1f4 	.word	0x0800e1f4
 800b4b8:	0800e1fc 	.word	0x0800e1fc
 800b4bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	bfa8      	it	ge
 800b4c4:	461a      	movge	r2, r3
 800b4c6:	2a00      	cmp	r2, #0
 800b4c8:	4691      	mov	r9, r2
 800b4ca:	dc37      	bgt.n	800b53c <_printf_float+0x374>
 800b4cc:	f04f 0b00 	mov.w	fp, #0
 800b4d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4d4:	f104 021a 	add.w	r2, r4, #26
 800b4d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4da:	9305      	str	r3, [sp, #20]
 800b4dc:	eba3 0309 	sub.w	r3, r3, r9
 800b4e0:	455b      	cmp	r3, fp
 800b4e2:	dc33      	bgt.n	800b54c <_printf_float+0x384>
 800b4e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	db3b      	blt.n	800b564 <_printf_float+0x39c>
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	07da      	lsls	r2, r3, #31
 800b4f0:	d438      	bmi.n	800b564 <_printf_float+0x39c>
 800b4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f4:	9a05      	ldr	r2, [sp, #20]
 800b4f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4f8:	1a9a      	subs	r2, r3, r2
 800b4fa:	eba3 0901 	sub.w	r9, r3, r1
 800b4fe:	4591      	cmp	r9, r2
 800b500:	bfa8      	it	ge
 800b502:	4691      	movge	r9, r2
 800b504:	f1b9 0f00 	cmp.w	r9, #0
 800b508:	dc35      	bgt.n	800b576 <_printf_float+0x3ae>
 800b50a:	f04f 0800 	mov.w	r8, #0
 800b50e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b512:	f104 0a1a 	add.w	sl, r4, #26
 800b516:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b51a:	1a9b      	subs	r3, r3, r2
 800b51c:	eba3 0309 	sub.w	r3, r3, r9
 800b520:	4543      	cmp	r3, r8
 800b522:	f77f af79 	ble.w	800b418 <_printf_float+0x250>
 800b526:	2301      	movs	r3, #1
 800b528:	4652      	mov	r2, sl
 800b52a:	4631      	mov	r1, r6
 800b52c:	4628      	mov	r0, r5
 800b52e:	47b8      	blx	r7
 800b530:	3001      	adds	r0, #1
 800b532:	f43f aeaa 	beq.w	800b28a <_printf_float+0xc2>
 800b536:	f108 0801 	add.w	r8, r8, #1
 800b53a:	e7ec      	b.n	800b516 <_printf_float+0x34e>
 800b53c:	4613      	mov	r3, r2
 800b53e:	4631      	mov	r1, r6
 800b540:	4642      	mov	r2, r8
 800b542:	4628      	mov	r0, r5
 800b544:	47b8      	blx	r7
 800b546:	3001      	adds	r0, #1
 800b548:	d1c0      	bne.n	800b4cc <_printf_float+0x304>
 800b54a:	e69e      	b.n	800b28a <_printf_float+0xc2>
 800b54c:	2301      	movs	r3, #1
 800b54e:	4631      	mov	r1, r6
 800b550:	4628      	mov	r0, r5
 800b552:	9205      	str	r2, [sp, #20]
 800b554:	47b8      	blx	r7
 800b556:	3001      	adds	r0, #1
 800b558:	f43f ae97 	beq.w	800b28a <_printf_float+0xc2>
 800b55c:	9a05      	ldr	r2, [sp, #20]
 800b55e:	f10b 0b01 	add.w	fp, fp, #1
 800b562:	e7b9      	b.n	800b4d8 <_printf_float+0x310>
 800b564:	ee18 3a10 	vmov	r3, s16
 800b568:	4652      	mov	r2, sl
 800b56a:	4631      	mov	r1, r6
 800b56c:	4628      	mov	r0, r5
 800b56e:	47b8      	blx	r7
 800b570:	3001      	adds	r0, #1
 800b572:	d1be      	bne.n	800b4f2 <_printf_float+0x32a>
 800b574:	e689      	b.n	800b28a <_printf_float+0xc2>
 800b576:	9a05      	ldr	r2, [sp, #20]
 800b578:	464b      	mov	r3, r9
 800b57a:	4442      	add	r2, r8
 800b57c:	4631      	mov	r1, r6
 800b57e:	4628      	mov	r0, r5
 800b580:	47b8      	blx	r7
 800b582:	3001      	adds	r0, #1
 800b584:	d1c1      	bne.n	800b50a <_printf_float+0x342>
 800b586:	e680      	b.n	800b28a <_printf_float+0xc2>
 800b588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b58a:	2a01      	cmp	r2, #1
 800b58c:	dc01      	bgt.n	800b592 <_printf_float+0x3ca>
 800b58e:	07db      	lsls	r3, r3, #31
 800b590:	d538      	bpl.n	800b604 <_printf_float+0x43c>
 800b592:	2301      	movs	r3, #1
 800b594:	4642      	mov	r2, r8
 800b596:	4631      	mov	r1, r6
 800b598:	4628      	mov	r0, r5
 800b59a:	47b8      	blx	r7
 800b59c:	3001      	adds	r0, #1
 800b59e:	f43f ae74 	beq.w	800b28a <_printf_float+0xc2>
 800b5a2:	ee18 3a10 	vmov	r3, s16
 800b5a6:	4652      	mov	r2, sl
 800b5a8:	4631      	mov	r1, r6
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	47b8      	blx	r7
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	f43f ae6b 	beq.w	800b28a <_printf_float+0xc2>
 800b5b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f7f5 fa8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5c0:	b9d8      	cbnz	r0, 800b5fa <_printf_float+0x432>
 800b5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c4:	f108 0201 	add.w	r2, r8, #1
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b8      	blx	r7
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	d10e      	bne.n	800b5f2 <_printf_float+0x42a>
 800b5d4:	e659      	b.n	800b28a <_printf_float+0xc2>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4652      	mov	r2, sl
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4628      	mov	r0, r5
 800b5de:	47b8      	blx	r7
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	f43f ae52 	beq.w	800b28a <_printf_float+0xc2>
 800b5e6:	f108 0801 	add.w	r8, r8, #1
 800b5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	4543      	cmp	r3, r8
 800b5f0:	dcf1      	bgt.n	800b5d6 <_printf_float+0x40e>
 800b5f2:	464b      	mov	r3, r9
 800b5f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5f8:	e6dc      	b.n	800b3b4 <_printf_float+0x1ec>
 800b5fa:	f04f 0800 	mov.w	r8, #0
 800b5fe:	f104 0a1a 	add.w	sl, r4, #26
 800b602:	e7f2      	b.n	800b5ea <_printf_float+0x422>
 800b604:	2301      	movs	r3, #1
 800b606:	4642      	mov	r2, r8
 800b608:	e7df      	b.n	800b5ca <_printf_float+0x402>
 800b60a:	2301      	movs	r3, #1
 800b60c:	464a      	mov	r2, r9
 800b60e:	4631      	mov	r1, r6
 800b610:	4628      	mov	r0, r5
 800b612:	47b8      	blx	r7
 800b614:	3001      	adds	r0, #1
 800b616:	f43f ae38 	beq.w	800b28a <_printf_float+0xc2>
 800b61a:	f108 0801 	add.w	r8, r8, #1
 800b61e:	68e3      	ldr	r3, [r4, #12]
 800b620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b622:	1a5b      	subs	r3, r3, r1
 800b624:	4543      	cmp	r3, r8
 800b626:	dcf0      	bgt.n	800b60a <_printf_float+0x442>
 800b628:	e6fa      	b.n	800b420 <_printf_float+0x258>
 800b62a:	f04f 0800 	mov.w	r8, #0
 800b62e:	f104 0919 	add.w	r9, r4, #25
 800b632:	e7f4      	b.n	800b61e <_printf_float+0x456>

0800b634 <_printf_common>:
 800b634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b638:	4616      	mov	r6, r2
 800b63a:	4699      	mov	r9, r3
 800b63c:	688a      	ldr	r2, [r1, #8]
 800b63e:	690b      	ldr	r3, [r1, #16]
 800b640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b644:	4293      	cmp	r3, r2
 800b646:	bfb8      	it	lt
 800b648:	4613      	movlt	r3, r2
 800b64a:	6033      	str	r3, [r6, #0]
 800b64c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b650:	4607      	mov	r7, r0
 800b652:	460c      	mov	r4, r1
 800b654:	b10a      	cbz	r2, 800b65a <_printf_common+0x26>
 800b656:	3301      	adds	r3, #1
 800b658:	6033      	str	r3, [r6, #0]
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	0699      	lsls	r1, r3, #26
 800b65e:	bf42      	ittt	mi
 800b660:	6833      	ldrmi	r3, [r6, #0]
 800b662:	3302      	addmi	r3, #2
 800b664:	6033      	strmi	r3, [r6, #0]
 800b666:	6825      	ldr	r5, [r4, #0]
 800b668:	f015 0506 	ands.w	r5, r5, #6
 800b66c:	d106      	bne.n	800b67c <_printf_common+0x48>
 800b66e:	f104 0a19 	add.w	sl, r4, #25
 800b672:	68e3      	ldr	r3, [r4, #12]
 800b674:	6832      	ldr	r2, [r6, #0]
 800b676:	1a9b      	subs	r3, r3, r2
 800b678:	42ab      	cmp	r3, r5
 800b67a:	dc26      	bgt.n	800b6ca <_printf_common+0x96>
 800b67c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b680:	1e13      	subs	r3, r2, #0
 800b682:	6822      	ldr	r2, [r4, #0]
 800b684:	bf18      	it	ne
 800b686:	2301      	movne	r3, #1
 800b688:	0692      	lsls	r2, r2, #26
 800b68a:	d42b      	bmi.n	800b6e4 <_printf_common+0xb0>
 800b68c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b690:	4649      	mov	r1, r9
 800b692:	4638      	mov	r0, r7
 800b694:	47c0      	blx	r8
 800b696:	3001      	adds	r0, #1
 800b698:	d01e      	beq.n	800b6d8 <_printf_common+0xa4>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	68e5      	ldr	r5, [r4, #12]
 800b69e:	6832      	ldr	r2, [r6, #0]
 800b6a0:	f003 0306 	and.w	r3, r3, #6
 800b6a4:	2b04      	cmp	r3, #4
 800b6a6:	bf08      	it	eq
 800b6a8:	1aad      	subeq	r5, r5, r2
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	6922      	ldr	r2, [r4, #16]
 800b6ae:	bf0c      	ite	eq
 800b6b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6b4:	2500      	movne	r5, #0
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	bfc4      	itt	gt
 800b6ba:	1a9b      	subgt	r3, r3, r2
 800b6bc:	18ed      	addgt	r5, r5, r3
 800b6be:	2600      	movs	r6, #0
 800b6c0:	341a      	adds	r4, #26
 800b6c2:	42b5      	cmp	r5, r6
 800b6c4:	d11a      	bne.n	800b6fc <_printf_common+0xc8>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	e008      	b.n	800b6dc <_printf_common+0xa8>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	4652      	mov	r2, sl
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	47c0      	blx	r8
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d103      	bne.n	800b6e0 <_printf_common+0xac>
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	e7c6      	b.n	800b672 <_printf_common+0x3e>
 800b6e4:	18e1      	adds	r1, r4, r3
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	2030      	movs	r0, #48	; 0x30
 800b6ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6ee:	4422      	add	r2, r4
 800b6f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6f8:	3302      	adds	r3, #2
 800b6fa:	e7c7      	b.n	800b68c <_printf_common+0x58>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	4622      	mov	r2, r4
 800b700:	4649      	mov	r1, r9
 800b702:	4638      	mov	r0, r7
 800b704:	47c0      	blx	r8
 800b706:	3001      	adds	r0, #1
 800b708:	d0e6      	beq.n	800b6d8 <_printf_common+0xa4>
 800b70a:	3601      	adds	r6, #1
 800b70c:	e7d9      	b.n	800b6c2 <_printf_common+0x8e>
	...

0800b710 <_printf_i>:
 800b710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	7e0f      	ldrb	r7, [r1, #24]
 800b716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b718:	2f78      	cmp	r7, #120	; 0x78
 800b71a:	4691      	mov	r9, r2
 800b71c:	4680      	mov	r8, r0
 800b71e:	460c      	mov	r4, r1
 800b720:	469a      	mov	sl, r3
 800b722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b726:	d807      	bhi.n	800b738 <_printf_i+0x28>
 800b728:	2f62      	cmp	r7, #98	; 0x62
 800b72a:	d80a      	bhi.n	800b742 <_printf_i+0x32>
 800b72c:	2f00      	cmp	r7, #0
 800b72e:	f000 80d8 	beq.w	800b8e2 <_printf_i+0x1d2>
 800b732:	2f58      	cmp	r7, #88	; 0x58
 800b734:	f000 80a3 	beq.w	800b87e <_printf_i+0x16e>
 800b738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b73c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b740:	e03a      	b.n	800b7b8 <_printf_i+0xa8>
 800b742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b746:	2b15      	cmp	r3, #21
 800b748:	d8f6      	bhi.n	800b738 <_printf_i+0x28>
 800b74a:	a101      	add	r1, pc, #4	; (adr r1, 800b750 <_printf_i+0x40>)
 800b74c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b750:	0800b7a9 	.word	0x0800b7a9
 800b754:	0800b7bd 	.word	0x0800b7bd
 800b758:	0800b739 	.word	0x0800b739
 800b75c:	0800b739 	.word	0x0800b739
 800b760:	0800b739 	.word	0x0800b739
 800b764:	0800b739 	.word	0x0800b739
 800b768:	0800b7bd 	.word	0x0800b7bd
 800b76c:	0800b739 	.word	0x0800b739
 800b770:	0800b739 	.word	0x0800b739
 800b774:	0800b739 	.word	0x0800b739
 800b778:	0800b739 	.word	0x0800b739
 800b77c:	0800b8c9 	.word	0x0800b8c9
 800b780:	0800b7ed 	.word	0x0800b7ed
 800b784:	0800b8ab 	.word	0x0800b8ab
 800b788:	0800b739 	.word	0x0800b739
 800b78c:	0800b739 	.word	0x0800b739
 800b790:	0800b8eb 	.word	0x0800b8eb
 800b794:	0800b739 	.word	0x0800b739
 800b798:	0800b7ed 	.word	0x0800b7ed
 800b79c:	0800b739 	.word	0x0800b739
 800b7a0:	0800b739 	.word	0x0800b739
 800b7a4:	0800b8b3 	.word	0x0800b8b3
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	1d1a      	adds	r2, r3, #4
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	602a      	str	r2, [r5, #0]
 800b7b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e0a3      	b.n	800b904 <_printf_i+0x1f4>
 800b7bc:	6820      	ldr	r0, [r4, #0]
 800b7be:	6829      	ldr	r1, [r5, #0]
 800b7c0:	0606      	lsls	r6, r0, #24
 800b7c2:	f101 0304 	add.w	r3, r1, #4
 800b7c6:	d50a      	bpl.n	800b7de <_printf_i+0xce>
 800b7c8:	680e      	ldr	r6, [r1, #0]
 800b7ca:	602b      	str	r3, [r5, #0]
 800b7cc:	2e00      	cmp	r6, #0
 800b7ce:	da03      	bge.n	800b7d8 <_printf_i+0xc8>
 800b7d0:	232d      	movs	r3, #45	; 0x2d
 800b7d2:	4276      	negs	r6, r6
 800b7d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7d8:	485e      	ldr	r0, [pc, #376]	; (800b954 <_printf_i+0x244>)
 800b7da:	230a      	movs	r3, #10
 800b7dc:	e019      	b.n	800b812 <_printf_i+0x102>
 800b7de:	680e      	ldr	r6, [r1, #0]
 800b7e0:	602b      	str	r3, [r5, #0]
 800b7e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7e6:	bf18      	it	ne
 800b7e8:	b236      	sxthne	r6, r6
 800b7ea:	e7ef      	b.n	800b7cc <_printf_i+0xbc>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	6820      	ldr	r0, [r4, #0]
 800b7f0:	1d19      	adds	r1, r3, #4
 800b7f2:	6029      	str	r1, [r5, #0]
 800b7f4:	0601      	lsls	r1, r0, #24
 800b7f6:	d501      	bpl.n	800b7fc <_printf_i+0xec>
 800b7f8:	681e      	ldr	r6, [r3, #0]
 800b7fa:	e002      	b.n	800b802 <_printf_i+0xf2>
 800b7fc:	0646      	lsls	r6, r0, #25
 800b7fe:	d5fb      	bpl.n	800b7f8 <_printf_i+0xe8>
 800b800:	881e      	ldrh	r6, [r3, #0]
 800b802:	4854      	ldr	r0, [pc, #336]	; (800b954 <_printf_i+0x244>)
 800b804:	2f6f      	cmp	r7, #111	; 0x6f
 800b806:	bf0c      	ite	eq
 800b808:	2308      	moveq	r3, #8
 800b80a:	230a      	movne	r3, #10
 800b80c:	2100      	movs	r1, #0
 800b80e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b812:	6865      	ldr	r5, [r4, #4]
 800b814:	60a5      	str	r5, [r4, #8]
 800b816:	2d00      	cmp	r5, #0
 800b818:	bfa2      	ittt	ge
 800b81a:	6821      	ldrge	r1, [r4, #0]
 800b81c:	f021 0104 	bicge.w	r1, r1, #4
 800b820:	6021      	strge	r1, [r4, #0]
 800b822:	b90e      	cbnz	r6, 800b828 <_printf_i+0x118>
 800b824:	2d00      	cmp	r5, #0
 800b826:	d04d      	beq.n	800b8c4 <_printf_i+0x1b4>
 800b828:	4615      	mov	r5, r2
 800b82a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b82e:	fb03 6711 	mls	r7, r3, r1, r6
 800b832:	5dc7      	ldrb	r7, [r0, r7]
 800b834:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b838:	4637      	mov	r7, r6
 800b83a:	42bb      	cmp	r3, r7
 800b83c:	460e      	mov	r6, r1
 800b83e:	d9f4      	bls.n	800b82a <_printf_i+0x11a>
 800b840:	2b08      	cmp	r3, #8
 800b842:	d10b      	bne.n	800b85c <_printf_i+0x14c>
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	07de      	lsls	r6, r3, #31
 800b848:	d508      	bpl.n	800b85c <_printf_i+0x14c>
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	6861      	ldr	r1, [r4, #4]
 800b84e:	4299      	cmp	r1, r3
 800b850:	bfde      	ittt	le
 800b852:	2330      	movle	r3, #48	; 0x30
 800b854:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b858:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b85c:	1b52      	subs	r2, r2, r5
 800b85e:	6122      	str	r2, [r4, #16]
 800b860:	f8cd a000 	str.w	sl, [sp]
 800b864:	464b      	mov	r3, r9
 800b866:	aa03      	add	r2, sp, #12
 800b868:	4621      	mov	r1, r4
 800b86a:	4640      	mov	r0, r8
 800b86c:	f7ff fee2 	bl	800b634 <_printf_common>
 800b870:	3001      	adds	r0, #1
 800b872:	d14c      	bne.n	800b90e <_printf_i+0x1fe>
 800b874:	f04f 30ff 	mov.w	r0, #4294967295
 800b878:	b004      	add	sp, #16
 800b87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b87e:	4835      	ldr	r0, [pc, #212]	; (800b954 <_printf_i+0x244>)
 800b880:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b884:	6829      	ldr	r1, [r5, #0]
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	f851 6b04 	ldr.w	r6, [r1], #4
 800b88c:	6029      	str	r1, [r5, #0]
 800b88e:	061d      	lsls	r5, r3, #24
 800b890:	d514      	bpl.n	800b8bc <_printf_i+0x1ac>
 800b892:	07df      	lsls	r7, r3, #31
 800b894:	bf44      	itt	mi
 800b896:	f043 0320 	orrmi.w	r3, r3, #32
 800b89a:	6023      	strmi	r3, [r4, #0]
 800b89c:	b91e      	cbnz	r6, 800b8a6 <_printf_i+0x196>
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	f023 0320 	bic.w	r3, r3, #32
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	2310      	movs	r3, #16
 800b8a8:	e7b0      	b.n	800b80c <_printf_i+0xfc>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	f043 0320 	orr.w	r3, r3, #32
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	2378      	movs	r3, #120	; 0x78
 800b8b4:	4828      	ldr	r0, [pc, #160]	; (800b958 <_printf_i+0x248>)
 800b8b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8ba:	e7e3      	b.n	800b884 <_printf_i+0x174>
 800b8bc:	0659      	lsls	r1, r3, #25
 800b8be:	bf48      	it	mi
 800b8c0:	b2b6      	uxthmi	r6, r6
 800b8c2:	e7e6      	b.n	800b892 <_printf_i+0x182>
 800b8c4:	4615      	mov	r5, r2
 800b8c6:	e7bb      	b.n	800b840 <_printf_i+0x130>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	6826      	ldr	r6, [r4, #0]
 800b8cc:	6961      	ldr	r1, [r4, #20]
 800b8ce:	1d18      	adds	r0, r3, #4
 800b8d0:	6028      	str	r0, [r5, #0]
 800b8d2:	0635      	lsls	r5, r6, #24
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	d501      	bpl.n	800b8dc <_printf_i+0x1cc>
 800b8d8:	6019      	str	r1, [r3, #0]
 800b8da:	e002      	b.n	800b8e2 <_printf_i+0x1d2>
 800b8dc:	0670      	lsls	r0, r6, #25
 800b8de:	d5fb      	bpl.n	800b8d8 <_printf_i+0x1c8>
 800b8e0:	8019      	strh	r1, [r3, #0]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6123      	str	r3, [r4, #16]
 800b8e6:	4615      	mov	r5, r2
 800b8e8:	e7ba      	b.n	800b860 <_printf_i+0x150>
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	1d1a      	adds	r2, r3, #4
 800b8ee:	602a      	str	r2, [r5, #0]
 800b8f0:	681d      	ldr	r5, [r3, #0]
 800b8f2:	6862      	ldr	r2, [r4, #4]
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f7f4 fc7a 	bl	80001f0 <memchr>
 800b8fc:	b108      	cbz	r0, 800b902 <_printf_i+0x1f2>
 800b8fe:	1b40      	subs	r0, r0, r5
 800b900:	6060      	str	r0, [r4, #4]
 800b902:	6863      	ldr	r3, [r4, #4]
 800b904:	6123      	str	r3, [r4, #16]
 800b906:	2300      	movs	r3, #0
 800b908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b90c:	e7a8      	b.n	800b860 <_printf_i+0x150>
 800b90e:	6923      	ldr	r3, [r4, #16]
 800b910:	462a      	mov	r2, r5
 800b912:	4649      	mov	r1, r9
 800b914:	4640      	mov	r0, r8
 800b916:	47d0      	blx	sl
 800b918:	3001      	adds	r0, #1
 800b91a:	d0ab      	beq.n	800b874 <_printf_i+0x164>
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	079b      	lsls	r3, r3, #30
 800b920:	d413      	bmi.n	800b94a <_printf_i+0x23a>
 800b922:	68e0      	ldr	r0, [r4, #12]
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	4298      	cmp	r0, r3
 800b928:	bfb8      	it	lt
 800b92a:	4618      	movlt	r0, r3
 800b92c:	e7a4      	b.n	800b878 <_printf_i+0x168>
 800b92e:	2301      	movs	r3, #1
 800b930:	4632      	mov	r2, r6
 800b932:	4649      	mov	r1, r9
 800b934:	4640      	mov	r0, r8
 800b936:	47d0      	blx	sl
 800b938:	3001      	adds	r0, #1
 800b93a:	d09b      	beq.n	800b874 <_printf_i+0x164>
 800b93c:	3501      	adds	r5, #1
 800b93e:	68e3      	ldr	r3, [r4, #12]
 800b940:	9903      	ldr	r1, [sp, #12]
 800b942:	1a5b      	subs	r3, r3, r1
 800b944:	42ab      	cmp	r3, r5
 800b946:	dcf2      	bgt.n	800b92e <_printf_i+0x21e>
 800b948:	e7eb      	b.n	800b922 <_printf_i+0x212>
 800b94a:	2500      	movs	r5, #0
 800b94c:	f104 0619 	add.w	r6, r4, #25
 800b950:	e7f5      	b.n	800b93e <_printf_i+0x22e>
 800b952:	bf00      	nop
 800b954:	0800e1fe 	.word	0x0800e1fe
 800b958:	0800e20f 	.word	0x0800e20f

0800b95c <iprintf>:
 800b95c:	b40f      	push	{r0, r1, r2, r3}
 800b95e:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <iprintf+0x2c>)
 800b960:	b513      	push	{r0, r1, r4, lr}
 800b962:	681c      	ldr	r4, [r3, #0]
 800b964:	b124      	cbz	r4, 800b970 <iprintf+0x14>
 800b966:	69a3      	ldr	r3, [r4, #24]
 800b968:	b913      	cbnz	r3, 800b970 <iprintf+0x14>
 800b96a:	4620      	mov	r0, r4
 800b96c:	f001 f8f0 	bl	800cb50 <__sinit>
 800b970:	ab05      	add	r3, sp, #20
 800b972:	9a04      	ldr	r2, [sp, #16]
 800b974:	68a1      	ldr	r1, [r4, #8]
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	4620      	mov	r0, r4
 800b97a:	f001 fdd1 	bl	800d520 <_vfiprintf_r>
 800b97e:	b002      	add	sp, #8
 800b980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b984:	b004      	add	sp, #16
 800b986:	4770      	bx	lr
 800b988:	20000028 	.word	0x20000028

0800b98c <_puts_r>:
 800b98c:	b570      	push	{r4, r5, r6, lr}
 800b98e:	460e      	mov	r6, r1
 800b990:	4605      	mov	r5, r0
 800b992:	b118      	cbz	r0, 800b99c <_puts_r+0x10>
 800b994:	6983      	ldr	r3, [r0, #24]
 800b996:	b90b      	cbnz	r3, 800b99c <_puts_r+0x10>
 800b998:	f001 f8da 	bl	800cb50 <__sinit>
 800b99c:	69ab      	ldr	r3, [r5, #24]
 800b99e:	68ac      	ldr	r4, [r5, #8]
 800b9a0:	b913      	cbnz	r3, 800b9a8 <_puts_r+0x1c>
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	f001 f8d4 	bl	800cb50 <__sinit>
 800b9a8:	4b2c      	ldr	r3, [pc, #176]	; (800ba5c <_puts_r+0xd0>)
 800b9aa:	429c      	cmp	r4, r3
 800b9ac:	d120      	bne.n	800b9f0 <_puts_r+0x64>
 800b9ae:	686c      	ldr	r4, [r5, #4]
 800b9b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9b2:	07db      	lsls	r3, r3, #31
 800b9b4:	d405      	bmi.n	800b9c2 <_puts_r+0x36>
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	0598      	lsls	r0, r3, #22
 800b9ba:	d402      	bmi.n	800b9c2 <_puts_r+0x36>
 800b9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9be:	f001 f96a 	bl	800cc96 <__retarget_lock_acquire_recursive>
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	0719      	lsls	r1, r3, #28
 800b9c6:	d51d      	bpl.n	800ba04 <_puts_r+0x78>
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	b1db      	cbz	r3, 800ba04 <_puts_r+0x78>
 800b9cc:	3e01      	subs	r6, #1
 800b9ce:	68a3      	ldr	r3, [r4, #8]
 800b9d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	60a3      	str	r3, [r4, #8]
 800b9d8:	bb39      	cbnz	r1, 800ba2a <_puts_r+0x9e>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	da38      	bge.n	800ba50 <_puts_r+0xc4>
 800b9de:	4622      	mov	r2, r4
 800b9e0:	210a      	movs	r1, #10
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f000 f860 	bl	800baa8 <__swbuf_r>
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	d011      	beq.n	800ba10 <_puts_r+0x84>
 800b9ec:	250a      	movs	r5, #10
 800b9ee:	e011      	b.n	800ba14 <_puts_r+0x88>
 800b9f0:	4b1b      	ldr	r3, [pc, #108]	; (800ba60 <_puts_r+0xd4>)
 800b9f2:	429c      	cmp	r4, r3
 800b9f4:	d101      	bne.n	800b9fa <_puts_r+0x6e>
 800b9f6:	68ac      	ldr	r4, [r5, #8]
 800b9f8:	e7da      	b.n	800b9b0 <_puts_r+0x24>
 800b9fa:	4b1a      	ldr	r3, [pc, #104]	; (800ba64 <_puts_r+0xd8>)
 800b9fc:	429c      	cmp	r4, r3
 800b9fe:	bf08      	it	eq
 800ba00:	68ec      	ldreq	r4, [r5, #12]
 800ba02:	e7d5      	b.n	800b9b0 <_puts_r+0x24>
 800ba04:	4621      	mov	r1, r4
 800ba06:	4628      	mov	r0, r5
 800ba08:	f000 f8a0 	bl	800bb4c <__swsetup_r>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d0dd      	beq.n	800b9cc <_puts_r+0x40>
 800ba10:	f04f 35ff 	mov.w	r5, #4294967295
 800ba14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba16:	07da      	lsls	r2, r3, #31
 800ba18:	d405      	bmi.n	800ba26 <_puts_r+0x9a>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	059b      	lsls	r3, r3, #22
 800ba1e:	d402      	bmi.n	800ba26 <_puts_r+0x9a>
 800ba20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba22:	f001 f939 	bl	800cc98 <__retarget_lock_release_recursive>
 800ba26:	4628      	mov	r0, r5
 800ba28:	bd70      	pop	{r4, r5, r6, pc}
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	da04      	bge.n	800ba38 <_puts_r+0xac>
 800ba2e:	69a2      	ldr	r2, [r4, #24]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	dc06      	bgt.n	800ba42 <_puts_r+0xb6>
 800ba34:	290a      	cmp	r1, #10
 800ba36:	d004      	beq.n	800ba42 <_puts_r+0xb6>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	6022      	str	r2, [r4, #0]
 800ba3e:	7019      	strb	r1, [r3, #0]
 800ba40:	e7c5      	b.n	800b9ce <_puts_r+0x42>
 800ba42:	4622      	mov	r2, r4
 800ba44:	4628      	mov	r0, r5
 800ba46:	f000 f82f 	bl	800baa8 <__swbuf_r>
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	d1bf      	bne.n	800b9ce <_puts_r+0x42>
 800ba4e:	e7df      	b.n	800ba10 <_puts_r+0x84>
 800ba50:	6823      	ldr	r3, [r4, #0]
 800ba52:	250a      	movs	r5, #10
 800ba54:	1c5a      	adds	r2, r3, #1
 800ba56:	6022      	str	r2, [r4, #0]
 800ba58:	701d      	strb	r5, [r3, #0]
 800ba5a:	e7db      	b.n	800ba14 <_puts_r+0x88>
 800ba5c:	0800e2d0 	.word	0x0800e2d0
 800ba60:	0800e2f0 	.word	0x0800e2f0
 800ba64:	0800e2b0 	.word	0x0800e2b0

0800ba68 <puts>:
 800ba68:	4b02      	ldr	r3, [pc, #8]	; (800ba74 <puts+0xc>)
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	6818      	ldr	r0, [r3, #0]
 800ba6e:	f7ff bf8d 	b.w	800b98c <_puts_r>
 800ba72:	bf00      	nop
 800ba74:	20000028 	.word	0x20000028

0800ba78 <_sbrk_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d06      	ldr	r5, [pc, #24]	; (800ba94 <_sbrk_r+0x1c>)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	602b      	str	r3, [r5, #0]
 800ba84:	f7f7 f852 	bl	8002b2c <_sbrk>
 800ba88:	1c43      	adds	r3, r0, #1
 800ba8a:	d102      	bne.n	800ba92 <_sbrk_r+0x1a>
 800ba8c:	682b      	ldr	r3, [r5, #0]
 800ba8e:	b103      	cbz	r3, 800ba92 <_sbrk_r+0x1a>
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	bd38      	pop	{r3, r4, r5, pc}
 800ba94:	200019b0 	.word	0x200019b0

0800ba98 <strcpy>:
 800ba98:	4603      	mov	r3, r0
 800ba9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba9e:	f803 2b01 	strb.w	r2, [r3], #1
 800baa2:	2a00      	cmp	r2, #0
 800baa4:	d1f9      	bne.n	800ba9a <strcpy+0x2>
 800baa6:	4770      	bx	lr

0800baa8 <__swbuf_r>:
 800baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baaa:	460e      	mov	r6, r1
 800baac:	4614      	mov	r4, r2
 800baae:	4605      	mov	r5, r0
 800bab0:	b118      	cbz	r0, 800baba <__swbuf_r+0x12>
 800bab2:	6983      	ldr	r3, [r0, #24]
 800bab4:	b90b      	cbnz	r3, 800baba <__swbuf_r+0x12>
 800bab6:	f001 f84b 	bl	800cb50 <__sinit>
 800baba:	4b21      	ldr	r3, [pc, #132]	; (800bb40 <__swbuf_r+0x98>)
 800babc:	429c      	cmp	r4, r3
 800babe:	d12b      	bne.n	800bb18 <__swbuf_r+0x70>
 800bac0:	686c      	ldr	r4, [r5, #4]
 800bac2:	69a3      	ldr	r3, [r4, #24]
 800bac4:	60a3      	str	r3, [r4, #8]
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	071a      	lsls	r2, r3, #28
 800baca:	d52f      	bpl.n	800bb2c <__swbuf_r+0x84>
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	b36b      	cbz	r3, 800bb2c <__swbuf_r+0x84>
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	6820      	ldr	r0, [r4, #0]
 800bad4:	1ac0      	subs	r0, r0, r3
 800bad6:	6963      	ldr	r3, [r4, #20]
 800bad8:	b2f6      	uxtb	r6, r6
 800bada:	4283      	cmp	r3, r0
 800badc:	4637      	mov	r7, r6
 800bade:	dc04      	bgt.n	800baea <__swbuf_r+0x42>
 800bae0:	4621      	mov	r1, r4
 800bae2:	4628      	mov	r0, r5
 800bae4:	f000 ffa0 	bl	800ca28 <_fflush_r>
 800bae8:	bb30      	cbnz	r0, 800bb38 <__swbuf_r+0x90>
 800baea:	68a3      	ldr	r3, [r4, #8]
 800baec:	3b01      	subs	r3, #1
 800baee:	60a3      	str	r3, [r4, #8]
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	1c5a      	adds	r2, r3, #1
 800baf4:	6022      	str	r2, [r4, #0]
 800baf6:	701e      	strb	r6, [r3, #0]
 800baf8:	6963      	ldr	r3, [r4, #20]
 800bafa:	3001      	adds	r0, #1
 800bafc:	4283      	cmp	r3, r0
 800bafe:	d004      	beq.n	800bb0a <__swbuf_r+0x62>
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	07db      	lsls	r3, r3, #31
 800bb04:	d506      	bpl.n	800bb14 <__swbuf_r+0x6c>
 800bb06:	2e0a      	cmp	r6, #10
 800bb08:	d104      	bne.n	800bb14 <__swbuf_r+0x6c>
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	f000 ff8b 	bl	800ca28 <_fflush_r>
 800bb12:	b988      	cbnz	r0, 800bb38 <__swbuf_r+0x90>
 800bb14:	4638      	mov	r0, r7
 800bb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb18:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <__swbuf_r+0x9c>)
 800bb1a:	429c      	cmp	r4, r3
 800bb1c:	d101      	bne.n	800bb22 <__swbuf_r+0x7a>
 800bb1e:	68ac      	ldr	r4, [r5, #8]
 800bb20:	e7cf      	b.n	800bac2 <__swbuf_r+0x1a>
 800bb22:	4b09      	ldr	r3, [pc, #36]	; (800bb48 <__swbuf_r+0xa0>)
 800bb24:	429c      	cmp	r4, r3
 800bb26:	bf08      	it	eq
 800bb28:	68ec      	ldreq	r4, [r5, #12]
 800bb2a:	e7ca      	b.n	800bac2 <__swbuf_r+0x1a>
 800bb2c:	4621      	mov	r1, r4
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f000 f80c 	bl	800bb4c <__swsetup_r>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d0cb      	beq.n	800bad0 <__swbuf_r+0x28>
 800bb38:	f04f 37ff 	mov.w	r7, #4294967295
 800bb3c:	e7ea      	b.n	800bb14 <__swbuf_r+0x6c>
 800bb3e:	bf00      	nop
 800bb40:	0800e2d0 	.word	0x0800e2d0
 800bb44:	0800e2f0 	.word	0x0800e2f0
 800bb48:	0800e2b0 	.word	0x0800e2b0

0800bb4c <__swsetup_r>:
 800bb4c:	4b32      	ldr	r3, [pc, #200]	; (800bc18 <__swsetup_r+0xcc>)
 800bb4e:	b570      	push	{r4, r5, r6, lr}
 800bb50:	681d      	ldr	r5, [r3, #0]
 800bb52:	4606      	mov	r6, r0
 800bb54:	460c      	mov	r4, r1
 800bb56:	b125      	cbz	r5, 800bb62 <__swsetup_r+0x16>
 800bb58:	69ab      	ldr	r3, [r5, #24]
 800bb5a:	b913      	cbnz	r3, 800bb62 <__swsetup_r+0x16>
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	f000 fff7 	bl	800cb50 <__sinit>
 800bb62:	4b2e      	ldr	r3, [pc, #184]	; (800bc1c <__swsetup_r+0xd0>)
 800bb64:	429c      	cmp	r4, r3
 800bb66:	d10f      	bne.n	800bb88 <__swsetup_r+0x3c>
 800bb68:	686c      	ldr	r4, [r5, #4]
 800bb6a:	89a3      	ldrh	r3, [r4, #12]
 800bb6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb70:	0719      	lsls	r1, r3, #28
 800bb72:	d42c      	bmi.n	800bbce <__swsetup_r+0x82>
 800bb74:	06dd      	lsls	r5, r3, #27
 800bb76:	d411      	bmi.n	800bb9c <__swsetup_r+0x50>
 800bb78:	2309      	movs	r3, #9
 800bb7a:	6033      	str	r3, [r6, #0]
 800bb7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb80:	81a3      	strh	r3, [r4, #12]
 800bb82:	f04f 30ff 	mov.w	r0, #4294967295
 800bb86:	e03e      	b.n	800bc06 <__swsetup_r+0xba>
 800bb88:	4b25      	ldr	r3, [pc, #148]	; (800bc20 <__swsetup_r+0xd4>)
 800bb8a:	429c      	cmp	r4, r3
 800bb8c:	d101      	bne.n	800bb92 <__swsetup_r+0x46>
 800bb8e:	68ac      	ldr	r4, [r5, #8]
 800bb90:	e7eb      	b.n	800bb6a <__swsetup_r+0x1e>
 800bb92:	4b24      	ldr	r3, [pc, #144]	; (800bc24 <__swsetup_r+0xd8>)
 800bb94:	429c      	cmp	r4, r3
 800bb96:	bf08      	it	eq
 800bb98:	68ec      	ldreq	r4, [r5, #12]
 800bb9a:	e7e6      	b.n	800bb6a <__swsetup_r+0x1e>
 800bb9c:	0758      	lsls	r0, r3, #29
 800bb9e:	d512      	bpl.n	800bbc6 <__swsetup_r+0x7a>
 800bba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bba2:	b141      	cbz	r1, 800bbb6 <__swsetup_r+0x6a>
 800bba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bba8:	4299      	cmp	r1, r3
 800bbaa:	d002      	beq.n	800bbb2 <__swsetup_r+0x66>
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7ff f98b 	bl	800aec8 <_free_r>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	6363      	str	r3, [r4, #52]	; 0x34
 800bbb6:	89a3      	ldrh	r3, [r4, #12]
 800bbb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbbc:	81a3      	strh	r3, [r4, #12]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	6063      	str	r3, [r4, #4]
 800bbc2:	6923      	ldr	r3, [r4, #16]
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	89a3      	ldrh	r3, [r4, #12]
 800bbc8:	f043 0308 	orr.w	r3, r3, #8
 800bbcc:	81a3      	strh	r3, [r4, #12]
 800bbce:	6923      	ldr	r3, [r4, #16]
 800bbd0:	b94b      	cbnz	r3, 800bbe6 <__swsetup_r+0x9a>
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbdc:	d003      	beq.n	800bbe6 <__swsetup_r+0x9a>
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f001 f87f 	bl	800cce4 <__smakebuf_r>
 800bbe6:	89a0      	ldrh	r0, [r4, #12]
 800bbe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbec:	f010 0301 	ands.w	r3, r0, #1
 800bbf0:	d00a      	beq.n	800bc08 <__swsetup_r+0xbc>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60a3      	str	r3, [r4, #8]
 800bbf6:	6963      	ldr	r3, [r4, #20]
 800bbf8:	425b      	negs	r3, r3
 800bbfa:	61a3      	str	r3, [r4, #24]
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	b943      	cbnz	r3, 800bc12 <__swsetup_r+0xc6>
 800bc00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc04:	d1ba      	bne.n	800bb7c <__swsetup_r+0x30>
 800bc06:	bd70      	pop	{r4, r5, r6, pc}
 800bc08:	0781      	lsls	r1, r0, #30
 800bc0a:	bf58      	it	pl
 800bc0c:	6963      	ldrpl	r3, [r4, #20]
 800bc0e:	60a3      	str	r3, [r4, #8]
 800bc10:	e7f4      	b.n	800bbfc <__swsetup_r+0xb0>
 800bc12:	2000      	movs	r0, #0
 800bc14:	e7f7      	b.n	800bc06 <__swsetup_r+0xba>
 800bc16:	bf00      	nop
 800bc18:	20000028 	.word	0x20000028
 800bc1c:	0800e2d0 	.word	0x0800e2d0
 800bc20:	0800e2f0 	.word	0x0800e2f0
 800bc24:	0800e2b0 	.word	0x0800e2b0

0800bc28 <quorem>:
 800bc28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	6903      	ldr	r3, [r0, #16]
 800bc2e:	690c      	ldr	r4, [r1, #16]
 800bc30:	42a3      	cmp	r3, r4
 800bc32:	4607      	mov	r7, r0
 800bc34:	f2c0 8081 	blt.w	800bd3a <quorem+0x112>
 800bc38:	3c01      	subs	r4, #1
 800bc3a:	f101 0814 	add.w	r8, r1, #20
 800bc3e:	f100 0514 	add.w	r5, r0, #20
 800bc42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc50:	3301      	adds	r3, #1
 800bc52:	429a      	cmp	r2, r3
 800bc54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc60:	d331      	bcc.n	800bcc6 <quorem+0x9e>
 800bc62:	f04f 0e00 	mov.w	lr, #0
 800bc66:	4640      	mov	r0, r8
 800bc68:	46ac      	mov	ip, r5
 800bc6a:	46f2      	mov	sl, lr
 800bc6c:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc70:	b293      	uxth	r3, r2
 800bc72:	fb06 e303 	mla	r3, r6, r3, lr
 800bc76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	ebaa 0303 	sub.w	r3, sl, r3
 800bc80:	f8dc a000 	ldr.w	sl, [ip]
 800bc84:	0c12      	lsrs	r2, r2, #16
 800bc86:	fa13 f38a 	uxtah	r3, r3, sl
 800bc8a:	fb06 e202 	mla	r2, r6, r2, lr
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	9b00      	ldr	r3, [sp, #0]
 800bc92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc96:	b292      	uxth	r2, r2
 800bc98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bca0:	f8bd 3000 	ldrh.w	r3, [sp]
 800bca4:	4581      	cmp	r9, r0
 800bca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcaa:	f84c 3b04 	str.w	r3, [ip], #4
 800bcae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bcb2:	d2db      	bcs.n	800bc6c <quorem+0x44>
 800bcb4:	f855 300b 	ldr.w	r3, [r5, fp]
 800bcb8:	b92b      	cbnz	r3, 800bcc6 <quorem+0x9e>
 800bcba:	9b01      	ldr	r3, [sp, #4]
 800bcbc:	3b04      	subs	r3, #4
 800bcbe:	429d      	cmp	r5, r3
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	d32e      	bcc.n	800bd22 <quorem+0xfa>
 800bcc4:	613c      	str	r4, [r7, #16]
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	f001 fae8 	bl	800d29c <__mcmp>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	db24      	blt.n	800bd1a <quorem+0xf2>
 800bcd0:	3601      	adds	r6, #1
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	f04f 0c00 	mov.w	ip, #0
 800bcd8:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcdc:	f8d0 e000 	ldr.w	lr, [r0]
 800bce0:	b293      	uxth	r3, r2
 800bce2:	ebac 0303 	sub.w	r3, ip, r3
 800bce6:	0c12      	lsrs	r2, r2, #16
 800bce8:	fa13 f38e 	uxtah	r3, r3, lr
 800bcec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bcf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcfa:	45c1      	cmp	r9, r8
 800bcfc:	f840 3b04 	str.w	r3, [r0], #4
 800bd00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd04:	d2e8      	bcs.n	800bcd8 <quorem+0xb0>
 800bd06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd0e:	b922      	cbnz	r2, 800bd1a <quorem+0xf2>
 800bd10:	3b04      	subs	r3, #4
 800bd12:	429d      	cmp	r5, r3
 800bd14:	461a      	mov	r2, r3
 800bd16:	d30a      	bcc.n	800bd2e <quorem+0x106>
 800bd18:	613c      	str	r4, [r7, #16]
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	b003      	add	sp, #12
 800bd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd22:	6812      	ldr	r2, [r2, #0]
 800bd24:	3b04      	subs	r3, #4
 800bd26:	2a00      	cmp	r2, #0
 800bd28:	d1cc      	bne.n	800bcc4 <quorem+0x9c>
 800bd2a:	3c01      	subs	r4, #1
 800bd2c:	e7c7      	b.n	800bcbe <quorem+0x96>
 800bd2e:	6812      	ldr	r2, [r2, #0]
 800bd30:	3b04      	subs	r3, #4
 800bd32:	2a00      	cmp	r2, #0
 800bd34:	d1f0      	bne.n	800bd18 <quorem+0xf0>
 800bd36:	3c01      	subs	r4, #1
 800bd38:	e7eb      	b.n	800bd12 <quorem+0xea>
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	e7ee      	b.n	800bd1c <quorem+0xf4>
	...

0800bd40 <_dtoa_r>:
 800bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	ed2d 8b04 	vpush	{d8-d9}
 800bd48:	ec57 6b10 	vmov	r6, r7, d0
 800bd4c:	b093      	sub	sp, #76	; 0x4c
 800bd4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd54:	9106      	str	r1, [sp, #24]
 800bd56:	ee10 aa10 	vmov	sl, s0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd5e:	930c      	str	r3, [sp, #48]	; 0x30
 800bd60:	46bb      	mov	fp, r7
 800bd62:	b975      	cbnz	r5, 800bd82 <_dtoa_r+0x42>
 800bd64:	2010      	movs	r0, #16
 800bd66:	f7ff f897 	bl	800ae98 <malloc>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	6260      	str	r0, [r4, #36]	; 0x24
 800bd6e:	b920      	cbnz	r0, 800bd7a <_dtoa_r+0x3a>
 800bd70:	4ba7      	ldr	r3, [pc, #668]	; (800c010 <_dtoa_r+0x2d0>)
 800bd72:	21ea      	movs	r1, #234	; 0xea
 800bd74:	48a7      	ldr	r0, [pc, #668]	; (800c014 <_dtoa_r+0x2d4>)
 800bd76:	f001 fd59 	bl	800d82c <__assert_func>
 800bd7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd7e:	6005      	str	r5, [r0, #0]
 800bd80:	60c5      	str	r5, [r0, #12]
 800bd82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd84:	6819      	ldr	r1, [r3, #0]
 800bd86:	b151      	cbz	r1, 800bd9e <_dtoa_r+0x5e>
 800bd88:	685a      	ldr	r2, [r3, #4]
 800bd8a:	604a      	str	r2, [r1, #4]
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	4093      	lsls	r3, r2
 800bd90:	608b      	str	r3, [r1, #8]
 800bd92:	4620      	mov	r0, r4
 800bd94:	f001 f840 	bl	800ce18 <_Bfree>
 800bd98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	1e3b      	subs	r3, r7, #0
 800bda0:	bfaa      	itet	ge
 800bda2:	2300      	movge	r3, #0
 800bda4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bda8:	f8c8 3000 	strge.w	r3, [r8]
 800bdac:	4b9a      	ldr	r3, [pc, #616]	; (800c018 <_dtoa_r+0x2d8>)
 800bdae:	bfbc      	itt	lt
 800bdb0:	2201      	movlt	r2, #1
 800bdb2:	f8c8 2000 	strlt.w	r2, [r8]
 800bdb6:	ea33 030b 	bics.w	r3, r3, fp
 800bdba:	d11b      	bne.n	800bdf4 <_dtoa_r+0xb4>
 800bdbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdbe:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdc2:	6013      	str	r3, [r2, #0]
 800bdc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdc8:	4333      	orrs	r3, r6
 800bdca:	f000 8592 	beq.w	800c8f2 <_dtoa_r+0xbb2>
 800bdce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdd0:	b963      	cbnz	r3, 800bdec <_dtoa_r+0xac>
 800bdd2:	4b92      	ldr	r3, [pc, #584]	; (800c01c <_dtoa_r+0x2dc>)
 800bdd4:	e022      	b.n	800be1c <_dtoa_r+0xdc>
 800bdd6:	4b92      	ldr	r3, [pc, #584]	; (800c020 <_dtoa_r+0x2e0>)
 800bdd8:	9301      	str	r3, [sp, #4]
 800bdda:	3308      	adds	r3, #8
 800bddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	9801      	ldr	r0, [sp, #4]
 800bde2:	b013      	add	sp, #76	; 0x4c
 800bde4:	ecbd 8b04 	vpop	{d8-d9}
 800bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdec:	4b8b      	ldr	r3, [pc, #556]	; (800c01c <_dtoa_r+0x2dc>)
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	3303      	adds	r3, #3
 800bdf2:	e7f3      	b.n	800bddc <_dtoa_r+0x9c>
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4650      	mov	r0, sl
 800bdfa:	4659      	mov	r1, fp
 800bdfc:	f7f4 fe6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800be00:	ec4b ab19 	vmov	d9, sl, fp
 800be04:	4680      	mov	r8, r0
 800be06:	b158      	cbz	r0, 800be20 <_dtoa_r+0xe0>
 800be08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be0a:	2301      	movs	r3, #1
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 856b 	beq.w	800c8ec <_dtoa_r+0xbac>
 800be16:	4883      	ldr	r0, [pc, #524]	; (800c024 <_dtoa_r+0x2e4>)
 800be18:	6018      	str	r0, [r3, #0]
 800be1a:	1e43      	subs	r3, r0, #1
 800be1c:	9301      	str	r3, [sp, #4]
 800be1e:	e7df      	b.n	800bde0 <_dtoa_r+0xa0>
 800be20:	ec4b ab10 	vmov	d0, sl, fp
 800be24:	aa10      	add	r2, sp, #64	; 0x40
 800be26:	a911      	add	r1, sp, #68	; 0x44
 800be28:	4620      	mov	r0, r4
 800be2a:	f001 fadd 	bl	800d3e8 <__d2b>
 800be2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800be32:	ee08 0a10 	vmov	s16, r0
 800be36:	2d00      	cmp	r5, #0
 800be38:	f000 8084 	beq.w	800bf44 <_dtoa_r+0x204>
 800be3c:	ee19 3a90 	vmov	r3, s19
 800be40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be48:	4656      	mov	r6, sl
 800be4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800be56:	4b74      	ldr	r3, [pc, #464]	; (800c028 <_dtoa_r+0x2e8>)
 800be58:	2200      	movs	r2, #0
 800be5a:	4630      	mov	r0, r6
 800be5c:	4639      	mov	r1, r7
 800be5e:	f7f4 fa1b 	bl	8000298 <__aeabi_dsub>
 800be62:	a365      	add	r3, pc, #404	; (adr r3, 800bff8 <_dtoa_r+0x2b8>)
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f7f4 fbce 	bl	8000608 <__aeabi_dmul>
 800be6c:	a364      	add	r3, pc, #400	; (adr r3, 800c000 <_dtoa_r+0x2c0>)
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	f7f4 fa13 	bl	800029c <__adddf3>
 800be76:	4606      	mov	r6, r0
 800be78:	4628      	mov	r0, r5
 800be7a:	460f      	mov	r7, r1
 800be7c:	f7f4 fb5a 	bl	8000534 <__aeabi_i2d>
 800be80:	a361      	add	r3, pc, #388	; (adr r3, 800c008 <_dtoa_r+0x2c8>)
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	f7f4 fbbf 	bl	8000608 <__aeabi_dmul>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4630      	mov	r0, r6
 800be90:	4639      	mov	r1, r7
 800be92:	f7f4 fa03 	bl	800029c <__adddf3>
 800be96:	4606      	mov	r6, r0
 800be98:	460f      	mov	r7, r1
 800be9a:	f7f4 fe65 	bl	8000b68 <__aeabi_d2iz>
 800be9e:	2200      	movs	r2, #0
 800bea0:	9000      	str	r0, [sp, #0]
 800bea2:	2300      	movs	r3, #0
 800bea4:	4630      	mov	r0, r6
 800bea6:	4639      	mov	r1, r7
 800bea8:	f7f4 fe20 	bl	8000aec <__aeabi_dcmplt>
 800beac:	b150      	cbz	r0, 800bec4 <_dtoa_r+0x184>
 800beae:	9800      	ldr	r0, [sp, #0]
 800beb0:	f7f4 fb40 	bl	8000534 <__aeabi_i2d>
 800beb4:	4632      	mov	r2, r6
 800beb6:	463b      	mov	r3, r7
 800beb8:	f7f4 fe0e 	bl	8000ad8 <__aeabi_dcmpeq>
 800bebc:	b910      	cbnz	r0, 800bec4 <_dtoa_r+0x184>
 800bebe:	9b00      	ldr	r3, [sp, #0]
 800bec0:	3b01      	subs	r3, #1
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	9b00      	ldr	r3, [sp, #0]
 800bec6:	2b16      	cmp	r3, #22
 800bec8:	d85a      	bhi.n	800bf80 <_dtoa_r+0x240>
 800beca:	9a00      	ldr	r2, [sp, #0]
 800becc:	4b57      	ldr	r3, [pc, #348]	; (800c02c <_dtoa_r+0x2ec>)
 800bece:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	ec51 0b19 	vmov	r0, r1, d9
 800beda:	f7f4 fe07 	bl	8000aec <__aeabi_dcmplt>
 800bede:	2800      	cmp	r0, #0
 800bee0:	d050      	beq.n	800bf84 <_dtoa_r+0x244>
 800bee2:	9b00      	ldr	r3, [sp, #0]
 800bee4:	3b01      	subs	r3, #1
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	2300      	movs	r3, #0
 800beea:	930b      	str	r3, [sp, #44]	; 0x2c
 800beec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800beee:	1b5d      	subs	r5, r3, r5
 800bef0:	1e6b      	subs	r3, r5, #1
 800bef2:	9305      	str	r3, [sp, #20]
 800bef4:	bf45      	ittet	mi
 800bef6:	f1c5 0301 	rsbmi	r3, r5, #1
 800befa:	9304      	strmi	r3, [sp, #16]
 800befc:	2300      	movpl	r3, #0
 800befe:	2300      	movmi	r3, #0
 800bf00:	bf4c      	ite	mi
 800bf02:	9305      	strmi	r3, [sp, #20]
 800bf04:	9304      	strpl	r3, [sp, #16]
 800bf06:	9b00      	ldr	r3, [sp, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	db3d      	blt.n	800bf88 <_dtoa_r+0x248>
 800bf0c:	9b05      	ldr	r3, [sp, #20]
 800bf0e:	9a00      	ldr	r2, [sp, #0]
 800bf10:	920a      	str	r2, [sp, #40]	; 0x28
 800bf12:	4413      	add	r3, r2
 800bf14:	9305      	str	r3, [sp, #20]
 800bf16:	2300      	movs	r3, #0
 800bf18:	9307      	str	r3, [sp, #28]
 800bf1a:	9b06      	ldr	r3, [sp, #24]
 800bf1c:	2b09      	cmp	r3, #9
 800bf1e:	f200 8089 	bhi.w	800c034 <_dtoa_r+0x2f4>
 800bf22:	2b05      	cmp	r3, #5
 800bf24:	bfc4      	itt	gt
 800bf26:	3b04      	subgt	r3, #4
 800bf28:	9306      	strgt	r3, [sp, #24]
 800bf2a:	9b06      	ldr	r3, [sp, #24]
 800bf2c:	f1a3 0302 	sub.w	r3, r3, #2
 800bf30:	bfcc      	ite	gt
 800bf32:	2500      	movgt	r5, #0
 800bf34:	2501      	movle	r5, #1
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	f200 8087 	bhi.w	800c04a <_dtoa_r+0x30a>
 800bf3c:	e8df f003 	tbb	[pc, r3]
 800bf40:	59383a2d 	.word	0x59383a2d
 800bf44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf48:	441d      	add	r5, r3
 800bf4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf4e:	2b20      	cmp	r3, #32
 800bf50:	bfc1      	itttt	gt
 800bf52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf5a:	fa0b f303 	lslgt.w	r3, fp, r3
 800bf5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf62:	bfda      	itte	le
 800bf64:	f1c3 0320 	rsble	r3, r3, #32
 800bf68:	fa06 f003 	lslle.w	r0, r6, r3
 800bf6c:	4318      	orrgt	r0, r3
 800bf6e:	f7f4 fad1 	bl	8000514 <__aeabi_ui2d>
 800bf72:	2301      	movs	r3, #1
 800bf74:	4606      	mov	r6, r0
 800bf76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bf7a:	3d01      	subs	r5, #1
 800bf7c:	930e      	str	r3, [sp, #56]	; 0x38
 800bf7e:	e76a      	b.n	800be56 <_dtoa_r+0x116>
 800bf80:	2301      	movs	r3, #1
 800bf82:	e7b2      	b.n	800beea <_dtoa_r+0x1aa>
 800bf84:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf86:	e7b1      	b.n	800beec <_dtoa_r+0x1ac>
 800bf88:	9b04      	ldr	r3, [sp, #16]
 800bf8a:	9a00      	ldr	r2, [sp, #0]
 800bf8c:	1a9b      	subs	r3, r3, r2
 800bf8e:	9304      	str	r3, [sp, #16]
 800bf90:	4253      	negs	r3, r2
 800bf92:	9307      	str	r3, [sp, #28]
 800bf94:	2300      	movs	r3, #0
 800bf96:	930a      	str	r3, [sp, #40]	; 0x28
 800bf98:	e7bf      	b.n	800bf1a <_dtoa_r+0x1da>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	9308      	str	r3, [sp, #32]
 800bf9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	dc55      	bgt.n	800c050 <_dtoa_r+0x310>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	9209      	str	r2, [sp, #36]	; 0x24
 800bfae:	e00c      	b.n	800bfca <_dtoa_r+0x28a>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e7f3      	b.n	800bf9c <_dtoa_r+0x25c>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfb8:	9308      	str	r3, [sp, #32]
 800bfba:	9b00      	ldr	r3, [sp, #0]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	9302      	str	r3, [sp, #8]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	9303      	str	r3, [sp, #12]
 800bfc6:	bfb8      	it	lt
 800bfc8:	2301      	movlt	r3, #1
 800bfca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bfcc:	2200      	movs	r2, #0
 800bfce:	6042      	str	r2, [r0, #4]
 800bfd0:	2204      	movs	r2, #4
 800bfd2:	f102 0614 	add.w	r6, r2, #20
 800bfd6:	429e      	cmp	r6, r3
 800bfd8:	6841      	ldr	r1, [r0, #4]
 800bfda:	d93d      	bls.n	800c058 <_dtoa_r+0x318>
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f000 fedb 	bl	800cd98 <_Balloc>
 800bfe2:	9001      	str	r0, [sp, #4]
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d13b      	bne.n	800c060 <_dtoa_r+0x320>
 800bfe8:	4b11      	ldr	r3, [pc, #68]	; (800c030 <_dtoa_r+0x2f0>)
 800bfea:	4602      	mov	r2, r0
 800bfec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bff0:	e6c0      	b.n	800bd74 <_dtoa_r+0x34>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e7df      	b.n	800bfb6 <_dtoa_r+0x276>
 800bff6:	bf00      	nop
 800bff8:	636f4361 	.word	0x636f4361
 800bffc:	3fd287a7 	.word	0x3fd287a7
 800c000:	8b60c8b3 	.word	0x8b60c8b3
 800c004:	3fc68a28 	.word	0x3fc68a28
 800c008:	509f79fb 	.word	0x509f79fb
 800c00c:	3fd34413 	.word	0x3fd34413
 800c010:	0800e22d 	.word	0x0800e22d
 800c014:	0800e244 	.word	0x0800e244
 800c018:	7ff00000 	.word	0x7ff00000
 800c01c:	0800e229 	.word	0x0800e229
 800c020:	0800e220 	.word	0x0800e220
 800c024:	0800e1fd 	.word	0x0800e1fd
 800c028:	3ff80000 	.word	0x3ff80000
 800c02c:	0800e398 	.word	0x0800e398
 800c030:	0800e29f 	.word	0x0800e29f
 800c034:	2501      	movs	r5, #1
 800c036:	2300      	movs	r3, #0
 800c038:	9306      	str	r3, [sp, #24]
 800c03a:	9508      	str	r5, [sp, #32]
 800c03c:	f04f 33ff 	mov.w	r3, #4294967295
 800c040:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c044:	2200      	movs	r2, #0
 800c046:	2312      	movs	r3, #18
 800c048:	e7b0      	b.n	800bfac <_dtoa_r+0x26c>
 800c04a:	2301      	movs	r3, #1
 800c04c:	9308      	str	r3, [sp, #32]
 800c04e:	e7f5      	b.n	800c03c <_dtoa_r+0x2fc>
 800c050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c052:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c056:	e7b8      	b.n	800bfca <_dtoa_r+0x28a>
 800c058:	3101      	adds	r1, #1
 800c05a:	6041      	str	r1, [r0, #4]
 800c05c:	0052      	lsls	r2, r2, #1
 800c05e:	e7b8      	b.n	800bfd2 <_dtoa_r+0x292>
 800c060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c062:	9a01      	ldr	r2, [sp, #4]
 800c064:	601a      	str	r2, [r3, #0]
 800c066:	9b03      	ldr	r3, [sp, #12]
 800c068:	2b0e      	cmp	r3, #14
 800c06a:	f200 809d 	bhi.w	800c1a8 <_dtoa_r+0x468>
 800c06e:	2d00      	cmp	r5, #0
 800c070:	f000 809a 	beq.w	800c1a8 <_dtoa_r+0x468>
 800c074:	9b00      	ldr	r3, [sp, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	dd32      	ble.n	800c0e0 <_dtoa_r+0x3a0>
 800c07a:	4ab7      	ldr	r2, [pc, #732]	; (800c358 <_dtoa_r+0x618>)
 800c07c:	f003 030f 	and.w	r3, r3, #15
 800c080:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c084:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c088:	9b00      	ldr	r3, [sp, #0]
 800c08a:	05d8      	lsls	r0, r3, #23
 800c08c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c090:	d516      	bpl.n	800c0c0 <_dtoa_r+0x380>
 800c092:	4bb2      	ldr	r3, [pc, #712]	; (800c35c <_dtoa_r+0x61c>)
 800c094:	ec51 0b19 	vmov	r0, r1, d9
 800c098:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c09c:	f7f4 fbde 	bl	800085c <__aeabi_ddiv>
 800c0a0:	f007 070f 	and.w	r7, r7, #15
 800c0a4:	4682      	mov	sl, r0
 800c0a6:	468b      	mov	fp, r1
 800c0a8:	2503      	movs	r5, #3
 800c0aa:	4eac      	ldr	r6, [pc, #688]	; (800c35c <_dtoa_r+0x61c>)
 800c0ac:	b957      	cbnz	r7, 800c0c4 <_dtoa_r+0x384>
 800c0ae:	4642      	mov	r2, r8
 800c0b0:	464b      	mov	r3, r9
 800c0b2:	4650      	mov	r0, sl
 800c0b4:	4659      	mov	r1, fp
 800c0b6:	f7f4 fbd1 	bl	800085c <__aeabi_ddiv>
 800c0ba:	4682      	mov	sl, r0
 800c0bc:	468b      	mov	fp, r1
 800c0be:	e028      	b.n	800c112 <_dtoa_r+0x3d2>
 800c0c0:	2502      	movs	r5, #2
 800c0c2:	e7f2      	b.n	800c0aa <_dtoa_r+0x36a>
 800c0c4:	07f9      	lsls	r1, r7, #31
 800c0c6:	d508      	bpl.n	800c0da <_dtoa_r+0x39a>
 800c0c8:	4640      	mov	r0, r8
 800c0ca:	4649      	mov	r1, r9
 800c0cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0d0:	f7f4 fa9a 	bl	8000608 <__aeabi_dmul>
 800c0d4:	3501      	adds	r5, #1
 800c0d6:	4680      	mov	r8, r0
 800c0d8:	4689      	mov	r9, r1
 800c0da:	107f      	asrs	r7, r7, #1
 800c0dc:	3608      	adds	r6, #8
 800c0de:	e7e5      	b.n	800c0ac <_dtoa_r+0x36c>
 800c0e0:	f000 809b 	beq.w	800c21a <_dtoa_r+0x4da>
 800c0e4:	9b00      	ldr	r3, [sp, #0]
 800c0e6:	4f9d      	ldr	r7, [pc, #628]	; (800c35c <_dtoa_r+0x61c>)
 800c0e8:	425e      	negs	r6, r3
 800c0ea:	4b9b      	ldr	r3, [pc, #620]	; (800c358 <_dtoa_r+0x618>)
 800c0ec:	f006 020f 	and.w	r2, r6, #15
 800c0f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	ec51 0b19 	vmov	r0, r1, d9
 800c0fc:	f7f4 fa84 	bl	8000608 <__aeabi_dmul>
 800c100:	1136      	asrs	r6, r6, #4
 800c102:	4682      	mov	sl, r0
 800c104:	468b      	mov	fp, r1
 800c106:	2300      	movs	r3, #0
 800c108:	2502      	movs	r5, #2
 800c10a:	2e00      	cmp	r6, #0
 800c10c:	d17a      	bne.n	800c204 <_dtoa_r+0x4c4>
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1d3      	bne.n	800c0ba <_dtoa_r+0x37a>
 800c112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 8082 	beq.w	800c21e <_dtoa_r+0x4de>
 800c11a:	4b91      	ldr	r3, [pc, #580]	; (800c360 <_dtoa_r+0x620>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	4650      	mov	r0, sl
 800c120:	4659      	mov	r1, fp
 800c122:	f7f4 fce3 	bl	8000aec <__aeabi_dcmplt>
 800c126:	2800      	cmp	r0, #0
 800c128:	d079      	beq.n	800c21e <_dtoa_r+0x4de>
 800c12a:	9b03      	ldr	r3, [sp, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d076      	beq.n	800c21e <_dtoa_r+0x4de>
 800c130:	9b02      	ldr	r3, [sp, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	dd36      	ble.n	800c1a4 <_dtoa_r+0x464>
 800c136:	9b00      	ldr	r3, [sp, #0]
 800c138:	4650      	mov	r0, sl
 800c13a:	4659      	mov	r1, fp
 800c13c:	1e5f      	subs	r7, r3, #1
 800c13e:	2200      	movs	r2, #0
 800c140:	4b88      	ldr	r3, [pc, #544]	; (800c364 <_dtoa_r+0x624>)
 800c142:	f7f4 fa61 	bl	8000608 <__aeabi_dmul>
 800c146:	9e02      	ldr	r6, [sp, #8]
 800c148:	4682      	mov	sl, r0
 800c14a:	468b      	mov	fp, r1
 800c14c:	3501      	adds	r5, #1
 800c14e:	4628      	mov	r0, r5
 800c150:	f7f4 f9f0 	bl	8000534 <__aeabi_i2d>
 800c154:	4652      	mov	r2, sl
 800c156:	465b      	mov	r3, fp
 800c158:	f7f4 fa56 	bl	8000608 <__aeabi_dmul>
 800c15c:	4b82      	ldr	r3, [pc, #520]	; (800c368 <_dtoa_r+0x628>)
 800c15e:	2200      	movs	r2, #0
 800c160:	f7f4 f89c 	bl	800029c <__adddf3>
 800c164:	46d0      	mov	r8, sl
 800c166:	46d9      	mov	r9, fp
 800c168:	4682      	mov	sl, r0
 800c16a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c16e:	2e00      	cmp	r6, #0
 800c170:	d158      	bne.n	800c224 <_dtoa_r+0x4e4>
 800c172:	4b7e      	ldr	r3, [pc, #504]	; (800c36c <_dtoa_r+0x62c>)
 800c174:	2200      	movs	r2, #0
 800c176:	4640      	mov	r0, r8
 800c178:	4649      	mov	r1, r9
 800c17a:	f7f4 f88d 	bl	8000298 <__aeabi_dsub>
 800c17e:	4652      	mov	r2, sl
 800c180:	465b      	mov	r3, fp
 800c182:	4680      	mov	r8, r0
 800c184:	4689      	mov	r9, r1
 800c186:	f7f4 fccf 	bl	8000b28 <__aeabi_dcmpgt>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	f040 8295 	bne.w	800c6ba <_dtoa_r+0x97a>
 800c190:	4652      	mov	r2, sl
 800c192:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c196:	4640      	mov	r0, r8
 800c198:	4649      	mov	r1, r9
 800c19a:	f7f4 fca7 	bl	8000aec <__aeabi_dcmplt>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	f040 8289 	bne.w	800c6b6 <_dtoa_r+0x976>
 800c1a4:	ec5b ab19 	vmov	sl, fp, d9
 800c1a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	f2c0 8148 	blt.w	800c440 <_dtoa_r+0x700>
 800c1b0:	9a00      	ldr	r2, [sp, #0]
 800c1b2:	2a0e      	cmp	r2, #14
 800c1b4:	f300 8144 	bgt.w	800c440 <_dtoa_r+0x700>
 800c1b8:	4b67      	ldr	r3, [pc, #412]	; (800c358 <_dtoa_r+0x618>)
 800c1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f280 80d5 	bge.w	800c374 <_dtoa_r+0x634>
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f300 80d1 	bgt.w	800c374 <_dtoa_r+0x634>
 800c1d2:	f040 826f 	bne.w	800c6b4 <_dtoa_r+0x974>
 800c1d6:	4b65      	ldr	r3, [pc, #404]	; (800c36c <_dtoa_r+0x62c>)
 800c1d8:	2200      	movs	r2, #0
 800c1da:	4640      	mov	r0, r8
 800c1dc:	4649      	mov	r1, r9
 800c1de:	f7f4 fa13 	bl	8000608 <__aeabi_dmul>
 800c1e2:	4652      	mov	r2, sl
 800c1e4:	465b      	mov	r3, fp
 800c1e6:	f7f4 fc95 	bl	8000b14 <__aeabi_dcmpge>
 800c1ea:	9e03      	ldr	r6, [sp, #12]
 800c1ec:	4637      	mov	r7, r6
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f040 8245 	bne.w	800c67e <_dtoa_r+0x93e>
 800c1f4:	9d01      	ldr	r5, [sp, #4]
 800c1f6:	2331      	movs	r3, #49	; 0x31
 800c1f8:	f805 3b01 	strb.w	r3, [r5], #1
 800c1fc:	9b00      	ldr	r3, [sp, #0]
 800c1fe:	3301      	adds	r3, #1
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	e240      	b.n	800c686 <_dtoa_r+0x946>
 800c204:	07f2      	lsls	r2, r6, #31
 800c206:	d505      	bpl.n	800c214 <_dtoa_r+0x4d4>
 800c208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c20c:	f7f4 f9fc 	bl	8000608 <__aeabi_dmul>
 800c210:	3501      	adds	r5, #1
 800c212:	2301      	movs	r3, #1
 800c214:	1076      	asrs	r6, r6, #1
 800c216:	3708      	adds	r7, #8
 800c218:	e777      	b.n	800c10a <_dtoa_r+0x3ca>
 800c21a:	2502      	movs	r5, #2
 800c21c:	e779      	b.n	800c112 <_dtoa_r+0x3d2>
 800c21e:	9f00      	ldr	r7, [sp, #0]
 800c220:	9e03      	ldr	r6, [sp, #12]
 800c222:	e794      	b.n	800c14e <_dtoa_r+0x40e>
 800c224:	9901      	ldr	r1, [sp, #4]
 800c226:	4b4c      	ldr	r3, [pc, #304]	; (800c358 <_dtoa_r+0x618>)
 800c228:	4431      	add	r1, r6
 800c22a:	910d      	str	r1, [sp, #52]	; 0x34
 800c22c:	9908      	ldr	r1, [sp, #32]
 800c22e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c232:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c236:	2900      	cmp	r1, #0
 800c238:	d043      	beq.n	800c2c2 <_dtoa_r+0x582>
 800c23a:	494d      	ldr	r1, [pc, #308]	; (800c370 <_dtoa_r+0x630>)
 800c23c:	2000      	movs	r0, #0
 800c23e:	f7f4 fb0d 	bl	800085c <__aeabi_ddiv>
 800c242:	4652      	mov	r2, sl
 800c244:	465b      	mov	r3, fp
 800c246:	f7f4 f827 	bl	8000298 <__aeabi_dsub>
 800c24a:	9d01      	ldr	r5, [sp, #4]
 800c24c:	4682      	mov	sl, r0
 800c24e:	468b      	mov	fp, r1
 800c250:	4649      	mov	r1, r9
 800c252:	4640      	mov	r0, r8
 800c254:	f7f4 fc88 	bl	8000b68 <__aeabi_d2iz>
 800c258:	4606      	mov	r6, r0
 800c25a:	f7f4 f96b 	bl	8000534 <__aeabi_i2d>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f4 f817 	bl	8000298 <__aeabi_dsub>
 800c26a:	3630      	adds	r6, #48	; 0x30
 800c26c:	f805 6b01 	strb.w	r6, [r5], #1
 800c270:	4652      	mov	r2, sl
 800c272:	465b      	mov	r3, fp
 800c274:	4680      	mov	r8, r0
 800c276:	4689      	mov	r9, r1
 800c278:	f7f4 fc38 	bl	8000aec <__aeabi_dcmplt>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d163      	bne.n	800c348 <_dtoa_r+0x608>
 800c280:	4642      	mov	r2, r8
 800c282:	464b      	mov	r3, r9
 800c284:	4936      	ldr	r1, [pc, #216]	; (800c360 <_dtoa_r+0x620>)
 800c286:	2000      	movs	r0, #0
 800c288:	f7f4 f806 	bl	8000298 <__aeabi_dsub>
 800c28c:	4652      	mov	r2, sl
 800c28e:	465b      	mov	r3, fp
 800c290:	f7f4 fc2c 	bl	8000aec <__aeabi_dcmplt>
 800c294:	2800      	cmp	r0, #0
 800c296:	f040 80b5 	bne.w	800c404 <_dtoa_r+0x6c4>
 800c29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c29c:	429d      	cmp	r5, r3
 800c29e:	d081      	beq.n	800c1a4 <_dtoa_r+0x464>
 800c2a0:	4b30      	ldr	r3, [pc, #192]	; (800c364 <_dtoa_r+0x624>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	4650      	mov	r0, sl
 800c2a6:	4659      	mov	r1, fp
 800c2a8:	f7f4 f9ae 	bl	8000608 <__aeabi_dmul>
 800c2ac:	4b2d      	ldr	r3, [pc, #180]	; (800c364 <_dtoa_r+0x624>)
 800c2ae:	4682      	mov	sl, r0
 800c2b0:	468b      	mov	fp, r1
 800c2b2:	4640      	mov	r0, r8
 800c2b4:	4649      	mov	r1, r9
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f7f4 f9a6 	bl	8000608 <__aeabi_dmul>
 800c2bc:	4680      	mov	r8, r0
 800c2be:	4689      	mov	r9, r1
 800c2c0:	e7c6      	b.n	800c250 <_dtoa_r+0x510>
 800c2c2:	4650      	mov	r0, sl
 800c2c4:	4659      	mov	r1, fp
 800c2c6:	f7f4 f99f 	bl	8000608 <__aeabi_dmul>
 800c2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2cc:	9d01      	ldr	r5, [sp, #4]
 800c2ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2d0:	4682      	mov	sl, r0
 800c2d2:	468b      	mov	fp, r1
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	f7f4 fc46 	bl	8000b68 <__aeabi_d2iz>
 800c2dc:	4606      	mov	r6, r0
 800c2de:	f7f4 f929 	bl	8000534 <__aeabi_i2d>
 800c2e2:	3630      	adds	r6, #48	; 0x30
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4640      	mov	r0, r8
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	f7f3 ffd4 	bl	8000298 <__aeabi_dsub>
 800c2f0:	f805 6b01 	strb.w	r6, [r5], #1
 800c2f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2f6:	429d      	cmp	r5, r3
 800c2f8:	4680      	mov	r8, r0
 800c2fa:	4689      	mov	r9, r1
 800c2fc:	f04f 0200 	mov.w	r2, #0
 800c300:	d124      	bne.n	800c34c <_dtoa_r+0x60c>
 800c302:	4b1b      	ldr	r3, [pc, #108]	; (800c370 <_dtoa_r+0x630>)
 800c304:	4650      	mov	r0, sl
 800c306:	4659      	mov	r1, fp
 800c308:	f7f3 ffc8 	bl	800029c <__adddf3>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	4640      	mov	r0, r8
 800c312:	4649      	mov	r1, r9
 800c314:	f7f4 fc08 	bl	8000b28 <__aeabi_dcmpgt>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d173      	bne.n	800c404 <_dtoa_r+0x6c4>
 800c31c:	4652      	mov	r2, sl
 800c31e:	465b      	mov	r3, fp
 800c320:	4913      	ldr	r1, [pc, #76]	; (800c370 <_dtoa_r+0x630>)
 800c322:	2000      	movs	r0, #0
 800c324:	f7f3 ffb8 	bl	8000298 <__aeabi_dsub>
 800c328:	4602      	mov	r2, r0
 800c32a:	460b      	mov	r3, r1
 800c32c:	4640      	mov	r0, r8
 800c32e:	4649      	mov	r1, r9
 800c330:	f7f4 fbdc 	bl	8000aec <__aeabi_dcmplt>
 800c334:	2800      	cmp	r0, #0
 800c336:	f43f af35 	beq.w	800c1a4 <_dtoa_r+0x464>
 800c33a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c33c:	1e6b      	subs	r3, r5, #1
 800c33e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c340:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c344:	2b30      	cmp	r3, #48	; 0x30
 800c346:	d0f8      	beq.n	800c33a <_dtoa_r+0x5fa>
 800c348:	9700      	str	r7, [sp, #0]
 800c34a:	e049      	b.n	800c3e0 <_dtoa_r+0x6a0>
 800c34c:	4b05      	ldr	r3, [pc, #20]	; (800c364 <_dtoa_r+0x624>)
 800c34e:	f7f4 f95b 	bl	8000608 <__aeabi_dmul>
 800c352:	4680      	mov	r8, r0
 800c354:	4689      	mov	r9, r1
 800c356:	e7bd      	b.n	800c2d4 <_dtoa_r+0x594>
 800c358:	0800e398 	.word	0x0800e398
 800c35c:	0800e370 	.word	0x0800e370
 800c360:	3ff00000 	.word	0x3ff00000
 800c364:	40240000 	.word	0x40240000
 800c368:	401c0000 	.word	0x401c0000
 800c36c:	40140000 	.word	0x40140000
 800c370:	3fe00000 	.word	0x3fe00000
 800c374:	9d01      	ldr	r5, [sp, #4]
 800c376:	4656      	mov	r6, sl
 800c378:	465f      	mov	r7, fp
 800c37a:	4642      	mov	r2, r8
 800c37c:	464b      	mov	r3, r9
 800c37e:	4630      	mov	r0, r6
 800c380:	4639      	mov	r1, r7
 800c382:	f7f4 fa6b 	bl	800085c <__aeabi_ddiv>
 800c386:	f7f4 fbef 	bl	8000b68 <__aeabi_d2iz>
 800c38a:	4682      	mov	sl, r0
 800c38c:	f7f4 f8d2 	bl	8000534 <__aeabi_i2d>
 800c390:	4642      	mov	r2, r8
 800c392:	464b      	mov	r3, r9
 800c394:	f7f4 f938 	bl	8000608 <__aeabi_dmul>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4630      	mov	r0, r6
 800c39e:	4639      	mov	r1, r7
 800c3a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c3a4:	f7f3 ff78 	bl	8000298 <__aeabi_dsub>
 800c3a8:	f805 6b01 	strb.w	r6, [r5], #1
 800c3ac:	9e01      	ldr	r6, [sp, #4]
 800c3ae:	9f03      	ldr	r7, [sp, #12]
 800c3b0:	1bae      	subs	r6, r5, r6
 800c3b2:	42b7      	cmp	r7, r6
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	d135      	bne.n	800c426 <_dtoa_r+0x6e6>
 800c3ba:	f7f3 ff6f 	bl	800029c <__adddf3>
 800c3be:	4642      	mov	r2, r8
 800c3c0:	464b      	mov	r3, r9
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	460f      	mov	r7, r1
 800c3c6:	f7f4 fbaf 	bl	8000b28 <__aeabi_dcmpgt>
 800c3ca:	b9d0      	cbnz	r0, 800c402 <_dtoa_r+0x6c2>
 800c3cc:	4642      	mov	r2, r8
 800c3ce:	464b      	mov	r3, r9
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	f7f4 fb80 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3d8:	b110      	cbz	r0, 800c3e0 <_dtoa_r+0x6a0>
 800c3da:	f01a 0f01 	tst.w	sl, #1
 800c3de:	d110      	bne.n	800c402 <_dtoa_r+0x6c2>
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	ee18 1a10 	vmov	r1, s16
 800c3e6:	f000 fd17 	bl	800ce18 <_Bfree>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	9800      	ldr	r0, [sp, #0]
 800c3ee:	702b      	strb	r3, [r5, #0]
 800c3f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	6018      	str	r0, [r3, #0]
 800c3f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f43f acf1 	beq.w	800bde0 <_dtoa_r+0xa0>
 800c3fe:	601d      	str	r5, [r3, #0]
 800c400:	e4ee      	b.n	800bde0 <_dtoa_r+0xa0>
 800c402:	9f00      	ldr	r7, [sp, #0]
 800c404:	462b      	mov	r3, r5
 800c406:	461d      	mov	r5, r3
 800c408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c40c:	2a39      	cmp	r2, #57	; 0x39
 800c40e:	d106      	bne.n	800c41e <_dtoa_r+0x6de>
 800c410:	9a01      	ldr	r2, [sp, #4]
 800c412:	429a      	cmp	r2, r3
 800c414:	d1f7      	bne.n	800c406 <_dtoa_r+0x6c6>
 800c416:	9901      	ldr	r1, [sp, #4]
 800c418:	2230      	movs	r2, #48	; 0x30
 800c41a:	3701      	adds	r7, #1
 800c41c:	700a      	strb	r2, [r1, #0]
 800c41e:	781a      	ldrb	r2, [r3, #0]
 800c420:	3201      	adds	r2, #1
 800c422:	701a      	strb	r2, [r3, #0]
 800c424:	e790      	b.n	800c348 <_dtoa_r+0x608>
 800c426:	4ba6      	ldr	r3, [pc, #664]	; (800c6c0 <_dtoa_r+0x980>)
 800c428:	2200      	movs	r2, #0
 800c42a:	f7f4 f8ed 	bl	8000608 <__aeabi_dmul>
 800c42e:	2200      	movs	r2, #0
 800c430:	2300      	movs	r3, #0
 800c432:	4606      	mov	r6, r0
 800c434:	460f      	mov	r7, r1
 800c436:	f7f4 fb4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d09d      	beq.n	800c37a <_dtoa_r+0x63a>
 800c43e:	e7cf      	b.n	800c3e0 <_dtoa_r+0x6a0>
 800c440:	9a08      	ldr	r2, [sp, #32]
 800c442:	2a00      	cmp	r2, #0
 800c444:	f000 80d7 	beq.w	800c5f6 <_dtoa_r+0x8b6>
 800c448:	9a06      	ldr	r2, [sp, #24]
 800c44a:	2a01      	cmp	r2, #1
 800c44c:	f300 80ba 	bgt.w	800c5c4 <_dtoa_r+0x884>
 800c450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c452:	2a00      	cmp	r2, #0
 800c454:	f000 80b2 	beq.w	800c5bc <_dtoa_r+0x87c>
 800c458:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c45c:	9e07      	ldr	r6, [sp, #28]
 800c45e:	9d04      	ldr	r5, [sp, #16]
 800c460:	9a04      	ldr	r2, [sp, #16]
 800c462:	441a      	add	r2, r3
 800c464:	9204      	str	r2, [sp, #16]
 800c466:	9a05      	ldr	r2, [sp, #20]
 800c468:	2101      	movs	r1, #1
 800c46a:	441a      	add	r2, r3
 800c46c:	4620      	mov	r0, r4
 800c46e:	9205      	str	r2, [sp, #20]
 800c470:	f000 fd8a 	bl	800cf88 <__i2b>
 800c474:	4607      	mov	r7, r0
 800c476:	2d00      	cmp	r5, #0
 800c478:	dd0c      	ble.n	800c494 <_dtoa_r+0x754>
 800c47a:	9b05      	ldr	r3, [sp, #20]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	dd09      	ble.n	800c494 <_dtoa_r+0x754>
 800c480:	42ab      	cmp	r3, r5
 800c482:	9a04      	ldr	r2, [sp, #16]
 800c484:	bfa8      	it	ge
 800c486:	462b      	movge	r3, r5
 800c488:	1ad2      	subs	r2, r2, r3
 800c48a:	9204      	str	r2, [sp, #16]
 800c48c:	9a05      	ldr	r2, [sp, #20]
 800c48e:	1aed      	subs	r5, r5, r3
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	9305      	str	r3, [sp, #20]
 800c494:	9b07      	ldr	r3, [sp, #28]
 800c496:	b31b      	cbz	r3, 800c4e0 <_dtoa_r+0x7a0>
 800c498:	9b08      	ldr	r3, [sp, #32]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 80af 	beq.w	800c5fe <_dtoa_r+0x8be>
 800c4a0:	2e00      	cmp	r6, #0
 800c4a2:	dd13      	ble.n	800c4cc <_dtoa_r+0x78c>
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	4632      	mov	r2, r6
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f000 fe2d 	bl	800d108 <__pow5mult>
 800c4ae:	ee18 2a10 	vmov	r2, s16
 800c4b2:	4601      	mov	r1, r0
 800c4b4:	4607      	mov	r7, r0
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f000 fd7c 	bl	800cfb4 <__multiply>
 800c4bc:	ee18 1a10 	vmov	r1, s16
 800c4c0:	4680      	mov	r8, r0
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 fca8 	bl	800ce18 <_Bfree>
 800c4c8:	ee08 8a10 	vmov	s16, r8
 800c4cc:	9b07      	ldr	r3, [sp, #28]
 800c4ce:	1b9a      	subs	r2, r3, r6
 800c4d0:	d006      	beq.n	800c4e0 <_dtoa_r+0x7a0>
 800c4d2:	ee18 1a10 	vmov	r1, s16
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f000 fe16 	bl	800d108 <__pow5mult>
 800c4dc:	ee08 0a10 	vmov	s16, r0
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f000 fd50 	bl	800cf88 <__i2b>
 800c4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	4606      	mov	r6, r0
 800c4ee:	f340 8088 	ble.w	800c602 <_dtoa_r+0x8c2>
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	4601      	mov	r1, r0
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 fe06 	bl	800d108 <__pow5mult>
 800c4fc:	9b06      	ldr	r3, [sp, #24]
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	4606      	mov	r6, r0
 800c502:	f340 8081 	ble.w	800c608 <_dtoa_r+0x8c8>
 800c506:	f04f 0800 	mov.w	r8, #0
 800c50a:	6933      	ldr	r3, [r6, #16]
 800c50c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c510:	6918      	ldr	r0, [r3, #16]
 800c512:	f000 fce9 	bl	800cee8 <__hi0bits>
 800c516:	f1c0 0020 	rsb	r0, r0, #32
 800c51a:	9b05      	ldr	r3, [sp, #20]
 800c51c:	4418      	add	r0, r3
 800c51e:	f010 001f 	ands.w	r0, r0, #31
 800c522:	f000 8092 	beq.w	800c64a <_dtoa_r+0x90a>
 800c526:	f1c0 0320 	rsb	r3, r0, #32
 800c52a:	2b04      	cmp	r3, #4
 800c52c:	f340 808a 	ble.w	800c644 <_dtoa_r+0x904>
 800c530:	f1c0 001c 	rsb	r0, r0, #28
 800c534:	9b04      	ldr	r3, [sp, #16]
 800c536:	4403      	add	r3, r0
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	9b05      	ldr	r3, [sp, #20]
 800c53c:	4403      	add	r3, r0
 800c53e:	4405      	add	r5, r0
 800c540:	9305      	str	r3, [sp, #20]
 800c542:	9b04      	ldr	r3, [sp, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	dd07      	ble.n	800c558 <_dtoa_r+0x818>
 800c548:	ee18 1a10 	vmov	r1, s16
 800c54c:	461a      	mov	r2, r3
 800c54e:	4620      	mov	r0, r4
 800c550:	f000 fe34 	bl	800d1bc <__lshift>
 800c554:	ee08 0a10 	vmov	s16, r0
 800c558:	9b05      	ldr	r3, [sp, #20]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	dd05      	ble.n	800c56a <_dtoa_r+0x82a>
 800c55e:	4631      	mov	r1, r6
 800c560:	461a      	mov	r2, r3
 800c562:	4620      	mov	r0, r4
 800c564:	f000 fe2a 	bl	800d1bc <__lshift>
 800c568:	4606      	mov	r6, r0
 800c56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d06e      	beq.n	800c64e <_dtoa_r+0x90e>
 800c570:	ee18 0a10 	vmov	r0, s16
 800c574:	4631      	mov	r1, r6
 800c576:	f000 fe91 	bl	800d29c <__mcmp>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	da67      	bge.n	800c64e <_dtoa_r+0x90e>
 800c57e:	9b00      	ldr	r3, [sp, #0]
 800c580:	3b01      	subs	r3, #1
 800c582:	ee18 1a10 	vmov	r1, s16
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	220a      	movs	r2, #10
 800c58a:	2300      	movs	r3, #0
 800c58c:	4620      	mov	r0, r4
 800c58e:	f000 fc65 	bl	800ce5c <__multadd>
 800c592:	9b08      	ldr	r3, [sp, #32]
 800c594:	ee08 0a10 	vmov	s16, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f000 81b1 	beq.w	800c900 <_dtoa_r+0xbc0>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	220a      	movs	r2, #10
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f000 fc59 	bl	800ce5c <__multadd>
 800c5aa:	9b02      	ldr	r3, [sp, #8]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	4607      	mov	r7, r0
 800c5b0:	f300 808e 	bgt.w	800c6d0 <_dtoa_r+0x990>
 800c5b4:	9b06      	ldr	r3, [sp, #24]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	dc51      	bgt.n	800c65e <_dtoa_r+0x91e>
 800c5ba:	e089      	b.n	800c6d0 <_dtoa_r+0x990>
 800c5bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5c2:	e74b      	b.n	800c45c <_dtoa_r+0x71c>
 800c5c4:	9b03      	ldr	r3, [sp, #12]
 800c5c6:	1e5e      	subs	r6, r3, #1
 800c5c8:	9b07      	ldr	r3, [sp, #28]
 800c5ca:	42b3      	cmp	r3, r6
 800c5cc:	bfbf      	itttt	lt
 800c5ce:	9b07      	ldrlt	r3, [sp, #28]
 800c5d0:	9607      	strlt	r6, [sp, #28]
 800c5d2:	1af2      	sublt	r2, r6, r3
 800c5d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c5d6:	bfb6      	itet	lt
 800c5d8:	189b      	addlt	r3, r3, r2
 800c5da:	1b9e      	subge	r6, r3, r6
 800c5dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c5de:	9b03      	ldr	r3, [sp, #12]
 800c5e0:	bfb8      	it	lt
 800c5e2:	2600      	movlt	r6, #0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	bfb7      	itett	lt
 800c5e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c5ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c5f0:	1a9d      	sublt	r5, r3, r2
 800c5f2:	2300      	movlt	r3, #0
 800c5f4:	e734      	b.n	800c460 <_dtoa_r+0x720>
 800c5f6:	9e07      	ldr	r6, [sp, #28]
 800c5f8:	9d04      	ldr	r5, [sp, #16]
 800c5fa:	9f08      	ldr	r7, [sp, #32]
 800c5fc:	e73b      	b.n	800c476 <_dtoa_r+0x736>
 800c5fe:	9a07      	ldr	r2, [sp, #28]
 800c600:	e767      	b.n	800c4d2 <_dtoa_r+0x792>
 800c602:	9b06      	ldr	r3, [sp, #24]
 800c604:	2b01      	cmp	r3, #1
 800c606:	dc18      	bgt.n	800c63a <_dtoa_r+0x8fa>
 800c608:	f1ba 0f00 	cmp.w	sl, #0
 800c60c:	d115      	bne.n	800c63a <_dtoa_r+0x8fa>
 800c60e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c612:	b993      	cbnz	r3, 800c63a <_dtoa_r+0x8fa>
 800c614:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c618:	0d1b      	lsrs	r3, r3, #20
 800c61a:	051b      	lsls	r3, r3, #20
 800c61c:	b183      	cbz	r3, 800c640 <_dtoa_r+0x900>
 800c61e:	9b04      	ldr	r3, [sp, #16]
 800c620:	3301      	adds	r3, #1
 800c622:	9304      	str	r3, [sp, #16]
 800c624:	9b05      	ldr	r3, [sp, #20]
 800c626:	3301      	adds	r3, #1
 800c628:	9305      	str	r3, [sp, #20]
 800c62a:	f04f 0801 	mov.w	r8, #1
 800c62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c630:	2b00      	cmp	r3, #0
 800c632:	f47f af6a 	bne.w	800c50a <_dtoa_r+0x7ca>
 800c636:	2001      	movs	r0, #1
 800c638:	e76f      	b.n	800c51a <_dtoa_r+0x7da>
 800c63a:	f04f 0800 	mov.w	r8, #0
 800c63e:	e7f6      	b.n	800c62e <_dtoa_r+0x8ee>
 800c640:	4698      	mov	r8, r3
 800c642:	e7f4      	b.n	800c62e <_dtoa_r+0x8ee>
 800c644:	f43f af7d 	beq.w	800c542 <_dtoa_r+0x802>
 800c648:	4618      	mov	r0, r3
 800c64a:	301c      	adds	r0, #28
 800c64c:	e772      	b.n	800c534 <_dtoa_r+0x7f4>
 800c64e:	9b03      	ldr	r3, [sp, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	dc37      	bgt.n	800c6c4 <_dtoa_r+0x984>
 800c654:	9b06      	ldr	r3, [sp, #24]
 800c656:	2b02      	cmp	r3, #2
 800c658:	dd34      	ble.n	800c6c4 <_dtoa_r+0x984>
 800c65a:	9b03      	ldr	r3, [sp, #12]
 800c65c:	9302      	str	r3, [sp, #8]
 800c65e:	9b02      	ldr	r3, [sp, #8]
 800c660:	b96b      	cbnz	r3, 800c67e <_dtoa_r+0x93e>
 800c662:	4631      	mov	r1, r6
 800c664:	2205      	movs	r2, #5
 800c666:	4620      	mov	r0, r4
 800c668:	f000 fbf8 	bl	800ce5c <__multadd>
 800c66c:	4601      	mov	r1, r0
 800c66e:	4606      	mov	r6, r0
 800c670:	ee18 0a10 	vmov	r0, s16
 800c674:	f000 fe12 	bl	800d29c <__mcmp>
 800c678:	2800      	cmp	r0, #0
 800c67a:	f73f adbb 	bgt.w	800c1f4 <_dtoa_r+0x4b4>
 800c67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c680:	9d01      	ldr	r5, [sp, #4]
 800c682:	43db      	mvns	r3, r3
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	f04f 0800 	mov.w	r8, #0
 800c68a:	4631      	mov	r1, r6
 800c68c:	4620      	mov	r0, r4
 800c68e:	f000 fbc3 	bl	800ce18 <_Bfree>
 800c692:	2f00      	cmp	r7, #0
 800c694:	f43f aea4 	beq.w	800c3e0 <_dtoa_r+0x6a0>
 800c698:	f1b8 0f00 	cmp.w	r8, #0
 800c69c:	d005      	beq.n	800c6aa <_dtoa_r+0x96a>
 800c69e:	45b8      	cmp	r8, r7
 800c6a0:	d003      	beq.n	800c6aa <_dtoa_r+0x96a>
 800c6a2:	4641      	mov	r1, r8
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 fbb7 	bl	800ce18 <_Bfree>
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f000 fbb3 	bl	800ce18 <_Bfree>
 800c6b2:	e695      	b.n	800c3e0 <_dtoa_r+0x6a0>
 800c6b4:	2600      	movs	r6, #0
 800c6b6:	4637      	mov	r7, r6
 800c6b8:	e7e1      	b.n	800c67e <_dtoa_r+0x93e>
 800c6ba:	9700      	str	r7, [sp, #0]
 800c6bc:	4637      	mov	r7, r6
 800c6be:	e599      	b.n	800c1f4 <_dtoa_r+0x4b4>
 800c6c0:	40240000 	.word	0x40240000
 800c6c4:	9b08      	ldr	r3, [sp, #32]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 80ca 	beq.w	800c860 <_dtoa_r+0xb20>
 800c6cc:	9b03      	ldr	r3, [sp, #12]
 800c6ce:	9302      	str	r3, [sp, #8]
 800c6d0:	2d00      	cmp	r5, #0
 800c6d2:	dd05      	ble.n	800c6e0 <_dtoa_r+0x9a0>
 800c6d4:	4639      	mov	r1, r7
 800c6d6:	462a      	mov	r2, r5
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f000 fd6f 	bl	800d1bc <__lshift>
 800c6de:	4607      	mov	r7, r0
 800c6e0:	f1b8 0f00 	cmp.w	r8, #0
 800c6e4:	d05b      	beq.n	800c79e <_dtoa_r+0xa5e>
 800c6e6:	6879      	ldr	r1, [r7, #4]
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 fb55 	bl	800cd98 <_Balloc>
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	b928      	cbnz	r0, 800c6fe <_dtoa_r+0x9be>
 800c6f2:	4b87      	ldr	r3, [pc, #540]	; (800c910 <_dtoa_r+0xbd0>)
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c6fa:	f7ff bb3b 	b.w	800bd74 <_dtoa_r+0x34>
 800c6fe:	693a      	ldr	r2, [r7, #16]
 800c700:	3202      	adds	r2, #2
 800c702:	0092      	lsls	r2, r2, #2
 800c704:	f107 010c 	add.w	r1, r7, #12
 800c708:	300c      	adds	r0, #12
 800c70a:	f000 fb2b 	bl	800cd64 <memcpy>
 800c70e:	2201      	movs	r2, #1
 800c710:	4629      	mov	r1, r5
 800c712:	4620      	mov	r0, r4
 800c714:	f000 fd52 	bl	800d1bc <__lshift>
 800c718:	9b01      	ldr	r3, [sp, #4]
 800c71a:	f103 0901 	add.w	r9, r3, #1
 800c71e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c722:	4413      	add	r3, r2
 800c724:	9305      	str	r3, [sp, #20]
 800c726:	f00a 0301 	and.w	r3, sl, #1
 800c72a:	46b8      	mov	r8, r7
 800c72c:	9304      	str	r3, [sp, #16]
 800c72e:	4607      	mov	r7, r0
 800c730:	4631      	mov	r1, r6
 800c732:	ee18 0a10 	vmov	r0, s16
 800c736:	f7ff fa77 	bl	800bc28 <quorem>
 800c73a:	4641      	mov	r1, r8
 800c73c:	9002      	str	r0, [sp, #8]
 800c73e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c742:	ee18 0a10 	vmov	r0, s16
 800c746:	f000 fda9 	bl	800d29c <__mcmp>
 800c74a:	463a      	mov	r2, r7
 800c74c:	9003      	str	r0, [sp, #12]
 800c74e:	4631      	mov	r1, r6
 800c750:	4620      	mov	r0, r4
 800c752:	f000 fdbf 	bl	800d2d4 <__mdiff>
 800c756:	68c2      	ldr	r2, [r0, #12]
 800c758:	f109 3bff 	add.w	fp, r9, #4294967295
 800c75c:	4605      	mov	r5, r0
 800c75e:	bb02      	cbnz	r2, 800c7a2 <_dtoa_r+0xa62>
 800c760:	4601      	mov	r1, r0
 800c762:	ee18 0a10 	vmov	r0, s16
 800c766:	f000 fd99 	bl	800d29c <__mcmp>
 800c76a:	4602      	mov	r2, r0
 800c76c:	4629      	mov	r1, r5
 800c76e:	4620      	mov	r0, r4
 800c770:	9207      	str	r2, [sp, #28]
 800c772:	f000 fb51 	bl	800ce18 <_Bfree>
 800c776:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c77a:	ea43 0102 	orr.w	r1, r3, r2
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	430b      	orrs	r3, r1
 800c782:	464d      	mov	r5, r9
 800c784:	d10f      	bne.n	800c7a6 <_dtoa_r+0xa66>
 800c786:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c78a:	d02a      	beq.n	800c7e2 <_dtoa_r+0xaa2>
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	dd02      	ble.n	800c798 <_dtoa_r+0xa58>
 800c792:	9b02      	ldr	r3, [sp, #8]
 800c794:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c798:	f88b a000 	strb.w	sl, [fp]
 800c79c:	e775      	b.n	800c68a <_dtoa_r+0x94a>
 800c79e:	4638      	mov	r0, r7
 800c7a0:	e7ba      	b.n	800c718 <_dtoa_r+0x9d8>
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	e7e2      	b.n	800c76c <_dtoa_r+0xa2c>
 800c7a6:	9b03      	ldr	r3, [sp, #12]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	db04      	blt.n	800c7b6 <_dtoa_r+0xa76>
 800c7ac:	9906      	ldr	r1, [sp, #24]
 800c7ae:	430b      	orrs	r3, r1
 800c7b0:	9904      	ldr	r1, [sp, #16]
 800c7b2:	430b      	orrs	r3, r1
 800c7b4:	d122      	bne.n	800c7fc <_dtoa_r+0xabc>
 800c7b6:	2a00      	cmp	r2, #0
 800c7b8:	ddee      	ble.n	800c798 <_dtoa_r+0xa58>
 800c7ba:	ee18 1a10 	vmov	r1, s16
 800c7be:	2201      	movs	r2, #1
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f000 fcfb 	bl	800d1bc <__lshift>
 800c7c6:	4631      	mov	r1, r6
 800c7c8:	ee08 0a10 	vmov	s16, r0
 800c7cc:	f000 fd66 	bl	800d29c <__mcmp>
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	dc03      	bgt.n	800c7dc <_dtoa_r+0xa9c>
 800c7d4:	d1e0      	bne.n	800c798 <_dtoa_r+0xa58>
 800c7d6:	f01a 0f01 	tst.w	sl, #1
 800c7da:	d0dd      	beq.n	800c798 <_dtoa_r+0xa58>
 800c7dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7e0:	d1d7      	bne.n	800c792 <_dtoa_r+0xa52>
 800c7e2:	2339      	movs	r3, #57	; 0x39
 800c7e4:	f88b 3000 	strb.w	r3, [fp]
 800c7e8:	462b      	mov	r3, r5
 800c7ea:	461d      	mov	r5, r3
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c7f2:	2a39      	cmp	r2, #57	; 0x39
 800c7f4:	d071      	beq.n	800c8da <_dtoa_r+0xb9a>
 800c7f6:	3201      	adds	r2, #1
 800c7f8:	701a      	strb	r2, [r3, #0]
 800c7fa:	e746      	b.n	800c68a <_dtoa_r+0x94a>
 800c7fc:	2a00      	cmp	r2, #0
 800c7fe:	dd07      	ble.n	800c810 <_dtoa_r+0xad0>
 800c800:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c804:	d0ed      	beq.n	800c7e2 <_dtoa_r+0xaa2>
 800c806:	f10a 0301 	add.w	r3, sl, #1
 800c80a:	f88b 3000 	strb.w	r3, [fp]
 800c80e:	e73c      	b.n	800c68a <_dtoa_r+0x94a>
 800c810:	9b05      	ldr	r3, [sp, #20]
 800c812:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c816:	4599      	cmp	r9, r3
 800c818:	d047      	beq.n	800c8aa <_dtoa_r+0xb6a>
 800c81a:	ee18 1a10 	vmov	r1, s16
 800c81e:	2300      	movs	r3, #0
 800c820:	220a      	movs	r2, #10
 800c822:	4620      	mov	r0, r4
 800c824:	f000 fb1a 	bl	800ce5c <__multadd>
 800c828:	45b8      	cmp	r8, r7
 800c82a:	ee08 0a10 	vmov	s16, r0
 800c82e:	f04f 0300 	mov.w	r3, #0
 800c832:	f04f 020a 	mov.w	r2, #10
 800c836:	4641      	mov	r1, r8
 800c838:	4620      	mov	r0, r4
 800c83a:	d106      	bne.n	800c84a <_dtoa_r+0xb0a>
 800c83c:	f000 fb0e 	bl	800ce5c <__multadd>
 800c840:	4680      	mov	r8, r0
 800c842:	4607      	mov	r7, r0
 800c844:	f109 0901 	add.w	r9, r9, #1
 800c848:	e772      	b.n	800c730 <_dtoa_r+0x9f0>
 800c84a:	f000 fb07 	bl	800ce5c <__multadd>
 800c84e:	4639      	mov	r1, r7
 800c850:	4680      	mov	r8, r0
 800c852:	2300      	movs	r3, #0
 800c854:	220a      	movs	r2, #10
 800c856:	4620      	mov	r0, r4
 800c858:	f000 fb00 	bl	800ce5c <__multadd>
 800c85c:	4607      	mov	r7, r0
 800c85e:	e7f1      	b.n	800c844 <_dtoa_r+0xb04>
 800c860:	9b03      	ldr	r3, [sp, #12]
 800c862:	9302      	str	r3, [sp, #8]
 800c864:	9d01      	ldr	r5, [sp, #4]
 800c866:	ee18 0a10 	vmov	r0, s16
 800c86a:	4631      	mov	r1, r6
 800c86c:	f7ff f9dc 	bl	800bc28 <quorem>
 800c870:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c874:	9b01      	ldr	r3, [sp, #4]
 800c876:	f805 ab01 	strb.w	sl, [r5], #1
 800c87a:	1aea      	subs	r2, r5, r3
 800c87c:	9b02      	ldr	r3, [sp, #8]
 800c87e:	4293      	cmp	r3, r2
 800c880:	dd09      	ble.n	800c896 <_dtoa_r+0xb56>
 800c882:	ee18 1a10 	vmov	r1, s16
 800c886:	2300      	movs	r3, #0
 800c888:	220a      	movs	r2, #10
 800c88a:	4620      	mov	r0, r4
 800c88c:	f000 fae6 	bl	800ce5c <__multadd>
 800c890:	ee08 0a10 	vmov	s16, r0
 800c894:	e7e7      	b.n	800c866 <_dtoa_r+0xb26>
 800c896:	9b02      	ldr	r3, [sp, #8]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	bfc8      	it	gt
 800c89c:	461d      	movgt	r5, r3
 800c89e:	9b01      	ldr	r3, [sp, #4]
 800c8a0:	bfd8      	it	le
 800c8a2:	2501      	movle	r5, #1
 800c8a4:	441d      	add	r5, r3
 800c8a6:	f04f 0800 	mov.w	r8, #0
 800c8aa:	ee18 1a10 	vmov	r1, s16
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f000 fc83 	bl	800d1bc <__lshift>
 800c8b6:	4631      	mov	r1, r6
 800c8b8:	ee08 0a10 	vmov	s16, r0
 800c8bc:	f000 fcee 	bl	800d29c <__mcmp>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	dc91      	bgt.n	800c7e8 <_dtoa_r+0xaa8>
 800c8c4:	d102      	bne.n	800c8cc <_dtoa_r+0xb8c>
 800c8c6:	f01a 0f01 	tst.w	sl, #1
 800c8ca:	d18d      	bne.n	800c7e8 <_dtoa_r+0xaa8>
 800c8cc:	462b      	mov	r3, r5
 800c8ce:	461d      	mov	r5, r3
 800c8d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8d4:	2a30      	cmp	r2, #48	; 0x30
 800c8d6:	d0fa      	beq.n	800c8ce <_dtoa_r+0xb8e>
 800c8d8:	e6d7      	b.n	800c68a <_dtoa_r+0x94a>
 800c8da:	9a01      	ldr	r2, [sp, #4]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d184      	bne.n	800c7ea <_dtoa_r+0xaaa>
 800c8e0:	9b00      	ldr	r3, [sp, #0]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	2331      	movs	r3, #49	; 0x31
 800c8e8:	7013      	strb	r3, [r2, #0]
 800c8ea:	e6ce      	b.n	800c68a <_dtoa_r+0x94a>
 800c8ec:	4b09      	ldr	r3, [pc, #36]	; (800c914 <_dtoa_r+0xbd4>)
 800c8ee:	f7ff ba95 	b.w	800be1c <_dtoa_r+0xdc>
 800c8f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f47f aa6e 	bne.w	800bdd6 <_dtoa_r+0x96>
 800c8fa:	4b07      	ldr	r3, [pc, #28]	; (800c918 <_dtoa_r+0xbd8>)
 800c8fc:	f7ff ba8e 	b.w	800be1c <_dtoa_r+0xdc>
 800c900:	9b02      	ldr	r3, [sp, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	dcae      	bgt.n	800c864 <_dtoa_r+0xb24>
 800c906:	9b06      	ldr	r3, [sp, #24]
 800c908:	2b02      	cmp	r3, #2
 800c90a:	f73f aea8 	bgt.w	800c65e <_dtoa_r+0x91e>
 800c90e:	e7a9      	b.n	800c864 <_dtoa_r+0xb24>
 800c910:	0800e29f 	.word	0x0800e29f
 800c914:	0800e1fc 	.word	0x0800e1fc
 800c918:	0800e220 	.word	0x0800e220

0800c91c <__sflush_r>:
 800c91c:	898a      	ldrh	r2, [r1, #12]
 800c91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c922:	4605      	mov	r5, r0
 800c924:	0710      	lsls	r0, r2, #28
 800c926:	460c      	mov	r4, r1
 800c928:	d458      	bmi.n	800c9dc <__sflush_r+0xc0>
 800c92a:	684b      	ldr	r3, [r1, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dc05      	bgt.n	800c93c <__sflush_r+0x20>
 800c930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c932:	2b00      	cmp	r3, #0
 800c934:	dc02      	bgt.n	800c93c <__sflush_r+0x20>
 800c936:	2000      	movs	r0, #0
 800c938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c93e:	2e00      	cmp	r6, #0
 800c940:	d0f9      	beq.n	800c936 <__sflush_r+0x1a>
 800c942:	2300      	movs	r3, #0
 800c944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c948:	682f      	ldr	r7, [r5, #0]
 800c94a:	602b      	str	r3, [r5, #0]
 800c94c:	d032      	beq.n	800c9b4 <__sflush_r+0x98>
 800c94e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c950:	89a3      	ldrh	r3, [r4, #12]
 800c952:	075a      	lsls	r2, r3, #29
 800c954:	d505      	bpl.n	800c962 <__sflush_r+0x46>
 800c956:	6863      	ldr	r3, [r4, #4]
 800c958:	1ac0      	subs	r0, r0, r3
 800c95a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c95c:	b10b      	cbz	r3, 800c962 <__sflush_r+0x46>
 800c95e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c960:	1ac0      	subs	r0, r0, r3
 800c962:	2300      	movs	r3, #0
 800c964:	4602      	mov	r2, r0
 800c966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c968:	6a21      	ldr	r1, [r4, #32]
 800c96a:	4628      	mov	r0, r5
 800c96c:	47b0      	blx	r6
 800c96e:	1c43      	adds	r3, r0, #1
 800c970:	89a3      	ldrh	r3, [r4, #12]
 800c972:	d106      	bne.n	800c982 <__sflush_r+0x66>
 800c974:	6829      	ldr	r1, [r5, #0]
 800c976:	291d      	cmp	r1, #29
 800c978:	d82c      	bhi.n	800c9d4 <__sflush_r+0xb8>
 800c97a:	4a2a      	ldr	r2, [pc, #168]	; (800ca24 <__sflush_r+0x108>)
 800c97c:	40ca      	lsrs	r2, r1
 800c97e:	07d6      	lsls	r6, r2, #31
 800c980:	d528      	bpl.n	800c9d4 <__sflush_r+0xb8>
 800c982:	2200      	movs	r2, #0
 800c984:	6062      	str	r2, [r4, #4]
 800c986:	04d9      	lsls	r1, r3, #19
 800c988:	6922      	ldr	r2, [r4, #16]
 800c98a:	6022      	str	r2, [r4, #0]
 800c98c:	d504      	bpl.n	800c998 <__sflush_r+0x7c>
 800c98e:	1c42      	adds	r2, r0, #1
 800c990:	d101      	bne.n	800c996 <__sflush_r+0x7a>
 800c992:	682b      	ldr	r3, [r5, #0]
 800c994:	b903      	cbnz	r3, 800c998 <__sflush_r+0x7c>
 800c996:	6560      	str	r0, [r4, #84]	; 0x54
 800c998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c99a:	602f      	str	r7, [r5, #0]
 800c99c:	2900      	cmp	r1, #0
 800c99e:	d0ca      	beq.n	800c936 <__sflush_r+0x1a>
 800c9a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9a4:	4299      	cmp	r1, r3
 800c9a6:	d002      	beq.n	800c9ae <__sflush_r+0x92>
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	f7fe fa8d 	bl	800aec8 <_free_r>
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	6360      	str	r0, [r4, #52]	; 0x34
 800c9b2:	e7c1      	b.n	800c938 <__sflush_r+0x1c>
 800c9b4:	6a21      	ldr	r1, [r4, #32]
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	47b0      	blx	r6
 800c9bc:	1c41      	adds	r1, r0, #1
 800c9be:	d1c7      	bne.n	800c950 <__sflush_r+0x34>
 800c9c0:	682b      	ldr	r3, [r5, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0c4      	beq.n	800c950 <__sflush_r+0x34>
 800c9c6:	2b1d      	cmp	r3, #29
 800c9c8:	d001      	beq.n	800c9ce <__sflush_r+0xb2>
 800c9ca:	2b16      	cmp	r3, #22
 800c9cc:	d101      	bne.n	800c9d2 <__sflush_r+0xb6>
 800c9ce:	602f      	str	r7, [r5, #0]
 800c9d0:	e7b1      	b.n	800c936 <__sflush_r+0x1a>
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9d8:	81a3      	strh	r3, [r4, #12]
 800c9da:	e7ad      	b.n	800c938 <__sflush_r+0x1c>
 800c9dc:	690f      	ldr	r7, [r1, #16]
 800c9de:	2f00      	cmp	r7, #0
 800c9e0:	d0a9      	beq.n	800c936 <__sflush_r+0x1a>
 800c9e2:	0793      	lsls	r3, r2, #30
 800c9e4:	680e      	ldr	r6, [r1, #0]
 800c9e6:	bf08      	it	eq
 800c9e8:	694b      	ldreq	r3, [r1, #20]
 800c9ea:	600f      	str	r7, [r1, #0]
 800c9ec:	bf18      	it	ne
 800c9ee:	2300      	movne	r3, #0
 800c9f0:	eba6 0807 	sub.w	r8, r6, r7
 800c9f4:	608b      	str	r3, [r1, #8]
 800c9f6:	f1b8 0f00 	cmp.w	r8, #0
 800c9fa:	dd9c      	ble.n	800c936 <__sflush_r+0x1a>
 800c9fc:	6a21      	ldr	r1, [r4, #32]
 800c9fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca00:	4643      	mov	r3, r8
 800ca02:	463a      	mov	r2, r7
 800ca04:	4628      	mov	r0, r5
 800ca06:	47b0      	blx	r6
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	dc06      	bgt.n	800ca1a <__sflush_r+0xfe>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	f04f 30ff 	mov.w	r0, #4294967295
 800ca18:	e78e      	b.n	800c938 <__sflush_r+0x1c>
 800ca1a:	4407      	add	r7, r0
 800ca1c:	eba8 0800 	sub.w	r8, r8, r0
 800ca20:	e7e9      	b.n	800c9f6 <__sflush_r+0xda>
 800ca22:	bf00      	nop
 800ca24:	20400001 	.word	0x20400001

0800ca28 <_fflush_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	690b      	ldr	r3, [r1, #16]
 800ca2c:	4605      	mov	r5, r0
 800ca2e:	460c      	mov	r4, r1
 800ca30:	b913      	cbnz	r3, 800ca38 <_fflush_r+0x10>
 800ca32:	2500      	movs	r5, #0
 800ca34:	4628      	mov	r0, r5
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	b118      	cbz	r0, 800ca42 <_fflush_r+0x1a>
 800ca3a:	6983      	ldr	r3, [r0, #24]
 800ca3c:	b90b      	cbnz	r3, 800ca42 <_fflush_r+0x1a>
 800ca3e:	f000 f887 	bl	800cb50 <__sinit>
 800ca42:	4b14      	ldr	r3, [pc, #80]	; (800ca94 <_fflush_r+0x6c>)
 800ca44:	429c      	cmp	r4, r3
 800ca46:	d11b      	bne.n	800ca80 <_fflush_r+0x58>
 800ca48:	686c      	ldr	r4, [r5, #4]
 800ca4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0ef      	beq.n	800ca32 <_fflush_r+0xa>
 800ca52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca54:	07d0      	lsls	r0, r2, #31
 800ca56:	d404      	bmi.n	800ca62 <_fflush_r+0x3a>
 800ca58:	0599      	lsls	r1, r3, #22
 800ca5a:	d402      	bmi.n	800ca62 <_fflush_r+0x3a>
 800ca5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca5e:	f000 f91a 	bl	800cc96 <__retarget_lock_acquire_recursive>
 800ca62:	4628      	mov	r0, r5
 800ca64:	4621      	mov	r1, r4
 800ca66:	f7ff ff59 	bl	800c91c <__sflush_r>
 800ca6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca6c:	07da      	lsls	r2, r3, #31
 800ca6e:	4605      	mov	r5, r0
 800ca70:	d4e0      	bmi.n	800ca34 <_fflush_r+0xc>
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	059b      	lsls	r3, r3, #22
 800ca76:	d4dd      	bmi.n	800ca34 <_fflush_r+0xc>
 800ca78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca7a:	f000 f90d 	bl	800cc98 <__retarget_lock_release_recursive>
 800ca7e:	e7d9      	b.n	800ca34 <_fflush_r+0xc>
 800ca80:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <_fflush_r+0x70>)
 800ca82:	429c      	cmp	r4, r3
 800ca84:	d101      	bne.n	800ca8a <_fflush_r+0x62>
 800ca86:	68ac      	ldr	r4, [r5, #8]
 800ca88:	e7df      	b.n	800ca4a <_fflush_r+0x22>
 800ca8a:	4b04      	ldr	r3, [pc, #16]	; (800ca9c <_fflush_r+0x74>)
 800ca8c:	429c      	cmp	r4, r3
 800ca8e:	bf08      	it	eq
 800ca90:	68ec      	ldreq	r4, [r5, #12]
 800ca92:	e7da      	b.n	800ca4a <_fflush_r+0x22>
 800ca94:	0800e2d0 	.word	0x0800e2d0
 800ca98:	0800e2f0 	.word	0x0800e2f0
 800ca9c:	0800e2b0 	.word	0x0800e2b0

0800caa0 <std>:
 800caa0:	2300      	movs	r3, #0
 800caa2:	b510      	push	{r4, lr}
 800caa4:	4604      	mov	r4, r0
 800caa6:	e9c0 3300 	strd	r3, r3, [r0]
 800caaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caae:	6083      	str	r3, [r0, #8]
 800cab0:	8181      	strh	r1, [r0, #12]
 800cab2:	6643      	str	r3, [r0, #100]	; 0x64
 800cab4:	81c2      	strh	r2, [r0, #14]
 800cab6:	6183      	str	r3, [r0, #24]
 800cab8:	4619      	mov	r1, r3
 800caba:	2208      	movs	r2, #8
 800cabc:	305c      	adds	r0, #92	; 0x5c
 800cabe:	f7fe f9fb 	bl	800aeb8 <memset>
 800cac2:	4b05      	ldr	r3, [pc, #20]	; (800cad8 <std+0x38>)
 800cac4:	6263      	str	r3, [r4, #36]	; 0x24
 800cac6:	4b05      	ldr	r3, [pc, #20]	; (800cadc <std+0x3c>)
 800cac8:	62a3      	str	r3, [r4, #40]	; 0x28
 800caca:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <std+0x40>)
 800cacc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cace:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <std+0x44>)
 800cad0:	6224      	str	r4, [r4, #32]
 800cad2:	6323      	str	r3, [r4, #48]	; 0x30
 800cad4:	bd10      	pop	{r4, pc}
 800cad6:	bf00      	nop
 800cad8:	0800d781 	.word	0x0800d781
 800cadc:	0800d7a3 	.word	0x0800d7a3
 800cae0:	0800d7db 	.word	0x0800d7db
 800cae4:	0800d7ff 	.word	0x0800d7ff

0800cae8 <_cleanup_r>:
 800cae8:	4901      	ldr	r1, [pc, #4]	; (800caf0 <_cleanup_r+0x8>)
 800caea:	f000 b8af 	b.w	800cc4c <_fwalk_reent>
 800caee:	bf00      	nop
 800caf0:	0800ca29 	.word	0x0800ca29

0800caf4 <__sfmoreglue>:
 800caf4:	b570      	push	{r4, r5, r6, lr}
 800caf6:	2268      	movs	r2, #104	; 0x68
 800caf8:	1e4d      	subs	r5, r1, #1
 800cafa:	4355      	muls	r5, r2
 800cafc:	460e      	mov	r6, r1
 800cafe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb02:	f7fe fa4d 	bl	800afa0 <_malloc_r>
 800cb06:	4604      	mov	r4, r0
 800cb08:	b140      	cbz	r0, 800cb1c <__sfmoreglue+0x28>
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	e9c0 1600 	strd	r1, r6, [r0]
 800cb10:	300c      	adds	r0, #12
 800cb12:	60a0      	str	r0, [r4, #8]
 800cb14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb18:	f7fe f9ce 	bl	800aeb8 <memset>
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	bd70      	pop	{r4, r5, r6, pc}

0800cb20 <__sfp_lock_acquire>:
 800cb20:	4801      	ldr	r0, [pc, #4]	; (800cb28 <__sfp_lock_acquire+0x8>)
 800cb22:	f000 b8b8 	b.w	800cc96 <__retarget_lock_acquire_recursive>
 800cb26:	bf00      	nop
 800cb28:	200019ad 	.word	0x200019ad

0800cb2c <__sfp_lock_release>:
 800cb2c:	4801      	ldr	r0, [pc, #4]	; (800cb34 <__sfp_lock_release+0x8>)
 800cb2e:	f000 b8b3 	b.w	800cc98 <__retarget_lock_release_recursive>
 800cb32:	bf00      	nop
 800cb34:	200019ad 	.word	0x200019ad

0800cb38 <__sinit_lock_acquire>:
 800cb38:	4801      	ldr	r0, [pc, #4]	; (800cb40 <__sinit_lock_acquire+0x8>)
 800cb3a:	f000 b8ac 	b.w	800cc96 <__retarget_lock_acquire_recursive>
 800cb3e:	bf00      	nop
 800cb40:	200019ae 	.word	0x200019ae

0800cb44 <__sinit_lock_release>:
 800cb44:	4801      	ldr	r0, [pc, #4]	; (800cb4c <__sinit_lock_release+0x8>)
 800cb46:	f000 b8a7 	b.w	800cc98 <__retarget_lock_release_recursive>
 800cb4a:	bf00      	nop
 800cb4c:	200019ae 	.word	0x200019ae

0800cb50 <__sinit>:
 800cb50:	b510      	push	{r4, lr}
 800cb52:	4604      	mov	r4, r0
 800cb54:	f7ff fff0 	bl	800cb38 <__sinit_lock_acquire>
 800cb58:	69a3      	ldr	r3, [r4, #24]
 800cb5a:	b11b      	cbz	r3, 800cb64 <__sinit+0x14>
 800cb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb60:	f7ff bff0 	b.w	800cb44 <__sinit_lock_release>
 800cb64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb68:	6523      	str	r3, [r4, #80]	; 0x50
 800cb6a:	4b13      	ldr	r3, [pc, #76]	; (800cbb8 <__sinit+0x68>)
 800cb6c:	4a13      	ldr	r2, [pc, #76]	; (800cbbc <__sinit+0x6c>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb72:	42a3      	cmp	r3, r4
 800cb74:	bf04      	itt	eq
 800cb76:	2301      	moveq	r3, #1
 800cb78:	61a3      	streq	r3, [r4, #24]
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 f820 	bl	800cbc0 <__sfp>
 800cb80:	6060      	str	r0, [r4, #4]
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 f81c 	bl	800cbc0 <__sfp>
 800cb88:	60a0      	str	r0, [r4, #8]
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f000 f818 	bl	800cbc0 <__sfp>
 800cb90:	2200      	movs	r2, #0
 800cb92:	60e0      	str	r0, [r4, #12]
 800cb94:	2104      	movs	r1, #4
 800cb96:	6860      	ldr	r0, [r4, #4]
 800cb98:	f7ff ff82 	bl	800caa0 <std>
 800cb9c:	68a0      	ldr	r0, [r4, #8]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	2109      	movs	r1, #9
 800cba2:	f7ff ff7d 	bl	800caa0 <std>
 800cba6:	68e0      	ldr	r0, [r4, #12]
 800cba8:	2202      	movs	r2, #2
 800cbaa:	2112      	movs	r1, #18
 800cbac:	f7ff ff78 	bl	800caa0 <std>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	61a3      	str	r3, [r4, #24]
 800cbb4:	e7d2      	b.n	800cb5c <__sinit+0xc>
 800cbb6:	bf00      	nop
 800cbb8:	0800e1e8 	.word	0x0800e1e8
 800cbbc:	0800cae9 	.word	0x0800cae9

0800cbc0 <__sfp>:
 800cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	f7ff ffac 	bl	800cb20 <__sfp_lock_acquire>
 800cbc8:	4b1e      	ldr	r3, [pc, #120]	; (800cc44 <__sfp+0x84>)
 800cbca:	681e      	ldr	r6, [r3, #0]
 800cbcc:	69b3      	ldr	r3, [r6, #24]
 800cbce:	b913      	cbnz	r3, 800cbd6 <__sfp+0x16>
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f7ff ffbd 	bl	800cb50 <__sinit>
 800cbd6:	3648      	adds	r6, #72	; 0x48
 800cbd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	d503      	bpl.n	800cbe8 <__sfp+0x28>
 800cbe0:	6833      	ldr	r3, [r6, #0]
 800cbe2:	b30b      	cbz	r3, 800cc28 <__sfp+0x68>
 800cbe4:	6836      	ldr	r6, [r6, #0]
 800cbe6:	e7f7      	b.n	800cbd8 <__sfp+0x18>
 800cbe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbec:	b9d5      	cbnz	r5, 800cc24 <__sfp+0x64>
 800cbee:	4b16      	ldr	r3, [pc, #88]	; (800cc48 <__sfp+0x88>)
 800cbf0:	60e3      	str	r3, [r4, #12]
 800cbf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbf6:	6665      	str	r5, [r4, #100]	; 0x64
 800cbf8:	f000 f84c 	bl	800cc94 <__retarget_lock_init_recursive>
 800cbfc:	f7ff ff96 	bl	800cb2c <__sfp_lock_release>
 800cc00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc08:	6025      	str	r5, [r4, #0]
 800cc0a:	61a5      	str	r5, [r4, #24]
 800cc0c:	2208      	movs	r2, #8
 800cc0e:	4629      	mov	r1, r5
 800cc10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc14:	f7fe f950 	bl	800aeb8 <memset>
 800cc18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc20:	4620      	mov	r0, r4
 800cc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc24:	3468      	adds	r4, #104	; 0x68
 800cc26:	e7d9      	b.n	800cbdc <__sfp+0x1c>
 800cc28:	2104      	movs	r1, #4
 800cc2a:	4638      	mov	r0, r7
 800cc2c:	f7ff ff62 	bl	800caf4 <__sfmoreglue>
 800cc30:	4604      	mov	r4, r0
 800cc32:	6030      	str	r0, [r6, #0]
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d1d5      	bne.n	800cbe4 <__sfp+0x24>
 800cc38:	f7ff ff78 	bl	800cb2c <__sfp_lock_release>
 800cc3c:	230c      	movs	r3, #12
 800cc3e:	603b      	str	r3, [r7, #0]
 800cc40:	e7ee      	b.n	800cc20 <__sfp+0x60>
 800cc42:	bf00      	nop
 800cc44:	0800e1e8 	.word	0x0800e1e8
 800cc48:	ffff0001 	.word	0xffff0001

0800cc4c <_fwalk_reent>:
 800cc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc50:	4606      	mov	r6, r0
 800cc52:	4688      	mov	r8, r1
 800cc54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc58:	2700      	movs	r7, #0
 800cc5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc5e:	f1b9 0901 	subs.w	r9, r9, #1
 800cc62:	d505      	bpl.n	800cc70 <_fwalk_reent+0x24>
 800cc64:	6824      	ldr	r4, [r4, #0]
 800cc66:	2c00      	cmp	r4, #0
 800cc68:	d1f7      	bne.n	800cc5a <_fwalk_reent+0xe>
 800cc6a:	4638      	mov	r0, r7
 800cc6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc70:	89ab      	ldrh	r3, [r5, #12]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d907      	bls.n	800cc86 <_fwalk_reent+0x3a>
 800cc76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	d003      	beq.n	800cc86 <_fwalk_reent+0x3a>
 800cc7e:	4629      	mov	r1, r5
 800cc80:	4630      	mov	r0, r6
 800cc82:	47c0      	blx	r8
 800cc84:	4307      	orrs	r7, r0
 800cc86:	3568      	adds	r5, #104	; 0x68
 800cc88:	e7e9      	b.n	800cc5e <_fwalk_reent+0x12>
	...

0800cc8c <_localeconv_r>:
 800cc8c:	4800      	ldr	r0, [pc, #0]	; (800cc90 <_localeconv_r+0x4>)
 800cc8e:	4770      	bx	lr
 800cc90:	2000017c 	.word	0x2000017c

0800cc94 <__retarget_lock_init_recursive>:
 800cc94:	4770      	bx	lr

0800cc96 <__retarget_lock_acquire_recursive>:
 800cc96:	4770      	bx	lr

0800cc98 <__retarget_lock_release_recursive>:
 800cc98:	4770      	bx	lr

0800cc9a <__swhatbuf_r>:
 800cc9a:	b570      	push	{r4, r5, r6, lr}
 800cc9c:	460e      	mov	r6, r1
 800cc9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca2:	2900      	cmp	r1, #0
 800cca4:	b096      	sub	sp, #88	; 0x58
 800cca6:	4614      	mov	r4, r2
 800cca8:	461d      	mov	r5, r3
 800ccaa:	da08      	bge.n	800ccbe <__swhatbuf_r+0x24>
 800ccac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	602a      	str	r2, [r5, #0]
 800ccb4:	061a      	lsls	r2, r3, #24
 800ccb6:	d410      	bmi.n	800ccda <__swhatbuf_r+0x40>
 800ccb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccbc:	e00e      	b.n	800ccdc <__swhatbuf_r+0x42>
 800ccbe:	466a      	mov	r2, sp
 800ccc0:	f000 fdf4 	bl	800d8ac <_fstat_r>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	dbf1      	blt.n	800ccac <__swhatbuf_r+0x12>
 800ccc8:	9a01      	ldr	r2, [sp, #4]
 800ccca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccd2:	425a      	negs	r2, r3
 800ccd4:	415a      	adcs	r2, r3
 800ccd6:	602a      	str	r2, [r5, #0]
 800ccd8:	e7ee      	b.n	800ccb8 <__swhatbuf_r+0x1e>
 800ccda:	2340      	movs	r3, #64	; 0x40
 800ccdc:	2000      	movs	r0, #0
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	b016      	add	sp, #88	; 0x58
 800cce2:	bd70      	pop	{r4, r5, r6, pc}

0800cce4 <__smakebuf_r>:
 800cce4:	898b      	ldrh	r3, [r1, #12]
 800cce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cce8:	079d      	lsls	r5, r3, #30
 800ccea:	4606      	mov	r6, r0
 800ccec:	460c      	mov	r4, r1
 800ccee:	d507      	bpl.n	800cd00 <__smakebuf_r+0x1c>
 800ccf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	6123      	str	r3, [r4, #16]
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	6163      	str	r3, [r4, #20]
 800ccfc:	b002      	add	sp, #8
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}
 800cd00:	ab01      	add	r3, sp, #4
 800cd02:	466a      	mov	r2, sp
 800cd04:	f7ff ffc9 	bl	800cc9a <__swhatbuf_r>
 800cd08:	9900      	ldr	r1, [sp, #0]
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f7fe f947 	bl	800afa0 <_malloc_r>
 800cd12:	b948      	cbnz	r0, 800cd28 <__smakebuf_r+0x44>
 800cd14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd18:	059a      	lsls	r2, r3, #22
 800cd1a:	d4ef      	bmi.n	800ccfc <__smakebuf_r+0x18>
 800cd1c:	f023 0303 	bic.w	r3, r3, #3
 800cd20:	f043 0302 	orr.w	r3, r3, #2
 800cd24:	81a3      	strh	r3, [r4, #12]
 800cd26:	e7e3      	b.n	800ccf0 <__smakebuf_r+0xc>
 800cd28:	4b0d      	ldr	r3, [pc, #52]	; (800cd60 <__smakebuf_r+0x7c>)
 800cd2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	6020      	str	r0, [r4, #0]
 800cd30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd34:	81a3      	strh	r3, [r4, #12]
 800cd36:	9b00      	ldr	r3, [sp, #0]
 800cd38:	6163      	str	r3, [r4, #20]
 800cd3a:	9b01      	ldr	r3, [sp, #4]
 800cd3c:	6120      	str	r0, [r4, #16]
 800cd3e:	b15b      	cbz	r3, 800cd58 <__smakebuf_r+0x74>
 800cd40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd44:	4630      	mov	r0, r6
 800cd46:	f000 fdc3 	bl	800d8d0 <_isatty_r>
 800cd4a:	b128      	cbz	r0, 800cd58 <__smakebuf_r+0x74>
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	f023 0303 	bic.w	r3, r3, #3
 800cd52:	f043 0301 	orr.w	r3, r3, #1
 800cd56:	81a3      	strh	r3, [r4, #12]
 800cd58:	89a0      	ldrh	r0, [r4, #12]
 800cd5a:	4305      	orrs	r5, r0
 800cd5c:	81a5      	strh	r5, [r4, #12]
 800cd5e:	e7cd      	b.n	800ccfc <__smakebuf_r+0x18>
 800cd60:	0800cae9 	.word	0x0800cae9

0800cd64 <memcpy>:
 800cd64:	440a      	add	r2, r1
 800cd66:	4291      	cmp	r1, r2
 800cd68:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd6c:	d100      	bne.n	800cd70 <memcpy+0xc>
 800cd6e:	4770      	bx	lr
 800cd70:	b510      	push	{r4, lr}
 800cd72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd7a:	4291      	cmp	r1, r2
 800cd7c:	d1f9      	bne.n	800cd72 <memcpy+0xe>
 800cd7e:	bd10      	pop	{r4, pc}

0800cd80 <__malloc_lock>:
 800cd80:	4801      	ldr	r0, [pc, #4]	; (800cd88 <__malloc_lock+0x8>)
 800cd82:	f7ff bf88 	b.w	800cc96 <__retarget_lock_acquire_recursive>
 800cd86:	bf00      	nop
 800cd88:	200019ac 	.word	0x200019ac

0800cd8c <__malloc_unlock>:
 800cd8c:	4801      	ldr	r0, [pc, #4]	; (800cd94 <__malloc_unlock+0x8>)
 800cd8e:	f7ff bf83 	b.w	800cc98 <__retarget_lock_release_recursive>
 800cd92:	bf00      	nop
 800cd94:	200019ac 	.word	0x200019ac

0800cd98 <_Balloc>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	460d      	mov	r5, r1
 800cda0:	b976      	cbnz	r6, 800cdc0 <_Balloc+0x28>
 800cda2:	2010      	movs	r0, #16
 800cda4:	f7fe f878 	bl	800ae98 <malloc>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	6260      	str	r0, [r4, #36]	; 0x24
 800cdac:	b920      	cbnz	r0, 800cdb8 <_Balloc+0x20>
 800cdae:	4b18      	ldr	r3, [pc, #96]	; (800ce10 <_Balloc+0x78>)
 800cdb0:	4818      	ldr	r0, [pc, #96]	; (800ce14 <_Balloc+0x7c>)
 800cdb2:	2166      	movs	r1, #102	; 0x66
 800cdb4:	f000 fd3a 	bl	800d82c <__assert_func>
 800cdb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdbc:	6006      	str	r6, [r0, #0]
 800cdbe:	60c6      	str	r6, [r0, #12]
 800cdc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cdc2:	68f3      	ldr	r3, [r6, #12]
 800cdc4:	b183      	cbz	r3, 800cde8 <_Balloc+0x50>
 800cdc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cdce:	b9b8      	cbnz	r0, 800ce00 <_Balloc+0x68>
 800cdd0:	2101      	movs	r1, #1
 800cdd2:	fa01 f605 	lsl.w	r6, r1, r5
 800cdd6:	1d72      	adds	r2, r6, #5
 800cdd8:	0092      	lsls	r2, r2, #2
 800cdda:	4620      	mov	r0, r4
 800cddc:	f000 fb60 	bl	800d4a0 <_calloc_r>
 800cde0:	b160      	cbz	r0, 800cdfc <_Balloc+0x64>
 800cde2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cde6:	e00e      	b.n	800ce06 <_Balloc+0x6e>
 800cde8:	2221      	movs	r2, #33	; 0x21
 800cdea:	2104      	movs	r1, #4
 800cdec:	4620      	mov	r0, r4
 800cdee:	f000 fb57 	bl	800d4a0 <_calloc_r>
 800cdf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdf4:	60f0      	str	r0, [r6, #12]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1e4      	bne.n	800cdc6 <_Balloc+0x2e>
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	bd70      	pop	{r4, r5, r6, pc}
 800ce00:	6802      	ldr	r2, [r0, #0]
 800ce02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce06:	2300      	movs	r3, #0
 800ce08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce0c:	e7f7      	b.n	800cdfe <_Balloc+0x66>
 800ce0e:	bf00      	nop
 800ce10:	0800e22d 	.word	0x0800e22d
 800ce14:	0800e310 	.word	0x0800e310

0800ce18 <_Bfree>:
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce1c:	4605      	mov	r5, r0
 800ce1e:	460c      	mov	r4, r1
 800ce20:	b976      	cbnz	r6, 800ce40 <_Bfree+0x28>
 800ce22:	2010      	movs	r0, #16
 800ce24:	f7fe f838 	bl	800ae98 <malloc>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	6268      	str	r0, [r5, #36]	; 0x24
 800ce2c:	b920      	cbnz	r0, 800ce38 <_Bfree+0x20>
 800ce2e:	4b09      	ldr	r3, [pc, #36]	; (800ce54 <_Bfree+0x3c>)
 800ce30:	4809      	ldr	r0, [pc, #36]	; (800ce58 <_Bfree+0x40>)
 800ce32:	218a      	movs	r1, #138	; 0x8a
 800ce34:	f000 fcfa 	bl	800d82c <__assert_func>
 800ce38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce3c:	6006      	str	r6, [r0, #0]
 800ce3e:	60c6      	str	r6, [r0, #12]
 800ce40:	b13c      	cbz	r4, 800ce52 <_Bfree+0x3a>
 800ce42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce44:	6862      	ldr	r2, [r4, #4]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce4c:	6021      	str	r1, [r4, #0]
 800ce4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce52:	bd70      	pop	{r4, r5, r6, pc}
 800ce54:	0800e22d 	.word	0x0800e22d
 800ce58:	0800e310 	.word	0x0800e310

0800ce5c <__multadd>:
 800ce5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce60:	690d      	ldr	r5, [r1, #16]
 800ce62:	4607      	mov	r7, r0
 800ce64:	460c      	mov	r4, r1
 800ce66:	461e      	mov	r6, r3
 800ce68:	f101 0c14 	add.w	ip, r1, #20
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	f8dc 3000 	ldr.w	r3, [ip]
 800ce72:	b299      	uxth	r1, r3
 800ce74:	fb02 6101 	mla	r1, r2, r1, r6
 800ce78:	0c1e      	lsrs	r6, r3, #16
 800ce7a:	0c0b      	lsrs	r3, r1, #16
 800ce7c:	fb02 3306 	mla	r3, r2, r6, r3
 800ce80:	b289      	uxth	r1, r1
 800ce82:	3001      	adds	r0, #1
 800ce84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce88:	4285      	cmp	r5, r0
 800ce8a:	f84c 1b04 	str.w	r1, [ip], #4
 800ce8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce92:	dcec      	bgt.n	800ce6e <__multadd+0x12>
 800ce94:	b30e      	cbz	r6, 800ceda <__multadd+0x7e>
 800ce96:	68a3      	ldr	r3, [r4, #8]
 800ce98:	42ab      	cmp	r3, r5
 800ce9a:	dc19      	bgt.n	800ced0 <__multadd+0x74>
 800ce9c:	6861      	ldr	r1, [r4, #4]
 800ce9e:	4638      	mov	r0, r7
 800cea0:	3101      	adds	r1, #1
 800cea2:	f7ff ff79 	bl	800cd98 <_Balloc>
 800cea6:	4680      	mov	r8, r0
 800cea8:	b928      	cbnz	r0, 800ceb6 <__multadd+0x5a>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	4b0c      	ldr	r3, [pc, #48]	; (800cee0 <__multadd+0x84>)
 800ceae:	480d      	ldr	r0, [pc, #52]	; (800cee4 <__multadd+0x88>)
 800ceb0:	21b5      	movs	r1, #181	; 0xb5
 800ceb2:	f000 fcbb 	bl	800d82c <__assert_func>
 800ceb6:	6922      	ldr	r2, [r4, #16]
 800ceb8:	3202      	adds	r2, #2
 800ceba:	f104 010c 	add.w	r1, r4, #12
 800cebe:	0092      	lsls	r2, r2, #2
 800cec0:	300c      	adds	r0, #12
 800cec2:	f7ff ff4f 	bl	800cd64 <memcpy>
 800cec6:	4621      	mov	r1, r4
 800cec8:	4638      	mov	r0, r7
 800ceca:	f7ff ffa5 	bl	800ce18 <_Bfree>
 800cece:	4644      	mov	r4, r8
 800ced0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ced4:	3501      	adds	r5, #1
 800ced6:	615e      	str	r6, [r3, #20]
 800ced8:	6125      	str	r5, [r4, #16]
 800ceda:	4620      	mov	r0, r4
 800cedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee0:	0800e29f 	.word	0x0800e29f
 800cee4:	0800e310 	.word	0x0800e310

0800cee8 <__hi0bits>:
 800cee8:	0c03      	lsrs	r3, r0, #16
 800ceea:	041b      	lsls	r3, r3, #16
 800ceec:	b9d3      	cbnz	r3, 800cf24 <__hi0bits+0x3c>
 800ceee:	0400      	lsls	r0, r0, #16
 800cef0:	2310      	movs	r3, #16
 800cef2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cef6:	bf04      	itt	eq
 800cef8:	0200      	lsleq	r0, r0, #8
 800cefa:	3308      	addeq	r3, #8
 800cefc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf00:	bf04      	itt	eq
 800cf02:	0100      	lsleq	r0, r0, #4
 800cf04:	3304      	addeq	r3, #4
 800cf06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf0a:	bf04      	itt	eq
 800cf0c:	0080      	lsleq	r0, r0, #2
 800cf0e:	3302      	addeq	r3, #2
 800cf10:	2800      	cmp	r0, #0
 800cf12:	db05      	blt.n	800cf20 <__hi0bits+0x38>
 800cf14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf18:	f103 0301 	add.w	r3, r3, #1
 800cf1c:	bf08      	it	eq
 800cf1e:	2320      	moveq	r3, #32
 800cf20:	4618      	mov	r0, r3
 800cf22:	4770      	bx	lr
 800cf24:	2300      	movs	r3, #0
 800cf26:	e7e4      	b.n	800cef2 <__hi0bits+0xa>

0800cf28 <__lo0bits>:
 800cf28:	6803      	ldr	r3, [r0, #0]
 800cf2a:	f013 0207 	ands.w	r2, r3, #7
 800cf2e:	4601      	mov	r1, r0
 800cf30:	d00b      	beq.n	800cf4a <__lo0bits+0x22>
 800cf32:	07da      	lsls	r2, r3, #31
 800cf34:	d423      	bmi.n	800cf7e <__lo0bits+0x56>
 800cf36:	0798      	lsls	r0, r3, #30
 800cf38:	bf49      	itett	mi
 800cf3a:	085b      	lsrmi	r3, r3, #1
 800cf3c:	089b      	lsrpl	r3, r3, #2
 800cf3e:	2001      	movmi	r0, #1
 800cf40:	600b      	strmi	r3, [r1, #0]
 800cf42:	bf5c      	itt	pl
 800cf44:	600b      	strpl	r3, [r1, #0]
 800cf46:	2002      	movpl	r0, #2
 800cf48:	4770      	bx	lr
 800cf4a:	b298      	uxth	r0, r3
 800cf4c:	b9a8      	cbnz	r0, 800cf7a <__lo0bits+0x52>
 800cf4e:	0c1b      	lsrs	r3, r3, #16
 800cf50:	2010      	movs	r0, #16
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	b90a      	cbnz	r2, 800cf5a <__lo0bits+0x32>
 800cf56:	3008      	adds	r0, #8
 800cf58:	0a1b      	lsrs	r3, r3, #8
 800cf5a:	071a      	lsls	r2, r3, #28
 800cf5c:	bf04      	itt	eq
 800cf5e:	091b      	lsreq	r3, r3, #4
 800cf60:	3004      	addeq	r0, #4
 800cf62:	079a      	lsls	r2, r3, #30
 800cf64:	bf04      	itt	eq
 800cf66:	089b      	lsreq	r3, r3, #2
 800cf68:	3002      	addeq	r0, #2
 800cf6a:	07da      	lsls	r2, r3, #31
 800cf6c:	d403      	bmi.n	800cf76 <__lo0bits+0x4e>
 800cf6e:	085b      	lsrs	r3, r3, #1
 800cf70:	f100 0001 	add.w	r0, r0, #1
 800cf74:	d005      	beq.n	800cf82 <__lo0bits+0x5a>
 800cf76:	600b      	str	r3, [r1, #0]
 800cf78:	4770      	bx	lr
 800cf7a:	4610      	mov	r0, r2
 800cf7c:	e7e9      	b.n	800cf52 <__lo0bits+0x2a>
 800cf7e:	2000      	movs	r0, #0
 800cf80:	4770      	bx	lr
 800cf82:	2020      	movs	r0, #32
 800cf84:	4770      	bx	lr
	...

0800cf88 <__i2b>:
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	2101      	movs	r1, #1
 800cf8e:	f7ff ff03 	bl	800cd98 <_Balloc>
 800cf92:	4602      	mov	r2, r0
 800cf94:	b928      	cbnz	r0, 800cfa2 <__i2b+0x1a>
 800cf96:	4b05      	ldr	r3, [pc, #20]	; (800cfac <__i2b+0x24>)
 800cf98:	4805      	ldr	r0, [pc, #20]	; (800cfb0 <__i2b+0x28>)
 800cf9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf9e:	f000 fc45 	bl	800d82c <__assert_func>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	6144      	str	r4, [r0, #20]
 800cfa6:	6103      	str	r3, [r0, #16]
 800cfa8:	bd10      	pop	{r4, pc}
 800cfaa:	bf00      	nop
 800cfac:	0800e29f 	.word	0x0800e29f
 800cfb0:	0800e310 	.word	0x0800e310

0800cfb4 <__multiply>:
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb8:	4691      	mov	r9, r2
 800cfba:	690a      	ldr	r2, [r1, #16]
 800cfbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	bfb8      	it	lt
 800cfc4:	460b      	movlt	r3, r1
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	bfbc      	itt	lt
 800cfca:	464c      	movlt	r4, r9
 800cfcc:	4699      	movlt	r9, r3
 800cfce:	6927      	ldr	r7, [r4, #16]
 800cfd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cfd4:	68a3      	ldr	r3, [r4, #8]
 800cfd6:	6861      	ldr	r1, [r4, #4]
 800cfd8:	eb07 060a 	add.w	r6, r7, sl
 800cfdc:	42b3      	cmp	r3, r6
 800cfde:	b085      	sub	sp, #20
 800cfe0:	bfb8      	it	lt
 800cfe2:	3101      	addlt	r1, #1
 800cfe4:	f7ff fed8 	bl	800cd98 <_Balloc>
 800cfe8:	b930      	cbnz	r0, 800cff8 <__multiply+0x44>
 800cfea:	4602      	mov	r2, r0
 800cfec:	4b44      	ldr	r3, [pc, #272]	; (800d100 <__multiply+0x14c>)
 800cfee:	4845      	ldr	r0, [pc, #276]	; (800d104 <__multiply+0x150>)
 800cff0:	f240 115d 	movw	r1, #349	; 0x15d
 800cff4:	f000 fc1a 	bl	800d82c <__assert_func>
 800cff8:	f100 0514 	add.w	r5, r0, #20
 800cffc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d000:	462b      	mov	r3, r5
 800d002:	2200      	movs	r2, #0
 800d004:	4543      	cmp	r3, r8
 800d006:	d321      	bcc.n	800d04c <__multiply+0x98>
 800d008:	f104 0314 	add.w	r3, r4, #20
 800d00c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d010:	f109 0314 	add.w	r3, r9, #20
 800d014:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d018:	9202      	str	r2, [sp, #8]
 800d01a:	1b3a      	subs	r2, r7, r4
 800d01c:	3a15      	subs	r2, #21
 800d01e:	f022 0203 	bic.w	r2, r2, #3
 800d022:	3204      	adds	r2, #4
 800d024:	f104 0115 	add.w	r1, r4, #21
 800d028:	428f      	cmp	r7, r1
 800d02a:	bf38      	it	cc
 800d02c:	2204      	movcc	r2, #4
 800d02e:	9201      	str	r2, [sp, #4]
 800d030:	9a02      	ldr	r2, [sp, #8]
 800d032:	9303      	str	r3, [sp, #12]
 800d034:	429a      	cmp	r2, r3
 800d036:	d80c      	bhi.n	800d052 <__multiply+0x9e>
 800d038:	2e00      	cmp	r6, #0
 800d03a:	dd03      	ble.n	800d044 <__multiply+0x90>
 800d03c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d040:	2b00      	cmp	r3, #0
 800d042:	d05a      	beq.n	800d0fa <__multiply+0x146>
 800d044:	6106      	str	r6, [r0, #16]
 800d046:	b005      	add	sp, #20
 800d048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04c:	f843 2b04 	str.w	r2, [r3], #4
 800d050:	e7d8      	b.n	800d004 <__multiply+0x50>
 800d052:	f8b3 a000 	ldrh.w	sl, [r3]
 800d056:	f1ba 0f00 	cmp.w	sl, #0
 800d05a:	d024      	beq.n	800d0a6 <__multiply+0xf2>
 800d05c:	f104 0e14 	add.w	lr, r4, #20
 800d060:	46a9      	mov	r9, r5
 800d062:	f04f 0c00 	mov.w	ip, #0
 800d066:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d06a:	f8d9 1000 	ldr.w	r1, [r9]
 800d06e:	fa1f fb82 	uxth.w	fp, r2
 800d072:	b289      	uxth	r1, r1
 800d074:	fb0a 110b 	mla	r1, sl, fp, r1
 800d078:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d07c:	f8d9 2000 	ldr.w	r2, [r9]
 800d080:	4461      	add	r1, ip
 800d082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d086:	fb0a c20b 	mla	r2, sl, fp, ip
 800d08a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d08e:	b289      	uxth	r1, r1
 800d090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d094:	4577      	cmp	r7, lr
 800d096:	f849 1b04 	str.w	r1, [r9], #4
 800d09a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d09e:	d8e2      	bhi.n	800d066 <__multiply+0xb2>
 800d0a0:	9a01      	ldr	r2, [sp, #4]
 800d0a2:	f845 c002 	str.w	ip, [r5, r2]
 800d0a6:	9a03      	ldr	r2, [sp, #12]
 800d0a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	f1b9 0f00 	cmp.w	r9, #0
 800d0b2:	d020      	beq.n	800d0f6 <__multiply+0x142>
 800d0b4:	6829      	ldr	r1, [r5, #0]
 800d0b6:	f104 0c14 	add.w	ip, r4, #20
 800d0ba:	46ae      	mov	lr, r5
 800d0bc:	f04f 0a00 	mov.w	sl, #0
 800d0c0:	f8bc b000 	ldrh.w	fp, [ip]
 800d0c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d0c8:	fb09 220b 	mla	r2, r9, fp, r2
 800d0cc:	4492      	add	sl, r2
 800d0ce:	b289      	uxth	r1, r1
 800d0d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d0d4:	f84e 1b04 	str.w	r1, [lr], #4
 800d0d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d0dc:	f8be 1000 	ldrh.w	r1, [lr]
 800d0e0:	0c12      	lsrs	r2, r2, #16
 800d0e2:	fb09 1102 	mla	r1, r9, r2, r1
 800d0e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d0ea:	4567      	cmp	r7, ip
 800d0ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d0f0:	d8e6      	bhi.n	800d0c0 <__multiply+0x10c>
 800d0f2:	9a01      	ldr	r2, [sp, #4]
 800d0f4:	50a9      	str	r1, [r5, r2]
 800d0f6:	3504      	adds	r5, #4
 800d0f8:	e79a      	b.n	800d030 <__multiply+0x7c>
 800d0fa:	3e01      	subs	r6, #1
 800d0fc:	e79c      	b.n	800d038 <__multiply+0x84>
 800d0fe:	bf00      	nop
 800d100:	0800e29f 	.word	0x0800e29f
 800d104:	0800e310 	.word	0x0800e310

0800d108 <__pow5mult>:
 800d108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d10c:	4615      	mov	r5, r2
 800d10e:	f012 0203 	ands.w	r2, r2, #3
 800d112:	4606      	mov	r6, r0
 800d114:	460f      	mov	r7, r1
 800d116:	d007      	beq.n	800d128 <__pow5mult+0x20>
 800d118:	4c25      	ldr	r4, [pc, #148]	; (800d1b0 <__pow5mult+0xa8>)
 800d11a:	3a01      	subs	r2, #1
 800d11c:	2300      	movs	r3, #0
 800d11e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d122:	f7ff fe9b 	bl	800ce5c <__multadd>
 800d126:	4607      	mov	r7, r0
 800d128:	10ad      	asrs	r5, r5, #2
 800d12a:	d03d      	beq.n	800d1a8 <__pow5mult+0xa0>
 800d12c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d12e:	b97c      	cbnz	r4, 800d150 <__pow5mult+0x48>
 800d130:	2010      	movs	r0, #16
 800d132:	f7fd feb1 	bl	800ae98 <malloc>
 800d136:	4602      	mov	r2, r0
 800d138:	6270      	str	r0, [r6, #36]	; 0x24
 800d13a:	b928      	cbnz	r0, 800d148 <__pow5mult+0x40>
 800d13c:	4b1d      	ldr	r3, [pc, #116]	; (800d1b4 <__pow5mult+0xac>)
 800d13e:	481e      	ldr	r0, [pc, #120]	; (800d1b8 <__pow5mult+0xb0>)
 800d140:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d144:	f000 fb72 	bl	800d82c <__assert_func>
 800d148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d14c:	6004      	str	r4, [r0, #0]
 800d14e:	60c4      	str	r4, [r0, #12]
 800d150:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d158:	b94c      	cbnz	r4, 800d16e <__pow5mult+0x66>
 800d15a:	f240 2171 	movw	r1, #625	; 0x271
 800d15e:	4630      	mov	r0, r6
 800d160:	f7ff ff12 	bl	800cf88 <__i2b>
 800d164:	2300      	movs	r3, #0
 800d166:	f8c8 0008 	str.w	r0, [r8, #8]
 800d16a:	4604      	mov	r4, r0
 800d16c:	6003      	str	r3, [r0, #0]
 800d16e:	f04f 0900 	mov.w	r9, #0
 800d172:	07eb      	lsls	r3, r5, #31
 800d174:	d50a      	bpl.n	800d18c <__pow5mult+0x84>
 800d176:	4639      	mov	r1, r7
 800d178:	4622      	mov	r2, r4
 800d17a:	4630      	mov	r0, r6
 800d17c:	f7ff ff1a 	bl	800cfb4 <__multiply>
 800d180:	4639      	mov	r1, r7
 800d182:	4680      	mov	r8, r0
 800d184:	4630      	mov	r0, r6
 800d186:	f7ff fe47 	bl	800ce18 <_Bfree>
 800d18a:	4647      	mov	r7, r8
 800d18c:	106d      	asrs	r5, r5, #1
 800d18e:	d00b      	beq.n	800d1a8 <__pow5mult+0xa0>
 800d190:	6820      	ldr	r0, [r4, #0]
 800d192:	b938      	cbnz	r0, 800d1a4 <__pow5mult+0x9c>
 800d194:	4622      	mov	r2, r4
 800d196:	4621      	mov	r1, r4
 800d198:	4630      	mov	r0, r6
 800d19a:	f7ff ff0b 	bl	800cfb4 <__multiply>
 800d19e:	6020      	str	r0, [r4, #0]
 800d1a0:	f8c0 9000 	str.w	r9, [r0]
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	e7e4      	b.n	800d172 <__pow5mult+0x6a>
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ae:	bf00      	nop
 800d1b0:	0800e460 	.word	0x0800e460
 800d1b4:	0800e22d 	.word	0x0800e22d
 800d1b8:	0800e310 	.word	0x0800e310

0800d1bc <__lshift>:
 800d1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c0:	460c      	mov	r4, r1
 800d1c2:	6849      	ldr	r1, [r1, #4]
 800d1c4:	6923      	ldr	r3, [r4, #16]
 800d1c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1ca:	68a3      	ldr	r3, [r4, #8]
 800d1cc:	4607      	mov	r7, r0
 800d1ce:	4691      	mov	r9, r2
 800d1d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1d4:	f108 0601 	add.w	r6, r8, #1
 800d1d8:	42b3      	cmp	r3, r6
 800d1da:	db0b      	blt.n	800d1f4 <__lshift+0x38>
 800d1dc:	4638      	mov	r0, r7
 800d1de:	f7ff fddb 	bl	800cd98 <_Balloc>
 800d1e2:	4605      	mov	r5, r0
 800d1e4:	b948      	cbnz	r0, 800d1fa <__lshift+0x3e>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	4b2a      	ldr	r3, [pc, #168]	; (800d294 <__lshift+0xd8>)
 800d1ea:	482b      	ldr	r0, [pc, #172]	; (800d298 <__lshift+0xdc>)
 800d1ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d1f0:	f000 fb1c 	bl	800d82c <__assert_func>
 800d1f4:	3101      	adds	r1, #1
 800d1f6:	005b      	lsls	r3, r3, #1
 800d1f8:	e7ee      	b.n	800d1d8 <__lshift+0x1c>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	f100 0114 	add.w	r1, r0, #20
 800d200:	f100 0210 	add.w	r2, r0, #16
 800d204:	4618      	mov	r0, r3
 800d206:	4553      	cmp	r3, sl
 800d208:	db37      	blt.n	800d27a <__lshift+0xbe>
 800d20a:	6920      	ldr	r0, [r4, #16]
 800d20c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d210:	f104 0314 	add.w	r3, r4, #20
 800d214:	f019 091f 	ands.w	r9, r9, #31
 800d218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d21c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d220:	d02f      	beq.n	800d282 <__lshift+0xc6>
 800d222:	f1c9 0e20 	rsb	lr, r9, #32
 800d226:	468a      	mov	sl, r1
 800d228:	f04f 0c00 	mov.w	ip, #0
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	fa02 f209 	lsl.w	r2, r2, r9
 800d232:	ea42 020c 	orr.w	r2, r2, ip
 800d236:	f84a 2b04 	str.w	r2, [sl], #4
 800d23a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d23e:	4298      	cmp	r0, r3
 800d240:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d244:	d8f2      	bhi.n	800d22c <__lshift+0x70>
 800d246:	1b03      	subs	r3, r0, r4
 800d248:	3b15      	subs	r3, #21
 800d24a:	f023 0303 	bic.w	r3, r3, #3
 800d24e:	3304      	adds	r3, #4
 800d250:	f104 0215 	add.w	r2, r4, #21
 800d254:	4290      	cmp	r0, r2
 800d256:	bf38      	it	cc
 800d258:	2304      	movcc	r3, #4
 800d25a:	f841 c003 	str.w	ip, [r1, r3]
 800d25e:	f1bc 0f00 	cmp.w	ip, #0
 800d262:	d001      	beq.n	800d268 <__lshift+0xac>
 800d264:	f108 0602 	add.w	r6, r8, #2
 800d268:	3e01      	subs	r6, #1
 800d26a:	4638      	mov	r0, r7
 800d26c:	612e      	str	r6, [r5, #16]
 800d26e:	4621      	mov	r1, r4
 800d270:	f7ff fdd2 	bl	800ce18 <_Bfree>
 800d274:	4628      	mov	r0, r5
 800d276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d27a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d27e:	3301      	adds	r3, #1
 800d280:	e7c1      	b.n	800d206 <__lshift+0x4a>
 800d282:	3904      	subs	r1, #4
 800d284:	f853 2b04 	ldr.w	r2, [r3], #4
 800d288:	f841 2f04 	str.w	r2, [r1, #4]!
 800d28c:	4298      	cmp	r0, r3
 800d28e:	d8f9      	bhi.n	800d284 <__lshift+0xc8>
 800d290:	e7ea      	b.n	800d268 <__lshift+0xac>
 800d292:	bf00      	nop
 800d294:	0800e29f 	.word	0x0800e29f
 800d298:	0800e310 	.word	0x0800e310

0800d29c <__mcmp>:
 800d29c:	b530      	push	{r4, r5, lr}
 800d29e:	6902      	ldr	r2, [r0, #16]
 800d2a0:	690c      	ldr	r4, [r1, #16]
 800d2a2:	1b12      	subs	r2, r2, r4
 800d2a4:	d10e      	bne.n	800d2c4 <__mcmp+0x28>
 800d2a6:	f100 0314 	add.w	r3, r0, #20
 800d2aa:	3114      	adds	r1, #20
 800d2ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d2b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d2b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d2b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d2bc:	42a5      	cmp	r5, r4
 800d2be:	d003      	beq.n	800d2c8 <__mcmp+0x2c>
 800d2c0:	d305      	bcc.n	800d2ce <__mcmp+0x32>
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	bd30      	pop	{r4, r5, pc}
 800d2c8:	4283      	cmp	r3, r0
 800d2ca:	d3f3      	bcc.n	800d2b4 <__mcmp+0x18>
 800d2cc:	e7fa      	b.n	800d2c4 <__mcmp+0x28>
 800d2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d2:	e7f7      	b.n	800d2c4 <__mcmp+0x28>

0800d2d4 <__mdiff>:
 800d2d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d8:	460c      	mov	r4, r1
 800d2da:	4606      	mov	r6, r0
 800d2dc:	4611      	mov	r1, r2
 800d2de:	4620      	mov	r0, r4
 800d2e0:	4690      	mov	r8, r2
 800d2e2:	f7ff ffdb 	bl	800d29c <__mcmp>
 800d2e6:	1e05      	subs	r5, r0, #0
 800d2e8:	d110      	bne.n	800d30c <__mdiff+0x38>
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	f7ff fd53 	bl	800cd98 <_Balloc>
 800d2f2:	b930      	cbnz	r0, 800d302 <__mdiff+0x2e>
 800d2f4:	4b3a      	ldr	r3, [pc, #232]	; (800d3e0 <__mdiff+0x10c>)
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	f240 2132 	movw	r1, #562	; 0x232
 800d2fc:	4839      	ldr	r0, [pc, #228]	; (800d3e4 <__mdiff+0x110>)
 800d2fe:	f000 fa95 	bl	800d82c <__assert_func>
 800d302:	2301      	movs	r3, #1
 800d304:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30c:	bfa4      	itt	ge
 800d30e:	4643      	movge	r3, r8
 800d310:	46a0      	movge	r8, r4
 800d312:	4630      	mov	r0, r6
 800d314:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d318:	bfa6      	itte	ge
 800d31a:	461c      	movge	r4, r3
 800d31c:	2500      	movge	r5, #0
 800d31e:	2501      	movlt	r5, #1
 800d320:	f7ff fd3a 	bl	800cd98 <_Balloc>
 800d324:	b920      	cbnz	r0, 800d330 <__mdiff+0x5c>
 800d326:	4b2e      	ldr	r3, [pc, #184]	; (800d3e0 <__mdiff+0x10c>)
 800d328:	4602      	mov	r2, r0
 800d32a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d32e:	e7e5      	b.n	800d2fc <__mdiff+0x28>
 800d330:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d334:	6926      	ldr	r6, [r4, #16]
 800d336:	60c5      	str	r5, [r0, #12]
 800d338:	f104 0914 	add.w	r9, r4, #20
 800d33c:	f108 0514 	add.w	r5, r8, #20
 800d340:	f100 0e14 	add.w	lr, r0, #20
 800d344:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d348:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d34c:	f108 0210 	add.w	r2, r8, #16
 800d350:	46f2      	mov	sl, lr
 800d352:	2100      	movs	r1, #0
 800d354:	f859 3b04 	ldr.w	r3, [r9], #4
 800d358:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d35c:	fa1f f883 	uxth.w	r8, r3
 800d360:	fa11 f18b 	uxtah	r1, r1, fp
 800d364:	0c1b      	lsrs	r3, r3, #16
 800d366:	eba1 0808 	sub.w	r8, r1, r8
 800d36a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d36e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d372:	fa1f f888 	uxth.w	r8, r8
 800d376:	1419      	asrs	r1, r3, #16
 800d378:	454e      	cmp	r6, r9
 800d37a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d37e:	f84a 3b04 	str.w	r3, [sl], #4
 800d382:	d8e7      	bhi.n	800d354 <__mdiff+0x80>
 800d384:	1b33      	subs	r3, r6, r4
 800d386:	3b15      	subs	r3, #21
 800d388:	f023 0303 	bic.w	r3, r3, #3
 800d38c:	3304      	adds	r3, #4
 800d38e:	3415      	adds	r4, #21
 800d390:	42a6      	cmp	r6, r4
 800d392:	bf38      	it	cc
 800d394:	2304      	movcc	r3, #4
 800d396:	441d      	add	r5, r3
 800d398:	4473      	add	r3, lr
 800d39a:	469e      	mov	lr, r3
 800d39c:	462e      	mov	r6, r5
 800d39e:	4566      	cmp	r6, ip
 800d3a0:	d30e      	bcc.n	800d3c0 <__mdiff+0xec>
 800d3a2:	f10c 0203 	add.w	r2, ip, #3
 800d3a6:	1b52      	subs	r2, r2, r5
 800d3a8:	f022 0203 	bic.w	r2, r2, #3
 800d3ac:	3d03      	subs	r5, #3
 800d3ae:	45ac      	cmp	ip, r5
 800d3b0:	bf38      	it	cc
 800d3b2:	2200      	movcc	r2, #0
 800d3b4:	441a      	add	r2, r3
 800d3b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d3ba:	b17b      	cbz	r3, 800d3dc <__mdiff+0x108>
 800d3bc:	6107      	str	r7, [r0, #16]
 800d3be:	e7a3      	b.n	800d308 <__mdiff+0x34>
 800d3c0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d3c4:	fa11 f288 	uxtah	r2, r1, r8
 800d3c8:	1414      	asrs	r4, r2, #16
 800d3ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d3ce:	b292      	uxth	r2, r2
 800d3d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d3d4:	f84e 2b04 	str.w	r2, [lr], #4
 800d3d8:	1421      	asrs	r1, r4, #16
 800d3da:	e7e0      	b.n	800d39e <__mdiff+0xca>
 800d3dc:	3f01      	subs	r7, #1
 800d3de:	e7ea      	b.n	800d3b6 <__mdiff+0xe2>
 800d3e0:	0800e29f 	.word	0x0800e29f
 800d3e4:	0800e310 	.word	0x0800e310

0800d3e8 <__d2b>:
 800d3e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3ec:	4689      	mov	r9, r1
 800d3ee:	2101      	movs	r1, #1
 800d3f0:	ec57 6b10 	vmov	r6, r7, d0
 800d3f4:	4690      	mov	r8, r2
 800d3f6:	f7ff fccf 	bl	800cd98 <_Balloc>
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	b930      	cbnz	r0, 800d40c <__d2b+0x24>
 800d3fe:	4602      	mov	r2, r0
 800d400:	4b25      	ldr	r3, [pc, #148]	; (800d498 <__d2b+0xb0>)
 800d402:	4826      	ldr	r0, [pc, #152]	; (800d49c <__d2b+0xb4>)
 800d404:	f240 310a 	movw	r1, #778	; 0x30a
 800d408:	f000 fa10 	bl	800d82c <__assert_func>
 800d40c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d410:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d414:	bb35      	cbnz	r5, 800d464 <__d2b+0x7c>
 800d416:	2e00      	cmp	r6, #0
 800d418:	9301      	str	r3, [sp, #4]
 800d41a:	d028      	beq.n	800d46e <__d2b+0x86>
 800d41c:	4668      	mov	r0, sp
 800d41e:	9600      	str	r6, [sp, #0]
 800d420:	f7ff fd82 	bl	800cf28 <__lo0bits>
 800d424:	9900      	ldr	r1, [sp, #0]
 800d426:	b300      	cbz	r0, 800d46a <__d2b+0x82>
 800d428:	9a01      	ldr	r2, [sp, #4]
 800d42a:	f1c0 0320 	rsb	r3, r0, #32
 800d42e:	fa02 f303 	lsl.w	r3, r2, r3
 800d432:	430b      	orrs	r3, r1
 800d434:	40c2      	lsrs	r2, r0
 800d436:	6163      	str	r3, [r4, #20]
 800d438:	9201      	str	r2, [sp, #4]
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	61a3      	str	r3, [r4, #24]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	bf14      	ite	ne
 800d442:	2202      	movne	r2, #2
 800d444:	2201      	moveq	r2, #1
 800d446:	6122      	str	r2, [r4, #16]
 800d448:	b1d5      	cbz	r5, 800d480 <__d2b+0x98>
 800d44a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d44e:	4405      	add	r5, r0
 800d450:	f8c9 5000 	str.w	r5, [r9]
 800d454:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d458:	f8c8 0000 	str.w	r0, [r8]
 800d45c:	4620      	mov	r0, r4
 800d45e:	b003      	add	sp, #12
 800d460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d468:	e7d5      	b.n	800d416 <__d2b+0x2e>
 800d46a:	6161      	str	r1, [r4, #20]
 800d46c:	e7e5      	b.n	800d43a <__d2b+0x52>
 800d46e:	a801      	add	r0, sp, #4
 800d470:	f7ff fd5a 	bl	800cf28 <__lo0bits>
 800d474:	9b01      	ldr	r3, [sp, #4]
 800d476:	6163      	str	r3, [r4, #20]
 800d478:	2201      	movs	r2, #1
 800d47a:	6122      	str	r2, [r4, #16]
 800d47c:	3020      	adds	r0, #32
 800d47e:	e7e3      	b.n	800d448 <__d2b+0x60>
 800d480:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d484:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d488:	f8c9 0000 	str.w	r0, [r9]
 800d48c:	6918      	ldr	r0, [r3, #16]
 800d48e:	f7ff fd2b 	bl	800cee8 <__hi0bits>
 800d492:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d496:	e7df      	b.n	800d458 <__d2b+0x70>
 800d498:	0800e29f 	.word	0x0800e29f
 800d49c:	0800e310 	.word	0x0800e310

0800d4a0 <_calloc_r>:
 800d4a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4a2:	fba1 2402 	umull	r2, r4, r1, r2
 800d4a6:	b94c      	cbnz	r4, 800d4bc <_calloc_r+0x1c>
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	9201      	str	r2, [sp, #4]
 800d4ac:	f7fd fd78 	bl	800afa0 <_malloc_r>
 800d4b0:	9a01      	ldr	r2, [sp, #4]
 800d4b2:	4605      	mov	r5, r0
 800d4b4:	b930      	cbnz	r0, 800d4c4 <_calloc_r+0x24>
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	b003      	add	sp, #12
 800d4ba:	bd30      	pop	{r4, r5, pc}
 800d4bc:	220c      	movs	r2, #12
 800d4be:	6002      	str	r2, [r0, #0]
 800d4c0:	2500      	movs	r5, #0
 800d4c2:	e7f8      	b.n	800d4b6 <_calloc_r+0x16>
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	f7fd fcf7 	bl	800aeb8 <memset>
 800d4ca:	e7f4      	b.n	800d4b6 <_calloc_r+0x16>

0800d4cc <__sfputc_r>:
 800d4cc:	6893      	ldr	r3, [r2, #8]
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	b410      	push	{r4}
 800d4d4:	6093      	str	r3, [r2, #8]
 800d4d6:	da08      	bge.n	800d4ea <__sfputc_r+0x1e>
 800d4d8:	6994      	ldr	r4, [r2, #24]
 800d4da:	42a3      	cmp	r3, r4
 800d4dc:	db01      	blt.n	800d4e2 <__sfputc_r+0x16>
 800d4de:	290a      	cmp	r1, #10
 800d4e0:	d103      	bne.n	800d4ea <__sfputc_r+0x1e>
 800d4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4e6:	f7fe badf 	b.w	800baa8 <__swbuf_r>
 800d4ea:	6813      	ldr	r3, [r2, #0]
 800d4ec:	1c58      	adds	r0, r3, #1
 800d4ee:	6010      	str	r0, [r2, #0]
 800d4f0:	7019      	strb	r1, [r3, #0]
 800d4f2:	4608      	mov	r0, r1
 800d4f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4f8:	4770      	bx	lr

0800d4fa <__sfputs_r>:
 800d4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fc:	4606      	mov	r6, r0
 800d4fe:	460f      	mov	r7, r1
 800d500:	4614      	mov	r4, r2
 800d502:	18d5      	adds	r5, r2, r3
 800d504:	42ac      	cmp	r4, r5
 800d506:	d101      	bne.n	800d50c <__sfputs_r+0x12>
 800d508:	2000      	movs	r0, #0
 800d50a:	e007      	b.n	800d51c <__sfputs_r+0x22>
 800d50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d510:	463a      	mov	r2, r7
 800d512:	4630      	mov	r0, r6
 800d514:	f7ff ffda 	bl	800d4cc <__sfputc_r>
 800d518:	1c43      	adds	r3, r0, #1
 800d51a:	d1f3      	bne.n	800d504 <__sfputs_r+0xa>
 800d51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d520 <_vfiprintf_r>:
 800d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d524:	460d      	mov	r5, r1
 800d526:	b09d      	sub	sp, #116	; 0x74
 800d528:	4614      	mov	r4, r2
 800d52a:	4698      	mov	r8, r3
 800d52c:	4606      	mov	r6, r0
 800d52e:	b118      	cbz	r0, 800d538 <_vfiprintf_r+0x18>
 800d530:	6983      	ldr	r3, [r0, #24]
 800d532:	b90b      	cbnz	r3, 800d538 <_vfiprintf_r+0x18>
 800d534:	f7ff fb0c 	bl	800cb50 <__sinit>
 800d538:	4b89      	ldr	r3, [pc, #548]	; (800d760 <_vfiprintf_r+0x240>)
 800d53a:	429d      	cmp	r5, r3
 800d53c:	d11b      	bne.n	800d576 <_vfiprintf_r+0x56>
 800d53e:	6875      	ldr	r5, [r6, #4]
 800d540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d542:	07d9      	lsls	r1, r3, #31
 800d544:	d405      	bmi.n	800d552 <_vfiprintf_r+0x32>
 800d546:	89ab      	ldrh	r3, [r5, #12]
 800d548:	059a      	lsls	r2, r3, #22
 800d54a:	d402      	bmi.n	800d552 <_vfiprintf_r+0x32>
 800d54c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d54e:	f7ff fba2 	bl	800cc96 <__retarget_lock_acquire_recursive>
 800d552:	89ab      	ldrh	r3, [r5, #12]
 800d554:	071b      	lsls	r3, r3, #28
 800d556:	d501      	bpl.n	800d55c <_vfiprintf_r+0x3c>
 800d558:	692b      	ldr	r3, [r5, #16]
 800d55a:	b9eb      	cbnz	r3, 800d598 <_vfiprintf_r+0x78>
 800d55c:	4629      	mov	r1, r5
 800d55e:	4630      	mov	r0, r6
 800d560:	f7fe faf4 	bl	800bb4c <__swsetup_r>
 800d564:	b1c0      	cbz	r0, 800d598 <_vfiprintf_r+0x78>
 800d566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d568:	07dc      	lsls	r4, r3, #31
 800d56a:	d50e      	bpl.n	800d58a <_vfiprintf_r+0x6a>
 800d56c:	f04f 30ff 	mov.w	r0, #4294967295
 800d570:	b01d      	add	sp, #116	; 0x74
 800d572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d576:	4b7b      	ldr	r3, [pc, #492]	; (800d764 <_vfiprintf_r+0x244>)
 800d578:	429d      	cmp	r5, r3
 800d57a:	d101      	bne.n	800d580 <_vfiprintf_r+0x60>
 800d57c:	68b5      	ldr	r5, [r6, #8]
 800d57e:	e7df      	b.n	800d540 <_vfiprintf_r+0x20>
 800d580:	4b79      	ldr	r3, [pc, #484]	; (800d768 <_vfiprintf_r+0x248>)
 800d582:	429d      	cmp	r5, r3
 800d584:	bf08      	it	eq
 800d586:	68f5      	ldreq	r5, [r6, #12]
 800d588:	e7da      	b.n	800d540 <_vfiprintf_r+0x20>
 800d58a:	89ab      	ldrh	r3, [r5, #12]
 800d58c:	0598      	lsls	r0, r3, #22
 800d58e:	d4ed      	bmi.n	800d56c <_vfiprintf_r+0x4c>
 800d590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d592:	f7ff fb81 	bl	800cc98 <__retarget_lock_release_recursive>
 800d596:	e7e9      	b.n	800d56c <_vfiprintf_r+0x4c>
 800d598:	2300      	movs	r3, #0
 800d59a:	9309      	str	r3, [sp, #36]	; 0x24
 800d59c:	2320      	movs	r3, #32
 800d59e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5a6:	2330      	movs	r3, #48	; 0x30
 800d5a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d76c <_vfiprintf_r+0x24c>
 800d5ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5b0:	f04f 0901 	mov.w	r9, #1
 800d5b4:	4623      	mov	r3, r4
 800d5b6:	469a      	mov	sl, r3
 800d5b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5bc:	b10a      	cbz	r2, 800d5c2 <_vfiprintf_r+0xa2>
 800d5be:	2a25      	cmp	r2, #37	; 0x25
 800d5c0:	d1f9      	bne.n	800d5b6 <_vfiprintf_r+0x96>
 800d5c2:	ebba 0b04 	subs.w	fp, sl, r4
 800d5c6:	d00b      	beq.n	800d5e0 <_vfiprintf_r+0xc0>
 800d5c8:	465b      	mov	r3, fp
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f7ff ff93 	bl	800d4fa <__sfputs_r>
 800d5d4:	3001      	adds	r0, #1
 800d5d6:	f000 80aa 	beq.w	800d72e <_vfiprintf_r+0x20e>
 800d5da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5dc:	445a      	add	r2, fp
 800d5de:	9209      	str	r2, [sp, #36]	; 0x24
 800d5e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f000 80a2 	beq.w	800d72e <_vfiprintf_r+0x20e>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5f4:	f10a 0a01 	add.w	sl, sl, #1
 800d5f8:	9304      	str	r3, [sp, #16]
 800d5fa:	9307      	str	r3, [sp, #28]
 800d5fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d600:	931a      	str	r3, [sp, #104]	; 0x68
 800d602:	4654      	mov	r4, sl
 800d604:	2205      	movs	r2, #5
 800d606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d60a:	4858      	ldr	r0, [pc, #352]	; (800d76c <_vfiprintf_r+0x24c>)
 800d60c:	f7f2 fdf0 	bl	80001f0 <memchr>
 800d610:	9a04      	ldr	r2, [sp, #16]
 800d612:	b9d8      	cbnz	r0, 800d64c <_vfiprintf_r+0x12c>
 800d614:	06d1      	lsls	r1, r2, #27
 800d616:	bf44      	itt	mi
 800d618:	2320      	movmi	r3, #32
 800d61a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d61e:	0713      	lsls	r3, r2, #28
 800d620:	bf44      	itt	mi
 800d622:	232b      	movmi	r3, #43	; 0x2b
 800d624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d628:	f89a 3000 	ldrb.w	r3, [sl]
 800d62c:	2b2a      	cmp	r3, #42	; 0x2a
 800d62e:	d015      	beq.n	800d65c <_vfiprintf_r+0x13c>
 800d630:	9a07      	ldr	r2, [sp, #28]
 800d632:	4654      	mov	r4, sl
 800d634:	2000      	movs	r0, #0
 800d636:	f04f 0c0a 	mov.w	ip, #10
 800d63a:	4621      	mov	r1, r4
 800d63c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d640:	3b30      	subs	r3, #48	; 0x30
 800d642:	2b09      	cmp	r3, #9
 800d644:	d94e      	bls.n	800d6e4 <_vfiprintf_r+0x1c4>
 800d646:	b1b0      	cbz	r0, 800d676 <_vfiprintf_r+0x156>
 800d648:	9207      	str	r2, [sp, #28]
 800d64a:	e014      	b.n	800d676 <_vfiprintf_r+0x156>
 800d64c:	eba0 0308 	sub.w	r3, r0, r8
 800d650:	fa09 f303 	lsl.w	r3, r9, r3
 800d654:	4313      	orrs	r3, r2
 800d656:	9304      	str	r3, [sp, #16]
 800d658:	46a2      	mov	sl, r4
 800d65a:	e7d2      	b.n	800d602 <_vfiprintf_r+0xe2>
 800d65c:	9b03      	ldr	r3, [sp, #12]
 800d65e:	1d19      	adds	r1, r3, #4
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	9103      	str	r1, [sp, #12]
 800d664:	2b00      	cmp	r3, #0
 800d666:	bfbb      	ittet	lt
 800d668:	425b      	neglt	r3, r3
 800d66a:	f042 0202 	orrlt.w	r2, r2, #2
 800d66e:	9307      	strge	r3, [sp, #28]
 800d670:	9307      	strlt	r3, [sp, #28]
 800d672:	bfb8      	it	lt
 800d674:	9204      	strlt	r2, [sp, #16]
 800d676:	7823      	ldrb	r3, [r4, #0]
 800d678:	2b2e      	cmp	r3, #46	; 0x2e
 800d67a:	d10c      	bne.n	800d696 <_vfiprintf_r+0x176>
 800d67c:	7863      	ldrb	r3, [r4, #1]
 800d67e:	2b2a      	cmp	r3, #42	; 0x2a
 800d680:	d135      	bne.n	800d6ee <_vfiprintf_r+0x1ce>
 800d682:	9b03      	ldr	r3, [sp, #12]
 800d684:	1d1a      	adds	r2, r3, #4
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	9203      	str	r2, [sp, #12]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	bfb8      	it	lt
 800d68e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d692:	3402      	adds	r4, #2
 800d694:	9305      	str	r3, [sp, #20]
 800d696:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d77c <_vfiprintf_r+0x25c>
 800d69a:	7821      	ldrb	r1, [r4, #0]
 800d69c:	2203      	movs	r2, #3
 800d69e:	4650      	mov	r0, sl
 800d6a0:	f7f2 fda6 	bl	80001f0 <memchr>
 800d6a4:	b140      	cbz	r0, 800d6b8 <_vfiprintf_r+0x198>
 800d6a6:	2340      	movs	r3, #64	; 0x40
 800d6a8:	eba0 000a 	sub.w	r0, r0, sl
 800d6ac:	fa03 f000 	lsl.w	r0, r3, r0
 800d6b0:	9b04      	ldr	r3, [sp, #16]
 800d6b2:	4303      	orrs	r3, r0
 800d6b4:	3401      	adds	r4, #1
 800d6b6:	9304      	str	r3, [sp, #16]
 800d6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6bc:	482c      	ldr	r0, [pc, #176]	; (800d770 <_vfiprintf_r+0x250>)
 800d6be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6c2:	2206      	movs	r2, #6
 800d6c4:	f7f2 fd94 	bl	80001f0 <memchr>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d03f      	beq.n	800d74c <_vfiprintf_r+0x22c>
 800d6cc:	4b29      	ldr	r3, [pc, #164]	; (800d774 <_vfiprintf_r+0x254>)
 800d6ce:	bb1b      	cbnz	r3, 800d718 <_vfiprintf_r+0x1f8>
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	3307      	adds	r3, #7
 800d6d4:	f023 0307 	bic.w	r3, r3, #7
 800d6d8:	3308      	adds	r3, #8
 800d6da:	9303      	str	r3, [sp, #12]
 800d6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6de:	443b      	add	r3, r7
 800d6e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6e2:	e767      	b.n	800d5b4 <_vfiprintf_r+0x94>
 800d6e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6e8:	460c      	mov	r4, r1
 800d6ea:	2001      	movs	r0, #1
 800d6ec:	e7a5      	b.n	800d63a <_vfiprintf_r+0x11a>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	3401      	adds	r4, #1
 800d6f2:	9305      	str	r3, [sp, #20]
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	f04f 0c0a 	mov.w	ip, #10
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d700:	3a30      	subs	r2, #48	; 0x30
 800d702:	2a09      	cmp	r2, #9
 800d704:	d903      	bls.n	800d70e <_vfiprintf_r+0x1ee>
 800d706:	2b00      	cmp	r3, #0
 800d708:	d0c5      	beq.n	800d696 <_vfiprintf_r+0x176>
 800d70a:	9105      	str	r1, [sp, #20]
 800d70c:	e7c3      	b.n	800d696 <_vfiprintf_r+0x176>
 800d70e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d712:	4604      	mov	r4, r0
 800d714:	2301      	movs	r3, #1
 800d716:	e7f0      	b.n	800d6fa <_vfiprintf_r+0x1da>
 800d718:	ab03      	add	r3, sp, #12
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	462a      	mov	r2, r5
 800d71e:	4b16      	ldr	r3, [pc, #88]	; (800d778 <_vfiprintf_r+0x258>)
 800d720:	a904      	add	r1, sp, #16
 800d722:	4630      	mov	r0, r6
 800d724:	f7fd fd50 	bl	800b1c8 <_printf_float>
 800d728:	4607      	mov	r7, r0
 800d72a:	1c78      	adds	r0, r7, #1
 800d72c:	d1d6      	bne.n	800d6dc <_vfiprintf_r+0x1bc>
 800d72e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d730:	07d9      	lsls	r1, r3, #31
 800d732:	d405      	bmi.n	800d740 <_vfiprintf_r+0x220>
 800d734:	89ab      	ldrh	r3, [r5, #12]
 800d736:	059a      	lsls	r2, r3, #22
 800d738:	d402      	bmi.n	800d740 <_vfiprintf_r+0x220>
 800d73a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d73c:	f7ff faac 	bl	800cc98 <__retarget_lock_release_recursive>
 800d740:	89ab      	ldrh	r3, [r5, #12]
 800d742:	065b      	lsls	r3, r3, #25
 800d744:	f53f af12 	bmi.w	800d56c <_vfiprintf_r+0x4c>
 800d748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d74a:	e711      	b.n	800d570 <_vfiprintf_r+0x50>
 800d74c:	ab03      	add	r3, sp, #12
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	462a      	mov	r2, r5
 800d752:	4b09      	ldr	r3, [pc, #36]	; (800d778 <_vfiprintf_r+0x258>)
 800d754:	a904      	add	r1, sp, #16
 800d756:	4630      	mov	r0, r6
 800d758:	f7fd ffda 	bl	800b710 <_printf_i>
 800d75c:	e7e4      	b.n	800d728 <_vfiprintf_r+0x208>
 800d75e:	bf00      	nop
 800d760:	0800e2d0 	.word	0x0800e2d0
 800d764:	0800e2f0 	.word	0x0800e2f0
 800d768:	0800e2b0 	.word	0x0800e2b0
 800d76c:	0800e46c 	.word	0x0800e46c
 800d770:	0800e476 	.word	0x0800e476
 800d774:	0800b1c9 	.word	0x0800b1c9
 800d778:	0800d4fb 	.word	0x0800d4fb
 800d77c:	0800e472 	.word	0x0800e472

0800d780 <__sread>:
 800d780:	b510      	push	{r4, lr}
 800d782:	460c      	mov	r4, r1
 800d784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d788:	f000 f8d6 	bl	800d938 <_read_r>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	bfab      	itete	ge
 800d790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d792:	89a3      	ldrhlt	r3, [r4, #12]
 800d794:	181b      	addge	r3, r3, r0
 800d796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d79a:	bfac      	ite	ge
 800d79c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d79e:	81a3      	strhlt	r3, [r4, #12]
 800d7a0:	bd10      	pop	{r4, pc}

0800d7a2 <__swrite>:
 800d7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a6:	461f      	mov	r7, r3
 800d7a8:	898b      	ldrh	r3, [r1, #12]
 800d7aa:	05db      	lsls	r3, r3, #23
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	4616      	mov	r6, r2
 800d7b2:	d505      	bpl.n	800d7c0 <__swrite+0x1e>
 800d7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7b8:	2302      	movs	r3, #2
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f000 f898 	bl	800d8f0 <_lseek_r>
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7ca:	81a3      	strh	r3, [r4, #12]
 800d7cc:	4632      	mov	r2, r6
 800d7ce:	463b      	mov	r3, r7
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d6:	f000 b817 	b.w	800d808 <_write_r>

0800d7da <__sseek>:
 800d7da:	b510      	push	{r4, lr}
 800d7dc:	460c      	mov	r4, r1
 800d7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e2:	f000 f885 	bl	800d8f0 <_lseek_r>
 800d7e6:	1c43      	adds	r3, r0, #1
 800d7e8:	89a3      	ldrh	r3, [r4, #12]
 800d7ea:	bf15      	itete	ne
 800d7ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d7ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d7f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d7f6:	81a3      	strheq	r3, [r4, #12]
 800d7f8:	bf18      	it	ne
 800d7fa:	81a3      	strhne	r3, [r4, #12]
 800d7fc:	bd10      	pop	{r4, pc}

0800d7fe <__sclose>:
 800d7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d802:	f000 b831 	b.w	800d868 <_close_r>
	...

0800d808 <_write_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4d07      	ldr	r5, [pc, #28]	; (800d828 <_write_r+0x20>)
 800d80c:	4604      	mov	r4, r0
 800d80e:	4608      	mov	r0, r1
 800d810:	4611      	mov	r1, r2
 800d812:	2200      	movs	r2, #0
 800d814:	602a      	str	r2, [r5, #0]
 800d816:	461a      	mov	r2, r3
 800d818:	f7f5 f937 	bl	8002a8a <_write>
 800d81c:	1c43      	adds	r3, r0, #1
 800d81e:	d102      	bne.n	800d826 <_write_r+0x1e>
 800d820:	682b      	ldr	r3, [r5, #0]
 800d822:	b103      	cbz	r3, 800d826 <_write_r+0x1e>
 800d824:	6023      	str	r3, [r4, #0]
 800d826:	bd38      	pop	{r3, r4, r5, pc}
 800d828:	200019b0 	.word	0x200019b0

0800d82c <__assert_func>:
 800d82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d82e:	4614      	mov	r4, r2
 800d830:	461a      	mov	r2, r3
 800d832:	4b09      	ldr	r3, [pc, #36]	; (800d858 <__assert_func+0x2c>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4605      	mov	r5, r0
 800d838:	68d8      	ldr	r0, [r3, #12]
 800d83a:	b14c      	cbz	r4, 800d850 <__assert_func+0x24>
 800d83c:	4b07      	ldr	r3, [pc, #28]	; (800d85c <__assert_func+0x30>)
 800d83e:	9100      	str	r1, [sp, #0]
 800d840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d844:	4906      	ldr	r1, [pc, #24]	; (800d860 <__assert_func+0x34>)
 800d846:	462b      	mov	r3, r5
 800d848:	f000 f81e 	bl	800d888 <fiprintf>
 800d84c:	f000 f893 	bl	800d976 <abort>
 800d850:	4b04      	ldr	r3, [pc, #16]	; (800d864 <__assert_func+0x38>)
 800d852:	461c      	mov	r4, r3
 800d854:	e7f3      	b.n	800d83e <__assert_func+0x12>
 800d856:	bf00      	nop
 800d858:	20000028 	.word	0x20000028
 800d85c:	0800e47d 	.word	0x0800e47d
 800d860:	0800e48a 	.word	0x0800e48a
 800d864:	0800e4b8 	.word	0x0800e4b8

0800d868 <_close_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4d06      	ldr	r5, [pc, #24]	; (800d884 <_close_r+0x1c>)
 800d86c:	2300      	movs	r3, #0
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	602b      	str	r3, [r5, #0]
 800d874:	f7f5 f925 	bl	8002ac2 <_close>
 800d878:	1c43      	adds	r3, r0, #1
 800d87a:	d102      	bne.n	800d882 <_close_r+0x1a>
 800d87c:	682b      	ldr	r3, [r5, #0]
 800d87e:	b103      	cbz	r3, 800d882 <_close_r+0x1a>
 800d880:	6023      	str	r3, [r4, #0]
 800d882:	bd38      	pop	{r3, r4, r5, pc}
 800d884:	200019b0 	.word	0x200019b0

0800d888 <fiprintf>:
 800d888:	b40e      	push	{r1, r2, r3}
 800d88a:	b503      	push	{r0, r1, lr}
 800d88c:	4601      	mov	r1, r0
 800d88e:	ab03      	add	r3, sp, #12
 800d890:	4805      	ldr	r0, [pc, #20]	; (800d8a8 <fiprintf+0x20>)
 800d892:	f853 2b04 	ldr.w	r2, [r3], #4
 800d896:	6800      	ldr	r0, [r0, #0]
 800d898:	9301      	str	r3, [sp, #4]
 800d89a:	f7ff fe41 	bl	800d520 <_vfiprintf_r>
 800d89e:	b002      	add	sp, #8
 800d8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8a4:	b003      	add	sp, #12
 800d8a6:	4770      	bx	lr
 800d8a8:	20000028 	.word	0x20000028

0800d8ac <_fstat_r>:
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	4d07      	ldr	r5, [pc, #28]	; (800d8cc <_fstat_r+0x20>)
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	4608      	mov	r0, r1
 800d8b6:	4611      	mov	r1, r2
 800d8b8:	602b      	str	r3, [r5, #0]
 800d8ba:	f7f5 f90e 	bl	8002ada <_fstat>
 800d8be:	1c43      	adds	r3, r0, #1
 800d8c0:	d102      	bne.n	800d8c8 <_fstat_r+0x1c>
 800d8c2:	682b      	ldr	r3, [r5, #0]
 800d8c4:	b103      	cbz	r3, 800d8c8 <_fstat_r+0x1c>
 800d8c6:	6023      	str	r3, [r4, #0]
 800d8c8:	bd38      	pop	{r3, r4, r5, pc}
 800d8ca:	bf00      	nop
 800d8cc:	200019b0 	.word	0x200019b0

0800d8d0 <_isatty_r>:
 800d8d0:	b538      	push	{r3, r4, r5, lr}
 800d8d2:	4d06      	ldr	r5, [pc, #24]	; (800d8ec <_isatty_r+0x1c>)
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	4608      	mov	r0, r1
 800d8da:	602b      	str	r3, [r5, #0]
 800d8dc:	f7f5 f90d 	bl	8002afa <_isatty>
 800d8e0:	1c43      	adds	r3, r0, #1
 800d8e2:	d102      	bne.n	800d8ea <_isatty_r+0x1a>
 800d8e4:	682b      	ldr	r3, [r5, #0]
 800d8e6:	b103      	cbz	r3, 800d8ea <_isatty_r+0x1a>
 800d8e8:	6023      	str	r3, [r4, #0]
 800d8ea:	bd38      	pop	{r3, r4, r5, pc}
 800d8ec:	200019b0 	.word	0x200019b0

0800d8f0 <_lseek_r>:
 800d8f0:	b538      	push	{r3, r4, r5, lr}
 800d8f2:	4d07      	ldr	r5, [pc, #28]	; (800d910 <_lseek_r+0x20>)
 800d8f4:	4604      	mov	r4, r0
 800d8f6:	4608      	mov	r0, r1
 800d8f8:	4611      	mov	r1, r2
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	602a      	str	r2, [r5, #0]
 800d8fe:	461a      	mov	r2, r3
 800d900:	f7f5 f906 	bl	8002b10 <_lseek>
 800d904:	1c43      	adds	r3, r0, #1
 800d906:	d102      	bne.n	800d90e <_lseek_r+0x1e>
 800d908:	682b      	ldr	r3, [r5, #0]
 800d90a:	b103      	cbz	r3, 800d90e <_lseek_r+0x1e>
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	bd38      	pop	{r3, r4, r5, pc}
 800d910:	200019b0 	.word	0x200019b0

0800d914 <__ascii_mbtowc>:
 800d914:	b082      	sub	sp, #8
 800d916:	b901      	cbnz	r1, 800d91a <__ascii_mbtowc+0x6>
 800d918:	a901      	add	r1, sp, #4
 800d91a:	b142      	cbz	r2, 800d92e <__ascii_mbtowc+0x1a>
 800d91c:	b14b      	cbz	r3, 800d932 <__ascii_mbtowc+0x1e>
 800d91e:	7813      	ldrb	r3, [r2, #0]
 800d920:	600b      	str	r3, [r1, #0]
 800d922:	7812      	ldrb	r2, [r2, #0]
 800d924:	1e10      	subs	r0, r2, #0
 800d926:	bf18      	it	ne
 800d928:	2001      	movne	r0, #1
 800d92a:	b002      	add	sp, #8
 800d92c:	4770      	bx	lr
 800d92e:	4610      	mov	r0, r2
 800d930:	e7fb      	b.n	800d92a <__ascii_mbtowc+0x16>
 800d932:	f06f 0001 	mvn.w	r0, #1
 800d936:	e7f8      	b.n	800d92a <__ascii_mbtowc+0x16>

0800d938 <_read_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4d07      	ldr	r5, [pc, #28]	; (800d958 <_read_r+0x20>)
 800d93c:	4604      	mov	r4, r0
 800d93e:	4608      	mov	r0, r1
 800d940:	4611      	mov	r1, r2
 800d942:	2200      	movs	r2, #0
 800d944:	602a      	str	r2, [r5, #0]
 800d946:	461a      	mov	r2, r3
 800d948:	f7f5 f882 	bl	8002a50 <_read>
 800d94c:	1c43      	adds	r3, r0, #1
 800d94e:	d102      	bne.n	800d956 <_read_r+0x1e>
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	b103      	cbz	r3, 800d956 <_read_r+0x1e>
 800d954:	6023      	str	r3, [r4, #0]
 800d956:	bd38      	pop	{r3, r4, r5, pc}
 800d958:	200019b0 	.word	0x200019b0

0800d95c <__ascii_wctomb>:
 800d95c:	b149      	cbz	r1, 800d972 <__ascii_wctomb+0x16>
 800d95e:	2aff      	cmp	r2, #255	; 0xff
 800d960:	bf85      	ittet	hi
 800d962:	238a      	movhi	r3, #138	; 0x8a
 800d964:	6003      	strhi	r3, [r0, #0]
 800d966:	700a      	strbls	r2, [r1, #0]
 800d968:	f04f 30ff 	movhi.w	r0, #4294967295
 800d96c:	bf98      	it	ls
 800d96e:	2001      	movls	r0, #1
 800d970:	4770      	bx	lr
 800d972:	4608      	mov	r0, r1
 800d974:	4770      	bx	lr

0800d976 <abort>:
 800d976:	b508      	push	{r3, lr}
 800d978:	2006      	movs	r0, #6
 800d97a:	f000 f82b 	bl	800d9d4 <raise>
 800d97e:	2001      	movs	r0, #1
 800d980:	f7f5 f85c 	bl	8002a3c <_exit>

0800d984 <_raise_r>:
 800d984:	291f      	cmp	r1, #31
 800d986:	b538      	push	{r3, r4, r5, lr}
 800d988:	4604      	mov	r4, r0
 800d98a:	460d      	mov	r5, r1
 800d98c:	d904      	bls.n	800d998 <_raise_r+0x14>
 800d98e:	2316      	movs	r3, #22
 800d990:	6003      	str	r3, [r0, #0]
 800d992:	f04f 30ff 	mov.w	r0, #4294967295
 800d996:	bd38      	pop	{r3, r4, r5, pc}
 800d998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d99a:	b112      	cbz	r2, 800d9a2 <_raise_r+0x1e>
 800d99c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9a0:	b94b      	cbnz	r3, 800d9b6 <_raise_r+0x32>
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f000 f830 	bl	800da08 <_getpid_r>
 800d9a8:	462a      	mov	r2, r5
 800d9aa:	4601      	mov	r1, r0
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9b2:	f000 b817 	b.w	800d9e4 <_kill_r>
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d00a      	beq.n	800d9d0 <_raise_r+0x4c>
 800d9ba:	1c59      	adds	r1, r3, #1
 800d9bc:	d103      	bne.n	800d9c6 <_raise_r+0x42>
 800d9be:	2316      	movs	r3, #22
 800d9c0:	6003      	str	r3, [r0, #0]
 800d9c2:	2001      	movs	r0, #1
 800d9c4:	e7e7      	b.n	800d996 <_raise_r+0x12>
 800d9c6:	2400      	movs	r4, #0
 800d9c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	4798      	blx	r3
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	e7e0      	b.n	800d996 <_raise_r+0x12>

0800d9d4 <raise>:
 800d9d4:	4b02      	ldr	r3, [pc, #8]	; (800d9e0 <raise+0xc>)
 800d9d6:	4601      	mov	r1, r0
 800d9d8:	6818      	ldr	r0, [r3, #0]
 800d9da:	f7ff bfd3 	b.w	800d984 <_raise_r>
 800d9de:	bf00      	nop
 800d9e0:	20000028 	.word	0x20000028

0800d9e4 <_kill_r>:
 800d9e4:	b538      	push	{r3, r4, r5, lr}
 800d9e6:	4d07      	ldr	r5, [pc, #28]	; (800da04 <_kill_r+0x20>)
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	4608      	mov	r0, r1
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	602b      	str	r3, [r5, #0]
 800d9f2:	f7f5 f813 	bl	8002a1c <_kill>
 800d9f6:	1c43      	adds	r3, r0, #1
 800d9f8:	d102      	bne.n	800da00 <_kill_r+0x1c>
 800d9fa:	682b      	ldr	r3, [r5, #0]
 800d9fc:	b103      	cbz	r3, 800da00 <_kill_r+0x1c>
 800d9fe:	6023      	str	r3, [r4, #0]
 800da00:	bd38      	pop	{r3, r4, r5, pc}
 800da02:	bf00      	nop
 800da04:	200019b0 	.word	0x200019b0

0800da08 <_getpid_r>:
 800da08:	f7f5 b800 	b.w	8002a0c <_getpid>

0800da0c <_init>:
 800da0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0e:	bf00      	nop
 800da10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da12:	bc08      	pop	{r3}
 800da14:	469e      	mov	lr, r3
 800da16:	4770      	bx	lr

0800da18 <_fini>:
 800da18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1a:	bf00      	nop
 800da1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da1e:	bc08      	pop	{r3}
 800da20:	469e      	mov	lr, r3
 800da22:	4770      	bx	lr
