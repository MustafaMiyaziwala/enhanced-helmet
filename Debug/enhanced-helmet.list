
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b968  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  0800bb08  0800bb08  0001bb08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3f4  0800c3f4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3f4  0800c3f4  0001c3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3fc  0800c3fc  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3fc  0800c3fc  0001c3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c400  0800c400  0001c400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ec0  200001f8  0800c5fc  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200030b8  0800c5fc  000230b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f675  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ff8  00000000  00000000  0004f89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002b435  00000000  00000000  00054895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  0007fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005b50  00000000  00000000  00080ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006e3b  00000000  00000000  00086a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003188a  00000000  00000000  0008d853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1b89  00000000  00000000  000bf0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160c66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054a4  00000000  00000000  00160cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800baf0 	.word	0x0800baf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800baf0 	.word	0x0800baf0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <audio_init>:
}


void audio_init(Audio* audio) {
	for (uint8_t i = 0; i < MAX_AUDIO_QUEUE_LEN; ++i) {
		audio->queue[i] = NULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8000f22:	e9c0 3307 	strd	r3, r3, [r0, #28]
	}

	audio->read_pos = 0;
	audio->write_pos = 0;
 8000f26:	f880 385b 	strb.w	r3, [r0, #2139]	; 0x85b
	audio->dac_flag = 0;
 8000f2a:	f8a0 3859 	strh.w	r3, [r0, #2137]	; 0x859
	audio->bytes_left = 0;
 8000f2e:	f8c0 3850 	str.w	r3, [r0, #2128]	; 0x850
}
 8000f32:	4770      	bx	lr

08000f34 <check_and_fill_audio_buf>:

uint8_t is_playing(Audio* audio) {
	return audio->dac_flag & (1 << 2);
 8000f34:	f890 3859 	ldrb.w	r3, [r0, #2137]	; 0x859
	audio->write_pos = (audio->write_pos + 1) % MAX_AUDIO_QUEUE_LEN;
	HAL_TIM_Base_Start_IT(audio->htim);
}

void check_and_fill_audio_buf(Audio* audio) {
	if (!(is_playing(audio))) {
 8000f38:	0759      	lsls	r1, r3, #29
 8000f3a:	d53c      	bpl.n	8000fb6 <check_and_fill_audio_buf+0x82>
void check_and_fill_audio_buf(Audio* audio) {
 8000f3c:	b510      	push	{r4, lr}
		return;
	}

	if (!(audio->dac_flag & 1)) {
 8000f3e:	07da      	lsls	r2, r3, #31
void check_and_fill_audio_buf(Audio* audio) {
 8000f40:	b082      	sub	sp, #8
 8000f42:	4604      	mov	r4, r0
	if (!(audio->dac_flag & 1)) {
 8000f44:	d51e      	bpl.n	8000f84 <check_and_fill_audio_buf+0x50>
		fill_audio_buffer(audio, 0);
	}

	if (!(audio->dac_flag & (1 << 1))) {
 8000f46:	079b      	lsls	r3, r3, #30
 8000f48:	d501      	bpl.n	8000f4e <check_and_fill_audio_buf+0x1a>
		fill_audio_buffer(audio, 1);
	}
}
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd10      	pop	{r4, pc}
	UINT bytes_to_read = audio->wav_header.file_size < AUDIO_BUF_LEN
 8000f4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 8000f50:	6860      	ldr	r0, [r4, #4]
 8000f52:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000f56:	bf28      	it	cs
 8000f58:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8000f5c:	ab01      	add	r3, sp, #4
 8000f5e:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 8000f62:	f007 fa51 	bl	8008408 <f_read>
	if (res != FR_OK || !bytes_read) {
 8000f66:	2800      	cmp	r0, #0
 8000f68:	d1ef      	bne.n	8000f4a <check_and_fill_audio_buf+0x16>
 8000f6a:	9b01      	ldr	r3, [sp, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0ec      	beq.n	8000f4a <check_and_fill_audio_buf+0x16>
	audio->wav_header.file_size -= bytes_read;
 8000f70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000f72:	f894 2859 	ldrb.w	r2, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 8000f76:	1acb      	subs	r3, r1, r3
	audio->dac_flag |= (1 << buf_bank);
 8000f78:	f042 0202 	orr.w	r2, r2, #2
	audio->wav_header.file_size -= bytes_read;
 8000f7c:	62a3      	str	r3, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000f7e:	f884 2859 	strb.w	r2, [r4, #2137]	; 0x859
	return 1;
 8000f82:	e7e2      	b.n	8000f4a <check_and_fill_audio_buf+0x16>
	UINT bytes_to_read = audio->wav_header.file_size < AUDIO_BUF_LEN
 8000f84:	6a82      	ldr	r2, [r0, #40]	; 0x28
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 8000f86:	6840      	ldr	r0, [r0, #4]
 8000f88:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000f8c:	bf28      	it	cs
 8000f8e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8000f92:	ab01      	add	r3, sp, #4
 8000f94:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8000f98:	f007 fa36 	bl	8008408 <f_read>
	if (res != FR_OK || !bytes_read) {
 8000f9c:	b960      	cbnz	r0, 8000fb8 <check_and_fill_audio_buf+0x84>
 8000f9e:	9a01      	ldr	r2, [sp, #4]
 8000fa0:	b152      	cbz	r2, 8000fb8 <check_and_fill_audio_buf+0x84>
	audio->wav_header.file_size -= bytes_read;
 8000fa2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000fa4:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 8000fa8:	1a8a      	subs	r2, r1, r2
	audio->dac_flag |= (1 << buf_bank);
 8000faa:	f043 0301 	orr.w	r3, r3, #1
	audio->wav_header.file_size -= bytes_read;
 8000fae:	62a2      	str	r2, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000fb0:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
	return 1;
 8000fb4:	e7c7      	b.n	8000f46 <check_and_fill_audio_buf+0x12>
 8000fb6:	4770      	bx	lr
	if (!(audio->dac_flag & (1 << 1))) {
 8000fb8:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 8000fbc:	079b      	lsls	r3, r3, #30
 8000fbe:	d4c4      	bmi.n	8000f4a <check_and_fill_audio_buf+0x16>
 8000fc0:	e7c5      	b.n	8000f4e <check_and_fill_audio_buf+0x1a>
 8000fc2:	bf00      	nop

08000fc4 <audio_callback>:

void audio_callback(Audio* audio) {
 8000fc4:	b570      	push	{r4, r5, r6, lr}

	if (!audio->bytes_left) {
 8000fc6:	f8d0 5850 	ldr.w	r5, [r0, #2128]	; 0x850
void audio_callback(Audio* audio) {
 8000fca:	b082      	sub	sp, #8
 8000fcc:	4604      	mov	r4, r0
	if (!audio->bytes_left) {
 8000fce:	2d00      	cmp	r5, #0
 8000fd0:	d04d      	beq.n	800106e <audio_callback+0xaa>
		shutdown_dac(audio->ext_dac);
		play_next(audio);
		return;
	}

	if (audio->dac_buf_idx >= AUDIO_BUF_LEN) {
 8000fd2:	f8b0 3854 	ldrh.w	r3, [r0, #2132]	; 0x854
 8000fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fda:	d218      	bcs.n	800100e <audio_callback+0x4a>
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
		audio->dac_buf_idx = 0;
	}

	// ERROR CASE: stop and reinitialize
	if (!(audio->dac_flag & 0b11)) {
 8000fdc:	f890 5859 	ldrb.w	r5, [r0, #2137]	; 0x859
 8000fe0:	f015 0503 	ands.w	r5, r5, #3
 8000fe4:	d028      	beq.n	8001038 <audio_callback+0x74>
		audio_init(audio);
		return;
	}

	write_to_dac(audio->ext_dac,
			audio->dac_buf[audio->dac_buf_bank][audio->dac_buf_idx++]);
 8000fe6:	f894 2858 	ldrb.w	r2, [r4, #2136]	; 0x858
	write_to_dac(audio->ext_dac,
 8000fea:	68a0      	ldr	r0, [r4, #8]
 8000fec:	eb04 2282 	add.w	r2, r4, r2, lsl #10
			audio->dac_buf[audio->dac_buf_bank][audio->dac_buf_idx++]);
 8000ff0:	1c59      	adds	r1, r3, #1
	write_to_dac(audio->ext_dac,
 8000ff2:	4413      	add	r3, r2
			audio->dac_buf[audio->dac_buf_bank][audio->dac_buf_idx++]);
 8000ff4:	f8a4 1854 	strh.w	r1, [r4, #2132]	; 0x854
	write_to_dac(audio->ext_dac,
 8000ff8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8000ffc:	f000 fb4e 	bl	800169c <write_to_dac>

	--audio->bytes_left;
 8001000:	f8d4 3850 	ldr.w	r3, [r4, #2128]	; 0x850
 8001004:	3b01      	subs	r3, #1
 8001006:	f8c4 3850 	str.w	r3, [r4, #2128]	; 0x850
}
 800100a:	b002      	add	sp, #8
 800100c:	bd70      	pop	{r4, r5, r6, pc}
		audio->dac_flag &= ~(1 << audio->dac_buf_bank);
 800100e:	f890 3858 	ldrb.w	r3, [r0, #2136]	; 0x858
 8001012:	f890 5859 	ldrb.w	r5, [r0, #2137]	; 0x859
 8001016:	2101      	movs	r1, #1
 8001018:	4099      	lsls	r1, r3
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
 800101a:	1c5a      	adds	r2, r3, #1
		audio->dac_flag &= ~(1 << audio->dac_buf_bank);
 800101c:	ea25 0501 	bic.w	r5, r5, r1
		audio->dac_buf_idx = 0;
 8001020:	2300      	movs	r3, #0
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
 8001022:	f002 0201 	and.w	r2, r2, #1
		audio->dac_flag &= ~(1 << audio->dac_buf_bank);
 8001026:	f880 5859 	strb.w	r5, [r0, #2137]	; 0x859
	if (!(audio->dac_flag & 0b11)) {
 800102a:	f015 0503 	ands.w	r5, r5, #3
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
 800102e:	f880 2858 	strb.w	r2, [r0, #2136]	; 0x858
		audio->dac_buf_idx = 0;
 8001032:	f8a0 3854 	strh.w	r3, [r0, #2132]	; 0x854
	if (!(audio->dac_flag & 0b11)) {
 8001036:	d1d6      	bne.n	8000fe6 <audio_callback+0x22>
	HAL_TIM_Base_Stop_IT(audio->htim);
 8001038:	68e0      	ldr	r0, [r4, #12]
 800103a:	f004 ff49 	bl	8005ed0 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(audio->amp_enable_port, audio->amp_enable_pin, GPIO_PIN_RESET);
 800103e:	f8b4 1856 	ldrh.w	r1, [r4, #2134]	; 0x856
 8001042:	6920      	ldr	r0, [r4, #16]
 8001044:	462a      	mov	r2, r5
 8001046:	f003 fa95 	bl	8004574 <HAL_GPIO_WritePin>
	shutdown_dac(audio->ext_dac);
 800104a:	68a0      	ldr	r0, [r4, #8]
 800104c:	f000 fb06 	bl	800165c <shutdown_dac>
	f_close(audio->fil);
 8001050:	6860      	ldr	r0, [r4, #4]
 8001052:	f007 fce3 	bl	8008a1c <f_close>
		audio->queue[i] = NULL;
 8001056:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800105a:	e9c4 5507 	strd	r5, r5, [r4, #28]
	audio->dac_flag = 0;
 800105e:	f8a4 5859 	strh.w	r5, [r4, #2137]	; 0x859
	audio->write_pos = 0;
 8001062:	f884 585b 	strb.w	r5, [r4, #2139]	; 0x85b
	audio->bytes_left = 0;
 8001066:	f8c4 5850 	str.w	r5, [r4, #2128]	; 0x850
}
 800106a:	b002      	add	sp, #8
 800106c:	bd70      	pop	{r4, r5, r6, pc}
		shutdown_dac(audio->ext_dac);
 800106e:	6880      	ldr	r0, [r0, #8]
 8001070:	f000 faf4 	bl	800165c <shutdown_dac>
	const TCHAR* filename = audio->queue[audio->read_pos];
 8001074:	f894 385a 	ldrb.w	r3, [r4, #2138]	; 0x85a
 8001078:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800107c:	695e      	ldr	r6, [r3, #20]
	if (!filename) {
 800107e:	2e00      	cmp	r6, #0
 8001080:	d059      	beq.n	8001136 <audio_callback+0x172>
	f_open(audio->fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001082:	2213      	movs	r2, #19
 8001084:	4631      	mov	r1, r6
 8001086:	6860      	ldr	r0, [r4, #4]
 8001088:	f007 f842 	bl	8008110 <f_open>
	f_read(audio->fil, &audio->wav_header, sizeof(WAV_Header), &count);
 800108c:	466b      	mov	r3, sp
 800108e:	222c      	movs	r2, #44	; 0x2c
 8001090:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8001094:	6860      	ldr	r0, [r4, #4]
 8001096:	f007 f9b7 	bl	8008408 <f_read>
	audio->queue[audio->read_pos] = NULL;
 800109a:	f894 385a 	ldrb.w	r3, [r4, #2138]	; 0x85a
	audio->bytes_left = audio->wav_header.file_size;
 800109e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 80010a0:	6860      	ldr	r0, [r4, #4]
	audio->queue[audio->read_pos] = NULL;
 80010a2:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 	audio->read_pos = (audio->read_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 80010a6:	3301      	adds	r3, #1
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 80010a8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 	audio->read_pos = (audio->read_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 80010ac:	f003 0303 	and.w	r3, r3, #3
	audio->queue[audio->read_pos] = NULL;
 80010b0:	614d      	str	r5, [r1, #20]
	audio->bytes_left = audio->wav_header.file_size;
 80010b2:	f8c4 2850 	str.w	r2, [r4, #2128]	; 0x850
 	audio->read_pos = (audio->read_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 80010b6:	f884 385a 	strb.w	r3, [r4, #2138]	; 0x85a
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 80010ba:	bf28      	it	cs
 80010bc:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80010c0:	ab01      	add	r3, sp, #4
 80010c2:	f104 0150 	add.w	r1, r4, #80	; 0x50
 80010c6:	f007 f99f 	bl	8008408 <f_read>
	UINT bytes_to_read = audio->wav_header.file_size < AUDIO_BUF_LEN
 80010ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (res != FR_OK || !bytes_read) {
 80010cc:	b948      	cbnz	r0, 80010e2 <audio_callback+0x11e>
 80010ce:	9b01      	ldr	r3, [sp, #4]
 80010d0:	b13b      	cbz	r3, 80010e2 <audio_callback+0x11e>
	audio->dac_flag |= (1 << buf_bank);
 80010d2:	f894 1859 	ldrb.w	r1, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 80010d6:	1ad2      	subs	r2, r2, r3
	audio->dac_flag |= (1 << buf_bank);
 80010d8:	f041 0301 	orr.w	r3, r1, #1
	audio->wav_header.file_size -= bytes_read;
 80010dc:	62a2      	str	r2, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 80010de:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 80010e2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80010e6:	bf28      	it	cs
 80010e8:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80010ec:	6860      	ldr	r0, [r4, #4]
 80010ee:	ab01      	add	r3, sp, #4
 80010f0:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 80010f4:	f007 f988 	bl	8008408 <f_read>
	if (res != FR_OK || !bytes_read) {
 80010f8:	b9d0      	cbnz	r0, 8001130 <audio_callback+0x16c>
 80010fa:	9a01      	ldr	r2, [sp, #4]
 80010fc:	b1c2      	cbz	r2, 8001130 <audio_callback+0x16c>
	audio->wav_header.file_size -= bytes_read;
 80010fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8001100:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 8001104:	1a8a      	subs	r2, r1, r2
	audio->dac_flag |= (1 << buf_bank);
 8001106:	f043 0302 	orr.w	r3, r3, #2
	audio->wav_header.file_size -= bytes_read;
 800110a:	62a2      	str	r2, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 800110c:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
	if (!is_playing(audio)) {
 8001110:	075b      	lsls	r3, r3, #29
 8001112:	f53f af7a 	bmi.w	800100a <audio_callback+0x46>
		HAL_GPIO_WritePin(audio->amp_enable_port, audio->amp_enable_pin, GPIO_PIN_SET);
 8001116:	f8b4 1856 	ldrh.w	r1, [r4, #2134]	; 0x856
 800111a:	6920      	ldr	r0, [r4, #16]
 800111c:	2201      	movs	r2, #1
 800111e:	f003 fa29 	bl	8004574 <HAL_GPIO_WritePin>
		audio->dac_flag |= (1 << 2);
 8001122:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
 800112e:	e76c      	b.n	800100a <audio_callback+0x46>
	return audio->dac_flag & (1 << 2);
 8001130:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 8001134:	e7ec      	b.n	8001110 <audio_callback+0x14c>
	HAL_TIM_Base_Stop_IT(audio->htim);
 8001136:	68e0      	ldr	r0, [r4, #12]
 8001138:	f004 feca 	bl	8005ed0 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(audio->amp_enable_port, audio->amp_enable_pin, GPIO_PIN_RESET);
 800113c:	f8b4 1856 	ldrh.w	r1, [r4, #2134]	; 0x856
 8001140:	6920      	ldr	r0, [r4, #16]
 8001142:	4632      	mov	r2, r6
 8001144:	f003 fa16 	bl	8004574 <HAL_GPIO_WritePin>
	shutdown_dac(audio->ext_dac);
 8001148:	68a0      	ldr	r0, [r4, #8]
 800114a:	f000 fa87 	bl	800165c <shutdown_dac>
	f_close(audio->fil);
 800114e:	6860      	ldr	r0, [r4, #4]
 8001150:	f007 fc64 	bl	8008a1c <f_close>
	audio->dac_flag = 0;
 8001154:	f884 6859 	strb.w	r6, [r4, #2137]	; 0x859
		return;
 8001158:	e757      	b.n	800100a <audio_callback+0x46>
 800115a:	bf00      	nop

0800115c <Input_Resolve>:
	uint8_t buf[1];
	Input_Read(MemAddress, buf, 1);
	return buf[0];
}

void Input_Resolve() {
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	b086      	sub	sp, #24
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	aa05      	add	r2, sp, #20
 8001166:	2301      	movs	r3, #1
 8001168:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800116c:	9200      	str	r2, [sp, #0]
 800116e:	4851      	ldr	r0, [pc, #324]	; (80012b4 <Input_Resolve+0x158>)
 8001170:	2200      	movs	r2, #0
 8001172:	21b4      	movs	r1, #180	; 0xb4
 8001174:	f003 fe14 	bl	8004da0 <HAL_I2C_Mem_Read>
	if (ret != HAL_OK) {
 8001178:	b110      	cbz	r0, 8001180 <Input_Resolve+0x24>
		input_connected = 0;
 800117a:	4b4f      	ldr	r3, [pc, #316]	; (80012b8 <Input_Resolve+0x15c>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
	uint8_t read = Input_Read_Byte(MPR121_TOUCHSTATUS_L);
	for (int i = 0; i < 8; i++) {
		uint8_t button = read & (1 << i);
 8001180:	f99d 4014 	ldrsb.w	r4, [sp, #20]
		if (button && !status[i]) {
 8001184:	f014 0101 	ands.w	r1, r4, #1
		uint8_t button = read & (1 << i);
 8001188:	f004 0601 	and.w	r6, r4, #1
		if (button && !status[i]) {
 800118c:	d13d      	bne.n	800120a <Input_Resolve+0xae>
			Input_Touched(i);
		} else if (!button && status[i]) {
 800118e:	4d4b      	ldr	r5, [pc, #300]	; (80012bc <Input_Resolve+0x160>)
 8001190:	782b      	ldrb	r3, [r5, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d176      	bne.n	8001284 <Input_Resolve+0x128>
		if (button && !status[i]) {
 8001196:	07a2      	lsls	r2, r4, #30
			Input_Released(i);
		}
		status[i] = button;
 8001198:	702e      	strb	r6, [r5, #0]
		uint8_t button = read & (1 << i);
 800119a:	f004 0602 	and.w	r6, r4, #2
		if (button && !status[i]) {
 800119e:	d444      	bmi.n	800122a <Input_Resolve+0xce>
		} else if (!button && status[i]) {
 80011a0:	786b      	ldrb	r3, [r5, #1]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d172      	bne.n	800128c <Input_Resolve+0x130>
		if (button && !status[i]) {
 80011a6:	0763      	lsls	r3, r4, #29
		status[i] = button;
 80011a8:	706e      	strb	r6, [r5, #1]
		uint8_t button = read & (1 << i);
 80011aa:	f004 0604 	and.w	r6, r4, #4
		if (button && !status[i]) {
 80011ae:	d534      	bpl.n	800121a <Input_Resolve+0xbe>
 80011b0:	78ab      	ldrb	r3, [r5, #2]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d06f      	beq.n	8001296 <Input_Resolve+0x13a>
 80011b6:	0720      	lsls	r0, r4, #28
		status[i] = button;
 80011b8:	70ae      	strb	r6, [r5, #2]
		uint8_t button = read & (1 << i);
 80011ba:	f004 0608 	and.w	r6, r4, #8
		if (button && !status[i]) {
 80011be:	d43c      	bmi.n	800123a <Input_Resolve+0xde>
		} else if (!button && status[i]) {
 80011c0:	78eb      	ldrb	r3, [r5, #3]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d16c      	bne.n	80012a0 <Input_Resolve+0x144>
		if (button && !status[i]) {
 80011c6:	06e1      	lsls	r1, r4, #27
		status[i] = button;
 80011c8:	70ee      	strb	r6, [r5, #3]
		uint8_t button = read & (1 << i);
 80011ca:	f004 0610 	and.w	r6, r4, #16
		if (button && !status[i]) {
 80011ce:	d43c      	bmi.n	800124a <Input_Resolve+0xee>
		} else if (!button && status[i]) {
 80011d0:	792b      	ldrb	r3, [r5, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d169      	bne.n	80012aa <Input_Resolve+0x14e>
		if (button && !status[i]) {
 80011d6:	06a2      	lsls	r2, r4, #26
		status[i] = button;
 80011d8:	712e      	strb	r6, [r5, #4]
		uint8_t button = read & (1 << i);
 80011da:	f004 0620 	and.w	r6, r4, #32
		if (button && !status[i]) {
 80011de:	d43c      	bmi.n	800125a <Input_Resolve+0xfe>
		} else if (!button && status[i]) {
 80011e0:	796b      	ldrb	r3, [r5, #5]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d13c      	bne.n	8001260 <Input_Resolve+0x104>
		if (button && !status[i]) {
 80011e6:	0663      	lsls	r3, r4, #25
		status[i] = button;
 80011e8:	716e      	strb	r6, [r5, #5]
		uint8_t button = read & (1 << i);
 80011ea:	f004 0640 	and.w	r6, r4, #64	; 0x40
		if (button && !status[i]) {
 80011ee:	d43b      	bmi.n	8001268 <Input_Resolve+0x10c>
		} else if (!button && status[i]) {
 80011f0:	79ab      	ldrb	r3, [r5, #6]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d13b      	bne.n	800126e <Input_Resolve+0x112>
		if (button && !status[i]) {
 80011f6:	f014 0480 	ands.w	r4, r4, #128	; 0x80
		status[i] = button;
 80011fa:	71ae      	strb	r6, [r5, #6]
		if (button && !status[i]) {
 80011fc:	d03b      	beq.n	8001276 <Input_Resolve+0x11a>
 80011fe:	79eb      	ldrb	r3, [r5, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d03b      	beq.n	800127c <Input_Resolve+0x120>
		status[i] = button;
 8001204:	71ec      	strb	r4, [r5, #7]
	}
}
 8001206:	b006      	add	sp, #24
 8001208:	bd70      	pop	{r4, r5, r6, pc}
		if (button && !status[i]) {
 800120a:	4d2c      	ldr	r5, [pc, #176]	; (80012bc <Input_Resolve+0x160>)
 800120c:	7829      	ldrb	r1, [r5, #0]
 800120e:	2900      	cmp	r1, #0
 8001210:	d1c1      	bne.n	8001196 <Input_Resolve+0x3a>
		printf("Button %i pressed\n", button);
 8001212:	482b      	ldr	r0, [pc, #172]	; (80012c0 <Input_Resolve+0x164>)
 8001214:	f008 fbc4 	bl	80099a0 <iprintf>
 8001218:	e7bd      	b.n	8001196 <Input_Resolve+0x3a>
		} else if (!button && status[i]) {
 800121a:	78ab      	ldrb	r3, [r5, #2]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ca      	beq.n	80011b6 <Input_Resolve+0x5a>
		printf("Button %i released\n", button);
 8001220:	2102      	movs	r1, #2
 8001222:	4828      	ldr	r0, [pc, #160]	; (80012c4 <Input_Resolve+0x168>)
 8001224:	f008 fbbc 	bl	80099a0 <iprintf>
 8001228:	e7c5      	b.n	80011b6 <Input_Resolve+0x5a>
		if (button && !status[i]) {
 800122a:	786b      	ldrb	r3, [r5, #1]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1ba      	bne.n	80011a6 <Input_Resolve+0x4a>
		printf("Button %i pressed\n", button);
 8001230:	2101      	movs	r1, #1
 8001232:	4823      	ldr	r0, [pc, #140]	; (80012c0 <Input_Resolve+0x164>)
 8001234:	f008 fbb4 	bl	80099a0 <iprintf>
 8001238:	e7b5      	b.n	80011a6 <Input_Resolve+0x4a>
		if (button && !status[i]) {
 800123a:	78eb      	ldrb	r3, [r5, #3]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1c2      	bne.n	80011c6 <Input_Resolve+0x6a>
		printf("Button %i pressed\n", button);
 8001240:	2103      	movs	r1, #3
 8001242:	481f      	ldr	r0, [pc, #124]	; (80012c0 <Input_Resolve+0x164>)
 8001244:	f008 fbac 	bl	80099a0 <iprintf>
 8001248:	e7bd      	b.n	80011c6 <Input_Resolve+0x6a>
		if (button && !status[i]) {
 800124a:	792b      	ldrb	r3, [r5, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1c2      	bne.n	80011d6 <Input_Resolve+0x7a>
		printf("Button %i pressed\n", button);
 8001250:	2104      	movs	r1, #4
 8001252:	481b      	ldr	r0, [pc, #108]	; (80012c0 <Input_Resolve+0x164>)
 8001254:	f008 fba4 	bl	80099a0 <iprintf>
 8001258:	e7bd      	b.n	80011d6 <Input_Resolve+0x7a>
		if (button && !status[i]) {
 800125a:	796b      	ldrb	r3, [r5, #5]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1c2      	bne.n	80011e6 <Input_Resolve+0x8a>
		printf("Button not configured\n");
 8001260:	4819      	ldr	r0, [pc, #100]	; (80012c8 <Input_Resolve+0x16c>)
 8001262:	f008 fc39 	bl	8009ad8 <puts>
 8001266:	e7be      	b.n	80011e6 <Input_Resolve+0x8a>
		if (button && !status[i]) {
 8001268:	79ab      	ldrb	r3, [r5, #6]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1c3      	bne.n	80011f6 <Input_Resolve+0x9a>
		printf("Button not configured\n");
 800126e:	4816      	ldr	r0, [pc, #88]	; (80012c8 <Input_Resolve+0x16c>)
 8001270:	f008 fc32 	bl	8009ad8 <puts>
 8001274:	e7bf      	b.n	80011f6 <Input_Resolve+0x9a>
		} else if (!button && status[i]) {
 8001276:	79eb      	ldrb	r3, [r5, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0c3      	beq.n	8001204 <Input_Resolve+0xa8>
		printf("Button not configured\n");
 800127c:	4812      	ldr	r0, [pc, #72]	; (80012c8 <Input_Resolve+0x16c>)
 800127e:	f008 fc2b 	bl	8009ad8 <puts>
 8001282:	e7bf      	b.n	8001204 <Input_Resolve+0xa8>
		printf("Button %i released\n", button);
 8001284:	480f      	ldr	r0, [pc, #60]	; (80012c4 <Input_Resolve+0x168>)
 8001286:	f008 fb8b 	bl	80099a0 <iprintf>
 800128a:	e784      	b.n	8001196 <Input_Resolve+0x3a>
 800128c:	2101      	movs	r1, #1
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <Input_Resolve+0x168>)
 8001290:	f008 fb86 	bl	80099a0 <iprintf>
 8001294:	e787      	b.n	80011a6 <Input_Resolve+0x4a>
		printf("Button %i pressed\n", button);
 8001296:	2102      	movs	r1, #2
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <Input_Resolve+0x164>)
 800129a:	f008 fb81 	bl	80099a0 <iprintf>
 800129e:	e78a      	b.n	80011b6 <Input_Resolve+0x5a>
		printf("Button %i released\n", button);
 80012a0:	2103      	movs	r1, #3
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <Input_Resolve+0x168>)
 80012a4:	f008 fb7c 	bl	80099a0 <iprintf>
 80012a8:	e78d      	b.n	80011c6 <Input_Resolve+0x6a>
 80012aa:	2104      	movs	r1, #4
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <Input_Resolve+0x168>)
 80012ae:	f008 fb77 	bl	80099a0 <iprintf>
 80012b2:	e790      	b.n	80011d6 <Input_Resolve+0x7a>
 80012b4:	20002be0 	.word	0x20002be0
 80012b8:	20000004 	.word	0x20000004
 80012bc:	20000214 	.word	0x20000214
 80012c0:	0800bb08 	.word	0x0800bb08
 80012c4:	0800bb34 	.word	0x0800bb34
 80012c8:	0800bb1c 	.word	0x0800bb1c

080012cc <Input_Init>:
		Input_Write_Byte(MPR121_TOUCHTH_0 + 2 * i, touch);
		Input_Write_Byte(MPR121_RELEASETH_0 + 2 * i, release);
	}
}

void Input_Init() {
 80012cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012d0:	b087      	sub	sp, #28
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80012d2:	2301      	movs	r3, #1
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
	uint8_t buf[] = { pData };
 80012d8:	2063      	movs	r0, #99	; 0x63
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80012da:	ad05      	add	r5, sp, #20
 80012dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
	uint8_t buf[] = { pData };
 80012e0:	f88d 0014 	strb.w	r0, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80012e4:	9500      	str	r5, [sp, #0]
 80012e6:	48c5      	ldr	r0, [pc, #788]	; (80015fc <Input_Init+0x330>)
		input_connected = 0;
 80012e8:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8001600 <Input_Init+0x334>
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	21b4      	movs	r1, #180	; 0xb4
 80012f0:	f003 fc62 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 80012f4:	b110      	cbz	r0, 80012fc <Input_Init+0x30>
		input_connected = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c9 3000 	str.w	r3, [r9]
	Input_Write_Byte(MPR121_SOFTRESET, 0x63);
	HAL_Delay(1);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f002 fb95 	bl	8003a2c <HAL_Delay>
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001302:	f04f 32ff 	mov.w	r2, #4294967295
 8001306:	2301      	movs	r3, #1
 8001308:	e9cd 3201 	strd	r3, r2, [sp, #4]
	uint8_t buf[] = { pData };
 800130c:	2400      	movs	r4, #0
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800130e:	48bb      	ldr	r0, [pc, #748]	; (80015fc <Input_Init+0x330>)
 8001310:	9500      	str	r5, [sp, #0]
 8001312:	225e      	movs	r2, #94	; 0x5e
 8001314:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 8001316:	f88d 4014 	strb.w	r4, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800131a:	f003 fc4d 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 800131e:	b108      	cbz	r0, 8001324 <Input_Init+0x58>
		input_connected = 0;
 8001320:	f8c9 4000 	str.w	r4, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001324:	4eb5      	ldr	r6, [pc, #724]	; (80015fc <Input_Init+0x330>)
 8001326:	2441      	movs	r4, #65	; 0x41
 8001328:	f04f 38ff 	mov.w	r8, #4294967295
 800132c:	2701      	movs	r7, #1
	uint8_t buf[] = { pData };
 800132e:	f04f 0c0c 	mov.w	ip, #12
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001332:	4622      	mov	r2, r4
 8001334:	2301      	movs	r3, #1
 8001336:	21b4      	movs	r1, #180	; 0xb4
 8001338:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800133c:	9500      	str	r5, [sp, #0]
 800133e:	4630      	mov	r0, r6
	uint8_t buf[] = { pData };
 8001340:	f88d c014 	strb.w	ip, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001344:	f003 fc38 	bl	8004bb8 <HAL_I2C_Mem_Write>
 8001348:	1c62      	adds	r2, r4, #1
 800134a:	4686      	mov	lr, r0
	uint8_t buf[] = { pData };
 800134c:	f04f 0c06 	mov.w	ip, #6
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001350:	2301      	movs	r3, #1
 8001352:	b292      	uxth	r2, r2
 8001354:	21b4      	movs	r1, #180	; 0xb4
 8001356:	4630      	mov	r0, r6
	if (ret != HAL_OK) {
 8001358:	f1be 0f00 	cmp.w	lr, #0
 800135c:	d003      	beq.n	8001366 <Input_Init+0x9a>
		input_connected = 0;
 800135e:	f04f 0e00 	mov.w	lr, #0
 8001362:	f8c9 e000 	str.w	lr, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001366:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800136a:	9500      	str	r5, [sp, #0]
	uint8_t buf[] = { pData };
 800136c:	f88d c014 	strb.w	ip, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001370:	f003 fc22 	bl	8004bb8 <HAL_I2C_Mem_Write>
	for (uint8_t i = 0; i < 12; i++) {
 8001374:	1ca2      	adds	r2, r4, #2
		input_connected = 0;
 8001376:	2300      	movs	r3, #0
	if (ret != HAL_OK) {
 8001378:	2800      	cmp	r0, #0
 800137a:	f000 8164 	beq.w	8001646 <Input_Init+0x37a>
	for (uint8_t i = 0; i < 12; i++) {
 800137e:	b294      	uxth	r4, r2
 8001380:	2c59      	cmp	r4, #89	; 0x59
		input_connected = 0;
 8001382:	f8c9 3000 	str.w	r3, [r9]
	for (uint8_t i = 0; i < 12; i++) {
 8001386:	d1d2      	bne.n	800132e <Input_Init+0x62>
	uint8_t buf[] = { pData };
 8001388:	2301      	movs	r3, #1
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800138a:	f04f 32ff 	mov.w	r2, #4294967295
 800138e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001392:	489a      	ldr	r0, [pc, #616]	; (80015fc <Input_Init+0x330>)
 8001394:	9500      	str	r5, [sp, #0]
 8001396:	222b      	movs	r2, #43	; 0x2b
 8001398:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 800139a:	f88d 3014 	strb.w	r3, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800139e:	f003 fc0b 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 80013a2:	b110      	cbz	r0, 80013aa <Input_Init+0xde>
		input_connected = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c9 3000 	str.w	r3, [r9]
	uint8_t buf[] = { pData };
 80013aa:	2301      	movs	r3, #1
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80013b4:	4891      	ldr	r0, [pc, #580]	; (80015fc <Input_Init+0x330>)
 80013b6:	9500      	str	r5, [sp, #0]
 80013b8:	222c      	movs	r2, #44	; 0x2c
 80013ba:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 80013bc:	f88d 3014 	strb.w	r3, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80013c0:	f003 fbfa 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 80013c4:	b110      	cbz	r0, 80013cc <Input_Init+0x100>
		input_connected = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c9 3000 	str.w	r3, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
	uint8_t buf[] = { pData };
 80013d0:	220e      	movs	r2, #14
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80013d2:	2301      	movs	r3, #1
 80013d4:	e9cd 3101 	strd	r3, r1, [sp, #4]
	uint8_t buf[] = { pData };
 80013d8:	f88d 2014 	strb.w	r2, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80013dc:	4887      	ldr	r0, [pc, #540]	; (80015fc <Input_Init+0x330>)
 80013de:	9500      	str	r5, [sp, #0]
 80013e0:	222d      	movs	r2, #45	; 0x2d
 80013e2:	21b4      	movs	r1, #180	; 0xb4
 80013e4:	f003 fbe8 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 80013e8:	b110      	cbz	r0, 80013f0 <Input_Init+0x124>
		input_connected = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c9 3000 	str.w	r3, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	2301      	movs	r3, #1
 80013f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
	uint8_t buf[] = { pData };
 80013fa:	2400      	movs	r4, #0
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80013fc:	487f      	ldr	r0, [pc, #508]	; (80015fc <Input_Init+0x330>)
 80013fe:	9500      	str	r5, [sp, #0]
 8001400:	222e      	movs	r2, #46	; 0x2e
 8001402:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 8001404:	f88d 4014 	strb.w	r4, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001408:	f003 fbd6 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 800140c:	b108      	cbz	r0, 8001412 <Input_Init+0x146>
		input_connected = 0;
 800140e:	f8c9 4000 	str.w	r4, [r9]
	uint8_t buf[] = { pData };
 8001412:	2301      	movs	r3, #1
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800141c:	4877      	ldr	r0, [pc, #476]	; (80015fc <Input_Init+0x330>)
 800141e:	9500      	str	r5, [sp, #0]
 8001420:	222f      	movs	r2, #47	; 0x2f
 8001422:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 8001424:	f88d 3014 	strb.w	r3, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001428:	f003 fbc6 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 800142c:	b110      	cbz	r0, 8001434 <Input_Init+0x168>
		input_connected = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c9 3000 	str.w	r3, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
	uint8_t buf[] = { pData };
 8001438:	2205      	movs	r2, #5
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800143a:	2301      	movs	r3, #1
 800143c:	e9cd 3101 	strd	r3, r1, [sp, #4]
	uint8_t buf[] = { pData };
 8001440:	f88d 2014 	strb.w	r2, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001444:	486d      	ldr	r0, [pc, #436]	; (80015fc <Input_Init+0x330>)
 8001446:	9500      	str	r5, [sp, #0]
 8001448:	2230      	movs	r2, #48	; 0x30
 800144a:	21b4      	movs	r1, #180	; 0xb4
 800144c:	f003 fbb4 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 8001450:	b110      	cbz	r0, 8001458 <Input_Init+0x18c>
		input_connected = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c9 3000 	str.w	r3, [r9]
	uint8_t buf[] = { pData };
 8001458:	2301      	movs	r3, #1
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800145a:	f04f 32ff 	mov.w	r2, #4294967295
 800145e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001462:	4866      	ldr	r0, [pc, #408]	; (80015fc <Input_Init+0x330>)
 8001464:	9500      	str	r5, [sp, #0]
 8001466:	2231      	movs	r2, #49	; 0x31
 8001468:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 800146a:	f88d 3014 	strb.w	r3, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800146e:	f003 fba3 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 8001472:	b110      	cbz	r0, 800147a <Input_Init+0x1ae>
		input_connected = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c9 3000 	str.w	r3, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800147a:	f04f 32ff 	mov.w	r2, #4294967295
 800147e:	2301      	movs	r3, #1
 8001480:	e9cd 3201 	strd	r3, r2, [sp, #4]
	uint8_t buf[] = { pData };
 8001484:	2400      	movs	r4, #0
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001486:	485d      	ldr	r0, [pc, #372]	; (80015fc <Input_Init+0x330>)
 8001488:	9500      	str	r5, [sp, #0]
 800148a:	2232      	movs	r2, #50	; 0x32
 800148c:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 800148e:	f88d 4014 	strb.w	r4, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001492:	f003 fb91 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 8001496:	b108      	cbz	r0, 800149c <Input_Init+0x1d0>
		input_connected = 0;
 8001498:	f8c9 4000 	str.w	r4, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	2301      	movs	r3, #1
 80014a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
	uint8_t buf[] = { pData };
 80014a6:	2400      	movs	r4, #0
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80014a8:	4854      	ldr	r0, [pc, #336]	; (80015fc <Input_Init+0x330>)
 80014aa:	9500      	str	r5, [sp, #0]
 80014ac:	2233      	movs	r2, #51	; 0x33
 80014ae:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 80014b0:	f88d 4014 	strb.w	r4, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80014b4:	f003 fb80 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 80014b8:	b108      	cbz	r0, 80014be <Input_Init+0x1f2>
		input_connected = 0;
 80014ba:	f8c9 4000 	str.w	r4, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80014be:	f04f 32ff 	mov.w	r2, #4294967295
 80014c2:	2301      	movs	r3, #1
 80014c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
	uint8_t buf[] = { pData };
 80014c8:	2400      	movs	r4, #0
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80014ca:	484c      	ldr	r0, [pc, #304]	; (80015fc <Input_Init+0x330>)
 80014cc:	9500      	str	r5, [sp, #0]
 80014ce:	2234      	movs	r2, #52	; 0x34
 80014d0:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 80014d2:	f88d 4014 	strb.w	r4, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80014d6:	f003 fb6f 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 80014da:	b108      	cbz	r0, 80014e0 <Input_Init+0x214>
		input_connected = 0;
 80014dc:	f8c9 4000 	str.w	r4, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	2301      	movs	r3, #1
 80014e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
	uint8_t buf[] = { pData };
 80014ea:	2400      	movs	r4, #0
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80014ec:	4843      	ldr	r0, [pc, #268]	; (80015fc <Input_Init+0x330>)
 80014ee:	9500      	str	r5, [sp, #0]
 80014f0:	2235      	movs	r2, #53	; 0x35
 80014f2:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 80014f4:	f88d 4014 	strb.w	r4, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80014f8:	f003 fb5e 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 80014fc:	b108      	cbz	r0, 8001502 <Input_Init+0x236>
		input_connected = 0;
 80014fe:	f8c9 4000 	str.w	r4, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001502:	f04f 32ff 	mov.w	r2, #4294967295
 8001506:	2301      	movs	r3, #1
 8001508:	e9cd 3201 	strd	r3, r2, [sp, #4]
	uint8_t buf[] = { pData };
 800150c:	2400      	movs	r4, #0
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800150e:	483b      	ldr	r0, [pc, #236]	; (80015fc <Input_Init+0x330>)
 8001510:	9500      	str	r5, [sp, #0]
 8001512:	225b      	movs	r2, #91	; 0x5b
 8001514:	21b4      	movs	r1, #180	; 0xb4
	uint8_t buf[] = { pData };
 8001516:	f88d 4014 	strb.w	r4, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800151a:	f003 fb4d 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 800151e:	b108      	cbz	r0, 8001524 <Input_Init+0x258>
		input_connected = 0;
 8001520:	f8c9 4000 	str.w	r4, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
	uint8_t buf[] = { pData };
 8001528:	2210      	movs	r2, #16
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800152a:	2301      	movs	r3, #1
 800152c:	e9cd 3101 	strd	r3, r1, [sp, #4]
	uint8_t buf[] = { pData };
 8001530:	f88d 2014 	strb.w	r2, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001534:	4831      	ldr	r0, [pc, #196]	; (80015fc <Input_Init+0x330>)
 8001536:	9500      	str	r5, [sp, #0]
 8001538:	225c      	movs	r2, #92	; 0x5c
 800153a:	21b4      	movs	r1, #180	; 0xb4
 800153c:	f003 fb3c 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 8001540:	b110      	cbz	r0, 8001548 <Input_Init+0x27c>
		input_connected = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c9 3000 	str.w	r3, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
	uint8_t buf[] = { pData };
 800154c:	2220      	movs	r2, #32
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800154e:	2301      	movs	r3, #1
 8001550:	e9cd 3101 	strd	r3, r1, [sp, #4]
	uint8_t buf[] = { pData };
 8001554:	f88d 2014 	strb.w	r2, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001558:	4828      	ldr	r0, [pc, #160]	; (80015fc <Input_Init+0x330>)
 800155a:	9500      	str	r5, [sp, #0]
 800155c:	225d      	movs	r2, #93	; 0x5d
 800155e:	21b4      	movs	r1, #180	; 0xb4
 8001560:	f003 fb2a 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 8001564:	b110      	cbz	r0, 800156c <Input_Init+0x2a0>
		input_connected = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c9 3000 	str.w	r3, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
	uint8_t buf[] = { pData };
 8001570:	220b      	movs	r2, #11
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001572:	2301      	movs	r3, #1
 8001574:	e9cd 3101 	strd	r3, r1, [sp, #4]
	uint8_t buf[] = { pData };
 8001578:	f88d 2014 	strb.w	r2, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800157c:	481f      	ldr	r0, [pc, #124]	; (80015fc <Input_Init+0x330>)
 800157e:	9500      	str	r5, [sp, #0]
 8001580:	227b      	movs	r2, #123	; 0x7b
 8001582:	21b4      	movs	r1, #180	; 0xb4
 8001584:	f003 fb18 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 8001588:	b110      	cbz	r0, 8001590 <Input_Init+0x2c4>
		input_connected = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c9 3000 	str.w	r3, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
	uint8_t buf[] = { pData };
 8001594:	22c8      	movs	r2, #200	; 0xc8
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001596:	2301      	movs	r3, #1
 8001598:	e9cd 3101 	strd	r3, r1, [sp, #4]
	uint8_t buf[] = { pData };
 800159c:	f88d 2014 	strb.w	r2, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80015a0:	4816      	ldr	r0, [pc, #88]	; (80015fc <Input_Init+0x330>)
 80015a2:	9500      	str	r5, [sp, #0]
 80015a4:	227d      	movs	r2, #125	; 0x7d
 80015a6:	21b4      	movs	r1, #180	; 0xb4
 80015a8:	f003 fb06 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 80015ac:	b110      	cbz	r0, 80015b4 <Input_Init+0x2e8>
		input_connected = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c9 3000 	str.w	r3, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	2301      	movs	r3, #1
 80015ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
	uint8_t buf[] = { pData };
 80015be:	21b4      	movs	r1, #180	; 0xb4
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <Input_Init+0x330>)
 80015c2:	9500      	str	r5, [sp, #0]
 80015c4:	227f      	movs	r2, #127	; 0x7f
	uint8_t buf[] = { pData };
 80015c6:	f88d 1014 	strb.w	r1, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80015ca:	f003 faf5 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 80015ce:	b110      	cbz	r0, 80015d6 <Input_Init+0x30a>
		input_connected = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c9 3000 	str.w	r3, [r9]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80015d6:	f04f 31ff 	mov.w	r1, #4294967295
	uint8_t buf[] = { pData };
 80015da:	2282      	movs	r2, #130	; 0x82
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80015dc:	2301      	movs	r3, #1
 80015de:	e9cd 3101 	strd	r3, r1, [sp, #4]
	uint8_t buf[] = { pData };
 80015e2:	f88d 2014 	strb.w	r2, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <Input_Init+0x330>)
 80015e8:	9500      	str	r5, [sp, #0]
 80015ea:	227e      	movs	r2, #126	; 0x7e
 80015ec:	21b4      	movs	r1, #180	; 0xb4
 80015ee:	f003 fae3 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 80015f2:	b138      	cbz	r0, 8001604 <Input_Init+0x338>
		input_connected = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c9 3000 	str.w	r3, [r9]
 80015fa:	e003      	b.n	8001604 <Input_Init+0x338>
 80015fc:	20002be0 	.word	0x20002be0
 8001600:	20000004 	.word	0x20000004
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
	uint8_t buf[] = { pData };
 8001608:	2084      	movs	r0, #132	; 0x84
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 800160a:	2301      	movs	r3, #1
 800160c:	e9cd 3201 	strd	r3, r2, [sp, #4]
	uint8_t buf[] = { pData };
 8001610:	f88d 0014 	strb.w	r0, [sp, #20]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001614:	9500      	str	r5, [sp, #0]
 8001616:	480e      	ldr	r0, [pc, #56]	; (8001650 <Input_Init+0x384>)
 8001618:	225e      	movs	r2, #94	; 0x5e
 800161a:	21b4      	movs	r1, #180	; 0xb4
 800161c:	f003 facc 	bl	8004bb8 <HAL_I2C_Mem_Write>
	if (ret != HAL_OK) {
 8001620:	b940      	cbnz	r0, 8001634 <Input_Init+0x368>
	Input_Write_Byte(MPR121_LOWLIMIT, 130);    // UPLIMIT * 0.65

	// enable X electrodes and start MPR121
	uint8_t ECR_SETTING = 0b10000000 + NUM_ELECTRODES; // 5 bits for baseline tracking & proximity disabled + N electrodes running
	Input_Write_Byte(MPR121_ECR, ECR_SETTING); // start with above ECR setting
	if (input_connected) {
 8001622:	f8d9 3000 	ldr.w	r3, [r9]
 8001626:	b143      	cbz	r3, 800163a <Input_Init+0x36e>
		printf("Capacitive touch board initialized\n");
 8001628:	480a      	ldr	r0, [pc, #40]	; (8001654 <Input_Init+0x388>)
	} else {
		printf("Capacitive touch board not connected\n");
	}
}
 800162a:	b007      	add	sp, #28
 800162c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		printf("Capacitive touch board not connected\n");
 8001630:	f008 ba52 	b.w	8009ad8 <puts>
		input_connected = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c9 3000 	str.w	r3, [r9]
		printf("Capacitive touch board not connected\n");
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <Input_Init+0x38c>)
}
 800163c:	b007      	add	sp, #28
 800163e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		printf("Capacitive touch board not connected\n");
 8001642:	f008 ba49 	b.w	8009ad8 <puts>
	for (uint8_t i = 0; i < 12; i++) {
 8001646:	b294      	uxth	r4, r2
 8001648:	2c59      	cmp	r4, #89	; 0x59
 800164a:	f47f ae70 	bne.w	800132e <Input_Init+0x62>
 800164e:	e69b      	b.n	8001388 <Input_Init+0xbc>
 8001650:	20002be0 	.word	0x20002be0
 8001654:	0800bb48 	.word	0x0800bb48
 8001658:	0800bb6c 	.word	0x0800bb6c

0800165c <shutdown_dac>:
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}

	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
}

void shutdown_dac(Ext_DAC_t* ext_dac) {
 800165c:	b510      	push	{r4, lr}
 800165e:	4604      	mov	r4, r0
 8001660:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 8001662:	8901      	ldrh	r1, [r0, #8]
 8001664:	6840      	ldr	r0, [r0, #4]
 8001666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166a:	2200      	movs	r2, #0
 800166c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001670:	f002 ff80 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ext_dac->hspi, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 8001674:	6820      	ldr	r0, [r4, #0]
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	2201      	movs	r2, #1
 800167c:	f10d 0106 	add.w	r1, sp, #6
 8001680:	f004 f8d4 	bl	800582c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}
 8001684:	6820      	ldr	r0, [r4, #0]
 8001686:	f004 fb6d 	bl	8005d64 <HAL_SPI_GetState>
 800168a:	2801      	cmp	r0, #1
 800168c:	4602      	mov	r2, r0
 800168e:	d1f9      	bne.n	8001684 <shutdown_dac+0x28>
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
 8001690:	8921      	ldrh	r1, [r4, #8]
 8001692:	6860      	ldr	r0, [r4, #4]
 8001694:	f002 ff6e 	bl	8004574 <HAL_GPIO_WritePin>
	transmit_cmd(ext_dac, SHUTDOWN_CMD);
}
 8001698:	b002      	add	sp, #8
 800169a:	bd10      	pop	{r4, pc}

0800169c <write_to_dac>:

void write_to_dac(Ext_DAC_t* ext_dac, uint8_t val) {
 800169c:	b510      	push	{r4, lr}
	return (0b111 << 12) | (uint16_t)(val) << 4;
 800169e:	010b      	lsls	r3, r1, #4
void write_to_dac(Ext_DAC_t* ext_dac, uint8_t val) {
 80016a0:	b082      	sub	sp, #8
 80016a2:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 80016a4:	8901      	ldrh	r1, [r0, #8]
 80016a6:	6840      	ldr	r0, [r0, #4]
	return (0b111 << 12) | (uint16_t)(val) << 4;
 80016a8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f8ad 3006 	strh.w	r3, [sp, #6]
 80016b2:	f002 ff5f 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ext_dac->hspi, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 80016b6:	6820      	ldr	r0, [r4, #0]
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	2201      	movs	r2, #1
 80016be:	f10d 0106 	add.w	r1, sp, #6
 80016c2:	f004 f8b3 	bl	800582c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}
 80016c6:	6820      	ldr	r0, [r4, #0]
 80016c8:	f004 fb4c 	bl	8005d64 <HAL_SPI_GetState>
 80016cc:	2801      	cmp	r0, #1
 80016ce:	4602      	mov	r2, r0
 80016d0:	d1f9      	bne.n	80016c6 <write_to_dac+0x2a>
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
 80016d2:	8921      	ldrh	r1, [r4, #8]
 80016d4:	6860      	ldr	r0, [r4, #4]
 80016d6:	f002 ff4d 	bl	8004574 <HAL_GPIO_WritePin>
	transmit_cmd(ext_dac, val_to_dac(val));
}
 80016da:	b002      	add	sp, #8
 80016dc:	bd10      	pop	{r4, pc}
 80016de:	bf00      	nop

080016e0 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void)
{
 80016e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80016e4:	4834      	ldr	r0, [pc, #208]	; (80017b8 <SD_PowerOn+0xd8>)
 80016e6:	4d35      	ldr	r5, [pc, #212]	; (80017bc <SD_PowerOn+0xdc>)
{
 80016e8:	b086      	sub	sp, #24
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2102      	movs	r1, #2
 80016ee:	f002 ff41 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f002 f99a 	bl	8003a2c <HAL_Delay>
 80016f8:	240a      	movs	r4, #10
 80016fa:	26ff      	movs	r6, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80016fc:	682a      	ldr	r2, [r5, #0]
 80016fe:	f88d 600d 	strb.w	r6, [sp, #13]
 8001702:	6893      	ldr	r3, [r2, #8]
 8001704:	079f      	lsls	r7, r3, #30
 8001706:	d5fc      	bpl.n	8001702 <SD_PowerOn+0x22>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001708:	2364      	movs	r3, #100	; 0x64
 800170a:	2201      	movs	r2, #1
 800170c:	f10d 010d 	add.w	r1, sp, #13
 8001710:	4628      	mov	r0, r5
 8001712:	f004 f88b 	bl	800582c <HAL_SPI_Transmit>
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
	for(int i = 0; i < 10; i++)
 8001716:	3c01      	subs	r4, #1
 8001718:	d1f0      	bne.n	80016fc <SD_PowerOn+0x1c>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800171a:	4622      	mov	r2, r4
 800171c:	2102      	movs	r1, #2
 800171e:	4826      	ldr	r0, [pc, #152]	; (80017b8 <SD_PowerOn+0xd8>)
 8001720:	f002 ff28 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001724:	2001      	movs	r0, #1
 8001726:	f002 f981 	bl	8003a2c <HAL_Delay>

	/* slave select */
	SELECT();

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800172a:	2140      	movs	r1, #64	; 0x40
	args[1] = 0;
	args[2] = 0;
	args[3] = 0;
	args[4] = 0;
 800172c:	f44f 4315 	mov.w	r3, #38144	; 0x9500
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001730:	682a      	ldr	r2, [r5, #0]
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001732:	9104      	str	r1, [sp, #16]
	args[4] = 0;
 8001734:	f8ad 3014 	strh.w	r3, [sp, #20]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001738:	6893      	ldr	r3, [r2, #8]
 800173a:	0798      	lsls	r0, r3, #30
 800173c:	d5fc      	bpl.n	8001738 <SD_PowerOn+0x58>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800173e:	481f      	ldr	r0, [pc, #124]	; (80017bc <SD_PowerOn+0xdc>)
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001740:	4f1e      	ldr	r7, [pc, #120]	; (80017bc <SD_PowerOn+0xdc>)
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001742:	2364      	movs	r3, #100	; 0x64
 8001744:	2206      	movs	r2, #6
 8001746:	a904      	add	r1, sp, #16
 8001748:	f004 f870 	bl	800582c <HAL_SPI_Transmit>
}
 800174c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	dummy = 0xFF;
 8001750:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001754:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001756:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001758:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800175c:	6893      	ldr	r3, [r2, #8]
 800175e:	0799      	lsls	r1, r3, #30
 8001760:	d5fc      	bpl.n	800175c <SD_PowerOn+0x7c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001762:	2301      	movs	r3, #1
 8001764:	9600      	str	r6, [sp, #0]
 8001766:	f10d 020f 	add.w	r2, sp, #15
 800176a:	f10d 010e 	add.w	r1, sp, #14
 800176e:	4638      	mov	r0, r7
 8001770:	f004 f9ae 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8001774:	f89d 300f 	ldrb.w	r3, [sp, #15]
	args[5] = 0x95;		/* CRC */

	SPI_TxBuffer(args, sizeof(args));

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001778:	2b01      	cmp	r3, #1
 800177a:	d001      	beq.n	8001780 <SD_PowerOn+0xa0>
 800177c:	3c01      	subs	r4, #1
 800177e:	d1ea      	bne.n	8001756 <SD_PowerOn+0x76>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <SD_PowerOn+0xd8>)
 8001784:	2102      	movs	r1, #2
 8001786:	f002 fef5 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800178a:	2001      	movs	r0, #1
 800178c:	f002 f94e 	bl	8003a2c <HAL_Delay>
static void SPI_TxByte(uint8_t data)
 8001790:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001792:	682a      	ldr	r2, [r5, #0]
 8001794:	f88d 300f 	strb.w	r3, [sp, #15]
 8001798:	6893      	ldr	r3, [r2, #8]
 800179a:	079b      	lsls	r3, r3, #30
 800179c:	d5fc      	bpl.n	8001798 <SD_PowerOn+0xb8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800179e:	2364      	movs	r3, #100	; 0x64
 80017a0:	2201      	movs	r2, #1
 80017a2:	f10d 010f 	add.w	r1, sp, #15
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <SD_PowerOn+0xdc>)
 80017a8:	f004 f840 	bl	800582c <HAL_SPI_Transmit>
	}

	DESELECT();
	SPI_TxByte(0XFF);

	PowerFlag = 1;
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SD_PowerOn+0xe0>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
}
 80017b2:	b006      	add	sp, #24
 80017b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017b8:	40020800 	.word	0x40020800
 80017bc:	20002c8c 	.word	0x20002c8c
 80017c0:	2000021d 	.word	0x2000021d

080017c4 <SD_RxDataBlock>:
	return PowerFlag;
}

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80017c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80017c8:	4e33      	ldr	r6, [pc, #204]	; (8001898 <SD_RxDataBlock+0xd4>)
 80017ca:	4c34      	ldr	r4, [pc, #208]	; (800189c <SD_RxDataBlock+0xd8>)
 80017cc:	23c8      	movs	r3, #200	; 0xc8
{
 80017ce:	b085      	sub	sp, #20
 80017d0:	4605      	mov	r5, r0
 80017d2:	4689      	mov	r9, r1
	Timer1 = 200;
 80017d4:	8033      	strh	r3, [r6, #0]
	dummy = 0xFF;
 80017d6:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80017da:	2764      	movs	r7, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017dc:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80017de:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017e2:	6893      	ldr	r3, [r2, #8]
 80017e4:	079b      	lsls	r3, r3, #30
 80017e6:	d5fc      	bpl.n	80017e2 <SD_RxDataBlock+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80017e8:	2301      	movs	r3, #1
 80017ea:	9700      	str	r7, [sp, #0]
 80017ec:	f10d 020f 	add.w	r2, sp, #15
 80017f0:	f10d 010e 	add.w	r1, sp, #14
 80017f4:	4620      	mov	r0, r4
 80017f6:	f004 f96b 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 80017fa:	f89d 300f 	ldrb.w	r3, [sp, #15]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
	} while((token == 0xFF) && Timer1);
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d105      	bne.n	800180e <SD_RxDataBlock+0x4a>
 8001802:	8830      	ldrh	r0, [r6, #0]
 8001804:	2800      	cmp	r0, #0
 8001806:	d1e9      	bne.n	80017dc <SD_RxDataBlock+0x18>
	/* discard CRC */
	SPI_RxByte();
	SPI_RxByte();

	return TRUE;
}
 8001808:	b005      	add	sp, #20
 800180a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 800180e:	2bfe      	cmp	r3, #254	; 0xfe
 8001810:	d140      	bne.n	8001894 <SD_RxDataBlock+0xd0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001812:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800189c <SD_RxDataBlock+0xd8>
 8001816:	44a9      	add	r9, r5
	dummy = 0xFF;
 8001818:	27ff      	movs	r7, #255	; 0xff
 800181a:	3d01      	subs	r5, #1
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800181c:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800181e:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8001820:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001824:	6893      	ldr	r3, [r2, #8]
 8001826:	0798      	lsls	r0, r3, #30
 8001828:	d5fc      	bpl.n	8001824 <SD_RxDataBlock+0x60>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800182a:	2301      	movs	r3, #1
 800182c:	9600      	str	r6, [sp, #0]
 800182e:	f10d 020f 	add.w	r2, sp, #15
 8001832:	f10d 010e 	add.w	r1, sp, #14
 8001836:	4640      	mov	r0, r8
 8001838:	f004 f94a 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 800183c:	f89d 300f 	ldrb.w	r3, [sp, #15]
	*buff = SPI_RxByte();
 8001840:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while(len--);
 8001844:	45a9      	cmp	r9, r5
 8001846:	d1ea      	bne.n	800181e <SD_RxDataBlock+0x5a>
	dummy = 0xFF;
 8001848:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800184a:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800184c:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001850:	6893      	ldr	r3, [r2, #8]
 8001852:	0799      	lsls	r1, r3, #30
 8001854:	d5fc      	bpl.n	8001850 <SD_RxDataBlock+0x8c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001856:	2364      	movs	r3, #100	; 0x64
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	f10d 020f 	add.w	r2, sp, #15
 800185e:	2301      	movs	r3, #1
 8001860:	480e      	ldr	r0, [pc, #56]	; (800189c <SD_RxDataBlock+0xd8>)
 8001862:	f10d 010e 	add.w	r1, sp, #14
 8001866:	f004 f933 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 800186a:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800186c:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800186e:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001872:	6893      	ldr	r3, [r2, #8]
 8001874:	079b      	lsls	r3, r3, #30
 8001876:	d5fc      	bpl.n	8001872 <SD_RxDataBlock+0xae>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001878:	2364      	movs	r3, #100	; 0x64
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	f10d 020f 	add.w	r2, sp, #15
 8001880:	2301      	movs	r3, #1
 8001882:	f10d 010e 	add.w	r1, sp, #14
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <SD_RxDataBlock+0xd8>)
 8001888:	f004 f922 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return TRUE;
 800188c:	2001      	movs	r0, #1
}
 800188e:	b005      	add	sp, #20
 8001890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 8001894:	2000      	movs	r0, #0
 8001896:	e7b7      	b.n	8001808 <SD_RxDataBlock+0x44>
 8001898:	2000021e 	.word	0x2000021e
 800189c:	20002c8c 	.word	0x20002c8c

080018a0 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80018a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Timer2 = 500;
 80018a4:	4d5b      	ldr	r5, [pc, #364]	; (8001a14 <SD_SendCmd+0x174>)
 80018a6:	4c5c      	ldr	r4, [pc, #368]	; (8001a18 <SD_SendCmd+0x178>)
 80018a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 80018ac:	b085      	sub	sp, #20
 80018ae:	4681      	mov	r9, r0
 80018b0:	4688      	mov	r8, r1
	Timer2 = 500;
 80018b2:	802b      	strh	r3, [r5, #0]
	dummy = 0xFF;
 80018b4:	27ff      	movs	r7, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80018b6:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80018b8:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80018ba:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80018be:	6893      	ldr	r3, [r2, #8]
 80018c0:	0798      	lsls	r0, r3, #30
 80018c2:	d5fc      	bpl.n	80018be <SD_SendCmd+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80018c4:	2301      	movs	r3, #1
 80018c6:	9600      	str	r6, [sp, #0]
 80018c8:	f10d 020f 	add.w	r2, sp, #15
 80018cc:	f10d 010e 	add.w	r1, sp, #14
 80018d0:	4620      	mov	r0, r4
 80018d2:	f004 f8fd 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 80018d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while ((res != 0xFF) && Timer2);
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d006      	beq.n	80018ec <SD_SendCmd+0x4c>
 80018de:	882b      	ldrh	r3, [r5, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1e9      	bne.n	80018b8 <SD_SendCmd+0x18>
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80018e4:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 80018e6:	b005      	add	sp, #20
 80018e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80018ec:	6822      	ldr	r2, [r4, #0]
 80018ee:	f88d 900f 	strb.w	r9, [sp, #15]
 80018f2:	6893      	ldr	r3, [r2, #8]
 80018f4:	0799      	lsls	r1, r3, #30
 80018f6:	d5fc      	bpl.n	80018f2 <SD_SendCmd+0x52>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	2201      	movs	r2, #1
 80018fc:	4846      	ldr	r0, [pc, #280]	; (8001a18 <SD_SendCmd+0x178>)
 80018fe:	f10d 010f 	add.w	r1, sp, #15
 8001902:	f003 ff93 	bl	800582c <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001906:	ea4f 6318 	mov.w	r3, r8, lsr #24
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800190a:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800190c:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001910:	6893      	ldr	r3, [r2, #8]
 8001912:	079b      	lsls	r3, r3, #30
 8001914:	d5fc      	bpl.n	8001910 <SD_SendCmd+0x70>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001916:	2364      	movs	r3, #100	; 0x64
 8001918:	2201      	movs	r2, #1
 800191a:	483f      	ldr	r0, [pc, #252]	; (8001a18 <SD_SendCmd+0x178>)
 800191c:	f10d 010f 	add.w	r1, sp, #15
 8001920:	f003 ff84 	bl	800582c <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001924:	ea4f 4318 	mov.w	r3, r8, lsr #16
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001928:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800192a:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800192e:	6893      	ldr	r3, [r2, #8]
 8001930:	079f      	lsls	r7, r3, #30
 8001932:	d5fc      	bpl.n	800192e <SD_SendCmd+0x8e>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001934:	2364      	movs	r3, #100	; 0x64
 8001936:	2201      	movs	r2, #1
 8001938:	4837      	ldr	r0, [pc, #220]	; (8001a18 <SD_SendCmd+0x178>)
 800193a:	f10d 010f 	add.w	r1, sp, #15
 800193e:	f003 ff75 	bl	800582c <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001942:	ea4f 2318 	mov.w	r3, r8, lsr #8
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001946:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001948:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800194c:	6893      	ldr	r3, [r2, #8]
 800194e:	079e      	lsls	r6, r3, #30
 8001950:	d5fc      	bpl.n	800194c <SD_SendCmd+0xac>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001952:	2201      	movs	r2, #1
 8001954:	4830      	ldr	r0, [pc, #192]	; (8001a18 <SD_SendCmd+0x178>)
 8001956:	2364      	movs	r3, #100	; 0x64
 8001958:	f10d 010f 	add.w	r1, sp, #15
 800195c:	f003 ff66 	bl	800582c <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001960:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001962:	f88d 800f 	strb.w	r8, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001966:	6893      	ldr	r3, [r2, #8]
 8001968:	079d      	lsls	r5, r3, #30
 800196a:	d5fc      	bpl.n	8001966 <SD_SendCmd+0xc6>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800196c:	482a      	ldr	r0, [pc, #168]	; (8001a18 <SD_SendCmd+0x178>)
 800196e:	2364      	movs	r3, #100	; 0x64
 8001970:	2201      	movs	r2, #1
 8001972:	f10d 010f 	add.w	r1, sp, #15
 8001976:	f003 ff59 	bl	800582c <HAL_SPI_Transmit>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800197a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800197e:	d035      	beq.n	80019ec <SD_SendCmd+0x14c>
	else crc = 1;
 8001980:	f1b9 0f48 	cmp.w	r9, #72	; 0x48
 8001984:	bf0c      	ite	eq
 8001986:	2387      	moveq	r3, #135	; 0x87
 8001988:	2301      	movne	r3, #1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	f88d 300f 	strb.w	r3, [sp, #15]
 8001990:	6893      	ldr	r3, [r2, #8]
 8001992:	0798      	lsls	r0, r3, #30
 8001994:	d5fc      	bpl.n	8001990 <SD_SendCmd+0xf0>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001996:	4820      	ldr	r0, [pc, #128]	; (8001a18 <SD_SendCmd+0x178>)
 8001998:	2364      	movs	r3, #100	; 0x64
 800199a:	2201      	movs	r2, #1
 800199c:	f10d 010f 	add.w	r1, sp, #15
 80019a0:	f003 ff44 	bl	800582c <HAL_SPI_Transmit>
	if (cmd == CMD12) SPI_RxByte();
 80019a4:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
 80019a8:	d022      	beq.n	80019f0 <SD_SendCmd+0x150>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80019aa:	4f1b      	ldr	r7, [pc, #108]	; (8001a18 <SD_SendCmd+0x178>)
	else crc = 1;
 80019ac:	250a      	movs	r5, #10
	dummy = 0xFF;
 80019ae:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80019b2:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019b4:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80019b6:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019ba:	6893      	ldr	r3, [r2, #8]
 80019bc:	079b      	lsls	r3, r3, #30
 80019be:	d5fc      	bpl.n	80019ba <SD_SendCmd+0x11a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80019c0:	2301      	movs	r3, #1
 80019c2:	9600      	str	r6, [sp, #0]
 80019c4:	f10d 020f 	add.w	r2, sp, #15
 80019c8:	f10d 010e 	add.w	r1, sp, #14
 80019cc:	4638      	mov	r0, r7
 80019ce:	f004 f87f 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	} while ((res & 0x80) && --n);
 80019d2:	f99d 300f 	ldrsb.w	r3, [sp, #15]
	return data;
 80019d6:	f89d 000f 	ldrb.w	r0, [sp, #15]
	} while ((res & 0x80) && --n);
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da83      	bge.n	80018e6 <SD_SendCmd+0x46>
 80019de:	1e6b      	subs	r3, r5, #1
 80019e0:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 80019e4:	d1e6      	bne.n	80019b4 <SD_SendCmd+0x114>
}
 80019e6:	b005      	add	sp, #20
 80019e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80019ec:	2395      	movs	r3, #149	; 0x95
 80019ee:	e7cc      	b.n	800198a <SD_SendCmd+0xea>
	dummy = 0xFF;
 80019f0:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019f2:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80019f4:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019f8:	6893      	ldr	r3, [r2, #8]
 80019fa:	0799      	lsls	r1, r3, #30
 80019fc:	d5fc      	bpl.n	80019f8 <SD_SendCmd+0x158>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80019fe:	2364      	movs	r3, #100	; 0x64
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	f10d 020f 	add.w	r2, sp, #15
 8001a06:	2301      	movs	r3, #1
 8001a08:	f10d 010e 	add.w	r1, sp, #14
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <SD_SendCmd+0x178>)
 8001a0e:	f004 f85f 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8001a12:	e7ca      	b.n	80019aa <SD_SendCmd+0x10a>
 8001a14:	20000220 	.word	0x20000220
 8001a18:	20002c8c 	.word	0x20002c8c

08001a1c <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d145      	bne.n	8001aac <SD_disk_initialize+0x90>
{
 8001a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001a24:	4d7f      	ldr	r5, [pc, #508]	; (8001c24 <SD_disk_initialize+0x208>)
 8001a26:	782c      	ldrb	r4, [r5, #0]
 8001a28:	f014 0402 	ands.w	r4, r4, #2
{
 8001a2c:	b087      	sub	sp, #28
	if(Stat & STA_NODISK) return Stat;
 8001a2e:	d004      	beq.n	8001a3a <SD_disk_initialize+0x1e>
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 8001a30:	7828      	ldrb	r0, [r5, #0]
 8001a32:	b2c0      	uxtb	r0, r0
}
 8001a34:	b007      	add	sp, #28
 8001a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SD_PowerOn();
 8001a3a:	f7ff fe51 	bl	80016e0 <SD_PowerOn>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001a3e:	4622      	mov	r2, r4
 8001a40:	2102      	movs	r1, #2
 8001a42:	4879      	ldr	r0, [pc, #484]	; (8001c28 <SD_disk_initialize+0x20c>)
 8001a44:	f002 fd96 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f001 ffef 	bl	8003a2c <HAL_Delay>
	if (SD_SendCmd(CMD0, 0) == 1)
 8001a4e:	4621      	mov	r1, r4
 8001a50:	2040      	movs	r0, #64	; 0x40
 8001a52:	f7ff ff25 	bl	80018a0 <SD_SendCmd>
 8001a56:	2801      	cmp	r0, #1
 8001a58:	4607      	mov	r7, r0
 8001a5a:	d030      	beq.n	8001abe <SD_disk_initialize+0xa2>
 8001a5c:	4e73      	ldr	r6, [pc, #460]	; (8001c2c <SD_disk_initialize+0x210>)
 8001a5e:	f10d 0813 	add.w	r8, sp, #19
 8001a62:	f10d 0712 	add.w	r7, sp, #18
	CardType = type;
 8001a66:	4b72      	ldr	r3, [pc, #456]	; (8001c30 <SD_disk_initialize+0x214>)
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001a68:	486f      	ldr	r0, [pc, #444]	; (8001c28 <SD_disk_initialize+0x20c>)
	CardType = type;
 8001a6a:	701c      	strb	r4, [r3, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2102      	movs	r1, #2
 8001a70:	f002 fd80 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f001 ffd9 	bl	8003a2c <HAL_Delay>
	dummy = 0xFF;
 8001a7a:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a7c:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001a7e:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a82:	6893      	ldr	r3, [r2, #8]
 8001a84:	079b      	lsls	r3, r3, #30
 8001a86:	d5fc      	bpl.n	8001a82 <SD_disk_initialize+0x66>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a88:	2364      	movs	r3, #100	; 0x64
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	4867      	ldr	r0, [pc, #412]	; (8001c2c <SD_disk_initialize+0x210>)
 8001a8e:	2301      	movs	r3, #1
 8001a90:	4642      	mov	r2, r8
 8001a92:	4639      	mov	r1, r7
 8001a94:	f004 f81c 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	if (type)
 8001a98:	b154      	cbz	r4, 8001ab0 <SD_disk_initialize+0x94>
		Stat &= ~STA_NOINIT;
 8001a9a:	782b      	ldrb	r3, [r5, #0]
 8001a9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001aa0:	702b      	strb	r3, [r5, #0]
	return Stat;
 8001aa2:	7828      	ldrb	r0, [r5, #0]
 8001aa4:	b2c0      	uxtb	r0, r0
}
 8001aa6:	b007      	add	sp, #28
 8001aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(drv) return STA_NOINIT;
 8001aac:	2001      	movs	r0, #1
}
 8001aae:	4770      	bx	lr
	return Stat;
 8001ab0:	7828      	ldrb	r0, [r5, #0]
	PowerFlag = 0;
 8001ab2:	4b60      	ldr	r3, [pc, #384]	; (8001c34 <SD_disk_initialize+0x218>)
	return Stat;
 8001ab4:	b2c0      	uxtb	r0, r0
	PowerFlag = 0;
 8001ab6:	701c      	strb	r4, [r3, #0]
}
 8001ab8:	b007      	add	sp, #28
 8001aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Timer1 = 1000;
 8001abe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8001c38 <SD_disk_initialize+0x21c>
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001ac6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001aca:	2048      	movs	r0, #72	; 0x48
		Timer1 = 1000;
 8001acc:	f8a9 3000 	strh.w	r3, [r9]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001ad0:	f7ff fee6 	bl	80018a0 <SD_SendCmd>
 8001ad4:	2801      	cmp	r0, #1
 8001ad6:	d167      	bne.n	8001ba8 <SD_disk_initialize+0x18c>
 8001ad8:	4e54      	ldr	r6, [pc, #336]	; (8001c2c <SD_disk_initialize+0x210>)
 8001ada:	ab05      	add	r3, sp, #20
 8001adc:	9303      	str	r3, [sp, #12]
 8001ade:	469a      	mov	sl, r3
 8001ae0:	f10d 0813 	add.w	r8, sp, #19
 8001ae4:	f10d 0712 	add.w	r7, sp, #18
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ae8:	46b3      	mov	fp, r6
	dummy = 0xFF;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001aee:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001af0:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001af4:	6893      	ldr	r3, [r2, #8]
 8001af6:	0799      	lsls	r1, r3, #30
 8001af8:	d5fc      	bpl.n	8001af4 <SD_disk_initialize+0xd8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001afa:	2364      	movs	r3, #100	; 0x64
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	4642      	mov	r2, r8
 8001b00:	2301      	movs	r3, #1
 8001b02:	4639      	mov	r1, r7
 8001b04:	4658      	mov	r0, fp
 8001b06:	f003 ffe3 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8001b0a:	f89d 3013 	ldrb.w	r3, [sp, #19]
				ocr[n] = SPI_RxByte();
 8001b0e:	f80a 3b01 	strb.w	r3, [sl], #1
			for (n = 0; n < 4; n++)
 8001b12:	ab06      	add	r3, sp, #24
 8001b14:	459a      	cmp	sl, r3
 8001b16:	d1e8      	bne.n	8001aea <SD_disk_initialize+0xce>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b18:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d1a2      	bne.n	8001a66 <SD_disk_initialize+0x4a>
 8001b20:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001b24:	2baa      	cmp	r3, #170	; 0xaa
 8001b26:	d19e      	bne.n	8001a66 <SD_disk_initialize+0x4a>
 8001b28:	e003      	b.n	8001b32 <SD_disk_initialize+0x116>
				} while (Timer1);
 8001b2a:	f8b9 3000 	ldrh.w	r3, [r9]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d099      	beq.n	8001a66 <SD_disk_initialize+0x4a>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b32:	2100      	movs	r1, #0
 8001b34:	2077      	movs	r0, #119	; 0x77
 8001b36:	f7ff feb3 	bl	80018a0 <SD_SendCmd>
 8001b3a:	2801      	cmp	r0, #1
 8001b3c:	d8f5      	bhi.n	8001b2a <SD_disk_initialize+0x10e>
 8001b3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b42:	2069      	movs	r0, #105	; 0x69
 8001b44:	f7ff feac 	bl	80018a0 <SD_SendCmd>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d1ee      	bne.n	8001b2a <SD_disk_initialize+0x10e>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b4c:	f8b9 3000 	ldrh.w	r3, [r9]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d088      	beq.n	8001a66 <SD_disk_initialize+0x4a>
 8001b54:	4601      	mov	r1, r0
 8001b56:	207a      	movs	r0, #122	; 0x7a
 8001b58:	f7ff fea2 	bl	80018a0 <SD_SendCmd>
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d182      	bne.n	8001a66 <SD_disk_initialize+0x4a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b60:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8001c2c <SD_disk_initialize+0x210>
 8001b64:	f8dd b00c 	ldr.w	fp, [sp, #12]
	dummy = 0xFF;
 8001b68:	24ff      	movs	r4, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b6a:	f04f 0a64 	mov.w	sl, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b6e:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8001b70:	f88d 4012 	strb.w	r4, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b74:	6883      	ldr	r3, [r0, #8]
 8001b76:	079a      	lsls	r2, r3, #30
 8001b78:	d5fc      	bpl.n	8001b74 <SD_disk_initialize+0x158>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f8cd a000 	str.w	sl, [sp]
 8001b80:	4642      	mov	r2, r8
 8001b82:	4639      	mov	r1, r7
 8001b84:	4648      	mov	r0, r9
 8001b86:	f003 ffa3 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8001b8a:	f89d 3013 	ldrb.w	r3, [sp, #19]
						ocr[n] = SPI_RxByte();
 8001b8e:	f80b 3b01 	strb.w	r3, [fp], #1
					for (n = 0; n < 4; n++)
 8001b92:	ab06      	add	r3, sp, #24
 8001b94:	459b      	cmp	fp, r3
 8001b96:	d1ea      	bne.n	8001b6e <SD_disk_initialize+0x152>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001b98:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001b9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ba0:	bf14      	ite	ne
 8001ba2:	240c      	movne	r4, #12
 8001ba4:	2404      	moveq	r4, #4
 8001ba6:	e75e      	b.n	8001a66 <SD_disk_initialize+0x4a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001ba8:	4621      	mov	r1, r4
 8001baa:	2077      	movs	r0, #119	; 0x77
 8001bac:	f7ff fe78 	bl	80018a0 <SD_SendCmd>
 8001bb0:	2801      	cmp	r0, #1
 8001bb2:	d805      	bhi.n	8001bc0 <SD_disk_initialize+0x1a4>
 8001bb4:	e01c      	b.n	8001bf0 <SD_disk_initialize+0x1d4>
			} while (Timer1);
 8001bb6:	f8b9 3000 	ldrh.w	r3, [r9]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f43f af4e 	beq.w	8001a5c <SD_disk_initialize+0x40>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2041      	movs	r0, #65	; 0x41
 8001bc4:	f7ff fe6c 	bl	80018a0 <SD_SendCmd>
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d1f4      	bne.n	8001bb6 <SD_disk_initialize+0x19a>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001bcc:	f8b9 3000 	ldrh.w	r3, [r9]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f43f af43 	beq.w	8001a5c <SD_disk_initialize+0x40>
 8001bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bda:	2050      	movs	r0, #80	; 0x50
 8001bdc:	f7ff fe60 	bl	80018a0 <SD_SendCmd>
 8001be0:	4e12      	ldr	r6, [pc, #72]	; (8001c2c <SD_disk_initialize+0x210>)
 8001be2:	b900      	cbnz	r0, 8001be6 <SD_disk_initialize+0x1ca>
 8001be4:	463c      	mov	r4, r7
 8001be6:	f10d 0813 	add.w	r8, sp, #19
 8001bea:	f10d 0712 	add.w	r7, sp, #18
 8001bee:	e73a      	b.n	8001a66 <SD_disk_initialize+0x4a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	2069      	movs	r0, #105	; 0x69
 8001bf4:	f7ff fe54 	bl	80018a0 <SD_SendCmd>
 8001bf8:	2801      	cmp	r0, #1
 8001bfa:	d8e1      	bhi.n	8001bc0 <SD_disk_initialize+0x1a4>
 8001bfc:	e004      	b.n	8001c08 <SD_disk_initialize+0x1ec>
			} while (Timer1);
 8001bfe:	f8b9 3000 	ldrh.w	r3, [r9]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f43f af2a 	beq.w	8001a5c <SD_disk_initialize+0x40>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2077      	movs	r0, #119	; 0x77
 8001c0c:	f7ff fe48 	bl	80018a0 <SD_SendCmd>
 8001c10:	2801      	cmp	r0, #1
 8001c12:	d8f4      	bhi.n	8001bfe <SD_disk_initialize+0x1e2>
 8001c14:	2100      	movs	r1, #0
 8001c16:	2069      	movs	r0, #105	; 0x69
 8001c18:	f7ff fe42 	bl	80018a0 <SD_SendCmd>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	d1ee      	bne.n	8001bfe <SD_disk_initialize+0x1e2>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001c20:	2702      	movs	r7, #2
 8001c22:	e7d3      	b.n	8001bcc <SD_disk_initialize+0x1b0>
 8001c24:	20000000 	.word	0x20000000
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	20002c8c 	.word	0x20002c8c
 8001c30:	2000021c 	.word	0x2000021c
 8001c34:	2000021d 	.word	0x2000021d
 8001c38:	2000021e 	.word	0x2000021e

08001c3c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
	if (drv) return STA_NOINIT;
 8001c3c:	b918      	cbnz	r0, 8001c46 <SD_disk_status+0xa>
	return Stat;
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <SD_disk_status+0x10>)
 8001c40:	7818      	ldrb	r0, [r3, #0]
 8001c42:	b2c0      	uxtb	r0, r0
 8001c44:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8001c46:	2001      	movs	r0, #1
}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000000 	.word	0x20000000

08001c50 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c54:	b089      	sub	sp, #36	; 0x24
 8001c56:	9303      	str	r3, [sp, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d14e      	bne.n	8001cfa <SD_disk_read+0xaa>
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d04c      	beq.n	8001cfa <SD_disk_read+0xaa>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c60:	4b9b      	ldr	r3, [pc, #620]	; (8001ed0 <SD_disk_read+0x280>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	07dc      	lsls	r4, r3, #31
 8001c66:	d46f      	bmi.n	8001d48 <SD_disk_read+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001c68:	4b9a      	ldr	r3, [pc, #616]	; (8001ed4 <SD_disk_read+0x284>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	0758      	lsls	r0, r3, #29
 8001c6e:	4614      	mov	r4, r2
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001c70:	4899      	ldr	r0, [pc, #612]	; (8001ed8 <SD_disk_read+0x288>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8001c72:	bf58      	it	pl
 8001c74:	0254      	lslpl	r4, r2, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001c76:	468a      	mov	sl, r1
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	f002 fc7a 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f001 fed3 	bl	8003a2c <HAL_Delay>

	SELECT();

	if (count == 1)
 8001c86:	9b03      	ldr	r3, [sp, #12]
 8001c88:	2b01      	cmp	r3, #1
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001c8a:	4621      	mov	r1, r4
	if (count == 1)
 8001c8c:	f000 80a9 	beq.w	8001de2 <SD_disk_read+0x192>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001c90:	2052      	movs	r0, #82	; 0x52
 8001c92:	f7ff fe05 	bl	80018a0 <SD_SendCmd>
 8001c96:	4e91      	ldr	r6, [pc, #580]	; (8001edc <SD_disk_read+0x28c>)
 8001c98:	9004      	str	r0, [sp, #16]
 8001c9a:	bba0      	cbnz	r0, 8001d06 <SD_disk_read+0xb6>
 8001c9c:	f10d 051f 	add.w	r5, sp, #31
 8001ca0:	f10d 041e 	add.w	r4, sp, #30
 8001ca4:	f8df b238 	ldr.w	fp, [pc, #568]	; 8001ee0 <SD_disk_read+0x290>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ca8:	462a      	mov	r2, r5
	dummy = 0xFF;
 8001caa:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001cae:	4637      	mov	r7, r6
 8001cb0:	4625      	mov	r5, r4
	Timer1 = 200;
 8001cb2:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 8001cb6:	f8ab 3000 	strh.w	r3, [fp]
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001cba:	2464      	movs	r4, #100	; 0x64
 8001cbc:	4691      	mov	r9, r2
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cbe:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001cc0:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cc4:	6893      	ldr	r3, [r2, #8]
 8001cc6:	0799      	lsls	r1, r3, #30
 8001cc8:	d5fc      	bpl.n	8001cc4 <SD_disk_read+0x74>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001cca:	2301      	movs	r3, #1
 8001ccc:	9400      	str	r4, [sp, #0]
 8001cce:	464a      	mov	r2, r9
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	4638      	mov	r0, r7
 8001cd4:	f003 fefc 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8001cd8:	f89d 301f 	ldrb.w	r3, [sp, #31]
	} while((token == 0xFF) && Timer1);
 8001cdc:	2bff      	cmp	r3, #255	; 0xff
 8001cde:	d139      	bne.n	8001d54 <SD_disk_read+0x104>
 8001ce0:	f8bb 3000 	ldrh.w	r3, [fp]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1ea      	bne.n	8001cbe <SD_disk_read+0x6e>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	462c      	mov	r4, r5
 8001cec:	9304      	str	r3, [sp, #16]
 8001cee:	464d      	mov	r5, r9
				if (!SD_RxDataBlock(buff, 512)) break;
				buff += 512;
			} while (--count);

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	204c      	movs	r0, #76	; 0x4c
 8001cf4:	f7ff fdd4 	bl	80018a0 <SD_SendCmd>
 8001cf8:	e00b      	b.n	8001d12 <SD_disk_read+0xc2>
	if (pdrv || !count) return RES_PARERR;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	9304      	str	r3, [sp, #16]
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 8001cfe:	9804      	ldr	r0, [sp, #16]
 8001d00:	b009      	add	sp, #36	; 0x24
 8001d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d06:	2301      	movs	r3, #1
 8001d08:	9304      	str	r3, [sp, #16]
 8001d0a:	f10d 051f 	add.w	r5, sp, #31
 8001d0e:	f10d 041e 	add.w	r4, sp, #30
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001d12:	2201      	movs	r2, #1
 8001d14:	4870      	ldr	r0, [pc, #448]	; (8001ed8 <SD_disk_read+0x288>)
 8001d16:	2102      	movs	r1, #2
 8001d18:	f002 fc2c 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f001 fe85 	bl	8003a2c <HAL_Delay>
	dummy = 0xFF;
 8001d22:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d24:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001d26:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d2a:	6893      	ldr	r3, [r2, #8]
 8001d2c:	079b      	lsls	r3, r3, #30
 8001d2e:	d5fc      	bpl.n	8001d2a <SD_disk_read+0xda>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d30:	2364      	movs	r3, #100	; 0x64
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	462a      	mov	r2, r5
 8001d36:	2301      	movs	r3, #1
 8001d38:	4621      	mov	r1, r4
 8001d3a:	4868      	ldr	r0, [pc, #416]	; (8001edc <SD_disk_read+0x28c>)
 8001d3c:	f003 fec8 	bl	8005ad0 <HAL_SPI_TransmitReceive>
}
 8001d40:	9804      	ldr	r0, [sp, #16]
 8001d42:	b009      	add	sp, #36	; 0x24
 8001d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	9304      	str	r3, [sp, #16]
}
 8001d4c:	9804      	ldr	r0, [sp, #16]
 8001d4e:	b009      	add	sp, #36	; 0x24
 8001d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(token != 0xFE) return FALSE;
 8001d54:	2bfe      	cmp	r3, #254	; 0xfe
 8001d56:	464a      	mov	r2, r9
 8001d58:	d176      	bne.n	8001e48 <SD_disk_read+0x1f8>
 8001d5a:	f10a 39ff 	add.w	r9, sl, #4294967295
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d5e:	f8cd b014 	str.w	fp, [sp, #20]
 8001d62:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 8001d66:	2464      	movs	r4, #100	; 0x64
 8001d68:	4693      	mov	fp, r2
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d6a:	6831      	ldr	r1, [r6, #0]
	dummy = 0xFF;
 8001d6c:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d70:	688b      	ldr	r3, [r1, #8]
 8001d72:	079b      	lsls	r3, r3, #30
 8001d74:	d5fc      	bpl.n	8001d70 <SD_disk_read+0x120>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d76:	2301      	movs	r3, #1
 8001d78:	9400      	str	r4, [sp, #0]
 8001d7a:	465a      	mov	r2, fp
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	4638      	mov	r0, r7
 8001d80:	f003 fea6 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8001d84:	f89d 301f 	ldrb.w	r3, [sp, #31]
	*buff = SPI_RxByte();
 8001d88:	f809 3f01 	strb.w	r3, [r9, #1]!
	} while(len--);
 8001d8c:	45d1      	cmp	r9, sl
 8001d8e:	d1ec      	bne.n	8001d6a <SD_disk_read+0x11a>
	dummy = 0xFF;
 8001d90:	465a      	mov	r2, fp
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d92:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8001d94:	f8dd b014 	ldr.w	fp, [sp, #20]
 8001d98:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d9c:	6883      	ldr	r3, [r0, #8]
 8001d9e:	079c      	lsls	r4, r3, #30
 8001da0:	d5fc      	bpl.n	8001d9c <SD_disk_read+0x14c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001da2:	2364      	movs	r3, #100	; 0x64
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	4629      	mov	r1, r5
 8001da8:	2301      	movs	r3, #1
 8001daa:	4638      	mov	r0, r7
 8001dac:	9205      	str	r2, [sp, #20]
 8001dae:	f003 fe8f 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001db2:	6830      	ldr	r0, [r6, #0]
 8001db4:	9a05      	ldr	r2, [sp, #20]
	dummy = 0xFF;
 8001db6:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001dba:	6883      	ldr	r3, [r0, #8]
 8001dbc:	0799      	lsls	r1, r3, #30
 8001dbe:	d5fc      	bpl.n	8001dba <SD_disk_read+0x16a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001dc0:	2364      	movs	r3, #100	; 0x64
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	4638      	mov	r0, r7
 8001dca:	9205      	str	r2, [sp, #20]
 8001dcc:	f003 fe80 	bl	8005ad0 <HAL_SPI_TransmitReceive>
			} while (--count);
 8001dd0:	9b03      	ldr	r3, [sp, #12]
 8001dd2:	9a05      	ldr	r2, [sp, #20]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	9303      	str	r3, [sp, #12]
 8001dd8:	f47f af6b 	bne.w	8001cb2 <SD_disk_read+0x62>
 8001ddc:	462c      	mov	r4, r5
 8001dde:	4615      	mov	r5, r2
 8001de0:	e786      	b.n	8001cf0 <SD_disk_read+0xa0>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001de2:	2051      	movs	r0, #81	; 0x51
 8001de4:	f7ff fd5c 	bl	80018a0 <SD_SendCmd>
 8001de8:	9004      	str	r0, [sp, #16]
 8001dea:	b138      	cbz	r0, 8001dfc <SD_disk_read+0x1ac>
 8001dec:	4e3b      	ldr	r6, [pc, #236]	; (8001edc <SD_disk_read+0x28c>)
 8001dee:	f10d 051f 	add.w	r5, sp, #31
 8001df2:	f10d 041e 	add.w	r4, sp, #30
 8001df6:	2301      	movs	r3, #1
 8001df8:	9304      	str	r3, [sp, #16]
 8001dfa:	e78a      	b.n	8001d12 <SD_disk_read+0xc2>
	Timer1 = 200;
 8001dfc:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8001ee0 <SD_disk_read+0x290>
 8001e00:	4e36      	ldr	r6, [pc, #216]	; (8001edc <SD_disk_read+0x28c>)
 8001e02:	23c8      	movs	r3, #200	; 0xc8
 8001e04:	f8ab 3000 	strh.w	r3, [fp]
 8001e08:	f10d 051f 	add.w	r5, sp, #31
 8001e0c:	f10d 041e 	add.w	r4, sp, #30
	dummy = 0xFF;
 8001e10:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e14:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e18:	4637      	mov	r7, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e1a:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001e1c:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e20:	6893      	ldr	r3, [r2, #8]
 8001e22:	0799      	lsls	r1, r3, #30
 8001e24:	d5fc      	bpl.n	8001e20 <SD_disk_read+0x1d0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e26:	2301      	movs	r3, #1
 8001e28:	f8cd 9000 	str.w	r9, [sp]
 8001e2c:	462a      	mov	r2, r5
 8001e2e:	4621      	mov	r1, r4
 8001e30:	4638      	mov	r0, r7
 8001e32:	f003 fe4d 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8001e36:	f89d 301f 	ldrb.w	r3, [sp, #31]
	} while((token == 0xFF) && Timer1);
 8001e3a:	2bff      	cmp	r3, #255	; 0xff
 8001e3c:	d109      	bne.n	8001e52 <SD_disk_read+0x202>
 8001e3e:	f8bb 3000 	ldrh.w	r3, [fp]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1e9      	bne.n	8001e1a <SD_disk_read+0x1ca>
 8001e46:	e7d6      	b.n	8001df6 <SD_disk_read+0x1a6>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	462c      	mov	r4, r5
 8001e4c:	9304      	str	r3, [sp, #16]
 8001e4e:	464d      	mov	r5, r9
 8001e50:	e74e      	b.n	8001cf0 <SD_disk_read+0xa0>
	if(token != 0xFE) return FALSE;
 8001e52:	2bfe      	cmp	r3, #254	; 0xfe
 8001e54:	d1cf      	bne.n	8001df6 <SD_disk_read+0x1a6>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e56:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001edc <SD_disk_read+0x28c>
 8001e5a:	f10a 37ff 	add.w	r7, sl, #4294967295
	dummy = 0xFF;
 8001e5e:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8001e62:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e66:	f04f 0b64 	mov.w	fp, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e6a:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8001e6c:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e70:	6883      	ldr	r3, [r0, #8]
 8001e72:	079b      	lsls	r3, r3, #30
 8001e74:	d5fc      	bpl.n	8001e70 <SD_disk_read+0x220>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e76:	2301      	movs	r3, #1
 8001e78:	f8cd b000 	str.w	fp, [sp]
 8001e7c:	462a      	mov	r2, r5
 8001e7e:	4621      	mov	r1, r4
 8001e80:	4648      	mov	r0, r9
 8001e82:	f003 fe25 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8001e86:	f89d 301f 	ldrb.w	r3, [sp, #31]
	*buff = SPI_RxByte();
 8001e8a:	f807 3f01 	strb.w	r3, [r7, #1]!
	} while(len--);
 8001e8e:	4557      	cmp	r7, sl
 8001e90:	d1eb      	bne.n	8001e6a <SD_disk_read+0x21a>
	dummy = 0xFF;
 8001e92:	23ff      	movs	r3, #255	; 0xff
 8001e94:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e98:	6833      	ldr	r3, [r6, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	0797      	lsls	r7, r2, #30
 8001e9e:	d5fc      	bpl.n	8001e9a <SD_disk_read+0x24a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ea0:	2364      	movs	r3, #100	; 0x64
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <SD_disk_read+0x28c>)
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	462a      	mov	r2, r5
 8001eaa:	4621      	mov	r1, r4
 8001eac:	f003 fe10 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8001eb0:	23ff      	movs	r3, #255	; 0xff
 8001eb2:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001eb6:	6833      	ldr	r3, [r6, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	0790      	lsls	r0, r2, #30
 8001ebc:	d5fc      	bpl.n	8001eb8 <SD_disk_read+0x268>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ebe:	2364      	movs	r3, #100	; 0x64
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	462a      	mov	r2, r5
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <SD_disk_read+0x28c>)
 8001eca:	f003 fe01 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return TRUE;
 8001ece:	e720      	b.n	8001d12 <SD_disk_read+0xc2>
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	2000021c 	.word	0x2000021c
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	20002c8c 	.word	0x20002c8c
 8001ee0:	2000021e 	.word	0x2000021e

08001ee4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee8:	b087      	sub	sp, #28
 8001eea:	e9cd 3102 	strd	r3, r1, [sp, #8]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	d16c      	bne.n	8001fcc <SD_disk_write+0xe8>
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d06a      	beq.n	8001fcc <SD_disk_write+0xe8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ef6:	4bb3      	ldr	r3, [pc, #716]	; (80021c4 <SD_disk_write+0x2e0>)
 8001ef8:	4614      	mov	r4, r2
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	07d6      	lsls	r6, r2, #31
 8001efe:	f100 808a 	bmi.w	8002016 <SD_disk_write+0x132>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	075d      	lsls	r5, r3, #29
 8001f06:	f100 8101 	bmi.w	800210c <SD_disk_write+0x228>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001f0a:	4daf      	ldr	r5, [pc, #700]	; (80021c8 <SD_disk_write+0x2e4>)
 8001f0c:	782b      	ldrb	r3, [r5, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
	if (!(CardType & CT_SD2)) sector *= 512;
 8001f10:	0758      	lsls	r0, r3, #29
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001f12:	f04f 0102 	mov.w	r1, #2
 8001f16:	48ad      	ldr	r0, [pc, #692]	; (80021cc <SD_disk_write+0x2e8>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8001f18:	bf58      	it	pl
 8001f1a:	0264      	lslpl	r4, r4, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001f1c:	f002 fb2a 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f001 fd83 	bl	8003a2c <HAL_Delay>

	SELECT();

	if (count == 1)
 8001f26:	9b02      	ldr	r3, [sp, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	f000 80fd 	beq.w	8002128 <SD_disk_write+0x244>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001f2e:	782b      	ldrb	r3, [r5, #0]
 8001f30:	079a      	lsls	r2, r3, #30
 8001f32:	f100 80f0 	bmi.w	8002116 <SD_disk_write+0x232>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001f36:	4621      	mov	r1, r4
 8001f38:	2059      	movs	r0, #89	; 0x59
 8001f3a:	f7ff fcb1 	bl	80018a0 <SD_SendCmd>
 8001f3e:	4da4      	ldr	r5, [pc, #656]	; (80021d0 <SD_disk_write+0x2ec>)
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d148      	bne.n	8001fd6 <SD_disk_write+0xf2>
 8001f44:	f8df a28c 	ldr.w	sl, [pc, #652]	; 80021d4 <SD_disk_write+0x2f0>
 8001f48:	f10d 0617 	add.w	r6, sp, #23
 8001f4c:	f10d 0716 	add.w	r7, sp, #22
	dummy = 0xFF;
 8001f50:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f54:	46a8      	mov	r8, r5
	Timer2 = 500;
 8001f56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f5a:	f8aa 3000 	strh.w	r3, [sl]
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f5e:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f60:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001f62:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f66:	6883      	ldr	r3, [r0, #8]
 8001f68:	079b      	lsls	r3, r3, #30
 8001f6a:	d5fc      	bpl.n	8001f66 <SD_disk_write+0x82>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	9400      	str	r4, [sp, #0]
 8001f70:	4632      	mov	r2, r6
 8001f72:	4639      	mov	r1, r7
 8001f74:	4640      	mov	r0, r8
 8001f76:	f003 fdab 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8001f7a:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8001f7e:	2bff      	cmp	r3, #255	; 0xff
 8001f80:	d04e      	beq.n	8002020 <SD_disk_write+0x13c>
 8001f82:	f8ba 3000 	ldrh.w	r3, [sl]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ea      	bne.n	8001f60 <SD_disk_write+0x7c>
	Timer2 = 500;
 8001f8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f8e:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80021d0 <SD_disk_write+0x2ec>
	Timer2 = 500;
 8001f92:	f8aa 3000 	strh.w	r3, [sl]
	dummy = 0xFF;
 8001f96:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f9a:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f9c:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001f9e:	f88d 8016 	strb.w	r8, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001fa2:	6883      	ldr	r3, [r0, #8]
 8001fa4:	079b      	lsls	r3, r3, #30
 8001fa6:	d5fc      	bpl.n	8001fa2 <SD_disk_write+0xbe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001fa8:	2301      	movs	r3, #1
 8001faa:	9400      	str	r4, [sp, #0]
 8001fac:	4632      	mov	r2, r6
 8001fae:	4639      	mov	r1, r7
 8001fb0:	4648      	mov	r0, r9
 8001fb2:	f003 fd8d 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8001fb6:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	f000 80bf 	beq.w	800213e <SD_disk_write+0x25a>
 8001fc0:	f8ba 3000 	ldrh.w	r3, [sl]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e9      	bne.n	8001f9c <SD_disk_write+0xb8>
 8001fc8:	2401      	movs	r4, #1
 8001fca:	e009      	b.n	8001fe0 <SD_disk_write+0xfc>
	if (pdrv || !count) return RES_PARERR;
 8001fcc:	2404      	movs	r4, #4
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 8001fce:	4620      	mov	r0, r4
 8001fd0:	b007      	add	sp, #28
 8001fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fd6:	2401      	movs	r4, #1
 8001fd8:	f10d 0617 	add.w	r6, sp, #23
 8001fdc:	f10d 0716 	add.w	r7, sp, #22
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	487a      	ldr	r0, [pc, #488]	; (80021cc <SD_disk_write+0x2e8>)
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	f002 fac5 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f001 fd1e 	bl	8003a2c <HAL_Delay>
	dummy = 0xFF;
 8001ff0:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ff2:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001ff4:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ff8:	6893      	ldr	r3, [r2, #8]
 8001ffa:	079b      	lsls	r3, r3, #30
 8001ffc:	d5fc      	bpl.n	8001ff8 <SD_disk_write+0x114>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ffe:	2364      	movs	r3, #100	; 0x64
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4632      	mov	r2, r6
 8002004:	2301      	movs	r3, #1
 8002006:	4639      	mov	r1, r7
 8002008:	4871      	ldr	r0, [pc, #452]	; (80021d0 <SD_disk_write+0x2ec>)
 800200a:	f003 fd61 	bl	8005ad0 <HAL_SPI_TransmitReceive>
}
 800200e:	4620      	mov	r0, r4
 8002010:	b007      	add	sp, #28
 8002012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002016:	2403      	movs	r4, #3
}
 8002018:	4620      	mov	r0, r4
 800201a:	b007      	add	sp, #28
 800201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SPI_TxByte(token);
 8002020:	23fc      	movs	r3, #252	; 0xfc
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002022:	682a      	ldr	r2, [r5, #0]
 8002024:	f88d 3017 	strb.w	r3, [sp, #23]
 8002028:	6893      	ldr	r3, [r2, #8]
 800202a:	0799      	lsls	r1, r3, #30
 800202c:	d5fc      	bpl.n	8002028 <SD_disk_write+0x144>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800202e:	2201      	movs	r2, #1
 8002030:	2364      	movs	r3, #100	; 0x64
 8002032:	4631      	mov	r1, r6
 8002034:	4640      	mov	r0, r8
 8002036:	f003 fbf9 	bl	800582c <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800203a:	682a      	ldr	r2, [r5, #0]
 800203c:	6893      	ldr	r3, [r2, #8]
 800203e:	079b      	lsls	r3, r3, #30
 8002040:	d5fc      	bpl.n	800203c <SD_disk_write+0x158>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002046:	9903      	ldr	r1, [sp, #12]
 8002048:	2364      	movs	r3, #100	; 0x64
 800204a:	4640      	mov	r0, r8
 800204c:	f003 fbee 	bl	800582c <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002050:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8002052:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002056:	6893      	ldr	r3, [r2, #8]
 8002058:	079c      	lsls	r4, r3, #30
 800205a:	d5fc      	bpl.n	8002056 <SD_disk_write+0x172>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800205c:	2364      	movs	r3, #100	; 0x64
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	4632      	mov	r2, r6
 8002062:	2301      	movs	r3, #1
 8002064:	4639      	mov	r1, r7
 8002066:	4640      	mov	r0, r8
 8002068:	f003 fd32 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800206c:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 800206e:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002072:	6893      	ldr	r3, [r2, #8]
 8002074:	0798      	lsls	r0, r3, #30
 8002076:	d5fc      	bpl.n	8002072 <SD_disk_write+0x18e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002078:	f04f 0b64 	mov.w	fp, #100	; 0x64
 800207c:	f8cd b000 	str.w	fp, [sp]
 8002080:	2301      	movs	r3, #1
 8002082:	4632      	mov	r2, r6
 8002084:	4639      	mov	r1, r7
 8002086:	4640      	mov	r0, r8
 8002088:	f003 fd22 	bl	8005ad0 <HAL_SPI_TransmitReceive>
		while (i <= 64)
 800208c:	2441      	movs	r4, #65	; 0x41
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800208e:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8002090:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002094:	6893      	ldr	r3, [r2, #8]
 8002096:	0799      	lsls	r1, r3, #30
 8002098:	d5fc      	bpl.n	8002094 <SD_disk_write+0x1b0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800209a:	2301      	movs	r3, #1
 800209c:	f8cd b000 	str.w	fp, [sp]
 80020a0:	4632      	mov	r2, r6
 80020a2:	4639      	mov	r1, r7
 80020a4:	4640      	mov	r0, r8
 80020a6:	f003 fd13 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 80020aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
			resp = SPI_RxByte();
 80020ae:	f88d 3014 	strb.w	r3, [sp, #20]
			if ((resp & 0x1F) == 0x05) break;
 80020b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d003      	beq.n	80020c6 <SD_disk_write+0x1e2>
		while (i <= 64)
 80020be:	3c01      	subs	r4, #1
 80020c0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80020c4:	d1e3      	bne.n	800208e <SD_disk_write+0x1aa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80020c6:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80020c8:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 80020ca:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80020ce:	6883      	ldr	r3, [r0, #8]
 80020d0:	079a      	lsls	r2, r3, #30
 80020d2:	d5fc      	bpl.n	80020ce <SD_disk_write+0x1ea>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80020d4:	2301      	movs	r3, #1
 80020d6:	9400      	str	r4, [sp, #0]
 80020d8:	4632      	mov	r2, r6
 80020da:	4639      	mov	r1, r7
 80020dc:	4640      	mov	r0, r8
 80020de:	f003 fcf7 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 80020e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
		while (SPI_RxByte() == 0);
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0ee      	beq.n	80020c8 <SD_disk_write+0x1e4>
	if ((resp & 0x1F) == 0x05) return TRUE;
 80020ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	f47f af49 	bne.w	8001f8a <SD_disk_write+0xa6>
				buff += 512;
 80020f8:	9b03      	ldr	r3, [sp, #12]
 80020fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80020fe:	9303      	str	r3, [sp, #12]
			} while (--count);
 8002100:	9b02      	ldr	r3, [sp, #8]
 8002102:	3b01      	subs	r3, #1
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	f47f af26 	bne.w	8001f56 <SD_disk_write+0x72>
 800210a:	e73e      	b.n	8001f8a <SD_disk_write+0xa6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800210c:	2402      	movs	r4, #2
}
 800210e:	4620      	mov	r0, r4
 8002110:	b007      	add	sp, #28
 8002112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SD_SendCmd(CMD55, 0);
 8002116:	2100      	movs	r1, #0
 8002118:	2077      	movs	r0, #119	; 0x77
 800211a:	f7ff fbc1 	bl	80018a0 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800211e:	9902      	ldr	r1, [sp, #8]
 8002120:	2057      	movs	r0, #87	; 0x57
 8002122:	f7ff fbbd 	bl	80018a0 <SD_SendCmd>
 8002126:	e706      	b.n	8001f36 <SD_disk_write+0x52>
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002128:	4621      	mov	r1, r4
 800212a:	2058      	movs	r0, #88	; 0x58
 800212c:	f7ff fbb8 	bl	80018a0 <SD_SendCmd>
 8002130:	b308      	cbz	r0, 8002176 <SD_disk_write+0x292>
 8002132:	4d27      	ldr	r5, [pc, #156]	; (80021d0 <SD_disk_write+0x2ec>)
 8002134:	f10d 0617 	add.w	r6, sp, #23
 8002138:	f10d 0716 	add.w	r7, sp, #22
 800213c:	e744      	b.n	8001fc8 <SD_disk_write+0xe4>
	SPI_TxByte(token);
 800213e:	23fd      	movs	r3, #253	; 0xfd
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002140:	682a      	ldr	r2, [r5, #0]
 8002142:	f88d 3017 	strb.w	r3, [sp, #23]
 8002146:	6893      	ldr	r3, [r2, #8]
 8002148:	0799      	lsls	r1, r3, #30
 800214a:	d5fc      	bpl.n	8002146 <SD_disk_write+0x262>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800214c:	2364      	movs	r3, #100	; 0x64
 800214e:	4820      	ldr	r0, [pc, #128]	; (80021d0 <SD_disk_write+0x2ec>)
 8002150:	2201      	movs	r2, #1
 8002152:	4631      	mov	r1, r6
 8002154:	f003 fb6a 	bl	800582c <HAL_SPI_Transmit>
		resp = 0x05;
 8002158:	2305      	movs	r3, #5
 800215a:	f88d 3015 	strb.w	r3, [sp, #21]
	if ((resp & 0x1F) == 0x05) return TRUE;
 800215e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2b05      	cmp	r3, #5
 8002168:	f47f af2e 	bne.w	8001fc8 <SD_disk_write+0xe4>
	return count ? RES_ERROR : RES_OK;
 800216c:	9b02      	ldr	r3, [sp, #8]
 800216e:	1e1c      	subs	r4, r3, #0
 8002170:	bf18      	it	ne
 8002172:	2401      	movne	r4, #1
 8002174:	e734      	b.n	8001fe0 <SD_disk_write+0xfc>
	Timer2 = 500;
 8002176:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80021d4 <SD_disk_write+0x2f0>
 800217a:	4d15      	ldr	r5, [pc, #84]	; (80021d0 <SD_disk_write+0x2ec>)
 800217c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002180:	f8aa 3000 	strh.w	r3, [sl]
 8002184:	f10d 0617 	add.w	r6, sp, #23
 8002188:	f10d 0716 	add.w	r7, sp, #22
	dummy = 0xFF;
 800218c:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002190:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002194:	462c      	mov	r4, r5
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002196:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8002198:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800219c:	6883      	ldr	r3, [r0, #8]
 800219e:	0799      	lsls	r1, r3, #30
 80021a0:	d5fc      	bpl.n	800219c <SD_disk_write+0x2b8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80021a2:	2301      	movs	r3, #1
 80021a4:	f8cd 8000 	str.w	r8, [sp]
 80021a8:	4632      	mov	r2, r6
 80021aa:	4639      	mov	r1, r7
 80021ac:	4620      	mov	r0, r4
 80021ae:	f003 fc8f 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 80021b2:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 80021b6:	2bff      	cmp	r3, #255	; 0xff
 80021b8:	d00e      	beq.n	80021d8 <SD_disk_write+0x2f4>
 80021ba:	f8ba 3000 	ldrh.w	r3, [sl]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1e9      	bne.n	8002196 <SD_disk_write+0x2b2>
 80021c2:	e701      	b.n	8001fc8 <SD_disk_write+0xe4>
 80021c4:	20000000 	.word	0x20000000
 80021c8:	2000021c 	.word	0x2000021c
 80021cc:	40020800 	.word	0x40020800
 80021d0:	20002c8c 	.word	0x20002c8c
 80021d4:	20000220 	.word	0x20000220
	SPI_TxByte(token);
 80021d8:	23fe      	movs	r3, #254	; 0xfe
 80021da:	f88d 3017 	strb.w	r3, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80021de:	682b      	ldr	r3, [r5, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	0792      	lsls	r2, r2, #30
 80021e4:	d5fc      	bpl.n	80021e0 <SD_disk_write+0x2fc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80021e6:	2364      	movs	r3, #100	; 0x64
 80021e8:	4837      	ldr	r0, [pc, #220]	; (80022c8 <SD_disk_write+0x3e4>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	4631      	mov	r1, r6
 80021ee:	f003 fb1d 	bl	800582c <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80021f2:	682b      	ldr	r3, [r5, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	0794      	lsls	r4, r2, #30
 80021f8:	d5fc      	bpl.n	80021f4 <SD_disk_write+0x310>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80021fa:	2364      	movs	r3, #100	; 0x64
 80021fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002200:	9903      	ldr	r1, [sp, #12]
 8002202:	4831      	ldr	r0, [pc, #196]	; (80022c8 <SD_disk_write+0x3e4>)
 8002204:	f003 fb12 	bl	800582c <HAL_SPI_Transmit>
	dummy = 0xFF;
 8002208:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800220a:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 800220c:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002210:	6893      	ldr	r3, [r2, #8]
 8002212:	0798      	lsls	r0, r3, #30
 8002214:	d5fc      	bpl.n	8002210 <SD_disk_write+0x32c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002216:	2364      	movs	r3, #100	; 0x64
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	4632      	mov	r2, r6
 800221c:	2301      	movs	r3, #1
 800221e:	482a      	ldr	r0, [pc, #168]	; (80022c8 <SD_disk_write+0x3e4>)
 8002220:	4639      	mov	r1, r7
 8002222:	f003 fc55 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8002226:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002228:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 800222a:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800222e:	6893      	ldr	r3, [r2, #8]
 8002230:	0799      	lsls	r1, r3, #30
 8002232:	d5fc      	bpl.n	800222e <SD_disk_write+0x34a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002234:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002238:	4823      	ldr	r0, [pc, #140]	; (80022c8 <SD_disk_write+0x3e4>)
 800223a:	f8cd 8000 	str.w	r8, [sp]
 800223e:	2301      	movs	r3, #1
 8002240:	4632      	mov	r2, r6
 8002242:	4639      	mov	r1, r7
 8002244:	f003 fc44 	bl	8005ad0 <HAL_SPI_TransmitReceive>
 8002248:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80022c8 <SD_disk_write+0x3e4>
 800224c:	2441      	movs	r4, #65	; 0x41
	dummy = 0xFF;
 800224e:	f04f 09ff 	mov.w	r9, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002252:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8002254:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002258:	6883      	ldr	r3, [r0, #8]
 800225a:	079b      	lsls	r3, r3, #30
 800225c:	d5fc      	bpl.n	8002258 <SD_disk_write+0x374>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800225e:	2301      	movs	r3, #1
 8002260:	f8cd 8000 	str.w	r8, [sp]
 8002264:	4632      	mov	r2, r6
 8002266:	4639      	mov	r1, r7
 8002268:	4650      	mov	r0, sl
 800226a:	f003 fc31 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 800226e:	f89d 3017 	ldrb.w	r3, [sp, #23]
			resp = SPI_RxByte();
 8002272:	f88d 3013 	strb.w	r3, [sp, #19]
			if ((resp & 0x1F) == 0x05) break;
 8002276:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2b05      	cmp	r3, #5
 8002280:	d003      	beq.n	800228a <SD_disk_write+0x3a6>
		while (i <= 64)
 8002282:	3c01      	subs	r4, #1
 8002284:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002288:	d1e3      	bne.n	8002252 <SD_disk_write+0x36e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800228a:	4c0f      	ldr	r4, [pc, #60]	; (80022c8 <SD_disk_write+0x3e4>)
	dummy = 0xFF;
 800228c:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002290:	f04f 0864 	mov.w	r8, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002294:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8002296:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800229a:	6883      	ldr	r3, [r0, #8]
 800229c:	0799      	lsls	r1, r3, #30
 800229e:	d5fc      	bpl.n	800229a <SD_disk_write+0x3b6>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80022a0:	2301      	movs	r3, #1
 80022a2:	f8cd 8000 	str.w	r8, [sp]
 80022a6:	4632      	mov	r2, r6
 80022a8:	4639      	mov	r1, r7
 80022aa:	4620      	mov	r0, r4
 80022ac:	f003 fc10 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 80022b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
		while (SPI_RxByte() == 0);
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ed      	beq.n	8002294 <SD_disk_write+0x3b0>
	if ((resp & 0x1F) == 0x05) return TRUE;
 80022b8:	f89d 4013 	ldrb.w	r4, [sp, #19]
 80022bc:	f004 041f 	and.w	r4, r4, #31
	return count ? RES_ERROR : RES_OK;
 80022c0:	3c05      	subs	r4, #5
 80022c2:	bf18      	it	ne
 80022c4:	2401      	movne	r4, #1
 80022c6:	e68b      	b.n	8001fe0 <SD_disk_write+0xfc>
 80022c8:	20002c8c 	.word	0x20002c8c

080022cc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80022cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d0:	b08b      	sub	sp, #44	; 0x2c
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80022d2:	bb08      	cbnz	r0, 8002318 <SD_disk_ioctl+0x4c>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 80022d4:	2905      	cmp	r1, #5
 80022d6:	460d      	mov	r5, r1
 80022d8:	4617      	mov	r7, r2
 80022da:	d017      	beq.n	800230c <SD_disk_ioctl+0x40>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80022dc:	4b86      	ldr	r3, [pc, #536]	; (80024f8 <SD_disk_ioctl+0x22c>)
 80022de:	781c      	ldrb	r4, [r3, #0]
 80022e0:	f014 0401 	ands.w	r4, r4, #1
 80022e4:	d11d      	bne.n	8002322 <SD_disk_ioctl+0x56>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80022e6:	4885      	ldr	r0, [pc, #532]	; (80024fc <SD_disk_ioctl+0x230>)
 80022e8:	4622      	mov	r2, r4
 80022ea:	2102      	movs	r1, #2
 80022ec:	f002 f942 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80022f0:	2001      	movs	r0, #1
 80022f2:	f001 fb9b 	bl	8003a2c <HAL_Delay>

		SELECT();

		switch (ctrl)
 80022f6:	2d0d      	cmp	r5, #13
 80022f8:	d818      	bhi.n	800232c <SD_disk_ioctl+0x60>
 80022fa:	e8df f005 	tbb	[pc, r5]
 80022fe:	7550      	.short	0x7550
 8002300:	17171791 	.word	0x17171791
 8002304:	17171717 	.word	0x17171717
 8002308:	45988017 	.word	0x45988017
		switch (*ptr)
 800230c:	7814      	ldrb	r4, [r2, #0]
 800230e:	2c01      	cmp	r4, #1
 8002310:	d034      	beq.n	800237c <SD_disk_ioctl+0xb0>
 8002312:	2c02      	cmp	r4, #2
 8002314:	d02d      	beq.n	8002372 <SD_disk_ioctl+0xa6>
 8002316:	b34c      	cbz	r4, 800236c <SD_disk_ioctl+0xa0>
 8002318:	2404      	movs	r4, #4
		DESELECT();
		SPI_RxByte();
	}

	return res;
}
 800231a:	4620      	mov	r0, r4
 800231c:	b00b      	add	sp, #44	; 0x2c
 800231e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002322:	2403      	movs	r4, #3
}
 8002324:	4620      	mov	r0, r4
 8002326:	b00b      	add	sp, #44	; 0x2c
 8002328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800232c:	4e74      	ldr	r6, [pc, #464]	; (8002500 <SD_disk_ioctl+0x234>)
		switch (ctrl)
 800232e:	2404      	movs	r4, #4
 8002330:	f10d 0717 	add.w	r7, sp, #23
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	4871      	ldr	r0, [pc, #452]	; (80024fc <SD_disk_ioctl+0x230>)
 8002338:	2102      	movs	r1, #2
 800233a:	f002 f91b 	bl	8004574 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f001 fb74 	bl	8003a2c <HAL_Delay>
	dummy = 0xFF;
 8002344:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002346:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8002348:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800234c:	6893      	ldr	r3, [r2, #8]
 800234e:	079b      	lsls	r3, r3, #30
 8002350:	d5fc      	bpl.n	800234c <SD_disk_ioctl+0x80>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002352:	2364      	movs	r3, #100	; 0x64
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	463a      	mov	r2, r7
 8002358:	2301      	movs	r3, #1
 800235a:	f10d 0116 	add.w	r1, sp, #22
 800235e:	4868      	ldr	r0, [pc, #416]	; (8002500 <SD_disk_ioctl+0x234>)
 8002360:	f003 fbb6 	bl	8005ad0 <HAL_SPI_TransmitReceive>
}
 8002364:	4620      	mov	r0, r4
 8002366:	b00b      	add	sp, #44	; 0x2c
 8002368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PowerFlag = 0;
 800236c:	4b65      	ldr	r3, [pc, #404]	; (8002504 <SD_disk_ioctl+0x238>)
 800236e:	701c      	strb	r4, [r3, #0]
			break;
 8002370:	e7d3      	b.n	800231a <SD_disk_ioctl+0x4e>
	return PowerFlag;
 8002372:	4b64      	ldr	r3, [pc, #400]	; (8002504 <SD_disk_ioctl+0x238>)
			*(ptr + 1) = SD_CheckPower();
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	7053      	strb	r3, [r2, #1]
			res = RES_OK;		/* Power Check */
 8002378:	4604      	mov	r4, r0
			break;
 800237a:	e7ce      	b.n	800231a <SD_disk_ioctl+0x4e>
 800237c:	9003      	str	r0, [sp, #12]
			SD_PowerOn();		/* Power On */
 800237e:	f7ff f9af 	bl	80016e0 <SD_PowerOn>
			res = RES_OK;
 8002382:	9803      	ldr	r0, [sp, #12]
 8002384:	4604      	mov	r4, r0
			break;
 8002386:	e7c8      	b.n	800231a <SD_disk_ioctl+0x4e>
			if (SD_SendCmd(CMD58, 0) == 0)
 8002388:	2100      	movs	r1, #0
 800238a:	207a      	movs	r0, #122	; 0x7a
 800238c:	f7ff fa88 	bl	80018a0 <SD_SendCmd>
 8002390:	4e5b      	ldr	r6, [pc, #364]	; (8002500 <SD_disk_ioctl+0x234>)
 8002392:	2800      	cmp	r0, #0
 8002394:	d054      	beq.n	8002440 <SD_disk_ioctl+0x174>
 8002396:	f10d 0717 	add.w	r7, sp, #23
			res = RES_PARERR;
 800239a:	2404      	movs	r4, #4
 800239c:	e7ca      	b.n	8002334 <SD_disk_ioctl+0x68>
	Timer2 = 500;
 800239e:	4c5a      	ldr	r4, [pc, #360]	; (8002508 <SD_disk_ioctl+0x23c>)
 80023a0:	4e57      	ldr	r6, [pc, #348]	; (8002500 <SD_disk_ioctl+0x234>)
 80023a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023a6:	8023      	strh	r3, [r4, #0]
 80023a8:	f10d 0b18 	add.w	fp, sp, #24
 80023ac:	f10d 0717 	add.w	r7, sp, #23
	dummy = 0xFF;
 80023b0:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80023b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80023b8:	46b0      	mov	r8, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80023ba:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 80023bc:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80023c0:	6893      	ldr	r3, [r2, #8]
 80023c2:	0798      	lsls	r0, r3, #30
 80023c4:	d5fc      	bpl.n	80023c0 <SD_disk_ioctl+0xf4>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80023c6:	2301      	movs	r3, #1
 80023c8:	f8cd 9000 	str.w	r9, [sp]
 80023cc:	465a      	mov	r2, fp
 80023ce:	4639      	mov	r1, r7
 80023d0:	4640      	mov	r0, r8
 80023d2:	f003 fb7d 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 80023d6:	f89d 3018 	ldrb.w	r3, [sp, #24]
	} while ((res != 0xFF) && Timer2);
 80023da:	2bff      	cmp	r3, #255	; 0xff
 80023dc:	d02e      	beq.n	800243c <SD_disk_ioctl+0x170>
 80023de:	8823      	ldrh	r3, [r4, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ea      	bne.n	80023ba <SD_disk_ioctl+0xee>
	res = RES_ERROR;
 80023e4:	2401      	movs	r4, #1
 80023e6:	e7a5      	b.n	8002334 <SD_disk_ioctl+0x68>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80023e8:	2100      	movs	r1, #0
 80023ea:	2049      	movs	r0, #73	; 0x49
 80023ec:	f7ff fa58 	bl	80018a0 <SD_SendCmd>
 80023f0:	4604      	mov	r4, r0
 80023f2:	2800      	cmp	r0, #0
 80023f4:	d044      	beq.n	8002480 <SD_disk_ioctl+0x1b4>
 80023f6:	4e42      	ldr	r6, [pc, #264]	; (8002500 <SD_disk_ioctl+0x234>)
 80023f8:	f10d 0717 	add.w	r7, sp, #23
 80023fc:	e7f2      	b.n	80023e4 <SD_disk_ioctl+0x118>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80023fe:	2100      	movs	r1, #0
 8002400:	2049      	movs	r0, #73	; 0x49
 8002402:	f7ff fa4d 	bl	80018a0 <SD_SendCmd>
 8002406:	2800      	cmp	r0, #0
 8002408:	d1f5      	bne.n	80023f6 <SD_disk_ioctl+0x12a>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800240a:	4638      	mov	r0, r7
 800240c:	2110      	movs	r1, #16
 800240e:	f7ff f9d9 	bl	80017c4 <SD_RxDataBlock>
	res = RES_ERROR;
 8002412:	fab0 f480 	clz	r4, r0
 8002416:	4e3a      	ldr	r6, [pc, #232]	; (8002500 <SD_disk_ioctl+0x234>)
 8002418:	0964      	lsrs	r4, r4, #5
 800241a:	f10d 0717 	add.w	r7, sp, #23
 800241e:	e789      	b.n	8002334 <SD_disk_ioctl+0x68>
			*(WORD*) buff = 512;
 8002420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002424:	803b      	strh	r3, [r7, #0]
			break;
 8002426:	4e36      	ldr	r6, [pc, #216]	; (8002500 <SD_disk_ioctl+0x234>)
 8002428:	f10d 0717 	add.w	r7, sp, #23
 800242c:	e782      	b.n	8002334 <SD_disk_ioctl+0x68>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800242e:	2100      	movs	r1, #0
 8002430:	204a      	movs	r0, #74	; 0x4a
 8002432:	f7ff fa35 	bl	80018a0 <SD_SendCmd>
 8002436:	2800      	cmp	r0, #0
 8002438:	d1dd      	bne.n	80023f6 <SD_disk_ioctl+0x12a>
 800243a:	e7e6      	b.n	800240a <SD_disk_ioctl+0x13e>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800243c:	462c      	mov	r4, r5
 800243e:	e779      	b.n	8002334 <SD_disk_ioctl+0x68>
 8002440:	1e7d      	subs	r5, r7, #1
 8002442:	1cfc      	adds	r4, r7, #3
 8002444:	f10d 0b18 	add.w	fp, sp, #24
 8002448:	f10d 0717 	add.w	r7, sp, #23
	dummy = 0xFF;
 800244c:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002450:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002454:	46b0      	mov	r8, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002456:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8002458:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800245c:	6893      	ldr	r3, [r2, #8]
 800245e:	0799      	lsls	r1, r3, #30
 8002460:	d5fc      	bpl.n	800245c <SD_disk_ioctl+0x190>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002462:	2301      	movs	r3, #1
 8002464:	f8cd 9000 	str.w	r9, [sp]
 8002468:	465a      	mov	r2, fp
 800246a:	4639      	mov	r1, r7
 800246c:	4640      	mov	r0, r8
 800246e:	f003 fb2f 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	return data;
 8002472:	f89d 3018 	ldrb.w	r3, [sp, #24]
					*ptr++ = SPI_RxByte();
 8002476:	f805 3f01 	strb.w	r3, [r5, #1]!
				for (n = 0; n < 4; n++)
 800247a:	42ac      	cmp	r4, r5
 800247c:	d1eb      	bne.n	8002456 <SD_disk_ioctl+0x18a>
 800247e:	e78c      	b.n	800239a <SD_disk_ioctl+0xce>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002480:	2110      	movs	r1, #16
 8002482:	a806      	add	r0, sp, #24
 8002484:	f7ff f99e 	bl	80017c4 <SD_RxDataBlock>
 8002488:	2800      	cmp	r0, #0
 800248a:	d0b4      	beq.n	80023f6 <SD_disk_ioctl+0x12a>
				if ((csd[0] >> 6) == 1)
 800248c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	2b01      	cmp	r3, #1
 8002494:	d022      	beq.n	80024dc <SD_disk_ioctl+0x210>
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002496:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800249a:	f89d 1020 	ldrb.w	r1, [sp, #32]
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800249e:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80024a2:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 80024a6:	4e16      	ldr	r6, [pc, #88]	; (8002500 <SD_disk_ioctl+0x234>)
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 80024ae:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80024b2:	0289      	lsls	r1, r1, #10
 80024b4:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80024b8:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80024ba:	440b      	add	r3, r1
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80024bc:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 80024c0:	f002 020f 	and.w	r2, r2, #15
 80024c4:	0049      	lsls	r1, r1, #1
 80024c6:	f001 0106 	and.w	r1, r1, #6
 80024ca:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80024ce:	440a      	add	r2, r1
 80024d0:	3a07      	subs	r2, #7
 80024d2:	4093      	lsls	r3, r2
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	f10d 0717 	add.w	r7, sp, #23
 80024da:	e72b      	b.n	8002334 <SD_disk_ioctl+0x68>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80024dc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80024e0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80024e4:	4e06      	ldr	r6, [pc, #24]	; (8002500 <SD_disk_ioctl+0x234>)
 80024e6:	3301      	adds	r3, #1
 80024e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	029b      	lsls	r3, r3, #10
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	f10d 0717 	add.w	r7, sp, #23
 80024f6:	e71d      	b.n	8002334 <SD_disk_ioctl+0x68>
 80024f8:	20000000 	.word	0x20000000
 80024fc:	40020800 	.word	0x40020800
 8002500:	20002c8c 	.word	0x20002c8c
 8002504:	2000021d 	.word	0x2000021d
 8002508:	20000220 	.word	0x20000220

0800250c <Headlamp_Init>:
#include "main.h"

int headlamp_on = 0;

void Headlamp_Init() {
	HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
 800250c:	2201      	movs	r2, #1
 800250e:	4802      	ldr	r0, [pc, #8]	; (8002518 <Headlamp_Init+0xc>)
 8002510:	4611      	mov	r1, r2
 8002512:	f002 b82f 	b.w	8004574 <HAL_GPIO_WritePin>
 8002516:	bf00      	nop
 8002518:	40020800 	.word	0x40020800

0800251c <testSD>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int testSD() {
 800251c:	b570      	push	{r4, r5, r6, lr}
	/* Mount SD Card */
	int ret = 0;
	if(f_mount(&fs, "/", 0) != FR_OK) {
 800251e:	494a      	ldr	r1, [pc, #296]	; (8002648 <testSD+0x12c>)
 8002520:	484a      	ldr	r0, [pc, #296]	; (800264c <testSD+0x130>)
int testSD() {
 8002522:	b082      	sub	sp, #8
	if(f_mount(&fs, "/", 0) != FR_OK) {
 8002524:	2200      	movs	r2, #0
 8002526:	f005 fdb1 	bl	800808c <f_mount>
 800252a:	2800      	cmp	r0, #0
 800252c:	d15c      	bne.n	80025e8 <testSD+0xcc>
		printf("Failed to mount SD Card\r\n");
		return -1;
	}

	/* Open file to write */
	ret = f_open(&fil, "/TEST.TXT", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800252e:	4948      	ldr	r1, [pc, #288]	; (8002650 <testSD+0x134>)
 8002530:	4848      	ldr	r0, [pc, #288]	; (8002654 <testSD+0x138>)
 8002532:	2213      	movs	r2, #19
 8002534:	f005 fdec 	bl	8008110 <f_open>
	if(ret != FR_OK) {
 8002538:	4601      	mov	r1, r0
 800253a:	2800      	cmp	r0, #0
 800253c:	d15a      	bne.n	80025f4 <testSD+0xd8>
		printf("Failed to open file (%i) \r\n", ret);
		return -1;
	}

	if(f_getfree("", &fre_clust, &pfs) != FR_OK) {
 800253e:	4d46      	ldr	r5, [pc, #280]	; (8002658 <testSD+0x13c>)
 8002540:	4c46      	ldr	r4, [pc, #280]	; (800265c <testSD+0x140>)
 8002542:	4847      	ldr	r0, [pc, #284]	; (8002660 <testSD+0x144>)
 8002544:	462a      	mov	r2, r5
 8002546:	4621      	mov	r1, r4
 8002548:	f006 faf8 	bl	8008b3c <f_getfree>
 800254c:	2800      	cmp	r0, #0
 800254e:	d175      	bne.n	800263c <testSD+0x120>
		printf("Free space check failed\r\n");
		return -1;
	}

	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	4e44      	ldr	r6, [pc, #272]	; (8002664 <testSD+0x148>)
 8002554:	6998      	ldr	r0, [r3, #24]
 8002556:	895d      	ldrh	r5, [r3, #10]
 8002558:	3802      	subs	r0, #2
 800255a:	fb05 f000 	mul.w	r0, r5, r0
 800255e:	f7fd ffe9 	bl	8000534 <__aeabi_ui2d>
 8002562:	2200      	movs	r2, #0
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <testSD+0x14c>)
 8002566:	f7fe f85f 	bl	8000628 <__aeabi_dmul>
 800256a:	f7fe fb35 	bl	8000bd8 <__aeabi_d2uiz>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800256e:	6823      	ldr	r3, [r4, #0]
	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002570:	6030      	str	r0, [r6, #0]
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002572:	fb03 f005 	mul.w	r0, r3, r5
 8002576:	f7fd ffdd 	bl	8000534 <__aeabi_ui2d>
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <testSD+0x14c>)
 800257c:	2200      	movs	r2, #0
 800257e:	f7fe f853 	bl	8000628 <__aeabi_dmul>
 8002582:	f7fe fb29 	bl	8000bd8 <__aeabi_d2uiz>
 8002586:	4b39      	ldr	r3, [pc, #228]	; (800266c <testSD+0x150>)
 8002588:	6018      	str	r0, [r3, #0]

	/* free space is less than 1kb */
	if(free_space < 1) {
 800258a:	2800      	cmp	r0, #0
 800258c:	d038      	beq.n	8002600 <testSD+0xe4>
		return -1;
	}

	//	printf("SD CARD MOUNTED! TESTING R/W...\r\n");

	f_puts("TEST", &fil);
 800258e:	4931      	ldr	r1, [pc, #196]	; (8002654 <testSD+0x138>)
 8002590:	4837      	ldr	r0, [pc, #220]	; (8002670 <testSD+0x154>)
 8002592:	f006 fbe5 	bl	8008d60 <f_puts>

	/* Close file */
	ret = f_close(&fil);
 8002596:	482f      	ldr	r0, [pc, #188]	; (8002654 <testSD+0x138>)
 8002598:	f006 fa40 	bl	8008a1c <f_close>
	if(ret != FR_OK) {
 800259c:	4601      	mov	r1, r0
 800259e:	2800      	cmp	r0, #0
 80025a0:	d134      	bne.n	800260c <testSD+0xf0>
		printf("Failed to close file (%i) \r\n", ret);
		return -1;
	}

	/* Open file to read */
	ret = f_open(&fil, "/TEST.TXT", FA_READ);
 80025a2:	492b      	ldr	r1, [pc, #172]	; (8002650 <testSD+0x134>)
 80025a4:	482b      	ldr	r0, [pc, #172]	; (8002654 <testSD+0x138>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	f005 fdb2 	bl	8008110 <f_open>
	if(ret != FR_OK) {
 80025ac:	4601      	mov	r1, r0
 80025ae:	bb98      	cbnz	r0, 8002618 <testSD+0xfc>
		printf("Failed to open in read mode (%i) \r\n", ret);
		return -1;
	}

	char buffer[5];
	f_gets(buffer, sizeof(buffer), &fil);
 80025b0:	4a28      	ldr	r2, [pc, #160]	; (8002654 <testSD+0x138>)
 80025b2:	2105      	movs	r1, #5
 80025b4:	4668      	mov	r0, sp
 80025b6:	f006 fba5 	bl	8008d04 <f_gets>

	if (strcmp(buffer, "TEST")) {
 80025ba:	492d      	ldr	r1, [pc, #180]	; (8002670 <testSD+0x154>)
 80025bc:	4668      	mov	r0, sp
 80025be:	f7fd fe0f 	bl	80001e0 <strcmp>
 80025c2:	4604      	mov	r4, r0
 80025c4:	bb70      	cbnz	r0, 8002624 <testSD+0x108>
	}

	//	printf("PASSED: read file contents\r\n");

	/* Close file */
	if(f_close(&fil) != FR_OK) {
 80025c6:	4823      	ldr	r0, [pc, #140]	; (8002654 <testSD+0x138>)
 80025c8:	f006 fa28 	bl	8008a1c <f_close>
 80025cc:	bb80      	cbnz	r0, 8002630 <testSD+0x114>
		printf("Failed to close\r\n");
		return -1;
	}

	if(f_unlink("test.txt") != FR_OK) {
 80025ce:	4829      	ldr	r0, [pc, #164]	; (8002674 <testSD+0x158>)
 80025d0:	f006 fb26 	bl	8008c20 <f_unlink>
 80025d4:	b910      	cbnz	r0, 80025dc <testSD+0xc0>
		printf("Failed to delete test file \r\n");
	}

	return 0;
}
 80025d6:	4620      	mov	r0, r4
 80025d8:	b002      	add	sp, #8
 80025da:	bd70      	pop	{r4, r5, r6, pc}
		printf("Failed to delete test file \r\n");
 80025dc:	4826      	ldr	r0, [pc, #152]	; (8002678 <testSD+0x15c>)
 80025de:	f007 fa7b 	bl	8009ad8 <puts>
}
 80025e2:	4620      	mov	r0, r4
 80025e4:	b002      	add	sp, #8
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
		printf("Failed to mount SD Card\r\n");
 80025e8:	4824      	ldr	r0, [pc, #144]	; (800267c <testSD+0x160>)
 80025ea:	f007 fa75 	bl	8009ad8 <puts>
		return -1;
 80025ee:	f04f 34ff 	mov.w	r4, #4294967295
 80025f2:	e7f0      	b.n	80025d6 <testSD+0xba>
		printf("Failed to open file (%i) \r\n", ret);
 80025f4:	4822      	ldr	r0, [pc, #136]	; (8002680 <testSD+0x164>)
 80025f6:	f007 f9d3 	bl	80099a0 <iprintf>
		return -1;
 80025fa:	f04f 34ff 	mov.w	r4, #4294967295
 80025fe:	e7ea      	b.n	80025d6 <testSD+0xba>
		printf("Drive is full\r\n");
 8002600:	4820      	ldr	r0, [pc, #128]	; (8002684 <testSD+0x168>)
 8002602:	f007 fa69 	bl	8009ad8 <puts>
		return -1;
 8002606:	f04f 34ff 	mov.w	r4, #4294967295
 800260a:	e7e4      	b.n	80025d6 <testSD+0xba>
		printf("Failed to close file (%i) \r\n", ret);
 800260c:	481e      	ldr	r0, [pc, #120]	; (8002688 <testSD+0x16c>)
 800260e:	f007 f9c7 	bl	80099a0 <iprintf>
		return -1;
 8002612:	f04f 34ff 	mov.w	r4, #4294967295
 8002616:	e7de      	b.n	80025d6 <testSD+0xba>
		printf("Failed to open in read mode (%i) \r\n", ret);
 8002618:	481c      	ldr	r0, [pc, #112]	; (800268c <testSD+0x170>)
 800261a:	f007 f9c1 	bl	80099a0 <iprintf>
		return -1;
 800261e:	f04f 34ff 	mov.w	r4, #4294967295
 8002622:	e7d8      	b.n	80025d6 <testSD+0xba>
		printf("File contents MISMATCH. FAIL R/W test\r\n");
 8002624:	481a      	ldr	r0, [pc, #104]	; (8002690 <testSD+0x174>)
 8002626:	f007 fa57 	bl	8009ad8 <puts>
		return -1;
 800262a:	f04f 34ff 	mov.w	r4, #4294967295
 800262e:	e7d2      	b.n	80025d6 <testSD+0xba>
		printf("Failed to close\r\n");
 8002630:	4818      	ldr	r0, [pc, #96]	; (8002694 <testSD+0x178>)
 8002632:	f007 fa51 	bl	8009ad8 <puts>
		return -1;
 8002636:	f04f 34ff 	mov.w	r4, #4294967295
 800263a:	e7cc      	b.n	80025d6 <testSD+0xba>
		printf("Free space check failed\r\n");
 800263c:	4816      	ldr	r0, [pc, #88]	; (8002698 <testSD+0x17c>)
 800263e:	f007 fa4b 	bl	8009ad8 <puts>
		return -1;
 8002642:	f04f 34ff 	mov.w	r4, #4294967295
 8002646:	e7c6      	b.n	80025d6 <testSD+0xba>
 8002648:	0800bb94 	.word	0x0800bb94
 800264c:	20001b00 	.word	0x20001b00
 8002650:	0800bbb4 	.word	0x0800bbb4
 8002654:	20000ac8 	.word	0x20000ac8
 8002658:	20002f3c 	.word	0x20002f3c
 800265c:	20001af8 	.word	0x20001af8
 8002660:	0800bc2c 	.word	0x0800bc2c
 8002664:	20002f44 	.word	0x20002f44
 8002668:	3fe00000 	.word	0x3fe00000
 800266c:	20001afc 	.word	0x20001afc
 8002670:	0800bc08 	.word	0x0800bc08
 8002674:	0800bc90 	.word	0x0800bc90
 8002678:	0800bc9c 	.word	0x0800bc9c
 800267c:	0800bb98 	.word	0x0800bb98
 8002680:	0800bbc0 	.word	0x0800bbc0
 8002684:	0800bbf8 	.word	0x0800bbf8
 8002688:	0800bc10 	.word	0x0800bc10
 800268c:	0800bc30 	.word	0x0800bc30
 8002690:	0800bc54 	.word	0x0800bc54
 8002694:	0800bc7c 	.word	0x0800bc7c
 8002698:	0800bbdc 	.word	0x0800bbdc

0800269c <HAL_TIM_PeriodElapsedCallback>:

/* INTERRUPT CALLBACKS */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
	if (htim == audio.htim) {
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	4282      	cmp	r2, r0
 80026a2:	d019      	beq.n	80026d8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		audio_callback(&audio);
	}
	else if (htim == &DISTANCE_SENSOR_TIMER) {
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80026a6:	4298      	cmp	r0, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80026a8:	b510      	push	{r4, lr}
 80026aa:	4604      	mov	r4, r0
	else if (htim == &DISTANCE_SENSOR_TIMER) {
 80026ac:	d017      	beq.n	80026de <HAL_TIM_PeriodElapsedCallback+0x42>
		update_readings_async(&distance_sensor_array);
	} else if (htim == &CAMERA_CAPTURE_TIMER) {
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80026b0:	4298      	cmp	r0, r3
 80026b2:	d006      	beq.n	80026c2 <HAL_TIM_PeriodElapsedCallback+0x26>
		capture_flag = 1;
	} else if (htim == HEADLAMP_TIMER) {
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80026b6:	4298      	cmp	r0, r3
 80026b8:	d019      	beq.n	80026ee <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
	} else if (htim == FILE_TIMER) {
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80026bc:	4298      	cmp	r0, r3
 80026be:	d004      	beq.n	80026ca <HAL_TIM_PeriodElapsedCallback+0x2e>
		XBee_Transmit_File();
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
	}
}
 80026c0:	bd10      	pop	{r4, pc}
		capture_flag = 1;
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	bd10      	pop	{r4, pc}
		XBee_Transmit_File();
 80026ca:	f000 fedf 	bl	800348c <XBee_Transmit_File>
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
 80026ce:	4620      	mov	r0, r4
}
 80026d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
 80026d4:	f003 bbfc 	b.w	8005ed0 <HAL_TIM_Base_Stop_IT>
		audio_callback(&audio);
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe bc73 	b.w	8000fc4 <audio_callback>
	ADC_HandleTypeDef* hadc;
	uint32_t readings[3];
} distance_sensor_array_t;

void update_readings_async(distance_sensor_array_t* ds) {
	HAL_ADC_Start_DMA(ds->hadc, ds->readings, 3);
 80026de:	490f      	ldr	r1, [pc, #60]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x80>)
}
 80026e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80026e8:	2203      	movs	r2, #3
 80026ea:	f001 ba71 	b.w	8003bd0 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
 80026ee:	2201      	movs	r2, #1
 80026f0:	480b      	ldr	r0, [pc, #44]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80026f2:	4611      	mov	r1, r2
 80026f4:	f001 ff3e 	bl	8004574 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
 80026f8:	4620      	mov	r0, r4
}
 80026fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
 80026fe:	f003 bbe7 	b.w	8005ed0 <HAL_TIM_Base_Stop_IT>
 8002702:	bf00      	nop
 8002704:	20000224 	.word	0x20000224
 8002708:	20002e14 	.word	0x20002e14
 800270c:	20002dcc 	.word	0x20002dcc
 8002710:	20002d3c 	.word	0x20002d3c
 8002714:	20002d84 	.word	0x20002d84
 8002718:	20000a80 	.word	0x20000a80
 800271c:	20000aac 	.word	0x20000aac
 8002720:	40020800 	.word	0x40020800

08002724 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	// TODO: remove, this is just for testing
	if (GPIO_Pin == 0x2000) {
 8002724:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002728:	b508      	push	{r3, lr}
	if (GPIO_Pin == 0x2000) {
 800272a:	d005      	beq.n	8002738 <HAL_GPIO_EXTI_Callback+0x14>
		printf("Save requested\r\n");
		save_requested = 1;
	} else if (GPIO_Pin & (1 << 8) && input_connected) {
 800272c:	05c3      	lsls	r3, r0, #23
 800272e:	d502      	bpl.n	8002736 <HAL_GPIO_EXTI_Callback+0x12>
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	b93b      	cbnz	r3, 8002746 <HAL_GPIO_EXTI_Callback+0x22>
		Input_Resolve();
	}
}
 8002736:	bd08      	pop	{r3, pc}
		printf("Save requested\r\n");
 8002738:	4806      	ldr	r0, [pc, #24]	; (8002754 <HAL_GPIO_EXTI_Callback+0x30>)
 800273a:	f007 f9cd 	bl	8009ad8 <puts>
		save_requested = 1;
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_GPIO_EXTI_Callback+0x34>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	bd08      	pop	{r3, pc}
 8002746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Input_Resolve();
 800274a:	f7fe bd07 	b.w	800115c <Input_Resolve>
 800274e:	bf00      	nop
 8002750:	20000004 	.word	0x20000004
 8002754:	0800bcbc 	.word	0x0800bcbc
 8002758:	20002f40 	.word	0x20002f40
 800275c:	00000000 	.word	0x00000000

08002760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002760:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002762:	2300      	movs	r3, #0
{
 8002764:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002766:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800276a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800276e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002772:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4928      	ldr	r1, [pc, #160]	; (8002818 <SystemClock_Config+0xb8>)
 8002778:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800277a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800277c:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002780:	4a26      	ldr	r2, [pc, #152]	; (800281c <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002786:	6408      	str	r0, [r1, #64]	; 0x40
 8002788:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800278a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800278e:	9100      	str	r1, [sp, #0]
 8002790:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	6813      	ldr	r3, [r2, #0]
 8002796:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800279a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	6813      	ldr	r3, [r2, #0]
 80027a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027a6:	9301      	str	r3, [sp, #4]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a8:	2002      	movs	r0, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80027aa:	9901      	ldr	r1, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ac:	2100      	movs	r1, #0
 80027ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80027b2:	2010      	movs	r0, #16
 80027b4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80027b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80027bc:	2004      	movs	r0, #4
 80027be:	2107      	movs	r1, #7
 80027c0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027c4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027c6:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027c8:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027cc:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027ce:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027d0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d2:	f002 fc93 	bl	80050fc <HAL_RCC_OscConfig>
 80027d6:	b108      	cbz	r0, 80027dc <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80027da:	e7fe      	b.n	80027da <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027dc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002808 <SystemClock_Config+0xa8>
 80027e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80027e4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002810 <SystemClock_Config+0xb0>
 80027e8:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027ea:	4621      	mov	r1, r4
 80027ec:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ee:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027f4:	f002 fe9a 	bl	800552c <HAL_RCC_ClockConfig>
 80027f8:	b108      	cbz	r0, 80027fe <SystemClock_Config+0x9e>
 80027fa:	b672      	cpsid	i
	while (1)
 80027fc:	e7fe      	b.n	80027fc <SystemClock_Config+0x9c>
}
 80027fe:	b014      	add	sp, #80	; 0x50
 8002800:	bd10      	pop	{r4, pc}
 8002802:	bf00      	nop
 8002804:	f3af 8000 	nop.w
 8002808:	0000000f 	.word	0x0000000f
 800280c:	00000002 	.word	0x00000002
 8002810:	00000000 	.word	0x00000000
 8002814:	00001000 	.word	0x00001000
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000

08002820 <main>:
{
 8002820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	2400      	movs	r4, #0
{
 8002826:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8002828:	f001 f8d4 	bl	80039d4 <HAL_Init>
  SystemClock_Config();
 800282c:	f7ff ff98 	bl	8002760 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8002834:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002838:	4dba      	ldr	r5, [pc, #744]	; (8002b24 <main+0x304>)
 800283a:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800283e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 8002840:	48b9      	ldr	r0, [pc, #740]	; (8002b28 <main+0x308>)
  hi2c1.Instance = I2C1;
 8002842:	4eba      	ldr	r6, [pc, #744]	; (8002b2c <main+0x30c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	632b      	str	r3, [r5, #48]	; 0x30
 800284a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	9303      	str	r3, [sp, #12]
 8002852:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002854:	9404      	str	r4, [sp, #16]
 8002856:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285c:	632b      	str	r3, [r5, #48]	; 0x30
 800285e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	9304      	str	r3, [sp, #16]
 8002866:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002868:	9405      	str	r4, [sp, #20]
 800286a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	632b      	str	r3, [r5, #48]	; 0x30
 8002872:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	9305      	str	r3, [sp, #20]
 800287a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800287c:	9406      	str	r4, [sp, #24]
 800287e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	632b      	str	r3, [r5, #48]	; 0x30
 8002886:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	9306      	str	r3, [sp, #24]
 800288e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002890:	9407      	str	r4, [sp, #28]
 8002892:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	632b      	str	r3, [r5, #48]	; 0x30
 800289a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800289c:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 80028a0:	2133      	movs	r1, #51	; 0x33
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028a2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 80028a4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028a6:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 80028a8:	f001 fe64 	bl	8004574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_CS_GPIO_Port, DAC_CS_Pin, GPIO_PIN_RESET);
 80028ac:	48a0      	ldr	r0, [pc, #640]	; (8002b30 <main+0x310>)
 80028ae:	4622      	mov	r2, r4
 80028b0:	2104      	movs	r1, #4
 80028b2:	f001 fe5f 	bl	8004574 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80028b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028be:	489a      	ldr	r0, [pc, #616]	; (8002b28 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028c2:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = B1_Pin;
 80028c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin|CAM_CS_Pin|AMP_ENABLE_Pin;
 80028c8:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028cc:	f001 fd60 	bl	8004390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin|CAM_CS_Pin|AMP_ENABLE_Pin;
 80028d0:	f04f 0900 	mov.w	r9, #0
 80028d4:	2231      	movs	r2, #49	; 0x31
 80028d6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d8:	4893      	ldr	r0, [pc, #588]	; (8002b28 <main+0x308>)
 80028da:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin|CAM_CS_Pin|AMP_ENABLE_Pin;
 80028dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80028e0:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e4:	f001 fd54 	bl	8004390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80028e8:	2202      	movs	r2, #2
 80028ea:	2301      	movs	r3, #1
 80028ec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80028f0:	488d      	ldr	r0, [pc, #564]	; (8002b28 <main+0x308>)
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80028f2:	2201      	movs	r2, #1
 80028f4:	2300      	movs	r3, #0
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80028f6:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80028f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f001 fd48 	bl	8004390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002904:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002908:	4887      	ldr	r0, [pc, #540]	; (8002b28 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800290c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800290e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002912:	f001 fd3d 	bl	8004390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin;
 8002916:	2204      	movs	r2, #4
 8002918:	2301      	movs	r3, #1
  HAL_GPIO_Init(DAC_CS_GPIO_Port, &GPIO_InitStruct);
 800291a:	4885      	ldr	r0, [pc, #532]	; (8002b30 <main+0x310>)
 800291c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = DAC_CS_Pin;
 800291e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002922:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(DAC_CS_GPIO_Port, &GPIO_InitStruct);
 8002926:	f001 fd33 	bl	8004390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 800292a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800292e:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002930:	4880      	ldr	r0, [pc, #512]	; (8002b34 <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002934:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8002936:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 800293a:	f001 fd29 	bl	8004390 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800293e:	4622      	mov	r2, r4
 8002940:	2101      	movs	r1, #1
 8002942:	2028      	movs	r0, #40	; 0x28
 8002944:	f001 faf6 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002948:	2028      	movs	r0, #40	; 0x28
 800294a:	f001 fb31 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800294e:	9402      	str	r4, [sp, #8]
 8002950:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002956:	632b      	str	r3, [r5, #48]	; 0x30
 8002958:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800295e:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002960:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002962:	4621      	mov	r1, r4
 8002964:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002966:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002968:	f001 fae4 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800296c:	2038      	movs	r0, #56	; 0x38
 800296e:	f001 fb1f 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.ClockSpeed = 100000;
 8002972:	4b71      	ldr	r3, [pc, #452]	; (8002b38 <main+0x318>)
 8002974:	4a71      	ldr	r2, [pc, #452]	; (8002b3c <main+0x31c>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002976:	6234      	str	r4, [r6, #32]
  hi2c1.Init.ClockSpeed = 100000;
 8002978:	e9c6 2300 	strd	r2, r3, [r6]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800297c:	4630      	mov	r0, r6
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800297e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002982:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002986:	e9c6 3404 	strd	r3, r4, [r6, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800298a:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800298e:	f002 f84b 	bl	8004a28 <HAL_I2C_Init>
 8002992:	b108      	cbz	r0, 8002998 <main+0x178>
 8002994:	b672      	cpsid	i
	while (1)
 8002996:	e7fe      	b.n	8002996 <main+0x176>
  hspi2.Instance = SPI2;
 8002998:	4b69      	ldr	r3, [pc, #420]	; (8002b40 <main+0x320>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800299a:	4a6a      	ldr	r2, [pc, #424]	; (8002b44 <main+0x324>)
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800299c:	6298      	str	r0, [r3, #40]	; 0x28
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800299e:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029a2:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029a6:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029aa:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi2.Init.CRCPolynomial = 10;
 80029ae:	240a      	movs	r4, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80029b0:	f44f 7500 	mov.w	r5, #512	; 0x200
 80029b4:	f04f 0810 	mov.w	r8, #16
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029b8:	4618      	mov	r0, r3
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029ba:	e9c3 2700 	strd	r2, r7, [r3]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80029be:	e9c3 5806 	strd	r5, r8, [r3, #24]
  hspi2.Init.CRCPolynomial = 10;
 80029c2:	62dc      	str	r4, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029c4:	f002 fed0 	bl	8005768 <HAL_SPI_Init>
 80029c8:	b108      	cbz	r0, 80029ce <main+0x1ae>
 80029ca:	b672      	cpsid	i
	while (1)
 80029cc:	e7fe      	b.n	80029cc <main+0x1ac>
  huart2.Instance = USART2;
 80029ce:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <main+0x328>)
  huart2.Init.BaudRate = 115200;
 80029d0:	495e      	ldr	r1, [pc, #376]	; (8002b4c <main+0x32c>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80029d2:	6118      	str	r0, [r3, #16]
  huart2.Init.BaudRate = 115200;
 80029d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029d8:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029dc:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart2.Init.BaudRate = 115200;
 80029e0:	e9c3 1200 	strd	r1, r2, [r3]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029e4:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029e6:	220c      	movs	r2, #12
 80029e8:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ea:	f003 fdb1 	bl	8006550 <HAL_UART_Init>
 80029ee:	bb40      	cbnz	r0, 8002a42 <main+0x222>
  hadc1.Instance = ADC1;
 80029f0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8002b68 <main+0x348>
 80029f4:	9001      	str	r0, [sp, #4]
  MX_FATFS_Init();
 80029f6:	f004 f88b 	bl	8006b10 <MX_FATFS_Init>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80029fa:	4a55      	ldr	r2, [pc, #340]	; (8002b50 <main+0x330>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80029fc:	9801      	ldr	r0, [sp, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029fe:	f8c9 0008 	str.w	r0, [r9, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002a02:	2301      	movs	r3, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a04:	e9c9 3304 	strd	r3, r3, [r9, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002a08:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002a0c:	e9c9 2300 	strd	r2, r3, [r9]
  hadc1.Init.NbrOfConversion = 3;
 8002a10:	2303      	movs	r3, #3
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a12:	4a50      	ldr	r2, [pc, #320]	; (8002b54 <main+0x334>)
  hadc1.Init.NbrOfConversion = 3;
 8002a14:	f8c9 301c 	str.w	r3, [r9, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a18:	2300      	movs	r3, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a1a:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002a1e:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a22:	f889 0018 	strb.w	r0, [r9, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a26:	f889 0020 	strb.w	r0, [r9, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a2a:	f8c9 000c 	str.w	r0, [r9, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a2e:	f889 0030 	strb.w	r0, [r9, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a32:	e9c9 230a 	strd	r2, r3, [r9, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a36:	4648      	mov	r0, r9
 8002a38:	f001 f81c 	bl	8003a74 <HAL_ADC_Init>
 8002a3c:	b118      	cbz	r0, 8002a46 <main+0x226>
 8002a3e:	b672      	cpsid	i
	while (1)
 8002a40:	e7fe      	b.n	8002a40 <main+0x220>
 8002a42:	b672      	cpsid	i
 8002a44:	e7fe      	b.n	8002a44 <main+0x224>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a46:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_0;
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a4c:	a90e      	add	r1, sp, #56	; 0x38
 8002a4e:	4648      	mov	r0, r9
  sConfig.Channel = ADC_CHANNEL_0;
 8002a50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a54:	f001 f9ae 	bl	8003db4 <HAL_ADC_ConfigChannel>
 8002a58:	b108      	cbz	r0, 8002a5e <main+0x23e>
 8002a5a:	b672      	cpsid	i
	while (1)
 8002a5c:	e7fe      	b.n	8002a5c <main+0x23c>
  sConfig.Channel = ADC_CHANNEL_1;
 8002a5e:	2201      	movs	r2, #1
 8002a60:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a62:	a90e      	add	r1, sp, #56	; 0x38
 8002a64:	4648      	mov	r0, r9
  sConfig.Channel = ADC_CHANNEL_1;
 8002a66:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a6a:	f001 f9a3 	bl	8003db4 <HAL_ADC_ConfigChannel>
 8002a6e:	b108      	cbz	r0, 8002a74 <main+0x254>
 8002a70:	b672      	cpsid	i
	while (1)
 8002a72:	e7fe      	b.n	8002a72 <main+0x252>
  sConfig.Channel = ADC_CHANNEL_4;
 8002a74:	2204      	movs	r2, #4
 8002a76:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a78:	4648      	mov	r0, r9
 8002a7a:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 8002a7c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a80:	f001 f998 	bl	8003db4 <HAL_ADC_ConfigChannel>
 8002a84:	b108      	cbz	r0, 8002a8a <main+0x26a>
 8002a86:	b672      	cpsid	i
	while (1)
 8002a88:	e7fe      	b.n	8002a88 <main+0x268>
  hspi1.Instance = SPI1;
 8002a8a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8002b6c <main+0x34c>
 8002a8e:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <main+0x338>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a90:	f8c9 801c 	str.w	r8, [r9, #28]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a94:	e9c9 7001 	strd	r7, r0, [r9, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a98:	e9c9 0003 	strd	r0, r0, [r9, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a9c:	e9c9 0505 	strd	r0, r5, [r9, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aa0:	e9c9 0008 	strd	r0, r0, [r9, #32]
  hspi1.Init.CRCPolynomial = 10;
 8002aa4:	e9c9 040a 	strd	r0, r4, [r9, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aa8:	4648      	mov	r0, r9
  hspi1.Instance = SPI1;
 8002aaa:	f8c9 3000 	str.w	r3, [r9]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aae:	f002 fe5b 	bl	8005768 <HAL_SPI_Init>
 8002ab2:	b108      	cbz	r0, 8002ab8 <main+0x298>
 8002ab4:	b672      	cpsid	i
	while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <main+0x296>
  hspi3.Instance = SPI3;
 8002ab8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8002b70 <main+0x350>
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <main+0x33c>)
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002abe:	f8c8 0014 	str.w	r0, [r8, #20]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac2:	e9c8 0003 	strd	r0, r0, [r8, #12]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ac6:	e9c8 0007 	strd	r0, r0, [r8, #28]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aca:	e9c8 0009 	strd	r0, r0, [r8, #36]	; 0x24
  hspi3.Instance = SPI3;
 8002ace:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ad2:	4640      	mov	r0, r8
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8002ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002ad8:	f8c8 7004 	str.w	r7, [r8, #4]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002adc:	f8c8 5018 	str.w	r5, [r8, #24]
  hspi3.Init.CRCPolynomial = 10;
 8002ae0:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8002ae4:	f8c8 3008 	str.w	r3, [r8, #8]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ae8:	f002 fe3e 	bl	8005768 <HAL_SPI_Init>
 8002aec:	b108      	cbz	r0, 8002af2 <main+0x2d2>
 8002aee:	b672      	cpsid	i
	while (1)
 8002af0:	e7fe      	b.n	8002af0 <main+0x2d0>
  htim2.Instance = TIM2;
 8002af2:	4d1b      	ldr	r5, [pc, #108]	; (8002b60 <main+0x340>)
  htim2.Init.Period = 610000;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <main+0x344>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af6:	60a8      	str	r0, [r5, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002af8:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002afc:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b00:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b04:	6128      	str	r0, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b06:	61a8      	str	r0, [r5, #24]
  htim2.Init.Period = 610000;
 8002b08:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 8399;
 8002b0a:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8002b0e:	f242 03cf 	movw	r3, #8399	; 0x20cf
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b12:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 8399;
 8002b14:	e9c5 a300 	strd	sl, r3, [r5]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b18:	f003 f928 	bl	8005d6c <HAL_TIM_Base_Init>
 8002b1c:	b350      	cbz	r0, 8002b74 <main+0x354>
 8002b1e:	b672      	cpsid	i
	while (1)
 8002b20:	e7fe      	b.n	8002b20 <main+0x300>
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	20002be0 	.word	0x20002be0
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40020400 	.word	0x40020400
 8002b38:	000186a0 	.word	0x000186a0
 8002b3c:	40005400 	.word	0x40005400
 8002b40:	20002c8c 	.word	0x20002c8c
 8002b44:	40003800 	.word	0x40003800
 8002b48:	20002ee8 	.word	0x20002ee8
 8002b4c:	40004400 	.word	0x40004400
 8002b50:	40012000 	.word	0x40012000
 8002b54:	0f000001 	.word	0x0f000001
 8002b58:	40013000 	.word	0x40013000
 8002b5c:	40003c00 	.word	0x40003c00
 8002b60:	20002dcc 	.word	0x20002dcc
 8002b64:	00094ed0 	.word	0x00094ed0
 8002b68:	20002b38 	.word	0x20002b38
 8002b6c:	20002c34 	.word	0x20002c34
 8002b70:	20002ce4 	.word	0x20002ce4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b74:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b78:	4897      	ldr	r0, [pc, #604]	; (8002dd8 <main+0x5b8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7a:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b7c:	a90e      	add	r1, sp, #56	; 0x38
 8002b7e:	f003 fb45 	bl	800620c <HAL_TIM_ConfigClockSource>
 8002b82:	b108      	cbz	r0, 8002b88 <main+0x368>
 8002b84:	b672      	cpsid	i
	while (1)
 8002b86:	e7fe      	b.n	8002b86 <main+0x366>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b88:	4893      	ldr	r0, [pc, #588]	; (8002dd8 <main+0x5b8>)
 8002b8a:	a90a      	add	r1, sp, #40	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8c:	f04f 0a00 	mov.w	sl, #0
 8002b90:	f04f 0b00 	mov.w	fp, #0
 8002b94:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b98:	f003 fc9e 	bl	80064d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	b108      	cbz	r0, 8002ba4 <main+0x384>
 8002ba0:	b672      	cpsid	i
	while (1)
 8002ba2:	e7fe      	b.n	8002ba2 <main+0x382>
  huart1.Instance = USART1;
 8002ba4:	488d      	ldr	r0, [pc, #564]	; (8002ddc <main+0x5bc>)
  huart1.Init.BaudRate = 115200;
 8002ba6:	4c8e      	ldr	r4, [pc, #568]	; (8002de0 <main+0x5c0>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ba8:	6103      	str	r3, [r0, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002baa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bae:	61c3      	str	r3, [r0, #28]
  huart1.Init.BaudRate = 115200;
 8002bb0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002bb4:	e9c0 4300 	strd	r4, r3, [r0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002bb8:	f04f 0c0c 	mov.w	ip, #12
 8002bbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bc0:	e9c0 c305 	strd	ip, r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bc4:	f003 fcc4 	bl	8006550 <HAL_UART_Init>
 8002bc8:	b108      	cbz	r0, 8002bce <main+0x3ae>
 8002bca:	b672      	cpsid	i
	while (1)
 8002bcc:	e7fe      	b.n	8002bcc <main+0x3ac>
  htim3.Instance = TIM3;
 8002bce:	4c85      	ldr	r4, [pc, #532]	; (8002de4 <main+0x5c4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd0:	9008      	str	r0, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd2:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8002bd6:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bda:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002bde:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8002be2:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
 8002be6:	9014      	str	r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be8:	9009      	str	r0, [sp, #36]	; 0x24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bea:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bec:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bee:	61a0      	str	r0, [r4, #24]
  htim3.Init.Prescaler = 8399;
 8002bf0:	487d      	ldr	r0, [pc, #500]	; (8002de8 <main+0x5c8>)
 8002bf2:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8002bf6:	e9c4 0300 	strd	r0, r3, [r4]
  htim3.Init.Period = 1000;
 8002bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bfe:	4620      	mov	r0, r4
  htim3.Init.Period = 1000;
 8002c00:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c02:	f003 f8b3 	bl	8005d6c <HAL_TIM_Base_Init>
 8002c06:	b108      	cbz	r0, 8002c0c <main+0x3ec>
 8002c08:	b672      	cpsid	i
	while (1)
 8002c0a:	e7fe      	b.n	8002c0a <main+0x3ea>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c0c:	a90a      	add	r1, sp, #40	; 0x28
 8002c0e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c10:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c12:	f003 fafb 	bl	800620c <HAL_TIM_ConfigClockSource>
 8002c16:	b108      	cbz	r0, 8002c1c <main+0x3fc>
 8002c18:	b672      	cpsid	i
	while (1)
 8002c1a:	e7fe      	b.n	8002c1a <main+0x3fa>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f003 f971 	bl	8005f04 <HAL_TIM_PWM_Init>
 8002c22:	b108      	cbz	r0, 8002c28 <main+0x408>
 8002c24:	b672      	cpsid	i
	while (1)
 8002c26:	e7fe      	b.n	8002c26 <main+0x406>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c28:	a908      	add	r1, sp, #32
 8002c2a:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2c:	e9cd ab08 	strd	sl, fp, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c30:	f003 fc52 	bl	80064d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c34:	4602      	mov	r2, r0
 8002c36:	b108      	cbz	r0, 8002c3c <main+0x41c>
 8002c38:	b672      	cpsid	i
	while (1)
 8002c3a:	e7fe      	b.n	8002c3a <main+0x41a>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c3c:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c3e:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c40:	f04f 0a60 	mov.w	sl, #96	; 0x60
 8002c44:	f04f 0b00 	mov.w	fp, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c48:	a90e      	add	r1, sp, #56	; 0x38
 8002c4a:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c4c:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c50:	f003 f9d6 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 8002c54:	b108      	cbz	r0, 8002c5a <main+0x43a>
 8002c56:	b672      	cpsid	i
	while (1)
 8002c58:	e7fe      	b.n	8002c58 <main+0x438>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	a90e      	add	r1, sp, #56	; 0x38
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f003 f9ce 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 8002c64:	b108      	cbz	r0, 8002c6a <main+0x44a>
 8002c66:	b672      	cpsid	i
	while (1)
 8002c68:	e7fe      	b.n	8002c68 <main+0x448>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	a90e      	add	r1, sp, #56	; 0x38
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f003 f9c6 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 8002c74:	b108      	cbz	r0, 8002c7a <main+0x45a>
 8002c76:	b672      	cpsid	i
	while (1)
 8002c78:	e7fe      	b.n	8002c78 <main+0x458>
  htim10.Instance = TIM10;
 8002c7a:	4f5c      	ldr	r7, [pc, #368]	; (8002dec <main+0x5cc>)
  HAL_TIM_MspPostInit(&htim3);
 8002c7c:	4859      	ldr	r0, [pc, #356]	; (8002de4 <main+0x5c4>)
 8002c7e:	f000 fab7 	bl	80031f0 <HAL_TIM_MspPostInit>
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	f242 0bcf 	movw	fp, #8399	; 0x20cf
 8002c86:	2300      	movs	r3, #0
 8002c88:	e9c7 b301 	strd	fp, r3, [r7, #4]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8c:	613b      	str	r3, [r7, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8e:	61bb      	str	r3, [r7, #24]
  htim10.Instance = TIM10;
 8002c90:	4b57      	ldr	r3, [pc, #348]	; (8002df0 <main+0x5d0>)
 8002c92:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002c94:	4638      	mov	r0, r7
  htim10.Init.Period = 20000;
 8002c96:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002c9c:	f003 f866 	bl	8005d6c <HAL_TIM_Base_Init>
 8002ca0:	b108      	cbz	r0, 8002ca6 <main+0x486>
 8002ca2:	b672      	cpsid	i
	while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <main+0x484>
  htim4.Instance = TIM4;
 8002ca6:	f8df a188 	ldr.w	sl, [pc, #392]	; 8002e30 <main+0x610>
 8002caa:	4b52      	ldr	r3, [pc, #328]	; (8002df4 <main+0x5d4>)
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cac:	f8ca 0010 	str.w	r0, [sl, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb0:	e9ca b001 	strd	fp, r0, [sl, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb4:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002cb8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cbc:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc0:	f8ca 0018 	str.w	r0, [sl, #24]
  htim4.Init.Period = 1000;
 8002cc4:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cc8:	4650      	mov	r0, sl
  htim4.Instance = TIM4;
 8002cca:	f8ca 3000 	str.w	r3, [sl]
  htim4.Init.Period = 1000;
 8002cce:	f8ca b00c 	str.w	fp, [sl, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cd2:	f003 f84b 	bl	8005d6c <HAL_TIM_Base_Init>
 8002cd6:	b108      	cbz	r0, 8002cdc <main+0x4bc>
 8002cd8:	b672      	cpsid	i
	while (1)
 8002cda:	e7fe      	b.n	8002cda <main+0x4ba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ce0:	a90e      	add	r1, sp, #56	; 0x38
 8002ce2:	4650      	mov	r0, sl
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ce6:	f003 fa91 	bl	800620c <HAL_TIM_ConfigClockSource>
 8002cea:	b108      	cbz	r0, 8002cf0 <main+0x4d0>
 8002cec:	b672      	cpsid	i
	while (1)
 8002cee:	e7fe      	b.n	8002cee <main+0x4ce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cf4:	a90a      	add	r1, sp, #40	; 0x28
 8002cf6:	4650      	mov	r0, sl
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cfc:	f003 fbec 	bl	80064d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b108      	cbz	r0, 8002d08 <main+0x4e8>
 8002d04:	b672      	cpsid	i
	while (1)
 8002d06:	e7fe      	b.n	8002d06 <main+0x4e6>
  htim11.Instance = TIM11;
 8002d08:	483b      	ldr	r0, [pc, #236]	; (8002df8 <main+0x5d8>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0a:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0e:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d10:	6183      	str	r3, [r0, #24]
  htim11.Instance = TIM11;
 8002d12:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <main+0x5dc>)
 8002d14:	6003      	str	r3, [r0, #0]
  htim11.Init.Period = 65535;
 8002d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d1a:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d1c:	f003 f826 	bl	8005d6c <HAL_TIM_Base_Init>
 8002d20:	b108      	cbz	r0, 8002d26 <main+0x506>
 8002d22:	b672      	cpsid	i
	while (1)
 8002d24:	e7fe      	b.n	8002d24 <main+0x504>
	FIX_TIMER_TRIGGER(&htim2);
 8002d26:	682d      	ldr	r5, [r5, #0]
	FIX_TIMER_TRIGGER(&htim10);
 8002d28:	6839      	ldr	r1, [r7, #0]
	FIX_TIMER_TRIGGER(&htim3);
 8002d2a:	6824      	ldr	r4, [r4, #0]
 8002d2c:	9001      	str	r0, [sp, #4]
	FIX_TIMER_TRIGGER(&htim2);
 8002d2e:	f06f 0201 	mvn.w	r2, #1
	FIX_TIMER_TRIGGER(&htim4);
 8002d32:	f8da 0000 	ldr.w	r0, [sl]
	FIX_TIMER_TRIGGER(&htim2);
 8002d36:	612a      	str	r2, [r5, #16]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002d38:	4d31      	ldr	r5, [pc, #196]	; (8002e00 <main+0x5e0>)
	FIX_TIMER_TRIGGER(&htim3);
 8002d3a:	6122      	str	r2, [r4, #16]
	FIX_TIMER_TRIGGER(&htim4);
 8002d3c:	6102      	str	r2, [r0, #16]
	FIX_TIMER_TRIGGER(&htim10);
 8002d3e:	610a      	str	r2, [r1, #16]
	HAL_TIM_Base_Start_IT(&htim2);
 8002d40:	4825      	ldr	r0, [pc, #148]	; (8002dd8 <main+0x5b8>)
 8002d42:	f003 f891 	bl	8005e68 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002d46:	2201      	movs	r2, #1
 8002d48:	2110      	movs	r1, #16
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	f001 fc12 	bl	8004574 <HAL_GPIO_WritePin>
	uint8_t buf[1] = { 0x00 }; // dummy write
 8002d50:	9b01      	ldr	r3, [sp, #4]
 8002d52:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8002d56:	a90e      	add	r1, sp, #56	; 0x38
 8002d58:	2201      	movs	r2, #1
 8002d5a:	2364      	movs	r3, #100	; 0x64
 8002d5c:	4829      	ldr	r0, [pc, #164]	; (8002e04 <main+0x5e4>)
 8002d5e:	f002 fd65 	bl	800582c <HAL_SPI_Transmit>
	ov5462.hi2c = &hi2c1;
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <main+0x5e8>)
	printf("program start!\r\n");
 8002d64:	4829      	ldr	r0, [pc, #164]	; (8002e0c <main+0x5ec>)
	ov5462.hspi = &CAMERA_SPI;
 8002d66:	e9c3 6900 	strd	r6, r9, [r3]
	printf("program start!\r\n");
 8002d6a:	f006 feb5 	bl	8009ad8 <puts>
	HAL_Delay(1000);
 8002d6e:	4658      	mov	r0, fp
 8002d70:	f000 fe5c 	bl	8003a2c <HAL_Delay>
	if(testSD()) {
 8002d74:	f7ff fbd2 	bl	800251c <testSD>
 8002d78:	bb38      	cbnz	r0, 8002dca <main+0x5aa>
		printf("SD test PASS!\r\n");
 8002d7a:	4825      	ldr	r0, [pc, #148]	; (8002e10 <main+0x5f0>)
	audio.fs = &fs;
 8002d7c:	4c25      	ldr	r4, [pc, #148]	; (8002e14 <main+0x5f4>)
		printf("SD test PASS!\r\n");
 8002d7e:	f006 feab 	bl	8009ad8 <puts>
	XBee_Init();
 8002d82:	f000 fd67 	bl	8003854 <XBee_Init>
	Headlamp_Init();
 8002d86:	f7ff fbc1 	bl	800250c <Headlamp_Init>
	Input_Init();
 8002d8a:	f7fe fa9f 	bl	80012cc <Input_Init>
	XBee_Handshake();
 8002d8e:	f000 fd13 	bl	80037b8 <XBee_Handshake>
	ext_dac.cs_port = GPIOD;
 8002d92:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <main+0x5f8>)
 8002d94:	4a21      	ldr	r2, [pc, #132]	; (8002e1c <main+0x5fc>)
 8002d96:	605a      	str	r2, [r3, #4]
	ext_dac.cs_pin = GPIO_PIN_2;
 8002d98:	2204      	movs	r2, #4
 8002d9a:	811a      	strh	r2, [r3, #8]
	audio.amp_enable_pin = GPIO_PIN_5;
 8002d9c:	2220      	movs	r2, #32
	ext_dac.hspi = &hspi3;
 8002d9e:	f8c3 8000 	str.w	r8, [r3]
	audio.ext_dac = &ext_dac;
 8002da2:	60a3      	str	r3, [r4, #8]
	audio.amp_enable_pin = GPIO_PIN_5;
 8002da4:	f8a4 2856 	strh.w	r2, [r4, #2134]	; 0x856
	audio.fil = &fil;
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <main+0x600>)
	audio.fs = &fs;
 8002daa:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <main+0x604>)
	audio.htim = &htim4;
 8002dac:	f8c4 a00c 	str.w	sl, [r4, #12]
	audio_init(&audio);
 8002db0:	4620      	mov	r0, r4
	audio.fil = &fil;
 8002db2:	e9c4 2300 	strd	r2, r3, [r4]
	audio.amp_enable_port = GPIOC;
 8002db6:	6125      	str	r5, [r4, #16]
	audio_init(&audio);
 8002db8:	f7fe f8b0 	bl	8000f1c <audio_init>
	init_complete = 1;
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <main+0x608>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
		check_and_fill_audio_buf(&audio);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f7fe f8b6 	bl	8000f34 <check_and_fill_audio_buf>
	while (1)
 8002dc8:	e7fb      	b.n	8002dc2 <main+0x5a2>
		printf("SD test FAIL!\r\n");
 8002dca:	4818      	ldr	r0, [pc, #96]	; (8002e2c <main+0x60c>)
 8002dcc:	f006 fe84 	bl	8009ad8 <puts>
}
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	b017      	add	sp, #92	; 0x5c
 8002dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dd8:	20002dcc 	.word	0x20002dcc
 8002ddc:	20002ea4 	.word	0x20002ea4
 8002de0:	40011000 	.word	0x40011000
 8002de4:	20002e14 	.word	0x20002e14
 8002de8:	40000400 	.word	0x40000400
 8002dec:	20002d3c 	.word	0x20002d3c
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40000800 	.word	0x40000800
 8002df8:	20002d84 	.word	0x20002d84
 8002dfc:	40014800 	.word	0x40014800
 8002e00:	40020800 	.word	0x40020800
 8002e04:	20002c34 	.word	0x20002c34
 8002e08:	20002f34 	.word	0x20002f34
 8002e0c:	0800bccc 	.word	0x0800bccc
 8002e10:	0800bcec 	.word	0x0800bcec
 8002e14:	20000224 	.word	0x20000224
 8002e18:	20000abc 	.word	0x20000abc
 8002e1c:	40020c00 	.word	0x40020c00
 8002e20:	20000ac8 	.word	0x20000ac8
 8002e24:	20001b00 	.word	0x20001b00
 8002e28:	20002f2c 	.word	0x20002f2c
 8002e2c:	0800bcdc 	.word	0x0800bcdc
 8002e30:	20002e5c 	.word	0x20002e5c

08002e34 <__io_putchar>:
{
 8002e34:	b500      	push	{lr}
 8002e36:	b083      	sub	sp, #12
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8002e3c:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002e3e:	2201      	movs	r2, #1
 8002e40:	a901      	add	r1, sp, #4
 8002e42:	4803      	ldr	r0, [pc, #12]	; (8002e50 <__io_putchar+0x1c>)
 8002e44:	f003 fc1e 	bl	8006684 <HAL_UART_Transmit>
}
 8002e48:	9801      	ldr	r0, [sp, #4]
 8002e4a:	b003      	add	sp, #12
 8002e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e50:	20002ee8 	.word	0x20002ee8

08002e54 <Error_Handler>:
 8002e54:	b672      	cpsid	i
	while (1)
 8002e56:	e7fe      	b.n	8002e56 <Error_Handler+0x2>

08002e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e58:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <HAL_MspInit+0x38>)
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	9100      	str	r1, [sp, #0]
 8002e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44
 8002e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e6a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e6e:	9200      	str	r2, [sp, #0]
 8002e70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	9101      	str	r1, [sp, #4]
 8002e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002e86:	2005      	movs	r0, #5
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e88:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002e8a:	f001 b841 	b.w	8003f10 <HAL_NVIC_SetPriorityGrouping>
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800

08002e94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e94:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002e96:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <HAL_ADC_MspInit+0x98>)
 8002e98:	6802      	ldr	r2, [r0, #0]
{
 8002e9a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8002e9e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002ea4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002ea8:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8002eaa:	d001      	beq.n	8002eb0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eac:	b008      	add	sp, #32
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eb0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002eb4:	9400      	str	r4, [sp, #0]
 8002eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8002eb8:	4e1d      	ldr	r6, [pc, #116]	; (8002f30 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
 8002ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002ec6:	9200      	str	r2, [sp, #0]
 8002ec8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eca:	9401      	str	r4, [sp, #4]
 8002ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_Pin|ULTRA_LEFT_ADC_Pin|ULTRA_CENTER_ADC_Pin;
 8002edc:	2213      	movs	r2, #19
 8002ede:	2303      	movs	r3, #3
 8002ee0:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee2:	a902      	add	r1, sp, #8
 8002ee4:	4813      	ldr	r0, [pc, #76]	; (8002f34 <HAL_ADC_MspInit+0xa0>)
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_Pin|ULTRA_LEFT_ADC_Pin|ULTRA_CENTER_ADC_Pin;
 8002ee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eec:	f001 fa50 	bl	8004390 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ef2:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ef8:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002efc:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002efe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f06:	e9c6 2305 	strd	r2, r3, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f0a:	4630      	mov	r0, r6
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f10:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f14:	e9c6 3407 	strd	r3, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f18:	f001 f872 	bl	8004000 <HAL_DMA_Init>
 8002f1c:	b918      	cbnz	r0, 8002f26 <HAL_ADC_MspInit+0x92>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f1e:	63ae      	str	r6, [r5, #56]	; 0x38
 8002f20:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8002f22:	b008      	add	sp, #32
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002f26:	f7ff ff95 	bl	8002e54 <Error_Handler>
 8002f2a:	e7f8      	b.n	8002f1e <HAL_ADC_MspInit+0x8a>
 8002f2c:	40012000 	.word	0x40012000
 8002f30:	20002b80 	.word	0x20002b80
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40026410 	.word	0x40026410

08002f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f3c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_I2C_MspInit+0x64>)
 8002f40:	6802      	ldr	r2, [r0, #0]
{
 8002f42:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8002f46:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002f4c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002f50:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 8002f52:	d001      	beq.n	8002f58 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f54:	b009      	add	sp, #36	; 0x24
 8002f56:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f58:	4d12      	ldr	r5, [pc, #72]	; (8002fa4 <HAL_I2C_MspInit+0x68>)
 8002f5a:	9400      	str	r4, [sp, #0]
 8002f5c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5e:	4812      	ldr	r0, [pc, #72]	; (8002fa8 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	632b      	str	r3, [r5, #48]	; 0x30
 8002f66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f72:	2312      	movs	r3, #18
 8002f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f7e:	2304      	movs	r3, #4
 8002f80:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f82:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f84:	f001 fa04 	bl	8004390 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f88:	9401      	str	r4, [sp, #4]
 8002f8a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f90:	642b      	str	r3, [r5, #64]	; 0x40
 8002f92:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	9b01      	ldr	r3, [sp, #4]
}
 8002f9c:	b009      	add	sp, #36	; 0x24
 8002f9e:	bd30      	pop	{r4, r5, pc}
 8002fa0:	40005400 	.word	0x40005400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020400 	.word	0x40020400

08002fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fac:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8002fae:	6802      	ldr	r2, [r0, #0]
 8002fb0:	4949      	ldr	r1, [pc, #292]	; (80030d8 <HAL_SPI_MspInit+0x12c>)
{
 8002fb2:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb4:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8002fb6:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8002fbc:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8002fc0:	930c      	str	r3, [sp, #48]	; 0x30
  if(hspi->Instance==SPI1)
 8002fc2:	d007      	beq.n	8002fd4 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8002fc4:	4945      	ldr	r1, [pc, #276]	; (80030dc <HAL_SPI_MspInit+0x130>)
 8002fc6:	428a      	cmp	r2, r1
 8002fc8:	d027      	beq.n	800301a <HAL_SPI_MspInit+0x6e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8002fca:	4945      	ldr	r1, [pc, #276]	; (80030e0 <HAL_SPI_MspInit+0x134>)
 8002fcc:	428a      	cmp	r2, r1
 8002fce:	d05f      	beq.n	8003090 <HAL_SPI_MspInit+0xe4>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002fd0:	b00e      	add	sp, #56	; 0x38
 8002fd2:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fd4:	4a43      	ldr	r2, [pc, #268]	; (80030e4 <HAL_SPI_MspInit+0x138>)
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002fda:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8002fde:	6450      	str	r0, [r2, #68]	; 0x44
 8002fe0:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002fe2:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8002fe6:	9001      	str	r0, [sp, #4]
 8002fe8:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	9302      	str	r3, [sp, #8]
 8002fec:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fee:	483e      	ldr	r0, [pc, #248]	; (80030e8 <HAL_SPI_MspInit+0x13c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003000:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003002:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = CAM_SCK_Pin|CAM_MISO_Pin|CAM_MOSI_Pin;
 8003004:	26e0      	movs	r6, #224	; 0xe0
 8003006:	2702      	movs	r7, #2
 8003008:	e9cd 6708 	strd	r6, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800300c:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003010:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003012:	f001 f9bd 	bl	8004390 <HAL_GPIO_Init>
}
 8003016:	b00e      	add	sp, #56	; 0x38
 8003018:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800301a:	4a32      	ldr	r2, [pc, #200]	; (80030e4 <HAL_SPI_MspInit+0x138>)
 800301c:	9303      	str	r3, [sp, #12]
 800301e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003020:	4832      	ldr	r0, [pc, #200]	; (80030ec <HAL_SPI_MspInit+0x140>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003022:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003026:	6411      	str	r1, [r2, #64]	; 0x40
 8003028:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800302a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800302e:	9103      	str	r1, [sp, #12]
 8003030:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003032:	9304      	str	r3, [sp, #16]
 8003034:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003036:	f041 0104 	orr.w	r1, r1, #4
 800303a:	6311      	str	r1, [r2, #48]	; 0x30
 800303c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800303e:	f001 0104 	and.w	r1, r1, #4
 8003042:	9104      	str	r1, [sp, #16]
 8003044:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003046:	9305      	str	r3, [sp, #20]
 8003048:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	6313      	str	r3, [r2, #48]	; 0x30
 8003050:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003058:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800305a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = SD_MISO_Pin|SD_MOSI_Pin;
 800305c:	220c      	movs	r2, #12
 800305e:	2601      	movs	r6, #1
 8003060:	2703      	movs	r7, #3
 8003062:	2302      	movs	r3, #2
 8003064:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003068:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800306e:	940c      	str	r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003070:	f001 f98e 	bl	8004390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8003074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003078:	2302      	movs	r3, #2
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800307a:	481d      	ldr	r0, [pc, #116]	; (80030f0 <HAL_SPI_MspInit+0x144>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800307c:	940c      	str	r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800307e:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8003080:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8003084:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003088:	f001 f982 	bl	8004390 <HAL_GPIO_Init>
}
 800308c:	b00e      	add	sp, #56	; 0x38
 800308e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_SPI_MspInit+0x138>)
 8003092:	9306      	str	r3, [sp, #24]
 8003094:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003096:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800309a:	6410      	str	r0, [r2, #64]	; 0x40
 800309c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800309e:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 80030a2:	9006      	str	r0, [sp, #24]
 80030a4:	9806      	ldr	r0, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a6:	9307      	str	r3, [sp, #28]
 80030a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030aa:	4810      	ldr	r0, [pc, #64]	; (80030ec <HAL_SPI_MspInit+0x140>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ba:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030bc:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030be:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = DAC_SCK_Pin|DAC_MOSI_Pin;
 80030c0:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 80030c4:	2702      	movs	r7, #2
 80030c6:	e9cd 6708 	strd	r6, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030ca:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	9c07      	ldr	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d0:	f001 f95e 	bl	8004390 <HAL_GPIO_Init>
}
 80030d4:	b00e      	add	sp, #56	; 0x38
 80030d6:	bdd0      	pop	{r4, r6, r7, pc}
 80030d8:	40013000 	.word	0x40013000
 80030dc:	40003800 	.word	0x40003800
 80030e0:	40003c00 	.word	0x40003c00
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020400 	.word	0x40020400

080030f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030f4:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 80030f6:	6803      	ldr	r3, [r0, #0]
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80030fc:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 80030fe:	d01d      	beq.n	800313c <HAL_TIM_Base_MspInit+0x48>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003100:	4a35      	ldr	r2, [pc, #212]	; (80031d8 <HAL_TIM_Base_MspInit+0xe4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d031      	beq.n	800316a <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8003106:	4a35      	ldr	r2, [pc, #212]	; (80031dc <HAL_TIM_Base_MspInit+0xe8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d008      	beq.n	800311e <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 800310c:	4a34      	ldr	r2, [pc, #208]	; (80031e0 <HAL_TIM_Base_MspInit+0xec>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d050      	beq.n	80031b4 <HAL_TIM_Base_MspInit+0xc0>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8003112:	4a34      	ldr	r2, [pc, #208]	; (80031e4 <HAL_TIM_Base_MspInit+0xf0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d03e      	beq.n	8003196 <HAL_TIM_Base_MspInit+0xa2>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003118:	b007      	add	sp, #28
 800311a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 800311e:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <HAL_TIM_Base_MspInit+0xf4>)
 8003120:	2200      	movs	r2, #0
 8003122:	9203      	str	r2, [sp, #12]
 8003124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003126:	f042 0204 	orr.w	r2, r2, #4
 800312a:	641a      	str	r2, [r3, #64]	; 0x40
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	9303      	str	r3, [sp, #12]
 8003134:	9b03      	ldr	r3, [sp, #12]
}
 8003136:	b007      	add	sp, #28
 8003138:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800313c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003140:	2200      	movs	r2, #0
 8003142:	9201      	str	r2, [sp, #4]
 8003144:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003146:	f041 0101 	orr.w	r1, r1, #1
 800314a:	6419      	str	r1, [r3, #64]	; 0x40
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 0301 	and.w	r3, r3, #1
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003152:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003154:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003156:	2102      	movs	r1, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003158:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800315a:	f000 feeb 	bl	8003f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800315e:	201c      	movs	r0, #28
}
 8003160:	b007      	add	sp, #28
 8003162:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003166:	f000 bf23 	b.w	8003fb0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800316a:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <HAL_TIM_Base_MspInit+0xf4>)
 800316c:	2200      	movs	r2, #0
 800316e:	9202      	str	r2, [sp, #8]
 8003170:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003172:	f041 0102 	orr.w	r1, r1, #2
 8003176:	6419      	str	r1, [r3, #64]	; 0x40
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003180:	201d      	movs	r0, #29
 8003182:	2101      	movs	r1, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003184:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003186:	f000 fed5 	bl	8003f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800318a:	201d      	movs	r0, #29
}
 800318c:	b007      	add	sp, #28
 800318e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003192:	f000 bf0d 	b.w	8003fb0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_TIM_Base_MspInit+0xf4>)
 8003198:	2200      	movs	r2, #0
 800319a:	9205      	str	r2, [sp, #20]
 800319c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800319e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031aa:	9305      	str	r3, [sp, #20]
 80031ac:	9b05      	ldr	r3, [sp, #20]
}
 80031ae:	b007      	add	sp, #28
 80031b0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_TIM_Base_MspInit+0xf4>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	9204      	str	r2, [sp, #16]
 80031ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80031bc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80031c0:	6459      	str	r1, [r3, #68]	; 0x44
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80031c8:	2019      	movs	r0, #25
    __HAL_RCC_TIM10_CLK_ENABLE();
 80031ca:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80031cc:	2101      	movs	r1, #1
    __HAL_RCC_TIM10_CLK_ENABLE();
 80031ce:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80031d0:	f000 feb0 	bl	8003f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80031d4:	2019      	movs	r0, #25
 80031d6:	e7c3      	b.n	8003160 <HAL_TIM_Base_MspInit+0x6c>
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40000800 	.word	0x40000800
 80031e0:	40014400 	.word	0x40014400
 80031e4:	40014800 	.word	0x40014800
 80031e8:	40023800 	.word	0x40023800
 80031ec:	00000000 	.word	0x00000000

080031f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031f0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 80031f2:	4a15      	ldr	r2, [pc, #84]	; (8003248 <HAL_TIM_MspPostInit+0x58>)
 80031f4:	6801      	ldr	r1, [r0, #0]
{
 80031f6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 80031fa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003200:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003204:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM3)
 8003206:	d002      	beq.n	800320e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003208:	b009      	add	sp, #36	; 0x24
 800320a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320e:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003216:	480d      	ldr	r0, [pc, #52]	; (800324c <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = LEFT_HAPTIC_Pin|CENTER_HAPTIC_Pin|RIGHT_HAPTIC_Pin;
 8003220:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8003240 <HAL_TIM_MspPostInit+0x50>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800322c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = LEFT_HAPTIC_Pin|CENTER_HAPTIC_Pin|RIGHT_HAPTIC_Pin;
 800322e:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003232:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003234:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003236:	f001 f8ab 	bl	8004390 <HAL_GPIO_Init>
}
 800323a:	b009      	add	sp, #36	; 0x24
 800323c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003240:	000001c0 	.word	0x000001c0
 8003244:	00000002 	.word	0x00000002
 8003248:	40000400 	.word	0x40000400
 800324c:	40020800 	.word	0x40020800

08003250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003250:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8003252:	6802      	ldr	r2, [r0, #0]
 8003254:	492e      	ldr	r1, [pc, #184]	; (8003310 <HAL_UART_MspInit+0xc0>)
{
 8003256:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800325a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003260:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003264:	9308      	str	r3, [sp, #32]
  if(huart->Instance==USART1)
 8003266:	d004      	beq.n	8003272 <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8003268:	492a      	ldr	r1, [pc, #168]	; (8003314 <HAL_UART_MspInit+0xc4>)
 800326a:	428a      	cmp	r2, r1
 800326c:	d024      	beq.n	80032b8 <HAL_UART_MspInit+0x68>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800326e:	b00a      	add	sp, #40	; 0x28
 8003270:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003272:	4a29      	ldr	r2, [pc, #164]	; (8003318 <HAL_UART_MspInit+0xc8>)
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003278:	f040 0010 	orr.w	r0, r0, #16
 800327c:	6450      	str	r0, [r2, #68]	; 0x44
 800327e:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003280:	f000 0010 	and.w	r0, r0, #16
 8003284:	9000      	str	r0, [sp, #0]
 8003286:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328c:	4823      	ldr	r0, [pc, #140]	; (800331c <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6313      	str	r3, [r2, #48]	; 0x30
 8003294:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin|XBEE_CTS_Pin|XBEE_RTS_Pin;
 8003296:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8003300 <HAL_UART_MspInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a0:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032a2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin|XBEE_CTS_Pin|XBEE_RTS_Pin;
 80032a6:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032aa:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b0:	f001 f86e 	bl	8004390 <HAL_GPIO_Init>
}
 80032b4:	b00a      	add	sp, #40	; 0x28
 80032b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80032b8:	4a17      	ldr	r2, [pc, #92]	; (8003318 <HAL_UART_MspInit+0xc8>)
 80032ba:	9302      	str	r3, [sp, #8]
 80032bc:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80032be:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80032c2:	6410      	str	r0, [r2, #64]	; 0x40
 80032c4:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80032c6:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 80032ca:	9002      	str	r0, [sp, #8]
 80032cc:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	9303      	str	r3, [sp, #12]
 80032d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d2:	4812      	ldr	r0, [pc, #72]	; (800331c <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 80032dc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8003308 <HAL_UART_MspInit+0xb8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032e8:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 80032ea:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032f0:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f2:	f001 f84d 	bl	8004390 <HAL_GPIO_Init>
}
 80032f6:	b00a      	add	sp, #40	; 0x28
 80032f8:	bd10      	pop	{r4, pc}
 80032fa:	bf00      	nop
 80032fc:	f3af 8000 	nop.w
 8003300:	00001e00 	.word	0x00001e00
 8003304:	00000002 	.word	0x00000002
 8003308:	0000000c 	.word	0x0000000c
 800330c:	00000002 	.word	0x00000002
 8003310:	40011000 	.word	0x40011000
 8003314:	40004400 	.word	0x40004400
 8003318:	40023800 	.word	0x40023800
 800331c:	40020000 	.word	0x40020000

08003320 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003320:	e7fe      	b.n	8003320 <NMI_Handler>
 8003322:	bf00      	nop

08003324 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003324:	e7fe      	b.n	8003324 <HardFault_Handler>
 8003326:	bf00      	nop

08003328 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003328:	e7fe      	b.n	8003328 <MemManage_Handler>
 800332a:	bf00      	nop

0800332c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800332c:	e7fe      	b.n	800332c <BusFault_Handler>
 800332e:	bf00      	nop

08003330 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003330:	e7fe      	b.n	8003330 <UsageFault_Handler>
 8003332:	bf00      	nop

08003334 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop

08003338 <DebugMon_Handler>:
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop

0800333c <PendSV_Handler>:
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8003340:	4a0e      	ldr	r2, [pc, #56]	; (800337c <SysTick_Handler+0x3c>)
 8003342:	7813      	ldrb	r3, [r2, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	b2db      	uxtb	r3, r3
 8003348:	7013      	strb	r3, [r2, #0]

	if (FatFsCnt >= 10) {
 800334a:	7813      	ldrb	r3, [r2, #0]
 800334c:	2b09      	cmp	r3, #9
 800334e:	d801      	bhi.n	8003354 <SysTick_Handler+0x14>
		FatFsCnt = 0;
		SDTimer_Handler();
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003350:	f000 bb5a 	b.w	8003a08 <HAL_IncTick>
	if (Timer1 > 0) {
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <SysTick_Handler+0x40>)
		FatFsCnt = 0;
 8003356:	2100      	movs	r1, #0
 8003358:	7011      	strb	r1, [r2, #0]
	if (Timer1 > 0) {
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	b11a      	cbz	r2, 8003366 <SysTick_Handler+0x26>
		--Timer1;
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	3a01      	subs	r2, #1
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0) {
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <SysTick_Handler+0x44>)
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	2a00      	cmp	r2, #0
 800336c:	d0f0      	beq.n	8003350 <SysTick_Handler+0x10>
		--Timer2;
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	3a01      	subs	r2, #1
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]
  HAL_IncTick();
 8003376:	f000 bb47 	b.w	8003a08 <HAL_IncTick>
 800337a:	bf00      	nop
 800337c:	20002fb8 	.word	0x20002fb8
 8003380:	2000021e 	.word	0x2000021e
 8003384:	20000220 	.word	0x20000220

08003388 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003388:	4801      	ldr	r0, [pc, #4]	; (8003390 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800338a:	f002 bff7 	b.w	800637c <HAL_TIM_IRQHandler>
 800338e:	bf00      	nop
 8003390:	20002d3c 	.word	0x20002d3c

08003394 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003394:	4801      	ldr	r0, [pc, #4]	; (800339c <TIM2_IRQHandler+0x8>)
 8003396:	f002 bff1 	b.w	800637c <HAL_TIM_IRQHandler>
 800339a:	bf00      	nop
 800339c:	20002dcc 	.word	0x20002dcc

080033a0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <TIM3_IRQHandler+0x8>)
 80033a2:	f002 bfeb 	b.w	800637c <HAL_TIM_IRQHandler>
 80033a6:	bf00      	nop
 80033a8:	20002e14 	.word	0x20002e14

080033ac <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80033ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033b0:	f001 b8e4 	b.w	800457c <HAL_GPIO_EXTI_IRQHandler>

080033b4 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <DMA2_Stream0_IRQHandler+0x8>)
 80033b6:	f000 befb 	b.w	80041b0 <HAL_DMA_IRQHandler>
 80033ba:	bf00      	nop
 80033bc:	20002b80 	.word	0x20002b80

080033c0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80033c0:	2001      	movs	r0, #1
 80033c2:	4770      	bx	lr

080033c4 <_kill>:

int _kill(int pid, int sig)
{
 80033c4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80033c6:	f005 fd51 	bl	8008e6c <__errno>
 80033ca:	2316      	movs	r3, #22
 80033cc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80033ce:	f04f 30ff 	mov.w	r0, #4294967295
 80033d2:	bd08      	pop	{r3, pc}

080033d4 <_exit>:

void _exit (int status)
{
 80033d4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80033d6:	f005 fd49 	bl	8008e6c <__errno>
 80033da:	2316      	movs	r3, #22
 80033dc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80033de:	e7fe      	b.n	80033de <_exit+0xa>

080033e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033e0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e2:	1e16      	subs	r6, r2, #0
 80033e4:	dd07      	ble.n	80033f6 <_read+0x16>
 80033e6:	460c      	mov	r4, r1
 80033e8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80033ea:	f3af 8000 	nop.w
 80033ee:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f2:	42a5      	cmp	r5, r4
 80033f4:	d1f9      	bne.n	80033ea <_read+0xa>
	}

return len;
}
 80033f6:	4630      	mov	r0, r6
 80033f8:	bd70      	pop	{r4, r5, r6, pc}
 80033fa:	bf00      	nop

080033fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033fc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fe:	1e16      	subs	r6, r2, #0
 8003400:	dd07      	ble.n	8003412 <_write+0x16>
 8003402:	460c      	mov	r4, r1
 8003404:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003406:	f814 0b01 	ldrb.w	r0, [r4], #1
 800340a:	f7ff fd13 	bl	8002e34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340e:	42ac      	cmp	r4, r5
 8003410:	d1f9      	bne.n	8003406 <_write+0xa>
	}
	return len;
}
 8003412:	4630      	mov	r0, r6
 8003414:	bd70      	pop	{r4, r5, r6, pc}
 8003416:	bf00      	nop

08003418 <_close>:

int _close(int file)
{
	return -1;
}
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop

08003420 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003424:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003426:	2000      	movs	r0, #0
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop

0800342c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800342c:	2001      	movs	r0, #1
 800342e:	4770      	bx	lr

08003430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003430:	2000      	movs	r0, #0
 8003432:	4770      	bx	lr

08003434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003434:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003436:	4c0c      	ldr	r4, [pc, #48]	; (8003468 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <_sbrk+0x38>)
 800343a:	490d      	ldr	r1, [pc, #52]	; (8003470 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800343c:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800343e:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8003440:	b12a      	cbz	r2, 800344e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003442:	4410      	add	r0, r2
 8003444:	4288      	cmp	r0, r1
 8003446:	d807      	bhi.n	8003458 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003448:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 800344a:	4610      	mov	r0, r2
 800344c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <_sbrk+0x40>)
 8003450:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003452:	4410      	add	r0, r2
 8003454:	4288      	cmp	r0, r1
 8003456:	d9f7      	bls.n	8003448 <_sbrk+0x14>
    errno = ENOMEM;
 8003458:	f005 fd08 	bl	8008e6c <__errno>
 800345c:	230c      	movs	r3, #12
    return (void *)-1;
 800345e:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8003462:	6003      	str	r3, [r0, #0]
}
 8003464:	4610      	mov	r0, r2
 8003466:	bd10      	pop	{r4, pc}
 8003468:	20002fbc 	.word	0x20002fbc
 800346c:	20018000 	.word	0x20018000
 8003470:	00000400 	.word	0x00000400
 8003474:	200030b8 	.word	0x200030b8

08003478 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003478:	4a03      	ldr	r2, [pc, #12]	; (8003488 <SystemInit+0x10>)
 800347a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800347e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003482:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <XBee_Transmit_File>:
	}
	printf("Already transmitting file\n");
	return -1;
}

void XBee_Transmit_File() {
 800348c:	b508      	push	{r3, lr}
	printf("Transmitting file\n");
 800348e:	4807      	ldr	r0, [pc, #28]	; (80034ac <XBee_Transmit_File+0x20>)
 8003490:	f006 fb22 	bl	8009ad8 <puts>
	HAL_UART_Transmit_DMA(XBEE_UART, file_buf, fsize);
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <XBee_Transmit_File+0x24>)
 8003496:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <XBee_Transmit_File+0x28>)
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	8812      	ldrh	r2, [r2, #0]
 800349c:	4806      	ldr	r0, [pc, #24]	; (80034b8 <XBee_Transmit_File+0x2c>)
 800349e:	f003 f99f 	bl	80067e0 <HAL_UART_Transmit_DMA>
	transmitting_file = 2;
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <XBee_Transmit_File+0x30>)
 80034a4:	2202      	movs	r2, #2
 80034a6:	601a      	str	r2, [r3, #0]
}
 80034a8:	bd08      	pop	{r3, pc}
 80034aa:	bf00      	nop
 80034ac:	0800bd68 	.word	0x0800bd68
 80034b0:	20003034 	.word	0x20003034
 80034b4:	20003038 	.word	0x20003038
 80034b8:	20002ea4 	.word	0x20002ea4
 80034bc:	20003064 	.word	0x20003064

080034c0 <XBee_Resolve>:
	} else {
		printf("Already receiving file\n");
	}
}

void XBee_Resolve() {
 80034c0:	b570      	push	{r4, r5, r6, lr}
	if (XBee_Received.command == ReceiveFile) {
 80034c2:	4c76      	ldr	r4, [pc, #472]	; (800369c <XBee_Resolve+0x1dc>)
 80034c4:	7823      	ldrb	r3, [r4, #0]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d011      	beq.n	80034ee <XBee_Resolve+0x2e>
		printf("Preparing to receive file\n");
		rsize = *((FSIZE_t *) XBee_Received.data);
		strcpy(rpath, (TCHAR *) &XBee_Received.data[sizeof(FSIZE_t)]);
		is_receive_target = XBee_Received.target == 0 || XBee_Received.target == UID;
		XBee_Receive_File();
	} else if (XBee_Received.target == 0 || XBee_Received.target == UID) {
 80034ca:	68a2      	ldr	r2, [r4, #8]
 80034cc:	b952      	cbnz	r2, 80034e4 <XBee_Resolve+0x24>
		switch (XBee_Received.command) {
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	f200 80ca 	bhi.w	8003668 <XBee_Resolve+0x1a8>
 80034d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80034d8:	004d003f 	.word	0x004d003f
 80034dc:	00b2008e 	.word	0x00b2008e
 80034e0:	00c300c8 	.word	0x00c300c8
	} else if (XBee_Received.target == 0 || XBee_Received.target == UID) {
 80034e4:	496e      	ldr	r1, [pc, #440]	; (80036a0 <XBee_Resolve+0x1e0>)
 80034e6:	6809      	ldr	r1, [r1, #0]
 80034e8:	428a      	cmp	r2, r1
 80034ea:	d0f0      	beq.n	80034ce <XBee_Resolve+0xe>
		}
		if (!receiving_file) {
			XBee_Receive(&XBee_Received);
		}
	}
}
 80034ec:	bd70      	pop	{r4, r5, r6, pc}
		printf("Preparing to receive file\n");
 80034ee:	486d      	ldr	r0, [pc, #436]	; (80036a4 <XBee_Resolve+0x1e4>)
		rsize = *((FSIZE_t *) XBee_Received.data);
 80034f0:	4d6d      	ldr	r5, [pc, #436]	; (80036a8 <XBee_Resolve+0x1e8>)
		printf("Preparing to receive file\n");
 80034f2:	f006 faf1 	bl	8009ad8 <puts>
		rsize = *((FSIZE_t *) XBee_Received.data);
 80034f6:	68e3      	ldr	r3, [r4, #12]
		strcpy(rpath, (TCHAR *) &XBee_Received.data[sizeof(FSIZE_t)]);
 80034f8:	486c      	ldr	r0, [pc, #432]	; (80036ac <XBee_Resolve+0x1ec>)
		rsize = *((FSIZE_t *) XBee_Received.data);
 80034fa:	602b      	str	r3, [r5, #0]
		strcpy(rpath, (TCHAR *) &XBee_Received.data[sizeof(FSIZE_t)]);
 80034fc:	f104 0110 	add.w	r1, r4, #16
 8003500:	f006 fb02 	bl	8009b08 <strcpy>
		is_receive_target = XBee_Received.target == 0 || XBee_Received.target == UID;
 8003504:	68a2      	ldr	r2, [r4, #8]
 8003506:	b322      	cbz	r2, 8003552 <XBee_Resolve+0x92>
 8003508:	4b65      	ldr	r3, [pc, #404]	; (80036a0 <XBee_Resolve+0x1e0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	095b      	lsrs	r3, r3, #5
	if (!receiving_file) {
 8003514:	4c66      	ldr	r4, [pc, #408]	; (80036b0 <XBee_Resolve+0x1f0>)
		is_receive_target = XBee_Received.target == 0 || XBee_Received.target == UID;
 8003516:	4e67      	ldr	r6, [pc, #412]	; (80036b4 <XBee_Resolve+0x1f4>)
	if (!receiving_file) {
 8003518:	6822      	ldr	r2, [r4, #0]
		is_receive_target = XBee_Received.target == 0 || XBee_Received.target == UID;
 800351a:	6033      	str	r3, [r6, #0]
	if (!receiving_file) {
 800351c:	2a00      	cmp	r2, #0
 800351e:	f040 80a7 	bne.w	8003670 <XBee_Resolve+0x1b0>
		printf("Receiving file");
 8003522:	4865      	ldr	r0, [pc, #404]	; (80036b8 <XBee_Resolve+0x1f8>)
 8003524:	f006 fa3c 	bl	80099a0 <iprintf>
		if (!is_receive_target) {
 8003528:	6833      	ldr	r3, [r6, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80ae 	beq.w	800368c <XBee_Resolve+0x1cc>
		printf("\n");
 8003530:	200a      	movs	r0, #10
 8003532:	f006 fa4d 	bl	80099d0 <putchar>
		file_buf = (uint8_t *) malloc(rsize);
 8003536:	682d      	ldr	r5, [r5, #0]
 8003538:	4628      	mov	r0, r5
 800353a:	f005 fcc1 	bl	8008ec0 <malloc>
 800353e:	4b5f      	ldr	r3, [pc, #380]	; (80036bc <XBee_Resolve+0x1fc>)
		HAL_UART_Receive_DMA(XBEE_UART, file_buf, rsize);
 8003540:	4601      	mov	r1, r0
		file_buf = (uint8_t *) malloc(rsize);
 8003542:	6018      	str	r0, [r3, #0]
		HAL_UART_Receive_DMA(XBEE_UART, file_buf, rsize);
 8003544:	b2aa      	uxth	r2, r5
 8003546:	485e      	ldr	r0, [pc, #376]	; (80036c0 <XBee_Resolve+0x200>)
 8003548:	f003 fac6 	bl	8006ad8 <HAL_UART_Receive_DMA>
		receiving_file = 1;
 800354c:	2301      	movs	r3, #1
 800354e:	6023      	str	r3, [r4, #0]
}
 8003550:	bd70      	pop	{r4, r5, r6, pc}
		is_receive_target = XBee_Received.target == 0 || XBee_Received.target == UID;
 8003552:	2301      	movs	r3, #1
 8003554:	e7de      	b.n	8003514 <XBee_Resolve+0x54>
			printf("%s\n", (char *) XBee_Received.data);
 8003556:	485b      	ldr	r0, [pc, #364]	; (80036c4 <XBee_Resolve+0x204>)
 8003558:	f006 fabe 	bl	8009ad8 <puts>
		if (!receiving_file) {
 800355c:	4b54      	ldr	r3, [pc, #336]	; (80036b0 <XBee_Resolve+0x1f0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1c3      	bne.n	80034ec <XBee_Resolve+0x2c>
}
 8003564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8003568:	494c      	ldr	r1, [pc, #304]	; (800369c <XBee_Resolve+0x1dc>)
 800356a:	4855      	ldr	r0, [pc, #340]	; (80036c0 <XBee_Resolve+0x200>)
 800356c:	2270      	movs	r2, #112	; 0x70
 800356e:	f003 bab3 	b.w	8006ad8 <HAL_UART_Receive_DMA>
			if (num_registered_devices == MAX_DEVICES) {
 8003572:	4d55      	ldr	r5, [pc, #340]	; (80036c8 <XBee_Resolve+0x208>)
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	2b0a      	cmp	r3, #10
 8003578:	f000 808c 	beq.w	8003694 <XBee_Resolve+0x1d4>
			for (int i = 0; i < num_registered_devices; i++) {
 800357c:	2b00      	cmp	r3, #0
			uint32_t uid = *((uint32_t *) XBee_Received.data);
 800357e:	68e1      	ldr	r1, [r4, #12]
				if (devices[i] == uid) {
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <XBee_Resolve+0x20c>)
			for (int i = 0; i < num_registered_devices; i++) {
 8003582:	dd2f      	ble.n	80035e4 <XBee_Resolve+0x124>
				if (devices[i] == uid) {
 8003584:	6810      	ldr	r0, [r2, #0]
 8003586:	4281      	cmp	r1, r0
 8003588:	d07c      	beq.n	8003684 <XBee_Resolve+0x1c4>
			for (int i = 0; i < num_registered_devices; i++) {
 800358a:	2b01      	cmp	r3, #1
 800358c:	d02a      	beq.n	80035e4 <XBee_Resolve+0x124>
				if (devices[i] == uid) {
 800358e:	6850      	ldr	r0, [r2, #4]
 8003590:	4288      	cmp	r0, r1
 8003592:	d077      	beq.n	8003684 <XBee_Resolve+0x1c4>
			for (int i = 0; i < num_registered_devices; i++) {
 8003594:	2b02      	cmp	r3, #2
 8003596:	d025      	beq.n	80035e4 <XBee_Resolve+0x124>
				if (devices[i] == uid) {
 8003598:	6890      	ldr	r0, [r2, #8]
 800359a:	4288      	cmp	r0, r1
 800359c:	d072      	beq.n	8003684 <XBee_Resolve+0x1c4>
			for (int i = 0; i < num_registered_devices; i++) {
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d020      	beq.n	80035e4 <XBee_Resolve+0x124>
				if (devices[i] == uid) {
 80035a2:	68d0      	ldr	r0, [r2, #12]
 80035a4:	4281      	cmp	r1, r0
 80035a6:	d06d      	beq.n	8003684 <XBee_Resolve+0x1c4>
			for (int i = 0; i < num_registered_devices; i++) {
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d01b      	beq.n	80035e4 <XBee_Resolve+0x124>
				if (devices[i] == uid) {
 80035ac:	6910      	ldr	r0, [r2, #16]
 80035ae:	4288      	cmp	r0, r1
 80035b0:	d068      	beq.n	8003684 <XBee_Resolve+0x1c4>
			for (int i = 0; i < num_registered_devices; i++) {
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d016      	beq.n	80035e4 <XBee_Resolve+0x124>
				if (devices[i] == uid) {
 80035b6:	6950      	ldr	r0, [r2, #20]
 80035b8:	4288      	cmp	r0, r1
 80035ba:	d063      	beq.n	8003684 <XBee_Resolve+0x1c4>
			for (int i = 0; i < num_registered_devices; i++) {
 80035bc:	2b06      	cmp	r3, #6
 80035be:	d011      	beq.n	80035e4 <XBee_Resolve+0x124>
				if (devices[i] == uid) {
 80035c0:	6990      	ldr	r0, [r2, #24]
 80035c2:	4288      	cmp	r0, r1
 80035c4:	d05e      	beq.n	8003684 <XBee_Resolve+0x1c4>
			for (int i = 0; i < num_registered_devices; i++) {
 80035c6:	2b07      	cmp	r3, #7
 80035c8:	d00c      	beq.n	80035e4 <XBee_Resolve+0x124>
				if (devices[i] == uid) {
 80035ca:	69d0      	ldr	r0, [r2, #28]
 80035cc:	4281      	cmp	r1, r0
 80035ce:	d059      	beq.n	8003684 <XBee_Resolve+0x1c4>
			for (int i = 0; i < num_registered_devices; i++) {
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d007      	beq.n	80035e4 <XBee_Resolve+0x124>
				if (devices[i] == uid) {
 80035d4:	6a10      	ldr	r0, [r2, #32]
 80035d6:	4281      	cmp	r1, r0
 80035d8:	d054      	beq.n	8003684 <XBee_Resolve+0x1c4>
			for (int i = 0; i < num_registered_devices; i++) {
 80035da:	2b09      	cmp	r3, #9
 80035dc:	d002      	beq.n	80035e4 <XBee_Resolve+0x124>
				if (devices[i] == uid) {
 80035de:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80035e0:	4288      	cmp	r0, r1
 80035e2:	d04f      	beq.n	8003684 <XBee_Resolve+0x1c4>
			num_registered_devices++;
 80035e4:	1c5c      	adds	r4, r3, #1
			devices[num_registered_devices] = uid;
 80035e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			printf("Registered new device with UID %u\n", (unsigned int) uid);
 80035ea:	4839      	ldr	r0, [pc, #228]	; (80036d0 <XBee_Resolve+0x210>)
			num_registered_devices++;
 80035ec:	602c      	str	r4, [r5, #0]
			printf("Registered new device with UID %u\n", (unsigned int) uid);
 80035ee:	f006 f9d7 	bl	80099a0 <iprintf>
 80035f2:	e7b3      	b.n	800355c <XBee_Resolve+0x9c>
			printf("Sending device list\n");
 80035f4:	4837      	ldr	r0, [pc, #220]	; (80036d4 <XBee_Resolve+0x214>)
 80035f6:	f006 fa6f 	bl	8009ad8 <puts>
			*((int *) xbee_packet.data) = num_registered_devices;
 80035fa:	4a33      	ldr	r2, [pc, #204]	; (80036c8 <XBee_Resolve+0x208>)
			xbee_packet.source = UID;
 80035fc:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <XBee_Resolve+0x1e0>)
			*((int *) xbee_packet.data) = num_registered_devices;
 80035fe:	6812      	ldr	r2, [r2, #0]
			xbee_packet.command = SendDevices;
 8003600:	4835      	ldr	r0, [pc, #212]	; (80036d8 <XBee_Resolve+0x218>)
			xbee_packet.source = UID;
 8003602:	6819      	ldr	r1, [r3, #0]
			xbee_packet.target = XBee_Received.source;
 8003604:	6863      	ldr	r3, [r4, #4]
			*((int *) xbee_packet.data) = num_registered_devices;
 8003606:	60c2      	str	r2, [r0, #12]
			xbee_packet.command = SendDevices;
 8003608:	2403      	movs	r4, #3
			for (int i = 0; i < num_registered_devices; i++) {
 800360a:	2a00      	cmp	r2, #0
			xbee_packet.target = XBee_Received.source;
 800360c:	e9c0 1301 	strd	r1, r3, [r0, #4]
			xbee_packet.command = SendDevices;
 8003610:	7004      	strb	r4, [r0, #0]
			for (int i = 0; i < num_registered_devices; i++) {
 8003612:	dd04      	ble.n	800361e <XBee_Resolve+0x15e>
				*((uint32_t *) &xbee_packet.data[sizeof(int) + i * sizeof(uint32_t)]) = devices[i];
 8003614:	492d      	ldr	r1, [pc, #180]	; (80036cc <XBee_Resolve+0x20c>)
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	3010      	adds	r0, #16
 800361a:	f005 fc61 	bl	8008ee0 <memcpy>
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 800361e:	4d2f      	ldr	r5, [pc, #188]	; (80036dc <XBee_Resolve+0x21c>)
	uint32_t time = HAL_GetTick();
 8003620:	f000 f9fe 	bl	8003a20 <HAL_GetTick>
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 8003624:	682b      	ldr	r3, [r5, #0]
	uint32_t time = HAL_GetTick();
 8003626:	4604      	mov	r4, r0
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 8003628:	b10b      	cbz	r3, 800362e <XBee_Resolve+0x16e>
 800362a:	4298      	cmp	r0, r3
 800362c:	d225      	bcs.n	800367a <XBee_Resolve+0x1ba>
		HAL_UART_Transmit_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 800362e:	492a      	ldr	r1, [pc, #168]	; (80036d8 <XBee_Resolve+0x218>)
 8003630:	4823      	ldr	r0, [pc, #140]	; (80036c0 <XBee_Resolve+0x200>)
 8003632:	2270      	movs	r2, #112	; 0x70
 8003634:	f003 f8d4 	bl	80067e0 <HAL_UART_Transmit_DMA>
		last_transmit = time;
 8003638:	602c      	str	r4, [r5, #0]
 800363a:	e78f      	b.n	800355c <XBee_Resolve+0x9c>
			num_registered_devices = *((int *) XBee_Received.data);	
 800363c:	68e2      	ldr	r2, [r4, #12]
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <XBee_Resolve+0x208>)
			for (int i = 0; i < num_registered_devices; i++) {
 8003640:	2a00      	cmp	r2, #0
			num_registered_devices = *((int *) XBee_Received.data);	
 8003642:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < num_registered_devices; i++) {
 8003644:	dd04      	ble.n	8003650 <XBee_Resolve+0x190>
				devices[i] = *((uint32_t *) &XBee_Received.data[sizeof(int) + i * sizeof(uint32_t)]);
 8003646:	4926      	ldr	r1, [pc, #152]	; (80036e0 <XBee_Resolve+0x220>)
 8003648:	4820      	ldr	r0, [pc, #128]	; (80036cc <XBee_Resolve+0x20c>)
 800364a:	0092      	lsls	r2, r2, #2
 800364c:	f005 fc48 	bl	8008ee0 <memcpy>
			printf("Received device list\n");
 8003650:	4824      	ldr	r0, [pc, #144]	; (80036e4 <XBee_Resolve+0x224>)
 8003652:	f006 fa41 	bl	8009ad8 <puts>
			receiving_devices = 0;
 8003656:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <XBee_Resolve+0x228>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
			break;
 800365c:	e77e      	b.n	800355c <XBee_Resolve+0x9c>
			printf("Impacted detected on device %u\n", XBee_Received.data[0]);
 800365e:	7b21      	ldrb	r1, [r4, #12]
 8003660:	4822      	ldr	r0, [pc, #136]	; (80036ec <XBee_Resolve+0x22c>)
 8003662:	f006 f99d 	bl	80099a0 <iprintf>
			break;
 8003666:	e779      	b.n	800355c <XBee_Resolve+0x9c>
			printf("Unknown command received over network\n");
 8003668:	4821      	ldr	r0, [pc, #132]	; (80036f0 <XBee_Resolve+0x230>)
 800366a:	f006 fa35 	bl	8009ad8 <puts>
 800366e:	e775      	b.n	800355c <XBee_Resolve+0x9c>
}
 8003670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Already receiving file\n");
 8003674:	481f      	ldr	r0, [pc, #124]	; (80036f4 <XBee_Resolve+0x234>)
 8003676:	f006 ba2f 	b.w	8009ad8 <puts>
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 800367a:	1ac3      	subs	r3, r0, r3
 800367c:	2b64      	cmp	r3, #100	; 0x64
 800367e:	f67f af6d 	bls.w	800355c <XBee_Resolve+0x9c>
 8003682:	e7d4      	b.n	800362e <XBee_Resolve+0x16e>
					printf("Already registered device %u\n", (unsigned int) uid);
 8003684:	481c      	ldr	r0, [pc, #112]	; (80036f8 <XBee_Resolve+0x238>)
 8003686:	f006 f98b 	bl	80099a0 <iprintf>
					goto done;
 800368a:	e767      	b.n	800355c <XBee_Resolve+0x9c>
			printf(" but not target of file transfer");
 800368c:	481b      	ldr	r0, [pc, #108]	; (80036fc <XBee_Resolve+0x23c>)
 800368e:	f006 f987 	bl	80099a0 <iprintf>
 8003692:	e74d      	b.n	8003530 <XBee_Resolve+0x70>
				printf("Maximum registered network devices reached\n");
 8003694:	481a      	ldr	r0, [pc, #104]	; (8003700 <XBee_Resolve+0x240>)
 8003696:	f006 fa1f 	bl	8009ad8 <puts>
				break;
 800369a:	e75f      	b.n	800355c <XBee_Resolve+0x9c>
 800369c:	20002fc4 	.word	0x20002fc4
 80036a0:	20002fc0 	.word	0x20002fc0
 80036a4:	0800bdc8 	.word	0x0800bdc8
 80036a8:	20003060 	.word	0x20003060
 80036ac:	2000304c 	.word	0x2000304c
 80036b0:	20003048 	.word	0x20003048
 80036b4:	2000303c 	.word	0x2000303c
 80036b8:	0800bd7c 	.word	0x0800bd7c
 80036bc:	20003034 	.word	0x20003034
 80036c0:	20002ea4 	.word	0x20002ea4
 80036c4:	20002fd0 	.word	0x20002fd0
 80036c8:	20002f30 	.word	0x20002f30
 80036cc:	20000a84 	.word	0x20000a84
 80036d0:	0800be30 	.word	0x0800be30
 80036d4:	0800be54 	.word	0x0800be54
 80036d8:	20002f48 	.word	0x20002f48
 80036dc:	20003040 	.word	0x20003040
 80036e0:	20002fd4 	.word	0x20002fd4
 80036e4:	0800be68 	.word	0x0800be68
 80036e8:	20003044 	.word	0x20003044
 80036ec:	0800be80 	.word	0x0800be80
 80036f0:	0800bea0 	.word	0x0800bea0
 80036f4:	0800bdb0 	.word	0x0800bdb0
 80036f8:	0800be10 	.word	0x0800be10
 80036fc:	0800bd8c 	.word	0x0800bd8c
 8003700:	0800bde4 	.word	0x0800bde4

08003704 <XBee_Resolve_File>:

int XBee_Resolve_File() {
 8003704:	b510      	push	{r4, lr}
	int ret = 0;
	if (!is_receive_target) {
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <XBee_Resolve_File+0x80>)
 8003708:	681b      	ldr	r3, [r3, #0]
int XBee_Resolve_File() {
 800370a:	b082      	sub	sp, #8
	if (!is_receive_target) {
 800370c:	b98b      	cbnz	r3, 8003732 <XBee_Resolve_File+0x2e>
		printf("Received file but not target of file transfer\n");
 800370e:	481e      	ldr	r0, [pc, #120]	; (8003788 <XBee_Resolve_File+0x84>)
 8003710:	4c1e      	ldr	r4, [pc, #120]	; (800378c <XBee_Resolve_File+0x88>)
 8003712:	f006 f9e1 	bl	8009ad8 <puts>
			printf("Failed to close file (%i) \r\n", ret);
			return -1;
		}
		printf("Received file\n");
	}
	free(file_buf);
 8003716:	6820      	ldr	r0, [r4, #0]
 8003718:	f005 fbda 	bl	8008ed0 <free>
	receiving_file = 0;
 800371c:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <XBee_Resolve_File+0x8c>)
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 800371e:	491d      	ldr	r1, [pc, #116]	; (8003794 <XBee_Resolve_File+0x90>)
 8003720:	481d      	ldr	r0, [pc, #116]	; (8003798 <XBee_Resolve_File+0x94>)
	receiving_file = 0;
 8003722:	2400      	movs	r4, #0
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8003724:	2270      	movs	r2, #112	; 0x70
	receiving_file = 0;
 8003726:	601c      	str	r4, [r3, #0]
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8003728:	f003 f9d6 	bl	8006ad8 <HAL_UART_Receive_DMA>
	XBee_Receive(&XBee_Received);
	return ret;
 800372c:	4620      	mov	r0, r4
}
 800372e:	b002      	add	sp, #8
 8003730:	bd10      	pop	{r4, pc}
		ret = f_open(&fil, rpath, FA_OPEN_ALWAYS | FA_WRITE);
 8003732:	491a      	ldr	r1, [pc, #104]	; (800379c <XBee_Resolve_File+0x98>)
 8003734:	481a      	ldr	r0, [pc, #104]	; (80037a0 <XBee_Resolve_File+0x9c>)
 8003736:	2212      	movs	r2, #18
 8003738:	f004 fcea 	bl	8008110 <f_open>
		if(ret != FR_OK) {
 800373c:	b980      	cbnz	r0, 8003760 <XBee_Resolve_File+0x5c>
		ret = f_write(&fil, file_buf, rsize, &bytes_written);
 800373e:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <XBee_Resolve_File+0xa0>)
 8003740:	4c12      	ldr	r4, [pc, #72]	; (800378c <XBee_Resolve_File+0x88>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	6821      	ldr	r1, [r4, #0]
 8003746:	4816      	ldr	r0, [pc, #88]	; (80037a0 <XBee_Resolve_File+0x9c>)
 8003748:	ab01      	add	r3, sp, #4
 800374a:	f004 ffd5 	bl	80086f8 <f_write>
		if(ret != FR_OK) {
 800374e:	b970      	cbnz	r0, 800376e <XBee_Resolve_File+0x6a>
		ret = f_close(&fil);
 8003750:	4813      	ldr	r0, [pc, #76]	; (80037a0 <XBee_Resolve_File+0x9c>)
 8003752:	f005 f963 	bl	8008a1c <f_close>
		if(ret != FR_OK) {
 8003756:	b978      	cbnz	r0, 8003778 <XBee_Resolve_File+0x74>
		printf("Received file\n");
 8003758:	4813      	ldr	r0, [pc, #76]	; (80037a8 <XBee_Resolve_File+0xa4>)
 800375a:	f006 f9bd 	bl	8009ad8 <puts>
 800375e:	e7da      	b.n	8003716 <XBee_Resolve_File+0x12>
			printf("Failed to open file (%i) \r\n", ret);
 8003760:	4601      	mov	r1, r0
 8003762:	4812      	ldr	r0, [pc, #72]	; (80037ac <XBee_Resolve_File+0xa8>)
 8003764:	f006 f91c 	bl	80099a0 <iprintf>
			return -1;
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	e7df      	b.n	800372e <XBee_Resolve_File+0x2a>
			printf("Failed to write file (%i) \r\n", ret);
 800376e:	4601      	mov	r1, r0
 8003770:	480f      	ldr	r0, [pc, #60]	; (80037b0 <XBee_Resolve_File+0xac>)
 8003772:	f006 f915 	bl	80099a0 <iprintf>
			return -1;
 8003776:	e7f7      	b.n	8003768 <XBee_Resolve_File+0x64>
			printf("Failed to close file (%i) \r\n", ret);
 8003778:	4601      	mov	r1, r0
 800377a:	480e      	ldr	r0, [pc, #56]	; (80037b4 <XBee_Resolve_File+0xb0>)
 800377c:	f006 f910 	bl	80099a0 <iprintf>
			return -1;
 8003780:	e7f2      	b.n	8003768 <XBee_Resolve_File+0x64>
 8003782:	bf00      	nop
 8003784:	2000303c 	.word	0x2000303c
 8003788:	0800bec8 	.word	0x0800bec8
 800378c:	20003034 	.word	0x20003034
 8003790:	20003048 	.word	0x20003048
 8003794:	20002fc4 	.word	0x20002fc4
 8003798:	20002ea4 	.word	0x20002ea4
 800379c:	2000304c 	.word	0x2000304c
 80037a0:	20000ac8 	.word	0x20000ac8
 80037a4:	20003060 	.word	0x20003060
 80037a8:	0800bf18 	.word	0x0800bf18
 80037ac:	0800bbc0 	.word	0x0800bbc0
 80037b0:	0800bef8 	.word	0x0800bef8
 80037b4:	0800bc10 	.word	0x0800bc10

080037b8 <XBee_Handshake>:

void XBee_Handshake() {
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Requesting devices\n");
	xbee_packet.command = RequestDevices;
	xbee_packet.source = UID;
 80037ba:	4f1e      	ldr	r7, [pc, #120]	; (8003834 <XBee_Handshake+0x7c>)
	printf("Requesting devices\n");
 80037bc:	481e      	ldr	r0, [pc, #120]	; (8003838 <XBee_Handshake+0x80>)
	xbee_packet.command = RequestDevices;
 80037be:	4d1f      	ldr	r5, [pc, #124]	; (800383c <XBee_Handshake+0x84>)
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 80037c0:	4e1f      	ldr	r6, [pc, #124]	; (8003840 <XBee_Handshake+0x88>)
	printf("Requesting devices\n");
 80037c2:	f006 f989 	bl	8009ad8 <puts>
	xbee_packet.target = MASTER_UID;
 80037c6:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <XBee_Handshake+0x8c>)
	xbee_packet.source = UID;
 80037c8:	683a      	ldr	r2, [r7, #0]
	xbee_packet.command = RequestDevices;
 80037ca:	2102      	movs	r1, #2
	xbee_packet.target = MASTER_UID;
 80037cc:	e9c5 2301 	strd	r2, r3, [r5, #4]
	xbee_packet.command = RequestDevices;
 80037d0:	7029      	strb	r1, [r5, #0]
	uint32_t time = HAL_GetTick();
 80037d2:	f000 f925 	bl	8003a20 <HAL_GetTick>
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 80037d6:	6833      	ldr	r3, [r6, #0]
	uint32_t time = HAL_GetTick();
 80037d8:	4604      	mov	r4, r0
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 80037da:	b10b      	cbz	r3, 80037e0 <XBee_Handshake+0x28>
 80037dc:	4298      	cmp	r0, r3
 80037de:	d225      	bcs.n	800382c <XBee_Handshake+0x74>
		HAL_UART_Transmit_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 80037e0:	4916      	ldr	r1, [pc, #88]	; (800383c <XBee_Handshake+0x84>)
 80037e2:	4819      	ldr	r0, [pc, #100]	; (8003848 <XBee_Handshake+0x90>)
 80037e4:	2270      	movs	r2, #112	; 0x70
 80037e6:	f002 fffb 	bl	80067e0 <HAL_UART_Transmit_DMA>
		last_transmit = time;
 80037ea:	6034      	str	r4, [r6, #0]
	XBee_Transmit(&xbee_packet);
	receiving_devices = 1;
 80037ec:	4b17      	ldr	r3, [pc, #92]	; (800384c <XBee_Handshake+0x94>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
	while (receiving_devices);
 80037f2:	681c      	ldr	r4, [r3, #0]
 80037f4:	2c00      	cmp	r4, #0
 80037f6:	d1fc      	bne.n	80037f2 <XBee_Handshake+0x3a>
	printf("Broadcasting identity\n");
 80037f8:	4815      	ldr	r0, [pc, #84]	; (8003850 <XBee_Handshake+0x98>)
 80037fa:	f006 f96d 	bl	8009ad8 <puts>
	xbee_packet.command = BroadcastIdentity;
	xbee_packet.target = 0;
	*((uint32_t *) xbee_packet.data) = UID;
 80037fe:	683b      	ldr	r3, [r7, #0]
	xbee_packet.command = BroadcastIdentity;
 8003800:	2201      	movs	r2, #1
	*((uint32_t *) xbee_packet.data) = UID;
 8003802:	e9c5 4302 	strd	r4, r3, [r5, #8]
	xbee_packet.command = BroadcastIdentity;
 8003806:	702a      	strb	r2, [r5, #0]
	uint32_t time = HAL_GetTick();
 8003808:	f000 f90a 	bl	8003a20 <HAL_GetTick>
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 800380c:	6833      	ldr	r3, [r6, #0]
	uint32_t time = HAL_GetTick();
 800380e:	4604      	mov	r4, r0
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 8003810:	b10b      	cbz	r3, 8003816 <XBee_Handshake+0x5e>
 8003812:	4298      	cmp	r0, r3
 8003814:	d206      	bcs.n	8003824 <XBee_Handshake+0x6c>
		HAL_UART_Transmit_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8003816:	4909      	ldr	r1, [pc, #36]	; (800383c <XBee_Handshake+0x84>)
 8003818:	480b      	ldr	r0, [pc, #44]	; (8003848 <XBee_Handshake+0x90>)
 800381a:	2270      	movs	r2, #112	; 0x70
 800381c:	f002 ffe0 	bl	80067e0 <HAL_UART_Transmit_DMA>
		last_transmit = time;
 8003820:	6034      	str	r4, [r6, #0]
//	strcpy((char *) path, (char *) &xbee_packet.data[sizeof(uint32_t)]);
//	HAL_Delay(500);
//	printf("Transmitting file\n");
//	XBee_Transmit_File_Start(path, 0);
//	while (transmitting_file);
}
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 8003824:	1ac3      	subs	r3, r0, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d9fb      	bls.n	8003822 <XBee_Handshake+0x6a>
 800382a:	e7f4      	b.n	8003816 <XBee_Handshake+0x5e>
 800382c:	1ac3      	subs	r3, r0, r3
 800382e:	2b64      	cmp	r3, #100	; 0x64
 8003830:	d9dc      	bls.n	80037ec <XBee_Handshake+0x34>
 8003832:	e7d5      	b.n	80037e0 <XBee_Handshake+0x28>
 8003834:	20002fc0 	.word	0x20002fc0
 8003838:	0800bf28 	.word	0x0800bf28
 800383c:	20002f48 	.word	0x20002f48
 8003840:	20003040 	.word	0x20003040
 8003844:	499602d2 	.word	0x499602d2
 8003848:	20002ea4 	.word	0x20002ea4
 800384c:	20003044 	.word	0x20003044
 8003850:	0800bf3c 	.word	0x0800bf3c

08003854 <XBee_Init>:

void XBee_Init() {
 8003854:	b510      	push	{r4, lr}
	UID = HAL_GetUIDw0() + HAL_GetUIDw1() + HAL_GetUIDw2();
 8003856:	f000 f8fb 	bl	8003a50 <HAL_GetUIDw0>
 800385a:	4604      	mov	r4, r0
 800385c:	f000 f8fe 	bl	8003a5c <HAL_GetUIDw1>
 8003860:	4404      	add	r4, r0
 8003862:	f000 f901 	bl	8003a68 <HAL_GetUIDw2>
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <XBee_Init+0x38>)
 8003868:	1821      	adds	r1, r4, r0
	printf("UID: %u\n", (unsigned int) UID);
 800386a:	4809      	ldr	r0, [pc, #36]	; (8003890 <XBee_Init+0x3c>)
	UID = HAL_GetUIDw0() + HAL_GetUIDw1() + HAL_GetUIDw2();
 800386c:	6019      	str	r1, [r3, #0]
	printf("UID: %u\n", (unsigned int) UID);
 800386e:	f006 f897 	bl	80099a0 <iprintf>
	__HAL_TIM_SET_AUTORELOAD(FILE_TIMER, 5000);
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <XBee_Init+0x40>)
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8003874:	4908      	ldr	r1, [pc, #32]	; (8003898 <XBee_Init+0x44>)
	__HAL_TIM_SET_AUTORELOAD(FILE_TIMER, 5000);
 8003876:	681a      	ldr	r2, [r3, #0]
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8003878:	4808      	ldr	r0, [pc, #32]	; (800389c <XBee_Init+0x48>)
	__HAL_TIM_SET_AUTORELOAD(FILE_TIMER, 5000);
 800387a:	f241 3488 	movw	r4, #5000	; 0x1388
 800387e:	62d4      	str	r4, [r2, #44]	; 0x2c
 8003880:	60dc      	str	r4, [r3, #12]
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8003882:	2270      	movs	r2, #112	; 0x70
	XBee_Receive(&XBee_Received);
}
 8003884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8003888:	f003 b926 	b.w	8006ad8 <HAL_UART_Receive_DMA>
 800388c:	20002fc0 	.word	0x20002fc0
 8003890:	0800bf54 	.word	0x0800bf54
 8003894:	20002d84 	.word	0x20002d84
 8003898:	20002fc4 	.word	0x20002fc4
 800389c:	20002ea4 	.word	0x20002ea4

080038a0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
	if (huart == XBEE_UART) {
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_UART_ErrorCallback+0x10>)
 80038a2:	4283      	cmp	r3, r0
 80038a4:	d000      	beq.n	80038a8 <HAL_UART_ErrorCallback+0x8>
		printf("XBee Error\n");
	}
}
 80038a6:	4770      	bx	lr
		printf("XBee Error\n");
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <HAL_UART_ErrorCallback+0x14>)
 80038aa:	f006 b915 	b.w	8009ad8 <puts>
 80038ae:	bf00      	nop
 80038b0:	20002ea4 	.word	0x20002ea4
 80038b4:	0800bf60 	.word	0x0800bf60

080038b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == XBEE_UART) {
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_UART_TxCpltCallback+0x4c>)
 80038ba:	4283      	cmp	r3, r0
 80038bc:	d000      	beq.n	80038c0 <HAL_UART_TxCpltCallback+0x8>
 80038be:	4770      	bx	lr
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80038c0:	b510      	push	{r4, lr}
		if (transmitting_file == 1) {
 80038c2:	4c11      	ldr	r4, [pc, #68]	; (8003908 <HAL_UART_TxCpltCallback+0x50>)
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d003      	beq.n	80038d2 <HAL_UART_TxCpltCallback+0x1a>
			while (HAL_TIM_Base_GetState(FILE_TIMER) != HAL_TIM_STATE_READY);
			FIX_TIMER_TRIGGER(FILE_TIMER);
			HAL_TIM_Base_Start_IT(FILE_TIMER);
		} else if (transmitting_file == 2) {
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d00f      	beq.n	80038f0 <HAL_UART_TxCpltCallback+0x38>
			printf("Transmitted file\n");
			free(file_buf);
			transmitting_file = 0;
		}
	}
}
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	4c0e      	ldr	r4, [pc, #56]	; (800390c <HAL_UART_TxCpltCallback+0x54>)
			while (HAL_TIM_Base_GetState(FILE_TIMER) != HAL_TIM_STATE_READY);
 80038d4:	4620      	mov	r0, r4
 80038d6:	f002 fdfb 	bl	80064d0 <HAL_TIM_Base_GetState>
 80038da:	2801      	cmp	r0, #1
 80038dc:	d1fa      	bne.n	80038d4 <HAL_UART_TxCpltCallback+0x1c>
			FIX_TIMER_TRIGGER(FILE_TIMER);
 80038de:	6823      	ldr	r3, [r4, #0]
			HAL_TIM_Base_Start_IT(FILE_TIMER);
 80038e0:	480a      	ldr	r0, [pc, #40]	; (800390c <HAL_UART_TxCpltCallback+0x54>)
			FIX_TIMER_TRIGGER(FILE_TIMER);
 80038e2:	f06f 0201 	mvn.w	r2, #1
}
 80038e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			FIX_TIMER_TRIGGER(FILE_TIMER);
 80038ea:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(FILE_TIMER);
 80038ec:	f002 babc 	b.w	8005e68 <HAL_TIM_Base_Start_IT>
			printf("Transmitted file\n");
 80038f0:	4807      	ldr	r0, [pc, #28]	; (8003910 <HAL_UART_TxCpltCallback+0x58>)
 80038f2:	f006 f8f1 	bl	8009ad8 <puts>
			free(file_buf);
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <HAL_UART_TxCpltCallback+0x5c>)
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	f005 fae9 	bl	8008ed0 <free>
			transmitting_file = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	6023      	str	r3, [r4, #0]
}
 8003902:	bd10      	pop	{r4, pc}
 8003904:	20002ea4 	.word	0x20002ea4
 8003908:	20003064 	.word	0x20003064
 800390c:	20002d84 	.word	0x20002d84
 8003910:	0800bf6c 	.word	0x0800bf6c
 8003914:	20003034 	.word	0x20003034

08003918 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == XBEE_UART) {
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_UART_RxCpltCallback+0x18>)
 800391a:	4283      	cmp	r3, r0
 800391c:	d000      	beq.n	8003920 <HAL_UART_RxCpltCallback+0x8>
			XBee_Resolve();
		} else {
			XBee_Resolve_File();
		}
	}
}
 800391e:	4770      	bx	lr
		if (!receiving_file) {
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <HAL_UART_RxCpltCallback+0x1c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	b90b      	cbnz	r3, 800392a <HAL_UART_RxCpltCallback+0x12>
			XBee_Resolve();
 8003926:	f7ff bdcb 	b.w	80034c0 <XBee_Resolve>
			XBee_Resolve_File();
 800392a:	f7ff beeb 	b.w	8003704 <XBee_Resolve_File>
 800392e:	bf00      	nop
 8003930:	20002ea4 	.word	0x20002ea4
 8003934:	20003048 	.word	0x20003048

08003938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800393c:	480d      	ldr	r0, [pc, #52]	; (8003974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800393e:	490e      	ldr	r1, [pc, #56]	; (8003978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003940:	4a0e      	ldr	r2, [pc, #56]	; (800397c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003944:	e002      	b.n	800394c <LoopCopyDataInit>

08003946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800394a:	3304      	adds	r3, #4

0800394c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800394c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800394e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003950:	d3f9      	bcc.n	8003946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003954:	4c0b      	ldr	r4, [pc, #44]	; (8003984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003958:	e001      	b.n	800395e <LoopFillZerobss>

0800395a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800395a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800395c:	3204      	adds	r2, #4

0800395e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800395e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003960:	d3fb      	bcc.n	800395a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003962:	f7ff fd89 	bl	8003478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003966:	f005 fa87 	bl	8008e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800396a:	f7fe ff59 	bl	8002820 <main>
  bx  lr    
 800396e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003970:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003978:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800397c:	0800c404 	.word	0x0800c404
  ldr r2, =_sbss
 8003980:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003984:	200030b8 	.word	0x200030b8

08003988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003988:	e7fe      	b.n	8003988 <ADC_IRQHandler>
	...

0800398c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800398c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800398e:	4a0e      	ldr	r2, [pc, #56]	; (80039c8 <HAL_InitTick+0x3c>)
 8003990:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <HAL_InitTick+0x40>)
 8003992:	7812      	ldrb	r2, [r2, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
{
 8003996:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800399c:	fbb0 f0f2 	udiv	r0, r0, r2
 80039a0:	fbb3 f0f0 	udiv	r0, r3, r0
 80039a4:	f000 fb12 	bl	8003fcc <HAL_SYSTICK_Config>
 80039a8:	b908      	cbnz	r0, 80039ae <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039aa:	2d0f      	cmp	r5, #15
 80039ac:	d901      	bls.n	80039b2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80039ae:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80039b0:	bd38      	pop	{r3, r4, r5, pc}
 80039b2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039b4:	4602      	mov	r2, r0
 80039b6:	4629      	mov	r1, r5
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	f000 faba 	bl	8003f34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_InitTick+0x44>)
 80039c2:	4620      	mov	r0, r4
 80039c4:	601d      	str	r5, [r3, #0]
}
 80039c6:	bd38      	pop	{r3, r4, r5, pc}
 80039c8:	2000000c 	.word	0x2000000c
 80039cc:	20000008 	.word	0x20000008
 80039d0:	20000010 	.word	0x20000010

080039d4 <HAL_Init>:
{
 80039d4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_Init+0x30>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039de:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039e6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ee:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039f0:	2003      	movs	r0, #3
 80039f2:	f000 fa8d 	bl	8003f10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80039f6:	2000      	movs	r0, #0
 80039f8:	f7ff ffc8 	bl	800398c <HAL_InitTick>
  HAL_MspInit();
 80039fc:	f7ff fa2c 	bl	8002e58 <HAL_MspInit>
}
 8003a00:	2000      	movs	r0, #0
 8003a02:	bd08      	pop	{r3, pc}
 8003a04:	40023c00 	.word	0x40023c00

08003a08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003a08:	4a03      	ldr	r2, [pc, #12]	; (8003a18 <HAL_IncTick+0x10>)
 8003a0a:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <HAL_IncTick+0x14>)
 8003a0c:	6811      	ldr	r1, [r2, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	440b      	add	r3, r1
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20003068 	.word	0x20003068
 8003a1c:	2000000c 	.word	0x2000000c

08003a20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003a20:	4b01      	ldr	r3, [pc, #4]	; (8003a28 <HAL_GetTick+0x8>)
 8003a22:	6818      	ldr	r0, [r3, #0]
}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20003068 	.word	0x20003068

08003a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003a30:	f7ff fff6 	bl	8003a20 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a34:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003a36:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003a38:	d002      	beq.n	8003a40 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a3a:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_Delay+0x20>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a40:	f7ff ffee 	bl	8003a20 <HAL_GetTick>
 8003a44:	1b43      	subs	r3, r0, r5
 8003a46:	42a3      	cmp	r3, r4
 8003a48:	d3fa      	bcc.n	8003a40 <HAL_Delay+0x14>
  {
  }
}
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	2000000c 	.word	0x2000000c

08003a50 <HAL_GetUIDw0>:
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003a50:	4b01      	ldr	r3, [pc, #4]	; (8003a58 <HAL_GetUIDw0+0x8>)
}
 8003a52:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
 8003a56:	4770      	bx	lr
 8003a58:	1fff7000 	.word	0x1fff7000

08003a5c <HAL_GetUIDw1>:
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003a5c:	4b01      	ldr	r3, [pc, #4]	; (8003a64 <HAL_GetUIDw1+0x8>)
}
 8003a5e:	f8d3 0a14 	ldr.w	r0, [r3, #2580]	; 0xa14
 8003a62:	4770      	bx	lr
 8003a64:	1fff7000 	.word	0x1fff7000

08003a68 <HAL_GetUIDw2>:
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003a68:	4b01      	ldr	r3, [pc, #4]	; (8003a70 <HAL_GetUIDw2+0x8>)
}
 8003a6a:	f8d3 0a18 	ldr.w	r0, [r3, #2584]	; 0xa18
 8003a6e:	4770      	bx	lr
 8003a70:	1fff7000 	.word	0x1fff7000

08003a74 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a74:	2800      	cmp	r0, #0
 8003a76:	f000 809f 	beq.w	8003bb8 <HAL_ADC_Init+0x144>
{
 8003a7a:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a7c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003a7e:	4604      	mov	r4, r0
 8003a80:	b13d      	cbz	r5, 8003a92 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a84:	06db      	lsls	r3, r3, #27
 8003a86:	d50c      	bpl.n	8003aa2 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003a8e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003a90:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003a92:	f7ff f9ff 	bl	8002e94 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003a96:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003a9a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a9e:	06db      	lsls	r3, r3, #27
 8003aa0:	d4f2      	bmi.n	8003a88 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003aa4:	4a48      	ldr	r2, [pc, #288]	; (8003bc8 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8003aa6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003aaa:	f023 0302 	bic.w	r3, r3, #2
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ab4:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ab6:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ab8:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003abc:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003abe:	6851      	ldr	r1, [r2, #4]
 8003ac0:	6860      	ldr	r0, [r4, #4]
 8003ac2:	4301      	orrs	r1, r0
 8003ac4:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ac6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ac8:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003aca:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8003ad8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8003ae0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	4302      	orrs	r2, r0
 8003ae6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ae8:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003aea:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aec:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003af0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003af2:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003af4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003af6:	4302      	orrs	r2, r0
 8003af8:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003afa:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <HAL_ADC_Init+0x158>)
 8003afc:	4291      	cmp	r1, r2
 8003afe:	d052      	beq.n	8003ba6 <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b00:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b02:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b04:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8003b08:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	4311      	orrs	r1, r2
 8003b0e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003b16:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	432a      	orrs	r2, r5
 8003b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	f022 0202 	bic.w	r2, r2, #2
 8003b24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	7e21      	ldrb	r1, [r4, #24]
 8003b2a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003b2e:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b30:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	d041      	beq.n	8003bbc <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b38:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b3c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003b40:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b42:	6858      	ldr	r0, [r3, #4]
 8003b44:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003b48:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b4a:	1e51      	subs	r1, r2, #1
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003b52:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b56:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b58:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b62:	3901      	subs	r1, #1
 8003b64:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b6a:	6899      	ldr	r1, [r3, #8]
 8003b6c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003b70:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b72:	6899      	ldr	r1, [r3, #8]
 8003b74:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003b78:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003b7c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003b84:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b86:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003b88:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b8a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003b8e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003b90:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b94:	f023 0303 	bic.w	r3, r3, #3
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003ba4:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bb4:	609a      	str	r2, [r3, #8]
 8003bb6:	e7b2      	b.n	8003b1e <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8003bb8:	2001      	movs	r0, #1
}
 8003bba:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	e7c6      	b.n	8003b54 <HAL_ADC_Init+0xe0>
 8003bc6:	bf00      	nop
 8003bc8:	40012300 	.word	0x40012300
 8003bcc:	0f000001 	.word	0x0f000001

08003bd0 <HAL_ADC_Start_DMA>:
{
 8003bd0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003bd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8003bda:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003be2:	f000 8087 	beq.w	8003cf4 <HAL_ADC_Start_DMA+0x124>
 8003be6:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003be8:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8003bea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bee:	68b3      	ldr	r3, [r6, #8]
 8003bf0:	07dc      	lsls	r4, r3, #31
 8003bf2:	d414      	bmi.n	8003c1e <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8003bf4:	68b3      	ldr	r3, [r6, #8]
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <HAL_ADC_Start_DMA+0x12c>)
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <HAL_ADC_Start_DMA+0x130>)
 8003c02:	fba3 3000 	umull	r3, r0, r3, r0
 8003c06:	0c80      	lsrs	r0, r0, #18
 8003c08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003c0c:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8003c0e:	9b01      	ldr	r3, [sp, #4]
 8003c10:	b12b      	cbz	r3, 8003c1e <HAL_ADC_Start_DMA+0x4e>
      counter--;
 8003c12:	9c01      	ldr	r4, [sp, #4]
 8003c14:	3c01      	subs	r4, #1
 8003c16:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8003c18:	9801      	ldr	r0, [sp, #4]
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d1f9      	bne.n	8003c12 <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c1e:	68b3      	ldr	r3, [r6, #8]
 8003c20:	05d8      	lsls	r0, r3, #23
 8003c22:	d503      	bpl.n	8003c2c <HAL_ADC_Start_DMA+0x5c>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c24:	68b3      	ldr	r3, [r6, #8]
 8003c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2a:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c2c:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8003c2e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c30:	f010 0001 	ands.w	r0, r0, #1
 8003c34:	d042      	beq.n	8003cbc <HAL_ADC_Start_DMA+0xec>
    ADC_STATE_CLR_SET(hadc->State,
 8003c36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c44:	6873      	ldr	r3, [r6, #4]
 8003c46:	055b      	lsls	r3, r3, #21
 8003c48:	d505      	bpl.n	8003c56 <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c4a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003c4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c54:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c56:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c58:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c5a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c5e:	bf1c      	itt	ne
 8003c60:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8003c62:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003c66:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8003c68:	2400      	movs	r4, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c6e:	4925      	ldr	r1, [pc, #148]	; (8003d04 <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);   
 8003c70:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c74:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c76:	4924      	ldr	r1, [pc, #144]	; (8003d08 <HAL_ADC_Start_DMA+0x138>)
 8003c78:	6401      	str	r1, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c7a:	4924      	ldr	r1, [pc, #144]	; (8003d0c <HAL_ADC_Start_DMA+0x13c>)
 8003c7c:	64c1      	str	r1, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c7e:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8003c82:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c84:	6871      	ldr	r1, [r6, #4]
 8003c86:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8003c8a:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c8c:	68b1      	ldr	r1, [r6, #8]
 8003c8e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003c92:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c94:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8003c98:	f000 fa4a 	bl	8004130 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <HAL_ADC_Start_DMA+0x140>)
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	f012 021f 	ands.w	r2, r2, #31
 8003ca4:	d113      	bne.n	8003cce <HAL_ADC_Start_DMA+0xfe>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ca6:	6829      	ldr	r1, [r5, #0]
 8003ca8:	6888      	ldr	r0, [r1, #8]
 8003caa:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8003cae:	d115      	bne.n	8003cdc <HAL_ADC_Start_DMA+0x10c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cb0:	688b      	ldr	r3, [r1, #8]
 8003cb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cb6:	608b      	str	r3, [r1, #8]
}
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbc:	f043 0310 	orr.w	r3, r3, #16
 8003cc0:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	646b      	str	r3, [r5, #68]	; 0x44
}
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cce:	4a11      	ldr	r2, [pc, #68]	; (8003d14 <HAL_ADC_Start_DMA+0x144>)
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d005      	beq.n	8003ce2 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8003cd6:	4620      	mov	r0, r4
}
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003cdc:	4610      	mov	r0, r2
}
 8003cde:	b002      	add	sp, #8
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ce2:	6898      	ldr	r0, [r3, #8]
 8003ce4:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8003ce8:	d1f5      	bne.n	8003cd6 <HAL_ADC_Start_DMA+0x106>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cf0:	609a      	str	r2, [r3, #8]
 8003cf2:	e7ea      	b.n	8003cca <HAL_ADC_Start_DMA+0xfa>
  __HAL_LOCK(hadc);
 8003cf4:	2002      	movs	r0, #2
}
 8003cf6:	b002      	add	sp, #8
 8003cf8:	bd70      	pop	{r4, r5, r6, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000008 	.word	0x20000008
 8003d00:	431bde83 	.word	0x431bde83
 8003d04:	08003d49 	.word	0x08003d49
 8003d08:	08003d21 	.word	0x08003d21
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	40012300 	.word	0x40012300
 8003d14:	40012000 	.word	0x40012000

08003d18 <HAL_ADC_ConvCpltCallback>:
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop

08003d1c <HAL_ADC_ConvHalfCpltCallback>:
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop

08003d20 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d20:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d22:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003d24:	f7ff fffa 	bl	8003d1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d28:	bd08      	pop	{r3, pc}
 8003d2a:	bf00      	nop

08003d2c <HAL_ADC_ErrorCallback>:
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop

08003d30 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d30:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003d32:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d34:	2340      	movs	r3, #64	; 0x40
 8003d36:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d38:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d3a:	f043 0304 	orr.w	r3, r3, #4
 8003d3e:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d40:	f7ff fff4 	bl	8003d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d44:	bd08      	pop	{r3, pc}
 8003d46:	bf00      	nop

08003d48 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d48:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d4c:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8003d50:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d54:	d123      	bne.n	8003d9e <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d5a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d5e:	688a      	ldr	r2, [r1, #8]
 8003d60:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8003d64:	d117      	bne.n	8003d96 <ADC_DMAConvCplt+0x4e>
 8003d66:	7e1a      	ldrb	r2, [r3, #24]
 8003d68:	b9aa      	cbnz	r2, 8003d96 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d6a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d6c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8003d70:	d002      	beq.n	8003d78 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d72:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d74:	0550      	lsls	r0, r2, #21
 8003d76:	d40e      	bmi.n	8003d96 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d78:	684a      	ldr	r2, [r1, #4]
 8003d7a:	f022 0220 	bic.w	r2, r2, #32
 8003d7e:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8a:	04d1      	lsls	r1, r2, #19
 8003d8c:	d403      	bmi.n	8003d96 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff ffbe 	bl	8003d18 <HAL_ADC_ConvCpltCallback>
}
 8003d9c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d9e:	06d2      	lsls	r2, r2, #27
 8003da0:	d404      	bmi.n	8003dac <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ffbd 	bl	8003d2c <HAL_ADC_ErrorCallback>
}
 8003db2:	bd10      	pop	{r4, pc}

08003db4 <HAL_ADC_ConfigChannel>:
{
 8003db4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8003db6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003dba:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003dbc:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003dbe:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003dc0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003dc2:	f000 809c 	beq.w	8003efe <HAL_ADC_ConfigChannel+0x14a>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dcc:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003dce:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dd0:	2c09      	cmp	r4, #9
 8003dd2:	d82d      	bhi.n	8003e30 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dd4:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dd6:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dd8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003ddc:	f04f 0c07 	mov.w	ip, #7
 8003de0:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003de4:	ea25 050c 	bic.w	r5, r5, ip
 8003de8:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dea:	691d      	ldr	r5, [r3, #16]
 8003dec:	fa02 f20e 	lsl.w	r2, r2, lr
 8003df0:	432a      	orrs	r2, r5
 8003df2:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8003df4:	684a      	ldr	r2, [r1, #4]
 8003df6:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003df8:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8003dfa:	d82f      	bhi.n	8003e5c <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dfc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003e00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e02:	3a05      	subs	r2, #5
 8003e04:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e08:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e0c:	fa0e f202 	lsl.w	r2, lr, r2
 8003e10:	ea21 0202 	bic.w	r2, r1, r2
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e18:	ea4c 0202 	orr.w	r2, ip, r2
 8003e1c:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e1e:	4a39      	ldr	r2, [pc, #228]	; (8003f04 <HAL_ADC_ConfigChannel+0x150>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d030      	beq.n	8003e86 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8003e24:	2300      	movs	r3, #0
 8003e26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003e2a:	4618      	mov	r0, r3
}
 8003e2c:	b003      	add	sp, #12
 8003e2e:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e30:	fa1f fc84 	uxth.w	ip, r4
 8003e34:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8003e38:	68dd      	ldr	r5, [r3, #12]
 8003e3a:	f1a2 0e1e 	sub.w	lr, r2, #30
 8003e3e:	2207      	movs	r2, #7
 8003e40:	fa02 f20e 	lsl.w	r2, r2, lr
 8003e44:	ea25 0202 	bic.w	r2, r5, r2
 8003e48:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e4a:	688a      	ldr	r2, [r1, #8]
 8003e4c:	68dd      	ldr	r5, [r3, #12]
 8003e4e:	fa02 f20e 	lsl.w	r2, r2, lr
 8003e52:	432a      	orrs	r2, r5
 8003e54:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8003e56:	684a      	ldr	r2, [r1, #4]
 8003e58:	2a06      	cmp	r2, #6
 8003e5a:	d9cf      	bls.n	8003dfc <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8003e5c:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8003e62:	d836      	bhi.n	8003ed2 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e66:	3a23      	subs	r2, #35	; 0x23
 8003e68:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e6a:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e6e:	fa05 f202 	lsl.w	r2, r5, r2
 8003e72:	ea21 0202 	bic.w	r2, r1, r2
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7a:	ea4c 0202 	orr.w	r2, ip, r2
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <HAL_ADC_ConfigChannel+0x150>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d1ce      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
 8003e86:	2c12      	cmp	r4, #18
 8003e88:	d032      	beq.n	8003ef0 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e8a:	f1a4 0310 	sub.w	r3, r4, #16
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d8c8      	bhi.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e92:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <HAL_ADC_ConfigChannel+0x154>)
 8003e94:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e96:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e9c:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e9e:	d1c1      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_ADC_ConfigChannel+0x158>)
 8003ea2:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8003eac:	f202 3283 	addw	r2, r2, #899	; 0x383
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	0c9b      	lsrs	r3, r3, #18
 8003eb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003ebe:	9b01      	ldr	r3, [sp, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0af      	beq.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003ec4:	9b01      	ldr	r3, [sp, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003eca:	9b01      	ldr	r3, [sp, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f9      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x110>
 8003ed0:	e7a8      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ed2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ed4:	3a41      	subs	r2, #65	; 0x41
 8003ed6:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ed8:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003edc:	fa05 f202 	lsl.w	r2, r5, r2
 8003ee0:	ea21 0202 	bic.w	r2, r1, r2
 8003ee4:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8003eec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eee:	e796      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ef0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ef8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003efc:	e792      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003efe:	2002      	movs	r0, #2
}
 8003f00:	b003      	add	sp, #12
 8003f02:	bd30      	pop	{r4, r5, pc}
 8003f04:	40012000 	.word	0x40012000
 8003f08:	40012300 	.word	0x40012300
 8003f0c:	20000008 	.word	0x20000008

08003f10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003f12:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f14:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f16:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f20:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f22:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003f2a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f34:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <HAL_NVIC_SetPriority+0x74>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f3c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f3e:	f1c3 0e07 	rsb	lr, r3, #7
 8003f42:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f46:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4a:	bf28      	it	cs
 8003f4c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f50:	f1bc 0f06 	cmp.w	ip, #6
 8003f54:	d91b      	bls.n	8003f8e <HAL_NVIC_SetPriority+0x5a>
 8003f56:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f58:	f04f 3cff 	mov.w	ip, #4294967295
 8003f5c:	fa0c fc03 	lsl.w	ip, ip, r3
 8003f60:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f64:	f04f 3cff 	mov.w	ip, #4294967295
 8003f68:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003f6c:	ea21 010c 	bic.w	r1, r1, ip
 8003f70:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003f72:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f74:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003f78:	db0c      	blt.n	8003f94 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003f7e:	0109      	lsls	r1, r1, #4
 8003f80:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003f84:	b2c9      	uxtb	r1, r1
 8003f86:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f8e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f90:	4613      	mov	r3, r2
 8003f92:	e7e7      	b.n	8003f64 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_NVIC_SetPriority+0x78>)
 8003f96:	f000 000f 	and.w	r0, r0, #15
 8003f9a:	0109      	lsls	r1, r1, #4
 8003f9c:	4403      	add	r3, r0
 8003f9e:	b2c9      	uxtb	r1, r1
 8003fa0:	7619      	strb	r1, [r3, #24]
 8003fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fa6:	bf00      	nop
 8003fa8:	e000ed00 	.word	0xe000ed00
 8003fac:	e000ecfc 	.word	0xe000ecfc

08003fb0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	db08      	blt.n	8003fc6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb4:	0941      	lsrs	r1, r0, #5
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <HAL_NVIC_EnableIRQ+0x18>)
 8003fb8:	f000 001f 	and.w	r0, r0, #31
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8003fc2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003fc6:	4770      	bx	lr
 8003fc8:	e000e100 	.word	0xe000e100

08003fcc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fcc:	3801      	subs	r0, #1
 8003fce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003fd2:	d210      	bcs.n	8003ff6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fd4:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fda:	4c08      	ldr	r4, [pc, #32]	; (8003ffc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fdc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fde:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003fe2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fea:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fec:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003fee:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ff2:	6119      	str	r1, [r3, #16]
 8003ff4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8004004:	f7ff fd0c 	bl	8003a20 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004008:	2c00      	cmp	r4, #0
 800400a:	d052      	beq.n	80040b2 <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800400c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800400e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004010:	2102      	movs	r1, #2
 8004012:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8004016:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	f022 0201 	bic.w	r2, r2, #1
 8004020:	4605      	mov	r5, r0
 8004022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004024:	e005      	b.n	8004032 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004026:	f7ff fcfb 	bl	8003a20 <HAL_GetTick>
 800402a:	1b43      	subs	r3, r0, r5
 800402c:	2b05      	cmp	r3, #5
 800402e:	d839      	bhi.n	80040a4 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	07d1      	lsls	r1, r2, #31
 8004036:	d4f6      	bmi.n	8004026 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004038:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800403c:	68e1      	ldr	r1, [r4, #12]
 800403e:	4302      	orrs	r2, r0
 8004040:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004042:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004046:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004048:	432a      	orrs	r2, r5
 800404a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800404c:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 800404e:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004050:	4302      	orrs	r2, r0
 8004052:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004054:	4933      	ldr	r1, [pc, #204]	; (8004124 <HAL_DMA_Init+0x124>)
 8004056:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004058:	6a25      	ldr	r5, [r4, #32]
 800405a:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800405c:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800405e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004060:	2904      	cmp	r1, #4
 8004062:	d028      	beq.n	80040b6 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004064:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004066:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004068:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800406c:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800406e:	b2d8      	uxtb	r0, r3
 8004070:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8004072:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004074:	3810      	subs	r0, #16
 8004076:	fba2 5200 	umull	r5, r2, r2, r0
 800407a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800407c:	492b      	ldr	r1, [pc, #172]	; (800412c <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800407e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004082:	5c89      	ldrb	r1, [r1, r2]
 8004084:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004086:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 800408a:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800408c:	bf88      	it	hi
 800408e:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004090:	223f      	movs	r2, #63	; 0x3f
 8004092:	408a      	lsls	r2, r1
 8004094:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004096:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004098:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800409a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800409c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800409e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040a6:	2220      	movs	r2, #32
 80040a8:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80040ae:	4618      	mov	r0, r3
}
 80040b0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80040b2:	2001      	movs	r0, #1
}
 80040b4:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040b6:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 80040ba:	4329      	orrs	r1, r5
 80040bc:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 80040be:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80040c0:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80040c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040c4:	f021 0107 	bic.w	r1, r1, #7
 80040c8:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80040ca:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	d0cd      	beq.n	800406e <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040d2:	b178      	cbz	r0, 80040f4 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040d4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80040d8:	d016      	beq.n	8004108 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040da:	2a02      	cmp	r2, #2
 80040dc:	d903      	bls.n	80040e6 <HAL_DMA_Init+0xe6>
 80040de:	2a03      	cmp	r2, #3
 80040e0:	d1c5      	bne.n	800406e <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e2:	01ea      	lsls	r2, r5, #7
 80040e4:	d5c3      	bpl.n	800406e <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 80040e6:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040e8:	2240      	movs	r2, #64	; 0x40
 80040ea:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80040ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80040f0:	4618      	mov	r0, r3
}
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80040f4:	2a01      	cmp	r2, #1
 80040f6:	d003      	beq.n	8004100 <HAL_DMA_Init+0x100>
 80040f8:	f032 0202 	bics.w	r2, r2, #2
 80040fc:	d1b7      	bne.n	800406e <HAL_DMA_Init+0x6e>
 80040fe:	e7f0      	b.n	80040e2 <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004100:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004104:	d1b3      	bne.n	800406e <HAL_DMA_Init+0x6e>
 8004106:	e7ee      	b.n	80040e6 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8004108:	2a03      	cmp	r2, #3
 800410a:	d8b0      	bhi.n	800406e <HAL_DMA_Init+0x6e>
 800410c:	a001      	add	r0, pc, #4	; (adr r0, 8004114 <HAL_DMA_Init+0x114>)
 800410e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004112:	bf00      	nop
 8004114:	080040e7 	.word	0x080040e7
 8004118:	080040e3 	.word	0x080040e3
 800411c:	080040e7 	.word	0x080040e7
 8004120:	08004101 	.word	0x08004101
 8004124:	f010803f 	.word	0xf010803f
 8004128:	aaaaaaab 	.word	0xaaaaaaab
 800412c:	0800bf80 	.word	0x0800bf80

08004130 <HAL_DMA_Start_IT>:
{
 8004130:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8004132:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004136:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8004138:	2c01      	cmp	r4, #1
 800413a:	d035      	beq.n	80041a8 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 800413c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8004140:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004144:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8004146:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800414a:	d005      	beq.n	8004158 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800414c:	2300      	movs	r3, #0
 800414e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8004152:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8004154:	2002      	movs	r0, #2
}
 8004156:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004158:	2602      	movs	r6, #2
 800415a:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800415e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004160:	2600      	movs	r6, #0
 8004162:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004164:	6826      	ldr	r6, [r4, #0]
 8004166:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800416a:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800416c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800416e:	6883      	ldr	r3, [r0, #8]
 8004170:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8004172:	bf0e      	itee	eq
 8004174:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8004176:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8004178:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800417c:	bf08      	it	eq
 800417e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004180:	233f      	movs	r3, #63	; 0x3f
 8004182:	4093      	lsls	r3, r2
 8004184:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004186:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004188:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800418a:	f043 0316 	orr.w	r3, r3, #22
 800418e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004190:	b11a      	cbz	r2, 800419a <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	f043 0308 	orr.w	r3, r3, #8
 8004198:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80041a2:	6023      	str	r3, [r4, #0]
}
 80041a4:	bc70      	pop	{r4, r5, r6}
 80041a6:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80041a8:	2002      	movs	r0, #2
}
 80041aa:	bc70      	pop	{r4, r5, r6}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop

080041b0 <HAL_DMA_IRQHandler>:
{
 80041b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b4:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 80041b6:	4a74      	ldr	r2, [pc, #464]	; (8004388 <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80041ba:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80041c2:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c4:	2208      	movs	r2, #8
 80041c6:	409a      	lsls	r2, r3
 80041c8:	4222      	tst	r2, r4
{
 80041ca:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041cc:	d004      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041ce:	6801      	ldr	r1, [r0, #0]
 80041d0:	680f      	ldr	r7, [r1, #0]
 80041d2:	0778      	lsls	r0, r7, #29
 80041d4:	f100 808a 	bmi.w	80042ec <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d8:	2201      	movs	r2, #1
 80041da:	409a      	lsls	r2, r3
 80041dc:	4222      	tst	r2, r4
 80041de:	d004      	beq.n	80041ea <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041e0:	f8d8 1000 	ldr.w	r1, [r8]
 80041e4:	6949      	ldr	r1, [r1, #20]
 80041e6:	0609      	lsls	r1, r1, #24
 80041e8:	d478      	bmi.n	80042dc <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ea:	2204      	movs	r2, #4
 80041ec:	409a      	lsls	r2, r3
 80041ee:	4222      	tst	r2, r4
 80041f0:	d004      	beq.n	80041fc <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041f2:	f8d8 1000 	ldr.w	r1, [r8]
 80041f6:	6809      	ldr	r1, [r1, #0]
 80041f8:	078f      	lsls	r7, r1, #30
 80041fa:	d467      	bmi.n	80042cc <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041fc:	2210      	movs	r2, #16
 80041fe:	409a      	lsls	r2, r3
 8004200:	4222      	tst	r2, r4
 8004202:	d004      	beq.n	800420e <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004204:	f8d8 1000 	ldr.w	r1, [r8]
 8004208:	680f      	ldr	r7, [r1, #0]
 800420a:	0738      	lsls	r0, r7, #28
 800420c:	d449      	bmi.n	80042a2 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800420e:	2220      	movs	r2, #32
 8004210:	409a      	lsls	r2, r3
 8004212:	4222      	tst	r2, r4
 8004214:	d017      	beq.n	8004246 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004216:	f8d8 1000 	ldr.w	r1, [r8]
 800421a:	680c      	ldr	r4, [r1, #0]
 800421c:	06e0      	lsls	r0, r4, #27
 800421e:	d512      	bpl.n	8004246 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004220:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004222:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8004226:	2a05      	cmp	r2, #5
 8004228:	d073      	beq.n	8004312 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800422a:	680b      	ldr	r3, [r1, #0]
 800422c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004230:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004232:	f000 8090 	beq.w	8004356 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004236:	0319      	lsls	r1, r3, #12
 8004238:	f140 809b 	bpl.w	8004372 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 800423c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8004240:	b10b      	cbz	r3, 8004246 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8004242:	4640      	mov	r0, r8
 8004244:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004246:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800424a:	b33b      	cbz	r3, 800429c <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800424c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8004250:	07da      	lsls	r2, r3, #31
 8004252:	d51b      	bpl.n	800428c <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8004254:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004258:	494c      	ldr	r1, [pc, #304]	; (800438c <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800425a:	2305      	movs	r3, #5
 800425c:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004260:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004262:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8004266:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800426a:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e002      	b.n	8004276 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004270:	6813      	ldr	r3, [r2, #0]
 8004272:	07db      	lsls	r3, r3, #31
 8004274:	d504      	bpl.n	8004280 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8004276:	9b01      	ldr	r3, [sp, #4]
 8004278:	3301      	adds	r3, #1
 800427a:	42ab      	cmp	r3, r5
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	d9f7      	bls.n	8004270 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8004280:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8004282:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8004284:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8004288:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800428c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8004290:	b123      	cbz	r3, 800429c <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8004292:	4640      	mov	r0, r8
}
 8004294:	b002      	add	sp, #8
 8004296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800429a:	4718      	bx	r3
}
 800429c:	b002      	add	sp, #8
 800429e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042a2:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042a4:	680a      	ldr	r2, [r1, #0]
 80042a6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042aa:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ac:	d12a      	bne.n	8004304 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ae:	05d7      	lsls	r7, r2, #23
 80042b0:	d403      	bmi.n	80042ba <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b2:	680a      	ldr	r2, [r1, #0]
 80042b4:	f022 0208 	bic.w	r2, r2, #8
 80042b8:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80042ba:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80042be:	2a00      	cmp	r2, #0
 80042c0:	d0a5      	beq.n	800420e <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 80042c2:	4640      	mov	r0, r8
 80042c4:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042c6:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80042ca:	e7a0      	b.n	800420e <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042cc:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042ce:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80042d2:	f042 0204 	orr.w	r2, r2, #4
 80042d6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80042da:	e78f      	b.n	80041fc <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042dc:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042de:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80042e2:	f042 0202 	orr.w	r2, r2, #2
 80042e6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80042ea:	e77e      	b.n	80041ea <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042ec:	680f      	ldr	r7, [r1, #0]
 80042ee:	f027 0704 	bic.w	r7, r7, #4
 80042f2:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042f4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042f6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8004302:	e769      	b.n	80041d8 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004304:	0312      	lsls	r2, r2, #12
 8004306:	d5d8      	bpl.n	80042ba <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004308:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800430c:	2a00      	cmp	r2, #0
 800430e:	d1d8      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x112>
 8004310:	e77d      	b.n	800420e <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004312:	680a      	ldr	r2, [r1, #0]
 8004314:	f022 0216 	bic.w	r2, r2, #22
 8004318:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800431a:	694a      	ldr	r2, [r1, #20]
 800431c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004320:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004322:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8004326:	b352      	cbz	r2, 800437e <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004328:	680a      	ldr	r2, [r1, #0]
 800432a:	f022 0208 	bic.w	r2, r2, #8
 800432e:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004330:	223f      	movs	r2, #63	; 0x3f
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8004336:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800433a:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800433c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 800433e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8004340:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004344:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8004348:	2900      	cmp	r1, #0
 800434a:	d0a7      	beq.n	800429c <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 800434c:	4640      	mov	r0, r8
}
 800434e:	b002      	add	sp, #8
 8004350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8004354:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004356:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800435a:	f47f af6f 	bne.w	800423c <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800435e:	680a      	ldr	r2, [r1, #0]
 8004360:	f022 0210 	bic.w	r2, r2, #16
 8004364:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004366:	2201      	movs	r2, #1
 8004368:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800436c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8004370:	e764      	b.n	800423c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8004372:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8004376:	2b00      	cmp	r3, #0
 8004378:	f47f af63 	bne.w	8004242 <HAL_DMA_IRQHandler+0x92>
 800437c:	e763      	b.n	8004246 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800437e:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8004382:	2a00      	cmp	r2, #0
 8004384:	d1d0      	bne.n	8004328 <HAL_DMA_IRQHandler+0x178>
 8004386:	e7d3      	b.n	8004330 <HAL_DMA_IRQHandler+0x180>
 8004388:	20000008 	.word	0x20000008
 800438c:	1b4e81b5 	.word	0x1b4e81b5

08004390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004394:	2200      	movs	r2, #0
 8004396:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004398:	4e70      	ldr	r6, [pc, #448]	; (800455c <HAL_GPIO_Init+0x1cc>)
{
 800439a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800439c:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 800439e:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a2:	4689      	mov	r9, r1
 80043a4:	e004      	b.n	80043b0 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043a6:	3301      	adds	r3, #1
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	f102 0202 	add.w	r2, r2, #2
 80043ae:	d078      	beq.n	80044a2 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 80043b0:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043b4:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 80043b8:	43a1      	bics	r1, r4
 80043ba:	d1f4      	bne.n	80043a6 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043bc:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80043c0:	f00c 0103 	and.w	r1, ip, #3
 80043c4:	1e4d      	subs	r5, r1, #1
 80043c6:	2d01      	cmp	r5, #1
 80043c8:	d96e      	bls.n	80044a8 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ca:	2903      	cmp	r1, #3
 80043cc:	f040 80ae 	bne.w	800452c <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043d0:	4091      	lsls	r1, r2
 80043d2:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 80043d4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043d6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d8:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043da:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 80043de:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e0:	d0e1      	beq.n	80043a6 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043e2:	4d5f      	ldr	r5, [pc, #380]	; (8004560 <HAL_GPIO_Init+0x1d0>)
 80043e4:	2100      	movs	r1, #0
 80043e6:	9103      	str	r1, [sp, #12]
 80043e8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80043ea:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80043ee:	6469      	str	r1, [r5, #68]	; 0x44
 80043f0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80043f2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80043f6:	9103      	str	r1, [sp, #12]
 80043f8:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80043fa:	f023 0103 	bic.w	r1, r3, #3
 80043fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004402:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004406:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800440a:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800440e:	00bf      	lsls	r7, r7, #2
 8004410:	250f      	movs	r5, #15
 8004412:	40bd      	lsls	r5, r7
 8004414:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004418:	4d52      	ldr	r5, [pc, #328]	; (8004564 <HAL_GPIO_Init+0x1d4>)
 800441a:	42a8      	cmp	r0, r5
 800441c:	d017      	beq.n	800444e <HAL_GPIO_Init+0xbe>
 800441e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004422:	42a8      	cmp	r0, r5
 8004424:	f000 8086 	beq.w	8004534 <HAL_GPIO_Init+0x1a4>
 8004428:	4d4f      	ldr	r5, [pc, #316]	; (8004568 <HAL_GPIO_Init+0x1d8>)
 800442a:	42a8      	cmp	r0, r5
 800442c:	f000 8087 	beq.w	800453e <HAL_GPIO_Init+0x1ae>
 8004430:	4d4e      	ldr	r5, [pc, #312]	; (800456c <HAL_GPIO_Init+0x1dc>)
 8004432:	42a8      	cmp	r0, r5
 8004434:	f000 808a 	beq.w	800454c <HAL_GPIO_Init+0x1bc>
 8004438:	4d4d      	ldr	r5, [pc, #308]	; (8004570 <HAL_GPIO_Init+0x1e0>)
 800443a:	42a8      	cmp	r0, r5
 800443c:	bf0c      	ite	eq
 800443e:	f04f 0e04 	moveq.w	lr, #4
 8004442:	f04f 0e07 	movne.w	lr, #7
 8004446:	fa0e f707 	lsl.w	r7, lr, r7
 800444a:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800444e:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8004452:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004454:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004458:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800445c:	bf0c      	ite	eq
 800445e:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004460:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8004464:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8004466:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004468:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 800446c:	bf0c      	ite	eq
 800446e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004470:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8004474:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8004476:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004478:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800447c:	bf0c      	ite	eq
 800447e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004480:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8004484:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004486:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004488:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8004490:	bf0c      	ite	eq
 8004492:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004494:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004498:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800449a:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800449c:	f102 0202 	add.w	r2, r2, #2
 80044a0:	d186      	bne.n	80043b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044a2:	b005      	add	sp, #20
 80044a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044a8:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 80044ac:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044ae:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044b2:	2503      	movs	r5, #3
 80044b4:	fa05 fe02 	lsl.w	lr, r5, r2
 80044b8:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044bc:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 80044c0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80044c2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044c4:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044c8:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044cc:	f3cc 1700 	ubfx	r7, ip, #4, #1
 80044d0:	409f      	lsls	r7, r3
 80044d2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80044d6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80044d8:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044da:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044de:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80044e2:	4097      	lsls	r7, r2
 80044e4:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e8:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80044ea:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ec:	fa01 f102 	lsl.w	r1, r1, r2
 80044f0:	f47f af70 	bne.w	80043d4 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 80044f4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80044f8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044fc:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004500:	f8de 7020 	ldr.w	r7, [lr, #32]
 8004504:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004506:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800450a:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800450e:	fa07 f708 	lsl.w	r7, r7, r8
 8004512:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004514:	270f      	movs	r7, #15
 8004516:	fa07 f808 	lsl.w	r8, r7, r8
 800451a:	9f00      	ldr	r7, [sp, #0]
 800451c:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004520:	9f01      	ldr	r7, [sp, #4]
 8004522:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8004526:	f8ce 7020 	str.w	r7, [lr, #32]
 800452a:	e753      	b.n	80043d4 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800452c:	2503      	movs	r5, #3
 800452e:	4095      	lsls	r5, r2
 8004530:	43ed      	mvns	r5, r5
 8004532:	e7d1      	b.n	80044d8 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004534:	fa0a f707 	lsl.w	r7, sl, r7
 8004538:	ea48 0807 	orr.w	r8, r8, r7
 800453c:	e787      	b.n	800444e <HAL_GPIO_Init+0xbe>
 800453e:	f04f 0e02 	mov.w	lr, #2
 8004542:	fa0e f707 	lsl.w	r7, lr, r7
 8004546:	ea48 0807 	orr.w	r8, r8, r7
 800454a:	e780      	b.n	800444e <HAL_GPIO_Init+0xbe>
 800454c:	f04f 0e03 	mov.w	lr, #3
 8004550:	fa0e f707 	lsl.w	r7, lr, r7
 8004554:	ea48 0807 	orr.w	r8, r8, r7
 8004558:	e779      	b.n	800444e <HAL_GPIO_Init+0xbe>
 800455a:	bf00      	nop
 800455c:	40013c00 	.word	0x40013c00
 8004560:	40023800 	.word	0x40023800
 8004564:	40020000 	.word	0x40020000
 8004568:	40020800 	.word	0x40020800
 800456c:	40020c00 	.word	0x40020c00
 8004570:	40021000 	.word	0x40021000

08004574 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004574:	b902      	cbnz	r2, 8004578 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004576:	0409      	lsls	r1, r1, #16
 8004578:	6181      	str	r1, [r0, #24]
  }
}
 800457a:	4770      	bx	lr

0800457c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800457c:	4a04      	ldr	r2, [pc, #16]	; (8004590 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800457e:	6951      	ldr	r1, [r2, #20]
 8004580:	4201      	tst	r1, r0
 8004582:	d100      	bne.n	8004586 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004584:	4770      	bx	lr
{
 8004586:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004588:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800458a:	f7fe f8cb 	bl	8002724 <HAL_GPIO_EXTI_Callback>
  }
}
 800458e:	bd08      	pop	{r3, pc}
 8004590:	40013c00 	.word	0x40013c00

08004594 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004598:	6804      	ldr	r4, [r0, #0]
{
 800459a:	b083      	sub	sp, #12
 800459c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459e:	6823      	ldr	r3, [r4, #0]
{
 80045a0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80045a4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80045ac:	4606      	mov	r6, r0
 80045ae:	468a      	mov	sl, r1
 80045b0:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b2:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80045b4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80045b8:	d135      	bne.n	8004626 <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ba:	6965      	ldr	r5, [r4, #20]
 80045bc:	07e8      	lsls	r0, r5, #31
 80045be:	d5fc      	bpl.n	80045ba <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045c0:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 80045c4:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80045c6:	f1b9 3fff 	cmp.w	r9, #4294967295
 80045ca:	d003      	beq.n	80045d4 <I2C_RequestMemoryWrite+0x40>
 80045cc:	e04e      	b.n	800466c <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ce:	6961      	ldr	r1, [r4, #20]
 80045d0:	054d      	lsls	r5, r1, #21
 80045d2:	d45c      	bmi.n	800468e <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045d4:	6961      	ldr	r1, [r4, #20]
 80045d6:	078b      	lsls	r3, r1, #30
 80045d8:	d5f9      	bpl.n	80045ce <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045da:	2300      	movs	r3, #0
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	6963      	ldr	r3, [r4, #20]
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	69a3      	ldr	r3, [r4, #24]
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80045ec:	f040 8087 	bne.w	80046fe <I2C_RequestMemoryWrite+0x16a>
 80045f0:	6963      	ldr	r3, [r4, #20]
 80045f2:	061a      	lsls	r2, r3, #24
 80045f4:	d463      	bmi.n	80046be <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f6:	6963      	ldr	r3, [r4, #20]
 80045f8:	055b      	lsls	r3, r3, #21
 80045fa:	d5f9      	bpl.n	80045f0 <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045fc:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80045fe:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004600:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004604:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004606:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004608:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004610:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004612:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004616:	f043 0304 	orr.w	r3, r3, #4
 800461a:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800461e:	2b04      	cmp	r3, #4
 8004620:	d066      	beq.n	80046f0 <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 8004622:	2001      	movs	r0, #1
 8004624:	e01f      	b.n	8004666 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004626:	6963      	ldr	r3, [r4, #20]
 8004628:	07d9      	lsls	r1, r3, #31
 800462a:	d4c9      	bmi.n	80045c0 <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462c:	f7ff f9f8 	bl	8003a20 <HAL_GetTick>
 8004630:	eba0 000b 	sub.w	r0, r0, fp
 8004634:	4581      	cmp	r9, r0
 8004636:	d304      	bcc.n	8004642 <I2C_RequestMemoryWrite+0xae>
 8004638:	f1b9 0f00 	cmp.w	r9, #0
 800463c:	d001      	beq.n	8004642 <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800463e:	6834      	ldr	r4, [r6, #0]
 8004640:	e7b8      	b.n	80045b4 <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004642:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004644:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004646:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004648:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800464c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004650:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004652:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8004654:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004658:	f042 0220 	orr.w	r2, r2, #32
 800465c:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800465e:	680b      	ldr	r3, [r1, #0]
 8004660:	05dc      	lsls	r4, r3, #23
 8004662:	d435      	bmi.n	80046d0 <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 8004664:	2003      	movs	r0, #3
}
 8004666:	b003      	add	sp, #12
 8004668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800466c:	6963      	ldr	r3, [r4, #20]
 800466e:	0798      	lsls	r0, r3, #30
 8004670:	d4b3      	bmi.n	80045da <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004672:	6963      	ldr	r3, [r4, #20]
 8004674:	055a      	lsls	r2, r3, #21
 8004676:	d40a      	bmi.n	800468e <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004678:	f7ff f9d2 	bl	8003a20 <HAL_GetTick>
 800467c:	eba0 000b 	sub.w	r0, r0, fp
 8004680:	4581      	cmp	r9, r0
 8004682:	d34e      	bcc.n	8004722 <I2C_RequestMemoryWrite+0x18e>
 8004684:	f1b9 0f00 	cmp.w	r9, #0
 8004688:	d04b      	beq.n	8004722 <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800468a:	6834      	ldr	r4, [r6, #0]
 800468c:	e79b      	b.n	80045c6 <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004694:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004696:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004698:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800469c:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800469e:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046a0:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046a2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a6:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046aa:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80046ac:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046b0:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 80046b4:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046b6:	6433      	str	r3, [r6, #64]	; 0x40
}
 80046b8:	b003      	add	sp, #12
 80046ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046be:	f1b8 0f01 	cmp.w	r8, #1
 80046c2:	d109      	bne.n	80046d8 <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046c4:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 80046c6:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046c8:	6127      	str	r7, [r4, #16]
}
 80046ca:	b003      	add	sp, #12
 80046cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046d4:	6433      	str	r3, [r6, #64]	; 0x40
 80046d6:	e7c5      	b.n	8004664 <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046d8:	0a3b      	lsrs	r3, r7, #8
 80046da:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046dc:	f1b9 3fff 	cmp.w	r9, #4294967295
 80046e0:	d12e      	bne.n	8004740 <I2C_RequestMemoryWrite+0x1ac>
 80046e2:	6963      	ldr	r3, [r4, #20]
 80046e4:	0619      	lsls	r1, r3, #24
 80046e6:	d4ed      	bmi.n	80046c4 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e8:	6963      	ldr	r3, [r4, #20]
 80046ea:	055a      	lsls	r2, r3, #21
 80046ec:	d5f9      	bpl.n	80046e2 <I2C_RequestMemoryWrite+0x14e>
 80046ee:	e785      	b.n	80045fc <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f0:	6832      	ldr	r2, [r6, #0]
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 80046f8:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	e7b3      	b.n	8004666 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046fe:	6963      	ldr	r3, [r4, #20]
 8004700:	061d      	lsls	r5, r3, #24
 8004702:	d4dc      	bmi.n	80046be <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004704:	6963      	ldr	r3, [r4, #20]
 8004706:	0559      	lsls	r1, r3, #21
 8004708:	f53f af78 	bmi.w	80045fc <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7ff f988 	bl	8003a20 <HAL_GetTick>
 8004710:	eba0 000b 	sub.w	r0, r0, fp
 8004714:	4581      	cmp	r9, r0
 8004716:	d325      	bcc.n	8004764 <I2C_RequestMemoryWrite+0x1d0>
 8004718:	f1b9 0f00 	cmp.w	r9, #0
 800471c:	d022      	beq.n	8004764 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800471e:	6834      	ldr	r4, [r6, #0]
 8004720:	e762      	b.n	80045e8 <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004722:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004724:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004726:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004728:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004730:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004732:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004736:	f043 0320 	orr.w	r3, r3, #32
 800473a:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 800473c:	2001      	movs	r0, #1
 800473e:	e792      	b.n	8004666 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004740:	6963      	ldr	r3, [r4, #20]
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	d4be      	bmi.n	80046c4 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004746:	6963      	ldr	r3, [r4, #20]
 8004748:	0558      	lsls	r0, r3, #21
 800474a:	f53f af57 	bmi.w	80045fc <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474e:	f7ff f967 	bl	8003a20 <HAL_GetTick>
 8004752:	eba0 000b 	sub.w	r0, r0, fp
 8004756:	4581      	cmp	r9, r0
 8004758:	d304      	bcc.n	8004764 <I2C_RequestMemoryWrite+0x1d0>
 800475a:	f1b9 0f00 	cmp.w	r9, #0
 800475e:	d001      	beq.n	8004764 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004760:	6834      	ldr	r4, [r6, #0]
 8004762:	e7bb      	b.n	80046dc <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004764:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004766:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004768:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800476a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800476e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004772:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004774:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	f043 0320 	orr.w	r3, r3, #32
 800477c:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800477e:	e74d      	b.n	800461c <I2C_RequestMemoryWrite+0x88>

08004780 <I2C_RequestMemoryRead>:
{
 8004780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004784:	6804      	ldr	r4, [r0, #0]
{
 8004786:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478e:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004790:	6823      	ldr	r3, [r4, #0]
{
 8004792:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8004798:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800479c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a0:	6023      	str	r3, [r4, #0]
{
 80047a2:	4606      	mov	r6, r0
 80047a4:	468b      	mov	fp, r1
 80047a6:	4617      	mov	r7, r2
 80047a8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80047ac:	d139      	bne.n	8004822 <I2C_RequestMemoryRead+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ae:	6965      	ldr	r5, [r4, #20]
 80047b0:	07eb      	lsls	r3, r5, #31
 80047b2:	d5fc      	bpl.n	80047ae <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047b4:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	fa5f fb8b 	uxtb.w	fp, fp
 80047be:	f1ba 3fff 	cmp.w	sl, #4294967295
 80047c2:	d003      	beq.n	80047cc <I2C_RequestMemoryRead+0x4c>
 80047c4:	e068      	b.n	8004898 <I2C_RequestMemoryRead+0x118>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c6:	6961      	ldr	r1, [r4, #20]
 80047c8:	054a      	lsls	r2, r1, #21
 80047ca:	d450      	bmi.n	800486e <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047cc:	6961      	ldr	r1, [r4, #20]
 80047ce:	0789      	lsls	r1, r1, #30
 80047d0:	d5f9      	bpl.n	80047c6 <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d2:	2300      	movs	r3, #0
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	6963      	ldr	r3, [r4, #20]
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	69a3      	ldr	r3, [r4, #24]
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80047e4:	f040 80b8 	bne.w	8004958 <I2C_RequestMemoryRead+0x1d8>
 80047e8:	6963      	ldr	r3, [r4, #20]
 80047ea:	0618      	lsls	r0, r3, #24
 80047ec:	d467      	bmi.n	80048be <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ee:	6963      	ldr	r3, [r4, #20]
 80047f0:	0559      	lsls	r1, r3, #21
 80047f2:	d5f9      	bpl.n	80047e8 <I2C_RequestMemoryRead+0x68>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80047f4:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80047f6:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80047fc:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80047fe:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004800:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004804:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004808:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800480a:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800480e:	f043 0304 	orr.w	r3, r3, #4
 8004812:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004814:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004816:	2b04      	cmp	r3, #4
 8004818:	d06c      	beq.n	80048f4 <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 800481a:	2001      	movs	r0, #1
}
 800481c:	b003      	add	sp, #12
 800481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004822:	6963      	ldr	r3, [r4, #20]
 8004824:	07dd      	lsls	r5, r3, #31
 8004826:	d4c5      	bmi.n	80047b4 <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004828:	f7ff f8fa 	bl	8003a20 <HAL_GetTick>
 800482c:	eba0 0009 	sub.w	r0, r0, r9
 8004830:	4582      	cmp	sl, r0
 8004832:	d304      	bcc.n	800483e <I2C_RequestMemoryRead+0xbe>
 8004834:	f1ba 0f00 	cmp.w	sl, #0
 8004838:	d001      	beq.n	800483e <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800483a:	6834      	ldr	r4, [r6, #0]
 800483c:	e7b4      	b.n	80047a8 <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800483e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004840:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004842:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004844:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004848:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800484c:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800484e:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8004850:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004854:	f042 0220 	orr.w	r2, r2, #32
 8004858:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800485a:	680b      	ldr	r3, [r1, #0]
 800485c:	05dc      	lsls	r4, r3, #23
 800485e:	d502      	bpl.n	8004866 <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004864:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 8004866:	2003      	movs	r0, #3
}
 8004868:	b003      	add	sp, #12
 800486a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004874:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004876:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004878:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800487e:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004880:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004882:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004886:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800488a:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800488c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004890:	f043 0304 	orr.w	r3, r3, #4
 8004894:	6433      	str	r3, [r6, #64]	; 0x40
 8004896:	e7c0      	b.n	800481a <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004898:	6963      	ldr	r3, [r4, #20]
 800489a:	079b      	lsls	r3, r3, #30
 800489c:	d499      	bmi.n	80047d2 <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800489e:	6963      	ldr	r3, [r4, #20]
 80048a0:	0558      	lsls	r0, r3, #21
 80048a2:	d4e4      	bmi.n	800486e <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a4:	f7ff f8bc 	bl	8003a20 <HAL_GetTick>
 80048a8:	eba0 0009 	sub.w	r0, r0, r9
 80048ac:	4582      	cmp	sl, r0
 80048ae:	f0c0 808b 	bcc.w	80049c8 <I2C_RequestMemoryRead+0x248>
 80048b2:	f1ba 0f00 	cmp.w	sl, #0
 80048b6:	f000 8087 	beq.w	80049c8 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ba:	6834      	ldr	r4, [r6, #0]
 80048bc:	e77f      	b.n	80047be <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048be:	f1b8 0f01 	cmp.w	r8, #1
 80048c2:	d10b      	bne.n	80048dc <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048c4:	b2ff      	uxtb	r7, r7
 80048c6:	6127      	str	r7, [r4, #16]
 80048c8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80048cc:	d16a      	bne.n	80049a4 <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ce:	6963      	ldr	r3, [r4, #20]
 80048d0:	061b      	lsls	r3, r3, #24
 80048d2:	d416      	bmi.n	8004902 <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048d4:	6963      	ldr	r3, [r4, #20]
 80048d6:	055f      	lsls	r7, r3, #21
 80048d8:	d5f9      	bpl.n	80048ce <I2C_RequestMemoryRead+0x14e>
 80048da:	e78b      	b.n	80047f4 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048dc:	0a3b      	lsrs	r3, r7, #8
 80048de:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80048e4:	d17f      	bne.n	80049e6 <I2C_RequestMemoryRead+0x266>
 80048e6:	6963      	ldr	r3, [r4, #20]
 80048e8:	061d      	lsls	r5, r3, #24
 80048ea:	d4eb      	bmi.n	80048c4 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ec:	6963      	ldr	r3, [r4, #20]
 80048ee:	0558      	lsls	r0, r3, #21
 80048f0:	d5f9      	bpl.n	80048e6 <I2C_RequestMemoryRead+0x166>
 80048f2:	e77f      	b.n	80047f4 <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f4:	6832      	ldr	r2, [r6, #0]
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 80048fc:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	e78c      	b.n	800481c <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800490a:	f1ba 3fff 	cmp.w	sl, #4294967295
 800490e:	d113      	bne.n	8004938 <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004910:	6963      	ldr	r3, [r4, #20]
 8004912:	07d8      	lsls	r0, r3, #31
 8004914:	d5fc      	bpl.n	8004910 <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004916:	f04b 0301 	orr.w	r3, fp, #1
 800491a:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800491c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004920:	d003      	beq.n	800492a <I2C_RequestMemoryRead+0x1aa>
 8004922:	e02b      	b.n	800497c <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004924:	6963      	ldr	r3, [r4, #20]
 8004926:	055b      	lsls	r3, r3, #21
 8004928:	d4a1      	bmi.n	800486e <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800492a:	6963      	ldr	r3, [r4, #20]
 800492c:	43db      	mvns	r3, r3
 800492e:	f013 0302 	ands.w	r3, r3, #2
 8004932:	d1f7      	bne.n	8004924 <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 8004934:	4618      	mov	r0, r3
 8004936:	e771      	b.n	800481c <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004938:	6963      	ldr	r3, [r4, #20]
 800493a:	07d9      	lsls	r1, r3, #31
 800493c:	d4eb      	bmi.n	8004916 <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7ff f86f 	bl	8003a20 <HAL_GetTick>
 8004942:	eba0 0009 	sub.w	r0, r0, r9
 8004946:	4582      	cmp	sl, r0
 8004948:	f4ff af79 	bcc.w	800483e <I2C_RequestMemoryRead+0xbe>
 800494c:	f1ba 0f00 	cmp.w	sl, #0
 8004950:	f43f af75 	beq.w	800483e <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004954:	6834      	ldr	r4, [r6, #0]
 8004956:	e7d8      	b.n	800490a <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004958:	6963      	ldr	r3, [r4, #20]
 800495a:	061a      	lsls	r2, r3, #24
 800495c:	d4af      	bmi.n	80048be <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800495e:	6963      	ldr	r3, [r4, #20]
 8004960:	055d      	lsls	r5, r3, #21
 8004962:	f53f af47 	bmi.w	80047f4 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7ff f85b 	bl	8003a20 <HAL_GetTick>
 800496a:	eba0 0009 	sub.w	r0, r0, r9
 800496e:	4582      	cmp	sl, r0
 8004970:	d34c      	bcc.n	8004a0c <I2C_RequestMemoryRead+0x28c>
 8004972:	f1ba 0f00 	cmp.w	sl, #0
 8004976:	d049      	beq.n	8004a0c <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004978:	6834      	ldr	r4, [r6, #0]
 800497a:	e731      	b.n	80047e0 <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800497c:	6963      	ldr	r3, [r4, #20]
 800497e:	43db      	mvns	r3, r3
 8004980:	f013 0302 	ands.w	r3, r3, #2
 8004984:	d0d6      	beq.n	8004934 <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004986:	6963      	ldr	r3, [r4, #20]
 8004988:	055a      	lsls	r2, r3, #21
 800498a:	f53f af70 	bmi.w	800486e <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7ff f847 	bl	8003a20 <HAL_GetTick>
 8004992:	eba0 0009 	sub.w	r0, r0, r9
 8004996:	4582      	cmp	sl, r0
 8004998:	d316      	bcc.n	80049c8 <I2C_RequestMemoryRead+0x248>
 800499a:	f1ba 0f00 	cmp.w	sl, #0
 800499e:	d013      	beq.n	80049c8 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a0:	6834      	ldr	r4, [r6, #0]
 80049a2:	e7bb      	b.n	800491c <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a4:	6963      	ldr	r3, [r4, #20]
 80049a6:	061d      	lsls	r5, r3, #24
 80049a8:	d4ab      	bmi.n	8004902 <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049aa:	6963      	ldr	r3, [r4, #20]
 80049ac:	055a      	lsls	r2, r3, #21
 80049ae:	f53f af21 	bmi.w	80047f4 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b2:	f7ff f835 	bl	8003a20 <HAL_GetTick>
 80049b6:	eba0 0009 	sub.w	r0, r0, r9
 80049ba:	4582      	cmp	sl, r0
 80049bc:	d326      	bcc.n	8004a0c <I2C_RequestMemoryRead+0x28c>
 80049be:	f1ba 0f00 	cmp.w	sl, #0
 80049c2:	d023      	beq.n	8004a0c <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049c4:	6834      	ldr	r4, [r6, #0]
 80049c6:	e77f      	b.n	80048c8 <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049c8:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ca:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049cc:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ce:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d2:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d6:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80049d8:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049dc:	f043 0320 	orr.w	r3, r3, #32
 80049e0:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80049e2:	2001      	movs	r0, #1
 80049e4:	e71a      	b.n	800481c <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e6:	6963      	ldr	r3, [r4, #20]
 80049e8:	0619      	lsls	r1, r3, #24
 80049ea:	f53f af6b 	bmi.w	80048c4 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ee:	6963      	ldr	r3, [r4, #20]
 80049f0:	055b      	lsls	r3, r3, #21
 80049f2:	f53f aeff 	bmi.w	80047f4 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f6:	f7ff f813 	bl	8003a20 <HAL_GetTick>
 80049fa:	eba0 0009 	sub.w	r0, r0, r9
 80049fe:	4582      	cmp	sl, r0
 8004a00:	d304      	bcc.n	8004a0c <I2C_RequestMemoryRead+0x28c>
 8004a02:	f1ba 0f00 	cmp.w	sl, #0
 8004a06:	d001      	beq.n	8004a0c <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a08:	6834      	ldr	r4, [r6, #0]
 8004a0a:	e769      	b.n	80048e0 <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a0c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a0e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a10:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a12:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a16:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a1a:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004a1c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a20:	f043 0320 	orr.w	r3, r3, #32
 8004a24:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004a26:	e6f5      	b.n	8004814 <I2C_RequestMemoryRead+0x94>

08004a28 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	f000 80b9 	beq.w	8004ba0 <HAL_I2C_Init+0x178>
{
 8004a2e:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a30:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a34:	4604      	mov	r4, r0
 8004a36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8098 	beq.w	8004b70 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8004a40:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a42:	2224      	movs	r2, #36	; 0x24
 8004a44:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a5e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a60:	f000 fe02 	bl	8005668 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	494f      	ldr	r1, [pc, #316]	; (8004ba4 <HAL_I2C_Init+0x17c>)
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	d84f      	bhi.n	8004b0c <HAL_I2C_Init+0xe4>
 8004a6c:	4a4e      	ldr	r2, [pc, #312]	; (8004ba8 <HAL_I2C_Init+0x180>)
 8004a6e:	4290      	cmp	r0, r2
 8004a70:	d97c      	bls.n	8004b6c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8004a72:	4d4e      	ldr	r5, [pc, #312]	; (8004bac <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a74:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8004a76:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a7a:	1e43      	subs	r3, r0, #1
 8004a7c:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	6850      	ldr	r0, [r2, #4]
 8004a84:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004a88:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8004a8c:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004a8e:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a90:	f101 0c01 	add.w	ip, r1, #1
 8004a94:	6a11      	ldr	r1, [r2, #32]
 8004a96:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004a9a:	ea41 010c 	orr.w	r1, r1, ip
 8004a9e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004aa0:	69d1      	ldr	r1, [r2, #28]
 8004aa2:	f640 7efc 	movw	lr, #4092	; 0xffc
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004aac:	ea13 0f0e 	tst.w	r3, lr
 8004ab0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004ab4:	d161      	bne.n	8004b7a <HAL_I2C_Init+0x152>
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004abc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004ac0:	6811      	ldr	r1, [r2, #0]
 8004ac2:	4303      	orrs	r3, r0
 8004ac4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004acc:	6891      	ldr	r1, [r2, #8]
 8004ace:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8004ad2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004ad6:	4303      	orrs	r3, r0
 8004ad8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ae0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8004ae4:	68d1      	ldr	r1, [r2, #12]
 8004ae6:	4303      	orrs	r3, r0
 8004ae8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004aec:	430b      	orrs	r3, r1
 8004aee:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004af0:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af2:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8004af4:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8004af8:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8004afa:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afc:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b02:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8004b08:	4618      	mov	r0, r3
}
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b0c:	4a28      	ldr	r2, [pc, #160]	; (8004bb0 <HAL_I2C_Init+0x188>)
 8004b0e:	4290      	cmp	r0, r2
 8004b10:	d92c      	bls.n	8004b6c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8004b12:	4d26      	ldr	r5, [pc, #152]	; (8004bac <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b14:	4e27      	ldr	r6, [pc, #156]	; (8004bb4 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8004b16:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b1a:	6822      	ldr	r2, [r4, #0]
 8004b1c:	6855      	ldr	r5, [r2, #4]
 8004b1e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004b22:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8004b26:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004b28:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b2c:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8004b30:	fb05 f101 	mul.w	r1, r5, r1
 8004b34:	fba6 5101 	umull	r5, r1, r6, r1
 8004b38:	6a15      	ldr	r5, [r2, #32]
 8004b3a:	0989      	lsrs	r1, r1, #6
 8004b3c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004b40:	3101      	adds	r1, #1
 8004b42:	4329      	orrs	r1, r5
 8004b44:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b46:	69d1      	ldr	r1, [r2, #28]
 8004b48:	68a5      	ldr	r5, [r4, #8]
 8004b4a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004b4e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004b52:	b9ad      	cbnz	r5, 8004b80 <HAL_I2C_Init+0x158>
 8004b54:	3801      	subs	r0, #1
 8004b56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b5e:	3301      	adds	r3, #1
 8004b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b64:	b1d3      	cbz	r3, 8004b9c <HAL_I2C_Init+0x174>
 8004b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6a:	e7a5      	b.n	8004ab8 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004b6c:	2001      	movs	r0, #1
}
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004b70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004b74:	f7fe f9e2 	bl	8002f3c <HAL_I2C_MspInit>
 8004b78:	e762      	b.n	8004a40 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7e:	e79b      	b.n	8004ab8 <HAL_I2C_Init+0x90>
 8004b80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b84:	3801      	subs	r0, #1
 8004b86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8e:	3301      	adds	r3, #1
 8004b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b94:	b113      	cbz	r3, 8004b9c <HAL_I2C_Init+0x174>
 8004b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b9a:	e78d      	b.n	8004ab8 <HAL_I2C_Init+0x90>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e78b      	b.n	8004ab8 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004ba0:	2001      	movs	r0, #1
}
 8004ba2:	4770      	bx	lr
 8004ba4:	000186a0 	.word	0x000186a0
 8004ba8:	001e847f 	.word	0x001e847f
 8004bac:	431bde83 	.word	0x431bde83
 8004bb0:	003d08ff 	.word	0x003d08ff
 8004bb4:	10624dd3 	.word	0x10624dd3

08004bb8 <HAL_I2C_Mem_Write>:
{
 8004bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	4699      	mov	r9, r3
 8004bc2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004bc6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004bc8:	460f      	mov	r7, r1
 8004bca:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004bcc:	f7fe ff28 	bl	8003a20 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d004      	beq.n	8004be2 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8004bd8:	2702      	movs	r7, #2
}
 8004bda:	4638      	mov	r0, r7
 8004bdc:	b003      	add	sp, #12
 8004bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be2:	4605      	mov	r5, r0
 8004be4:	e005      	b.n	8004bf2 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fe ff1b 	bl	8003a20 <HAL_GetTick>
 8004bea:	1b40      	subs	r0, r0, r5
 8004bec:	2819      	cmp	r0, #25
 8004bee:	f200 80aa 	bhi.w	8004d46 <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf2:	6820      	ldr	r0, [r4, #0]
 8004bf4:	6983      	ldr	r3, [r0, #24]
 8004bf6:	ea6f 0c03 	mvn.w	ip, r3
 8004bfa:	f01c 0b02 	ands.w	fp, ip, #2
 8004bfe:	d0f2      	beq.n	8004be6 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8004c00:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d0e7      	beq.n	8004bd8 <HAL_I2C_Mem_Write+0x20>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c0e:	6803      	ldr	r3, [r0, #0]
 8004c10:	07db      	lsls	r3, r3, #31
 8004c12:	d571      	bpl.n	8004cf8 <HAL_I2C_Mem_Write+0x140>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c14:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c16:	6807      	ldr	r7, [r0, #0]
 8004c18:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004c1c:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004c1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004c20:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c22:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c24:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c28:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c2c:	2040      	movs	r0, #64	; 0x40
 8004c2e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c32:	2000      	movs	r0, #0
 8004c34:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004c36:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c3a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004c3c:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c3e:	4857      	ldr	r0, [pc, #348]	; (8004d9c <HAL_I2C_Mem_Write+0x1e4>)
 8004c40:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c42:	464b      	mov	r3, r9
 8004c44:	4642      	mov	r2, r8
 8004c46:	4620      	mov	r0, r4
 8004c48:	f7ff fca4 	bl	8004594 <I2C_RequestMemoryWrite>
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	b9f8      	cbnz	r0, 8004c90 <HAL_I2C_Mem_Write+0xd8>
    while (hi2c->XferSize > 0U)
 8004c50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80a0 	beq.w	8004d98 <HAL_I2C_Mem_Write+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	1c72      	adds	r2, r6, #1
 8004c5c:	d158      	bne.n	8004d10 <HAL_I2C_Mem_Write+0x158>
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	0610      	lsls	r0, r2, #24
 8004c62:	d41a      	bmi.n	8004c9a <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	0551      	lsls	r1, r2, #21
 8004c68:	d5f9      	bpl.n	8004c5e <HAL_I2C_Mem_Write+0xa6>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c70:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c72:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c74:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c76:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004c80:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c84:	f043 0304 	orr.w	r3, r3, #4
 8004c88:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d038      	beq.n	8004d02 <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 8004c90:	2701      	movs	r7, #1
}
 8004c92:	4638      	mov	r0, r7
 8004c94:	b003      	add	sp, #12
 8004c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c9a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004c9e:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca2:	4661      	mov	r1, ip
      hi2c->XferSize--;
 8004ca4:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cac:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8004cae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004cb0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004cb2:	3a01      	subs	r2, #1
 8004cb4:	b292      	uxth	r2, r2
 8004cb6:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004cb8:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cba:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8004cbc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cbe:	0740      	lsls	r0, r0, #29
 8004cc0:	d517      	bpl.n	8004cf2 <HAL_I2C_Mem_Write+0x13a>
 8004cc2:	b942      	cbnz	r2, 8004cd6 <HAL_I2C_Mem_Write+0x11e>
 8004cc4:	1c72      	adds	r2, r6, #1
 8004cc6:	d159      	bne.n	8004d7c <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cc8:	695a      	ldr	r2, [r3, #20]
 8004cca:	0750      	lsls	r0, r2, #29
 8004ccc:	d449      	bmi.n	8004d62 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	0551      	lsls	r1, r2, #21
 8004cd2:	d5f9      	bpl.n	8004cc8 <HAL_I2C_Mem_Write+0x110>
 8004cd4:	e7c9      	b.n	8004c6a <HAL_I2C_Mem_Write+0xb2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8004cda:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 8004cdc:	f10c 0102 	add.w	r1, ip, #2
 8004ce0:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004ce2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004ce4:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 8004ce8:	3901      	subs	r1, #1
        hi2c->XferSize--;
 8004cea:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8004cec:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8004cee:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004cf0:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	d1b1      	bne.n	8004c5a <HAL_I2C_Mem_Write+0xa2>
 8004cf6:	e7e5      	b.n	8004cc4 <HAL_I2C_Mem_Write+0x10c>
      __HAL_I2C_ENABLE(hi2c);
 8004cf8:	6803      	ldr	r3, [r0, #0]
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6003      	str	r3, [r0, #0]
 8004d00:	e788      	b.n	8004c14 <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	6813      	ldr	r3, [r2, #0]
 8004d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8004d0a:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e764      	b.n	8004bda <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	0612      	lsls	r2, r2, #24
 8004d14:	d4c1      	bmi.n	8004c9a <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	0551      	lsls	r1, r2, #21
 8004d1a:	d4a6      	bmi.n	8004c6a <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1c:	f7fe fe80 	bl	8003a20 <HAL_GetTick>
 8004d20:	1b40      	subs	r0, r0, r5
 8004d22:	4286      	cmp	r6, r0
 8004d24:	d301      	bcc.n	8004d2a <HAL_I2C_Mem_Write+0x172>
 8004d26:	2e00      	cmp	r6, #0
 8004d28:	d196      	bne.n	8004c58 <HAL_I2C_Mem_Write+0xa0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d2a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d2c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d2e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d34:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d38:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004d3a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d3e:	f043 0320 	orr.w	r3, r3, #32
 8004d42:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004d44:	e7a1      	b.n	8004c8a <HAL_I2C_Mem_Write+0xd2>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d46:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d48:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d50:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004d56:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d5a:	f043 0320 	orr.w	r3, r3, #32
 8004d5e:	6423      	str	r3, [r4, #64]	; 0x40
 8004d60:	e73a      	b.n	8004bd8 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d62:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8004d6a:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004d72:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d76:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8004d7a:	e72e      	b.n	8004bda <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	0752      	lsls	r2, r2, #29
 8004d80:	d4ef      	bmi.n	8004d62 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d82:	695a      	ldr	r2, [r3, #20]
 8004d84:	0551      	lsls	r1, r2, #21
 8004d86:	f53f af70 	bmi.w	8004c6a <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8a:	f7fe fe49 	bl	8003a20 <HAL_GetTick>
 8004d8e:	1b40      	subs	r0, r0, r5
 8004d90:	4286      	cmp	r6, r0
 8004d92:	d3ca      	bcc.n	8004d2a <HAL_I2C_Mem_Write+0x172>
 8004d94:	2e00      	cmp	r6, #0
 8004d96:	d0c8      	beq.n	8004d2a <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	e793      	b.n	8004cc4 <HAL_I2C_Mem_Write+0x10c>
 8004d9c:	ffff0000 	.word	0xffff0000

08004da0 <HAL_I2C_Mem_Read>:
{
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	4604      	mov	r4, r0
 8004da6:	b087      	sub	sp, #28
 8004da8:	4699      	mov	r9, r3
 8004daa:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8004dae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004db0:	460f      	mov	r7, r1
 8004db2:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004db4:	f7fe fe34 	bl	8003a20 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d004      	beq.n	8004dca <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8004dc0:	2702      	movs	r7, #2
}
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	b007      	add	sp, #28
 8004dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dca:	4606      	mov	r6, r0
 8004dcc:	e005      	b.n	8004dda <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dce:	f7fe fe27 	bl	8003a20 <HAL_GetTick>
 8004dd2:	1b80      	subs	r0, r0, r6
 8004dd4:	2819      	cmp	r0, #25
 8004dd6:	f200 80d2 	bhi.w	8004f7e <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dda:	f8d4 c000 	ldr.w	ip, [r4]
 8004dde:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8004de2:	43c0      	mvns	r0, r0
 8004de4:	f010 0b02 	ands.w	fp, r0, #2
 8004de8:	d0f1      	beq.n	8004dce <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8004dea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d0e6      	beq.n	8004dc0 <HAL_I2C_Mem_Read+0x20>
 8004df2:	2301      	movs	r3, #1
 8004df4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004df8:	f8dc 3000 	ldr.w	r3, [ip]
 8004dfc:	07d9      	lsls	r1, r3, #31
 8004dfe:	d537      	bpl.n	8004e70 <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e00:	f8dc 0000 	ldr.w	r0, [ip]
 8004e04:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8004e08:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 8004e0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004e0e:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e10:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e12:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e16:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e1a:	2040      	movs	r0, #64	; 0x40
 8004e1c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e20:	2000      	movs	r0, #0
 8004e22:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004e24:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e28:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004e2a:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e2c:	4893      	ldr	r0, [pc, #588]	; (800507c <HAL_I2C_Mem_Read+0x2dc>)
 8004e2e:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e30:	4639      	mov	r1, r7
 8004e32:	464b      	mov	r3, r9
 8004e34:	4642      	mov	r2, r8
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff fca2 	bl	8004780 <I2C_RequestMemoryRead>
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	f040 80ab 	bne.w	8004f9a <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 8004e44:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004e46:	b9d2      	cbnz	r2, 8004e7e <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	9002      	str	r0, [sp, #8]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	9202      	str	r2, [sp, #8]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	9202      	str	r2, [sp, #8]
 8004e54:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5c:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	2220      	movs	r2, #32
 8004e62:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004e66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8004e6e:	e7a8      	b.n	8004dc2 <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 8004e70:	f8dc 3000 	ldr.w	r3, [ip]
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	f8cc 3000 	str.w	r3, [ip]
 8004e7c:	e7c0      	b.n	8004e00 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8004e7e:	2a01      	cmp	r2, #1
 8004e80:	f000 812c 	beq.w	80050dc <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 8004e84:	2a02      	cmp	r2, #2
 8004e86:	f000 80bd 	beq.w	8005004 <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	9005      	str	r0, [sp, #20]
 8004e8e:	6959      	ldr	r1, [r3, #20]
 8004e90:	9105      	str	r1, [sp, #20]
 8004e92:	6999      	ldr	r1, [r3, #24]
 8004e94:	9105      	str	r1, [sp, #20]
 8004e96:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8004e98:	2a03      	cmp	r2, #3
 8004e9a:	d849      	bhi.n	8004f30 <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 8004e9c:	2a01      	cmp	r2, #1
 8004e9e:	f000 80eb 	beq.w	8005078 <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 8004ea2:	2a02      	cmp	r2, #2
 8004ea4:	f000 8089 	beq.w	8004fba <HAL_I2C_Mem_Read+0x21a>
 8004ea8:	1c69      	adds	r1, r5, #1
 8004eaa:	f040 80bb 	bne.w	8005024 <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	0752      	lsls	r2, r2, #29
 8004eb2:	d5fc      	bpl.n	8004eae <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb4:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004ec2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004ec4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004ec6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004ec8:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8004eca:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8004ecc:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8004ece:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004ed0:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004ed2:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004ed4:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004ed6:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	f040 80af 	bne.w	800503c <HAL_I2C_Mem_Read+0x29c>
 8004ede:	6953      	ldr	r3, [r2, #20]
 8004ee0:	075b      	lsls	r3, r3, #29
 8004ee2:	d5fc      	bpl.n	8004ede <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee4:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eec:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eee:	6913      	ldr	r3, [r2, #16]
 8004ef0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004ef2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8004ef4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004ef6:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f00:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8004f02:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8004f04:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8004f08:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004f0a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0e:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8004f10:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004f12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004f14:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004f16:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8004f18:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8004f1a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8004f1c:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8004f1e:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004f20:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004f22:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004f24:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f26:	2a00      	cmp	r2, #0
 8004f28:	d099      	beq.n	8004e5e <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8004f2a:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f2c:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8004f2e:	d9b5      	bls.n	8004e9c <HAL_I2C_Mem_Read+0xfc>
 8004f30:	b95d      	cbnz	r5, 8004f4a <HAL_I2C_Mem_Read+0x1aa>
 8004f32:	e0c5      	b.n	80050c0 <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	06d0      	lsls	r0, r2, #27
 8004f38:	f100 80b2 	bmi.w	80050a0 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3c:	f7fe fd70 	bl	8003a20 <HAL_GetTick>
 8004f40:	1b80      	subs	r0, r0, r6
 8004f42:	4285      	cmp	r5, r0
 8004f44:	f0c0 8086 	bcc.w	8005054 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	0652      	lsls	r2, r2, #25
 8004f4e:	d5f1      	bpl.n	8004f34 <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8004f56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f58:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8004f5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004f5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f64:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8004f66:	3a01      	subs	r2, #1
 8004f68:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004f6a:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f6e:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8004f70:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004f72:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f76:	d5d6      	bpl.n	8004f26 <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f78:	6903      	ldr	r3, [r0, #16]
 8004f7a:	704b      	strb	r3, [r1, #1]
 8004f7c:	e036      	b.n	8004fec <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f7e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f80:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f88:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004f8e:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f92:	f043 0320 	orr.w	r3, r3, #32
 8004f96:	6423      	str	r3, [r4, #64]	; 0x40
 8004f98:	e712      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 8004f9a:	2701      	movs	r7, #1
}
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	b007      	add	sp, #28
 8004fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fa4:	695a      	ldr	r2, [r3, #20]
 8004fa6:	0750      	lsls	r0, r2, #29
 8004fa8:	d40c      	bmi.n	8004fc4 <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004faa:	f7fe fd39 	bl	8003a20 <HAL_GetTick>
 8004fae:	1b80      	subs	r0, r0, r6
 8004fb0:	4285      	cmp	r5, r0
 8004fb2:	d34f      	bcc.n	8005054 <HAL_I2C_Mem_Read+0x2b4>
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	d04d      	beq.n	8005054 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	1c69      	adds	r1, r5, #1
 8004fbc:	d1f2      	bne.n	8004fa4 <HAL_I2C_Mem_Read+0x204>
 8004fbe:	695a      	ldr	r2, [r3, #20]
 8004fc0:	0752      	lsls	r2, r2, #29
 8004fc2:	d5fc      	bpl.n	8004fbe <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fca:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd0:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8004fd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004fd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8004fdc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe2:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8004fe4:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe6:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8004fe8:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fea:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004fee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8004ff4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8004ff6:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8004ff8:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8004ffa:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8004ffc:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8004ffe:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005000:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005002:	e790      	b.n	8004f26 <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	6819      	ldr	r1, [r3, #0]
 8005008:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800500c:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005014:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005016:	9004      	str	r0, [sp, #16]
 8005018:	6959      	ldr	r1, [r3, #20]
 800501a:	9104      	str	r1, [sp, #16]
 800501c:	6999      	ldr	r1, [r3, #24]
 800501e:	9104      	str	r1, [sp, #16]
 8005020:	9904      	ldr	r1, [sp, #16]
 8005022:	e739      	b.n	8004e98 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	0750      	lsls	r0, r2, #29
 8005028:	f53f af44 	bmi.w	8004eb4 <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502c:	f7fe fcf8 	bl	8003a20 <HAL_GetTick>
 8005030:	1b80      	subs	r0, r0, r6
 8005032:	4285      	cmp	r5, r0
 8005034:	d30e      	bcc.n	8005054 <HAL_I2C_Mem_Read+0x2b4>
 8005036:	b16d      	cbz	r5, 8005054 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	e735      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x108>
 800503c:	6953      	ldr	r3, [r2, #20]
 800503e:	0758      	lsls	r0, r3, #29
 8005040:	f53f af50 	bmi.w	8004ee4 <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005044:	f7fe fcec 	bl	8003a20 <HAL_GetTick>
 8005048:	1b80      	subs	r0, r0, r6
 800504a:	4285      	cmp	r5, r0
 800504c:	d302      	bcc.n	8005054 <HAL_I2C_Mem_Read+0x2b4>
 800504e:	2d00      	cmp	r5, #0
 8005050:	f47f af41 	bne.w	8004ed6 <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005054:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005056:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005058:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800505a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800505e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005062:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005064:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005068:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800506a:	f043 0320 	orr.w	r3, r3, #32
}
 800506e:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005070:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005072:	b007      	add	sp, #28
 8005074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005078:	b95d      	cbnz	r5, 8005092 <HAL_I2C_Mem_Read+0x2f2>
 800507a:	e02b      	b.n	80050d4 <HAL_I2C_Mem_Read+0x334>
 800507c:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	06d2      	lsls	r2, r2, #27
 8005084:	d40c      	bmi.n	80050a0 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fe fccb 	bl	8003a20 <HAL_GetTick>
 800508a:	1b80      	subs	r0, r0, r6
 800508c:	4285      	cmp	r5, r0
 800508e:	d3e1      	bcc.n	8005054 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	0651      	lsls	r1, r2, #25
 8005096:	d5f3      	bpl.n	8005080 <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800509c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800509e:	e7a5      	b.n	8004fec <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050a0:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a2:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 80050a6:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a8:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050aa:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050ac:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050b6:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80050b8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80050bc:	2701      	movs	r7, #1
 80050be:	e680      	b.n	8004dc2 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	0652      	lsls	r2, r2, #25
 80050c4:	f53f af44 	bmi.w	8004f50 <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	06d1      	lsls	r1, r2, #27
 80050cc:	d4e8      	bmi.n	80050a0 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ce:	f7fe fca7 	bl	8003a20 <HAL_GetTick>
 80050d2:	e7bf      	b.n	8005054 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	0650      	lsls	r0, r2, #25
 80050d8:	d5f6      	bpl.n	80050c8 <HAL_I2C_Mem_Read+0x328>
 80050da:	e7dd      	b.n	8005098 <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	6819      	ldr	r1, [r3, #0]
 80050e0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80050e4:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	9003      	str	r0, [sp, #12]
 80050e8:	6959      	ldr	r1, [r3, #20]
 80050ea:	9103      	str	r1, [sp, #12]
 80050ec:	6999      	ldr	r1, [r3, #24]
 80050ee:	9103      	str	r1, [sp, #12]
 80050f0:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80050f8:	6019      	str	r1, [r3, #0]
 80050fa:	e6cd      	b.n	8004e98 <HAL_I2C_Mem_Read+0xf8>

080050fc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f000 81a2 	beq.w	8005446 <HAL_RCC_OscConfig+0x34a>
{
 8005102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005106:	6803      	ldr	r3, [r0, #0]
 8005108:	07dd      	lsls	r5, r3, #31
{
 800510a:	b082      	sub	sp, #8
 800510c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800510e:	d52f      	bpl.n	8005170 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005110:	499e      	ldr	r1, [pc, #632]	; (800538c <HAL_RCC_OscConfig+0x290>)
 8005112:	688a      	ldr	r2, [r1, #8]
 8005114:	f002 020c 	and.w	r2, r2, #12
 8005118:	2a04      	cmp	r2, #4
 800511a:	f000 80ed 	beq.w	80052f8 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800511e:	688a      	ldr	r2, [r1, #8]
 8005120:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005124:	2a08      	cmp	r2, #8
 8005126:	f000 80e3 	beq.w	80052f0 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512a:	6863      	ldr	r3, [r4, #4]
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005130:	f000 80ec 	beq.w	800530c <HAL_RCC_OscConfig+0x210>
 8005134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005138:	f000 8175 	beq.w	8005426 <HAL_RCC_OscConfig+0x32a>
 800513c:	4d93      	ldr	r5, [pc, #588]	; (800538c <HAL_RCC_OscConfig+0x290>)
 800513e:	682a      	ldr	r2, [r5, #0]
 8005140:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005144:	602a      	str	r2, [r5, #0]
 8005146:	682a      	ldr	r2, [r5, #0]
 8005148:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800514c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 80e1 	bne.w	8005316 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fe fc64 	bl	8003a20 <HAL_GetTick>
 8005158:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515a:	e005      	b.n	8005168 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800515c:	f7fe fc60 	bl	8003a20 <HAL_GetTick>
 8005160:	1b80      	subs	r0, r0, r6
 8005162:	2864      	cmp	r0, #100	; 0x64
 8005164:	f200 8101 	bhi.w	800536a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	039b      	lsls	r3, r3, #14
 800516c:	d4f6      	bmi.n	800515c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	079f      	lsls	r7, r3, #30
 8005172:	d528      	bpl.n	80051c6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005174:	4a85      	ldr	r2, [pc, #532]	; (800538c <HAL_RCC_OscConfig+0x290>)
 8005176:	6891      	ldr	r1, [r2, #8]
 8005178:	f011 0f0c 	tst.w	r1, #12
 800517c:	f000 8090 	beq.w	80052a0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005180:	6891      	ldr	r1, [r2, #8]
 8005182:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005186:	2908      	cmp	r1, #8
 8005188:	f000 8086 	beq.w	8005298 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800518c:	68e3      	ldr	r3, [r4, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 810e 	beq.w	80053b0 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005194:	4b7e      	ldr	r3, [pc, #504]	; (8005390 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005196:	4e7d      	ldr	r6, [pc, #500]	; (800538c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8005198:	2201      	movs	r2, #1
 800519a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800519c:	f7fe fc40 	bl	8003a20 <HAL_GetTick>
 80051a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a2:	e005      	b.n	80051b0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a4:	f7fe fc3c 	bl	8003a20 <HAL_GetTick>
 80051a8:	1b40      	subs	r0, r0, r5
 80051aa:	2802      	cmp	r0, #2
 80051ac:	f200 80dd 	bhi.w	800536a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b0:	6833      	ldr	r3, [r6, #0]
 80051b2:	0798      	lsls	r0, r3, #30
 80051b4:	d5f6      	bpl.n	80051a4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b6:	6833      	ldr	r3, [r6, #0]
 80051b8:	6922      	ldr	r2, [r4, #16]
 80051ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80051be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80051c2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	071a      	lsls	r2, r3, #28
 80051c8:	d451      	bmi.n	800526e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ca:	0758      	lsls	r0, r3, #29
 80051cc:	d52f      	bpl.n	800522e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ce:	4a6f      	ldr	r2, [pc, #444]	; (800538c <HAL_RCC_OscConfig+0x290>)
 80051d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80051d2:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80051d6:	d07f      	beq.n	80052d8 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 80051d8:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051da:	4e6e      	ldr	r6, [pc, #440]	; (8005394 <HAL_RCC_OscConfig+0x298>)
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	05d9      	lsls	r1, r3, #23
 80051e0:	f140 80b3 	bpl.w	800534a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e4:	68a3      	ldr	r3, [r4, #8]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	f000 80c3 	beq.w	8005372 <HAL_RCC_OscConfig+0x276>
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	f000 812c 	beq.w	800544a <HAL_RCC_OscConfig+0x34e>
 80051f2:	4e66      	ldr	r6, [pc, #408]	; (800538c <HAL_RCC_OscConfig+0x290>)
 80051f4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	6732      	str	r2, [r6, #112]	; 0x70
 80051fc:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80051fe:	f022 0204 	bic.w	r2, r2, #4
 8005202:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 80b9 	bne.w	800537c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800520a:	f7fe fc09 	bl	8003a20 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005212:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005214:	e005      	b.n	8005222 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005216:	f7fe fc03 	bl	8003a20 <HAL_GetTick>
 800521a:	1bc0      	subs	r0, r0, r7
 800521c:	4540      	cmp	r0, r8
 800521e:	f200 80a4 	bhi.w	800536a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005222:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005224:	0798      	lsls	r0, r3, #30
 8005226:	d4f6      	bmi.n	8005216 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005228:	2d00      	cmp	r5, #0
 800522a:	f040 8106 	bne.w	800543a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800522e:	69a0      	ldr	r0, [r4, #24]
 8005230:	b1c8      	cbz	r0, 8005266 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005232:	4d56      	ldr	r5, [pc, #344]	; (800538c <HAL_RCC_OscConfig+0x290>)
 8005234:	68ab      	ldr	r3, [r5, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
 800523a:	2b08      	cmp	r3, #8
 800523c:	f000 80c9 	beq.w	80053d2 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005240:	4b53      	ldr	r3, [pc, #332]	; (8005390 <HAL_RCC_OscConfig+0x294>)
 8005242:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005244:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005246:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005248:	f000 8109 	beq.w	800545e <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fe fbe8 	bl	8003a20 <HAL_GetTick>
 8005250:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005252:	e005      	b.n	8005260 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005254:	f7fe fbe4 	bl	8003a20 <HAL_GetTick>
 8005258:	1b00      	subs	r0, r0, r4
 800525a:	2802      	cmp	r0, #2
 800525c:	f200 8085 	bhi.w	800536a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	019b      	lsls	r3, r3, #6
 8005264:	d4f6      	bmi.n	8005254 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005266:	2000      	movs	r0, #0
}
 8005268:	b002      	add	sp, #8
 800526a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800526e:	6963      	ldr	r3, [r4, #20]
 8005270:	b30b      	cbz	r3, 80052b6 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8005272:	4b47      	ldr	r3, [pc, #284]	; (8005390 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005274:	4e45      	ldr	r6, [pc, #276]	; (800538c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8005276:	2201      	movs	r2, #1
 8005278:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800527c:	f7fe fbd0 	bl	8003a20 <HAL_GetTick>
 8005280:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005282:	e004      	b.n	800528e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005284:	f7fe fbcc 	bl	8003a20 <HAL_GetTick>
 8005288:	1b40      	subs	r0, r0, r5
 800528a:	2802      	cmp	r0, #2
 800528c:	d86d      	bhi.n	800536a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005290:	079b      	lsls	r3, r3, #30
 8005292:	d5f7      	bpl.n	8005284 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	e798      	b.n	80051ca <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005298:	6852      	ldr	r2, [r2, #4]
 800529a:	0256      	lsls	r6, r2, #9
 800529c:	f53f af76 	bmi.w	800518c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052a0:	4a3a      	ldr	r2, [pc, #232]	; (800538c <HAL_RCC_OscConfig+0x290>)
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	0795      	lsls	r5, r2, #30
 80052a6:	d544      	bpl.n	8005332 <HAL_RCC_OscConfig+0x236>
 80052a8:	68e2      	ldr	r2, [r4, #12]
 80052aa:	2a01      	cmp	r2, #1
 80052ac:	d041      	beq.n	8005332 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80052ae:	2001      	movs	r0, #1
}
 80052b0:	b002      	add	sp, #8
 80052b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80052b6:	4a36      	ldr	r2, [pc, #216]	; (8005390 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b8:	4e34      	ldr	r6, [pc, #208]	; (800538c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 80052ba:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80052be:	f7fe fbaf 	bl	8003a20 <HAL_GetTick>
 80052c2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c4:	e004      	b.n	80052d0 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c6:	f7fe fbab 	bl	8003a20 <HAL_GetTick>
 80052ca:	1b40      	subs	r0, r0, r5
 80052cc:	2802      	cmp	r0, #2
 80052ce:	d84c      	bhi.n	800536a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80052d2:	079f      	lsls	r7, r3, #30
 80052d4:	d4f7      	bmi.n	80052c6 <HAL_RCC_OscConfig+0x1ca>
 80052d6:	e7dd      	b.n	8005294 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80052dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e0:	6413      	str	r3, [r2, #64]	; 0x40
 80052e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80052e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80052ec:	2501      	movs	r5, #1
 80052ee:	e774      	b.n	80051da <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f0:	684a      	ldr	r2, [r1, #4]
 80052f2:	0250      	lsls	r0, r2, #9
 80052f4:	f57f af19 	bpl.w	800512a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f8:	4a24      	ldr	r2, [pc, #144]	; (800538c <HAL_RCC_OscConfig+0x290>)
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	0391      	lsls	r1, r2, #14
 80052fe:	f57f af37 	bpl.w	8005170 <HAL_RCC_OscConfig+0x74>
 8005302:	6862      	ldr	r2, [r4, #4]
 8005304:	2a00      	cmp	r2, #0
 8005306:	f47f af33 	bne.w	8005170 <HAL_RCC_OscConfig+0x74>
 800530a:	e7d0      	b.n	80052ae <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530c:	4a1f      	ldr	r2, [pc, #124]	; (800538c <HAL_RCC_OscConfig+0x290>)
 800530e:	6813      	ldr	r3, [r2, #0]
 8005310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005314:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005316:	f7fe fb83 	bl	8003a20 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	4e1c      	ldr	r6, [pc, #112]	; (800538c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800531c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531e:	e004      	b.n	800532a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005320:	f7fe fb7e 	bl	8003a20 <HAL_GetTick>
 8005324:	1b40      	subs	r0, r0, r5
 8005326:	2864      	cmp	r0, #100	; 0x64
 8005328:	d81f      	bhi.n	800536a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532a:	6833      	ldr	r3, [r6, #0]
 800532c:	039a      	lsls	r2, r3, #14
 800532e:	d5f7      	bpl.n	8005320 <HAL_RCC_OscConfig+0x224>
 8005330:	e71d      	b.n	800516e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005332:	4916      	ldr	r1, [pc, #88]	; (800538c <HAL_RCC_OscConfig+0x290>)
 8005334:	6920      	ldr	r0, [r4, #16]
 8005336:	680a      	ldr	r2, [r1, #0]
 8005338:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800533c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005340:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005342:	071a      	lsls	r2, r3, #28
 8005344:	f57f af41 	bpl.w	80051ca <HAL_RCC_OscConfig+0xce>
 8005348:	e791      	b.n	800526e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800534a:	6833      	ldr	r3, [r6, #0]
 800534c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005350:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005352:	f7fe fb65 	bl	8003a20 <HAL_GetTick>
 8005356:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005358:	6833      	ldr	r3, [r6, #0]
 800535a:	05da      	lsls	r2, r3, #23
 800535c:	f53f af42 	bmi.w	80051e4 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005360:	f7fe fb5e 	bl	8003a20 <HAL_GetTick>
 8005364:	1bc0      	subs	r0, r0, r7
 8005366:	2802      	cmp	r0, #2
 8005368:	d9f6      	bls.n	8005358 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800536a:	2003      	movs	r0, #3
}
 800536c:	b002      	add	sp, #8
 800536e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005372:	4a06      	ldr	r2, [pc, #24]	; (800538c <HAL_RCC_OscConfig+0x290>)
 8005374:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800537c:	f7fe fb50 	bl	8003a20 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005380:	4f02      	ldr	r7, [pc, #8]	; (800538c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8005382:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005384:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005388:	e00b      	b.n	80053a2 <HAL_RCC_OscConfig+0x2a6>
 800538a:	bf00      	nop
 800538c:	40023800 	.word	0x40023800
 8005390:	42470000 	.word	0x42470000
 8005394:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005398:	f7fe fb42 	bl	8003a20 <HAL_GetTick>
 800539c:	1b80      	subs	r0, r0, r6
 800539e:	4540      	cmp	r0, r8
 80053a0:	d8e3      	bhi.n	800536a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053a4:	079b      	lsls	r3, r3, #30
 80053a6:	d5f7      	bpl.n	8005398 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80053a8:	2d00      	cmp	r5, #0
 80053aa:	f43f af40 	beq.w	800522e <HAL_RCC_OscConfig+0x132>
 80053ae:	e044      	b.n	800543a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80053b0:	4a42      	ldr	r2, [pc, #264]	; (80054bc <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b2:	4e43      	ldr	r6, [pc, #268]	; (80054c0 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 80053b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80053b6:	f7fe fb33 	bl	8003a20 <HAL_GetTick>
 80053ba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053bc:	e004      	b.n	80053c8 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053be:	f7fe fb2f 	bl	8003a20 <HAL_GetTick>
 80053c2:	1b40      	subs	r0, r0, r5
 80053c4:	2802      	cmp	r0, #2
 80053c6:	d8d0      	bhi.n	800536a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c8:	6833      	ldr	r3, [r6, #0]
 80053ca:	0799      	lsls	r1, r3, #30
 80053cc:	d4f7      	bmi.n	80053be <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	e6f9      	b.n	80051c6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d2:	2801      	cmp	r0, #1
 80053d4:	f43f af48 	beq.w	8005268 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 80053d8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053da:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053dc:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e0:	4291      	cmp	r1, r2
 80053e2:	f47f af64 	bne.w	80052ae <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e6:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053e8:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ec:	4291      	cmp	r1, r2
 80053ee:	f47f af5e 	bne.w	80052ae <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80053f4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80053f8:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053fa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80053fe:	f47f af56 	bne.w	80052ae <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005402:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005404:	0852      	lsrs	r2, r2, #1
 8005406:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800540a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800540c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005410:	f47f af4d 	bne.w	80052ae <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005414:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005416:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800541a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 800541e:	bf14      	ite	ne
 8005420:	2001      	movne	r0, #1
 8005422:	2000      	moveq	r0, #0
 8005424:	e720      	b.n	8005268 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005426:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <HAL_RCC_OscConfig+0x3c4>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005436:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005438:	e76d      	b.n	8005316 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800543a:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <HAL_RCC_OscConfig+0x3c4>)
 800543c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800543e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005442:	6413      	str	r3, [r2, #64]	; 0x40
 8005444:	e6f3      	b.n	800522e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8005446:	2001      	movs	r0, #1
}
 8005448:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800544a:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <HAL_RCC_OscConfig+0x3c4>)
 800544c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800544e:	f042 0204 	orr.w	r2, r2, #4
 8005452:	671a      	str	r2, [r3, #112]	; 0x70
 8005454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800545c:	e78e      	b.n	800537c <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 800545e:	f7fe fadf 	bl	8003a20 <HAL_GetTick>
 8005462:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005464:	e005      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005466:	f7fe fadb 	bl	8003a20 <HAL_GetTick>
 800546a:	1b80      	subs	r0, r0, r6
 800546c:	2802      	cmp	r0, #2
 800546e:	f63f af7c 	bhi.w	800536a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005472:	682b      	ldr	r3, [r5, #0]
 8005474:	0199      	lsls	r1, r3, #6
 8005476:	d4f6      	bmi.n	8005466 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005478:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800547c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800547e:	430b      	orrs	r3, r1
 8005480:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005484:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8005488:	0852      	lsrs	r2, r2, #1
 800548a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800548e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8005490:	490a      	ldr	r1, [pc, #40]	; (80054bc <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005496:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005498:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800549a:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800549c:	f7fe fac0 	bl	8003a20 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a0:	4d07      	ldr	r5, [pc, #28]	; (80054c0 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 80054a2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a4:	e005      	b.n	80054b2 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a6:	f7fe fabb 	bl	8003a20 <HAL_GetTick>
 80054aa:	1b00      	subs	r0, r0, r4
 80054ac:	2802      	cmp	r0, #2
 80054ae:	f63f af5c 	bhi.w	800536a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b2:	682b      	ldr	r3, [r5, #0]
 80054b4:	019a      	lsls	r2, r3, #6
 80054b6:	d5f6      	bpl.n	80054a6 <HAL_RCC_OscConfig+0x3aa>
 80054b8:	e6d5      	b.n	8005266 <HAL_RCC_OscConfig+0x16a>
 80054ba:	bf00      	nop
 80054bc:	42470000 	.word	0x42470000
 80054c0:	40023800 	.word	0x40023800

080054c4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054c4:	4916      	ldr	r1, [pc, #88]	; (8005520 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80054c6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054c8:	688b      	ldr	r3, [r1, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d01b      	beq.n	800550a <HAL_RCC_GetSysClockFreq+0x46>
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d117      	bne.n	8005506 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054da:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054dc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e4:	d113      	bne.n	800550e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e6:	480f      	ldr	r0, [pc, #60]	; (8005524 <HAL_RCC_GetSysClockFreq+0x60>)
 80054e8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80054ec:	fba1 0100 	umull	r0, r1, r1, r0
 80054f0:	f7fb fb92 	bl	8000c18 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <HAL_RCC_GetSysClockFreq+0x5c>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80054fc:	3301      	adds	r3, #1
 80054fe:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005500:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005504:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8005506:	4807      	ldr	r0, [pc, #28]	; (8005524 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8005508:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800550a:	4807      	ldr	r0, [pc, #28]	; (8005528 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800550c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800550e:	4806      	ldr	r0, [pc, #24]	; (8005528 <HAL_RCC_GetSysClockFreq+0x64>)
 8005510:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005514:	2300      	movs	r3, #0
 8005516:	fba1 0100 	umull	r0, r1, r1, r0
 800551a:	f7fb fb7d 	bl	8000c18 <__aeabi_uldivmod>
 800551e:	e7e9      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x30>
 8005520:	40023800 	.word	0x40023800
 8005524:	00f42400 	.word	0x00f42400
 8005528:	007a1200 	.word	0x007a1200

0800552c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800552c:	2800      	cmp	r0, #0
 800552e:	f000 8087 	beq.w	8005640 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005532:	4a48      	ldr	r2, [pc, #288]	; (8005654 <HAL_RCC_ClockConfig+0x128>)
 8005534:	6813      	ldr	r3, [r2, #0]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	428b      	cmp	r3, r1
{
 800553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005540:	460d      	mov	r5, r1
 8005542:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005544:	d209      	bcs.n	800555a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005546:	b2cb      	uxtb	r3, r1
 8005548:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	6813      	ldr	r3, [r2, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	428b      	cmp	r3, r1
 8005552:	d002      	beq.n	800555a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005554:	2001      	movs	r0, #1
}
 8005556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	0798      	lsls	r0, r3, #30
 800555e:	d514      	bpl.n	800558a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005560:	0759      	lsls	r1, r3, #29
 8005562:	d504      	bpl.n	800556e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005564:	493c      	ldr	r1, [pc, #240]	; (8005658 <HAL_RCC_ClockConfig+0x12c>)
 8005566:	688a      	ldr	r2, [r1, #8]
 8005568:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800556c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556e:	071a      	lsls	r2, r3, #28
 8005570:	d504      	bpl.n	800557c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005572:	4939      	ldr	r1, [pc, #228]	; (8005658 <HAL_RCC_ClockConfig+0x12c>)
 8005574:	688a      	ldr	r2, [r1, #8]
 8005576:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800557a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557c:	4936      	ldr	r1, [pc, #216]	; (8005658 <HAL_RCC_ClockConfig+0x12c>)
 800557e:	68a0      	ldr	r0, [r4, #8]
 8005580:	688a      	ldr	r2, [r1, #8]
 8005582:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005586:	4302      	orrs	r2, r0
 8005588:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558a:	07df      	lsls	r7, r3, #31
 800558c:	d521      	bpl.n	80055d2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800558e:	6862      	ldr	r2, [r4, #4]
 8005590:	2a01      	cmp	r2, #1
 8005592:	d057      	beq.n	8005644 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005594:	1e93      	subs	r3, r2, #2
 8005596:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005598:	4b2f      	ldr	r3, [pc, #188]	; (8005658 <HAL_RCC_ClockConfig+0x12c>)
 800559a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800559c:	d94d      	bls.n	800563a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559e:	0799      	lsls	r1, r3, #30
 80055a0:	d5d8      	bpl.n	8005554 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055a2:	4e2d      	ldr	r6, [pc, #180]	; (8005658 <HAL_RCC_ClockConfig+0x12c>)
 80055a4:	68b3      	ldr	r3, [r6, #8]
 80055a6:	f023 0303 	bic.w	r3, r3, #3
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80055ae:	f7fe fa37 	bl	8003a20 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80055b6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b8:	e004      	b.n	80055c4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ba:	f7fe fa31 	bl	8003a20 <HAL_GetTick>
 80055be:	1bc0      	subs	r0, r0, r7
 80055c0:	4540      	cmp	r0, r8
 80055c2:	d844      	bhi.n	800564e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c4:	68b3      	ldr	r3, [r6, #8]
 80055c6:	6862      	ldr	r2, [r4, #4]
 80055c8:	f003 030c 	and.w	r3, r3, #12
 80055cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80055d0:	d1f3      	bne.n	80055ba <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055d2:	4a20      	ldr	r2, [pc, #128]	; (8005654 <HAL_RCC_ClockConfig+0x128>)
 80055d4:	6813      	ldr	r3, [r2, #0]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	42ab      	cmp	r3, r5
 80055dc:	d906      	bls.n	80055ec <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	b2eb      	uxtb	r3, r5
 80055e0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e2:	6813      	ldr	r3, [r2, #0]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	d1b3      	bne.n	8005554 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	075a      	lsls	r2, r3, #29
 80055f0:	d506      	bpl.n	8005600 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f2:	4919      	ldr	r1, [pc, #100]	; (8005658 <HAL_RCC_ClockConfig+0x12c>)
 80055f4:	68e0      	ldr	r0, [r4, #12]
 80055f6:	688a      	ldr	r2, [r1, #8]
 80055f8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80055fc:	4302      	orrs	r2, r0
 80055fe:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005600:	071b      	lsls	r3, r3, #28
 8005602:	d507      	bpl.n	8005614 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005604:	4a14      	ldr	r2, [pc, #80]	; (8005658 <HAL_RCC_ClockConfig+0x12c>)
 8005606:	6921      	ldr	r1, [r4, #16]
 8005608:	6893      	ldr	r3, [r2, #8]
 800560a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800560e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005612:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005614:	f7ff ff56 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8005618:	4a0f      	ldr	r2, [pc, #60]	; (8005658 <HAL_RCC_ClockConfig+0x12c>)
 800561a:	4c10      	ldr	r4, [pc, #64]	; (800565c <HAL_RCC_ClockConfig+0x130>)
 800561c:	6892      	ldr	r2, [r2, #8]
 800561e:	4910      	ldr	r1, [pc, #64]	; (8005660 <HAL_RCC_ClockConfig+0x134>)
 8005620:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005624:	4603      	mov	r3, r0
 8005626:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8005628:	480e      	ldr	r0, [pc, #56]	; (8005664 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800562a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800562c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800562e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8005630:	f7fe f9ac 	bl	800398c <HAL_InitTick>
  return HAL_OK;
 8005634:	2000      	movs	r0, #0
}
 8005636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563a:	0198      	lsls	r0, r3, #6
 800563c:	d4b1      	bmi.n	80055a2 <HAL_RCC_ClockConfig+0x76>
 800563e:	e789      	b.n	8005554 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005640:	2001      	movs	r0, #1
}
 8005642:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005644:	4b04      	ldr	r3, [pc, #16]	; (8005658 <HAL_RCC_ClockConfig+0x12c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	039e      	lsls	r6, r3, #14
 800564a:	d4aa      	bmi.n	80055a2 <HAL_RCC_ClockConfig+0x76>
 800564c:	e782      	b.n	8005554 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800564e:	2003      	movs	r0, #3
 8005650:	e781      	b.n	8005556 <HAL_RCC_ClockConfig+0x2a>
 8005652:	bf00      	nop
 8005654:	40023c00 	.word	0x40023c00
 8005658:	40023800 	.word	0x40023800
 800565c:	0800bcfc 	.word	0x0800bcfc
 8005660:	20000008 	.word	0x20000008
 8005664:	20000010 	.word	0x20000010

08005668 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800566a:	4905      	ldr	r1, [pc, #20]	; (8005680 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4a05      	ldr	r2, [pc, #20]	; (8005684 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005676:	5cd3      	ldrb	r3, [r2, r3]
}
 8005678:	40d8      	lsrs	r0, r3
 800567a:	4770      	bx	lr
 800567c:	40023800 	.word	0x40023800
 8005680:	20000008 	.word	0x20000008
 8005684:	0800bd0c 	.word	0x0800bd0c

08005688 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800568a:	4905      	ldr	r1, [pc, #20]	; (80056a0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	4a05      	ldr	r2, [pc, #20]	; (80056a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005690:	6808      	ldr	r0, [r1, #0]
 8005692:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005696:	5cd3      	ldrb	r3, [r2, r3]
}
 8005698:	40d8      	lsrs	r0, r3
 800569a:	4770      	bx	lr
 800569c:	40023800 	.word	0x40023800
 80056a0:	20000008 	.word	0x20000008
 80056a4:	0800bd0c 	.word	0x0800bd0c

080056a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80056a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	461d      	mov	r5, r3
 80056b0:	4616      	mov	r6, r2
 80056b2:	460c      	mov	r4, r1
 80056b4:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056b6:	f7fe f9b3 	bl	8003a20 <HAL_GetTick>
 80056ba:	4435      	add	r5, r6
 80056bc:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80056be:	f7fe f9af 	bl	8003a20 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056c2:	4b28      	ldr	r3, [pc, #160]	; (8005764 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80056ca:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 80056ce:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056d0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056d2:	1c73      	adds	r3, r6, #1
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	d107      	bne.n	80056e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
 80056d8:	688b      	ldr	r3, [r1, #8]
 80056da:	ea34 0303 	bics.w	r3, r4, r3
 80056de:	d0fb      	beq.n	80056d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 80056e0:	2000      	movs	r0, #0
}
 80056e2:	b002      	add	sp, #8
 80056e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056e8:	688b      	ldr	r3, [r1, #8]
 80056ea:	ea34 0303 	bics.w	r3, r4, r3
 80056ee:	d1f7      	bne.n	80056e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056f0:	f7fe f996 	bl	8003a20 <HAL_GetTick>
 80056f4:	eba0 0008 	sub.w	r0, r0, r8
 80056f8:	42a8      	cmp	r0, r5
 80056fa:	d208      	bcs.n	800570e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
      if (count == 0U)
 80056fc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80056fe:	2b00      	cmp	r3, #0
      count--;
 8005700:	9b01      	ldr	r3, [sp, #4]
 8005702:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005706:	bf08      	it	eq
 8005708:	2500      	moveq	r5, #0
      count--;
 800570a:	9301      	str	r3, [sp, #4]
 800570c:	e7e1      	b.n	80056d2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800570e:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005712:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005714:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800571c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800571e:	d014      	beq.n	800574a <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005722:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005726:	d007      	beq.n	8005738 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 8005728:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800572a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800572c:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005730:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8005734:	2003      	movs	r0, #3
 8005736:	e7d4      	b.n	80056e2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	e7ee      	b.n	8005728 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005750:	d002      	beq.n	8005758 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005752:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005756:	d1e3      	bne.n	8005720 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	e7de      	b.n	8005720 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
 8005762:	bf00      	nop
 8005764:	20000008 	.word	0x20000008

08005768 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005768:	2800      	cmp	r0, #0
 800576a:	d05c      	beq.n	8005826 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800576c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800576e:	b570      	push	{r4, r5, r6, lr}
 8005770:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005772:	2900      	cmp	r1, #0
 8005774:	d047      	beq.n	8005806 <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005776:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005778:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800577c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005780:	2300      	movs	r3, #0
 8005782:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005784:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8005788:	2a00      	cmp	r2, #0
 800578a:	d042      	beq.n	8005812 <HAL_SPI_Init+0xaa>
 800578c:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 800578e:	6825      	ldr	r5, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005790:	68a2      	ldr	r2, [r4, #8]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005792:	2302      	movs	r3, #2
 8005794:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579e:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057a0:	6863      	ldr	r3, [r4, #4]
 80057a2:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80057a6:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80057aa:	4313      	orrs	r3, r2
 80057ac:	68e2      	ldr	r2, [r4, #12]
 80057ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80057b2:	4313      	orrs	r3, r2
 80057b4:	6922      	ldr	r2, [r4, #16]
 80057b6:	f002 0202 	and.w	r2, r2, #2
 80057ba:	4313      	orrs	r3, r2
 80057bc:	6962      	ldr	r2, [r4, #20]
 80057be:	f002 0201 	and.w	r2, r2, #1
 80057c2:	431a      	orrs	r2, r3
 80057c4:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057c6:	f001 0010 	and.w	r0, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057ca:	f003 0638 	and.w	r6, r3, #56	; 0x38
 80057ce:	69a1      	ldr	r1, [r4, #24]
 80057d0:	6a23      	ldr	r3, [r4, #32]
 80057d2:	f003 0e80 	and.w	lr, r3, #128	; 0x80
 80057d6:	f401 7300 	and.w	r3, r1, #512	; 0x200
 80057da:	4313      	orrs	r3, r2
 80057dc:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057de:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057e0:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057e4:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057e8:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057ec:	4301      	orrs	r1, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057ee:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057f0:	6069      	str	r1, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057f2:	69eb      	ldr	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057f4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80057fa:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057fc:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057fe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005800:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 8005804:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005806:	6843      	ldr	r3, [r0, #4]
 8005808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800580c:	d0b6      	beq.n	800577c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800580e:	61c1      	str	r1, [r0, #28]
 8005810:	e7b4      	b.n	800577c <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8005812:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005816:	4620      	mov	r0, r4
 8005818:	f7fd fbc8 	bl	8002fac <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800581c:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005820:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8005824:	e7b3      	b.n	800578e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8005826:	2001      	movs	r0, #1
}
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop

0800582c <HAL_SPI_Transmit>:
{
 800582c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005830:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005832:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8005836:	2801      	cmp	r0, #1
{
 8005838:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800583a:	f000 8087 	beq.w	800594c <HAL_SPI_Transmit+0x120>
 800583e:	461d      	mov	r5, r3
 8005840:	2301      	movs	r3, #1
 8005842:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005846:	4688      	mov	r8, r1
 8005848:	4617      	mov	r7, r2
 800584a:	f7fe f8e9 	bl	8003a20 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800584e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005852:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005854:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005856:	b2d8      	uxtb	r0, r3
 8005858:	d009      	beq.n	800586e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800585a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800585c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800585e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005860:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005864:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005868:	b002      	add	sp, #8
 800586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800586e:	f1b8 0f00 	cmp.w	r8, #0
 8005872:	d0f3      	beq.n	800585c <HAL_SPI_Transmit+0x30>
 8005874:	2f00      	cmp	r7, #0
 8005876:	d0f1      	beq.n	800585c <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005878:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800587a:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800587c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005880:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005882:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005884:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005888:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
 800588c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005890:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 8005892:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005894:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005896:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005898:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800589a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800589c:	f000 8083 	beq.w	80059a6 <HAL_SPI_Transmit+0x17a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058a0:	6803      	ldr	r3, [r0, #0]
 80058a2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_DISABLE(hspi);
 80058a4:	4684      	mov	ip, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058a6:	d403      	bmi.n	80058b0 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 80058a8:	6803      	ldr	r3, [r0, #0]
 80058aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ae:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058b0:	68e3      	ldr	r3, [r4, #12]
 80058b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058b6:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058b8:	d04c      	beq.n	8005954 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8095 	beq.w	80059ea <HAL_SPI_Transmit+0x1be>
 80058c0:	2f01      	cmp	r7, #1
 80058c2:	f000 8092 	beq.w	80059ea <HAL_SPI_Transmit+0x1be>
    while (hspi->TxXferCount > 0U)
 80058c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	b1bb      	cbz	r3, 80058fc <HAL_SPI_Transmit+0xd0>
 80058cc:	2d00      	cmp	r5, #0
 80058ce:	f000 80cb 	beq.w	8005a68 <HAL_SPI_Transmit+0x23c>
 80058d2:	1c6f      	adds	r7, r5, #1
 80058d4:	d17e      	bne.n	80059d4 <HAL_SPI_Transmit+0x1a8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	0790      	lsls	r0, r2, #30
 80058dc:	f140 8090 	bpl.w	8005a00 <HAL_SPI_Transmit+0x1d4>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80058e2:	7812      	ldrb	r2, [r2, #0]
 80058e4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80058e6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80058ea:	3901      	subs	r1, #1
 80058ec:	b289      	uxth	r1, r1
 80058ee:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80058f0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058f2:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 80058f4:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058f6:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80058f8:	2900      	cmp	r1, #0
 80058fa:	d1ec      	bne.n	80058d6 <HAL_SPI_Transmit+0xaa>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058fc:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058fe:	4b72      	ldr	r3, [pc, #456]	; (8005ac8 <HAL_SPI_Transmit+0x29c>)
 8005900:	4972      	ldr	r1, [pc, #456]	; (8005acc <HAL_SPI_Transmit+0x2a0>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	fba1 1303 	umull	r1, r3, r1, r3
 8005908:	0d5b      	lsrs	r3, r3, #21
 800590a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800590e:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005912:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005916:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005918:	d107      	bne.n	800592a <HAL_SPI_Transmit+0xfe>
 800591a:	e0c6      	b.n	8005aaa <HAL_SPI_Transmit+0x27e>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800591c:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800591e:	6822      	ldr	r2, [r4, #0]
      count--;
 8005920:	3b01      	subs	r3, #1
 8005922:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005924:	6893      	ldr	r3, [r2, #8]
 8005926:	061b      	lsls	r3, r3, #24
 8005928:	d502      	bpl.n	8005930 <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 800592a:	9b01      	ldr	r3, [sp, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f5      	bne.n	800591c <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005930:	68a3      	ldr	r3, [r4, #8]
 8005932:	b933      	cbnz	r3, 8005942 <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005934:	6822      	ldr	r2, [r4, #0]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	68d3      	ldr	r3, [r2, #12]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	6893      	ldr	r3, [r2, #8]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005942:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8005944:	3800      	subs	r0, #0
 8005946:	bf18      	it	ne
 8005948:	2001      	movne	r0, #1
error:
 800594a:	e787      	b.n	800585c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800594c:	2002      	movs	r0, #2
}
 800594e:	b002      	add	sp, #8
 8005950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005954:	461a      	mov	r2, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d174      	bne.n	8005a44 <HAL_SPI_Transmit+0x218>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800595a:	4641      	mov	r1, r8
 800595c:	f831 7b02 	ldrh.w	r7, [r1], #2
 8005960:	60c7      	str	r7, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005962:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005964:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8005966:	3901      	subs	r1, #1
 8005968:	b289      	uxth	r1, r1
 800596a:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800596c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800596e:	b289      	uxth	r1, r1
 8005970:	2900      	cmp	r1, #0
 8005972:	d0c4      	beq.n	80058fe <HAL_SPI_Transmit+0xd2>
 8005974:	2d00      	cmp	r5, #0
 8005976:	f000 808b 	beq.w	8005a90 <HAL_SPI_Transmit+0x264>
 800597a:	1c69      	adds	r1, r5, #1
 800597c:	d158      	bne.n	8005a30 <HAL_SPI_Transmit+0x204>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800597e:	6883      	ldr	r3, [r0, #8]
 8005980:	079a      	lsls	r2, r3, #30
 8005982:	f140 8089 	bpl.w	8005a98 <HAL_SPI_Transmit+0x26c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005986:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005988:	f832 3b02 	ldrh.w	r3, [r2], #2
 800598c:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800598e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005990:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005992:	3b01      	subs	r3, #1
 8005994:	b29b      	uxth	r3, r3
 8005996:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8005998:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ee      	bne.n	800597e <HAL_SPI_Transmit+0x152>
 80059a0:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059a2:	461a      	mov	r2, r3
 80059a4:	e7ab      	b.n	80058fe <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 80059a6:	6803      	ldr	r3, [r0, #0]
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 80059ae:	6803      	ldr	r3, [r0, #0]
 80059b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059b4:	6003      	str	r3, [r0, #0]
 80059b6:	e773      	b.n	80058a0 <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80059be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80059c2:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059c4:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ca:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80059cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d093      	beq.n	80058fc <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	0791      	lsls	r1, r2, #30
 80059da:	d4ed      	bmi.n	80059b8 <HAL_SPI_Transmit+0x18c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059dc:	f7fe f820 	bl	8003a20 <HAL_GetTick>
 80059e0:	1b80      	subs	r0, r0, r6
 80059e2:	4285      	cmp	r5, r0
 80059e4:	d8f2      	bhi.n	80059cc <HAL_SPI_Transmit+0x1a0>
          errorcode = HAL_TIMEOUT;
 80059e6:	2003      	movs	r0, #3
 80059e8:	e738      	b.n	800585c <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ea:	f898 3000 	ldrb.w	r3, [r8]
 80059ee:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80059f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80059f4:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059f6:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80059f8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059fa:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80059fc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80059fe:	e762      	b.n	80058c6 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a00:	f7fe f80e 	bl	8003a20 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8005a04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f47f af64 	bne.w	80058d6 <HAL_SPI_Transmit+0xaa>
 8005a0e:	e775      	b.n	80058fc <HAL_SPI_Transmit+0xd0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a12:	f832 3b02 	ldrh.w	r3, [r2], #2
 8005a16:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 8005a1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1c:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8005a24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0b9      	beq.n	80059a0 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a2c:	f8d4 c000 	ldr.w	ip, [r4]
 8005a30:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8005a34:	079b      	lsls	r3, r3, #30
 8005a36:	d4eb      	bmi.n	8005a10 <HAL_SPI_Transmit+0x1e4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a38:	f7fd fff2 	bl	8003a20 <HAL_GetTick>
 8005a3c:	1b80      	subs	r0, r0, r6
 8005a3e:	4285      	cmp	r5, r0
 8005a40:	d9d1      	bls.n	80059e6 <HAL_SPI_Transmit+0x1ba>
 8005a42:	e7ef      	b.n	8005a24 <HAL_SPI_Transmit+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a44:	2f01      	cmp	r7, #1
 8005a46:	d191      	bne.n	800596c <HAL_SPI_Transmit+0x140>
 8005a48:	e787      	b.n	800595a <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a4c:	7812      	ldrb	r2, [r2, #0]
 8005a4e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8005a50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a52:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8005a5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a5c:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 8005a5e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a60:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f43f af4a 	beq.w	80058fc <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	0792      	lsls	r2, r2, #30
 8005a6e:	d4ec      	bmi.n	8005a4a <HAL_SPI_Transmit+0x21e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a70:	f7fd ffd6 	bl	8003a20 <HAL_GetTick>
 8005a74:	e7b7      	b.n	80059e6 <HAL_SPI_Transmit+0x1ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a76:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005a78:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005a7c:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 8005a7e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a80:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005a82:	3a01      	subs	r2, #1
 8005a84:	b292      	uxth	r2, r2
 8005a86:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8005a88:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005a8a:	b292      	uxth	r2, r2
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	d088      	beq.n	80059a2 <HAL_SPI_Transmit+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a90:	6882      	ldr	r2, [r0, #8]
 8005a92:	0797      	lsls	r7, r2, #30
 8005a94:	d5ec      	bpl.n	8005a70 <HAL_SPI_Transmit+0x244>
 8005a96:	e7ee      	b.n	8005a76 <HAL_SPI_Transmit+0x24a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a98:	f7fd ffc2 	bl	8003a20 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8005a9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f43f af7d 	beq.w	80059a0 <HAL_SPI_Transmit+0x174>
 8005aa6:	6820      	ldr	r0, [r4, #0]
 8005aa8:	e769      	b.n	800597e <HAL_SPI_Transmit+0x152>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aaa:	4633      	mov	r3, r6
 8005aac:	462a      	mov	r2, r5
 8005aae:	2180      	movs	r1, #128	; 0x80
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f7ff fdf9 	bl	80056a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f43f af3a 	beq.w	8005930 <HAL_SPI_Transmit+0x104>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005abc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005abe:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ac4:	6562      	str	r2, [r4, #84]	; 0x54
 8005ac6:	e733      	b.n	8005930 <HAL_SPI_Transmit+0x104>
 8005ac8:	20000008 	.word	0x20000008
 8005acc:	165e9f81 	.word	0x165e9f81

08005ad0 <HAL_SPI_TransmitReceive>:
{
 8005ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ad4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005ad6:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 8005ada:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8005adc:	2801      	cmp	r0, #1
{
 8005ade:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8005ae0:	f000 8083 	beq.w	8005bea <HAL_SPI_TransmitReceive+0x11a>
 8005ae4:	461f      	mov	r7, r3
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005aec:	4689      	mov	r9, r1
 8005aee:	4690      	mov	r8, r2
 8005af0:	f7fd ff96 	bl	8003a20 <HAL_GetTick>
 8005af4:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8005af6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8005afa:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005afc:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8005afe:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b00:	d011      	beq.n	8005b26 <HAL_SPI_TransmitReceive+0x56>
 8005b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b06:	d009      	beq.n	8005b1c <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8005b08:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005b0a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005b0c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005b0e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b12:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005b16:	b003      	add	sp, #12
 8005b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b1c:	68a2      	ldr	r2, [r4, #8]
 8005b1e:	2a00      	cmp	r2, #0
 8005b20:	d1f2      	bne.n	8005b08 <HAL_SPI_TransmitReceive+0x38>
 8005b22:	2904      	cmp	r1, #4
 8005b24:	d1f0      	bne.n	8005b08 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b26:	f1b9 0f00 	cmp.w	r9, #0
 8005b2a:	d062      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x122>
 8005b2c:	f1b8 0f00 	cmp.w	r8, #0
 8005b30:	d05f      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x122>
 8005b32:	2f00      	cmp	r7, #0
 8005b34:	d05d      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b36:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b3a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b3e:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b40:	bf1c      	itt	ne
 8005b42:	2205      	movne	r2, #5
 8005b44:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b48:	2200      	movs	r2, #0
 8005b4a:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8005b4c:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b50:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8005b52:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8005b54:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b56:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 8005b58:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b5a:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b5c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b60:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b62:	d403      	bmi.n	8005b6c <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8005b64:	6811      	ldr	r1, [r2, #0]
 8005b66:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005b6a:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b6c:	68e1      	ldr	r1, [r4, #12]
 8005b6e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005b72:	d04e      	beq.n	8005c12 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d03e      	beq.n	8005bf6 <HAL_SPI_TransmitReceive+0x126>
 8005b78:	2f01      	cmp	r7, #1
 8005b7a:	d03c      	beq.n	8005bf6 <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 8005b7c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	b91b      	cbnz	r3, 8005b8c <HAL_SPI_TransmitReceive+0xbc>
 8005b84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d07f      	beq.n	8005c8c <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	6893      	ldr	r3, [r2, #8]
 8005b90:	0799      	lsls	r1, r3, #30
 8005b92:	d50f      	bpl.n	8005bb4 <HAL_SPI_TransmitReceive+0xe4>
 8005b94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	b163      	cbz	r3, 8005bb4 <HAL_SPI_TransmitReceive+0xe4>
 8005b9a:	b15f      	cbz	r7, 8005bb4 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8005ba2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8005ba4:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba6:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8005ba8:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8005baa:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8005bac:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bae:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8005bb0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005bb2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bb4:	6893      	ldr	r3, [r2, #8]
 8005bb6:	f013 0301 	ands.w	r3, r3, #1
 8005bba:	d00d      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0x108>
 8005bbc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005bbe:	b289      	uxth	r1, r1
 8005bc0:	b151      	cbz	r1, 8005bd8 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 8005bc2:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005bc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bc6:	68d2      	ldr	r2, [r2, #12]
 8005bc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bcc:	3301      	adds	r3, #1
 8005bce:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005bd0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bd8:	f7fd ff22 	bl	8003a20 <HAL_GetTick>
 8005bdc:	1b80      	subs	r0, r0, r6
 8005bde:	42a8      	cmp	r0, r5
 8005be0:	d314      	bcc.n	8005c0c <HAL_SPI_TransmitReceive+0x13c>
 8005be2:	1c6a      	adds	r2, r5, #1
 8005be4:	d0cb      	beq.n	8005b7e <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8005be6:	2003      	movs	r0, #3
 8005be8:	e78f      	b.n	8005b0a <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8005bea:	2002      	movs	r0, #2
}
 8005bec:	b003      	add	sp, #12
 8005bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	e789      	b.n	8005b0a <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bf6:	f899 3000 	ldrb.w	r3, [r9]
 8005bfa:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 8005bfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bfe:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005c00:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c02:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8005c04:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c06:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005c08:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005c0a:	e7b7      	b.n	8005b7c <HAL_SPI_TransmitReceive+0xac>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	d1b6      	bne.n	8005b7e <HAL_SPI_TransmitReceive+0xae>
 8005c10:	e7e9      	b.n	8005be6 <HAL_SPI_TransmitReceive+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d16c      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x220>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c16:	4649      	mov	r1, r9
 8005c18:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005c1c:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8005c1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c20:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005c28:	1c6a      	adds	r2, r5, #1
{
 8005c2a:	f04f 0701 	mov.w	r7, #1
 8005c2e:	d025      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x1ac>
 8005c30:	e061      	b.n	8005cf6 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	6893      	ldr	r3, [r2, #8]
 8005c36:	079b      	lsls	r3, r3, #30
 8005c38:	d50d      	bpl.n	8005c56 <HAL_SPI_TransmitReceive+0x186>
 8005c3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	b153      	cbz	r3, 8005c56 <HAL_SPI_TransmitReceive+0x186>
 8005c40:	b14f      	cbz	r7, 8005c56 <HAL_SPI_TransmitReceive+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c44:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005c48:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005c4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c4c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8005c52:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8005c54:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c56:	6893      	ldr	r3, [r2, #8]
 8005c58:	f013 0301 	ands.w	r3, r3, #1
 8005c5c:	d00c      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x1a8>
 8005c5e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005c60:	b289      	uxth	r1, r1
 8005c62:	b149      	cbz	r1, 8005c78 <HAL_SPI_TransmitReceive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c64:	68d1      	ldr	r1, [r2, #12]
 8005c66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c68:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8005c6c:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8005c6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c70:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c78:	f7fd fed2 	bl	8003a20 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1d6      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x162>
 8005c84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1d2      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x162>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c8c:	4b33      	ldr	r3, [pc, #204]	; (8005d5c <HAL_SPI_TransmitReceive+0x28c>)
 8005c8e:	4a34      	ldr	r2, [pc, #208]	; (8005d60 <HAL_SPI_TransmitReceive+0x290>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	0d5b      	lsrs	r3, r3, #21
 8005c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca0:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ca2:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005ca8:	d114      	bne.n	8005cd4 <HAL_SPI_TransmitReceive+0x204>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005caa:	4633      	mov	r3, r6
 8005cac:	462a      	mov	r2, r5
 8005cae:	2180      	movs	r1, #128	; 0x80
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f7ff fcf9 	bl	80056a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005cb6:	b180      	cbz	r0, 8005cda <HAL_SPI_TransmitReceive+0x20a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cba:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005cc0:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cc2:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8005cc4:	e721      	b.n	8005b0a <HAL_SPI_TransmitReceive+0x3a>
      count--;
 8005cc6:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cc8:	6822      	ldr	r2, [r4, #0]
      count--;
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cce:	6893      	ldr	r3, [r2, #8]
 8005cd0:	061b      	lsls	r3, r3, #24
 8005cd2:	d502      	bpl.n	8005cda <HAL_SPI_TransmitReceive+0x20a>
      if (count == 0U)
 8005cd4:	9b01      	ldr	r3, [sp, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f5      	bne.n	8005cc6 <HAL_SPI_TransmitReceive+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cda:	68a0      	ldr	r0, [r4, #8]
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d13a      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x286>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	9000      	str	r0, [sp, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	9200      	str	r2, [sp, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	9b00      	ldr	r3, [sp, #0]
 8005cee:	e70c      	b.n	8005b0a <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cf0:	2f01      	cmp	r7, #1
 8005cf2:	d199      	bne.n	8005c28 <HAL_SPI_TransmitReceive+0x158>
 8005cf4:	e78f      	b.n	8005c16 <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	b91b      	cbnz	r3, 8005d04 <HAL_SPI_TransmitReceive+0x234>
 8005cfc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0c3      	beq.n	8005c8c <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	6893      	ldr	r3, [r2, #8]
 8005d08:	0798      	lsls	r0, r3, #30
 8005d0a:	d50d      	bpl.n	8005d28 <HAL_SPI_TransmitReceive+0x258>
 8005d0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	b153      	cbz	r3, 8005d28 <HAL_SPI_TransmitReceive+0x258>
 8005d12:	b14f      	cbz	r7, 8005d28 <HAL_SPI_TransmitReceive+0x258>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d16:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005d1a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d1c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005d1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8005d24:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8005d26:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d28:	6893      	ldr	r3, [r2, #8]
 8005d2a:	f013 0301 	ands.w	r3, r3, #1
 8005d2e:	d00c      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x27a>
 8005d30:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005d32:	b289      	uxth	r1, r1
 8005d34:	b149      	cbz	r1, 8005d4a <HAL_SPI_TransmitReceive+0x27a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d36:	68d1      	ldr	r1, [r2, #12]
 8005d38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d3a:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8005d3e:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8005d40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d42:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d4a:	f7fd fe69 	bl	8003a20 <HAL_GetTick>
 8005d4e:	1b80      	subs	r0, r0, r6
 8005d50:	42a8      	cmp	r0, r5
 8005d52:	d3d0      	bcc.n	8005cf6 <HAL_SPI_TransmitReceive+0x226>
 8005d54:	e747      	b.n	8005be6 <HAL_SPI_TransmitReceive+0x116>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d56:	2000      	movs	r0, #0
 8005d58:	e6d7      	b.n	8005b0a <HAL_SPI_TransmitReceive+0x3a>
 8005d5a:	bf00      	nop
 8005d5c:	20000008 	.word	0x20000008
 8005d60:	165e9f81 	.word	0x165e9f81

08005d64 <HAL_SPI_GetState>:
  return hspi->State;
 8005d64:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop

08005d6c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d076      	beq.n	8005e5e <HAL_TIM_Base_Init+0xf2>
{
 8005d70:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d76:	4604      	mov	r4, r0
 8005d78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d055      	beq.n	8005e2c <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d80:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d82:	4938      	ldr	r1, [pc, #224]	; (8005e64 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	2302      	movs	r3, #2
 8005d86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d8a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005d8c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d8e:	d052      	beq.n	8005e36 <HAL_TIM_Base_Init+0xca>
 8005d90:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005d94:	d021      	beq.n	8005dda <HAL_TIM_Base_Init+0x6e>
 8005d96:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005d9a:	428a      	cmp	r2, r1
 8005d9c:	d01d      	beq.n	8005dda <HAL_TIM_Base_Init+0x6e>
 8005d9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005da2:	428a      	cmp	r2, r1
 8005da4:	d019      	beq.n	8005dda <HAL_TIM_Base_Init+0x6e>
 8005da6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005daa:	428a      	cmp	r2, r1
 8005dac:	d015      	beq.n	8005dda <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dae:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8005db2:	428a      	cmp	r2, r1
 8005db4:	d015      	beq.n	8005de2 <HAL_TIM_Base_Init+0x76>
 8005db6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005dba:	428a      	cmp	r2, r1
 8005dbc:	d011      	beq.n	8005de2 <HAL_TIM_Base_Init+0x76>
 8005dbe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005dc2:	428a      	cmp	r2, r1
 8005dc4:	d00d      	beq.n	8005de2 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dc6:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dce:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005dd0:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005dd6:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd8:	e010      	b.n	8005dfc <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005dda:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005de0:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005de2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005df4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005df6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005dfa:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e00:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005e08:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005e0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005e10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005e20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005e28:	2000      	movs	r0, #0
}
 8005e2a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005e2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005e30:	f7fd f960 	bl	80030f4 <HAL_TIM_Base_MspInit>
 8005e34:	e7a4      	b.n	8005d80 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005e36:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e38:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e3e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e44:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e46:	69a1      	ldr	r1, [r4, #24]
 8005e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e4c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005e4e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e50:	68e3      	ldr	r3, [r4, #12]
 8005e52:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e54:	6863      	ldr	r3, [r4, #4]
 8005e56:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005e58:	6963      	ldr	r3, [r4, #20]
 8005e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5c:	e7ce      	b.n	8005dfc <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8005e5e:	2001      	movs	r0, #1
}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000

08005e68 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005e68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d127      	bne.n	8005ec0 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e70:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e72:	4915      	ldr	r1, [pc, #84]	; (8005ec8 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	2202      	movs	r2, #2
 8005e76:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e7a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e84:	d011      	beq.n	8005eaa <HAL_TIM_Base_Start_IT+0x42>
 8005e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8a:	d00e      	beq.n	8005eaa <HAL_TIM_Base_Start_IT+0x42>
 8005e8c:	4a0f      	ldr	r2, [pc, #60]	; (8005ecc <HAL_TIM_Base_Start_IT+0x64>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00b      	beq.n	8005eaa <HAL_TIM_Base_Start_IT+0x42>
 8005e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <HAL_TIM_Base_Start_IT+0x42>
 8005e9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_Base_Start_IT+0x42>
 8005ea2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d104      	bne.n	8005eb4 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb0:	2a06      	cmp	r2, #6
 8005eb2:	d007      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8005eba:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	4770      	bx	lr
    return HAL_ERROR;
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	4770      	bx	lr
  return HAL_OK;
 8005ec4:	2000      	movs	r0, #0
}
 8005ec6:	4770      	bx	lr
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40000400 	.word	0x40000400

08005ed0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005ed0:	6803      	ldr	r3, [r0, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8005eda:	6a1a      	ldr	r2, [r3, #32]
 8005edc:	f241 1111 	movw	r1, #4369	; 0x1111
 8005ee0:	420a      	tst	r2, r1
 8005ee2:	d108      	bne.n	8005ef6 <HAL_TIM_Base_Stop_IT+0x26>
 8005ee4:	6a19      	ldr	r1, [r3, #32]
 8005ee6:	f240 4244 	movw	r2, #1092	; 0x444
 8005eea:	4211      	tst	r1, r2
 8005eec:	d103      	bne.n	8005ef6 <HAL_TIM_Base_Stop_IT+0x26>
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005efc:	2000      	movs	r0, #0
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIM_PWM_MspInit>:
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop

08005f04 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d076      	beq.n	8005ff6 <HAL_TIM_PWM_Init+0xf2>
{
 8005f08:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f0e:	4604      	mov	r4, r0
 8005f10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d055      	beq.n	8005fc4 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f18:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f1a:	4938      	ldr	r1, [pc, #224]	; (8005ffc <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f22:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005f24:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f26:	d052      	beq.n	8005fce <HAL_TIM_PWM_Init+0xca>
 8005f28:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005f2c:	d021      	beq.n	8005f72 <HAL_TIM_PWM_Init+0x6e>
 8005f2e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005f32:	428a      	cmp	r2, r1
 8005f34:	d01d      	beq.n	8005f72 <HAL_TIM_PWM_Init+0x6e>
 8005f36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f3a:	428a      	cmp	r2, r1
 8005f3c:	d019      	beq.n	8005f72 <HAL_TIM_PWM_Init+0x6e>
 8005f3e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f42:	428a      	cmp	r2, r1
 8005f44:	d015      	beq.n	8005f72 <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f46:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8005f4a:	428a      	cmp	r2, r1
 8005f4c:	d015      	beq.n	8005f7a <HAL_TIM_PWM_Init+0x76>
 8005f4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f52:	428a      	cmp	r2, r1
 8005f54:	d011      	beq.n	8005f7a <HAL_TIM_PWM_Init+0x76>
 8005f56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f5a:	428a      	cmp	r2, r1
 8005f5c:	d00d      	beq.n	8005f7a <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f5e:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f60:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f66:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005f68:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005f6a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f6c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f6e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f70:	e010      	b.n	8005f94 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005f72:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f78:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f7a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f7c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f82:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f88:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f8a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005f8c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005f8e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f90:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f92:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005f94:	2301      	movs	r3, #1
 8005f96:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f98:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005fa0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005fa4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005fa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005fb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005fc0:	2000      	movs	r0, #0
}
 8005fc2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005fc4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005fc8:	f7ff ff9a 	bl	8005f00 <HAL_TIM_PWM_MspInit>
 8005fcc:	e7a4      	b.n	8005f18 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005fce:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fd0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005fd6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fdc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fde:	69a1      	ldr	r1, [r4, #24]
 8005fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005fe6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fe8:	68e3      	ldr	r3, [r4, #12]
 8005fea:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fec:	6863      	ldr	r3, [r4, #4]
 8005fee:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff0:	6963      	ldr	r3, [r4, #20]
 8005ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff4:	e7ce      	b.n	8005f94 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 8005ff6:	2001      	movs	r0, #1
}
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40010000 	.word	0x40010000

08006000 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006000:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	f000 80ca 	beq.w	800619e <HAL_TIM_PWM_ConfigChannel+0x19e>
 800600a:	2301      	movs	r3, #1
{
 800600c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800600e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006012:	2a0c      	cmp	r2, #12
 8006014:	d808      	bhi.n	8006028 <HAL_TIM_PWM_ConfigChannel+0x28>
 8006016:	e8df f002 	tbb	[pc, r2]
 800601a:	073d      	.short	0x073d
 800601c:	07680707 	.word	0x07680707
 8006020:	07960707 	.word	0x07960707
 8006024:	0707      	.short	0x0707
 8006026:	0e          	.byte	0x0e
 8006027:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006028:	2300      	movs	r3, #0
 800602a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800602e:	2201      	movs	r2, #1
}
 8006030:	4610      	mov	r0, r2
 8006032:	bcf0      	pop	{r4, r5, r6, r7}
 8006034:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006036:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006038:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800603a:	6a1a      	ldr	r2, [r3, #32]
 800603c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006040:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006042:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006044:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006046:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006048:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800604c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006050:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006056:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605a:	4e6b      	ldr	r6, [pc, #428]	; (8006208 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800605c:	42b3      	cmp	r3, r6
 800605e:	f000 80bd 	beq.w	80061dc <HAL_TIM_PWM_ConfigChannel+0x1dc>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006062:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006064:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006066:	684c      	ldr	r4, [r1, #4]
 8006068:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800606c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800606e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006076:	69dc      	ldr	r4, [r3, #28]
 8006078:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800607c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800607e:	69d9      	ldr	r1, [r3, #28]
 8006080:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8006084:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8006086:	2300      	movs	r3, #0
 8006088:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800608c:	2200      	movs	r2, #0
}
 800608e:	4610      	mov	r0, r2
 8006090:	bcf0      	pop	{r4, r5, r6, r7}
 8006092:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006094:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006096:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006098:	6a1a      	ldr	r2, [r3, #32]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80060a0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80060a2:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80060a4:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060a6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80060aa:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 80060ac:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80060ae:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80060b2:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060b4:	4e54      	ldr	r6, [pc, #336]	; (8006208 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80060b6:	42b3      	cmp	r3, r6
 80060b8:	d074      	beq.n	80061a4 <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 80060ba:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80060bc:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80060be:	684c      	ldr	r4, [r1, #4]
 80060c0:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80060c2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c4:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060c6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c8:	f042 0208 	orr.w	r2, r2, #8
 80060cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060ce:	699c      	ldr	r4, [r3, #24]
 80060d0:	f024 0404 	bic.w	r4, r4, #4
 80060d4:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060d6:	6999      	ldr	r1, [r3, #24]
 80060d8:	4329      	orrs	r1, r5
 80060da:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 80060dc:	2300      	movs	r3, #0
 80060de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80060e2:	2200      	movs	r2, #0
}
 80060e4:	4610      	mov	r0, r2
 80060e6:	bcf0      	pop	{r4, r5, r6, r7}
 80060e8:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060ea:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ec:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	f022 0210 	bic.w	r2, r2, #16
 80060f4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80060f6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80060f8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80060fa:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060fc:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006100:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006104:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006106:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800610a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800610e:	4e3e      	ldr	r6, [pc, #248]	; (8006208 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8006110:	42b3      	cmp	r3, r6
 8006112:	d054      	beq.n	80061be <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 8006114:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006116:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006118:	684c      	ldr	r4, [r1, #4]
 800611a:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800611c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800611e:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006120:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006128:	699c      	ldr	r4, [r3, #24]
 800612a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800612e:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006130:	6999      	ldr	r1, [r3, #24]
 8006132:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8006136:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8006138:	2300      	movs	r3, #0
 800613a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800613e:	2200      	movs	r2, #0
}
 8006140:	4610      	mov	r0, r2
 8006142:	bcf0      	pop	{r4, r5, r6, r7}
 8006144:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006146:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006148:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800614a:	6a1a      	ldr	r2, [r3, #32]
 800614c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006150:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006152:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006154:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006156:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006158:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800615c:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800615e:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006160:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006164:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006168:	4e27      	ldr	r6, [pc, #156]	; (8006208 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800616a:	42b3      	cmp	r3, r6
 800616c:	d03c      	beq.n	80061e8 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 800616e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006170:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006172:	684c      	ldr	r4, [r1, #4]
 8006174:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006176:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006178:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800617a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800617c:	f042 0208 	orr.w	r2, r2, #8
 8006180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006182:	69dc      	ldr	r4, [r3, #28]
 8006184:	f024 0404 	bic.w	r4, r4, #4
 8006188:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800618a:	69d9      	ldr	r1, [r3, #28]
 800618c:	4329      	orrs	r1, r5
 800618e:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8006190:	2300      	movs	r3, #0
 8006192:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006196:	2200      	movs	r2, #0
}
 8006198:	4610      	mov	r0, r2
 800619a:	bcf0      	pop	{r4, r5, r6, r7}
 800619c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800619e:	2202      	movs	r2, #2
}
 80061a0:	4610      	mov	r0, r2
 80061a2:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80061a4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80061a6:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80061aa:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80061ac:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061b0:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80061b4:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80061b6:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80061ba:	4335      	orrs	r5, r6
 80061bc:	e77d      	b.n	80060ba <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061be:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80061c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061c4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061c8:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061cc:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061d0:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80061d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061d6:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80061da:	e79b      	b.n	8006114 <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061dc:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061de:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e2:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 80061e6:	e73c      	b.n	8006062 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061e8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ee:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061f2:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061f6:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061fa:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80061fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006200:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8006204:	e7b3      	b.n	800616e <HAL_TIM_PWM_ConfigChannel+0x16e>
 8006206:	bf00      	nop
 8006208:	40010000 	.word	0x40010000

0800620c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800620c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d075      	beq.n	8006300 <HAL_TIM_ConfigClockSource+0xf4>
 8006214:	4602      	mov	r2, r0
{
 8006216:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800621a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006220:	2001      	movs	r0, #1
 8006222:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006226:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006228:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800622c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006230:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006232:	680b      	ldr	r3, [r1, #0]
 8006234:	2b60      	cmp	r3, #96	; 0x60
 8006236:	d065      	beq.n	8006304 <HAL_TIM_ConfigClockSource+0xf8>
 8006238:	d824      	bhi.n	8006284 <HAL_TIM_ConfigClockSource+0x78>
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d07c      	beq.n	8006338 <HAL_TIM_ConfigClockSource+0x12c>
 800623e:	d94b      	bls.n	80062d8 <HAL_TIM_ConfigClockSource+0xcc>
 8006240:	2b50      	cmp	r3, #80	; 0x50
 8006242:	d117      	bne.n	8006274 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006244:	6848      	ldr	r0, [r1, #4]
 8006246:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006248:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624a:	6a23      	ldr	r3, [r4, #32]
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006252:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006254:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800625c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800625e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006262:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006264:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006266:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800626c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8006270:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006272:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006274:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006276:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006278:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800627c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8006280:	bc30      	pop	{r4, r5}
 8006282:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006288:	d038      	beq.n	80062fc <HAL_TIM_ConfigClockSource+0xf0>
 800628a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628e:	d110      	bne.n	80062b2 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006290:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006294:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006296:	432b      	orrs	r3, r5
 8006298:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800629a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800629e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80062a2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062a4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80062ac:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062ae:	60a3      	str	r3, [r4, #8]
      break;
 80062b0:	e7e0      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80062b2:	2b70      	cmp	r3, #112	; 0x70
 80062b4:	d1de      	bne.n	8006274 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062b6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80062ba:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062bc:	432b      	orrs	r3, r5
 80062be:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c0:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80062c8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80062ca:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80062cc:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80062d2:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 80062d4:	60a3      	str	r3, [r4, #8]
      break;
 80062d6:	e7cd      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d002      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0xd6>
 80062dc:	d90a      	bls.n	80062f4 <HAL_TIM_ConfigClockSource+0xe8>
 80062de:	2b30      	cmp	r3, #48	; 0x30
 80062e0:	d1c8      	bne.n	8006274 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80062e2:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80062e4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062e8:	430b      	orrs	r3, r1
 80062ea:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80062ee:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80062f0:	60a3      	str	r3, [r4, #8]
}
 80062f2:	e7bf      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80062f4:	f033 0110 	bics.w	r1, r3, #16
 80062f8:	d1bc      	bne.n	8006274 <HAL_TIM_ConfigClockSource+0x68>
 80062fa:	e7f2      	b.n	80062e2 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80062fc:	2000      	movs	r0, #0
 80062fe:	e7b9      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8006300:	2002      	movs	r0, #2
}
 8006302:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006304:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006306:	68cb      	ldr	r3, [r1, #12]
 8006308:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800630a:	f020 0010 	bic.w	r0, r0, #16
 800630e:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006310:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006312:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006316:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 800631a:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800631c:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800631e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006322:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8006326:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006328:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800632e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8006332:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006334:	60a3      	str	r3, [r4, #8]
}
 8006336:	e79d      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006338:	6848      	ldr	r0, [r1, #4]
 800633a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800633c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633e:	6a23      	ldr	r3, [r4, #32]
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006346:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006348:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800634c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006350:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006352:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006356:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006358:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800635a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800635c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006360:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8006364:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006366:	60a3      	str	r3, [r4, #8]
}
 8006368:	e784      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x68>
 800636a:	bf00      	nop

0800636c <HAL_TIM_OC_DelayElapsedCallback>:
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop

08006370 <HAL_TIM_IC_CaptureCallback>:
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop

08006374 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop

08006378 <HAL_TIM_TriggerCallback>:
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop

0800637c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800637c:	6803      	ldr	r3, [r0, #0]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	0791      	lsls	r1, r2, #30
{
 8006382:	b510      	push	{r4, lr}
 8006384:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006386:	d502      	bpl.n	800638e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	0792      	lsls	r2, r2, #30
 800638c:	d45f      	bmi.n	800644e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	0750      	lsls	r0, r2, #29
 8006392:	d502      	bpl.n	800639a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	0751      	lsls	r1, r2, #29
 8006398:	d446      	bmi.n	8006428 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	0712      	lsls	r2, r2, #28
 800639e:	d502      	bpl.n	80063a6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	0710      	lsls	r0, r2, #28
 80063a4:	d42e      	bmi.n	8006404 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	06d2      	lsls	r2, r2, #27
 80063aa:	d502      	bpl.n	80063b2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	06d0      	lsls	r0, r2, #27
 80063b0:	d418      	bmi.n	80063e4 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	07d1      	lsls	r1, r2, #31
 80063b6:	d502      	bpl.n	80063be <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	07d2      	lsls	r2, r2, #31
 80063bc:	d45d      	bmi.n	800647a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	0610      	lsls	r0, r2, #24
 80063c2:	d502      	bpl.n	80063ca <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	0611      	lsls	r1, r2, #24
 80063c8:	d45f      	bmi.n	800648a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	0652      	lsls	r2, r2, #25
 80063ce:	d502      	bpl.n	80063d6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	0650      	lsls	r0, r2, #25
 80063d4:	d461      	bmi.n	800649a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	0691      	lsls	r1, r2, #26
 80063da:	d502      	bpl.n	80063e2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	0692      	lsls	r2, r2, #26
 80063e0:	d443      	bmi.n	800646a <HAL_TIM_IRQHandler+0xee>
}
 80063e2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063e4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063e8:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063ea:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80063f4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063f6:	d064      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80063f8:	f7ff ffba 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063fe:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006400:	7722      	strb	r2, [r4, #28]
 8006402:	e7d6      	b.n	80063b2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006404:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006408:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800640a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800640c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006412:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006414:	d152      	bne.n	80064bc <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006416:	f7ff ffa9 	bl	800636c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800641a:	4620      	mov	r0, r4
 800641c:	f7ff ffaa 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006420:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006422:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006424:	7722      	strb	r2, [r4, #28]
 8006426:	e7be      	b.n	80063a6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006428:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800642c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800642e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006430:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006438:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800643a:	d13c      	bne.n	80064b6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643c:	f7ff ff96 	bl	800636c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006440:	4620      	mov	r0, r4
 8006442:	f7ff ff97 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006446:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006448:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	7722      	strb	r2, [r4, #28]
 800644c:	e7a5      	b.n	800639a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800644e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006452:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006454:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006456:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	079b      	lsls	r3, r3, #30
 800645c:	d025      	beq.n	80064aa <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800645e:	f7ff ff87 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006464:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	7722      	strb	r2, [r4, #28]
 8006468:	e791      	b.n	800638e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800646a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800646e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006470:	611a      	str	r2, [r3, #16]
}
 8006472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006476:	f000 b867 	b.w	8006548 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800647a:	f06f 0201 	mvn.w	r2, #1
 800647e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006480:	4620      	mov	r0, r4
 8006482:	f7fc f90b 	bl	800269c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	e799      	b.n	80063be <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800648a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800648e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006490:	4620      	mov	r0, r4
 8006492:	f000 f85b 	bl	800654c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	e797      	b.n	80063ca <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800649a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800649e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7ff ff69 	bl	8006378 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	e795      	b.n	80063d6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	f7ff ff5f 	bl	800636c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ae:	4620      	mov	r0, r4
 80064b0:	f7ff ff60 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
 80064b4:	e7d5      	b.n	8006462 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80064b6:	f7ff ff5b 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 80064ba:	e7c4      	b.n	8006446 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80064bc:	f7ff ff58 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 80064c0:	e7ae      	b.n	8006420 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c2:	f7ff ff53 	bl	800636c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff ff54 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
 80064cc:	e796      	b.n	80063fc <HAL_TIM_IRQHandler+0x80>
 80064ce:	bf00      	nop

080064d0 <HAL_TIM_Base_GetState>:
  return htim->State;
 80064d0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop

080064d8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d02f      	beq.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e0:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80064e2:	2202      	movs	r2, #2
{
 80064e4:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80064e6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80064ea:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ec:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80064ee:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80064f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f8:	4a12      	ldr	r2, [pc, #72]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d012      	beq.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006502:	d00f      	beq.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006504:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006508:	4293      	cmp	r3, r2
 800650a:	d00b      	beq.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800650c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800651c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006520:	4293      	cmp	r3, r2
 8006522:	d104      	bne.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006524:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006526:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800652a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800652c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800652e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006530:	2201      	movs	r2, #1
 8006532:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006536:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800653a:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800653c:	4618      	mov	r0, r3
}
 800653e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006540:	2002      	movs	r0, #2
}
 8006542:	4770      	bx	lr
 8006544:	40010000 	.word	0x40010000

08006548 <HAL_TIMEx_CommutCallback>:
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop

0800654c <HAL_TIMEx_BreakCallback>:
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop

08006550 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006550:	2800      	cmp	r0, #0
 8006552:	f000 808f 	beq.w	8006674 <HAL_UART_Init+0x124>
{
 8006556:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006558:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800655c:	4604      	mov	r4, r0
 800655e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8081 	beq.w	800666a <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006568:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800656a:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 800656c:	2224      	movs	r2, #36	; 0x24
 800656e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006578:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800657a:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800657c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800657e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006582:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006584:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006586:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006588:	4302      	orrs	r2, r0
 800658a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800658c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800658e:	4302      	orrs	r2, r0
 8006590:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8006592:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8006596:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800659a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800659c:	430a      	orrs	r2, r1
 800659e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065a4:	4934      	ldr	r1, [pc, #208]	; (8006678 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80065aa:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065ac:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ae:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065b0:	d035      	beq.n	800661e <HAL_UART_Init+0xce>
 80065b2:	4a32      	ldr	r2, [pc, #200]	; (800667c <HAL_UART_Init+0x12c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d032      	beq.n	800661e <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065b8:	f7ff f856 	bl	8005668 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065bc:	69e3      	ldr	r3, [r4, #28]
 80065be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c2:	d032      	beq.n	800662a <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065c4:	6863      	ldr	r3, [r4, #4]
 80065c6:	2119      	movs	r1, #25
 80065c8:	009a      	lsls	r2, r3, #2
 80065ca:	fba0 0101 	umull	r0, r1, r0, r1
 80065ce:	0f9b      	lsrs	r3, r3, #30
 80065d0:	f7fa fb22 	bl	8000c18 <__aeabi_uldivmod>
 80065d4:	492a      	ldr	r1, [pc, #168]	; (8006680 <HAL_UART_Init+0x130>)
 80065d6:	fba1 3200 	umull	r3, r2, r1, r0
 80065da:	0952      	lsrs	r2, r2, #5
 80065dc:	2564      	movs	r5, #100	; 0x64
 80065de:	fb05 0012 	mls	r0, r5, r2, r0
 80065e2:	0100      	lsls	r0, r0, #4
 80065e4:	3032      	adds	r0, #50	; 0x32
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	fba1 1000 	umull	r1, r0, r1, r0
 80065ec:	0112      	lsls	r2, r2, #4
 80065ee:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 80065f2:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006602:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006604:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006606:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006608:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800660a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800660e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006610:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006612:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006616:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800661a:	4628      	mov	r0, r5
}
 800661c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800661e:	f7ff f833 	bl	8005688 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006622:	69e3      	ldr	r3, [r4, #28]
 8006624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006628:	d1cc      	bne.n	80065c4 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800662a:	6862      	ldr	r2, [r4, #4]
 800662c:	2119      	movs	r1, #25
 800662e:	1892      	adds	r2, r2, r2
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	415b      	adcs	r3, r3
 8006636:	fba0 0101 	umull	r0, r1, r0, r1
 800663a:	f7fa faed 	bl	8000c18 <__aeabi_uldivmod>
 800663e:	4b10      	ldr	r3, [pc, #64]	; (8006680 <HAL_UART_Init+0x130>)
 8006640:	fba3 2100 	umull	r2, r1, r3, r0
 8006644:	094d      	lsrs	r5, r1, #5
 8006646:	2264      	movs	r2, #100	; 0x64
 8006648:	fb02 0215 	mls	r2, r2, r5, r0
 800664c:	00d2      	lsls	r2, r2, #3
 800664e:	3232      	adds	r2, #50	; 0x32
 8006650:	fba3 3202 	umull	r3, r2, r3, r2
 8006654:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8006658:	0912      	lsrs	r2, r2, #4
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8006660:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006664:	440a      	add	r2, r1
 8006666:	609a      	str	r2, [r3, #8]
 8006668:	e7c4      	b.n	80065f4 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800666a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800666e:	f7fc fdef 	bl	8003250 <HAL_UART_MspInit>
 8006672:	e779      	b.n	8006568 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8006674:	2001      	movs	r0, #1
}
 8006676:	4770      	bx	lr
 8006678:	40011000 	.word	0x40011000
 800667c:	40011400 	.word	0x40011400
 8006680:	51eb851f 	.word	0x51eb851f

08006684 <HAL_UART_Transmit>:
{
 8006684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006688:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800668a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800668e:	2820      	cmp	r0, #32
 8006690:	d177      	bne.n	8006782 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8006692:	4689      	mov	r9, r1
 8006694:	2900      	cmp	r1, #0
 8006696:	d040      	beq.n	800671a <HAL_UART_Transmit+0x96>
 8006698:	4614      	mov	r4, r2
 800669a:	2a00      	cmp	r2, #0
 800669c:	d03d      	beq.n	800671a <HAL_UART_Transmit+0x96>
 800669e:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 80066a0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d06c      	beq.n	8006782 <HAL_UART_Transmit+0xfe>
 80066a8:	2301      	movs	r3, #1
 80066aa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ae:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b4:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80066bc:	f7fd f9b0 	bl	8003a20 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c0:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 80066c2:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80066c8:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 80066ca:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066cc:	d05c      	beq.n	8006788 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 80066ce:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80066d0:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80066d2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80066d4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d07e      	beq.n	80067da <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066dc:	682c      	ldr	r4, [r5, #0]
 80066de:	1c72      	adds	r2, r6, #1
 80066e0:	d11e      	bne.n	8006720 <HAL_UART_Transmit+0x9c>
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	0613      	lsls	r3, r2, #24
 80066e6:	d5fc      	bpl.n	80066e2 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 80066e8:	f1b9 0f00 	cmp.w	r9, #0
 80066ec:	d044      	beq.n	8006778 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066ee:	f819 3b01 	ldrb.w	r3, [r9], #1
 80066f2:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 80066f4:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066fc:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1ec      	bne.n	80066de <HAL_UART_Transmit+0x5a>
 8006704:	1c71      	adds	r1, r6, #1
 8006706:	d145      	bne.n	8006794 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	065a      	lsls	r2, r3, #25
 800670c:	d5fc      	bpl.n	8006708 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800670e:	2320      	movs	r3, #32
 8006710:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8006714:	2000      	movs	r0, #0
}
 8006716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800671a:	2001      	movs	r0, #1
}
 800671c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	0618      	lsls	r0, r3, #24
 8006724:	d4e0      	bmi.n	80066e8 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006726:	b12e      	cbz	r6, 8006734 <HAL_UART_Transmit+0xb0>
 8006728:	f7fd f97a 	bl	8003a20 <HAL_GetTick>
 800672c:	1bc0      	subs	r0, r0, r7
 800672e:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006730:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006732:	d2d4      	bcs.n	80066de <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	f104 030c 	add.w	r3, r4, #12
 8006738:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800673c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	f104 010c 	add.w	r1, r4, #12
 8006744:	e841 3200 	strex	r2, r3, [r1]
 8006748:	2a00      	cmp	r2, #0
 800674a:	d1f3      	bne.n	8006734 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	f104 0314 	add.w	r3, r4, #20
 8006750:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006754:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	f104 0114 	add.w	r1, r4, #20
 800675c:	e841 3200 	strex	r2, r3, [r1]
 8006760:	2a00      	cmp	r2, #0
 8006762:	d1f3      	bne.n	800674c <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8006764:	2320      	movs	r3, #32
 8006766:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800676a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 800676e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8006772:	2003      	movs	r0, #3
}
 8006774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006778:	f838 3b02 	ldrh.w	r3, [r8], #2
 800677c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006780:	e7b7      	b.n	80066f2 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8006782:	2002      	movs	r0, #2
}
 8006784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006788:	692b      	ldr	r3, [r5, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d19f      	bne.n	80066ce <HAL_UART_Transmit+0x4a>
 800678e:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8006790:	4699      	mov	r9, r3
 8006792:	e79c      	b.n	80066ce <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	065b      	lsls	r3, r3, #25
 8006798:	d4b9      	bmi.n	800670e <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800679a:	b12e      	cbz	r6, 80067a8 <HAL_UART_Transmit+0x124>
 800679c:	f7fd f940 	bl	8003a20 <HAL_GetTick>
 80067a0:	1bc0      	subs	r0, r0, r7
 80067a2:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067a4:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067a6:	d2ad      	bcs.n	8006704 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	f104 030c 	add.w	r3, r4, #12
 80067ac:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	f104 010c 	add.w	r1, r4, #12
 80067b8:	e841 3200 	strex	r2, r3, [r1]
 80067bc:	2a00      	cmp	r2, #0
 80067be:	d1f3      	bne.n	80067a8 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	f104 0314 	add.w	r3, r4, #20
 80067c4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	f104 0114 	add.w	r1, r4, #20
 80067d0:	e841 3200 	strex	r2, r3, [r1]
 80067d4:	2a00      	cmp	r2, #0
 80067d6:	d1f3      	bne.n	80067c0 <HAL_UART_Transmit+0x13c>
 80067d8:	e7c4      	b.n	8006764 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067da:	682c      	ldr	r4, [r5, #0]
 80067dc:	e792      	b.n	8006704 <HAL_UART_Transmit+0x80>
 80067de:	bf00      	nop

080067e0 <HAL_UART_Transmit_DMA>:
{
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80067e4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80067e8:	2820      	cmp	r0, #32
 80067ea:	d135      	bne.n	8006858 <HAL_UART_Transmit_DMA+0x78>
    if ((pData == NULL) || (Size == 0U))
 80067ec:	b391      	cbz	r1, 8006854 <HAL_UART_Transmit_DMA+0x74>
 80067ee:	b38a      	cbz	r2, 8006854 <HAL_UART_Transmit_DMA+0x74>
    __HAL_LOCK(huart);
 80067f0:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80067f4:	2801      	cmp	r0, #1
 80067f6:	d02f      	beq.n	8006858 <HAL_UART_Transmit_DMA+0x78>
 80067f8:	2001      	movs	r0, #1
    huart->TxXferCount = Size;
 80067fa:	84e2      	strh	r2, [r4, #38]	; 0x26
    __HAL_LOCK(huart);
 80067fc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    huart->TxXferSize = Size;
 8006800:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006802:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006804:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8006864 <HAL_UART_Transmit_DMA+0x84>
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006808:	4f14      	ldr	r7, [pc, #80]	; (800685c <HAL_UART_Transmit_DMA+0x7c>)
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800680a:	4e15      	ldr	r6, [pc, #84]	; (8006860 <HAL_UART_Transmit_DMA+0x80>)
    huart->pTxBuffPtr = pData;
 800680c:	6221      	str	r1, [r4, #32]
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800680e:	4613      	mov	r3, r2
 8006810:	6822      	ldr	r2, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006812:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006814:	f04f 0e21 	mov.w	lr, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006818:	6425      	str	r5, [r4, #64]	; 0x40
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800681a:	3204      	adds	r2, #4
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800681c:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006820:	e9c0 c70f 	strd	ip, r7, [r0, #60]	; 0x3c
    huart->hdmatx->XferAbortCallback = NULL;
 8006824:	e9c0 6513 	strd	r6, r5, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006828:	f7fd fc82 	bl	8004130 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800682c:	6822      	ldr	r2, [r4, #0]
 800682e:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8006832:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8006834:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	f102 0314 	add.w	r3, r2, #20
 800683c:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	f102 0014 	add.w	r0, r2, #20
 8006848:	e840 3100 	strex	r1, r3, [r0]
 800684c:	2900      	cmp	r1, #0
 800684e:	d1f3      	bne.n	8006838 <HAL_UART_Transmit_DMA+0x58>
    return HAL_OK;
 8006850:	2000      	movs	r0, #0
}
 8006852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8006854:	2001      	movs	r0, #1
}
 8006856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006858:	2002      	movs	r0, #2
}
 800685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800685c:	080068b9 	.word	0x080068b9
 8006860:	080068c9 	.word	0x080068c9
 8006864:	08006869 	.word	0x08006869

08006868 <UART_DMATransmitCplt>:
{
 8006868:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800686a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800686c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006874:	d11a      	bne.n	80068ac <UART_DMATransmitCplt+0x44>
    huart->TxXferCount = 0x00U;
 8006876:	6802      	ldr	r2, [r0, #0]
 8006878:	84c3      	strh	r3, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	f102 0314 	add.w	r3, r2, #20
 800687e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	f102 0014 	add.w	r0, r2, #20
 800688a:	e840 3100 	strex	r1, r3, [r0]
 800688e:	2900      	cmp	r1, #0
 8006890:	d1f3      	bne.n	800687a <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	f102 030c 	add.w	r3, r2, #12
 8006896:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800689a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	f102 000c 	add.w	r0, r2, #12
 80068a2:	e840 3100 	strex	r1, r3, [r0]
 80068a6:	2900      	cmp	r1, #0
 80068a8:	d1f3      	bne.n	8006892 <UART_DMATransmitCplt+0x2a>
}
 80068aa:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80068ac:	f7fd f804 	bl	80038b8 <HAL_UART_TxCpltCallback>
}
 80068b0:	bd08      	pop	{r3, pc}
 80068b2:	bf00      	nop

080068b4 <HAL_UART_TxHalfCpltCallback>:
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop

080068b8 <UART_DMATxHalfCplt>:
{
 80068b8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80068ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80068bc:	f7ff fffa 	bl	80068b4 <HAL_UART_TxHalfCpltCallback>
}
 80068c0:	bd08      	pop	{r3, pc}
 80068c2:	bf00      	nop

080068c4 <HAL_UART_RxHalfCpltCallback>:
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop

080068c8 <UART_DMAError>:
{
 80068c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068cc:	6803      	ldr	r3, [r0, #0]
 80068ce:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068d0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80068d4:	2a21      	cmp	r2, #33	; 0x21
 80068d6:	d00b      	beq.n	80068f0 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068d8:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068da:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80068de:	2a22      	cmp	r2, #34	; 0x22
 80068e0:	d01e      	beq.n	8006920 <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80068e4:	f043 0310 	orr.w	r3, r3, #16
 80068e8:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80068ea:	f7fc ffd9 	bl	80038a0 <HAL_UART_ErrorCallback>
}
 80068ee:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068f0:	0609      	lsls	r1, r1, #24
 80068f2:	d5f1      	bpl.n	80068d8 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80068f4:	2200      	movs	r2, #0
 80068f6:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	f103 020c 	add.w	r2, r3, #12
 80068fc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006900:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	f103 0c0c 	add.w	ip, r3, #12
 8006908:	e84c 2100 	strex	r1, r2, [ip]
 800690c:	2900      	cmp	r1, #0
 800690e:	d1f3      	bne.n	80068f8 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8006910:	2220      	movs	r2, #32
 8006912:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006916:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006918:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800691c:	2a22      	cmp	r2, #34	; 0x22
 800691e:	d1e0      	bne.n	80068e2 <UART_DMAError+0x1a>
 8006920:	064a      	lsls	r2, r1, #25
 8006922:	d5de      	bpl.n	80068e2 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8006924:	2200      	movs	r2, #0
 8006926:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	f103 020c 	add.w	r2, r3, #12
 800692c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006930:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	f103 0c0c 	add.w	ip, r3, #12
 8006938:	e84c 2100 	strex	r1, r2, [ip]
 800693c:	2900      	cmp	r1, #0
 800693e:	d1f3      	bne.n	8006928 <UART_DMAError+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	f103 0214 	add.w	r2, r3, #20
 8006944:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	f103 0c14 	add.w	ip, r3, #20
 8006950:	e84c 2100 	strex	r1, r2, [ip]
 8006954:	2900      	cmp	r1, #0
 8006956:	d1f3      	bne.n	8006940 <UART_DMAError+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006958:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800695a:	2a01      	cmp	r2, #1
 800695c:	d005      	beq.n	800696a <UART_DMAError+0xa2>
  huart->RxState = HAL_UART_STATE_READY;
 800695e:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006960:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006962:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006966:	6303      	str	r3, [r0, #48]	; 0x30
}
 8006968:	e7bb      	b.n	80068e2 <UART_DMAError+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	f103 020c 	add.w	r2, r3, #12
 800696e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006972:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	f103 0c0c 	add.w	ip, r3, #12
 800697a:	e84c 2100 	strex	r1, r2, [ip]
 800697e:	2900      	cmp	r1, #0
 8006980:	d1f3      	bne.n	800696a <UART_DMAError+0xa2>
 8006982:	e7ec      	b.n	800695e <UART_DMAError+0x96>

08006984 <HAL_UARTEx_RxEventCallback>:
}
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop

08006988 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006988:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800698a:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800698c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800698e:	2b01      	cmp	r3, #1
 8006990:	d002      	beq.n	8006998 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8006992:	f7ff ff97 	bl	80068c4 <HAL_UART_RxHalfCpltCallback>
}
 8006996:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006998:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800699a:	0849      	lsrs	r1, r1, #1
 800699c:	f7ff fff2 	bl	8006984 <HAL_UARTEx_RxEventCallback>
}
 80069a0:	bd08      	pop	{r3, pc}
 80069a2:	bf00      	nop

080069a4 <UART_DMAReceiveCplt>:
{
 80069a4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069a6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80069b0:	d12b      	bne.n	8006a0a <UART_DMAReceiveCplt+0x66>
    huart->RxXferCount = 0U;
 80069b2:	6803      	ldr	r3, [r0, #0]
 80069b4:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	f103 020c 	add.w	r2, r3, #12
 80069ba:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	f103 0c0c 	add.w	ip, r3, #12
 80069c6:	e84c 2100 	strex	r1, r2, [ip]
 80069ca:	2900      	cmp	r1, #0
 80069cc:	d1f3      	bne.n	80069b6 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	f103 0214 	add.w	r2, r3, #20
 80069d2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	f103 0c14 	add.w	ip, r3, #20
 80069de:	e84c 2100 	strex	r1, r2, [ip]
 80069e2:	2900      	cmp	r1, #0
 80069e4:	d1f3      	bne.n	80069ce <UART_DMAReceiveCplt+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	f103 0214 	add.w	r2, r3, #20
 80069ea:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	f103 0c14 	add.w	ip, r3, #20
 80069f6:	e84c 2100 	strex	r1, r2, [ip]
 80069fa:	2900      	cmp	r1, #0
 80069fc:	d1f3      	bne.n	80069e6 <UART_DMAReceiveCplt+0x42>
    huart->RxState = HAL_UART_STATE_READY;
 80069fe:	2220      	movs	r2, #32
 8006a00:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a04:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006a06:	2a01      	cmp	r2, #1
 8006a08:	d005      	beq.n	8006a16 <UART_DMAReceiveCplt+0x72>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d00f      	beq.n	8006a30 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8006a10:	f7fc ff82 	bl	8003918 <HAL_UART_RxCpltCallback>
}
 8006a14:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	f103 020c 	add.w	r2, r3, #12
 8006a1a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	f103 0c0c 	add.w	ip, r3, #12
 8006a26:	e84c 2100 	strex	r1, r2, [ip]
 8006a2a:	2900      	cmp	r1, #0
 8006a2c:	d1f3      	bne.n	8006a16 <UART_DMAReceiveCplt+0x72>
 8006a2e:	e7ec      	b.n	8006a0a <UART_DMAReceiveCplt+0x66>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a30:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006a32:	f7ff ffa7 	bl	8006984 <HAL_UARTEx_RxEventCallback>
}
 8006a36:	bd08      	pop	{r3, pc}

08006a38 <UART_Start_Receive_DMA>:
{
 8006a38:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a3a:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3c:	2500      	movs	r5, #0
{
 8006a3e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a40:	6405      	str	r5, [r0, #64]	; 0x40
  huart->pRxBuffPtr = pData;
 8006a42:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a44:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->RxXferSize = Size;
 8006a48:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a4a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a4c:	4e1f      	ldr	r6, [pc, #124]	; (8006acc <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8006a4e:	6505      	str	r5, [r0, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a50:	4613      	mov	r3, r2
 8006a52:	460a      	mov	r2, r1
 8006a54:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a56:	63c6      	str	r6, [r0, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a58:	4e1d      	ldr	r6, [pc, #116]	; (8006ad0 <UART_Start_Receive_DMA+0x98>)
 8006a5a:	6406      	str	r6, [r0, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a5c:	4e1d      	ldr	r6, [pc, #116]	; (8006ad4 <UART_Start_Receive_DMA+0x9c>)
 8006a5e:	64c6      	str	r6, [r0, #76]	; 0x4c
{
 8006a60:	b082      	sub	sp, #8
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a62:	3104      	adds	r1, #4
 8006a64:	f7fd fb64 	bl	8004130 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	9501      	str	r5, [sp, #4]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	9201      	str	r2, [sp, #4]
 8006a70:	6859      	ldr	r1, [r3, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a72:	6922      	ldr	r2, [r4, #16]
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a74:	9101      	str	r1, [sp, #4]
 8006a76:	9901      	ldr	r1, [sp, #4]
  __HAL_UNLOCK(huart);
 8006a78:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a7c:	b15a      	cbz	r2, 8006a96 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	f103 020c 	add.w	r2, r3, #12
 8006a82:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	f103 000c 	add.w	r0, r3, #12
 8006a8e:	e840 2100 	strex	r1, r2, [r0]
 8006a92:	2900      	cmp	r1, #0
 8006a94:	d1f3      	bne.n	8006a7e <UART_Start_Receive_DMA+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	f103 0214 	add.w	r2, r3, #20
 8006a9a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	f103 0014 	add.w	r0, r3, #20
 8006aa6:	e840 2100 	strex	r1, r2, [r0]
 8006aaa:	2900      	cmp	r1, #0
 8006aac:	d1f3      	bne.n	8006a96 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	f103 0214 	add.w	r2, r3, #20
 8006ab2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	f103 0114 	add.w	r1, r3, #20
 8006abe:	e841 2000 	strex	r0, r2, [r1]
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d1f3      	bne.n	8006aae <UART_Start_Receive_DMA+0x76>
}
 8006ac6:	b002      	add	sp, #8
 8006ac8:	bd70      	pop	{r4, r5, r6, pc}
 8006aca:	bf00      	nop
 8006acc:	080069a5 	.word	0x080069a5
 8006ad0:	08006989 	.word	0x08006989
 8006ad4:	080068c9 	.word	0x080068c9

08006ad8 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ad8:	f890 c03e 	ldrb.w	ip, [r0, #62]	; 0x3e
 8006adc:	f1bc 0f20 	cmp.w	ip, #32
 8006ae0:	d111      	bne.n	8006b06 <HAL_UART_Receive_DMA+0x2e>
{
 8006ae2:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
 8006ae4:	b161      	cbz	r1, 8006b00 <HAL_UART_Receive_DMA+0x28>
 8006ae6:	b15a      	cbz	r2, 8006b00 <HAL_UART_Receive_DMA+0x28>
    __HAL_LOCK(huart);
 8006ae8:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8006aec:	2c01      	cmp	r4, #1
 8006aee:	d00c      	beq.n	8006b0a <HAL_UART_Receive_DMA+0x32>
 8006af0:	2401      	movs	r4, #1
 8006af2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af6:	2400      	movs	r4, #0
 8006af8:	6304      	str	r4, [r0, #48]	; 0x30
}
 8006afa:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006afc:	f7ff bf9c 	b.w	8006a38 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8006b00:	2001      	movs	r0, #1
}
 8006b02:	bc30      	pop	{r4, r5}
 8006b04:	4770      	bx	lr
    return HAL_BUSY;
 8006b06:	2002      	movs	r0, #2
}
 8006b08:	4770      	bx	lr
    return HAL_BUSY;
 8006b0a:	2002      	movs	r0, #2
}
 8006b0c:	bc30      	pop	{r4, r5}
 8006b0e:	4770      	bx	lr

08006b10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b10:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006b12:	4903      	ldr	r1, [pc, #12]	; (8006b20 <MX_FATFS_Init+0x10>)
 8006b14:	4803      	ldr	r0, [pc, #12]	; (8006b24 <MX_FATFS_Init+0x14>)
 8006b16:	f002 f985 	bl	8008e24 <FATFS_LinkDriver>
 8006b1a:	4b03      	ldr	r3, [pc, #12]	; (8006b28 <MX_FATFS_Init+0x18>)
 8006b1c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b1e:	bd08      	pop	{r3, pc}
 8006b20:	2000306c 	.word	0x2000306c
 8006b24:	20000014 	.word	0x20000014
 8006b28:	20003070 	.word	0x20003070

08006b2c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	4770      	bx	lr

08006b30 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006b30:	f7fa bf74 	b.w	8001a1c <SD_disk_initialize>

08006b34 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8006b34:	f7fb b882 	b.w	8001c3c <SD_disk_status>

08006b38 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006b38:	f7fb b88a 	b.w	8001c50 <SD_disk_read>

08006b3c <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006b3c:	f7fb b9d2 	b.w	8001ee4 <SD_disk_write>

08006b40 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8006b40:	f7fb bbc4 	b.w	80022cc <SD_disk_ioctl>

08006b44 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b44:	4b03      	ldr	r3, [pc, #12]	; (8006b54 <disk_status+0x10>)
 8006b46:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8006b4a:	4403      	add	r3, r0
 8006b4c:	6852      	ldr	r2, [r2, #4]
 8006b4e:	7a18      	ldrb	r0, [r3, #8]
 8006b50:	6853      	ldr	r3, [r2, #4]
 8006b52:	4718      	bx	r3
 8006b54:	2000309c 	.word	0x2000309c

08006b58 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8006b58:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <disk_initialize+0x1c>)
 8006b5a:	5c1a      	ldrb	r2, [r3, r0]
 8006b5c:	b942      	cbnz	r2, 8006b70 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006b5e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 8006b62:	2101      	movs	r1, #1
 8006b64:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006b66:	6852      	ldr	r2, [r2, #4]
 8006b68:	4418      	add	r0, r3
 8006b6a:	6813      	ldr	r3, [r2, #0]
 8006b6c:	7a00      	ldrb	r0, [r0, #8]
 8006b6e:	4718      	bx	r3
  }
  return stat;
}
 8006b70:	2000      	movs	r0, #0
 8006b72:	4770      	bx	lr
 8006b74:	2000309c 	.word	0x2000309c

08006b78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006b78:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b7a:	4c05      	ldr	r4, [pc, #20]	; (8006b90 <disk_read+0x18>)
 8006b7c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006b80:	4404      	add	r4, r0
 8006b82:	686d      	ldr	r5, [r5, #4]
 8006b84:	7a20      	ldrb	r0, [r4, #8]
 8006b86:	68ac      	ldr	r4, [r5, #8]
 8006b88:	46a4      	mov	ip, r4
  return res;
}
 8006b8a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b8c:	4760      	bx	ip
 8006b8e:	bf00      	nop
 8006b90:	2000309c 	.word	0x2000309c

08006b94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006b94:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006b96:	4c05      	ldr	r4, [pc, #20]	; (8006bac <disk_write+0x18>)
 8006b98:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006b9c:	4404      	add	r4, r0
 8006b9e:	686d      	ldr	r5, [r5, #4]
 8006ba0:	7a20      	ldrb	r0, [r4, #8]
 8006ba2:	68ec      	ldr	r4, [r5, #12]
 8006ba4:	46a4      	mov	ip, r4
  return res;
}
 8006ba6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006ba8:	4760      	bx	ip
 8006baa:	bf00      	nop
 8006bac:	2000309c 	.word	0x2000309c

08006bb0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <disk_ioctl+0x14>)
 8006bb2:	eb03 0c00 	add.w	ip, r3, r0
 8006bb6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006bba:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	4718      	bx	r3
 8006bc4:	2000309c 	.word	0x2000309c

08006bc8 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8006bc8:	4b2a      	ldr	r3, [pc, #168]	; (8006c74 <inc_lock+0xac>)
{
 8006bca:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	6805      	ldr	r5, [r0, #0]
 8006bd0:	4295      	cmp	r5, r2
 8006bd2:	d01d      	beq.n	8006c10 <inc_lock+0x48>
 8006bd4:	691c      	ldr	r4, [r3, #16]
 8006bd6:	42ac      	cmp	r4, r5
 8006bd8:	d007      	beq.n	8006bea <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006bda:	2a00      	cmp	r2, #0
 8006bdc:	d02e      	beq.n	8006c3c <inc_lock+0x74>
 8006bde:	2c00      	cmp	r4, #0
 8006be0:	d044      	beq.n	8006c6c <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006be2:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 8006be4:	4620      	mov	r0, r4
 8006be6:	bcf0      	pop	{r4, r5, r6, r7}
 8006be8:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 8006bea:	695e      	ldr	r6, [r3, #20]
 8006bec:	6887      	ldr	r7, [r0, #8]
 8006bee:	42be      	cmp	r6, r7
 8006bf0:	d1f3      	bne.n	8006bda <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 8006bf2:	699e      	ldr	r6, [r3, #24]
 8006bf4:	6947      	ldr	r7, [r0, #20]
 8006bf6:	42be      	cmp	r6, r7
 8006bf8:	d1ef      	bne.n	8006bda <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006bfa:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006bfc:	b999      	cbnz	r1, 8006c26 <inc_lock+0x5e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006bfe:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 8006c02:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8006c06:	8989      	ldrh	r1, [r1, #12]
	return i + 1;
 8006c08:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c0a:	1c4a      	adds	r2, r1, #1
 8006c0c:	b292      	uxth	r2, r2
 8006c0e:	e028      	b.n	8006c62 <inc_lock+0x9a>
		if (Files[i].fs == dp->obj.fs &&
 8006c10:	6884      	ldr	r4, [r0, #8]
 8006c12:	685e      	ldr	r6, [r3, #4]
 8006c14:	42a6      	cmp	r6, r4
 8006c16:	d1dd      	bne.n	8006bd4 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 8006c18:	689c      	ldr	r4, [r3, #8]
 8006c1a:	6946      	ldr	r6, [r0, #20]
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	d1d9      	bne.n	8006bd4 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c20:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c22:	2900      	cmp	r1, #0
 8006c24:	d0eb      	beq.n	8006bfe <inc_lock+0x36>
 8006c26:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 8006c2a:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8006c2e:	8989      	ldrh	r1, [r1, #12]
 8006c30:	2900      	cmp	r1, #0
 8006c32:	d1d6      	bne.n	8006be2 <inc_lock+0x1a>
	return i + 1;
 8006c34:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c3a:	e012      	b.n	8006c62 <inc_lock+0x9a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c3c:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c3e:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 8006c40:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8006c44:	eb03 1102 	add.w	r1, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 8006c48:	6942      	ldr	r2, [r0, #20]
 8006c4a:	6880      	ldr	r0, [r0, #8]
		Files[i].fs = dp->obj.fs;
 8006c4c:	f843 500c 	str.w	r5, [r3, ip]
		Files[i].clu = dp->obj.sclust;
 8006c50:	e9c1 0201 	strd	r0, r2, [r1, #4]
		Files[i].ctr = 0;
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c5a:	bf14      	ite	ne
 8006c5c:	f44f 7280 	movne.w	r2, #256	; 0x100
 8006c60:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c62:	4463      	add	r3, ip
}
 8006c64:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c66:	819a      	strh	r2, [r3, #12]
}
 8006c68:	bcf0      	pop	{r4, r5, r6, r7}
 8006c6a:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c6c:	2402      	movs	r4, #2
 8006c6e:	2201      	movs	r2, #1
 8006c70:	e7e5      	b.n	8006c3e <inc_lock+0x76>
 8006c72:	bf00      	nop
 8006c74:	20003078 	.word	0x20003078

08006c78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006c78:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006c7a:	f04f 36ff 	mov.w	r6, #4294967295
 8006c7e:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c80:	42b1      	cmp	r1, r6
{
 8006c82:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006c84:	70c3      	strb	r3, [r0, #3]
 8006c86:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c88:	d00c      	beq.n	8006ca4 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	460a      	mov	r2, r1
 8006c8e:	7840      	ldrb	r0, [r0, #1]
 8006c90:	2301      	movs	r3, #1
 8006c92:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8006c96:	f7ff ff6f 	bl	8006b78 <disk_read>
 8006c9a:	b110      	cbz	r0, 8006ca2 <check_fs+0x2a>
			fs->winsect = sector;
 8006c9c:	6326      	str	r6, [r4, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006c9e:	2004      	movs	r0, #4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8006ca2:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ca4:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8006ca8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d11a      	bne.n	8006ce6 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006cb0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006cb4:	2be9      	cmp	r3, #233	; 0xe9
 8006cb6:	d007      	beq.n	8006cc8 <check_fs+0x50>
 8006cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cba:	4a0d      	ldr	r2, [pc, #52]	; (8006cf0 <check_fs+0x78>)
 8006cbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d001      	beq.n	8006cc8 <check_fs+0x50>
	return 2;
 8006cc4:	2002      	movs	r0, #2
}
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 8006cc8:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006ccc:	4a09      	ldr	r2, [pc, #36]	; (8006cf4 <check_fs+0x7c>)
 8006cce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 8006cd6:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006cda:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <check_fs+0x80>)
 8006cdc:	4298      	cmp	r0, r3
 8006cde:	bf14      	ite	ne
 8006ce0:	2002      	movne	r0, #2
 8006ce2:	2000      	moveq	r0, #0
}
 8006ce4:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ce6:	2003      	movs	r0, #3
}
 8006ce8:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006cea:	2000      	movs	r0, #0
}
 8006cec:	bd70      	pop	{r4, r5, r6, pc}
 8006cee:	bf00      	nop
 8006cf0:	009000eb 	.word	0x009000eb
 8006cf4:	00544146 	.word	0x00544146
 8006cf8:	33544146 	.word	0x33544146

08006cfc <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8006cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006cfe:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8006d00:	b083      	sub	sp, #12
 8006d02:	4604      	mov	r4, r0
 8006d04:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006d06:	b973      	cbnz	r3, 8006d26 <move_window.part.0+0x2a>
 8006d08:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006d0c:	462a      	mov	r2, r5
 8006d0e:	7860      	ldrb	r0, [r4, #1]
 8006d10:	2301      	movs	r3, #1
 8006d12:	f7ff ff31 	bl	8006b78 <disk_read>
				res = FR_DISK_ERR;
 8006d16:	2800      	cmp	r0, #0
 8006d18:	bf1c      	itt	ne
 8006d1a:	2001      	movne	r0, #1
 8006d1c:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 8006d20:	6325      	str	r5, [r4, #48]	; 0x30
}
 8006d22:	b003      	add	sp, #12
 8006d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8006d26:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006d28:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	7840      	ldrb	r0, [r0, #1]
 8006d30:	9101      	str	r1, [sp, #4]
 8006d32:	4632      	mov	r2, r6
 8006d34:	f7ff ff2e 	bl	8006b94 <disk_write>
 8006d38:	b9b8      	cbnz	r0, 8006d6a <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006d3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d3c:	69e3      	ldr	r3, [r4, #28]
 8006d3e:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 8006d40:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006d42:	1ab2      	subs	r2, r6, r2
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d2e1      	bcs.n	8006d0c <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d48:	78a7      	ldrb	r7, [r4, #2]
 8006d4a:	2f01      	cmp	r7, #1
 8006d4c:	d801      	bhi.n	8006d52 <move_window.part.0+0x56>
 8006d4e:	e7dd      	b.n	8006d0c <move_window.part.0+0x10>
					wsect += fs->fsize;
 8006d50:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d52:	7860      	ldrb	r0, [r4, #1]
 8006d54:	9101      	str	r1, [sp, #4]
					wsect += fs->fsize;
 8006d56:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d58:	4632      	mov	r2, r6
 8006d5a:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d5c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d5e:	f7ff ff19 	bl	8006b94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d62:	2f01      	cmp	r7, #1
 8006d64:	9901      	ldr	r1, [sp, #4]
 8006d66:	d1f3      	bne.n	8006d50 <move_window.part.0+0x54>
 8006d68:	e7d0      	b.n	8006d0c <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8006d6a:	2001      	movs	r0, #1
}
 8006d6c:	b003      	add	sp, #12
 8006d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (*path) {	/* If the pointer is not a null */
 8006d74:	6805      	ldr	r5, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8006d7a:	b175      	cbz	r5, 8006d9a <find_volume+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006d7c:	782c      	ldrb	r4, [r5, #0]
 8006d7e:	2c20      	cmp	r4, #32
 8006d80:	d914      	bls.n	8006dac <find_volume+0x3c>
 8006d82:	4623      	mov	r3, r4
 8006d84:	46ac      	mov	ip, r5
 8006d86:	e003      	b.n	8006d90 <find_volume+0x20>
 8006d88:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d90d      	bls.n	8006dac <find_volume+0x3c>
 8006d90:	2b3a      	cmp	r3, #58	; 0x3a
 8006d92:	d1f9      	bne.n	8006d88 <find_volume+0x18>
			i = *tp++ - '0';
 8006d94:	3501      	adds	r5, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006d96:	45ac      	cmp	ip, r5
 8006d98:	d003      	beq.n	8006da2 <find_volume+0x32>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d9a:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006da2:	2c30      	cmp	r4, #48	; 0x30
 8006da4:	d1f9      	bne.n	8006d9a <find_volume+0x2a>
					*path = ++tt;
 8006da6:	f10c 0301 	add.w	r3, ip, #1
 8006daa:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006dac:	4bb5      	ldr	r3, [pc, #724]	; (8007084 <find_volume+0x314>)
 8006dae:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	f000 80f8 	beq.w	8006fa6 <find_volume+0x236>
	*rfs = fs;							/* Return pointer to the file system object */
 8006db6:	600d      	str	r5, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006db8:	782b      	ldrb	r3, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006dba:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006dbe:	b17b      	cbz	r3, 8006de0 <find_volume+0x70>
		stat = disk_status(fs->drv);
 8006dc0:	7868      	ldrb	r0, [r5, #1]
 8006dc2:	f7ff febf 	bl	8006b44 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006dc6:	07c1      	lsls	r1, r0, #31
 8006dc8:	d40a      	bmi.n	8006de0 <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	f000 80e4 	beq.w	8006f98 <find_volume+0x228>
 8006dd0:	f010 0404 	ands.w	r4, r0, #4
 8006dd4:	f000 80e0 	beq.w	8006f98 <find_volume+0x228>
				return FR_WRITE_PROTECTED;
 8006dd8:	240a      	movs	r4, #10
}
 8006dda:	4620      	mov	r0, r4
 8006ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8006de0:	2000      	movs	r0, #0
 8006de2:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006de4:	f7ff feb8 	bl	8006b58 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006de8:	07c2      	lsls	r2, r0, #31
 8006dea:	f100 80d8 	bmi.w	8006f9e <find_volume+0x22e>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006dee:	b10c      	cbz	r4, 8006df4 <find_volume+0x84>
 8006df0:	0743      	lsls	r3, r0, #29
 8006df2:	d4f1      	bmi.n	8006dd8 <find_volume+0x68>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006df4:	7868      	ldrb	r0, [r5, #1]
 8006df6:	f105 020c 	add.w	r2, r5, #12
 8006dfa:	2102      	movs	r1, #2
 8006dfc:	f7ff fed8 	bl	8006bb0 <disk_ioctl>
 8006e00:	4604      	mov	r4, r0
 8006e02:	2800      	cmp	r0, #0
 8006e04:	f040 80c7 	bne.w	8006f96 <find_volume+0x226>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006e08:	89ab      	ldrh	r3, [r5, #12]
 8006e0a:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8006e0e:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8006e12:	f200 80c0 	bhi.w	8006f96 <find_volume+0x226>
 8006e16:	1e5a      	subs	r2, r3, #1
 8006e18:	421a      	tst	r2, r3
 8006e1a:	f040 80bc 	bne.w	8006f96 <find_volume+0x226>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006e1e:	4601      	mov	r1, r0
 8006e20:	4628      	mov	r0, r5
 8006e22:	f7ff ff29 	bl	8006c78 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006e26:	2802      	cmp	r0, #2
 8006e28:	f000 808e 	beq.w	8006f48 <find_volume+0x1d8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e2c:	2804      	cmp	r0, #4
 8006e2e:	f000 80b2 	beq.w	8006f96 <find_volume+0x226>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e32:	2801      	cmp	r0, #1
	bsect = 0;
 8006e34:	bf98      	it	ls
 8006e36:	4626      	movls	r6, r4
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e38:	f200 80b7 	bhi.w	8006faa <find_volume+0x23a>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e3c:	89a8      	ldrh	r0, [r5, #12]
 8006e3e:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 8006e42:	4283      	cmp	r3, r0
 8006e44:	f040 80b1 	bne.w	8006faa <find_volume+0x23a>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006e48:	f8b5 c04a 	ldrh.w	ip, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e4c:	f1bc 0f00 	cmp.w	ip, #0
 8006e50:	d101      	bne.n	8006e56 <find_volume+0xe6>
	rv = rv << 8 | ptr[0];
 8006e52:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e56:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 8006e5a:	f8c5 c01c 	str.w	ip, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e62:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006e64:	f200 80a1 	bhi.w	8006faa <find_volume+0x23a>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006e68:	f895 8041 	ldrb.w	r8, [r5, #65]	; 0x41
 8006e6c:	fa1f f288 	uxth.w	r2, r8
 8006e70:	816a      	strh	r2, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	f000 8099 	beq.w	8006faa <find_volume+0x23a>
 8006e78:	f108 32ff 	add.w	r2, r8, #4294967295
 8006e7c:	ea12 0f08 	tst.w	r2, r8
 8006e80:	f040 8093 	bne.w	8006faa <find_volume+0x23a>
	rv = ptr[1];
 8006e84:	f8b5 e045 	ldrh.w	lr, [r5, #69]	; 0x45
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006e88:	f8a5 e008 	strh.w	lr, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006e8c:	0942      	lsrs	r2, r0, #5
 8006e8e:	fbbe faf2 	udiv	sl, lr, r2
 8006e92:	fb02 e21a 	mls	r2, r2, sl, lr
 8006e96:	b292      	uxth	r2, r2
 8006e98:	2a00      	cmp	r2, #0
 8006e9a:	f040 8086 	bne.w	8006faa <find_volume+0x23a>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006e9e:	f8b5 9047 	ldrh.w	r9, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006ea2:	f1b9 0f00 	cmp.w	r9, #0
 8006ea6:	d101      	bne.n	8006eac <find_volume+0x13c>
	rv = rv << 8 | ptr[0];
 8006ea8:	f8d5 9054 	ldr.w	r9, [r5, #84]	; 0x54
	rv = ptr[1];
 8006eac:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	d07a      	beq.n	8006faa <find_volume+0x23a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006eb4:	fb0c f703 	mul.w	r7, ip, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006eb8:	eb0a 0201 	add.w	r2, sl, r1
 8006ebc:	443a      	add	r2, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006ebe:	4591      	cmp	r9, r2
 8006ec0:	d373      	bcc.n	8006faa <find_volume+0x23a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006ec2:	eba9 0902 	sub.w	r9, r9, r2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ec6:	45c1      	cmp	r9, r8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006ec8:	fbb9 f3f8 	udiv	r3, r9, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ecc:	d36d      	bcc.n	8006faa <find_volume+0x23a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006ece:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 8006ed2:	4543      	cmp	r3, r8
 8006ed4:	f200 8087 	bhi.w	8006fe6 <find_volume+0x276>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006ed8:	f640 78f5 	movw	r8, #4085	; 0xff5
 8006edc:	4543      	cmp	r3, r8
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ede:	4431      	add	r1, r6
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006ee0:	f103 0302 	add.w	r3, r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8006ee4:	4432      	add	r2, r6
		fs->volbase = bsect;							/* Volume start sector */
 8006ee6:	622e      	str	r6, [r5, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006ee8:	62ea      	str	r2, [r5, #44]	; 0x2c
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006eea:	61ab      	str	r3, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006eec:	6269      	str	r1, [r5, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006eee:	f200 809b 	bhi.w	8007028 <find_volume+0x2b8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006ef2:	f1be 0f00 	cmp.w	lr, #0
 8006ef6:	d058      	beq.n	8006faa <find_volume+0x23a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ef8:	4439      	add	r1, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006efa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006efe:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006f02:	62a9      	str	r1, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006f04:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006f08:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006f0a:	1e42      	subs	r2, r0, #1
 8006f0c:	4413      	add	r3, r2
 8006f0e:	fbb3 f0f0 	udiv	r0, r3, r0
 8006f12:	4584      	cmp	ip, r0
 8006f14:	d349      	bcc.n	8006faa <find_volume+0x23a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1a:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 8006f1e:	2280      	movs	r2, #128	; 0x80
 8006f20:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8006f22:	4859      	ldr	r0, [pc, #356]	; (8007088 <find_volume+0x318>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006f24:	4a59      	ldr	r2, [pc, #356]	; (800708c <find_volume+0x31c>)
	fs->id = ++Fsid;		/* File system mount ID */
 8006f26:	8803      	ldrh	r3, [r0, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 8006f28:	7029      	strb	r1, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	8003      	strh	r3, [r0, #0]
 8006f30:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006f32:	6813      	ldr	r3, [r2, #0]
 8006f34:	42ab      	cmp	r3, r5
 8006f36:	bf04      	itt	eq
 8006f38:	2300      	moveq	r3, #0
 8006f3a:	6013      	streq	r3, [r2, #0]
 8006f3c:	6913      	ldr	r3, [r2, #16]
 8006f3e:	429d      	cmp	r5, r3
 8006f40:	d12a      	bne.n	8006f98 <find_volume+0x228>
 8006f42:	2300      	movs	r3, #0
 8006f44:	6113      	str	r3, [r2, #16]
 8006f46:	e027      	b.n	8006f98 <find_volume+0x228>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f48:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d048      	beq.n	8006fe2 <find_volume+0x272>
	rv = rv << 8 | ptr[0];
 8006f50:	f8d5 91fa 	ldr.w	r9, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f54:	f895 3206 	ldrb.w	r3, [r5, #518]	; 0x206
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d040      	beq.n	8006fde <find_volume+0x26e>
	rv = rv << 8 | ptr[0];
 8006f5c:	f8d5 820a 	ldr.w	r8, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f60:	f895 7216 	ldrb.w	r7, [r5, #534]	; 0x216
 8006f64:	b10f      	cbz	r7, 8006f6a <find_volume+0x1fa>
	rv = rv << 8 | ptr[0];
 8006f66:	f8d5 721a 	ldr.w	r7, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f6a:	f895 6226 	ldrb.w	r6, [r5, #550]	; 0x226
 8006f6e:	b10e      	cbz	r6, 8006f74 <find_volume+0x204>
	rv = rv << 8 | ptr[0];
 8006f70:	f8d5 622a 	ldr.w	r6, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f74:	f1b9 0f00 	cmp.w	r9, #0
 8006f78:	d121      	bne.n	8006fbe <find_volume+0x24e>
 8006f7a:	f1b8 0f00 	cmp.w	r8, #0
 8006f7e:	d116      	bne.n	8006fae <find_volume+0x23e>
 8006f80:	bb2f      	cbnz	r7, 8006fce <find_volume+0x25e>
 8006f82:	b196      	cbz	r6, 8006faa <find_volume+0x23a>
 8006f84:	4631      	mov	r1, r6
 8006f86:	4628      	mov	r0, r5
 8006f88:	f7ff fe76 	bl	8006c78 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f8c:	2801      	cmp	r0, #1
 8006f8e:	f67f af55 	bls.w	8006e3c <find_volume+0xcc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f92:	2804      	cmp	r0, #4
 8006f94:	d109      	bne.n	8006faa <find_volume+0x23a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006f96:	2401      	movs	r4, #1
}
 8006f98:	4620      	mov	r0, r4
 8006f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006f9e:	2403      	movs	r4, #3
}
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006fa6:	240c      	movs	r4, #12
 8006fa8:	e7f6      	b.n	8006f98 <find_volume+0x228>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006faa:	240d      	movs	r4, #13
 8006fac:	e7f4      	b.n	8006f98 <find_volume+0x228>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006fae:	4641      	mov	r1, r8
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f7ff fe61 	bl	8006c78 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006fb6:	2801      	cmp	r0, #1
 8006fb8:	d8e2      	bhi.n	8006f80 <find_volume+0x210>
 8006fba:	4646      	mov	r6, r8
 8006fbc:	e73e      	b.n	8006e3c <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f7ff fe59 	bl	8006c78 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006fc6:	2801      	cmp	r0, #1
 8006fc8:	d8d7      	bhi.n	8006f7a <find_volume+0x20a>
 8006fca:	464e      	mov	r6, r9
 8006fcc:	e736      	b.n	8006e3c <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006fce:	4639      	mov	r1, r7
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f7ff fe51 	bl	8006c78 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006fd6:	2801      	cmp	r0, #1
 8006fd8:	d8d3      	bhi.n	8006f82 <find_volume+0x212>
 8006fda:	463e      	mov	r6, r7
 8006fdc:	e72e      	b.n	8006e3c <find_volume+0xcc>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006fde:	4698      	mov	r8, r3
 8006fe0:	e7be      	b.n	8006f60 <find_volume+0x1f0>
 8006fe2:	46a1      	mov	r9, r4
 8006fe4:	e7b6      	b.n	8006f54 <find_volume+0x1e4>
		fs->database = bsect + sysect;					/* Data start sector */
 8006fe6:	4432      	add	r2, r6
 8006fe8:	62ea      	str	r2, [r5, #44]	; 0x2c
	rv = rv << 8 | ptr[0];
 8006fea:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
		fs->volbase = bsect;							/* Volume start sector */
 8006fee:	622e      	str	r6, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006ff0:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ff2:	4431      	add	r1, r6
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006ff4:	ea52 020e 	orrs.w	r2, r2, lr
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ff8:	6269      	str	r1, [r5, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006ffa:	61ab      	str	r3, [r5, #24]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006ffc:	d1d5      	bne.n	8006faa <find_volume+0x23a>
	rv = rv << 8 | ptr[0];
 8006ffe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007000:	62aa      	str	r2, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007002:	1e42      	subs	r2, r0, #1
 8007004:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007008:	fbb3 f0f0 	udiv	r0, r3, r0
 800700c:	4584      	cmp	ip, r0
 800700e:	d3cc      	bcc.n	8006faa <find_volume+0x23a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007010:	f04f 33ff 	mov.w	r3, #4294967295
 8007014:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007018:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
		fs->fsi_flag = 0x80;
 800701c:	2280      	movs	r2, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800701e:	2b01      	cmp	r3, #1
		fs->fsi_flag = 0x80;
 8007020:	712a      	strb	r2, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007022:	d009      	beq.n	8007038 <find_volume+0x2c8>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007024:	2103      	movs	r1, #3
 8007026:	e77c      	b.n	8006f22 <find_volume+0x1b2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007028:	f1be 0f00 	cmp.w	lr, #0
 800702c:	d0bd      	beq.n	8006faa <find_volume+0x23a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800702e:	4439      	add	r1, r7
 8007030:	62a9      	str	r1, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	2102      	movs	r1, #2
 8007036:	e768      	b.n	8006f0a <find_volume+0x19a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007038:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			&& move_window(fs, bsect + 1) == FR_OK)
 800703a:	1c71      	adds	r1, r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800703c:	4299      	cmp	r1, r3
 800703e:	d004      	beq.n	800704a <find_volume+0x2da>
 8007040:	4628      	mov	r0, r5
 8007042:	f7ff fe5b 	bl	8006cfc <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007046:	2800      	cmp	r0, #0
 8007048:	d1ec      	bne.n	8007024 <find_volume+0x2b4>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800704a:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
 800704e:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 8007052:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007054:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 8007056:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007058:	d1e4      	bne.n	8007024 <find_volume+0x2b4>
	rv = rv << 8 | ptr[0];
 800705a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800705c:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <find_volume+0x320>)
 800705e:	429a      	cmp	r2, r3
 8007060:	d1e0      	bne.n	8007024 <find_volume+0x2b4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007062:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8007066:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800706a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800706e:	3320      	adds	r3, #32
 8007070:	429a      	cmp	r2, r3
 8007072:	d1d7      	bne.n	8007024 <find_volume+0x2b4>
	rv = rv << 8 | ptr[0];
 8007074:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007078:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 800707c:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8007080:	e7d0      	b.n	8007024 <find_volume+0x2b4>
 8007082:	bf00      	nop
 8007084:	20003074 	.word	0x20003074
 8007088:	20003098 	.word	0x20003098
 800708c:	20003078 	.word	0x20003078
 8007090:	41615252 	.word	0x41615252

08007094 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 8007098:	7803      	ldrb	r3, [r0, #0]
 800709a:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800709c:	4604      	mov	r4, r0
 800709e:	460d      	mov	r5, r1
 80070a0:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 80070a2:	d006      	beq.n	80070b2 <put_fat.part.0+0x1e>
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d05f      	beq.n	8007168 <put_fat.part.0+0xd4>
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d021      	beq.n	80070f0 <put_fat.part.0+0x5c>
 80070ac:	2002      	movs	r0, #2
}
 80070ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80070b2:	8987      	ldrh	r7, [r0, #12]
 80070b4:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80070b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80070b8:	0879      	lsrs	r1, r7, #1
 80070ba:	fbb5 f1f1 	udiv	r1, r5, r1
 80070be:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80070c0:	4299      	cmp	r1, r3
 80070c2:	d004      	beq.n	80070ce <put_fat.part.0+0x3a>
 80070c4:	f7ff fe1a 	bl	8006cfc <move_window.part.0>
			if (res != FR_OK) break;
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d1f0      	bne.n	80070ae <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80070cc:	89a7      	ldrh	r7, [r4, #12]
 80070ce:	006d      	lsls	r5, r5, #1
 80070d0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80070d4:	fbb5 f2f7 	udiv	r2, r5, r7
 80070d8:	fb07 5512 	mls	r5, r7, r2, r5
 80070dc:	1959      	adds	r1, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80070de:	555e      	strb	r6, [r3, r5]
 80070e0:	f3c6 2607 	ubfx	r6, r6, #8, #8
			fs->wflag = 1;
 80070e4:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80070e6:	704e      	strb	r6, [r1, #1]
			fs->wflag = 1;
 80070e8:	70e3      	strb	r3, [r4, #3]
			break;
 80070ea:	2000      	movs	r0, #0
}
 80070ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bc = (UINT)clst; bc += bc / 2;
 80070f0:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80070f4:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80070f6:	6b02      	ldr	r2, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80070f8:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 80070fc:	fbb7 f3fc 	udiv	r3, r7, ip
 8007100:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007102:	4291      	cmp	r1, r2
 8007104:	d007      	beq.n	8007116 <put_fat.part.0+0x82>
 8007106:	f7ff fdf9 	bl	8006cfc <move_window.part.0>
			if (res != FR_OK) break;
 800710a:	2800      	cmp	r0, #0
 800710c:	d1cf      	bne.n	80070ae <put_fat.part.0+0x1a>
			p = fs->win + bc++ % SS(fs);
 800710e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8007112:	fbb7 f3fc 	udiv	r3, r7, ip
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007116:	07ea      	lsls	r2, r5, #31
			p = fs->win + bc++ % SS(fs);
 8007118:	fb0c 7313 	mls	r3, ip, r3, r7
 800711c:	f104 0834 	add.w	r8, r4, #52	; 0x34
 8007120:	f107 0701 	add.w	r7, r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007124:	d548      	bpl.n	80071b8 <put_fat.part.0+0x124>
 8007126:	f818 2003 	ldrb.w	r2, [r8, r3]
 800712a:	f002 020f 	and.w	r2, r2, #15
 800712e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8007132:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007136:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007138:	6b22      	ldr	r2, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800713a:	89a0      	ldrh	r0, [r4, #12]
			fs->wflag = 1;
 800713c:	2301      	movs	r3, #1
 800713e:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007140:	fbb7 f3f0 	udiv	r3, r7, r0
 8007144:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007146:	4291      	cmp	r1, r2
 8007148:	d05b      	beq.n	8007202 <put_fat.part.0+0x16e>
 800714a:	4620      	mov	r0, r4
 800714c:	f7ff fdd6 	bl	8006cfc <move_window.part.0>
			if (res != FR_OK) break;
 8007150:	2800      	cmp	r0, #0
 8007152:	d1ac      	bne.n	80070ae <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8007154:	89a2      	ldrh	r2, [r4, #12]
 8007156:	fbb7 f3f2 	udiv	r3, r7, r2
 800715a:	fb02 7713 	mls	r7, r2, r3, r7
 800715e:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007162:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8007166:	e046      	b.n	80071f6 <put_fat.part.0+0x162>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007168:	8987      	ldrh	r7, [r0, #12]
 800716a:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800716c:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800716e:	08b9      	lsrs	r1, r7, #2
 8007170:	fbb5 f1f1 	udiv	r1, r5, r1
 8007174:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007176:	4299      	cmp	r1, r3
 8007178:	d004      	beq.n	8007184 <put_fat.part.0+0xf0>
 800717a:	f7ff fdbf 	bl	8006cfc <move_window.part.0>
			if (res != FR_OK) break;
 800717e:	2800      	cmp	r0, #0
 8007180:	d195      	bne.n	80070ae <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007182:	89a7      	ldrh	r7, [r4, #12]
 8007184:	00ad      	lsls	r5, r5, #2
 8007186:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800718a:	fbb5 f3f7 	udiv	r3, r5, r7
 800718e:	fb07 5513 	mls	r5, r7, r3, r5
 8007192:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[0];
 8007196:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007198:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800719c:	1941      	adds	r1, r0, r5
 800719e:	431e      	orrs	r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80071a0:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80071a2:	5546      	strb	r6, [r0, r5]
 80071a4:	0a32      	lsrs	r2, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80071a6:	708b      	strb	r3, [r1, #2]
 80071a8:	0e36      	lsrs	r6, r6, #24
			fs->wflag = 1;
 80071aa:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80071ac:	704a      	strb	r2, [r1, #1]
	*ptr++ = (BYTE)val;
 80071ae:	70ce      	strb	r6, [r1, #3]
			fs->wflag = 1;
 80071b0:	70e3      	strb	r3, [r4, #3]
			break;
 80071b2:	2000      	movs	r0, #0
}
 80071b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071b8:	f808 6003 	strb.w	r6, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80071be:	6b20      	ldr	r0, [r4, #48]	; 0x30
			fs->wflag = 1;
 80071c0:	2301      	movs	r3, #1
 80071c2:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	fbb7 f2f3 	udiv	r2, r7, r3
 80071ca:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80071cc:	4288      	cmp	r0, r1
 80071ce:	d008      	beq.n	80071e2 <put_fat.part.0+0x14e>
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7ff fd93 	bl	8006cfc <move_window.part.0>
			if (res != FR_OK) break;
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f47f af69 	bne.w	80070ae <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 80071dc:	89a2      	ldrh	r2, [r4, #12]
 80071de:	fbb7 f3f2 	udiv	r3, r7, r2
 80071e2:	fb02 7713 	mls	r7, r2, r3, r7
 80071e6:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80071ea:	f3c6 2203 	ubfx	r2, r6, #8, #4
 80071ee:	7819      	ldrb	r1, [r3, #0]
 80071f0:	f021 060f 	bic.w	r6, r1, #15
 80071f4:	4316      	orrs	r6, r2
			fs->wflag = 1;
 80071f6:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80071f8:	701e      	strb	r6, [r3, #0]
			fs->wflag = 1;
 80071fa:	70e2      	strb	r2, [r4, #3]
			break;
 80071fc:	2000      	movs	r0, #0
}
 80071fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p = fs->win + bc % SS(fs);
 8007202:	fb00 7313 	mls	r3, r0, r3, r7
 8007206:	4443      	add	r3, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007208:	e7ab      	b.n	8007162 <put_fat.part.0+0xce>
 800720a:	bf00      	nop

0800720c <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800720c:	2901      	cmp	r1, #1
 800720e:	d90e      	bls.n	800722e <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007212:	6983      	ldr	r3, [r0, #24]
 8007214:	4299      	cmp	r1, r3
 8007216:	460c      	mov	r4, r1
 8007218:	4605      	mov	r5, r0
 800721a:	d206      	bcs.n	800722a <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800721c:	7803      	ldrb	r3, [r0, #0]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d056      	beq.n	80072d0 <get_fat.isra.0+0xc4>
 8007222:	2b03      	cmp	r3, #3
 8007224:	d03d      	beq.n	80072a2 <get_fat.isra.0+0x96>
 8007226:	2b01      	cmp	r3, #1
 8007228:	d003      	beq.n	8007232 <get_fat.isra.0+0x26>
 800722a:	2001      	movs	r0, #1
}
 800722c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800722e:	2001      	movs	r0, #1
}
 8007230:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007232:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007234:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007238:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 800723c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007240:	fbb7 f3fc 	udiv	r3, r7, ip
 8007244:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007246:	4571      	cmp	r1, lr
 8007248:	d00a      	beq.n	8007260 <get_fat.isra.0+0x54>
 800724a:	f7ff fd57 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800724e:	2800      	cmp	r0, #0
 8007250:	d153      	bne.n	80072fa <get_fat.isra.0+0xee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007252:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007254:	f8d5 e030 	ldr.w	lr, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8007258:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 800725c:	fbb7 f3fc 	udiv	r3, r7, ip
 8007260:	fb0c 7313 	mls	r3, ip, r3, r7
 8007264:	442b      	add	r3, r5
 8007266:	3701      	adds	r7, #1
 8007268:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800726c:	fbb7 f3fc 	udiv	r3, r7, ip
 8007270:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007272:	4571      	cmp	r1, lr
 8007274:	d008      	beq.n	8007288 <get_fat.isra.0+0x7c>
 8007276:	4628      	mov	r0, r5
 8007278:	f7ff fd40 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800727c:	2800      	cmp	r0, #0
 800727e:	d13c      	bne.n	80072fa <get_fat.isra.0+0xee>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007280:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8007284:	fbb7 f3fc 	udiv	r3, r7, ip
 8007288:	fb0c 7713 	mls	r7, ip, r3, r7
 800728c:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800728e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8007290:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8007294:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007298:	bf4c      	ite	mi
 800729a:	0900      	lsrmi	r0, r0, #4
 800729c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 80072a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80072a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80072a4:	8983      	ldrh	r3, [r0, #12]
 80072a6:	0899      	lsrs	r1, r3, #2
 80072a8:	fbb4 f1f1 	udiv	r1, r4, r1
 80072ac:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80072ae:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80072b0:	4291      	cmp	r1, r2
 80072b2:	d003      	beq.n	80072bc <get_fat.isra.0+0xb0>
 80072b4:	f7ff fd22 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80072b8:	b9f8      	cbnz	r0, 80072fa <get_fat.isra.0+0xee>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80072ba:	89ab      	ldrh	r3, [r5, #12]
 80072bc:	00a4      	lsls	r4, r4, #2
 80072be:	fbb4 f2f3 	udiv	r2, r4, r3
 80072c2:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 80072c6:	442c      	add	r4, r5
 80072c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80072ca:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 80072ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072d0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80072d2:	8983      	ldrh	r3, [r0, #12]
 80072d4:	0859      	lsrs	r1, r3, #1
 80072d6:	fbb4 f1f1 	udiv	r1, r4, r1
 80072da:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80072dc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80072de:	4291      	cmp	r1, r2
 80072e0:	d003      	beq.n	80072ea <get_fat.isra.0+0xde>
 80072e2:	f7ff fd0b 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072e6:	b940      	cbnz	r0, 80072fa <get_fat.isra.0+0xee>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80072e8:	89ab      	ldrh	r3, [r5, #12]
 80072ea:	0064      	lsls	r4, r4, #1
 80072ec:	fbb4 f2f3 	udiv	r2, r4, r3
 80072f0:	fb03 4412 	mls	r4, r3, r2, r4
 80072f4:	4425      	add	r5, r4
 80072f6:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 80072f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80072fa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80072fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007300 <dir_read.constprop.0>:
FRESULT dir_read (
 8007300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while (dp->sect) {
 8007304:	f8d0 801c 	ldr.w	r8, [r0, #28]
	FATFS *fs = dp->obj.fs;
 8007308:	6806      	ldr	r6, [r0, #0]
FRESULT dir_read (
 800730a:	b083      	sub	sp, #12
 800730c:	4604      	mov	r4, r0
	while (dp->sect) {
 800730e:	f1b8 0f00 	cmp.w	r8, #0
 8007312:	d05d      	beq.n	80073d0 <dir_read.constprop.0+0xd0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007314:	f106 0734 	add.w	r7, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007318:	6b35      	ldr	r5, [r6, #48]	; 0x30
 800731a:	4545      	cmp	r5, r8
 800731c:	d014      	beq.n	8007348 <dir_read.constprop.0+0x48>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800731e:	78f3      	ldrb	r3, [r6, #3]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d15c      	bne.n	80073de <dir_read.constprop.0+0xde>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007324:	7870      	ldrb	r0, [r6, #1]
 8007326:	2301      	movs	r3, #1
 8007328:	4642      	mov	r2, r8
 800732a:	4639      	mov	r1, r7
 800732c:	f7ff fc24 	bl	8006b78 <disk_read>
 8007330:	b140      	cbz	r0, 8007344 <dir_read.constprop.0+0x44>
			fs->winsect = sector;
 8007332:	f04f 33ff 	mov.w	r3, #4294967295
 8007336:	6333      	str	r3, [r6, #48]	; 0x30
				res = FR_DISK_ERR;
 8007338:	2001      	movs	r0, #1
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800733a:	2300      	movs	r3, #0
 800733c:	61e3      	str	r3, [r4, #28]
}
 800733e:	b003      	add	sp, #12
 8007340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			fs->winsect = sector;
 8007344:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007348:	6a23      	ldr	r3, [r4, #32]
 800734a:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 800734c:	2a00      	cmp	r2, #0
 800734e:	d03f      	beq.n	80073d0 <dir_read.constprop.0+0xd0>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007350:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007352:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007358:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800735a:	d007      	beq.n	800736c <dir_read.constprop.0+0x6c>
 800735c:	2a2e      	cmp	r2, #46	; 0x2e
 800735e:	d005      	beq.n	800736c <dir_read.constprop.0+0x6c>
 8007360:	2b0f      	cmp	r3, #15
 8007362:	d003      	beq.n	800736c <dir_read.constprop.0+0x6c>
 8007364:	f023 0320 	bic.w	r3, r3, #32
 8007368:	2b08      	cmp	r3, #8
 800736a:	d122      	bne.n	80073b2 <dir_read.constprop.0+0xb2>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800736c:	6963      	ldr	r3, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800736e:	f8d4 801c 	ldr.w	r8, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007372:	3320      	adds	r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007374:	f1b8 0f00 	cmp.w	r8, #0
 8007378:	d02a      	beq.n	80073d0 <dir_read.constprop.0+0xd0>
 800737a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800737e:	d227      	bcs.n	80073d0 <dir_read.constprop.0+0xd0>
	FATFS *fs = dp->obj.fs;
 8007380:	6825      	ldr	r5, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007382:	89aa      	ldrh	r2, [r5, #12]
 8007384:	fbb3 f0f2 	udiv	r0, r3, r2
 8007388:	fb02 3210 	mls	r2, r2, r0, r3
 800738c:	bb12      	cbnz	r2, 80073d4 <dir_read.constprop.0+0xd4>
		if (!dp->clust) {		/* Static table */
 800738e:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8007390:	f108 0801 	add.w	r8, r8, #1
 8007394:	f8c4 801c 	str.w	r8, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8007398:	2900      	cmp	r1, #0
 800739a:	d142      	bne.n	8007422 <dir_read.constprop.0+0x122>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800739c:	892a      	ldrh	r2, [r5, #8]
 800739e:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80073a2:	d915      	bls.n	80073d0 <dir_read.constprop.0+0xd0>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073a4:	3534      	adds	r5, #52	; 0x34
 80073a6:	440d      	add	r5, r1
	dp->dptr = ofs;						/* Current entry */
 80073a8:	6163      	str	r3, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073aa:	6225      	str	r5, [r4, #32]
	while (dp->sect) {
 80073ac:	f1b8 0f00 	cmp.w	r8, #0
 80073b0:	d1b2      	bne.n	8007318 <dir_read.constprop.0+0x18>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80073b2:	2000      	movs	r0, #0
}
 80073b4:	b003      	add	sp, #12
 80073b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80073ba:	4628      	mov	r0, r5
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	f7ff ff25 	bl	800720c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80073c2:	2801      	cmp	r0, #1
 80073c4:	d94c      	bls.n	8007460 <dir_read.constprop.0+0x160>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80073c6:	1c43      	adds	r3, r0, #1
 80073c8:	d0b6      	beq.n	8007338 <dir_read.constprop.0+0x38>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80073ca:	69aa      	ldr	r2, [r5, #24]
 80073cc:	4290      	cmp	r0, r2
 80073ce:	d331      	bcc.n	8007434 <dir_read.constprop.0+0x134>
	FRESULT res = FR_NO_FILE;
 80073d0:	2004      	movs	r0, #4
 80073d2:	e7b2      	b.n	800733a <dir_read.constprop.0+0x3a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073d4:	3534      	adds	r5, #52	; 0x34
 80073d6:	4415      	add	r5, r2
	dp->dptr = ofs;						/* Current entry */
 80073d8:	6163      	str	r3, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073da:	6225      	str	r5, [r4, #32]
	while (dp->sect) {
 80073dc:	e79c      	b.n	8007318 <dir_read.constprop.0+0x18>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80073de:	7870      	ldrb	r0, [r6, #1]
 80073e0:	2301      	movs	r3, #1
 80073e2:	462a      	mov	r2, r5
 80073e4:	4639      	mov	r1, r7
 80073e6:	f7ff fbd5 	bl	8006b94 <disk_write>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d1a4      	bne.n	8007338 <dir_read.constprop.0+0x38>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80073ee:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80073f0:	69f3      	ldr	r3, [r6, #28]
			fs->wflag = 0;
 80073f2:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80073f4:	1aaa      	subs	r2, r5, r2
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d294      	bcs.n	8007324 <dir_read.constprop.0+0x24>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80073fa:	f896 9002 	ldrb.w	r9, [r6, #2]
 80073fe:	f1b9 0f01 	cmp.w	r9, #1
 8007402:	d801      	bhi.n	8007408 <dir_read.constprop.0+0x108>
 8007404:	e78e      	b.n	8007324 <dir_read.constprop.0+0x24>
					wsect += fs->fsize;
 8007406:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007408:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 800740a:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800740c:	462a      	mov	r2, r5
 800740e:	2301      	movs	r3, #1
 8007410:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007412:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8007416:	f7ff fbbd 	bl	8006b94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800741a:	f1b9 0f01 	cmp.w	r9, #1
 800741e:	d1f2      	bne.n	8007406 <dir_read.constprop.0+0x106>
 8007420:	e780      	b.n	8007324 <dir_read.constprop.0+0x24>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007422:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 8007426:	f10c 3cff 	add.w	ip, ip, #4294967295
 800742a:	ea1c 0900 	ands.w	r9, ip, r0
 800742e:	d0c4      	beq.n	80073ba <dir_read.constprop.0+0xba>
 8007430:	4611      	mov	r1, r2
 8007432:	e7b7      	b.n	80073a4 <dir_read.constprop.0+0xa4>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007434:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8007436:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8007438:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800743a:	4290      	cmp	r0, r2
	return clst * fs->csize + fs->database;
 800743c:	bf3c      	itt	cc
 800743e:	6aea      	ldrcc	r2, [r5, #44]	; 0x2c
 8007440:	f8b5 800a 	ldrhcc.w	r8, [r5, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007444:	9b01      	ldr	r3, [sp, #4]
	return clst * fs->csize + fs->database;
 8007446:	bf38      	it	cc
 8007448:	fb00 2808 	mlacc	r8, r0, r8, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800744c:	89aa      	ldrh	r2, [r5, #12]
 800744e:	fbb3 f1f2 	udiv	r1, r3, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007452:	bf28      	it	cs
 8007454:	46c8      	movcs	r8, r9
				dp->sect = clust2sect(fs, clst);
 8007456:	f8c4 801c 	str.w	r8, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800745a:	fb02 3111 	mls	r1, r2, r1, r3
 800745e:	e7a1      	b.n	80073a4 <dir_read.constprop.0+0xa4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007460:	2002      	movs	r0, #2
 8007462:	e76a      	b.n	800733a <dir_read.constprop.0+0x3a>

08007464 <sync_fs>:
{
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007466:	78c3      	ldrb	r3, [r0, #3]
{
 8007468:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800746a:	b95b      	cbnz	r3, 8007484 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800746c:	7823      	ldrb	r3, [r4, #0]
 800746e:	2b03      	cmp	r3, #3
 8007470:	d029      	beq.n	80074c6 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007472:	2200      	movs	r2, #0
 8007474:	7860      	ldrb	r0, [r4, #1]
 8007476:	4611      	mov	r1, r2
 8007478:	f7ff fb9a 	bl	8006bb0 <disk_ioctl>
			res = FR_DISK_ERR;
 800747c:	3800      	subs	r0, #0
 800747e:	bf18      	it	ne
 8007480:	2001      	movne	r0, #1
}
 8007482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8007484:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007486:	f100 0734 	add.w	r7, r0, #52	; 0x34
 800748a:	2301      	movs	r3, #1
 800748c:	7840      	ldrb	r0, [r0, #1]
 800748e:	462a      	mov	r2, r5
 8007490:	4639      	mov	r1, r7
 8007492:	f7ff fb7f 	bl	8006b94 <disk_write>
 8007496:	2800      	cmp	r0, #0
 8007498:	d14f      	bne.n	800753a <sync_fs+0xd6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800749a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800749c:	69e3      	ldr	r3, [r4, #28]
			fs->wflag = 0;
 800749e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80074a0:	1aaa      	subs	r2, r5, r2
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d2e2      	bcs.n	800746c <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80074a6:	78a6      	ldrb	r6, [r4, #2]
 80074a8:	2e01      	cmp	r6, #1
 80074aa:	d801      	bhi.n	80074b0 <sync_fs+0x4c>
 80074ac:	e7de      	b.n	800746c <sync_fs+0x8>
					wsect += fs->fsize;
 80074ae:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80074b0:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80074b2:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80074b4:	462a      	mov	r2, r5
 80074b6:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80074b8:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80074ba:	4639      	mov	r1, r7
 80074bc:	f7ff fb6a 	bl	8006b94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80074c0:	2e01      	cmp	r6, #1
 80074c2:	d1f4      	bne.n	80074ae <sync_fs+0x4a>
 80074c4:	e7d2      	b.n	800746c <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80074c6:	7926      	ldrb	r6, [r4, #4]
 80074c8:	2e01      	cmp	r6, #1
 80074ca:	d1d2      	bne.n	8007472 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 80074cc:	f104 0734 	add.w	r7, r4, #52	; 0x34
		*d++ = (BYTE)val;
 80074d0:	89a2      	ldrh	r2, [r4, #12]
 80074d2:	2100      	movs	r1, #0
 80074d4:	4638      	mov	r0, r7
 80074d6:	f001 fd11 	bl	8008efc <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 80074da:	4b19      	ldr	r3, [pc, #100]	; (8007540 <sync_fs+0xdc>)
 80074dc:	6363      	str	r3, [r4, #52]	; 0x34
 80074de:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80074e2:	6962      	ldr	r2, [r4, #20]
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80074e4:	6925      	ldr	r5, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80074e6:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 80074ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074ee:	3320      	adds	r3, #32
 80074f0:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 80074f4:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80074f6:	f884 321d 	strb.w	r3, [r4, #541]	; 0x21d
 80074fa:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80074fc:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val;
 80074fe:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
			fs->winsect = fs->volbase + 1;
 8007502:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8007504:	f884 5220 	strb.w	r5, [r4, #544]	; 0x220
 8007508:	0a28      	lsrs	r0, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800750a:	f64a 2155 	movw	r1, #43605	; 0xaa55
			fs->winsect = fs->volbase + 1;
 800750e:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8007510:	f884 0221 	strb.w	r0, [r4, #545]	; 0x221
 8007514:	0c28      	lsrs	r0, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007516:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8007518:	f8a4 1232 	strh.w	r1, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val; val >>= 8;
 800751c:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
 8007520:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007524:	4633      	mov	r3, r6
 8007526:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8007528:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800752a:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val;
 800752c:	f884 5223 	strb.w	r5, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007530:	f7ff fb30 	bl	8006b94 <disk_write>
			fs->fsi_flag = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	7123      	strb	r3, [r4, #4]
 8007538:	e79b      	b.n	8007472 <sync_fs+0xe>
			res = FR_DISK_ERR;
 800753a:	2001      	movs	r0, #1
}
 800753c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800753e:	bf00      	nop
 8007540:	41615252 	.word	0x41615252

08007544 <create_chain>:
{
 8007544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8007548:	f8d0 8000 	ldr.w	r8, [r0]
{
 800754c:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800754e:	4689      	mov	r9, r1
 8007550:	2900      	cmp	r1, #0
 8007552:	f040 80a5 	bne.w	80076a0 <create_chain+0x15c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007556:	f8d8 6010 	ldr.w	r6, [r8, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800755a:	f8d8 3018 	ldr.w	r3, [r8, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800755e:	b9be      	cbnz	r6, 8007590 <create_chain+0x4c>
 8007560:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 8007562:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8007564:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007566:	429c      	cmp	r4, r3
 8007568:	d316      	bcc.n	8007598 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 800756a:	2e01      	cmp	r6, #1
 800756c:	f000 80a8 	beq.w	80076c0 <create_chain+0x17c>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007570:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 8007572:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007574:	69ab      	ldr	r3, [r5, #24]
 8007576:	42a3      	cmp	r3, r4
 8007578:	d906      	bls.n	8007588 <create_chain+0x44>
		switch (fs->fs_type) {
 800757a:	782b      	ldrb	r3, [r5, #0]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d078      	beq.n	8007672 <create_chain+0x12e>
 8007580:	2b03      	cmp	r3, #3
 8007582:	d05d      	beq.n	8007640 <create_chain+0xfc>
 8007584:	2b01      	cmp	r3, #1
 8007586:	d00b      	beq.n	80075a0 <create_chain+0x5c>
 8007588:	2401      	movs	r4, #1
}
 800758a:	4620      	mov	r0, r4
 800758c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007590:	42b3      	cmp	r3, r6
 8007592:	bf98      	it	ls
 8007594:	2601      	movls	r6, #1
 8007596:	e7e4      	b.n	8007562 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007598:	2c01      	cmp	r4, #1
 800759a:	683d      	ldr	r5, [r7, #0]
 800759c:	d9f4      	bls.n	8007588 <create_chain+0x44>
 800759e:	e7e9      	b.n	8007574 <create_chain+0x30>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075a2:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075a6:	89aa      	ldrh	r2, [r5, #12]
			bc = (UINT)clst; bc += bc / 2;
 80075a8:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075ac:	fbbb f3f2 	udiv	r3, fp, r2
 80075b0:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075b2:	4561      	cmp	r1, ip
 80075b4:	d00a      	beq.n	80075cc <create_chain+0x88>
 80075b6:	4628      	mov	r0, r5
 80075b8:	f7ff fba0 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075bc:	2800      	cmp	r0, #0
 80075be:	d13a      	bne.n	8007636 <create_chain+0xf2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075c2:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80075c6:	89aa      	ldrh	r2, [r5, #12]
 80075c8:	fbbb f3f2 	udiv	r3, fp, r2
 80075cc:	fb02 b313 	mls	r3, r2, r3, fp
 80075d0:	442b      	add	r3, r5
 80075d2:	f10b 0b01 	add.w	fp, fp, #1
 80075d6:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075da:	fbbb f3f2 	udiv	r3, fp, r2
 80075de:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075e0:	4561      	cmp	r1, ip
 80075e2:	d006      	beq.n	80075f2 <create_chain+0xae>
 80075e4:	4628      	mov	r0, r5
 80075e6:	f7ff fb89 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075ea:	bb20      	cbnz	r0, 8007636 <create_chain+0xf2>
			wc |= fs->win[bc % SS(fs)] << 8;
 80075ec:	89aa      	ldrh	r2, [r5, #12]
 80075ee:	fbbb f3f2 	udiv	r3, fp, r2
 80075f2:	fb02 b213 	mls	r2, r2, r3, fp
 80075f6:	4415      	add	r5, r2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80075f8:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80075fa:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80075fe:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007602:	bf4c      	ite	mi
 8007604:	091b      	lsrmi	r3, r3, #4
 8007606:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800760a:	b133      	cbz	r3, 800761a <create_chain+0xd6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800760c:	2b01      	cmp	r3, #1
 800760e:	d0bb      	beq.n	8007588 <create_chain+0x44>
			if (ncl == scl) return 0;		/* No free cluster */
 8007610:	42a6      	cmp	r6, r4
 8007612:	d055      	beq.n	80076c0 <create_chain+0x17c>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007614:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007618:	e7a4      	b.n	8007564 <create_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800761a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800761e:	42a3      	cmp	r3, r4
 8007620:	d9b2      	bls.n	8007588 <create_chain+0x44>
 8007622:	f04f 32ff 	mov.w	r2, #4294967295
 8007626:	4621      	mov	r1, r4
 8007628:	4640      	mov	r0, r8
 800762a:	f7ff fd33 	bl	8007094 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800762e:	2800      	cmp	r0, #0
 8007630:	d04a      	beq.n	80076c8 <create_chain+0x184>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007632:	2801      	cmp	r0, #1
 8007634:	d1a8      	bne.n	8007588 <create_chain+0x44>
 8007636:	f04f 34ff 	mov.w	r4, #4294967295
}
 800763a:	4620      	mov	r0, r4
 800763c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007640:	89a8      	ldrh	r0, [r5, #12]
 8007642:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007644:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007646:	0881      	lsrs	r1, r0, #2
 8007648:	fbb4 f1f1 	udiv	r1, r4, r1
 800764c:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800764e:	4299      	cmp	r1, r3
 8007650:	d005      	beq.n	800765e <create_chain+0x11a>
 8007652:	4628      	mov	r0, r5
 8007654:	f7ff fb52 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007658:	2800      	cmp	r0, #0
 800765a:	d1ec      	bne.n	8007636 <create_chain+0xf2>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800765c:	89a8      	ldrh	r0, [r5, #12]
 800765e:	00a3      	lsls	r3, r4, #2
 8007660:	fbb3 f2f0 	udiv	r2, r3, r0
 8007664:	fb00 3312 	mls	r3, r0, r2, r3
	rv = rv << 8 | ptr[0];
 8007668:	441d      	add	r5, r3
 800766a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800766c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			break;
 8007670:	e7cb      	b.n	800760a <create_chain+0xc6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007672:	89a8      	ldrh	r0, [r5, #12]
 8007674:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007676:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007678:	0841      	lsrs	r1, r0, #1
 800767a:	fbb4 f1f1 	udiv	r1, r4, r1
 800767e:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007680:	4299      	cmp	r1, r3
 8007682:	d005      	beq.n	8007690 <create_chain+0x14c>
 8007684:	4628      	mov	r0, r5
 8007686:	f7ff fb39 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800768a:	2800      	cmp	r0, #0
 800768c:	d1d3      	bne.n	8007636 <create_chain+0xf2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800768e:	89a8      	ldrh	r0, [r5, #12]
 8007690:	0063      	lsls	r3, r4, #1
 8007692:	fbb3 f2f0 	udiv	r2, r3, r0
 8007696:	fb00 3312 	mls	r3, r0, r2, r3
 800769a:	441d      	add	r5, r3
 800769c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 800769e:	e7b4      	b.n	800760a <create_chain+0xc6>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80076a0:	4640      	mov	r0, r8
 80076a2:	f7ff fdb3 	bl	800720c <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80076a6:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80076a8:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80076aa:	f67f af6d 	bls.w	8007588 <create_chain+0x44>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80076ae:	1c41      	adds	r1, r0, #1
 80076b0:	d0c1      	beq.n	8007636 <create_chain+0xf2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80076b2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80076b6:	4283      	cmp	r3, r0
 80076b8:	f63f af67 	bhi.w	800758a <create_chain+0x46>
 80076bc:	464e      	mov	r6, r9
 80076be:	e750      	b.n	8007562 <create_chain+0x1e>
				if (ncl > scl) return 0;	/* No free cluster */
 80076c0:	2400      	movs	r4, #0
}
 80076c2:	4620      	mov	r0, r4
 80076c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK && clst != 0) {
 80076c8:	f1b9 0f00 	cmp.w	r9, #0
 80076cc:	d00f      	beq.n	80076ee <create_chain+0x1aa>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80076ce:	f1b9 0f01 	cmp.w	r9, #1
 80076d2:	f43f af59 	beq.w	8007588 <create_chain+0x44>
 80076d6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80076da:	4599      	cmp	r9, r3
 80076dc:	f4bf af54 	bcs.w	8007588 <create_chain+0x44>
 80076e0:	4622      	mov	r2, r4
 80076e2:	4649      	mov	r1, r9
 80076e4:	4640      	mov	r0, r8
 80076e6:	f7ff fcd5 	bl	8007094 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d1a1      	bne.n	8007632 <create_chain+0xee>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80076ee:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 80076f2:	3b02      	subs	r3, #2
 80076f4:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 80076f6:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80076fa:	d802      	bhi.n	8007702 <create_chain+0x1be>
 80076fc:	3a01      	subs	r2, #1
 80076fe:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 8007702:	f898 3004 	ldrb.w	r3, [r8, #4]
 8007706:	f043 0301 	orr.w	r3, r3, #1
 800770a:	f888 3004 	strb.w	r3, [r8, #4]
 800770e:	e73c      	b.n	800758a <create_chain+0x46>

08007710 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8007710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007714:	6884      	ldr	r4, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8007716:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8007718:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800771a:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 800771c:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800771e:	b9bc      	cbnz	r4, 8007750 <dir_sdi.constprop.0+0x40>
 8007720:	783b      	ldrb	r3, [r7, #0]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d810      	bhi.n	8007748 <dir_sdi.constprop.0+0x38>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007726:	893b      	ldrh	r3, [r7, #8]
 8007728:	b15b      	cbz	r3, 8007742 <dir_sdi.constprop.0+0x32>
		dp->sect = fs->dirbase;
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800772e:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007730:	b13b      	cbz	r3, 8007742 <dir_sdi.constprop.0+0x32>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007732:	3734      	adds	r7, #52	; 0x34
 8007734:	6237      	str	r7, [r6, #32]
	return FR_OK;
 8007736:	2000      	movs	r0, #0
}
 8007738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		dp->sect = clust2sect(fs, clst);
 800773c:	2300      	movs	r3, #0
	dp->clust = clst;					/* Current cluster# */
 800773e:	e9c6 4306 	strd	r4, r3, [r6, #24]
		switch (fs->fs_type) {
 8007742:	2002      	movs	r0, #2
}
 8007744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0eb      	beq.n	8007726 <dir_sdi.constprop.0+0x16>
 800774e:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007750:	897a      	ldrh	r2, [r7, #10]
 8007752:	89bb      	ldrh	r3, [r7, #12]
 8007754:	fb02 f303 	mul.w	r3, r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8007758:	2b00      	cmp	r3, #0
 800775a:	d179      	bne.n	8007850 <dir_sdi.constprop.0+0x140>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800775c:	2c01      	cmp	r4, #1
 800775e:	d9f0      	bls.n	8007742 <dir_sdi.constprop.0+0x32>
 8007760:	6835      	ldr	r5, [r6, #0]
 8007762:	69ab      	ldr	r3, [r5, #24]
 8007764:	429c      	cmp	r4, r3
 8007766:	d2ec      	bcs.n	8007742 <dir_sdi.constprop.0+0x32>
		switch (fs->fs_type) {
 8007768:	782b      	ldrb	r3, [r5, #0]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d058      	beq.n	8007820 <dir_sdi.constprop.0+0x110>
 800776e:	2b03      	cmp	r3, #3
 8007770:	d039      	beq.n	80077e6 <dir_sdi.constprop.0+0xd6>
 8007772:	2b01      	cmp	r3, #1
 8007774:	d1e5      	bne.n	8007742 <dir_sdi.constprop.0+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007776:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007778:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800777c:	89aa      	ldrh	r2, [r5, #12]
			bc = (UINT)clst; bc += bc / 2;
 800777e:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007782:	fbb8 f3f2 	udiv	r3, r8, r2
 8007786:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007788:	4561      	cmp	r1, ip
 800778a:	d00a      	beq.n	80077a2 <dir_sdi.constprop.0+0x92>
 800778c:	4628      	mov	r0, r5
 800778e:	f7ff fab5 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007792:	2800      	cmp	r0, #0
 8007794:	d15a      	bne.n	800784c <dir_sdi.constprop.0+0x13c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007796:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007798:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800779c:	89aa      	ldrh	r2, [r5, #12]
 800779e:	fbb8 f3f2 	udiv	r3, r8, r2
 80077a2:	fb02 8313 	mls	r3, r2, r3, r8
 80077a6:	442b      	add	r3, r5
 80077a8:	f108 0801 	add.w	r8, r8, #1
 80077ac:	f893 9034 	ldrb.w	r9, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077b0:	fbb8 f3f2 	udiv	r3, r8, r2
 80077b4:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80077b6:	4561      	cmp	r1, ip
 80077b8:	d007      	beq.n	80077ca <dir_sdi.constprop.0+0xba>
 80077ba:	4628      	mov	r0, r5
 80077bc:	f7ff fa9e 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d143      	bne.n	800784c <dir_sdi.constprop.0+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80077c4:	89aa      	ldrh	r2, [r5, #12]
 80077c6:	fbb8 f3f2 	udiv	r3, r8, r2
 80077ca:	fb02 8813 	mls	r8, r2, r3, r8
 80077ce:	4445      	add	r5, r8
 80077d0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80077d4:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80077d8:	07e3      	lsls	r3, r4, #31
 80077da:	bf4c      	ite	mi
 80077dc:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 80077e0:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
 80077e4:	e016      	b.n	8007814 <dir_sdi.constprop.0+0x104>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077e6:	89a8      	ldrh	r0, [r5, #12]
 80077e8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80077ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077ec:	0881      	lsrs	r1, r0, #2
 80077ee:	fbb4 f1f1 	udiv	r1, r4, r1
 80077f2:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80077f4:	4299      	cmp	r1, r3
 80077f6:	d004      	beq.n	8007802 <dir_sdi.constprop.0+0xf2>
 80077f8:	4628      	mov	r0, r5
 80077fa:	f7ff fa7f 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077fe:	bb28      	cbnz	r0, 800784c <dir_sdi.constprop.0+0x13c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007800:	89a8      	ldrh	r0, [r5, #12]
 8007802:	00a4      	lsls	r4, r4, #2
 8007804:	fbb4 f3f0 	udiv	r3, r4, r0
 8007808:	fb00 4413 	mls	r4, r0, r3, r4
	rv = rv << 8 | ptr[0];
 800780c:	4425      	add	r5, r4
 800780e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007810:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007814:	2c01      	cmp	r4, #1
 8007816:	d994      	bls.n	8007742 <dir_sdi.constprop.0+0x32>
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	42a3      	cmp	r3, r4
 800781c:	d89e      	bhi.n	800775c <dir_sdi.constprop.0+0x4c>
 800781e:	e790      	b.n	8007742 <dir_sdi.constprop.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007820:	89a8      	ldrh	r0, [r5, #12]
 8007822:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007824:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007826:	0841      	lsrs	r1, r0, #1
 8007828:	fbb4 f1f1 	udiv	r1, r4, r1
 800782c:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800782e:	4299      	cmp	r1, r3
 8007830:	d004      	beq.n	800783c <dir_sdi.constprop.0+0x12c>
 8007832:	4628      	mov	r0, r5
 8007834:	f7ff fa62 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007838:	b940      	cbnz	r0, 800784c <dir_sdi.constprop.0+0x13c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800783a:	89a8      	ldrh	r0, [r5, #12]
 800783c:	0064      	lsls	r4, r4, #1
 800783e:	fbb4 f3f0 	udiv	r3, r4, r0
 8007842:	fb00 4413 	mls	r4, r0, r3, r4
 8007846:	4425      	add	r5, r4
 8007848:	8eac      	ldrh	r4, [r5, #52]	; 0x34
			break;
 800784a:	e7e3      	b.n	8007814 <dir_sdi.constprop.0+0x104>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800784c:	2001      	movs	r0, #1
 800784e:	e773      	b.n	8007738 <dir_sdi.constprop.0+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007850:	69b9      	ldr	r1, [r7, #24]
	clst -= 2;
 8007852:	1ea0      	subs	r0, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007854:	3902      	subs	r1, #2
 8007856:	4288      	cmp	r0, r1
 8007858:	f4bf af70 	bcs.w	800773c <dir_sdi.constprop.0+0x2c>
	return clst * fs->csize + fs->database;
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	fb00 3302 	mla	r3, r0, r2, r3
		dp->sect = clust2sect(fs, clst);
 8007862:	61f3      	str	r3, [r6, #28]
 8007864:	e763      	b.n	800772e <dir_sdi.constprop.0+0x1e>
 8007866:	bf00      	nop

08007868 <follow_path>:
{
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 800786c:	f8d0 a000 	ldr.w	sl, [r0]
{
 8007870:	b083      	sub	sp, #12
 8007872:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007874:	780b      	ldrb	r3, [r1, #0]
 8007876:	2b2f      	cmp	r3, #47	; 0x2f
 8007878:	4689      	mov	r9, r1
 800787a:	f101 0101 	add.w	r1, r1, #1
 800787e:	d0f9      	beq.n	8007874 <follow_path+0xc>
 8007880:	2b5c      	cmp	r3, #92	; 0x5c
 8007882:	d0f7      	beq.n	8007874 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8007884:	2300      	movs	r3, #0
 8007886:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007888:	f899 3000 	ldrb.w	r3, [r9]
 800788c:	2b1f      	cmp	r3, #31
 800788e:	f240 8172 	bls.w	8007b76 <follow_path+0x30e>
	p = *path; sfn = dp->fn;
 8007892:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8007896:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 8007898:	2320      	movs	r3, #32
 800789a:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 800789e:	6262      	str	r2, [r4, #36]	; 0x24
 80078a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80078a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80078a6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80078aa:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		c = (BYTE)p[si++];
 80078ae:	f899 3000 	ldrb.w	r3, [r9]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d90b      	bls.n	80078ce <follow_path+0x66>
 80078b6:	464f      	mov	r7, r9
	si = i = 0; ni = 8;
 80078b8:	2500      	movs	r5, #0
 80078ba:	2608      	movs	r6, #8
		c = (BYTE)p[si++];
 80078bc:	2101      	movs	r1, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80078be:	2b2f      	cmp	r3, #47	; 0x2f
 80078c0:	d03e      	beq.n	8007940 <follow_path+0xd8>
 80078c2:	2b5c      	cmp	r3, #92	; 0x5c
 80078c4:	d03c      	beq.n	8007940 <follow_path+0xd8>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80078c6:	2b2e      	cmp	r3, #46	; 0x2e
 80078c8:	d005      	beq.n	80078d6 <follow_path+0x6e>
 80078ca:	42b5      	cmp	r5, r6
 80078cc:	d321      	bcc.n	8007912 <follow_path+0xaa>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80078ce:	2006      	movs	r0, #6
}
 80078d0:	b003      	add	sp, #12
 80078d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80078d6:	2e0b      	cmp	r6, #11
 80078d8:	d0f9      	beq.n	80078ce <follow_path+0x66>
			i = 8; ni = 11;				/* Goto extension */
 80078da:	2508      	movs	r5, #8
 80078dc:	260b      	movs	r6, #11
		c = (BYTE)p[si++];
 80078de:	f817 3f01 	ldrb.w	r3, [r7, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80078e2:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 80078e4:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 80078e8:	d8e9      	bhi.n	80078be <follow_path+0x56>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80078ea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80078ee:	2be5      	cmp	r3, #229	; 0xe5
	*path = p + si;						/* Return pointer to the next segment */
 80078f0:	4489      	add	r9, r1
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80078f2:	f000 814b 	beq.w	8007b8c <follow_path+0x324>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80078f6:	2304      	movs	r3, #4
 80078f8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80078fc:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 80078fe:	6827      	ldr	r7, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007900:	f7ff ff06 	bl	8007710 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 8007904:	2800      	cmp	r0, #0
 8007906:	d035      	beq.n	8007974 <follow_path+0x10c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007908:	2804      	cmp	r0, #4
			ns = dp->fn[NSFLAG];
 800790a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 800790e:	d1df      	bne.n	80078d0 <follow_path+0x68>
 8007910:	e0d2      	b.n	8007ab8 <follow_path+0x250>
		if (c >= 0x80) {				/* Extended character? */
 8007912:	061a      	lsls	r2, r3, #24
 8007914:	d502      	bpl.n	800791c <follow_path+0xb4>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007916:	4aa2      	ldr	r2, [pc, #648]	; (8007ba0 <follow_path+0x338>)
 8007918:	3b80      	subs	r3, #128	; 0x80
 800791a:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 800791c:	48a1      	ldr	r0, [pc, #644]	; (8007ba4 <follow_path+0x33c>)
 800791e:	2222      	movs	r2, #34	; 0x22
 8007920:	4293      	cmp	r3, r2
 8007922:	d0d4      	beq.n	80078ce <follow_path+0x66>
 8007924:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007928:	2a00      	cmp	r2, #0
 800792a:	d1f9      	bne.n	8007920 <follow_path+0xb8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800792c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007930:	2a19      	cmp	r2, #25
 8007932:	d801      	bhi.n	8007938 <follow_path+0xd0>
 8007934:	3b20      	subs	r3, #32
 8007936:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8007938:	9a01      	ldr	r2, [sp, #4]
 800793a:	5553      	strb	r3, [r2, r5]
 800793c:	3501      	adds	r5, #1
 800793e:	e7ce      	b.n	80078de <follow_path+0x76>
 8007940:	eb09 0301 	add.w	r3, r9, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	2a2f      	cmp	r2, #47	; 0x2f
 8007948:	4699      	mov	r9, r3
 800794a:	f103 0301 	add.w	r3, r3, #1
 800794e:	d0f9      	beq.n	8007944 <follow_path+0xdc>
 8007950:	2a5c      	cmp	r2, #92	; 0x5c
 8007952:	d0f7      	beq.n	8007944 <follow_path+0xdc>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007954:	2d00      	cmp	r5, #0
 8007956:	d0ba      	beq.n	80078ce <follow_path+0x66>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007958:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800795c:	2be5      	cmp	r3, #229	; 0xe5
 800795e:	f000 8119 	beq.w	8007b94 <follow_path+0x32c>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007962:	2300      	movs	r3, #0
 8007964:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007968:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800796a:	6827      	ldr	r7, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800796c:	f7ff fed0 	bl	8007710 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 8007970:	2800      	cmp	r0, #0
 8007972:	d1c9      	bne.n	8007908 <follow_path+0xa0>
		res = move_window(fs, dp->sect);
 8007974:	f8d4 b01c 	ldr.w	fp, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007978:	465b      	mov	r3, fp
 800797a:	f107 0634 	add.w	r6, r7, #52	; 0x34
 800797e:	46bb      	mov	fp, r7
 8007980:	461f      	mov	r7, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007982:	f8db 5030 	ldr.w	r5, [fp, #48]	; 0x30
 8007986:	42bd      	cmp	r5, r7
 8007988:	d016      	beq.n	80079b8 <follow_path+0x150>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800798a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f040 8096 	bne.w	8007ac0 <follow_path+0x258>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007994:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8007998:	2301      	movs	r3, #1
 800799a:	463a      	mov	r2, r7
 800799c:	4631      	mov	r1, r6
 800799e:	f7ff f8eb 	bl	8006b78 <disk_read>
 80079a2:	b138      	cbz	r0, 80079b4 <follow_path+0x14c>
			fs->winsect = sector;
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 80079a8:	2001      	movs	r0, #1
			fs->winsect = sector;
 80079aa:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
}
 80079ae:	b003      	add	sp, #12
 80079b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80079b4:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
		c = dp->dir[DIR_Name];
 80079b8:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	2a00      	cmp	r2, #0
 80079be:	d079      	beq.n	8007ab4 <follow_path+0x24c>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80079c0:	7ad9      	ldrb	r1, [r3, #11]
 80079c2:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 80079c6:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80079c8:	7ada      	ldrb	r2, [r3, #11]
 80079ca:	f012 0208 	ands.w	r2, r2, #8
 80079ce:	d01e      	beq.n	8007a0e <follow_path+0x1a6>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80079d0:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80079d2:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80079d4:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80079d6:	2f00      	cmp	r7, #0
 80079d8:	d06c      	beq.n	8007ab4 <follow_path+0x24c>
 80079da:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80079de:	d269      	bcs.n	8007ab4 <follow_path+0x24c>
	FATFS *fs = dp->obj.fs;
 80079e0:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80079e2:	899a      	ldrh	r2, [r3, #12]
 80079e4:	fbb5 f0f2 	udiv	r0, r5, r2
 80079e8:	fb02 5210 	mls	r2, r2, r0, r5
 80079ec:	b952      	cbnz	r2, 8007a04 <follow_path+0x19c>
		if (!dp->clust) {		/* Static table */
 80079ee:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80079f0:	3701      	adds	r7, #1
 80079f2:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80079f4:	2900      	cmp	r1, #0
 80079f6:	f040 808b 	bne.w	8007b10 <follow_path+0x2a8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80079fa:	8918      	ldrh	r0, [r3, #8]
 80079fc:	ebb0 1f55 	cmp.w	r0, r5, lsr #5
 8007a00:	f240 80a1 	bls.w	8007b46 <follow_path+0x2de>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007a04:	3334      	adds	r3, #52	; 0x34
 8007a06:	4413      	add	r3, r2
	dp->dptr = ofs;						/* Current entry */
 8007a08:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007a0a:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8007a0c:	e7b9      	b.n	8007982 <follow_path+0x11a>
	} while (--cnt && r == 0);
 8007a0e:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 8007a12:	7818      	ldrb	r0, [r3, #0]
 8007a14:	4285      	cmp	r5, r0
 8007a16:	d1db      	bne.n	80079d0 <follow_path+0x168>
 8007a18:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 8007a1c:	7858      	ldrb	r0, [r3, #1]
 8007a1e:	4285      	cmp	r5, r0
 8007a20:	d1d6      	bne.n	80079d0 <follow_path+0x168>
 8007a22:	789d      	ldrb	r5, [r3, #2]
 8007a24:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8007a28:	4285      	cmp	r5, r0
 8007a2a:	d1d1      	bne.n	80079d0 <follow_path+0x168>
 8007a2c:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 8007a30:	78d8      	ldrb	r0, [r3, #3]
 8007a32:	4285      	cmp	r5, r0
 8007a34:	d1cc      	bne.n	80079d0 <follow_path+0x168>
 8007a36:	791d      	ldrb	r5, [r3, #4]
 8007a38:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8007a3c:	4285      	cmp	r5, r0
 8007a3e:	d1c7      	bne.n	80079d0 <follow_path+0x168>
 8007a40:	795d      	ldrb	r5, [r3, #5]
 8007a42:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8007a46:	4285      	cmp	r5, r0
 8007a48:	d1c2      	bne.n	80079d0 <follow_path+0x168>
 8007a4a:	799d      	ldrb	r5, [r3, #6]
 8007a4c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8007a50:	4285      	cmp	r5, r0
 8007a52:	d1bd      	bne.n	80079d0 <follow_path+0x168>
 8007a54:	79dd      	ldrb	r5, [r3, #7]
 8007a56:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 8007a5a:	4285      	cmp	r5, r0
 8007a5c:	d1b8      	bne.n	80079d0 <follow_path+0x168>
 8007a5e:	7a1d      	ldrb	r5, [r3, #8]
 8007a60:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8007a64:	4285      	cmp	r5, r0
 8007a66:	d1b3      	bne.n	80079d0 <follow_path+0x168>
 8007a68:	7a5d      	ldrb	r5, [r3, #9]
 8007a6a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8007a6e:	4285      	cmp	r5, r0
 8007a70:	d1ae      	bne.n	80079d0 <follow_path+0x168>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007a72:	7a98      	ldrb	r0, [r3, #10]
 8007a74:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8007a78:	4298      	cmp	r0, r3
 8007a7a:	d1a9      	bne.n	80079d0 <follow_path+0x168>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a7c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8007a80:	075b      	lsls	r3, r3, #29
 8007a82:	4610      	mov	r0, r2
 8007a84:	f53f af24 	bmi.w	80078d0 <follow_path+0x68>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a88:	06ca      	lsls	r2, r1, #27
 8007a8a:	d517      	bpl.n	8007abc <follow_path+0x254>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a8c:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 8007a90:	6962      	ldr	r2, [r4, #20]
 8007a92:	fbb2 f0f1 	udiv	r0, r2, r1
 8007a96:	f10a 0334 	add.w	r3, sl, #52	; 0x34
 8007a9a:	fb01 2210 	mls	r2, r1, r0, r2
	if (fs->fs_type == FS_FAT32) {
 8007a9e:	f89a 1000 	ldrb.w	r1, [sl]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007aa2:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 8007aa4:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8007aa6:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007aa8:	bf04      	itt	eq
 8007aaa:	8a9b      	ldrheq	r3, [r3, #20]
 8007aac:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007ab0:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ab2:	e6f1      	b.n	8007898 <follow_path+0x30>
			ns = dp->fn[NSFLAG];
 8007ab4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ab8:	0759      	lsls	r1, r3, #29
 8007aba:	d465      	bmi.n	8007b88 <follow_path+0x320>
 8007abc:	2005      	movs	r0, #5
 8007abe:	e707      	b.n	80078d0 <follow_path+0x68>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007ac0:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	462a      	mov	r2, r5
 8007ac8:	4631      	mov	r1, r6
 8007aca:	f7ff f863 	bl	8006b94 <disk_write>
 8007ace:	bbc0      	cbnz	r0, 8007b42 <follow_path+0x2da>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ad0:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8007ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
			fs->wflag = 0;
 8007ad8:	f88b 0003 	strb.w	r0, [fp, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007adc:	1aaa      	subs	r2, r5, r2
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	f4bf af58 	bcs.w	8007994 <follow_path+0x12c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ae4:	f89b 8002 	ldrb.w	r8, [fp, #2]
 8007ae8:	f1b8 0f01 	cmp.w	r8, #1
 8007aec:	d802      	bhi.n	8007af4 <follow_path+0x28c>
 8007aee:	e751      	b.n	8007994 <follow_path+0x12c>
					wsect += fs->fsize;
 8007af0:	f8db 301c 	ldr.w	r3, [fp, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007af4:	f89b 0001 	ldrb.w	r0, [fp, #1]
					wsect += fs->fsize;
 8007af8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007afa:	462a      	mov	r2, r5
 8007afc:	2301      	movs	r3, #1
 8007afe:	4631      	mov	r1, r6
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b00:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8007b04:	f7ff f846 	bl	8006b94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b08:	f1b8 0f01 	cmp.w	r8, #1
 8007b0c:	d1f0      	bne.n	8007af0 <follow_path+0x288>
 8007b0e:	e741      	b.n	8007994 <follow_path+0x12c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b10:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 8007b14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b18:	ea1c 0800 	ands.w	r8, ip, r0
 8007b1c:	f47f af72 	bne.w	8007a04 <follow_path+0x19c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007b20:	4618      	mov	r0, r3
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	f7ff fb72 	bl	800720c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b28:	2801      	cmp	r0, #1
 8007b2a:	d922      	bls.n	8007b72 <follow_path+0x30a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007b2c:	1c47      	adds	r7, r0, #1
 8007b2e:	d008      	beq.n	8007b42 <follow_path+0x2da>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007b30:	9b00      	ldr	r3, [sp, #0]
 8007b32:	699a      	ldr	r2, [r3, #24]
 8007b34:	4290      	cmp	r0, r2
 8007b36:	d30a      	bcc.n	8007b4e <follow_path+0x2e6>
			ns = dp->fn[NSFLAG];
 8007b38:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
						dp->sect = 0; return FR_NO_FILE;
 8007b3c:	f8c4 801c 	str.w	r8, [r4, #28]
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b40:	e7ba      	b.n	8007ab8 <follow_path+0x250>
			res = FR_DISK_ERR;
 8007b42:	2001      	movs	r0, #1
 8007b44:	e6c4      	b.n	80078d0 <follow_path+0x68>
			ns = dp->fn[NSFLAG];
 8007b46:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
				dp->sect = 0; return FR_NO_FILE;
 8007b4a:	61e1      	str	r1, [r4, #28]
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b4c:	e7b4      	b.n	8007ab8 <follow_path+0x250>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b4e:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b50:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8007b52:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b54:	4290      	cmp	r0, r2
	return clst * fs->csize + fs->database;
 8007b56:	bf3e      	ittt	cc
 8007b58:	895a      	ldrhcc	r2, [r3, #10]
 8007b5a:	6adf      	ldrcc	r7, [r3, #44]	; 0x2c
 8007b5c:	fb00 7702 	mlacc	r7, r0, r2, r7
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b60:	899a      	ldrh	r2, [r3, #12]
 8007b62:	fbb5 f1f2 	udiv	r1, r5, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b66:	bf28      	it	cs
 8007b68:	4647      	movcs	r7, r8
				dp->sect = clust2sect(fs, clst);
 8007b6a:	61e7      	str	r7, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b6c:	fb02 5211 	mls	r2, r2, r1, r5
 8007b70:	e748      	b.n	8007a04 <follow_path+0x19c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b72:	2002      	movs	r0, #2
	return res;
 8007b74:	e6ac      	b.n	80078d0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8007b76:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8007b78:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 8007b7a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 8007b7e:	b003      	add	sp, #12
 8007b80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8007b84:	f7ff bdc4 	b.w	8007710 <dir_sdi.constprop.0>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007b88:	2004      	movs	r0, #4
 8007b8a:	e6a1      	b.n	80078d0 <follow_path+0x68>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b8c:	2305      	movs	r3, #5
 8007b8e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8007b92:	e6b0      	b.n	80078f6 <follow_path+0x8e>
 8007b94:	2305      	movs	r3, #5
 8007b96:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e6e2      	b.n	8007964 <follow_path+0xfc>
 8007b9e:	bf00      	nop
 8007ba0:	0800bf98 	.word	0x0800bf98
 8007ba4:	0800bf88 	.word	0x0800bf88

08007ba8 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ba8:	2901      	cmp	r1, #1
{
 8007baa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8007bae:	6806      	ldr	r6, [r0, #0]
{
 8007bb0:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007bb2:	d910      	bls.n	8007bd6 <remove_chain+0x2e>
 8007bb4:	69b3      	ldr	r3, [r6, #24]
 8007bb6:	428b      	cmp	r3, r1
 8007bb8:	d90d      	bls.n	8007bd6 <remove_chain+0x2e>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007bba:	4605      	mov	r5, r0
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	b96a      	cbnz	r2, 8007bdc <remove_chain+0x34>
 8007bc0:	4637      	mov	r7, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	d207      	bcs.n	8007bd6 <remove_chain+0x2e>
		switch (fs->fs_type) {
 8007bc6:	783b      	ldrb	r3, [r7, #0]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	f000 8089 	beq.w	8007ce0 <remove_chain+0x138>
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d06a      	beq.n	8007ca8 <remove_chain+0x100>
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d010      	beq.n	8007bf8 <remove_chain+0x50>
 8007bd6:	2002      	movs	r0, #2
}
 8007bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007bdc:	2a01      	cmp	r2, #1
 8007bde:	d0fa      	beq.n	8007bd6 <remove_chain+0x2e>
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d9f8      	bls.n	8007bd6 <remove_chain+0x2e>
 8007be4:	f04f 32ff 	mov.w	r2, #4294967295
 8007be8:	4630      	mov	r0, r6
 8007bea:	f7ff fa53 	bl	8007094 <put_fat.part.0>
		if (res != FR_OK) return res;
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d1f2      	bne.n	8007bd8 <remove_chain+0x30>
 8007bf2:	682f      	ldr	r7, [r5, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	e7e4      	b.n	8007bc2 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bfa:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bfe:	89ba      	ldrh	r2, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 8007c00:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c04:	fbb8 f3f2 	udiv	r3, r8, r2
 8007c08:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c0a:	4561      	cmp	r1, ip
 8007c0c:	d00a      	beq.n	8007c24 <remove_chain+0x7c>
 8007c0e:	4638      	mov	r0, r7
 8007c10:	f7ff f874 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d17d      	bne.n	8007d14 <remove_chain+0x16c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c1a:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8007c1e:	89ba      	ldrh	r2, [r7, #12]
 8007c20:	fbb8 f3f2 	udiv	r3, r8, r2
 8007c24:	fb02 8313 	mls	r3, r2, r3, r8
 8007c28:	443b      	add	r3, r7
 8007c2a:	f108 0801 	add.w	r8, r8, #1
 8007c2e:	f893 9034 	ldrb.w	r9, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c32:	fbb8 f3f2 	udiv	r3, r8, r2
 8007c36:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c38:	4561      	cmp	r1, ip
 8007c3a:	d007      	beq.n	8007c4c <remove_chain+0xa4>
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f7ff f85d 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d166      	bne.n	8007d14 <remove_chain+0x16c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c46:	89ba      	ldrh	r2, [r7, #12]
 8007c48:	fbb8 f3f2 	udiv	r3, r8, r2
 8007c4c:	fb02 8813 	mls	r8, r2, r3, r8
 8007c50:	4447      	add	r7, r8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c52:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c54:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
 8007c58:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c5c:	bf4c      	ite	mi
 8007c5e:	ea4f 1818 	movmi.w	r8, r8, lsr #4
 8007c62:	f3c8 080b 	ubfxpl	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 8007c66:	f1b8 0f00 	cmp.w	r8, #0
 8007c6a:	d055      	beq.n	8007d18 <remove_chain+0x170>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007c6c:	f1b8 0f01 	cmp.w	r8, #1
 8007c70:	d0b1      	beq.n	8007bd6 <remove_chain+0x2e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007c72:	69b3      	ldr	r3, [r6, #24]
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	d9ae      	bls.n	8007bd6 <remove_chain+0x2e>
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7ff fa09 	bl	8007094 <put_fat.part.0>
			if (res != FR_OK) return res;
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d1a8      	bne.n	8007bd8 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007c86:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
 8007c8a:	1e91      	subs	r1, r2, #2
 8007c8c:	428b      	cmp	r3, r1
 8007c8e:	d205      	bcs.n	8007c9c <remove_chain+0xf4>
			fs->free_clst++;
 8007c90:	3301      	adds	r3, #1
 8007c92:	6173      	str	r3, [r6, #20]
			fs->fsi_flag |= 1;
 8007c94:	7933      	ldrb	r3, [r6, #4]
 8007c96:	f043 0301 	orr.w	r3, r3, #1
 8007c9a:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007c9c:	4542      	cmp	r2, r8
 8007c9e:	d93b      	bls.n	8007d18 <remove_chain+0x170>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007ca0:	682f      	ldr	r7, [r5, #0]
 8007ca2:	4644      	mov	r4, r8
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	e78c      	b.n	8007bc2 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ca8:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8007cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cb0:	ea4f 019c 	mov.w	r1, ip, lsr #2
 8007cb4:	fbb4 f1f1 	udiv	r1, r4, r1
 8007cb8:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007cba:	4291      	cmp	r1, r2
 8007cbc:	d005      	beq.n	8007cca <remove_chain+0x122>
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	f7ff f81c 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cc4:	bb30      	cbnz	r0, 8007d14 <remove_chain+0x16c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007cc6:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8007cca:	00a3      	lsls	r3, r4, #2
 8007ccc:	fbb3 f2fc 	udiv	r2, r3, ip
 8007cd0:	fb0c 3312 	mls	r3, ip, r2, r3
	rv = rv << 8 | ptr[0];
 8007cd4:	441f      	add	r7, r3
 8007cd6:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007cda:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8007cde:	e7c2      	b.n	8007c66 <remove_chain+0xbe>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ce0:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8007ce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ce8:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8007cec:	fbb4 f1f1 	udiv	r1, r4, r1
 8007cf0:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007cf2:	4291      	cmp	r1, r2
 8007cf4:	d005      	beq.n	8007d02 <remove_chain+0x15a>
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	f7ff f800 	bl	8006cfc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007cfc:	b950      	cbnz	r0, 8007d14 <remove_chain+0x16c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007cfe:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8007d02:	0063      	lsls	r3, r4, #1
 8007d04:	fbb3 f2fc 	udiv	r2, r3, ip
 8007d08:	fb0c 3312 	mls	r3, ip, r2, r3
 8007d0c:	441f      	add	r7, r3
 8007d0e:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 8007d12:	e7a8      	b.n	8007c66 <remove_chain+0xbe>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d14:	2001      	movs	r0, #1
 8007d16:	e75f      	b.n	8007bd8 <remove_chain+0x30>
	return FR_OK;
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e75d      	b.n	8007bd8 <remove_chain+0x30>

08007d1c <dir_register>:
{
 8007d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d20:	ed2d 8b02 	vpush	{d8}
 8007d24:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8007d26:	6806      	ldr	r6, [r0, #0]
{
 8007d28:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);
 8007d2a:	f7ff fcf1 	bl	8007710 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8007d2e:	9001      	str	r0, [sp, #4]
 8007d30:	b310      	cbz	r0, 8007d78 <dir_register+0x5c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d119      	bne.n	8007d6c <dir_register+0x50>
 8007d38:	2307      	movs	r3, #7
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	4618      	mov	r0, r3
}
 8007d3e:	b005      	add	sp, #20
 8007d40:	ecbd 8b02 	vpop	{d8}
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007d48:	f8b8 700a 	ldrh.w	r7, [r8, #10]
 8007d4c:	3f01      	subs	r7, #1
 8007d4e:	4217      	tst	r7, r2
 8007d50:	f040 8084 	bne.w	8007e5c <dir_register+0x140>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007d54:	4640      	mov	r0, r8
 8007d56:	f7ff fa59 	bl	800720c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007d5a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007d5c:	9002      	str	r0, [sp, #8]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007d5e:	f240 8150 	bls.w	8008002 <dir_register+0x2e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007d62:	1c43      	adds	r3, r0, #1
 8007d64:	f040 809f 	bne.w	8007ea6 <dir_register+0x18a>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d68:	2301      	movs	r3, #1
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	4618      	mov	r0, r3
}
 8007d6e:	b005      	add	sp, #20
 8007d70:	ecbd 8b02 	vpop	{d8}
 8007d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 8007d78:	f8d4 901c 	ldr.w	r9, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d7c:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007d80:	f106 0b34 	add.w	fp, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d84:	45d1      	cmp	r9, sl
 8007d86:	d018      	beq.n	8007dba <dir_register+0x9e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007d88:	78f3      	ldrb	r3, [r6, #3]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d16b      	bne.n	8007e66 <dir_register+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007d8e:	7870      	ldrb	r0, [r6, #1]
 8007d90:	2301      	movs	r3, #1
 8007d92:	464a      	mov	r2, r9
 8007d94:	4659      	mov	r1, fp
 8007d96:	f7fe feef 	bl	8006b78 <disk_read>
 8007d9a:	b150      	cbz	r0, 8007db2 <dir_register+0x96>
			fs->winsect = sector;
 8007d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007da0:	6333      	str	r3, [r6, #48]	; 0x30
				res = FR_DISK_ERR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	4618      	mov	r0, r3
 8007da6:	9301      	str	r3, [sp, #4]
}
 8007da8:	b005      	add	sp, #20
 8007daa:	ecbd 8b02 	vpop	{d8}
 8007dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007db2:	f8d4 a01c 	ldr.w	sl, [r4, #28]
			fs->winsect = sector;
 8007db6:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007dba:	6a20      	ldr	r0, [r4, #32]
 8007dbc:	7803      	ldrb	r3, [r0, #0]
 8007dbe:	2be5      	cmp	r3, #229	; 0xe5
 8007dc0:	d000      	beq.n	8007dc4 <dir_register+0xa8>
 8007dc2:	bb2b      	cbnz	r3, 8007e10 <dir_register+0xf4>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007dc4:	45d1      	cmp	r9, sl
 8007dc6:	d007      	beq.n	8007dd8 <dir_register+0xbc>
 8007dc8:	4651      	mov	r1, sl
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7fe ff96 	bl	8006cfc <move_window.part.0>
		if (res == FR_OK) {
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	f040 808a 	bne.w	8007eea <dir_register+0x1ce>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007dd6:	6a20      	ldr	r0, [r4, #32]
		*d++ = (BYTE)val;
 8007dd8:	2220      	movs	r2, #32
 8007dda:	2100      	movs	r1, #0
 8007ddc:	f001 f88e 	bl	8008efc <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007de0:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007de2:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8007de6:	1a9a      	subs	r2, r3, r2
 8007de8:	2a02      	cmp	r2, #2
 8007dea:	f240 80f1 	bls.w	8007fd0 <dir_register+0x2b4>
			*d++ = *s++;
 8007dee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007df4:	605a      	str	r2, [r3, #4]
 8007df6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8007dfa:	721a      	strb	r2, [r3, #8]
 8007dfc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8007e00:	725a      	strb	r2, [r3, #9]
 8007e02:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8007e06:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	9801      	ldr	r0, [sp, #4]
 8007e0c:	70f3      	strb	r3, [r6, #3]
 8007e0e:	e796      	b.n	8007d3e <dir_register+0x22>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007e10:	6965      	ldr	r5, [r4, #20]
 8007e12:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007e14:	f1ba 0f00 	cmp.w	sl, #0
 8007e18:	d08e      	beq.n	8007d38 <dir_register+0x1c>
 8007e1a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8007e1e:	d28b      	bcs.n	8007d38 <dir_register+0x1c>
	FATFS *fs = dp->obj.fs;
 8007e20:	f8d4 8000 	ldr.w	r8, [r4]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007e24:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007e28:	fbb5 f2f3 	udiv	r2, r5, r3
 8007e2c:	fb03 5312 	mls	r3, r3, r2, r5
 8007e30:	b143      	cbz	r3, 8007e44 <dir_register+0x128>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007e32:	464a      	mov	r2, r9
 8007e34:	f108 0734 	add.w	r7, r8, #52	; 0x34
 8007e38:	46d1      	mov	r9, sl
 8007e3a:	4692      	mov	sl, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007e3c:	443b      	add	r3, r7
	dp->dptr = ofs;						/* Current entry */
 8007e3e:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007e40:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e42:	e79f      	b.n	8007d84 <dir_register+0x68>
		if (!dp->clust) {		/* Static table */
 8007e44:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8007e46:	f10a 0001 	add.w	r0, sl, #1
 8007e4a:	61e0      	str	r0, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	f47f af7b 	bne.w	8007d48 <dir_register+0x2c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007e52:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8007e56:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8007e5a:	d948      	bls.n	8007eee <dir_register+0x1d2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007e5c:	46ca      	mov	sl, r9
 8007e5e:	f108 0734 	add.w	r7, r8, #52	; 0x34
 8007e62:	4681      	mov	r9, r0
 8007e64:	e7ea      	b.n	8007e3c <dir_register+0x120>
 8007e66:	7870      	ldrb	r0, [r6, #1]
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4652      	mov	r2, sl
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	f7fe fe91 	bl	8006b94 <disk_write>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f47f af78 	bne.w	8007d68 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007e78:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 8007e7a:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007e7c:	ebaa 0203 	sub.w	r2, sl, r3
 8007e80:	69f3      	ldr	r3, [r6, #28]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d283      	bcs.n	8007d8e <dir_register+0x72>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e86:	78b5      	ldrb	r5, [r6, #2]
 8007e88:	2d01      	cmp	r5, #1
 8007e8a:	d801      	bhi.n	8007e90 <dir_register+0x174>
 8007e8c:	e77f      	b.n	8007d8e <dir_register+0x72>
					wsect += fs->fsize;
 8007e8e:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e90:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8007e92:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e94:	4652      	mov	r2, sl
 8007e96:	2301      	movs	r3, #1
 8007e98:	4659      	mov	r1, fp
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e9a:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e9c:	f7fe fe7a 	bl	8006b94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ea0:	2d01      	cmp	r5, #1
 8007ea2:	d1f4      	bne.n	8007e8e <dir_register+0x172>
 8007ea4:	e773      	b.n	8007d8e <dir_register+0x72>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007ea6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007eaa:	4298      	cmp	r0, r3
 8007eac:	d221      	bcs.n	8007ef2 <dir_register+0x1d6>
	clst -= 2;
 8007eae:	1e82      	subs	r2, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007eb0:	3b02      	subs	r3, #2
	clst -= 2;
 8007eb2:	9203      	str	r2, [sp, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007eb4:	f108 0734 	add.w	r7, r8, #52	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8007eb8:	9a02      	ldr	r2, [sp, #8]
 8007eba:	61a2      	str	r2, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007ebc:	9a03      	ldr	r2, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ebe:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007ec2:	4293      	cmp	r3, r2
	return clst * fs->csize + fs->database;
 8007ec4:	bf82      	ittt	hi
 8007ec6:	f8d8 302c 	ldrhi.w	r3, [r8, #44]	; 0x2c
 8007eca:	f8b8 900a 	ldrhhi.w	r9, [r8, #10]
 8007ece:	fb02 3909 	mlahi	r9, r2, r9, r3
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007ed2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007ed6:	fbb5 f2f3 	udiv	r2, r5, r3
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007eda:	bf98      	it	ls
 8007edc:	f04f 0900 	movls.w	r9, #0
				dp->sect = clust2sect(fs, clst);
 8007ee0:	f8c4 901c 	str.w	r9, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007ee4:	fb03 5312 	mls	r3, r3, r2, r5
 8007ee8:	e7a8      	b.n	8007e3c <dir_register+0x120>
 8007eea:	9001      	str	r0, [sp, #4]
 8007eec:	e727      	b.n	8007d3e <dir_register+0x22>
				dp->sect = 0; return FR_NO_FILE;
 8007eee:	61e1      	str	r1, [r4, #28]
 8007ef0:	e722      	b.n	8007d38 <dir_register+0x1c>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ef2:	69a1      	ldr	r1, [r4, #24]
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f7ff fb25 	bl	8007544 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007efa:	4603      	mov	r3, r0
 8007efc:	9002      	str	r0, [sp, #8]
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f43f af1a 	beq.w	8007d38 <dir_register+0x1c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007f04:	2801      	cmp	r0, #1
 8007f06:	d07c      	beq.n	8008002 <dir_register+0x2e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f08:	3301      	adds	r3, #1
 8007f0a:	f43f af2d 	beq.w	8007d68 <dir_register+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007f0e:	f898 3003 	ldrb.w	r3, [r8, #3]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d179      	bne.n	800800a <dir_register+0x2ee>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007f16:	f108 0734 	add.w	r7, r8, #52	; 0x34
		*d++ = (BYTE)val;
 8007f1a:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4638      	mov	r0, r7
 8007f22:	f000 ffeb 	bl	8008efc <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f26:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 8007f2a:	9a02      	ldr	r2, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f2c:	3b02      	subs	r3, #2
	clst -= 2;
 8007f2e:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f30:	429a      	cmp	r2, r3
	clst -= 2;
 8007f32:	9203      	str	r2, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f34:	f080 80a4 	bcs.w	8008080 <dir_register+0x364>
	return clst * fs->csize + fs->database;
 8007f38:	4610      	mov	r0, r2
 8007f3a:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8007f3e:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8007f42:	fb00 2a01 	mla	sl, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f46:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
 8007f4a:	2900      	cmp	r1, #0
 8007f4c:	f000 8095 	beq.w	800807a <dir_register+0x35e>
 8007f50:	2300      	movs	r3, #0
 8007f52:	ee08 ba10 	vmov	s16, fp
 8007f56:	46bb      	mov	fp, r7
 8007f58:	4627      	mov	r7, r4
 8007f5a:	4654      	mov	r4, sl
 8007f5c:	469a      	mov	sl, r3
						fs->wflag = 1;
 8007f5e:	f04f 0301 	mov.w	r3, #1
 8007f62:	f888 3003 	strb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007f66:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	4659      	mov	r1, fp
 8007f70:	f7fe fe10 	bl	8006b94 <disk_write>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f47f aef7 	bne.w	8007d68 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007f7a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8007f7e:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007f82:	1ae2      	subs	r2, r4, r3
 8007f84:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d214      	bcs.n	8007fb6 <dir_register+0x29a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f8c:	f898 9002 	ldrb.w	r9, [r8, #2]
 8007f90:	f1b9 0f01 	cmp.w	r9, #1
 8007f94:	d802      	bhi.n	8007f9c <dir_register+0x280>
 8007f96:	e00e      	b.n	8007fb6 <dir_register+0x29a>
					wsect += fs->fsize;
 8007f98:	f8d8 301c 	ldr.w	r3, [r8, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007f9c:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 8007fa0:	441c      	add	r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007fa6:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8007faa:	4659      	mov	r1, fp
 8007fac:	f7fe fdf2 	bl	8006b94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007fb0:	f1b9 0f01 	cmp.w	r9, #1
 8007fb4:	d1f0      	bne.n	8007f98 <dir_register+0x27c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007fb6:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
 8007fba:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8007fbe:	f10a 0301 	add.w	r3, sl, #1
 8007fc2:	1c4c      	adds	r4, r1, #1
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	f8c8 4030 	str.w	r4, [r8, #48]	; 0x30
 8007fca:	d24d      	bcs.n	8008068 <dir_register+0x34c>
 8007fcc:	469a      	mov	sl, r3
 8007fce:	e7c6      	b.n	8007f5e <dir_register+0x242>
			*d++ = *s++;
 8007fd0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8007fda:	705a      	strb	r2, [r3, #1]
 8007fdc:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8007fe0:	709a      	strb	r2, [r3, #2]
 8007fe2:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8007fe6:	70da      	strb	r2, [r3, #3]
 8007fe8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8007fec:	711a      	strb	r2, [r3, #4]
 8007fee:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8007ff2:	715a      	strb	r2, [r3, #5]
 8007ff4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8007ff8:	719a      	strb	r2, [r3, #6]
 8007ffa:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8007ffe:	71da      	strb	r2, [r3, #7]
 8008000:	e6f9      	b.n	8007df6 <dir_register+0xda>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008002:	2302      	movs	r3, #2
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	4618      	mov	r0, r3
 8008008:	e699      	b.n	8007d3e <dir_register+0x22>
		wsect = fs->winsect;	/* Current sector number */
 800800a:	f8d8 a030 	ldr.w	sl, [r8, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800800e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008012:	f108 0734 	add.w	r7, r8, #52	; 0x34
 8008016:	2301      	movs	r3, #1
 8008018:	4652      	mov	r2, sl
 800801a:	4639      	mov	r1, r7
 800801c:	f7fe fdba 	bl	8006b94 <disk_write>
 8008020:	2800      	cmp	r0, #0
 8008022:	f47f aea1 	bne.w	8007d68 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008026:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 800802a:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800802e:	ebaa 0103 	sub.w	r1, sl, r3
 8008032:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8008036:	4299      	cmp	r1, r3
 8008038:	f4bf af6f 	bcs.w	8007f1a <dir_register+0x1fe>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800803c:	f898 9002 	ldrb.w	r9, [r8, #2]
 8008040:	f1b9 0f01 	cmp.w	r9, #1
 8008044:	d802      	bhi.n	800804c <dir_register+0x330>
 8008046:	e768      	b.n	8007f1a <dir_register+0x1fe>
					wsect += fs->fsize;
 8008048:	f8d8 301c 	ldr.w	r3, [r8, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800804c:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 8008050:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008052:	4652      	mov	r2, sl
 8008054:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008056:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800805a:	4639      	mov	r1, r7
 800805c:	f7fe fd9a 	bl	8006b94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008060:	f1b9 0f01 	cmp.w	r9, #1
 8008064:	d1f0      	bne.n	8008048 <dir_register+0x32c>
 8008066:	e758      	b.n	8007f1a <dir_register+0x1fe>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008068:	f8d8 3018 	ldr.w	r3, [r8, #24]
					fs->winsect -= n;							/* Restore window offset */
 800806c:	463c      	mov	r4, r7
 800806e:	465f      	mov	r7, fp
 8008070:	ee18 ba10 	vmov	fp, s16
 8008074:	eba1 0a0a 	sub.w	sl, r1, sl
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008078:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 800807a:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
 800807e:	e71b      	b.n	8007eb8 <dir_register+0x19c>
	return clst * fs->csize + fs->database;
 8008080:	f8b8 100a 	ldrh.w	r1, [r8, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008084:	f04f 0a00 	mov.w	sl, #0
 8008088:	e75d      	b.n	8007f46 <dir_register+0x22a>
 800808a:	bf00      	nop

0800808c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800808c:	b510      	push	{r4, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8008094:	b181      	cbz	r1, 80080b8 <f_mount+0x2c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008096:	f891 c000 	ldrb.w	ip, [r1]
 800809a:	f1bc 0f20 	cmp.w	ip, #32
 800809e:	d911      	bls.n	80080c4 <f_mount+0x38>
 80080a0:	4663      	mov	r3, ip
 80080a2:	4608      	mov	r0, r1
 80080a4:	e003      	b.n	80080ae <f_mount+0x22>
 80080a6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	d90a      	bls.n	80080c4 <f_mount+0x38>
 80080ae:	2b3a      	cmp	r3, #58	; 0x3a
 80080b0:	d1f9      	bne.n	80080a6 <f_mount+0x1a>
			i = *tp++ - '0';
 80080b2:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80080b4:	4288      	cmp	r0, r1
 80080b6:	d002      	beq.n	80080be <f_mount+0x32>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 80080b8:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80080ba:	b002      	add	sp, #8
 80080bc:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80080be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80080c2:	d1f9      	bne.n	80080b8 <f_mount+0x2c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80080c4:	4910      	ldr	r1, [pc, #64]	; (8008108 <f_mount+0x7c>)
 80080c6:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 80080c8:	b163      	cbz	r3, 80080e4 <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80080ca:	4810      	ldr	r0, [pc, #64]	; (800810c <f_mount+0x80>)
 80080cc:	6804      	ldr	r4, [r0, #0]
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	bf04      	itt	eq
 80080d2:	2400      	moveq	r4, #0
 80080d4:	6004      	streq	r4, [r0, #0]
 80080d6:	6904      	ldr	r4, [r0, #16]
 80080d8:	429c      	cmp	r4, r3
 80080da:	bf04      	itt	eq
 80080dc:	2400      	moveq	r4, #0
 80080de:	6104      	streq	r4, [r0, #16]
		cfs->fs_type = 0;				/* Clear old fs object */
 80080e0:	2000      	movs	r0, #0
 80080e2:	7018      	strb	r0, [r3, #0]
	if (fs) {
 80080e4:	9b01      	ldr	r3, [sp, #4]
 80080e6:	b15b      	cbz	r3, 8008100 <f_mount+0x74>
		fs->fs_type = 0;				/* Clear new fs object */
 80080e8:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80080ea:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 80080ec:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 80080ee:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80080f0:	d1e3      	bne.n	80080ba <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80080f2:	4602      	mov	r2, r0
 80080f4:	a901      	add	r1, sp, #4
 80080f6:	4668      	mov	r0, sp
 80080f8:	f7fe fe3a 	bl	8006d70 <find_volume>
}
 80080fc:	b002      	add	sp, #8
 80080fe:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008100:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8008102:	600b      	str	r3, [r1, #0]
}
 8008104:	b002      	add	sp, #8
 8008106:	bd10      	pop	{r4, pc}
 8008108:	20003074 	.word	0x20003074
 800810c:	20003078 	.word	0x20003078

08008110 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	b090      	sub	sp, #64	; 0x40
 8008116:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008118:	2800      	cmp	r0, #0
 800811a:	f000 809c 	beq.w	8008256 <f_open+0x146>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800811e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8008122:	4616      	mov	r6, r2
 8008124:	4604      	mov	r4, r0
 8008126:	463a      	mov	r2, r7
 8008128:	a903      	add	r1, sp, #12
 800812a:	a801      	add	r0, sp, #4
 800812c:	f7fe fe20 	bl	8006d70 <find_volume>
	if (res == FR_OK) {
 8008130:	4605      	mov	r5, r0
 8008132:	b128      	cbz	r0, 8008140 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008134:	2300      	movs	r3, #0
 8008136:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8008138:	4628      	mov	r0, r5
 800813a:	b010      	add	sp, #64	; 0x40
 800813c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 8008140:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008142:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8008144:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008146:	a804      	add	r0, sp, #16
 8008148:	f7ff fb8e 	bl	8007868 <follow_path>
		if (res == FR_OK) {
 800814c:	bb00      	cbnz	r0, 8008190 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800814e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8008152:	2b00      	cmp	r3, #0
 8008154:	f2c0 8086 	blt.w	8008264 <f_open+0x154>
		if (Files[i].fs) {	/* Existing entry */
 8008158:	4baa      	ldr	r3, [pc, #680]	; (8008404 <f_open+0x2f4>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800815a:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800815c:	f8d3 8000 	ldr.w	r8, [r3]
				Files[i].clu == dp->obj.sclust &&
 8008160:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 8008164:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008168:	f027 0201 	bic.w	r2, r7, #1
 800816c:	4611      	mov	r1, r2
		if (Files[i].fs) {	/* Existing entry */
 800816e:	f1b8 0f00 	cmp.w	r8, #0
 8008172:	f000 80fb 	beq.w	800836c <f_open+0x25c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008176:	4580      	cmp	r8, r0
 8008178:	d076      	beq.n	8008268 <f_open+0x158>
		if (Files[i].fs) {	/* Existing entry */
 800817a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800817e:	f1b8 0f00 	cmp.w	r8, #0
 8008182:	f000 8088 	beq.w	8008296 <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008186:	4580      	cmp	r8, r0
 8008188:	f000 8129 	beq.w	80083de <f_open+0x2ce>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800818c:	2512      	movs	r5, #18
 800818e:	e7d1      	b.n	8008134 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008190:	f016 0f1c 	tst.w	r6, #28
 8008194:	d064      	beq.n	8008260 <f_open+0x150>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008196:	2804      	cmp	r0, #4
 8008198:	d162      	bne.n	8008260 <f_open+0x150>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800819a:	4b9a      	ldr	r3, [pc, #616]	; (8008404 <f_open+0x2f4>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	b112      	cbz	r2, 80081a6 <f_open+0x96>
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f2      	bne.n	800818c <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80081a6:	a804      	add	r0, sp, #16
 80081a8:	f7ff fdb8 	bl	8007d1c <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80081ac:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d155      	bne.n	8008260 <f_open+0x150>
				dw = GET_FATTIME();
 80081b4:	f7fe fcba 	bl	8006b2c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80081b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80081ba:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
 80081bc:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80081c0:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 80081c4:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80081c6:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val;
 80081c8:	7458      	strb	r0, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 80081ca:	739e      	strb	r6, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80081cc:	741a      	strb	r2, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80081ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80081d0:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val;
 80081d2:	7658      	strb	r0, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 80081d4:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80081d6:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80081d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80081da:	9b03      	ldr	r3, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80081dc:	2120      	movs	r1, #32
 80081de:	72d1      	strb	r1, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
 80081e0:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80081e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 80081e4:	2903      	cmp	r1, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80081e6:	bf08      	it	eq
 80081e8:	8a91      	ldrheq	r1, [r2, #20]
	cl = ld_word(dir + DIR_FstClusLO);
 80081ea:	8b56      	ldrh	r6, [r2, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80081ec:	bf08      	it	eq
 80081ee:	ea46 4601 	orreq.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 80081f2:	2100      	movs	r1, #0
 80081f4:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 80081f6:	7818      	ldrb	r0, [r3, #0]
 80081f8:	2803      	cmp	r0, #3
 80081fa:	d100      	bne.n	80081fe <f_open+0xee>
	*ptr++ = (BYTE)val; val >>= 8;
 80081fc:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 80081fe:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8008200:	2200      	movs	r2, #0
 8008202:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 8008204:	2101      	movs	r1, #1
 8008206:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8008208:	b19e      	cbz	r6, 8008232 <f_open+0x122>
						res = remove_chain(&dj.obj, cl, 0);
 800820a:	4631      	mov	r1, r6
 800820c:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800820e:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8008212:	f7ff fcc9 	bl	8007ba8 <remove_chain>
						if (res == FR_OK) {
 8008216:	bb18      	cbnz	r0, 8008260 <f_open+0x150>
							res = move_window(fs, dw);
 8008218:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800821a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800821c:	4590      	cmp	r8, r2
 800821e:	f000 80eb 	beq.w	80083f8 <f_open+0x2e8>
 8008222:	4618      	mov	r0, r3
 8008224:	4641      	mov	r1, r8
 8008226:	f7fe fd69 	bl	8006cfc <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	3e01      	subs	r6, #1
 800822e:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8008230:	b9b0      	cbnz	r0, 8008260 <f_open+0x150>
				mode |= FA_MODIFIED;
 8008232:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008236:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800823a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823c:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800823e:	3900      	subs	r1, #0
			fp->dir_ptr = dj.dir;
 8008240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008242:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008244:	bf18      	it	ne
 8008246:	2101      	movne	r1, #1
 8008248:	a804      	add	r0, sp, #16
 800824a:	f7fe fcbd 	bl	8006bc8 <inc_lock>
 800824e:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008250:	bb68      	cbnz	r0, 80082ae <f_open+0x19e>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008252:	2502      	movs	r5, #2
 8008254:	e76e      	b.n	8008134 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8008256:	2509      	movs	r5, #9
}
 8008258:	4628      	mov	r0, r5
 800825a:	b010      	add	sp, #64	; 0x40
 800825c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008260:	4605      	mov	r5, r0
 8008262:	e767      	b.n	8008134 <f_open+0x24>
				res = FR_INVALID_NAME;
 8008264:	2506      	movs	r5, #6
 8008266:	e765      	b.n	8008134 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008268:	6858      	ldr	r0, [r3, #4]
 800826a:	4560      	cmp	r0, ip
 800826c:	f000 80bc 	beq.w	80083e8 <f_open+0x2d8>
		if (Files[i].fs) {	/* Existing entry */
 8008270:	6918      	ldr	r0, [r3, #16]
 8008272:	b180      	cbz	r0, 8008296 <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008274:	4540      	cmp	r0, r8
 8008276:	d189      	bne.n	800818c <f_open+0x7c>
 8008278:	6958      	ldr	r0, [r3, #20]
 800827a:	4584      	cmp	ip, r0
 800827c:	d186      	bne.n	800818c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 800827e:	6998      	ldr	r0, [r3, #24]
 8008280:	4570      	cmp	r0, lr
 8008282:	d183      	bne.n	800818c <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008284:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008286:	2a00      	cmp	r2, #0
 8008288:	d167      	bne.n	800835a <f_open+0x24a>
 800828a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800828e:	899b      	ldrh	r3, [r3, #12]
 8008290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008294:	d061      	beq.n	800835a <f_open+0x24a>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008296:	f016 0f1c 	tst.w	r6, #28
 800829a:	d04c      	beq.n	8008336 <f_open+0x226>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800829c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80082a0:	f013 0f11 	tst.w	r3, #17
 80082a4:	d160      	bne.n	8008368 <f_open+0x258>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80082a6:	0773      	lsls	r3, r6, #29
 80082a8:	d559      	bpl.n	800835e <f_open+0x24e>
 80082aa:	2508      	movs	r5, #8
 80082ac:	e742      	b.n	8008134 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80082ae:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80082b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 80082b4:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 80082b8:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 80082ba:	2a03      	cmp	r2, #3
 80082bc:	d102      	bne.n	80082c4 <f_open+0x1b4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80082be:	8a9a      	ldrh	r2, [r3, #20]
 80082c0:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80082c4:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 80082c6:	f8d3 801c 	ldr.w	r8, [r3, #28]
			fp->obj.id = fs->id;
 80082ca:	f8b9 3006 	ldrh.w	r3, [r9, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80082ce:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80082d2:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80082d4:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->flag = mode;		/* Set file access mode */
 80082d8:	7527      	strb	r7, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
 80082da:	f8c4 9000 	str.w	r9, [r4]
			fp->obj.id = fs->id;
 80082de:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80082e0:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 80082e2:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80082e4:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80082e6:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 80082e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082ec:	4650      	mov	r0, sl
 80082ee:	f000 fe05 	bl	8008efc <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80082f2:	06bf      	lsls	r7, r7, #26
 80082f4:	f57f af20 	bpl.w	8008138 <f_open+0x28>
 80082f8:	f1b8 0f00 	cmp.w	r8, #0
 80082fc:	f43f af1c 	beq.w	8008138 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008300:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008304:	f8b9 700a 	ldrh.w	r7, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008308:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800830c:	fb03 f707 	mul.w	r7, r3, r7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008310:	4547      	cmp	r7, r8
 8008312:	d306      	bcc.n	8008322 <f_open+0x212>
 8008314:	e03e      	b.n	8008394 <f_open+0x284>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008316:	1c70      	adds	r0, r6, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008318:	eba8 0807 	sub.w	r8, r8, r7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800831c:	d01b      	beq.n	8008356 <f_open+0x246>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800831e:	4547      	cmp	r7, r8
 8008320:	d234      	bcs.n	800838c <f_open+0x27c>
					clst = get_fat(&fp->obj, clst);
 8008322:	4631      	mov	r1, r6
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	f7fe ff71 	bl	800720c <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800832a:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800832c:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800832e:	d8f2      	bhi.n	8008316 <f_open+0x206>
 8008330:	2502      	movs	r5, #2
				fp->clust = clst;
 8008332:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008334:	e6fe      	b.n	8008134 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008336:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800833a:	06d9      	lsls	r1, r3, #27
 800833c:	d424      	bmi.n	8008388 <f_open+0x278>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800833e:	07b1      	lsls	r1, r6, #30
 8008340:	d501      	bpl.n	8008346 <f_open+0x236>
 8008342:	07db      	lsls	r3, r3, #31
 8008344:	d410      	bmi.n	8008368 <f_open+0x258>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008346:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800834a:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800834c:	2e00      	cmp	r6, #0
 800834e:	f47f af70 	bne.w	8008232 <f_open+0x122>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008352:	4611      	mov	r1, r2
 8008354:	e771      	b.n	800823a <f_open+0x12a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008356:	2501      	movs	r5, #1
 8008358:	e7eb      	b.n	8008332 <f_open+0x222>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800835a:	2510      	movs	r5, #16
 800835c:	e6ea      	b.n	8008134 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800835e:	0730      	lsls	r0, r6, #28
 8008360:	f53f af28 	bmi.w	80081b4 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008364:	9b03      	ldr	r3, [sp, #12]
 8008366:	e768      	b.n	800823a <f_open+0x12a>
						res = FR_DENIED;
 8008368:	2507      	movs	r5, #7
 800836a:	e6e3      	b.n	8008134 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 800836c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8008370:	f1b8 0f00 	cmp.w	r8, #0
 8008374:	d08f      	beq.n	8008296 <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008376:	4540      	cmp	r0, r8
 8008378:	d18d      	bne.n	8008296 <f_open+0x186>
 800837a:	6958      	ldr	r0, [r3, #20]
 800837c:	4560      	cmp	r0, ip
 800837e:	d18a      	bne.n	8008296 <f_open+0x186>
				Files[i].clu == dp->obj.sclust &&
 8008380:	6998      	ldr	r0, [r3, #24]
 8008382:	4570      	cmp	r0, lr
 8008384:	d187      	bne.n	8008296 <f_open+0x186>
 8008386:	e77d      	b.n	8008284 <f_open+0x174>
					res = FR_NO_FILE;
 8008388:	2504      	movs	r5, #4
 800838a:	e6d3      	b.n	8008134 <f_open+0x24>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800838c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008390:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008394:	fbb8 f2f3 	udiv	r2, r8, r3
 8008398:	fb03 8312 	mls	r3, r3, r2, r8
				fp->clust = clst;
 800839c:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f43f aeca 	beq.w	8008138 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80083a4:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 80083a8:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80083aa:	3b02      	subs	r3, #2
 80083ac:	429e      	cmp	r6, r3
 80083ae:	f4bf af50 	bcs.w	8008252 <f_open+0x142>
	return clst * fs->csize + fs->database;
 80083b2:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 80083b6:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80083ba:	fb06 3301 	mla	r3, r6, r1, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f43f af47 	beq.w	8008252 <f_open+0x142>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80083c4:	441a      	add	r2, r3
 80083c6:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80083c8:	f899 0001 	ldrb.w	r0, [r9, #1]
 80083cc:	4651      	mov	r1, sl
 80083ce:	2301      	movs	r3, #1
 80083d0:	f7fe fbd2 	bl	8006b78 <disk_read>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f43f aeaf 	beq.w	8008138 <f_open+0x28>
 80083da:	2501      	movs	r5, #1
 80083dc:	e6aa      	b.n	8008134 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083de:	6958      	ldr	r0, [r3, #20]
 80083e0:	4560      	cmp	r0, ip
 80083e2:	f47f aed3 	bne.w	800818c <f_open+0x7c>
 80083e6:	e74a      	b.n	800827e <f_open+0x16e>
				Files[i].clu == dp->obj.sclust &&
 80083e8:	6898      	ldr	r0, [r3, #8]
 80083ea:	4570      	cmp	r0, lr
 80083ec:	d007      	beq.n	80083fe <f_open+0x2ee>
		if (Files[i].fs) {	/* Existing entry */
 80083ee:	6918      	ldr	r0, [r3, #16]
 80083f0:	2800      	cmp	r0, #0
 80083f2:	f47f aec8 	bne.w	8008186 <f_open+0x76>
 80083f6:	e74e      	b.n	8008296 <f_open+0x186>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80083f8:	3e01      	subs	r6, #1
 80083fa:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 80083fc:	e719      	b.n	8008232 <f_open+0x122>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083fe:	4628      	mov	r0, r5
 8008400:	e741      	b.n	8008286 <f_open+0x176>
 8008402:	bf00      	nop
 8008404:	20003078 	.word	0x20003078

08008408 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800840e:	2300      	movs	r3, #0
{
 8008410:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8008412:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008414:	b150      	cbz	r0, 800842c <f_read+0x24>
 8008416:	6803      	ldr	r3, [r0, #0]
 8008418:	4604      	mov	r4, r0
 800841a:	b13b      	cbz	r3, 800842c <f_read+0x24>
 800841c:	4690      	mov	r8, r2
 800841e:	781a      	ldrb	r2, [r3, #0]
 8008420:	b122      	cbz	r2, 800842c <f_read+0x24>
 8008422:	88da      	ldrh	r2, [r3, #6]
 8008424:	460e      	mov	r6, r1
 8008426:	8881      	ldrh	r1, [r0, #4]
 8008428:	4291      	cmp	r1, r2
 800842a:	d005      	beq.n	8008438 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800842c:	f04f 0909 	mov.w	r9, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8008430:	4648      	mov	r0, r9
 8008432:	b005      	add	sp, #20
 8008434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008438:	7858      	ldrb	r0, [r3, #1]
 800843a:	f7fe fb83 	bl	8006b44 <disk_status>
 800843e:	07c2      	lsls	r2, r0, #31
 8008440:	d4f4      	bmi.n	800842c <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008442:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008446:	f1b9 0f00 	cmp.w	r9, #0
 800844a:	d1f1      	bne.n	8008430 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800844c:	7d23      	ldrb	r3, [r4, #20]
 800844e:	f013 0301 	ands.w	r3, r3, #1
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	f000 80f1 	beq.w	800863a <f_read+0x232>
	remain = fp->obj.objsize - fp->fptr;
 8008458:	69a1      	ldr	r1, [r4, #24]
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	1a5b      	subs	r3, r3, r1
 800845e:	4598      	cmp	r8, r3
 8008460:	bf28      	it	cs
 8008462:	4698      	movcs	r8, r3
	for ( ;  btr;								/* Repeat until all data read */
 8008464:	f1b8 0f00 	cmp.w	r8, #0
 8008468:	d0e2      	beq.n	8008430 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800846a:	46a3      	mov	fp, r4
 800846c:	f104 0331 	add.w	r3, r4, #49	; 0x31
 8008470:	f85b ab30 	ldr.w	sl, [fp], #48
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800847a:	4618      	mov	r0, r3
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800847c:	fbb1 f3f0 	udiv	r3, r1, r0
 8008480:	fb00 1513 	mls	r5, r0, r3, r1
 8008484:	2d00      	cmp	r5, #0
 8008486:	d147      	bne.n	8008518 <f_read+0x110>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008488:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800848c:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800848e:	401a      	ands	r2, r3
 8008490:	d07a      	beq.n	8008588 <f_read+0x180>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008492:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008494:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 8008498:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800849a:	3b02      	subs	r3, #2
 800849c:	4298      	cmp	r0, r3
 800849e:	f080 8081 	bcs.w	80085a4 <f_read+0x19c>
	return clst * fs->csize + fs->database;
 80084a2:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 80084a6:	f8da 502c 	ldr.w	r5, [sl, #44]	; 0x2c
 80084aa:	fb01 5500 	mla	r5, r1, r0, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 80084ae:	2d00      	cmp	r5, #0
 80084b0:	d078      	beq.n	80085a4 <f_read+0x19c>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80084b2:	f8ba 000c 	ldrh.w	r0, [sl, #12]
			if (cc) {							/* Read maximum contiguous sectors directly */
 80084b6:	4540      	cmp	r0, r8
			sect += csect;
 80084b8:	4415      	add	r5, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 80084ba:	d87b      	bhi.n	80085b4 <f_read+0x1ac>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80084bc:	fbb8 f3f0 	udiv	r3, r8, r0
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084c0:	18d0      	adds	r0, r2, r3
 80084c2:	4288      	cmp	r0, r1
					cc = fs->csize - csect;
 80084c4:	bf88      	it	hi
 80084c6:	1a8b      	subhi	r3, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084c8:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80084cc:	9302      	str	r3, [sp, #8]
 80084ce:	462a      	mov	r2, r5
 80084d0:	4631      	mov	r1, r6
 80084d2:	f7fe fb51 	bl	8006b78 <disk_read>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	f040 80a7 	bne.w	800862a <f_read+0x222>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80084dc:	f994 2014 	ldrsb.w	r2, [r4, #20]
 80084e0:	9b02      	ldr	r3, [sp, #8]
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	f2c0 80c1 	blt.w	800866a <f_read+0x262>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80084e8:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80084ec:	69a1      	ldr	r1, [r4, #24]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80084ee:	fb00 f303 	mul.w	r3, r0, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80084f2:	441e      	add	r6, r3
 80084f4:	eba8 0803 	sub.w	r8, r8, r3
 80084f8:	4419      	add	r1, r3
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	61a1      	str	r1, [r4, #24]
 80084fe:	4413      	add	r3, r2
 8008500:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8008502:	f1b8 0f00 	cmp.w	r8, #0
 8008506:	d093      	beq.n	8008430 <f_read+0x28>
 8008508:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800850c:	fbb1 f3f0 	udiv	r3, r1, r0
 8008510:	fb00 1513 	mls	r5, r0, r3, r1
 8008514:	2d00      	cmp	r5, #0
 8008516:	d0b7      	beq.n	8008488 <f_read+0x80>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008518:	1b43      	subs	r3, r0, r5
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800851a:	4543      	cmp	r3, r8
 800851c:	bf28      	it	cs
 800851e:	4643      	movcs	r3, r8
	if (cnt) {
 8008520:	b383      	cbz	r3, 8008584 <f_read+0x17c>
 8008522:	1c6a      	adds	r2, r5, #1
 8008524:	445a      	add	r2, fp
 8008526:	1ab2      	subs	r2, r6, r2
 8008528:	2a02      	cmp	r2, #2
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800852a:	445d      	add	r5, fp
 800852c:	f103 3eff 	add.w	lr, r3, #4294967295
 8008530:	f240 8086 	bls.w	8008640 <f_read+0x238>
 8008534:	f1be 0f07 	cmp.w	lr, #7
 8008538:	f240 8082 	bls.w	8008640 <f_read+0x238>
 800853c:	f023 0c03 	bic.w	ip, r3, #3
 8008540:	44ac      	add	ip, r5
 8008542:	462a      	mov	r2, r5
 8008544:	4631      	mov	r1, r6
			*d++ = *s++;
 8008546:	f852 0b04 	ldr.w	r0, [r2], #4
 800854a:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
 800854e:	4562      	cmp	r2, ip
 8008550:	d1f9      	bne.n	8008546 <f_read+0x13e>
 8008552:	f023 0203 	bic.w	r2, r3, #3
 8008556:	4293      	cmp	r3, r2
 8008558:	eb06 0102 	add.w	r1, r6, r2
 800855c:	eb05 0002 	add.w	r0, r5, r2
 8008560:	d00a      	beq.n	8008578 <f_read+0x170>
			*d++ = *s++;
 8008562:	5cad      	ldrb	r5, [r5, r2]
 8008564:	54b5      	strb	r5, [r6, r2]
		} while (--cnt);
 8008566:	ebbe 0202 	subs.w	r2, lr, r2
 800856a:	d005      	beq.n	8008578 <f_read+0x170>
			*d++ = *s++;
 800856c:	7845      	ldrb	r5, [r0, #1]
 800856e:	704d      	strb	r5, [r1, #1]
		} while (--cnt);
 8008570:	2a01      	cmp	r2, #1
 8008572:	d001      	beq.n	8008578 <f_read+0x170>
			*d++ = *s++;
 8008574:	7882      	ldrb	r2, [r0, #2]
 8008576:	708a      	strb	r2, [r1, #2]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008578:	69a1      	ldr	r1, [r4, #24]
 800857a:	441e      	add	r6, r3
 800857c:	eba8 0803 	sub.w	r8, r8, r3
 8008580:	4419      	add	r1, r3
 8008582:	e7ba      	b.n	80084fa <f_read+0xf2>
 8008584:	61a1      	str	r1, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 8008586:	e779      	b.n	800847c <f_read+0x74>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008588:	bb61      	cbnz	r1, 80085e4 <f_read+0x1dc>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800858a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800858c:	2801      	cmp	r0, #1
 800858e:	d909      	bls.n	80085a4 <f_read+0x19c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d04a      	beq.n	800862a <f_read+0x222>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008594:	f8da 3018 	ldr.w	r3, [sl, #24]
				fp->clust = clst;				/* Update current cluster */
 8008598:	61e0      	str	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800859a:	3b02      	subs	r3, #2
	clst -= 2;
 800859c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800859e:	4298      	cmp	r0, r3
 80085a0:	f4ff af7f 	bcc.w	80084a2 <f_read+0x9a>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80085a4:	f04f 0902 	mov.w	r9, #2
}
 80085a8:	4648      	mov	r0, r9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80085aa:	f884 9015 	strb.w	r9, [r4, #21]
}
 80085ae:	b005      	add	sp, #20
 80085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80085b4:	6a22      	ldr	r2, [r4, #32]
 80085b6:	42aa      	cmp	r2, r5
 80085b8:	d00d      	beq.n	80085d6 <f_read+0x1ce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80085ba:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	db2c      	blt.n	800861c <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80085c2:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80085c6:	2301      	movs	r3, #1
 80085c8:	462a      	mov	r2, r5
 80085ca:	4659      	mov	r1, fp
 80085cc:	f7fe fad4 	bl	8006b78 <disk_read>
 80085d0:	bb58      	cbnz	r0, 800862a <f_read+0x222>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085d2:	f8ba 000c 	ldrh.w	r0, [sl, #12]
 80085d6:	69a1      	ldr	r1, [r4, #24]
			fp->sect = sect;
 80085d8:	6225      	str	r5, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085da:	fbb1 f5f0 	udiv	r5, r1, r0
 80085de:	fb00 1515 	mls	r5, r0, r5, r1
 80085e2:	e799      	b.n	8008518 <f_read+0x110>
					if (fp->cltbl) {
 80085e4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80085e6:	b3a5      	cbz	r5, 8008652 <f_read+0x24a>
	FATFS *fs = fp->obj.fs;
 80085e8:	f8d4 c000 	ldr.w	ip, [r4]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80085ec:	6868      	ldr	r0, [r5, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80085ee:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 80085f2:	fbb1 f3f3 	udiv	r3, r1, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80085f6:	3504      	adds	r5, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80085f8:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 80085fc:	fbb3 f3f1 	udiv	r3, r3, r1
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008600:	2800      	cmp	r0, #0
 8008602:	d0cf      	beq.n	80085a4 <f_read+0x19c>
 8008604:	4629      	mov	r1, r5
 8008606:	e004      	b.n	8008612 <f_read+0x20a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008608:	1a1b      	subs	r3, r3, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800860a:	f851 0f08 	ldr.w	r0, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800860e:	2800      	cmp	r0, #0
 8008610:	d0c8      	beq.n	80085a4 <f_read+0x19c>
		if (cl < ncl) break;	/* In this fragment? */
 8008612:	4283      	cmp	r3, r0
 8008614:	d2f8      	bcs.n	8008608 <f_read+0x200>
	return cl + *tbl;	/* Return the cluster number */
 8008616:	6848      	ldr	r0, [r1, #4]
 8008618:	4418      	add	r0, r3
 800861a:	e7b7      	b.n	800858c <f_read+0x184>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800861c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8008620:	2301      	movs	r3, #1
 8008622:	4659      	mov	r1, fp
 8008624:	f7fe fab6 	bl	8006b94 <disk_write>
 8008628:	b1d0      	cbz	r0, 8008660 <f_read+0x258>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800862a:	f8dd 9000 	ldr.w	r9, [sp]
 800862e:	2301      	movs	r3, #1
}
 8008630:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008632:	7563      	strb	r3, [r4, #21]
}
 8008634:	b005      	add	sp, #20
 8008636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800863a:	f04f 0907 	mov.w	r9, #7
 800863e:	e6f7      	b.n	8008430 <f_read+0x28>
 8008640:	1e72      	subs	r2, r6, #1
 8008642:	18e8      	adds	r0, r5, r3
			*d++ = *s++;
 8008644:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008648:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 800864c:	4285      	cmp	r5, r0
 800864e:	d1f9      	bne.n	8008644 <f_read+0x23c>
 8008650:	e792      	b.n	8008578 <f_read+0x170>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008652:	69e1      	ldr	r1, [r4, #28]
 8008654:	6820      	ldr	r0, [r4, #0]
 8008656:	9202      	str	r2, [sp, #8]
 8008658:	f7fe fdd8 	bl	800720c <get_fat.isra.0>
 800865c:	9a02      	ldr	r2, [sp, #8]
 800865e:	e795      	b.n	800858c <f_read+0x184>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008660:	7d23      	ldrb	r3, [r4, #20]
 8008662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008666:	7523      	strb	r3, [r4, #20]
 8008668:	e7ab      	b.n	80085c2 <f_read+0x1ba>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800866a:	6a22      	ldr	r2, [r4, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800866c:	f8ba 000c 	ldrh.w	r0, [sl, #12]
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008670:	1b55      	subs	r5, r2, r5
 8008672:	429d      	cmp	r5, r3
 8008674:	f4bf af3a 	bcs.w	80084ec <f_read+0xe4>
	if (cnt) {
 8008678:	2800      	cmp	r0, #0
 800867a:	f43f af37 	beq.w	80084ec <f_read+0xe4>
 800867e:	9a01      	ldr	r2, [sp, #4]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008680:	fb00 6105 	mla	r1, r0, r5, r6
 8008684:	1a8a      	subs	r2, r1, r2
 8008686:	1e45      	subs	r5, r0, #1
 8008688:	2a02      	cmp	r2, #2
 800868a:	9102      	str	r1, [sp, #8]
 800868c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8008690:	9503      	str	r5, [sp, #12]
 8008692:	d928      	bls.n	80086e6 <f_read+0x2de>
 8008694:	2d07      	cmp	r5, #7
 8008696:	d926      	bls.n	80086e6 <f_read+0x2de>
 8008698:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 800869c:	460a      	mov	r2, r1
 800869e:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80086a2:	4671      	mov	r1, lr
			*d++ = *s++;
 80086a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80086a8:	f842 5b04 	str.w	r5, [r2], #4
		} while (--cnt);
 80086ac:	4562      	cmp	r2, ip
 80086ae:	d1f9      	bne.n	80086a4 <f_read+0x29c>
 80086b0:	f020 0203 	bic.w	r2, r0, #3
 80086b4:	9902      	ldr	r1, [sp, #8]
 80086b6:	4290      	cmp	r0, r2
 80086b8:	eb01 0c02 	add.w	ip, r1, r2
 80086bc:	eb0e 0502 	add.w	r5, lr, r2
 80086c0:	f43f af12 	beq.w	80084e8 <f_read+0xe0>
			*d++ = *s++;
 80086c4:	f81e 0002 	ldrb.w	r0, [lr, r2]
 80086c8:	5488      	strb	r0, [r1, r2]
		} while (--cnt);
 80086ca:	9903      	ldr	r1, [sp, #12]
 80086cc:	1a8a      	subs	r2, r1, r2
 80086ce:	f43f af0b 	beq.w	80084e8 <f_read+0xe0>
			*d++ = *s++;
 80086d2:	7868      	ldrb	r0, [r5, #1]
 80086d4:	f88c 0001 	strb.w	r0, [ip, #1]
		} while (--cnt);
 80086d8:	2a01      	cmp	r2, #1
 80086da:	f43f af05 	beq.w	80084e8 <f_read+0xe0>
			*d++ = *s++;
 80086de:	78aa      	ldrb	r2, [r5, #2]
 80086e0:	f88c 2002 	strb.w	r2, [ip, #2]
		} while (--cnt);
 80086e4:	e700      	b.n	80084e8 <f_read+0xe0>
 80086e6:	9a02      	ldr	r2, [sp, #8]
 80086e8:	4410      	add	r0, r2
			*d++ = *s++;
 80086ea:	f81e 1b01 	ldrb.w	r1, [lr], #1
 80086ee:	f802 1b01 	strb.w	r1, [r2], #1
		} while (--cnt);
 80086f2:	4290      	cmp	r0, r2
 80086f4:	d1f9      	bne.n	80086ea <f_read+0x2e2>
 80086f6:	e6f7      	b.n	80084e8 <f_read+0xe0>

080086f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80086fe:	2300      	movs	r3, #0
{
 8008700:	b083      	sub	sp, #12
	*bw = 0;	/* Clear write byte counter */
 8008702:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008704:	b150      	cbz	r0, 800871c <f_write+0x24>
 8008706:	6803      	ldr	r3, [r0, #0]
 8008708:	4604      	mov	r4, r0
 800870a:	b13b      	cbz	r3, 800871c <f_write+0x24>
 800870c:	4616      	mov	r6, r2
 800870e:	781a      	ldrb	r2, [r3, #0]
 8008710:	b122      	cbz	r2, 800871c <f_write+0x24>
 8008712:	88da      	ldrh	r2, [r3, #6]
 8008714:	460d      	mov	r5, r1
 8008716:	8881      	ldrh	r1, [r0, #4]
 8008718:	4291      	cmp	r1, r2
 800871a:	d005      	beq.n	8008728 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800871c:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8008720:	4640      	mov	r0, r8
 8008722:	b003      	add	sp, #12
 8008724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008728:	7858      	ldrb	r0, [r3, #1]
 800872a:	f7fe fa0b 	bl	8006b44 <disk_status>
 800872e:	07c1      	lsls	r1, r0, #31
 8008730:	d4f4      	bmi.n	800871c <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008732:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008736:	f1b8 0f00 	cmp.w	r8, #0
 800873a:	d1f1      	bne.n	8008720 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800873c:	7d23      	ldrb	r3, [r4, #20]
 800873e:	079a      	lsls	r2, r3, #30
 8008740:	f140 8138 	bpl.w	80089b4 <f_write+0x2bc>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008744:	69a1      	ldr	r1, [r4, #24]
 8008746:	42f1      	cmn	r1, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008748:	bf28      	it	cs
 800874a:	43ce      	mvncs	r6, r1
	for ( ;  btw;							/* Repeat until all data written */
 800874c:	2e00      	cmp	r6, #0
 800874e:	f000 80a8 	beq.w	80088a2 <f_write+0x1aa>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008752:	46a3      	mov	fp, r4
 8008754:	f85b 9b30 	ldr.w	r9, [fp], #48
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008758:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800875c:	fbb1 f0f3 	udiv	r0, r1, r3
 8008760:	fb03 1210 	mls	r2, r3, r0, r1
 8008764:	2a00      	cmp	r2, #0
 8008766:	f040 80ad 	bne.w	80088c4 <f_write+0x1cc>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800876a:	f8b9 a00a 	ldrh.w	sl, [r9, #10]
 800876e:	f10a 3aff 	add.w	sl, sl, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 8008772:	ea1a 0a00 	ands.w	sl, sl, r0
 8008776:	d110      	bne.n	800879a <f_write+0xa2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008778:	2900      	cmp	r1, #0
 800877a:	f040 80e6 	bne.w	800894a <f_write+0x252>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800877e:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8008780:	2800      	cmp	r0, #0
 8008782:	f000 812b 	beq.w	80089dc <f_write+0x2e4>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008786:	2801      	cmp	r0, #1
 8008788:	f000 80d7 	beq.w	800893a <f_write+0x242>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	f000 8109 	beq.w	80089a4 <f_write+0x2ac>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008792:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8008794:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008796:	b903      	cbnz	r3, 800879a <f_write+0xa2>
 8008798:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800879a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f2c0 80f3 	blt.w	800898a <f_write+0x292>
	clst -= 2;
 80087a4:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087a6:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 80087aa:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087ac:	3b02      	subs	r3, #2
 80087ae:	429a      	cmp	r2, r3
 80087b0:	f080 80c3 	bcs.w	800893a <f_write+0x242>
	return clst * fs->csize + fs->database;
 80087b4:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 80087b8:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80087bc:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	f000 80ba 	beq.w	800893a <f_write+0x242>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80087c6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80087ca:	42b3      	cmp	r3, r6
			sect += csect;
 80087cc:	4452      	add	r2, sl
			if (cc) {						/* Write maximum contiguous sectors directly */
 80087ce:	d86c      	bhi.n	80088aa <f_write+0x1b2>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80087d0:	fbb6 f3f3 	udiv	r3, r6, r3
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087d4:	eb0a 0003 	add.w	r0, sl, r3
 80087d8:	4288      	cmp	r0, r1
					cc = fs->csize - csect;
 80087da:	bf88      	it	hi
 80087dc:	eba1 030a 	subhi.w	r3, r1, sl
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087e0:	f899 0001 	ldrb.w	r0, [r9, #1]
 80087e4:	4629      	mov	r1, r5
 80087e6:	e9cd 2300 	strd	r2, r3, [sp]
 80087ea:	f7fe f9d3 	bl	8006b94 <disk_write>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f040 80d8 	bne.w	80089a4 <f_write+0x2ac>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80087f4:	6a21      	ldr	r1, [r4, #32]
 80087f6:	9a00      	ldr	r2, [sp, #0]
 80087f8:	9b01      	ldr	r3, [sp, #4]
 80087fa:	1a8a      	subs	r2, r1, r2
 80087fc:	429a      	cmp	r2, r3
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80087fe:	f8b9 100c 	ldrh.w	r1, [r9, #12]
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008802:	d23b      	bcs.n	800887c <f_write+0x184>
	if (cnt) {
 8008804:	b3b1      	cbz	r1, 8008874 <f_write+0x17c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008806:	fb01 f202 	mul.w	r2, r1, r2
 800880a:	1c50      	adds	r0, r2, #1
 800880c:	4428      	add	r0, r5
 800880e:	ebab 0c00 	sub.w	ip, fp, r0
 8008812:	f1bc 0f02 	cmp.w	ip, #2
 8008816:	f101 30ff 	add.w	r0, r1, #4294967295
 800881a:	442a      	add	r2, r5
 800881c:	9000      	str	r0, [sp, #0]
 800881e:	f240 80f3 	bls.w	8008a08 <f_write+0x310>
 8008822:	2807      	cmp	r0, #7
 8008824:	f240 80f0 	bls.w	8008a08 <f_write+0x310>
 8008828:	ea4f 0a91 	mov.w	sl, r1, lsr #2
 800882c:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
 8008830:	4658      	mov	r0, fp
 8008832:	4694      	mov	ip, r2
			*d++ = *s++;
 8008834:	f85c eb04 	ldr.w	lr, [ip], #4
 8008838:	f840 eb04 	str.w	lr, [r0], #4
		} while (--cnt);
 800883c:	4582      	cmp	sl, r0
 800883e:	d1f9      	bne.n	8008834 <f_write+0x13c>
 8008840:	f021 0003 	bic.w	r0, r1, #3
 8008844:	4281      	cmp	r1, r0
 8008846:	eb0b 0c00 	add.w	ip, fp, r0
 800884a:	eb02 0e00 	add.w	lr, r2, r0
 800884e:	d00f      	beq.n	8008870 <f_write+0x178>
			*d++ = *s++;
 8008850:	5c12      	ldrb	r2, [r2, r0]
 8008852:	f80b 2000 	strb.w	r2, [fp, r0]
		} while (--cnt);
 8008856:	9a00      	ldr	r2, [sp, #0]
 8008858:	1a10      	subs	r0, r2, r0
 800885a:	d009      	beq.n	8008870 <f_write+0x178>
			*d++ = *s++;
 800885c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8008860:	f88c 2001 	strb.w	r2, [ip, #1]
		} while (--cnt);
 8008864:	2801      	cmp	r0, #1
 8008866:	d003      	beq.n	8008870 <f_write+0x178>
			*d++ = *s++;
 8008868:	f89e 2002 	ldrb.w	r2, [lr, #2]
 800886c:	f88c 2002 	strb.w	r2, [ip, #2]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008870:	f8b9 100c 	ldrh.w	r1, [r9, #12]
					fp->flag &= (BYTE)~FA_DIRTY;
 8008874:	7d22      	ldrb	r2, [r4, #20]
 8008876:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800887a:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800887c:	fb01 f303 	mul.w	r3, r1, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008880:	69a1      	ldr	r1, [r4, #24]
 8008882:	18e8      	adds	r0, r5, r3
 8008884:	68e2      	ldr	r2, [r4, #12]
 8008886:	4419      	add	r1, r3
 8008888:	428a      	cmp	r2, r1
 800888a:	bf38      	it	cc
 800888c:	460a      	movcc	r2, r1
 800888e:	60e2      	str	r2, [r4, #12]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	61a1      	str	r1, [r4, #24]
 8008894:	441a      	add	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 8008896:	1af6      	subs	r6, r6, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008898:	4605      	mov	r5, r0
 800889a:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 800889c:	f47f af5c 	bne.w	8008758 <f_write+0x60>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80088a0:	7d23      	ldrb	r3, [r4, #20]
 80088a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a6:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80088a8:	e73a      	b.n	8008720 <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80088aa:	6a21      	ldr	r1, [r4, #32]
 80088ac:	4291      	cmp	r1, r2
				fp->fptr < fp->obj.objsize &&
 80088ae:	69a1      	ldr	r1, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80088b0:	d003      	beq.n	80088ba <f_write+0x1c2>
 80088b2:	68e0      	ldr	r0, [r4, #12]
 80088b4:	4281      	cmp	r1, r0
 80088b6:	f0c0 8099 	bcc.w	80089ec <f_write+0x2f4>
			fp->sect = sect;
 80088ba:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80088bc:	fbb1 f2f3 	udiv	r2, r1, r3
 80088c0:	fb03 1212 	mls	r2, r3, r2, r1
 80088c4:	1a9b      	subs	r3, r3, r2
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80088c6:	42b3      	cmp	r3, r6
 80088c8:	bf28      	it	cs
 80088ca:	4633      	movcs	r3, r6
	if (cnt) {
 80088cc:	b92b      	cbnz	r3, 80088da <f_write+0x1e2>
 80088ce:	4628      	mov	r0, r5
		fp->flag |= FA_DIRTY;
 80088d0:	7d22      	ldrb	r2, [r4, #20]
 80088d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088d6:	7522      	strb	r2, [r4, #20]
 80088d8:	e7d4      	b.n	8008884 <f_write+0x18c>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80088da:	eb0b 0102 	add.w	r1, fp, r2
 80088de:	1c6a      	adds	r2, r5, #1
 80088e0:	1a8a      	subs	r2, r1, r2
 80088e2:	2a02      	cmp	r2, #2
 80088e4:	f103 3aff 	add.w	sl, r3, #4294967295
 80088e8:	d967      	bls.n	80089ba <f_write+0x2c2>
 80088ea:	f1ba 0f07 	cmp.w	sl, #7
 80088ee:	d964      	bls.n	80089ba <f_write+0x2c2>
 80088f0:	f023 0e03 	bic.w	lr, r3, #3
 80088f4:	448e      	add	lr, r1
 80088f6:	460a      	mov	r2, r1
 80088f8:	4628      	mov	r0, r5
			*d++ = *s++;
 80088fa:	f850 cb04 	ldr.w	ip, [r0], #4
 80088fe:	f842 cb04 	str.w	ip, [r2], #4
		} while (--cnt);
 8008902:	4572      	cmp	r2, lr
 8008904:	d1f9      	bne.n	80088fa <f_write+0x202>
 8008906:	f023 0203 	bic.w	r2, r3, #3
 800890a:	4293      	cmp	r3, r2
 800890c:	eb01 0c02 	add.w	ip, r1, r2
 8008910:	eb05 0002 	add.w	r0, r5, r2
 8008914:	d00f      	beq.n	8008936 <f_write+0x23e>
			*d++ = *s++;
 8008916:	f815 e002 	ldrb.w	lr, [r5, r2]
 800891a:	f801 e002 	strb.w	lr, [r1, r2]
		} while (--cnt);
 800891e:	ebba 0202 	subs.w	r2, sl, r2
 8008922:	d007      	beq.n	8008934 <f_write+0x23c>
			*d++ = *s++;
 8008924:	7841      	ldrb	r1, [r0, #1]
 8008926:	f88c 1001 	strb.w	r1, [ip, #1]
		} while (--cnt);
 800892a:	2a01      	cmp	r2, #1
			*d++ = *s++;
 800892c:	bf1c      	itt	ne
 800892e:	7882      	ldrbne	r2, [r0, #2]
 8008930:	f88c 2002 	strbne.w	r2, [ip, #2]
		} while (--cnt);
 8008934:	18e8      	adds	r0, r5, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008936:	69a1      	ldr	r1, [r4, #24]
 8008938:	e7ca      	b.n	80088d0 <f_write+0x1d8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800893a:	f04f 0802 	mov.w	r8, #2
}
 800893e:	4640      	mov	r0, r8
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008940:	f884 8015 	strb.w	r8, [r4, #21]
}
 8008944:	b003      	add	sp, #12
 8008946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 800894a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800894c:	2800      	cmp	r0, #0
 800894e:	d03d      	beq.n	80089cc <f_write+0x2d4>
	FATFS *fs = fp->obj.fs;
 8008950:	f8d4 c000 	ldr.w	ip, [r4]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008954:	6842      	ldr	r2, [r0, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008956:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 800895a:	fbb1 f1f3 	udiv	r1, r1, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800895e:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008960:	f8bc 300a 	ldrh.w	r3, [ip, #10]
 8008964:	fbb1 f1f3 	udiv	r1, r1, r3
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008968:	2a00      	cmp	r2, #0
 800896a:	d099      	beq.n	80088a0 <f_write+0x1a8>
 800896c:	4603      	mov	r3, r0
 800896e:	e004      	b.n	800897a <f_write+0x282>
		cl -= ncl; tbl++;		/* Next fragment */
 8008970:	1a89      	subs	r1, r1, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008972:	f853 2f08 	ldr.w	r2, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008976:	2a00      	cmp	r2, #0
 8008978:	d092      	beq.n	80088a0 <f_write+0x1a8>
		if (cl < ncl) break;	/* In this fragment? */
 800897a:	4291      	cmp	r1, r2
 800897c:	d2f8      	bcs.n	8008970 <f_write+0x278>
	return cl + *tbl;	/* Return the cluster number */
 800897e:	6858      	ldr	r0, [r3, #4]
 8008980:	4408      	add	r0, r1
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008982:	2800      	cmp	r0, #0
 8008984:	f47f aeff 	bne.w	8008786 <f_write+0x8e>
 8008988:	e78a      	b.n	80088a0 <f_write+0x1a8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800898a:	6a22      	ldr	r2, [r4, #32]
 800898c:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008990:	2301      	movs	r3, #1
 8008992:	4659      	mov	r1, fp
 8008994:	f7fe f8fe 	bl	8006b94 <disk_write>
 8008998:	b920      	cbnz	r0, 80089a4 <f_write+0x2ac>
				fp->flag &= (BYTE)~FA_DIRTY;
 800899a:	7d23      	ldrb	r3, [r4, #20]
 800899c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a0:	7523      	strb	r3, [r4, #20]
 80089a2:	e6ff      	b.n	80087a4 <f_write+0xac>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089a4:	f04f 0801 	mov.w	r8, #1
}
 80089a8:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089aa:	f884 8015 	strb.w	r8, [r4, #21]
}
 80089ae:	b003      	add	sp, #12
 80089b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80089b4:	f04f 0807 	mov.w	r8, #7
 80089b8:	e6b2      	b.n	8008720 <f_write+0x28>
 80089ba:	1e4a      	subs	r2, r1, #1
 80089bc:	18e8      	adds	r0, r5, r3
			*d++ = *s++;
 80089be:	f815 1b01 	ldrb.w	r1, [r5], #1
 80089c2:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 80089c6:	42a8      	cmp	r0, r5
 80089c8:	d1f9      	bne.n	80089be <f_write+0x2c6>
 80089ca:	e7b4      	b.n	8008936 <f_write+0x23e>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80089cc:	69e1      	ldr	r1, [r4, #28]
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7fe fdb8 	bl	8007544 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089d4:	2800      	cmp	r0, #0
 80089d6:	f47f aed6 	bne.w	8008786 <f_write+0x8e>
 80089da:	e761      	b.n	80088a0 <f_write+0x1a8>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80089dc:	4651      	mov	r1, sl
 80089de:	4620      	mov	r0, r4
 80089e0:	f7fe fdb0 	bl	8007544 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089e4:	2800      	cmp	r0, #0
 80089e6:	f47f aece 	bne.w	8008786 <f_write+0x8e>
 80089ea:	e759      	b.n	80088a0 <f_write+0x1a8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80089ec:	f899 0001 	ldrb.w	r0, [r9, #1]
 80089f0:	9200      	str	r2, [sp, #0]
 80089f2:	2301      	movs	r3, #1
 80089f4:	4659      	mov	r1, fp
 80089f6:	f7fe f8bf 	bl	8006b78 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1d2      	bne.n	80089a4 <f_write+0x2ac>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80089fe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008a02:	69a1      	ldr	r1, [r4, #24]
 8008a04:	9a00      	ldr	r2, [sp, #0]
 8008a06:	e758      	b.n	80088ba <f_write+0x1c2>
 8008a08:	4411      	add	r1, r2
 8008a0a:	f104 002f 	add.w	r0, r4, #47	; 0x2f
			*d++ = *s++;
 8008a0e:	f812 cb01 	ldrb.w	ip, [r2], #1
 8008a12:	f800 cf01 	strb.w	ip, [r0, #1]!
		} while (--cnt);
 8008a16:	4291      	cmp	r1, r2
 8008a18:	d1f9      	bne.n	8008a0e <f_write+0x316>
 8008a1a:	e729      	b.n	8008870 <f_write+0x178>

08008a1c <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008a1c:	b158      	cbz	r0, 8008a36 <f_close+0x1a>
 8008a1e:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008a24:	b12b      	cbz	r3, 8008a32 <f_close+0x16>
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	b11a      	cbz	r2, 8008a32 <f_close+0x16>
 8008a2a:	8881      	ldrh	r1, [r0, #4]
 8008a2c:	88da      	ldrh	r2, [r3, #6]
 8008a2e:	4291      	cmp	r1, r2
 8008a30:	d003      	beq.n	8008a3a <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8008a32:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8008a36:	2009      	movs	r0, #9
}
 8008a38:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008a3a:	7858      	ldrb	r0, [r3, #1]
 8008a3c:	f7fe f882 	bl	8006b44 <disk_status>
 8008a40:	07c1      	lsls	r1, r0, #31
 8008a42:	d4f6      	bmi.n	8008a32 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008a44:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008a46:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008a48:	065a      	lsls	r2, r3, #25
 8008a4a:	d53c      	bpl.n	8008ac6 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008a4c:	061b      	lsls	r3, r3, #24
 8008a4e:	d45d      	bmi.n	8008b0c <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 8008a50:	f7fe f86c 	bl	8006b2c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8008a54:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008a58:	4299      	cmp	r1, r3
			tm = GET_FATTIME();				/* Modified time */
 8008a5a:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a5c:	d004      	beq.n	8008a68 <f_close+0x4c>
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f7fe f94c 	bl	8006cfc <move_window.part.0>
				if (res == FR_OK) {
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d1e5      	bne.n	8008a34 <f_close+0x18>
					dir = fp->dir_ptr;
 8008a68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008a6a:	7ad3      	ldrb	r3, [r2, #11]
 8008a6c:	f043 0320 	orr.w	r3, r3, #32
 8008a70:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008a72:	68a3      	ldr	r3, [r4, #8]
 8008a74:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a76:	7693      	strb	r3, [r2, #26]
 8008a78:	f3c3 2007 	ubfx	r0, r3, #8, #8
	*ptr++ = (BYTE)val;
 8008a7c:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8008a7e:	7809      	ldrb	r1, [r1, #0]
 8008a80:	2903      	cmp	r1, #3
 8008a82:	d103      	bne.n	8008a8c <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008a84:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008a86:	7513      	strb	r3, [r2, #20]
 8008a88:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8008a8a:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008a8c:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a8e:	7713      	strb	r3, [r2, #28]
 8008a90:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008a92:	7751      	strb	r1, [r2, #29]
 8008a94:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008a96:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val;
 8008a98:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a9a:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008a9c:	75d3      	strb	r3, [r2, #23]
 8008a9e:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008aa0:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 8008aa2:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8008aa4:	7596      	strb	r6, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8008aa6:	8253      	strh	r3, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8008aa8:	0e36      	lsrs	r6, r6, #24
					fs->wflag = 1;
 8008aaa:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8008aac:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 8008aae:	7656      	strb	r6, [r2, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008ab0:	4628      	mov	r0, r5
					fs->wflag = 1;
 8008ab2:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008ab4:	f7fe fcd6 	bl	8007464 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008ab8:	7d23      	ldrb	r3, [r4, #20]
 8008aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008abe:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d1b7      	bne.n	8008a34 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008ac4:	6825      	ldr	r5, [r4, #0]
 8008ac6:	2d00      	cmp	r5, #0
 8008ac8:	d0b3      	beq.n	8008a32 <f_close+0x16>
 8008aca:	782b      	ldrb	r3, [r5, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d0b0      	beq.n	8008a32 <f_close+0x16>
 8008ad0:	88a2      	ldrh	r2, [r4, #4]
 8008ad2:	88eb      	ldrh	r3, [r5, #6]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d1ac      	bne.n	8008a32 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008ad8:	7868      	ldrb	r0, [r5, #1]
 8008ada:	f7fe f833 	bl	8006b44 <disk_status>
 8008ade:	f010 0001 	ands.w	r0, r0, #1
 8008ae2:	d1a6      	bne.n	8008a32 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008ae4:	6923      	ldr	r3, [r4, #16]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d81c      	bhi.n	8008b26 <f_close+0x10a>
		n = Files[i].ctr;
 8008aec:	4912      	ldr	r1, [pc, #72]	; (8008b38 <f_close+0x11c>)
 8008aee:	011d      	lsls	r5, r3, #4
 8008af0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8008af4:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008af6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008afa:	d016      	beq.n	8008b2a <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8008afc:	b1b2      	cbz	r2, 8008b2c <f_close+0x110>
 8008afe:	3a01      	subs	r2, #1
 8008b00:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8008b02:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b04:	b192      	cbz	r2, 8008b2c <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 8008b06:	2300      	movs	r3, #0
 8008b08:	6023      	str	r3, [r4, #0]
}
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008b0c:	6a22      	ldr	r2, [r4, #32]
 8008b0e:	7868      	ldrb	r0, [r5, #1]
 8008b10:	2301      	movs	r3, #1
 8008b12:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008b16:	f7fe f83d 	bl	8006b94 <disk_write>
 8008b1a:	b950      	cbnz	r0, 8008b32 <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b1c:	7d23      	ldrb	r3, [r4, #20]
 8008b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b22:	7523      	strb	r3, [r4, #20]
 8008b24:	e794      	b.n	8008a50 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008b26:	2002      	movs	r0, #2
}
 8008b28:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8008b2a:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8008b30:	e7e9      	b.n	8008b06 <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008b32:	2001      	movs	r0, #1
}
 8008b34:	bd70      	pop	{r4, r5, r6, pc}
 8008b36:	bf00      	nop
 8008b38:	20003078 	.word	0x20003078

08008b3c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b40:	b085      	sub	sp, #20
 8008b42:	460f      	mov	r7, r1
 8008b44:	9001      	str	r0, [sp, #4]
 8008b46:	4615      	mov	r5, r2
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008b48:	a903      	add	r1, sp, #12
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	a801      	add	r0, sp, #4
 8008b4e:	f7fe f90f 	bl	8006d70 <find_volume>
	if (res == FR_OK) {
 8008b52:	4606      	mov	r6, r0
 8008b54:	b938      	cbnz	r0, 8008b66 <f_getfree+0x2a>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008b56:	9c03      	ldr	r4, [sp, #12]
 8008b58:	602c      	str	r4, [r5, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008b5a:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
 8008b5e:	1eaa      	subs	r2, r5, #2
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d804      	bhi.n	8008b6e <f_getfree+0x32>
			*nclst = fs->free_clst;
 8008b64:	603b      	str	r3, [r7, #0]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
		}
	}

	LEAVE_FF(fs, res);
}
 8008b66:	4630      	mov	r0, r6
 8008b68:	b005      	add	sp, #20
 8008b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008b6e:	7820      	ldrb	r0, [r4, #0]
 8008b70:	2801      	cmp	r0, #1
 8008b72:	d02d      	beq.n	8008bd0 <f_getfree+0x94>
					clst = fs->n_fatent; sect = fs->fatbase;
 8008b74:	6a61      	ldr	r1, [r4, #36]	; 0x24
					i = 0; p = 0;
 8008b76:	4632      	mov	r2, r6
 8008b78:	4633      	mov	r3, r6
			nfree = 0;
 8008b7a:	46b0      	mov	r8, r6
						if (i == 0) {
 8008b7c:	b97b      	cbnz	r3, 8008b9e <f_getfree+0x62>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008b80:	4299      	cmp	r1, r3
							res = move_window(fs, sect++);
 8008b82:	f101 0901 	add.w	r9, r1, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b86:	d006      	beq.n	8008b96 <f_getfree+0x5a>
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7fe f8b7 	bl	8006cfc <move_window.part.0>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008b8e:	9c03      	ldr	r4, [sp, #12]
							if (res != FR_OK) break;
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d13e      	bne.n	8008c12 <f_getfree+0xd6>
						if (fs->fs_type == FS_FAT16) {
 8008b94:	7820      	ldrb	r0, [r4, #0]
							i = SS(fs);
 8008b96:	89a3      	ldrh	r3, [r4, #12]
							res = move_window(fs, sect++);
 8008b98:	4649      	mov	r1, r9
							p = fs->win;
 8008b9a:	f104 0234 	add.w	r2, r4, #52	; 0x34
						if (fs->fs_type == FS_FAT16) {
 8008b9e:	2802      	cmp	r0, #2
 8008ba0:	d02d      	beq.n	8008bfe <f_getfree+0xc2>
	rv = rv << 8 | ptr[0];
 8008ba2:	f8d2 c000 	ldr.w	ip, [r2]
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008ba6:	f03c 4c70 	bics.w	ip, ip, #4026531840	; 0xf0000000
 8008baa:	bf08      	it	eq
 8008bac:	f108 0801 	addeq.w	r8, r8, #1
							p += 4; i -= 4;
 8008bb0:	3204      	adds	r2, #4
 8008bb2:	3b04      	subs	r3, #4
					} while (--clst);
 8008bb4:	3d01      	subs	r5, #1
 8008bb6:	d1e1      	bne.n	8008b7c <f_getfree+0x40>
			*nclst = nfree;			/* Return the free clusters */
 8008bb8:	f8c7 8000 	str.w	r8, [r7]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008bbc:	7923      	ldrb	r3, [r4, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008bbe:	f8c4 8014 	str.w	r8, [r4, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008bc2:	f043 0301 	orr.w	r3, r3, #1
}
 8008bc6:	4630      	mov	r0, r6
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008bc8:	7123      	strb	r3, [r4, #4]
}
 8008bca:	b005      	add	sp, #20
 8008bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				clst = 2; obj.fs = fs;
 8008bd0:	2502      	movs	r5, #2
			nfree = 0;
 8008bd2:	46b0      	mov	r8, r6
 8008bd4:	e008      	b.n	8008be8 <f_getfree+0xac>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008bd6:	2801      	cmp	r0, #1
 8008bd8:	d01d      	beq.n	8008c16 <f_getfree+0xda>
					if (stat == 0) nfree++;
 8008bda:	b908      	cbnz	r0, 8008be0 <f_getfree+0xa4>
 8008bdc:	f108 0801 	add.w	r8, r8, #1
				} while (++clst < fs->n_fatent);
 8008be0:	9b03      	ldr	r3, [sp, #12]
 8008be2:	699a      	ldr	r2, [r3, #24]
 8008be4:	42aa      	cmp	r2, r5
 8008be6:	d919      	bls.n	8008c1c <f_getfree+0xe0>
					stat = get_fat(&obj, clst);
 8008be8:	4629      	mov	r1, r5
 8008bea:	4620      	mov	r0, r4
 8008bec:	f7fe fb0e 	bl	800720c <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008bf0:	1c43      	adds	r3, r0, #1
				} while (++clst < fs->n_fatent);
 8008bf2:	f105 0501 	add.w	r5, r5, #1
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008bf6:	d1ee      	bne.n	8008bd6 <f_getfree+0x9a>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008bf8:	9c03      	ldr	r4, [sp, #12]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008bfa:	2601      	movs	r6, #1
 8008bfc:	e7dc      	b.n	8008bb8 <f_getfree+0x7c>
							if (ld_word(p) == 0) nfree++;
 8008bfe:	f8b2 c000 	ldrh.w	ip, [r2]
 8008c02:	f1bc 0f00 	cmp.w	ip, #0
 8008c06:	d101      	bne.n	8008c0c <f_getfree+0xd0>
 8008c08:	f108 0801 	add.w	r8, r8, #1
							p += 2; i -= 2;
 8008c0c:	3202      	adds	r2, #2
 8008c0e:	3b02      	subs	r3, #2
 8008c10:	e7d0      	b.n	8008bb4 <f_getfree+0x78>
 8008c12:	4606      	mov	r6, r0
 8008c14:	e7d0      	b.n	8008bb8 <f_getfree+0x7c>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008c16:	9c03      	ldr	r4, [sp, #12]
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008c18:	2602      	movs	r6, #2
 8008c1a:	e7cd      	b.n	8008bb8 <f_getfree+0x7c>
 8008c1c:	461c      	mov	r4, r3
 8008c1e:	e7cb      	b.n	8008bb8 <f_getfree+0x7c>

08008c20 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008c20:	b530      	push	{r4, r5, lr}
 8008c22:	b09d      	sub	sp, #116	; 0x74
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008c24:	2202      	movs	r2, #2
{
 8008c26:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8008c28:	a903      	add	r1, sp, #12
 8008c2a:	a801      	add	r0, sp, #4
 8008c2c:	f7fe f8a0 	bl	8006d70 <find_volume>
	dj.obj.fs = fs;
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	9304      	str	r3, [sp, #16]
	if (res == FR_OK) {
 8008c34:	b108      	cbz	r0, 8008c3a <f_unlink+0x1a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 8008c36:	b01d      	add	sp, #116	; 0x74
 8008c38:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);		/* Follow the file path */
 8008c3a:	9901      	ldr	r1, [sp, #4]
 8008c3c:	a804      	add	r0, sp, #16
 8008c3e:	f7fe fe13 	bl	8007868 <follow_path>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d1f7      	bne.n	8008c36 <f_unlink+0x16>
		if (Files[i].fs) {	/* Existing entry */
 8008c46:	4b2e      	ldr	r3, [pc, #184]	; (8008d00 <f_unlink+0xe0>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c48:	9c04      	ldr	r4, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 8008c4a:	681a      	ldr	r2, [r3, #0]
				Files[i].clu == dp->obj.sclust &&
 8008c4c:	9906      	ldr	r1, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 8008c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 8008c50:	b10a      	cbz	r2, 8008c56 <f_unlink+0x36>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c52:	42a2      	cmp	r2, r4
 8008c54:	d02d      	beq.n	8008cb2 <f_unlink+0x92>
		if (Files[i].fs) {	/* Existing entry */
 8008c56:	691a      	ldr	r2, [r3, #16]
 8008c58:	b10a      	cbz	r2, 8008c5e <f_unlink+0x3e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c5a:	42a2      	cmp	r2, r4
 8008c5c:	d031      	beq.n	8008cc2 <f_unlink+0xa2>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008c5e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	db23      	blt.n	8008cae <f_unlink+0x8e>
				if (dj.obj.attr & AM_RDO) {
 8008c66:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008c6a:	07da      	lsls	r2, r3, #31
 8008c6c:	d41d      	bmi.n	8008caa <f_unlink+0x8a>
					dclst = ld_clust(fs, dj.dir);
 8008c6e:	9a03      	ldr	r2, [sp, #12]
 8008c70:	990c      	ldr	r1, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8008c72:	7810      	ldrb	r0, [r2, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 8008c74:	8b4d      	ldrh	r5, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8008c76:	2803      	cmp	r0, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008c78:	bf04      	itt	eq
 8008c7a:	8a89      	ldrheq	r1, [r1, #20]
 8008c7c:	ea45 4501 	orreq.w	r5, r5, r1, lsl #16
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008c80:	06db      	lsls	r3, r3, #27
 8008c82:	d425      	bmi.n	8008cd0 <f_unlink+0xb0>
	res = move_window(fs, dp->sect);
 8008c84:	990b      	ldr	r1, [sp, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c88:	4299      	cmp	r1, r3
 8008c8a:	d004      	beq.n	8008c96 <f_unlink+0x76>
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f7fe f835 	bl	8006cfc <move_window.part.0>
	if (res == FR_OK) {
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d1cf      	bne.n	8008c36 <f_unlink+0x16>
		dp->dir[DIR_Name] = DDEM;
 8008c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c98:	22e5      	movs	r2, #229	; 0xe5
 8008c9a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	70e3      	strb	r3, [r4, #3]
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008ca0:	bb35      	cbnz	r5, 8008cf0 <f_unlink+0xd0>
				if (res == FR_OK) res = sync_fs(fs);
 8008ca2:	9803      	ldr	r0, [sp, #12]
 8008ca4:	f7fe fbde 	bl	8007464 <sync_fs>
 8008ca8:	e7c5      	b.n	8008c36 <f_unlink+0x16>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008caa:	2007      	movs	r0, #7
 8008cac:	e7c3      	b.n	8008c36 <f_unlink+0x16>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008cae:	2006      	movs	r0, #6
	LEAVE_FF(fs, res);
 8008cb0:	e7c1      	b.n	8008c36 <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	428a      	cmp	r2, r1
 8008cb6:	d1ce      	bne.n	8008c56 <f_unlink+0x36>
				Files[i].clu == dp->obj.sclust &&
 8008cb8:	689a      	ldr	r2, [r3, #8]
 8008cba:	4282      	cmp	r2, r0
 8008cbc:	d1cb      	bne.n	8008c56 <f_unlink+0x36>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008cbe:	2010      	movs	r0, #16
 8008cc0:	e7b9      	b.n	8008c36 <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008cc2:	695a      	ldr	r2, [r3, #20]
 8008cc4:	428a      	cmp	r2, r1
 8008cc6:	d1ca      	bne.n	8008c5e <f_unlink+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	4283      	cmp	r3, r0
 8008ccc:	d1c7      	bne.n	8008c5e <f_unlink+0x3e>
 8008cce:	e7f6      	b.n	8008cbe <f_unlink+0x9e>
						res = dir_sdi(&sdj, 0);
 8008cd0:	a810      	add	r0, sp, #64	; 0x40
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008cd2:	9210      	str	r2, [sp, #64]	; 0x40
						sdj.obj.sclust = dclst;
 8008cd4:	9512      	str	r5, [sp, #72]	; 0x48
						res = dir_sdi(&sdj, 0);
 8008cd6:	f7fe fd1b 	bl	8007710 <dir_sdi.constprop.0>
						if (res == FR_OK) {
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d1ab      	bne.n	8008c36 <f_unlink+0x16>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008cde:	a810      	add	r0, sp, #64	; 0x40
 8008ce0:	f7fe fb0e 	bl	8007300 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d0e0      	beq.n	8008caa <f_unlink+0x8a>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008ce8:	2804      	cmp	r0, #4
 8008cea:	d1a4      	bne.n	8008c36 <f_unlink+0x16>
	FATFS *fs = dp->obj.fs;
 8008cec:	9c04      	ldr	r4, [sp, #16]
 8008cee:	e7c9      	b.n	8008c84 <f_unlink+0x64>
					res = remove_chain(&dj.obj, dclst, 0);
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	a804      	add	r0, sp, #16
 8008cf6:	f7fe ff57 	bl	8007ba8 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d19b      	bne.n	8008c36 <f_unlink+0x16>
 8008cfe:	e7d0      	b.n	8008ca2 <f_unlink+0x82>
 8008d00:	20003078 	.word	0x20003078

08008d04 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d08:	4680      	mov	r8, r0
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	4616      	mov	r6, r2
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008d0e:	1e4f      	subs	r7, r1, #1
	TCHAR c, *p = buff;
 8008d10:	4605      	mov	r5, r0
	int n = 0;
 8008d12:	2400      	movs	r4, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008d14:	e009      	b.n	8008d2a <f_gets+0x26>
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
		if (rc != 1) break;
		c = s[0];
 8008d16:	f89d 3000 	ldrb.w	r3, [sp]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008d1a:	2b0d      	cmp	r3, #13
 8008d1c:	d007      	beq.n	8008d2e <f_gets+0x2a>
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
 8008d1e:	2b0a      	cmp	r3, #10
		*p++ = c;
 8008d20:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 8008d24:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 8008d28:	d013      	beq.n	8008d52 <f_gets+0x4e>
 8008d2a:	42bc      	cmp	r4, r7
 8008d2c:	da08      	bge.n	8008d40 <f_gets+0x3c>
		f_read(fp, s, 1, &rc);
 8008d2e:	ab01      	add	r3, sp, #4
 8008d30:	2201      	movs	r2, #1
 8008d32:	4669      	mov	r1, sp
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7ff fb67 	bl	8008408 <f_read>
		if (rc != 1) break;
 8008d3a:	9b01      	ldr	r3, [sp, #4]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d0ea      	beq.n	8008d16 <f_gets+0x12>
	}
	*p = 0;
 8008d40:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008d42:	429c      	cmp	r4, r3
 8008d44:	bf08      	it	eq
 8008d46:	4698      	moveq	r8, r3
}
 8008d48:	4640      	mov	r0, r8
	*p = 0;
 8008d4a:	702b      	strb	r3, [r5, #0]
}
 8008d4c:	b002      	add	sp, #8
 8008d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*p = 0;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4640      	mov	r0, r8
	*p = 0;
 8008d56:	702b      	strb	r3, [r5, #0]
}
 8008d58:	b002      	add	sp, #8
 8008d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d5e:	bf00      	nop

08008d60 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	b095      	sub	sp, #84	; 0x54
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008d64:	7804      	ldrb	r4, [r0, #0]
	pb->nchr = pb->idx = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8008d6c:	9303      	str	r3, [sp, #12]
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008d6e:	2c00      	cmp	r4, #0
 8008d70:	d054      	beq.n	8008e1c <f_puts+0xbc>
 8008d72:	4606      	mov	r6, r0
	pb->buf[i++] = (BYTE)c;
 8008d74:	270d      	movs	r7, #13
 8008d76:	e007      	b.n	8008d88 <f_puts+0x28>
	pb->nchr++;
 8008d78:	9b03      	ldr	r3, [sp, #12]
	pb->idx = i;
 8008d7a:	9502      	str	r5, [sp, #8]
	pb->nchr++;
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	9303      	str	r3, [sp, #12]
 8008d80:	462b      	mov	r3, r5
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008d82:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8008d86:	b34c      	cbz	r4, 8008ddc <f_puts+0x7c>
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008d88:	2c0a      	cmp	r4, #10
 8008d8a:	d016      	beq.n	8008dba <f_puts+0x5a>
	pb->buf[i++] = (BYTE)c;
 8008d8c:	f103 0250 	add.w	r2, r3, #80	; 0x50
	if (i < 0) return;
 8008d90:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8008d92:	446a      	add	r2, sp
 8008d94:	f103 0501 	add.w	r5, r3, #1
	if (i < 0) return;
 8008d98:	dbf3      	blt.n	8008d82 <f_puts+0x22>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008d9a:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8008d9c:	f802 4c40 	strb.w	r4, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008da0:	ddea      	ble.n	8008d78 <f_puts+0x18>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008da2:	462a      	mov	r2, r5
 8008da4:	466b      	mov	r3, sp
 8008da6:	9801      	ldr	r0, [sp, #4]
 8008da8:	a904      	add	r1, sp, #16
 8008daa:	f7ff fca5 	bl	80086f8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008dae:	9b00      	ldr	r3, [sp, #0]
 8008db0:	1b5d      	subs	r5, r3, r5
 8008db2:	bf18      	it	ne
 8008db4:	f04f 35ff 	movne.w	r5, #4294967295
 8008db8:	e7de      	b.n	8008d78 <f_puts+0x18>
	pb->buf[i++] = (BYTE)c;
 8008dba:	f103 0250 	add.w	r2, r3, #80	; 0x50
	if (i < 0) return;
 8008dbe:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8008dc0:	446a      	add	r2, sp
 8008dc2:	f103 0501 	add.w	r5, r3, #1
	if (i < 0) return;
 8008dc6:	dbdc      	blt.n	8008d82 <f_puts+0x22>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008dc8:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8008dca:	f802 7c40 	strb.w	r7, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008dce:	dc15      	bgt.n	8008dfc <f_puts+0x9c>
	pb->nchr++;
 8008dd0:	9b03      	ldr	r3, [sp, #12]
	pb->idx = i;
 8008dd2:	9502      	str	r5, [sp, #8]
	pb->nchr++;
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	9303      	str	r3, [sp, #12]
 8008dd8:	462b      	mov	r3, r5
 8008dda:	e7d7      	b.n	8008d8c <f_puts+0x2c>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	db19      	blt.n	8008e14 <f_puts+0xb4>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008de0:	9801      	ldr	r0, [sp, #4]
 8008de2:	461a      	mov	r2, r3
 8008de4:	466b      	mov	r3, sp
 8008de6:	a904      	add	r1, sp, #16
 8008de8:	f7ff fc86 	bl	80086f8 <f_write>
 8008dec:	b990      	cbnz	r0, 8008e14 <f_puts+0xb4>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008dee:	9a02      	ldr	r2, [sp, #8]
 8008df0:	9b00      	ldr	r3, [sp, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d10e      	bne.n	8008e14 <f_puts+0xb4>
 8008df6:	9803      	ldr	r0, [sp, #12]
	return putc_flush(&pb);
}
 8008df8:	b015      	add	sp, #84	; 0x54
 8008dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008dfc:	466b      	mov	r3, sp
 8008dfe:	462a      	mov	r2, r5
 8008e00:	9801      	ldr	r0, [sp, #4]
 8008e02:	a904      	add	r1, sp, #16
 8008e04:	f7ff fc78 	bl	80086f8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008e08:	9b00      	ldr	r3, [sp, #0]
 8008e0a:	1b5d      	subs	r5, r3, r5
 8008e0c:	bf18      	it	ne
 8008e0e:	f04f 35ff 	movne.w	r5, #4294967295
 8008e12:	e7dd      	b.n	8008dd0 <f_puts+0x70>
	return EOF;
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e18:	b015      	add	sp, #84	; 0x54
 8008e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e1c:	4608      	mov	r0, r1
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008e1e:	4622      	mov	r2, r4
 8008e20:	e7e0      	b.n	8008de4 <f_puts+0x84>
 8008e22:	bf00      	nop

08008e24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e24:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8008e26:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <FATFS_LinkDriver+0x44>)
 8008e28:	7a5c      	ldrb	r4, [r3, #9]
 8008e2a:	b9cc      	cbnz	r4, 8008e60 <FATFS_LinkDriver+0x3c>
 8008e2c:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8008e2e:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8008e32:	7a5c      	ldrb	r4, [r3, #9]
 8008e34:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8008e36:	7a5c      	ldrb	r4, [r3, #9]
 8008e38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e3c:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8008e3e:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8008e40:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8008e42:	441c      	add	r4, r3
 8008e44:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8008e46:	1c54      	adds	r4, r2, #1
 8008e48:	b2e4      	uxtb	r4, r4
 8008e4a:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008e4c:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8008e4e:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8008e50:	232f      	movs	r3, #47	; 0x2f
    path[1] = ':';
 8008e52:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 8008e54:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8008e56:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8008e5a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008e5c:	70c8      	strb	r0, [r1, #3]
}
 8008e5e:	4770      	bx	lr
  uint8_t ret = 1;
 8008e60:	2001      	movs	r0, #1
}
 8008e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	2000309c 	.word	0x2000309c

08008e6c <__errno>:
 8008e6c:	4b01      	ldr	r3, [pc, #4]	; (8008e74 <__errno+0x8>)
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	20000028 	.word	0x20000028

08008e78 <__libc_init_array>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4d0d      	ldr	r5, [pc, #52]	; (8008eb0 <__libc_init_array+0x38>)
 8008e7c:	4c0d      	ldr	r4, [pc, #52]	; (8008eb4 <__libc_init_array+0x3c>)
 8008e7e:	1b64      	subs	r4, r4, r5
 8008e80:	10a4      	asrs	r4, r4, #2
 8008e82:	2600      	movs	r6, #0
 8008e84:	42a6      	cmp	r6, r4
 8008e86:	d109      	bne.n	8008e9c <__libc_init_array+0x24>
 8008e88:	4d0b      	ldr	r5, [pc, #44]	; (8008eb8 <__libc_init_array+0x40>)
 8008e8a:	4c0c      	ldr	r4, [pc, #48]	; (8008ebc <__libc_init_array+0x44>)
 8008e8c:	f002 fe30 	bl	800baf0 <_init>
 8008e90:	1b64      	subs	r4, r4, r5
 8008e92:	10a4      	asrs	r4, r4, #2
 8008e94:	2600      	movs	r6, #0
 8008e96:	42a6      	cmp	r6, r4
 8008e98:	d105      	bne.n	8008ea6 <__libc_init_array+0x2e>
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea0:	4798      	blx	r3
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7ee      	b.n	8008e84 <__libc_init_array+0xc>
 8008ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eaa:	4798      	blx	r3
 8008eac:	3601      	adds	r6, #1
 8008eae:	e7f2      	b.n	8008e96 <__libc_init_array+0x1e>
 8008eb0:	0800c3fc 	.word	0x0800c3fc
 8008eb4:	0800c3fc 	.word	0x0800c3fc
 8008eb8:	0800c3fc 	.word	0x0800c3fc
 8008ebc:	0800c400 	.word	0x0800c400

08008ec0 <malloc>:
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <malloc+0xc>)
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	6818      	ldr	r0, [r3, #0]
 8008ec6:	f000 b88d 	b.w	8008fe4 <_malloc_r>
 8008eca:	bf00      	nop
 8008ecc:	20000028 	.word	0x20000028

08008ed0 <free>:
 8008ed0:	4b02      	ldr	r3, [pc, #8]	; (8008edc <free+0xc>)
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	f000 b819 	b.w	8008f0c <_free_r>
 8008eda:	bf00      	nop
 8008edc:	20000028 	.word	0x20000028

08008ee0 <memcpy>:
 8008ee0:	440a      	add	r2, r1
 8008ee2:	4291      	cmp	r1, r2
 8008ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ee8:	d100      	bne.n	8008eec <memcpy+0xc>
 8008eea:	4770      	bx	lr
 8008eec:	b510      	push	{r4, lr}
 8008eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ef6:	4291      	cmp	r1, r2
 8008ef8:	d1f9      	bne.n	8008eee <memcpy+0xe>
 8008efa:	bd10      	pop	{r4, pc}

08008efc <memset>:
 8008efc:	4402      	add	r2, r0
 8008efe:	4603      	mov	r3, r0
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d100      	bne.n	8008f06 <memset+0xa>
 8008f04:	4770      	bx	lr
 8008f06:	f803 1b01 	strb.w	r1, [r3], #1
 8008f0a:	e7f9      	b.n	8008f00 <memset+0x4>

08008f0c <_free_r>:
 8008f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	d044      	beq.n	8008f9c <_free_r+0x90>
 8008f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f16:	9001      	str	r0, [sp, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f1e:	bfb8      	it	lt
 8008f20:	18e4      	addlt	r4, r4, r3
 8008f22:	f001 ff57 	bl	800add4 <__malloc_lock>
 8008f26:	4a1e      	ldr	r2, [pc, #120]	; (8008fa0 <_free_r+0x94>)
 8008f28:	9801      	ldr	r0, [sp, #4]
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	b933      	cbnz	r3, 8008f3c <_free_r+0x30>
 8008f2e:	6063      	str	r3, [r4, #4]
 8008f30:	6014      	str	r4, [r2, #0]
 8008f32:	b003      	add	sp, #12
 8008f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f38:	f001 bf52 	b.w	800ade0 <__malloc_unlock>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d908      	bls.n	8008f52 <_free_r+0x46>
 8008f40:	6825      	ldr	r5, [r4, #0]
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf01      	itttt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	1949      	addeq	r1, r1, r5
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	e7ed      	b.n	8008f2e <_free_r+0x22>
 8008f52:	461a      	mov	r2, r3
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	b10b      	cbz	r3, 8008f5c <_free_r+0x50>
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d9fa      	bls.n	8008f52 <_free_r+0x46>
 8008f5c:	6811      	ldr	r1, [r2, #0]
 8008f5e:	1855      	adds	r5, r2, r1
 8008f60:	42a5      	cmp	r5, r4
 8008f62:	d10b      	bne.n	8008f7c <_free_r+0x70>
 8008f64:	6824      	ldr	r4, [r4, #0]
 8008f66:	4421      	add	r1, r4
 8008f68:	1854      	adds	r4, r2, r1
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	d1e0      	bne.n	8008f32 <_free_r+0x26>
 8008f70:	681c      	ldr	r4, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	6053      	str	r3, [r2, #4]
 8008f76:	4421      	add	r1, r4
 8008f78:	6011      	str	r1, [r2, #0]
 8008f7a:	e7da      	b.n	8008f32 <_free_r+0x26>
 8008f7c:	d902      	bls.n	8008f84 <_free_r+0x78>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	6003      	str	r3, [r0, #0]
 8008f82:	e7d6      	b.n	8008f32 <_free_r+0x26>
 8008f84:	6825      	ldr	r5, [r4, #0]
 8008f86:	1961      	adds	r1, r4, r5
 8008f88:	428b      	cmp	r3, r1
 8008f8a:	bf04      	itt	eq
 8008f8c:	6819      	ldreq	r1, [r3, #0]
 8008f8e:	685b      	ldreq	r3, [r3, #4]
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	bf04      	itt	eq
 8008f94:	1949      	addeq	r1, r1, r5
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	6054      	str	r4, [r2, #4]
 8008f9a:	e7ca      	b.n	8008f32 <_free_r+0x26>
 8008f9c:	b003      	add	sp, #12
 8008f9e:	bd30      	pop	{r4, r5, pc}
 8008fa0:	200030a8 	.word	0x200030a8

08008fa4 <sbrk_aligned>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	4e0e      	ldr	r6, [pc, #56]	; (8008fe0 <sbrk_aligned+0x3c>)
 8008fa8:	460c      	mov	r4, r1
 8008faa:	6831      	ldr	r1, [r6, #0]
 8008fac:	4605      	mov	r5, r0
 8008fae:	b911      	cbnz	r1, 8008fb6 <sbrk_aligned+0x12>
 8008fb0:	f000 fd9a 	bl	8009ae8 <_sbrk_r>
 8008fb4:	6030      	str	r0, [r6, #0]
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f000 fd95 	bl	8009ae8 <_sbrk_r>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d00a      	beq.n	8008fd8 <sbrk_aligned+0x34>
 8008fc2:	1cc4      	adds	r4, r0, #3
 8008fc4:	f024 0403 	bic.w	r4, r4, #3
 8008fc8:	42a0      	cmp	r0, r4
 8008fca:	d007      	beq.n	8008fdc <sbrk_aligned+0x38>
 8008fcc:	1a21      	subs	r1, r4, r0
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 fd8a 	bl	8009ae8 <_sbrk_r>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d101      	bne.n	8008fdc <sbrk_aligned+0x38>
 8008fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fdc:	4620      	mov	r0, r4
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	200030ac 	.word	0x200030ac

08008fe4 <_malloc_r>:
 8008fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	1ccd      	adds	r5, r1, #3
 8008fea:	f025 0503 	bic.w	r5, r5, #3
 8008fee:	3508      	adds	r5, #8
 8008ff0:	2d0c      	cmp	r5, #12
 8008ff2:	bf38      	it	cc
 8008ff4:	250c      	movcc	r5, #12
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	db01      	blt.n	8009000 <_malloc_r+0x1c>
 8008ffc:	42a9      	cmp	r1, r5
 8008ffe:	d905      	bls.n	800900c <_malloc_r+0x28>
 8009000:	230c      	movs	r3, #12
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	2600      	movs	r6, #0
 8009006:	4630      	mov	r0, r6
 8009008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900c:	4e2e      	ldr	r6, [pc, #184]	; (80090c8 <_malloc_r+0xe4>)
 800900e:	f001 fee1 	bl	800add4 <__malloc_lock>
 8009012:	6833      	ldr	r3, [r6, #0]
 8009014:	461c      	mov	r4, r3
 8009016:	bb34      	cbnz	r4, 8009066 <_malloc_r+0x82>
 8009018:	4629      	mov	r1, r5
 800901a:	4638      	mov	r0, r7
 800901c:	f7ff ffc2 	bl	8008fa4 <sbrk_aligned>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	4604      	mov	r4, r0
 8009024:	d14d      	bne.n	80090c2 <_malloc_r+0xde>
 8009026:	6834      	ldr	r4, [r6, #0]
 8009028:	4626      	mov	r6, r4
 800902a:	2e00      	cmp	r6, #0
 800902c:	d140      	bne.n	80090b0 <_malloc_r+0xcc>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	4631      	mov	r1, r6
 8009032:	4638      	mov	r0, r7
 8009034:	eb04 0803 	add.w	r8, r4, r3
 8009038:	f000 fd56 	bl	8009ae8 <_sbrk_r>
 800903c:	4580      	cmp	r8, r0
 800903e:	d13a      	bne.n	80090b6 <_malloc_r+0xd2>
 8009040:	6821      	ldr	r1, [r4, #0]
 8009042:	3503      	adds	r5, #3
 8009044:	1a6d      	subs	r5, r5, r1
 8009046:	f025 0503 	bic.w	r5, r5, #3
 800904a:	3508      	adds	r5, #8
 800904c:	2d0c      	cmp	r5, #12
 800904e:	bf38      	it	cc
 8009050:	250c      	movcc	r5, #12
 8009052:	4629      	mov	r1, r5
 8009054:	4638      	mov	r0, r7
 8009056:	f7ff ffa5 	bl	8008fa4 <sbrk_aligned>
 800905a:	3001      	adds	r0, #1
 800905c:	d02b      	beq.n	80090b6 <_malloc_r+0xd2>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	442b      	add	r3, r5
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	e00e      	b.n	8009084 <_malloc_r+0xa0>
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	1b52      	subs	r2, r2, r5
 800906a:	d41e      	bmi.n	80090aa <_malloc_r+0xc6>
 800906c:	2a0b      	cmp	r2, #11
 800906e:	d916      	bls.n	800909e <_malloc_r+0xba>
 8009070:	1961      	adds	r1, r4, r5
 8009072:	42a3      	cmp	r3, r4
 8009074:	6025      	str	r5, [r4, #0]
 8009076:	bf18      	it	ne
 8009078:	6059      	strne	r1, [r3, #4]
 800907a:	6863      	ldr	r3, [r4, #4]
 800907c:	bf08      	it	eq
 800907e:	6031      	streq	r1, [r6, #0]
 8009080:	5162      	str	r2, [r4, r5]
 8009082:	604b      	str	r3, [r1, #4]
 8009084:	4638      	mov	r0, r7
 8009086:	f104 060b 	add.w	r6, r4, #11
 800908a:	f001 fea9 	bl	800ade0 <__malloc_unlock>
 800908e:	f026 0607 	bic.w	r6, r6, #7
 8009092:	1d23      	adds	r3, r4, #4
 8009094:	1af2      	subs	r2, r6, r3
 8009096:	d0b6      	beq.n	8009006 <_malloc_r+0x22>
 8009098:	1b9b      	subs	r3, r3, r6
 800909a:	50a3      	str	r3, [r4, r2]
 800909c:	e7b3      	b.n	8009006 <_malloc_r+0x22>
 800909e:	6862      	ldr	r2, [r4, #4]
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	bf0c      	ite	eq
 80090a4:	6032      	streq	r2, [r6, #0]
 80090a6:	605a      	strne	r2, [r3, #4]
 80090a8:	e7ec      	b.n	8009084 <_malloc_r+0xa0>
 80090aa:	4623      	mov	r3, r4
 80090ac:	6864      	ldr	r4, [r4, #4]
 80090ae:	e7b2      	b.n	8009016 <_malloc_r+0x32>
 80090b0:	4634      	mov	r4, r6
 80090b2:	6876      	ldr	r6, [r6, #4]
 80090b4:	e7b9      	b.n	800902a <_malloc_r+0x46>
 80090b6:	230c      	movs	r3, #12
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	4638      	mov	r0, r7
 80090bc:	f001 fe90 	bl	800ade0 <__malloc_unlock>
 80090c0:	e7a1      	b.n	8009006 <_malloc_r+0x22>
 80090c2:	6025      	str	r5, [r4, #0]
 80090c4:	e7de      	b.n	8009084 <_malloc_r+0xa0>
 80090c6:	bf00      	nop
 80090c8:	200030a8 	.word	0x200030a8

080090cc <__cvt>:
 80090cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	ec55 4b10 	vmov	r4, r5, d0
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	460e      	mov	r6, r1
 80090d8:	4619      	mov	r1, r3
 80090da:	462b      	mov	r3, r5
 80090dc:	bfbb      	ittet	lt
 80090de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090e2:	461d      	movlt	r5, r3
 80090e4:	2300      	movge	r3, #0
 80090e6:	232d      	movlt	r3, #45	; 0x2d
 80090e8:	700b      	strb	r3, [r1, #0]
 80090ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090f0:	4691      	mov	r9, r2
 80090f2:	f023 0820 	bic.w	r8, r3, #32
 80090f6:	bfbc      	itt	lt
 80090f8:	4622      	movlt	r2, r4
 80090fa:	4614      	movlt	r4, r2
 80090fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009100:	d005      	beq.n	800910e <__cvt+0x42>
 8009102:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009106:	d100      	bne.n	800910a <__cvt+0x3e>
 8009108:	3601      	adds	r6, #1
 800910a:	2102      	movs	r1, #2
 800910c:	e000      	b.n	8009110 <__cvt+0x44>
 800910e:	2103      	movs	r1, #3
 8009110:	ab03      	add	r3, sp, #12
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	ab02      	add	r3, sp, #8
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	ec45 4b10 	vmov	d0, r4, r5
 800911c:	4653      	mov	r3, sl
 800911e:	4632      	mov	r2, r6
 8009120:	f000 fe46 	bl	8009db0 <_dtoa_r>
 8009124:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009128:	4607      	mov	r7, r0
 800912a:	d102      	bne.n	8009132 <__cvt+0x66>
 800912c:	f019 0f01 	tst.w	r9, #1
 8009130:	d022      	beq.n	8009178 <__cvt+0xac>
 8009132:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009136:	eb07 0906 	add.w	r9, r7, r6
 800913a:	d110      	bne.n	800915e <__cvt+0x92>
 800913c:	783b      	ldrb	r3, [r7, #0]
 800913e:	2b30      	cmp	r3, #48	; 0x30
 8009140:	d10a      	bne.n	8009158 <__cvt+0x8c>
 8009142:	2200      	movs	r2, #0
 8009144:	2300      	movs	r3, #0
 8009146:	4620      	mov	r0, r4
 8009148:	4629      	mov	r1, r5
 800914a:	f7f7 fcd5 	bl	8000af8 <__aeabi_dcmpeq>
 800914e:	b918      	cbnz	r0, 8009158 <__cvt+0x8c>
 8009150:	f1c6 0601 	rsb	r6, r6, #1
 8009154:	f8ca 6000 	str.w	r6, [sl]
 8009158:	f8da 3000 	ldr.w	r3, [sl]
 800915c:	4499      	add	r9, r3
 800915e:	2200      	movs	r2, #0
 8009160:	2300      	movs	r3, #0
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	f7f7 fcc7 	bl	8000af8 <__aeabi_dcmpeq>
 800916a:	b108      	cbz	r0, 8009170 <__cvt+0xa4>
 800916c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009170:	2230      	movs	r2, #48	; 0x30
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	454b      	cmp	r3, r9
 8009176:	d307      	bcc.n	8009188 <__cvt+0xbc>
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800917c:	1bdb      	subs	r3, r3, r7
 800917e:	4638      	mov	r0, r7
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	b004      	add	sp, #16
 8009184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009188:	1c59      	adds	r1, r3, #1
 800918a:	9103      	str	r1, [sp, #12]
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	e7f0      	b.n	8009172 <__cvt+0xa6>

08009190 <__exponent>:
 8009190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009192:	4603      	mov	r3, r0
 8009194:	2900      	cmp	r1, #0
 8009196:	bfb8      	it	lt
 8009198:	4249      	neglt	r1, r1
 800919a:	f803 2b02 	strb.w	r2, [r3], #2
 800919e:	bfb4      	ite	lt
 80091a0:	222d      	movlt	r2, #45	; 0x2d
 80091a2:	222b      	movge	r2, #43	; 0x2b
 80091a4:	2909      	cmp	r1, #9
 80091a6:	7042      	strb	r2, [r0, #1]
 80091a8:	dd2a      	ble.n	8009200 <__exponent+0x70>
 80091aa:	f10d 0407 	add.w	r4, sp, #7
 80091ae:	46a4      	mov	ip, r4
 80091b0:	270a      	movs	r7, #10
 80091b2:	46a6      	mov	lr, r4
 80091b4:	460a      	mov	r2, r1
 80091b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80091ba:	fb07 1516 	mls	r5, r7, r6, r1
 80091be:	3530      	adds	r5, #48	; 0x30
 80091c0:	2a63      	cmp	r2, #99	; 0x63
 80091c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80091c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80091ca:	4631      	mov	r1, r6
 80091cc:	dcf1      	bgt.n	80091b2 <__exponent+0x22>
 80091ce:	3130      	adds	r1, #48	; 0x30
 80091d0:	f1ae 0502 	sub.w	r5, lr, #2
 80091d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80091d8:	1c44      	adds	r4, r0, #1
 80091da:	4629      	mov	r1, r5
 80091dc:	4561      	cmp	r1, ip
 80091de:	d30a      	bcc.n	80091f6 <__exponent+0x66>
 80091e0:	f10d 0209 	add.w	r2, sp, #9
 80091e4:	eba2 020e 	sub.w	r2, r2, lr
 80091e8:	4565      	cmp	r5, ip
 80091ea:	bf88      	it	hi
 80091ec:	2200      	movhi	r2, #0
 80091ee:	4413      	add	r3, r2
 80091f0:	1a18      	subs	r0, r3, r0
 80091f2:	b003      	add	sp, #12
 80091f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80091fe:	e7ed      	b.n	80091dc <__exponent+0x4c>
 8009200:	2330      	movs	r3, #48	; 0x30
 8009202:	3130      	adds	r1, #48	; 0x30
 8009204:	7083      	strb	r3, [r0, #2]
 8009206:	70c1      	strb	r1, [r0, #3]
 8009208:	1d03      	adds	r3, r0, #4
 800920a:	e7f1      	b.n	80091f0 <__exponent+0x60>

0800920c <_printf_float>:
 800920c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	ed2d 8b02 	vpush	{d8}
 8009214:	b08d      	sub	sp, #52	; 0x34
 8009216:	460c      	mov	r4, r1
 8009218:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800921c:	4616      	mov	r6, r2
 800921e:	461f      	mov	r7, r3
 8009220:	4605      	mov	r5, r0
 8009222:	f001 fd6b 	bl	800acfc <_localeconv_r>
 8009226:	f8d0 a000 	ldr.w	sl, [r0]
 800922a:	4650      	mov	r0, sl
 800922c:	f7f6 ffe2 	bl	80001f4 <strlen>
 8009230:	2300      	movs	r3, #0
 8009232:	930a      	str	r3, [sp, #40]	; 0x28
 8009234:	6823      	ldr	r3, [r4, #0]
 8009236:	9305      	str	r3, [sp, #20]
 8009238:	f8d8 3000 	ldr.w	r3, [r8]
 800923c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009240:	3307      	adds	r3, #7
 8009242:	f023 0307 	bic.w	r3, r3, #7
 8009246:	f103 0208 	add.w	r2, r3, #8
 800924a:	f8c8 2000 	str.w	r2, [r8]
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009256:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800925a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800925e:	9307      	str	r3, [sp, #28]
 8009260:	f8cd 8018 	str.w	r8, [sp, #24]
 8009264:	ee08 0a10 	vmov	s16, r0
 8009268:	4b9f      	ldr	r3, [pc, #636]	; (80094e8 <_printf_float+0x2dc>)
 800926a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800926e:	f04f 32ff 	mov.w	r2, #4294967295
 8009272:	f7f7 fc73 	bl	8000b5c <__aeabi_dcmpun>
 8009276:	bb88      	cbnz	r0, 80092dc <_printf_float+0xd0>
 8009278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800927c:	4b9a      	ldr	r3, [pc, #616]	; (80094e8 <_printf_float+0x2dc>)
 800927e:	f04f 32ff 	mov.w	r2, #4294967295
 8009282:	f7f7 fc4d 	bl	8000b20 <__aeabi_dcmple>
 8009286:	bb48      	cbnz	r0, 80092dc <_printf_float+0xd0>
 8009288:	2200      	movs	r2, #0
 800928a:	2300      	movs	r3, #0
 800928c:	4640      	mov	r0, r8
 800928e:	4649      	mov	r1, r9
 8009290:	f7f7 fc3c 	bl	8000b0c <__aeabi_dcmplt>
 8009294:	b110      	cbz	r0, 800929c <_printf_float+0x90>
 8009296:	232d      	movs	r3, #45	; 0x2d
 8009298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929c:	4b93      	ldr	r3, [pc, #588]	; (80094ec <_printf_float+0x2e0>)
 800929e:	4894      	ldr	r0, [pc, #592]	; (80094f0 <_printf_float+0x2e4>)
 80092a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80092a4:	bf94      	ite	ls
 80092a6:	4698      	movls	r8, r3
 80092a8:	4680      	movhi	r8, r0
 80092aa:	2303      	movs	r3, #3
 80092ac:	6123      	str	r3, [r4, #16]
 80092ae:	9b05      	ldr	r3, [sp, #20]
 80092b0:	f023 0204 	bic.w	r2, r3, #4
 80092b4:	6022      	str	r2, [r4, #0]
 80092b6:	f04f 0900 	mov.w	r9, #0
 80092ba:	9700      	str	r7, [sp, #0]
 80092bc:	4633      	mov	r3, r6
 80092be:	aa0b      	add	r2, sp, #44	; 0x2c
 80092c0:	4621      	mov	r1, r4
 80092c2:	4628      	mov	r0, r5
 80092c4:	f000 f9d8 	bl	8009678 <_printf_common>
 80092c8:	3001      	adds	r0, #1
 80092ca:	f040 8090 	bne.w	80093ee <_printf_float+0x1e2>
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295
 80092d2:	b00d      	add	sp, #52	; 0x34
 80092d4:	ecbd 8b02 	vpop	{d8}
 80092d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092dc:	4642      	mov	r2, r8
 80092de:	464b      	mov	r3, r9
 80092e0:	4640      	mov	r0, r8
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7f7 fc3a 	bl	8000b5c <__aeabi_dcmpun>
 80092e8:	b140      	cbz	r0, 80092fc <_printf_float+0xf0>
 80092ea:	464b      	mov	r3, r9
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bfbc      	itt	lt
 80092f0:	232d      	movlt	r3, #45	; 0x2d
 80092f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092f6:	487f      	ldr	r0, [pc, #508]	; (80094f4 <_printf_float+0x2e8>)
 80092f8:	4b7f      	ldr	r3, [pc, #508]	; (80094f8 <_printf_float+0x2ec>)
 80092fa:	e7d1      	b.n	80092a0 <_printf_float+0x94>
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009302:	9206      	str	r2, [sp, #24]
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	d13f      	bne.n	8009388 <_printf_float+0x17c>
 8009308:	2306      	movs	r3, #6
 800930a:	6063      	str	r3, [r4, #4]
 800930c:	9b05      	ldr	r3, [sp, #20]
 800930e:	6861      	ldr	r1, [r4, #4]
 8009310:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009314:	2300      	movs	r3, #0
 8009316:	9303      	str	r3, [sp, #12]
 8009318:	ab0a      	add	r3, sp, #40	; 0x28
 800931a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800931e:	ab09      	add	r3, sp, #36	; 0x24
 8009320:	ec49 8b10 	vmov	d0, r8, r9
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	6022      	str	r2, [r4, #0]
 8009328:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800932c:	4628      	mov	r0, r5
 800932e:	f7ff fecd 	bl	80090cc <__cvt>
 8009332:	9b06      	ldr	r3, [sp, #24]
 8009334:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009336:	2b47      	cmp	r3, #71	; 0x47
 8009338:	4680      	mov	r8, r0
 800933a:	d108      	bne.n	800934e <_printf_float+0x142>
 800933c:	1cc8      	adds	r0, r1, #3
 800933e:	db02      	blt.n	8009346 <_printf_float+0x13a>
 8009340:	6863      	ldr	r3, [r4, #4]
 8009342:	4299      	cmp	r1, r3
 8009344:	dd41      	ble.n	80093ca <_printf_float+0x1be>
 8009346:	f1ab 0b02 	sub.w	fp, fp, #2
 800934a:	fa5f fb8b 	uxtb.w	fp, fp
 800934e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009352:	d820      	bhi.n	8009396 <_printf_float+0x18a>
 8009354:	3901      	subs	r1, #1
 8009356:	465a      	mov	r2, fp
 8009358:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800935c:	9109      	str	r1, [sp, #36]	; 0x24
 800935e:	f7ff ff17 	bl	8009190 <__exponent>
 8009362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009364:	1813      	adds	r3, r2, r0
 8009366:	2a01      	cmp	r2, #1
 8009368:	4681      	mov	r9, r0
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	dc02      	bgt.n	8009374 <_printf_float+0x168>
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	07d2      	lsls	r2, r2, #31
 8009372:	d501      	bpl.n	8009378 <_printf_float+0x16c>
 8009374:	3301      	adds	r3, #1
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800937c:	2b00      	cmp	r3, #0
 800937e:	d09c      	beq.n	80092ba <_printf_float+0xae>
 8009380:	232d      	movs	r3, #45	; 0x2d
 8009382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009386:	e798      	b.n	80092ba <_printf_float+0xae>
 8009388:	9a06      	ldr	r2, [sp, #24]
 800938a:	2a47      	cmp	r2, #71	; 0x47
 800938c:	d1be      	bne.n	800930c <_printf_float+0x100>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1bc      	bne.n	800930c <_printf_float+0x100>
 8009392:	2301      	movs	r3, #1
 8009394:	e7b9      	b.n	800930a <_printf_float+0xfe>
 8009396:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800939a:	d118      	bne.n	80093ce <_printf_float+0x1c2>
 800939c:	2900      	cmp	r1, #0
 800939e:	6863      	ldr	r3, [r4, #4]
 80093a0:	dd0b      	ble.n	80093ba <_printf_float+0x1ae>
 80093a2:	6121      	str	r1, [r4, #16]
 80093a4:	b913      	cbnz	r3, 80093ac <_printf_float+0x1a0>
 80093a6:	6822      	ldr	r2, [r4, #0]
 80093a8:	07d0      	lsls	r0, r2, #31
 80093aa:	d502      	bpl.n	80093b2 <_printf_float+0x1a6>
 80093ac:	3301      	adds	r3, #1
 80093ae:	440b      	add	r3, r1
 80093b0:	6123      	str	r3, [r4, #16]
 80093b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80093b4:	f04f 0900 	mov.w	r9, #0
 80093b8:	e7de      	b.n	8009378 <_printf_float+0x16c>
 80093ba:	b913      	cbnz	r3, 80093c2 <_printf_float+0x1b6>
 80093bc:	6822      	ldr	r2, [r4, #0]
 80093be:	07d2      	lsls	r2, r2, #31
 80093c0:	d501      	bpl.n	80093c6 <_printf_float+0x1ba>
 80093c2:	3302      	adds	r3, #2
 80093c4:	e7f4      	b.n	80093b0 <_printf_float+0x1a4>
 80093c6:	2301      	movs	r3, #1
 80093c8:	e7f2      	b.n	80093b0 <_printf_float+0x1a4>
 80093ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80093ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d0:	4299      	cmp	r1, r3
 80093d2:	db05      	blt.n	80093e0 <_printf_float+0x1d4>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	6121      	str	r1, [r4, #16]
 80093d8:	07d8      	lsls	r0, r3, #31
 80093da:	d5ea      	bpl.n	80093b2 <_printf_float+0x1a6>
 80093dc:	1c4b      	adds	r3, r1, #1
 80093de:	e7e7      	b.n	80093b0 <_printf_float+0x1a4>
 80093e0:	2900      	cmp	r1, #0
 80093e2:	bfd4      	ite	le
 80093e4:	f1c1 0202 	rsble	r2, r1, #2
 80093e8:	2201      	movgt	r2, #1
 80093ea:	4413      	add	r3, r2
 80093ec:	e7e0      	b.n	80093b0 <_printf_float+0x1a4>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	055a      	lsls	r2, r3, #21
 80093f2:	d407      	bmi.n	8009404 <_printf_float+0x1f8>
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	4642      	mov	r2, r8
 80093f8:	4631      	mov	r1, r6
 80093fa:	4628      	mov	r0, r5
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	d12c      	bne.n	800945c <_printf_float+0x250>
 8009402:	e764      	b.n	80092ce <_printf_float+0xc2>
 8009404:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009408:	f240 80e0 	bls.w	80095cc <_printf_float+0x3c0>
 800940c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009410:	2200      	movs	r2, #0
 8009412:	2300      	movs	r3, #0
 8009414:	f7f7 fb70 	bl	8000af8 <__aeabi_dcmpeq>
 8009418:	2800      	cmp	r0, #0
 800941a:	d034      	beq.n	8009486 <_printf_float+0x27a>
 800941c:	4a37      	ldr	r2, [pc, #220]	; (80094fc <_printf_float+0x2f0>)
 800941e:	2301      	movs	r3, #1
 8009420:	4631      	mov	r1, r6
 8009422:	4628      	mov	r0, r5
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	f43f af51 	beq.w	80092ce <_printf_float+0xc2>
 800942c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009430:	429a      	cmp	r2, r3
 8009432:	db02      	blt.n	800943a <_printf_float+0x22e>
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	07d8      	lsls	r0, r3, #31
 8009438:	d510      	bpl.n	800945c <_printf_float+0x250>
 800943a:	ee18 3a10 	vmov	r3, s16
 800943e:	4652      	mov	r2, sl
 8009440:	4631      	mov	r1, r6
 8009442:	4628      	mov	r0, r5
 8009444:	47b8      	blx	r7
 8009446:	3001      	adds	r0, #1
 8009448:	f43f af41 	beq.w	80092ce <_printf_float+0xc2>
 800944c:	f04f 0800 	mov.w	r8, #0
 8009450:	f104 091a 	add.w	r9, r4, #26
 8009454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009456:	3b01      	subs	r3, #1
 8009458:	4543      	cmp	r3, r8
 800945a:	dc09      	bgt.n	8009470 <_printf_float+0x264>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	079b      	lsls	r3, r3, #30
 8009460:	f100 8105 	bmi.w	800966e <_printf_float+0x462>
 8009464:	68e0      	ldr	r0, [r4, #12]
 8009466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009468:	4298      	cmp	r0, r3
 800946a:	bfb8      	it	lt
 800946c:	4618      	movlt	r0, r3
 800946e:	e730      	b.n	80092d2 <_printf_float+0xc6>
 8009470:	2301      	movs	r3, #1
 8009472:	464a      	mov	r2, r9
 8009474:	4631      	mov	r1, r6
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	f43f af27 	beq.w	80092ce <_printf_float+0xc2>
 8009480:	f108 0801 	add.w	r8, r8, #1
 8009484:	e7e6      	b.n	8009454 <_printf_float+0x248>
 8009486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	dc39      	bgt.n	8009500 <_printf_float+0x2f4>
 800948c:	4a1b      	ldr	r2, [pc, #108]	; (80094fc <_printf_float+0x2f0>)
 800948e:	2301      	movs	r3, #1
 8009490:	4631      	mov	r1, r6
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	f43f af19 	beq.w	80092ce <_printf_float+0xc2>
 800949c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094a0:	4313      	orrs	r3, r2
 80094a2:	d102      	bne.n	80094aa <_printf_float+0x29e>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	07d9      	lsls	r1, r3, #31
 80094a8:	d5d8      	bpl.n	800945c <_printf_float+0x250>
 80094aa:	ee18 3a10 	vmov	r3, s16
 80094ae:	4652      	mov	r2, sl
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	f43f af09 	beq.w	80092ce <_printf_float+0xc2>
 80094bc:	f04f 0900 	mov.w	r9, #0
 80094c0:	f104 0a1a 	add.w	sl, r4, #26
 80094c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c6:	425b      	negs	r3, r3
 80094c8:	454b      	cmp	r3, r9
 80094ca:	dc01      	bgt.n	80094d0 <_printf_float+0x2c4>
 80094cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ce:	e792      	b.n	80093f6 <_printf_float+0x1ea>
 80094d0:	2301      	movs	r3, #1
 80094d2:	4652      	mov	r2, sl
 80094d4:	4631      	mov	r1, r6
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f aef7 	beq.w	80092ce <_printf_float+0xc2>
 80094e0:	f109 0901 	add.w	r9, r9, #1
 80094e4:	e7ee      	b.n	80094c4 <_printf_float+0x2b8>
 80094e6:	bf00      	nop
 80094e8:	7fefffff 	.word	0x7fefffff
 80094ec:	0800c01c 	.word	0x0800c01c
 80094f0:	0800c020 	.word	0x0800c020
 80094f4:	0800c028 	.word	0x0800c028
 80094f8:	0800c024 	.word	0x0800c024
 80094fc:	0800c02c 	.word	0x0800c02c
 8009500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009504:	429a      	cmp	r2, r3
 8009506:	bfa8      	it	ge
 8009508:	461a      	movge	r2, r3
 800950a:	2a00      	cmp	r2, #0
 800950c:	4691      	mov	r9, r2
 800950e:	dc37      	bgt.n	8009580 <_printf_float+0x374>
 8009510:	f04f 0b00 	mov.w	fp, #0
 8009514:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009518:	f104 021a 	add.w	r2, r4, #26
 800951c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800951e:	9305      	str	r3, [sp, #20]
 8009520:	eba3 0309 	sub.w	r3, r3, r9
 8009524:	455b      	cmp	r3, fp
 8009526:	dc33      	bgt.n	8009590 <_printf_float+0x384>
 8009528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800952c:	429a      	cmp	r2, r3
 800952e:	db3b      	blt.n	80095a8 <_printf_float+0x39c>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	07da      	lsls	r2, r3, #31
 8009534:	d438      	bmi.n	80095a8 <_printf_float+0x39c>
 8009536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009538:	9a05      	ldr	r2, [sp, #20]
 800953a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800953c:	1a9a      	subs	r2, r3, r2
 800953e:	eba3 0901 	sub.w	r9, r3, r1
 8009542:	4591      	cmp	r9, r2
 8009544:	bfa8      	it	ge
 8009546:	4691      	movge	r9, r2
 8009548:	f1b9 0f00 	cmp.w	r9, #0
 800954c:	dc35      	bgt.n	80095ba <_printf_float+0x3ae>
 800954e:	f04f 0800 	mov.w	r8, #0
 8009552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009556:	f104 0a1a 	add.w	sl, r4, #26
 800955a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	eba3 0309 	sub.w	r3, r3, r9
 8009564:	4543      	cmp	r3, r8
 8009566:	f77f af79 	ble.w	800945c <_printf_float+0x250>
 800956a:	2301      	movs	r3, #1
 800956c:	4652      	mov	r2, sl
 800956e:	4631      	mov	r1, r6
 8009570:	4628      	mov	r0, r5
 8009572:	47b8      	blx	r7
 8009574:	3001      	adds	r0, #1
 8009576:	f43f aeaa 	beq.w	80092ce <_printf_float+0xc2>
 800957a:	f108 0801 	add.w	r8, r8, #1
 800957e:	e7ec      	b.n	800955a <_printf_float+0x34e>
 8009580:	4613      	mov	r3, r2
 8009582:	4631      	mov	r1, r6
 8009584:	4642      	mov	r2, r8
 8009586:	4628      	mov	r0, r5
 8009588:	47b8      	blx	r7
 800958a:	3001      	adds	r0, #1
 800958c:	d1c0      	bne.n	8009510 <_printf_float+0x304>
 800958e:	e69e      	b.n	80092ce <_printf_float+0xc2>
 8009590:	2301      	movs	r3, #1
 8009592:	4631      	mov	r1, r6
 8009594:	4628      	mov	r0, r5
 8009596:	9205      	str	r2, [sp, #20]
 8009598:	47b8      	blx	r7
 800959a:	3001      	adds	r0, #1
 800959c:	f43f ae97 	beq.w	80092ce <_printf_float+0xc2>
 80095a0:	9a05      	ldr	r2, [sp, #20]
 80095a2:	f10b 0b01 	add.w	fp, fp, #1
 80095a6:	e7b9      	b.n	800951c <_printf_float+0x310>
 80095a8:	ee18 3a10 	vmov	r3, s16
 80095ac:	4652      	mov	r2, sl
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1be      	bne.n	8009536 <_printf_float+0x32a>
 80095b8:	e689      	b.n	80092ce <_printf_float+0xc2>
 80095ba:	9a05      	ldr	r2, [sp, #20]
 80095bc:	464b      	mov	r3, r9
 80095be:	4442      	add	r2, r8
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	d1c1      	bne.n	800954e <_printf_float+0x342>
 80095ca:	e680      	b.n	80092ce <_printf_float+0xc2>
 80095cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ce:	2a01      	cmp	r2, #1
 80095d0:	dc01      	bgt.n	80095d6 <_printf_float+0x3ca>
 80095d2:	07db      	lsls	r3, r3, #31
 80095d4:	d538      	bpl.n	8009648 <_printf_float+0x43c>
 80095d6:	2301      	movs	r3, #1
 80095d8:	4642      	mov	r2, r8
 80095da:	4631      	mov	r1, r6
 80095dc:	4628      	mov	r0, r5
 80095de:	47b8      	blx	r7
 80095e0:	3001      	adds	r0, #1
 80095e2:	f43f ae74 	beq.w	80092ce <_printf_float+0xc2>
 80095e6:	ee18 3a10 	vmov	r3, s16
 80095ea:	4652      	mov	r2, sl
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f ae6b 	beq.w	80092ce <_printf_float+0xc2>
 80095f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095fc:	2200      	movs	r2, #0
 80095fe:	2300      	movs	r3, #0
 8009600:	f7f7 fa7a 	bl	8000af8 <__aeabi_dcmpeq>
 8009604:	b9d8      	cbnz	r0, 800963e <_printf_float+0x432>
 8009606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009608:	f108 0201 	add.w	r2, r8, #1
 800960c:	3b01      	subs	r3, #1
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	47b8      	blx	r7
 8009614:	3001      	adds	r0, #1
 8009616:	d10e      	bne.n	8009636 <_printf_float+0x42a>
 8009618:	e659      	b.n	80092ce <_printf_float+0xc2>
 800961a:	2301      	movs	r3, #1
 800961c:	4652      	mov	r2, sl
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f ae52 	beq.w	80092ce <_printf_float+0xc2>
 800962a:	f108 0801 	add.w	r8, r8, #1
 800962e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009630:	3b01      	subs	r3, #1
 8009632:	4543      	cmp	r3, r8
 8009634:	dcf1      	bgt.n	800961a <_printf_float+0x40e>
 8009636:	464b      	mov	r3, r9
 8009638:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800963c:	e6dc      	b.n	80093f8 <_printf_float+0x1ec>
 800963e:	f04f 0800 	mov.w	r8, #0
 8009642:	f104 0a1a 	add.w	sl, r4, #26
 8009646:	e7f2      	b.n	800962e <_printf_float+0x422>
 8009648:	2301      	movs	r3, #1
 800964a:	4642      	mov	r2, r8
 800964c:	e7df      	b.n	800960e <_printf_float+0x402>
 800964e:	2301      	movs	r3, #1
 8009650:	464a      	mov	r2, r9
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f ae38 	beq.w	80092ce <_printf_float+0xc2>
 800965e:	f108 0801 	add.w	r8, r8, #1
 8009662:	68e3      	ldr	r3, [r4, #12]
 8009664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009666:	1a5b      	subs	r3, r3, r1
 8009668:	4543      	cmp	r3, r8
 800966a:	dcf0      	bgt.n	800964e <_printf_float+0x442>
 800966c:	e6fa      	b.n	8009464 <_printf_float+0x258>
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	f104 0919 	add.w	r9, r4, #25
 8009676:	e7f4      	b.n	8009662 <_printf_float+0x456>

08009678 <_printf_common>:
 8009678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800967c:	4616      	mov	r6, r2
 800967e:	4699      	mov	r9, r3
 8009680:	688a      	ldr	r2, [r1, #8]
 8009682:	690b      	ldr	r3, [r1, #16]
 8009684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009688:	4293      	cmp	r3, r2
 800968a:	bfb8      	it	lt
 800968c:	4613      	movlt	r3, r2
 800968e:	6033      	str	r3, [r6, #0]
 8009690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009694:	4607      	mov	r7, r0
 8009696:	460c      	mov	r4, r1
 8009698:	b10a      	cbz	r2, 800969e <_printf_common+0x26>
 800969a:	3301      	adds	r3, #1
 800969c:	6033      	str	r3, [r6, #0]
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	0699      	lsls	r1, r3, #26
 80096a2:	bf42      	ittt	mi
 80096a4:	6833      	ldrmi	r3, [r6, #0]
 80096a6:	3302      	addmi	r3, #2
 80096a8:	6033      	strmi	r3, [r6, #0]
 80096aa:	6825      	ldr	r5, [r4, #0]
 80096ac:	f015 0506 	ands.w	r5, r5, #6
 80096b0:	d106      	bne.n	80096c0 <_printf_common+0x48>
 80096b2:	f104 0a19 	add.w	sl, r4, #25
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	6832      	ldr	r2, [r6, #0]
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	42ab      	cmp	r3, r5
 80096be:	dc26      	bgt.n	800970e <_printf_common+0x96>
 80096c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096c4:	1e13      	subs	r3, r2, #0
 80096c6:	6822      	ldr	r2, [r4, #0]
 80096c8:	bf18      	it	ne
 80096ca:	2301      	movne	r3, #1
 80096cc:	0692      	lsls	r2, r2, #26
 80096ce:	d42b      	bmi.n	8009728 <_printf_common+0xb0>
 80096d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096d4:	4649      	mov	r1, r9
 80096d6:	4638      	mov	r0, r7
 80096d8:	47c0      	blx	r8
 80096da:	3001      	adds	r0, #1
 80096dc:	d01e      	beq.n	800971c <_printf_common+0xa4>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	68e5      	ldr	r5, [r4, #12]
 80096e2:	6832      	ldr	r2, [r6, #0]
 80096e4:	f003 0306 	and.w	r3, r3, #6
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	bf08      	it	eq
 80096ec:	1aad      	subeq	r5, r5, r2
 80096ee:	68a3      	ldr	r3, [r4, #8]
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	bf0c      	ite	eq
 80096f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f8:	2500      	movne	r5, #0
 80096fa:	4293      	cmp	r3, r2
 80096fc:	bfc4      	itt	gt
 80096fe:	1a9b      	subgt	r3, r3, r2
 8009700:	18ed      	addgt	r5, r5, r3
 8009702:	2600      	movs	r6, #0
 8009704:	341a      	adds	r4, #26
 8009706:	42b5      	cmp	r5, r6
 8009708:	d11a      	bne.n	8009740 <_printf_common+0xc8>
 800970a:	2000      	movs	r0, #0
 800970c:	e008      	b.n	8009720 <_printf_common+0xa8>
 800970e:	2301      	movs	r3, #1
 8009710:	4652      	mov	r2, sl
 8009712:	4649      	mov	r1, r9
 8009714:	4638      	mov	r0, r7
 8009716:	47c0      	blx	r8
 8009718:	3001      	adds	r0, #1
 800971a:	d103      	bne.n	8009724 <_printf_common+0xac>
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009724:	3501      	adds	r5, #1
 8009726:	e7c6      	b.n	80096b6 <_printf_common+0x3e>
 8009728:	18e1      	adds	r1, r4, r3
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	2030      	movs	r0, #48	; 0x30
 800972e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009732:	4422      	add	r2, r4
 8009734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800973c:	3302      	adds	r3, #2
 800973e:	e7c7      	b.n	80096d0 <_printf_common+0x58>
 8009740:	2301      	movs	r3, #1
 8009742:	4622      	mov	r2, r4
 8009744:	4649      	mov	r1, r9
 8009746:	4638      	mov	r0, r7
 8009748:	47c0      	blx	r8
 800974a:	3001      	adds	r0, #1
 800974c:	d0e6      	beq.n	800971c <_printf_common+0xa4>
 800974e:	3601      	adds	r6, #1
 8009750:	e7d9      	b.n	8009706 <_printf_common+0x8e>
	...

08009754 <_printf_i>:
 8009754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	7e0f      	ldrb	r7, [r1, #24]
 800975a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800975c:	2f78      	cmp	r7, #120	; 0x78
 800975e:	4691      	mov	r9, r2
 8009760:	4680      	mov	r8, r0
 8009762:	460c      	mov	r4, r1
 8009764:	469a      	mov	sl, r3
 8009766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800976a:	d807      	bhi.n	800977c <_printf_i+0x28>
 800976c:	2f62      	cmp	r7, #98	; 0x62
 800976e:	d80a      	bhi.n	8009786 <_printf_i+0x32>
 8009770:	2f00      	cmp	r7, #0
 8009772:	f000 80d8 	beq.w	8009926 <_printf_i+0x1d2>
 8009776:	2f58      	cmp	r7, #88	; 0x58
 8009778:	f000 80a3 	beq.w	80098c2 <_printf_i+0x16e>
 800977c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009784:	e03a      	b.n	80097fc <_printf_i+0xa8>
 8009786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800978a:	2b15      	cmp	r3, #21
 800978c:	d8f6      	bhi.n	800977c <_printf_i+0x28>
 800978e:	a101      	add	r1, pc, #4	; (adr r1, 8009794 <_printf_i+0x40>)
 8009790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009794:	080097ed 	.word	0x080097ed
 8009798:	08009801 	.word	0x08009801
 800979c:	0800977d 	.word	0x0800977d
 80097a0:	0800977d 	.word	0x0800977d
 80097a4:	0800977d 	.word	0x0800977d
 80097a8:	0800977d 	.word	0x0800977d
 80097ac:	08009801 	.word	0x08009801
 80097b0:	0800977d 	.word	0x0800977d
 80097b4:	0800977d 	.word	0x0800977d
 80097b8:	0800977d 	.word	0x0800977d
 80097bc:	0800977d 	.word	0x0800977d
 80097c0:	0800990d 	.word	0x0800990d
 80097c4:	08009831 	.word	0x08009831
 80097c8:	080098ef 	.word	0x080098ef
 80097cc:	0800977d 	.word	0x0800977d
 80097d0:	0800977d 	.word	0x0800977d
 80097d4:	0800992f 	.word	0x0800992f
 80097d8:	0800977d 	.word	0x0800977d
 80097dc:	08009831 	.word	0x08009831
 80097e0:	0800977d 	.word	0x0800977d
 80097e4:	0800977d 	.word	0x0800977d
 80097e8:	080098f7 	.word	0x080098f7
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	1d1a      	adds	r2, r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	602a      	str	r2, [r5, #0]
 80097f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097fc:	2301      	movs	r3, #1
 80097fe:	e0a3      	b.n	8009948 <_printf_i+0x1f4>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	6829      	ldr	r1, [r5, #0]
 8009804:	0606      	lsls	r6, r0, #24
 8009806:	f101 0304 	add.w	r3, r1, #4
 800980a:	d50a      	bpl.n	8009822 <_printf_i+0xce>
 800980c:	680e      	ldr	r6, [r1, #0]
 800980e:	602b      	str	r3, [r5, #0]
 8009810:	2e00      	cmp	r6, #0
 8009812:	da03      	bge.n	800981c <_printf_i+0xc8>
 8009814:	232d      	movs	r3, #45	; 0x2d
 8009816:	4276      	negs	r6, r6
 8009818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800981c:	485e      	ldr	r0, [pc, #376]	; (8009998 <_printf_i+0x244>)
 800981e:	230a      	movs	r3, #10
 8009820:	e019      	b.n	8009856 <_printf_i+0x102>
 8009822:	680e      	ldr	r6, [r1, #0]
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	f010 0f40 	tst.w	r0, #64	; 0x40
 800982a:	bf18      	it	ne
 800982c:	b236      	sxthne	r6, r6
 800982e:	e7ef      	b.n	8009810 <_printf_i+0xbc>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	6820      	ldr	r0, [r4, #0]
 8009834:	1d19      	adds	r1, r3, #4
 8009836:	6029      	str	r1, [r5, #0]
 8009838:	0601      	lsls	r1, r0, #24
 800983a:	d501      	bpl.n	8009840 <_printf_i+0xec>
 800983c:	681e      	ldr	r6, [r3, #0]
 800983e:	e002      	b.n	8009846 <_printf_i+0xf2>
 8009840:	0646      	lsls	r6, r0, #25
 8009842:	d5fb      	bpl.n	800983c <_printf_i+0xe8>
 8009844:	881e      	ldrh	r6, [r3, #0]
 8009846:	4854      	ldr	r0, [pc, #336]	; (8009998 <_printf_i+0x244>)
 8009848:	2f6f      	cmp	r7, #111	; 0x6f
 800984a:	bf0c      	ite	eq
 800984c:	2308      	moveq	r3, #8
 800984e:	230a      	movne	r3, #10
 8009850:	2100      	movs	r1, #0
 8009852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009856:	6865      	ldr	r5, [r4, #4]
 8009858:	60a5      	str	r5, [r4, #8]
 800985a:	2d00      	cmp	r5, #0
 800985c:	bfa2      	ittt	ge
 800985e:	6821      	ldrge	r1, [r4, #0]
 8009860:	f021 0104 	bicge.w	r1, r1, #4
 8009864:	6021      	strge	r1, [r4, #0]
 8009866:	b90e      	cbnz	r6, 800986c <_printf_i+0x118>
 8009868:	2d00      	cmp	r5, #0
 800986a:	d04d      	beq.n	8009908 <_printf_i+0x1b4>
 800986c:	4615      	mov	r5, r2
 800986e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009872:	fb03 6711 	mls	r7, r3, r1, r6
 8009876:	5dc7      	ldrb	r7, [r0, r7]
 8009878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800987c:	4637      	mov	r7, r6
 800987e:	42bb      	cmp	r3, r7
 8009880:	460e      	mov	r6, r1
 8009882:	d9f4      	bls.n	800986e <_printf_i+0x11a>
 8009884:	2b08      	cmp	r3, #8
 8009886:	d10b      	bne.n	80098a0 <_printf_i+0x14c>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	07de      	lsls	r6, r3, #31
 800988c:	d508      	bpl.n	80098a0 <_printf_i+0x14c>
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	6861      	ldr	r1, [r4, #4]
 8009892:	4299      	cmp	r1, r3
 8009894:	bfde      	ittt	le
 8009896:	2330      	movle	r3, #48	; 0x30
 8009898:	f805 3c01 	strble.w	r3, [r5, #-1]
 800989c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098a0:	1b52      	subs	r2, r2, r5
 80098a2:	6122      	str	r2, [r4, #16]
 80098a4:	f8cd a000 	str.w	sl, [sp]
 80098a8:	464b      	mov	r3, r9
 80098aa:	aa03      	add	r2, sp, #12
 80098ac:	4621      	mov	r1, r4
 80098ae:	4640      	mov	r0, r8
 80098b0:	f7ff fee2 	bl	8009678 <_printf_common>
 80098b4:	3001      	adds	r0, #1
 80098b6:	d14c      	bne.n	8009952 <_printf_i+0x1fe>
 80098b8:	f04f 30ff 	mov.w	r0, #4294967295
 80098bc:	b004      	add	sp, #16
 80098be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c2:	4835      	ldr	r0, [pc, #212]	; (8009998 <_printf_i+0x244>)
 80098c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098c8:	6829      	ldr	r1, [r5, #0]
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80098d0:	6029      	str	r1, [r5, #0]
 80098d2:	061d      	lsls	r5, r3, #24
 80098d4:	d514      	bpl.n	8009900 <_printf_i+0x1ac>
 80098d6:	07df      	lsls	r7, r3, #31
 80098d8:	bf44      	itt	mi
 80098da:	f043 0320 	orrmi.w	r3, r3, #32
 80098de:	6023      	strmi	r3, [r4, #0]
 80098e0:	b91e      	cbnz	r6, 80098ea <_printf_i+0x196>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	f023 0320 	bic.w	r3, r3, #32
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	2310      	movs	r3, #16
 80098ec:	e7b0      	b.n	8009850 <_printf_i+0xfc>
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	f043 0320 	orr.w	r3, r3, #32
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	2378      	movs	r3, #120	; 0x78
 80098f8:	4828      	ldr	r0, [pc, #160]	; (800999c <_printf_i+0x248>)
 80098fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098fe:	e7e3      	b.n	80098c8 <_printf_i+0x174>
 8009900:	0659      	lsls	r1, r3, #25
 8009902:	bf48      	it	mi
 8009904:	b2b6      	uxthmi	r6, r6
 8009906:	e7e6      	b.n	80098d6 <_printf_i+0x182>
 8009908:	4615      	mov	r5, r2
 800990a:	e7bb      	b.n	8009884 <_printf_i+0x130>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	6826      	ldr	r6, [r4, #0]
 8009910:	6961      	ldr	r1, [r4, #20]
 8009912:	1d18      	adds	r0, r3, #4
 8009914:	6028      	str	r0, [r5, #0]
 8009916:	0635      	lsls	r5, r6, #24
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	d501      	bpl.n	8009920 <_printf_i+0x1cc>
 800991c:	6019      	str	r1, [r3, #0]
 800991e:	e002      	b.n	8009926 <_printf_i+0x1d2>
 8009920:	0670      	lsls	r0, r6, #25
 8009922:	d5fb      	bpl.n	800991c <_printf_i+0x1c8>
 8009924:	8019      	strh	r1, [r3, #0]
 8009926:	2300      	movs	r3, #0
 8009928:	6123      	str	r3, [r4, #16]
 800992a:	4615      	mov	r5, r2
 800992c:	e7ba      	b.n	80098a4 <_printf_i+0x150>
 800992e:	682b      	ldr	r3, [r5, #0]
 8009930:	1d1a      	adds	r2, r3, #4
 8009932:	602a      	str	r2, [r5, #0]
 8009934:	681d      	ldr	r5, [r3, #0]
 8009936:	6862      	ldr	r2, [r4, #4]
 8009938:	2100      	movs	r1, #0
 800993a:	4628      	mov	r0, r5
 800993c:	f7f6 fc68 	bl	8000210 <memchr>
 8009940:	b108      	cbz	r0, 8009946 <_printf_i+0x1f2>
 8009942:	1b40      	subs	r0, r0, r5
 8009944:	6060      	str	r0, [r4, #4]
 8009946:	6863      	ldr	r3, [r4, #4]
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	2300      	movs	r3, #0
 800994c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009950:	e7a8      	b.n	80098a4 <_printf_i+0x150>
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	462a      	mov	r2, r5
 8009956:	4649      	mov	r1, r9
 8009958:	4640      	mov	r0, r8
 800995a:	47d0      	blx	sl
 800995c:	3001      	adds	r0, #1
 800995e:	d0ab      	beq.n	80098b8 <_printf_i+0x164>
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	079b      	lsls	r3, r3, #30
 8009964:	d413      	bmi.n	800998e <_printf_i+0x23a>
 8009966:	68e0      	ldr	r0, [r4, #12]
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	4298      	cmp	r0, r3
 800996c:	bfb8      	it	lt
 800996e:	4618      	movlt	r0, r3
 8009970:	e7a4      	b.n	80098bc <_printf_i+0x168>
 8009972:	2301      	movs	r3, #1
 8009974:	4632      	mov	r2, r6
 8009976:	4649      	mov	r1, r9
 8009978:	4640      	mov	r0, r8
 800997a:	47d0      	blx	sl
 800997c:	3001      	adds	r0, #1
 800997e:	d09b      	beq.n	80098b8 <_printf_i+0x164>
 8009980:	3501      	adds	r5, #1
 8009982:	68e3      	ldr	r3, [r4, #12]
 8009984:	9903      	ldr	r1, [sp, #12]
 8009986:	1a5b      	subs	r3, r3, r1
 8009988:	42ab      	cmp	r3, r5
 800998a:	dcf2      	bgt.n	8009972 <_printf_i+0x21e>
 800998c:	e7eb      	b.n	8009966 <_printf_i+0x212>
 800998e:	2500      	movs	r5, #0
 8009990:	f104 0619 	add.w	r6, r4, #25
 8009994:	e7f5      	b.n	8009982 <_printf_i+0x22e>
 8009996:	bf00      	nop
 8009998:	0800c02e 	.word	0x0800c02e
 800999c:	0800c03f 	.word	0x0800c03f

080099a0 <iprintf>:
 80099a0:	b40f      	push	{r0, r1, r2, r3}
 80099a2:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <iprintf+0x2c>)
 80099a4:	b513      	push	{r0, r1, r4, lr}
 80099a6:	681c      	ldr	r4, [r3, #0]
 80099a8:	b124      	cbz	r4, 80099b4 <iprintf+0x14>
 80099aa:	69a3      	ldr	r3, [r4, #24]
 80099ac:	b913      	cbnz	r3, 80099b4 <iprintf+0x14>
 80099ae:	4620      	mov	r0, r4
 80099b0:	f001 f906 	bl	800abc0 <__sinit>
 80099b4:	ab05      	add	r3, sp, #20
 80099b6:	9a04      	ldr	r2, [sp, #16]
 80099b8:	68a1      	ldr	r1, [r4, #8]
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	4620      	mov	r0, r4
 80099be:	f001 fdd9 	bl	800b574 <_vfiprintf_r>
 80099c2:	b002      	add	sp, #8
 80099c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c8:	b004      	add	sp, #16
 80099ca:	4770      	bx	lr
 80099cc:	20000028 	.word	0x20000028

080099d0 <putchar>:
 80099d0:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <putchar+0x28>)
 80099d2:	b513      	push	{r0, r1, r4, lr}
 80099d4:	681c      	ldr	r4, [r3, #0]
 80099d6:	4601      	mov	r1, r0
 80099d8:	b134      	cbz	r4, 80099e8 <putchar+0x18>
 80099da:	69a3      	ldr	r3, [r4, #24]
 80099dc:	b923      	cbnz	r3, 80099e8 <putchar+0x18>
 80099de:	9001      	str	r0, [sp, #4]
 80099e0:	4620      	mov	r0, r4
 80099e2:	f001 f8ed 	bl	800abc0 <__sinit>
 80099e6:	9901      	ldr	r1, [sp, #4]
 80099e8:	68a2      	ldr	r2, [r4, #8]
 80099ea:	4620      	mov	r0, r4
 80099ec:	b002      	add	sp, #8
 80099ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099f2:	f001 beef 	b.w	800b7d4 <_putc_r>
 80099f6:	bf00      	nop
 80099f8:	20000028 	.word	0x20000028

080099fc <_puts_r>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	460e      	mov	r6, r1
 8009a00:	4605      	mov	r5, r0
 8009a02:	b118      	cbz	r0, 8009a0c <_puts_r+0x10>
 8009a04:	6983      	ldr	r3, [r0, #24]
 8009a06:	b90b      	cbnz	r3, 8009a0c <_puts_r+0x10>
 8009a08:	f001 f8da 	bl	800abc0 <__sinit>
 8009a0c:	69ab      	ldr	r3, [r5, #24]
 8009a0e:	68ac      	ldr	r4, [r5, #8]
 8009a10:	b913      	cbnz	r3, 8009a18 <_puts_r+0x1c>
 8009a12:	4628      	mov	r0, r5
 8009a14:	f001 f8d4 	bl	800abc0 <__sinit>
 8009a18:	4b2c      	ldr	r3, [pc, #176]	; (8009acc <_puts_r+0xd0>)
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	d120      	bne.n	8009a60 <_puts_r+0x64>
 8009a1e:	686c      	ldr	r4, [r5, #4]
 8009a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a22:	07db      	lsls	r3, r3, #31
 8009a24:	d405      	bmi.n	8009a32 <_puts_r+0x36>
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	0598      	lsls	r0, r3, #22
 8009a2a:	d402      	bmi.n	8009a32 <_puts_r+0x36>
 8009a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a2e:	f001 f96a 	bl	800ad06 <__retarget_lock_acquire_recursive>
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	0719      	lsls	r1, r3, #28
 8009a36:	d51d      	bpl.n	8009a74 <_puts_r+0x78>
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	b1db      	cbz	r3, 8009a74 <_puts_r+0x78>
 8009a3c:	3e01      	subs	r6, #1
 8009a3e:	68a3      	ldr	r3, [r4, #8]
 8009a40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a44:	3b01      	subs	r3, #1
 8009a46:	60a3      	str	r3, [r4, #8]
 8009a48:	bb39      	cbnz	r1, 8009a9a <_puts_r+0x9e>
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	da38      	bge.n	8009ac0 <_puts_r+0xc4>
 8009a4e:	4622      	mov	r2, r4
 8009a50:	210a      	movs	r1, #10
 8009a52:	4628      	mov	r0, r5
 8009a54:	f000 f860 	bl	8009b18 <__swbuf_r>
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d011      	beq.n	8009a80 <_puts_r+0x84>
 8009a5c:	250a      	movs	r5, #10
 8009a5e:	e011      	b.n	8009a84 <_puts_r+0x88>
 8009a60:	4b1b      	ldr	r3, [pc, #108]	; (8009ad0 <_puts_r+0xd4>)
 8009a62:	429c      	cmp	r4, r3
 8009a64:	d101      	bne.n	8009a6a <_puts_r+0x6e>
 8009a66:	68ac      	ldr	r4, [r5, #8]
 8009a68:	e7da      	b.n	8009a20 <_puts_r+0x24>
 8009a6a:	4b1a      	ldr	r3, [pc, #104]	; (8009ad4 <_puts_r+0xd8>)
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	bf08      	it	eq
 8009a70:	68ec      	ldreq	r4, [r5, #12]
 8009a72:	e7d5      	b.n	8009a20 <_puts_r+0x24>
 8009a74:	4621      	mov	r1, r4
 8009a76:	4628      	mov	r0, r5
 8009a78:	f000 f8a0 	bl	8009bbc <__swsetup_r>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d0dd      	beq.n	8009a3c <_puts_r+0x40>
 8009a80:	f04f 35ff 	mov.w	r5, #4294967295
 8009a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a86:	07da      	lsls	r2, r3, #31
 8009a88:	d405      	bmi.n	8009a96 <_puts_r+0x9a>
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	059b      	lsls	r3, r3, #22
 8009a8e:	d402      	bmi.n	8009a96 <_puts_r+0x9a>
 8009a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a92:	f001 f939 	bl	800ad08 <__retarget_lock_release_recursive>
 8009a96:	4628      	mov	r0, r5
 8009a98:	bd70      	pop	{r4, r5, r6, pc}
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	da04      	bge.n	8009aa8 <_puts_r+0xac>
 8009a9e:	69a2      	ldr	r2, [r4, #24]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	dc06      	bgt.n	8009ab2 <_puts_r+0xb6>
 8009aa4:	290a      	cmp	r1, #10
 8009aa6:	d004      	beq.n	8009ab2 <_puts_r+0xb6>
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	6022      	str	r2, [r4, #0]
 8009aae:	7019      	strb	r1, [r3, #0]
 8009ab0:	e7c5      	b.n	8009a3e <_puts_r+0x42>
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f000 f82f 	bl	8009b18 <__swbuf_r>
 8009aba:	3001      	adds	r0, #1
 8009abc:	d1bf      	bne.n	8009a3e <_puts_r+0x42>
 8009abe:	e7df      	b.n	8009a80 <_puts_r+0x84>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	250a      	movs	r5, #10
 8009ac4:	1c5a      	adds	r2, r3, #1
 8009ac6:	6022      	str	r2, [r4, #0]
 8009ac8:	701d      	strb	r5, [r3, #0]
 8009aca:	e7db      	b.n	8009a84 <_puts_r+0x88>
 8009acc:	0800c100 	.word	0x0800c100
 8009ad0:	0800c120 	.word	0x0800c120
 8009ad4:	0800c0e0 	.word	0x0800c0e0

08009ad8 <puts>:
 8009ad8:	4b02      	ldr	r3, [pc, #8]	; (8009ae4 <puts+0xc>)
 8009ada:	4601      	mov	r1, r0
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	f7ff bf8d 	b.w	80099fc <_puts_r>
 8009ae2:	bf00      	nop
 8009ae4:	20000028 	.word	0x20000028

08009ae8 <_sbrk_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d06      	ldr	r5, [pc, #24]	; (8009b04 <_sbrk_r+0x1c>)
 8009aec:	2300      	movs	r3, #0
 8009aee:	4604      	mov	r4, r0
 8009af0:	4608      	mov	r0, r1
 8009af2:	602b      	str	r3, [r5, #0]
 8009af4:	f7f9 fc9e 	bl	8003434 <_sbrk>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d102      	bne.n	8009b02 <_sbrk_r+0x1a>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <_sbrk_r+0x1a>
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	200030b4 	.word	0x200030b4

08009b08 <strcpy>:
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b0e:	f803 2b01 	strb.w	r2, [r3], #1
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	d1f9      	bne.n	8009b0a <strcpy+0x2>
 8009b16:	4770      	bx	lr

08009b18 <__swbuf_r>:
 8009b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1a:	460e      	mov	r6, r1
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	4605      	mov	r5, r0
 8009b20:	b118      	cbz	r0, 8009b2a <__swbuf_r+0x12>
 8009b22:	6983      	ldr	r3, [r0, #24]
 8009b24:	b90b      	cbnz	r3, 8009b2a <__swbuf_r+0x12>
 8009b26:	f001 f84b 	bl	800abc0 <__sinit>
 8009b2a:	4b21      	ldr	r3, [pc, #132]	; (8009bb0 <__swbuf_r+0x98>)
 8009b2c:	429c      	cmp	r4, r3
 8009b2e:	d12b      	bne.n	8009b88 <__swbuf_r+0x70>
 8009b30:	686c      	ldr	r4, [r5, #4]
 8009b32:	69a3      	ldr	r3, [r4, #24]
 8009b34:	60a3      	str	r3, [r4, #8]
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	071a      	lsls	r2, r3, #28
 8009b3a:	d52f      	bpl.n	8009b9c <__swbuf_r+0x84>
 8009b3c:	6923      	ldr	r3, [r4, #16]
 8009b3e:	b36b      	cbz	r3, 8009b9c <__swbuf_r+0x84>
 8009b40:	6923      	ldr	r3, [r4, #16]
 8009b42:	6820      	ldr	r0, [r4, #0]
 8009b44:	1ac0      	subs	r0, r0, r3
 8009b46:	6963      	ldr	r3, [r4, #20]
 8009b48:	b2f6      	uxtb	r6, r6
 8009b4a:	4283      	cmp	r3, r0
 8009b4c:	4637      	mov	r7, r6
 8009b4e:	dc04      	bgt.n	8009b5a <__swbuf_r+0x42>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 ffa0 	bl	800aa98 <_fflush_r>
 8009b58:	bb30      	cbnz	r0, 8009ba8 <__swbuf_r+0x90>
 8009b5a:	68a3      	ldr	r3, [r4, #8]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	60a3      	str	r3, [r4, #8]
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	6022      	str	r2, [r4, #0]
 8009b66:	701e      	strb	r6, [r3, #0]
 8009b68:	6963      	ldr	r3, [r4, #20]
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	4283      	cmp	r3, r0
 8009b6e:	d004      	beq.n	8009b7a <__swbuf_r+0x62>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	07db      	lsls	r3, r3, #31
 8009b74:	d506      	bpl.n	8009b84 <__swbuf_r+0x6c>
 8009b76:	2e0a      	cmp	r6, #10
 8009b78:	d104      	bne.n	8009b84 <__swbuf_r+0x6c>
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f000 ff8b 	bl	800aa98 <_fflush_r>
 8009b82:	b988      	cbnz	r0, 8009ba8 <__swbuf_r+0x90>
 8009b84:	4638      	mov	r0, r7
 8009b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b88:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <__swbuf_r+0x9c>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	d101      	bne.n	8009b92 <__swbuf_r+0x7a>
 8009b8e:	68ac      	ldr	r4, [r5, #8]
 8009b90:	e7cf      	b.n	8009b32 <__swbuf_r+0x1a>
 8009b92:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <__swbuf_r+0xa0>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	bf08      	it	eq
 8009b98:	68ec      	ldreq	r4, [r5, #12]
 8009b9a:	e7ca      	b.n	8009b32 <__swbuf_r+0x1a>
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 f80c 	bl	8009bbc <__swsetup_r>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d0cb      	beq.n	8009b40 <__swbuf_r+0x28>
 8009ba8:	f04f 37ff 	mov.w	r7, #4294967295
 8009bac:	e7ea      	b.n	8009b84 <__swbuf_r+0x6c>
 8009bae:	bf00      	nop
 8009bb0:	0800c100 	.word	0x0800c100
 8009bb4:	0800c120 	.word	0x0800c120
 8009bb8:	0800c0e0 	.word	0x0800c0e0

08009bbc <__swsetup_r>:
 8009bbc:	4b32      	ldr	r3, [pc, #200]	; (8009c88 <__swsetup_r+0xcc>)
 8009bbe:	b570      	push	{r4, r5, r6, lr}
 8009bc0:	681d      	ldr	r5, [r3, #0]
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	b125      	cbz	r5, 8009bd2 <__swsetup_r+0x16>
 8009bc8:	69ab      	ldr	r3, [r5, #24]
 8009bca:	b913      	cbnz	r3, 8009bd2 <__swsetup_r+0x16>
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f000 fff7 	bl	800abc0 <__sinit>
 8009bd2:	4b2e      	ldr	r3, [pc, #184]	; (8009c8c <__swsetup_r+0xd0>)
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	d10f      	bne.n	8009bf8 <__swsetup_r+0x3c>
 8009bd8:	686c      	ldr	r4, [r5, #4]
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009be0:	0719      	lsls	r1, r3, #28
 8009be2:	d42c      	bmi.n	8009c3e <__swsetup_r+0x82>
 8009be4:	06dd      	lsls	r5, r3, #27
 8009be6:	d411      	bmi.n	8009c0c <__swsetup_r+0x50>
 8009be8:	2309      	movs	r3, #9
 8009bea:	6033      	str	r3, [r6, #0]
 8009bec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bf0:	81a3      	strh	r3, [r4, #12]
 8009bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf6:	e03e      	b.n	8009c76 <__swsetup_r+0xba>
 8009bf8:	4b25      	ldr	r3, [pc, #148]	; (8009c90 <__swsetup_r+0xd4>)
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	d101      	bne.n	8009c02 <__swsetup_r+0x46>
 8009bfe:	68ac      	ldr	r4, [r5, #8]
 8009c00:	e7eb      	b.n	8009bda <__swsetup_r+0x1e>
 8009c02:	4b24      	ldr	r3, [pc, #144]	; (8009c94 <__swsetup_r+0xd8>)
 8009c04:	429c      	cmp	r4, r3
 8009c06:	bf08      	it	eq
 8009c08:	68ec      	ldreq	r4, [r5, #12]
 8009c0a:	e7e6      	b.n	8009bda <__swsetup_r+0x1e>
 8009c0c:	0758      	lsls	r0, r3, #29
 8009c0e:	d512      	bpl.n	8009c36 <__swsetup_r+0x7a>
 8009c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c12:	b141      	cbz	r1, 8009c26 <__swsetup_r+0x6a>
 8009c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c18:	4299      	cmp	r1, r3
 8009c1a:	d002      	beq.n	8009c22 <__swsetup_r+0x66>
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	f7ff f975 	bl	8008f0c <_free_r>
 8009c22:	2300      	movs	r3, #0
 8009c24:	6363      	str	r3, [r4, #52]	; 0x34
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c2c:	81a3      	strh	r3, [r4, #12]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6063      	str	r3, [r4, #4]
 8009c32:	6923      	ldr	r3, [r4, #16]
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f043 0308 	orr.w	r3, r3, #8
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	b94b      	cbnz	r3, 8009c56 <__swsetup_r+0x9a>
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c4c:	d003      	beq.n	8009c56 <__swsetup_r+0x9a>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4630      	mov	r0, r6
 8009c52:	f001 f87f 	bl	800ad54 <__smakebuf_r>
 8009c56:	89a0      	ldrh	r0, [r4, #12]
 8009c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c5c:	f010 0301 	ands.w	r3, r0, #1
 8009c60:	d00a      	beq.n	8009c78 <__swsetup_r+0xbc>
 8009c62:	2300      	movs	r3, #0
 8009c64:	60a3      	str	r3, [r4, #8]
 8009c66:	6963      	ldr	r3, [r4, #20]
 8009c68:	425b      	negs	r3, r3
 8009c6a:	61a3      	str	r3, [r4, #24]
 8009c6c:	6923      	ldr	r3, [r4, #16]
 8009c6e:	b943      	cbnz	r3, 8009c82 <__swsetup_r+0xc6>
 8009c70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c74:	d1ba      	bne.n	8009bec <__swsetup_r+0x30>
 8009c76:	bd70      	pop	{r4, r5, r6, pc}
 8009c78:	0781      	lsls	r1, r0, #30
 8009c7a:	bf58      	it	pl
 8009c7c:	6963      	ldrpl	r3, [r4, #20]
 8009c7e:	60a3      	str	r3, [r4, #8]
 8009c80:	e7f4      	b.n	8009c6c <__swsetup_r+0xb0>
 8009c82:	2000      	movs	r0, #0
 8009c84:	e7f7      	b.n	8009c76 <__swsetup_r+0xba>
 8009c86:	bf00      	nop
 8009c88:	20000028 	.word	0x20000028
 8009c8c:	0800c100 	.word	0x0800c100
 8009c90:	0800c120 	.word	0x0800c120
 8009c94:	0800c0e0 	.word	0x0800c0e0

08009c98 <quorem>:
 8009c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	6903      	ldr	r3, [r0, #16]
 8009c9e:	690c      	ldr	r4, [r1, #16]
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	f2c0 8081 	blt.w	8009daa <quorem+0x112>
 8009ca8:	3c01      	subs	r4, #1
 8009caa:	f101 0814 	add.w	r8, r1, #20
 8009cae:	f100 0514 	add.w	r5, r0, #20
 8009cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009cc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ccc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cd0:	d331      	bcc.n	8009d36 <quorem+0x9e>
 8009cd2:	f04f 0e00 	mov.w	lr, #0
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	46ac      	mov	ip, r5
 8009cda:	46f2      	mov	sl, lr
 8009cdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ce0:	b293      	uxth	r3, r2
 8009ce2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ce6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	ebaa 0303 	sub.w	r3, sl, r3
 8009cf0:	f8dc a000 	ldr.w	sl, [ip]
 8009cf4:	0c12      	lsrs	r2, r2, #16
 8009cf6:	fa13 f38a 	uxtah	r3, r3, sl
 8009cfa:	fb06 e202 	mla	r2, r6, r2, lr
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	9b00      	ldr	r3, [sp, #0]
 8009d02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d06:	b292      	uxth	r2, r2
 8009d08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d10:	f8bd 3000 	ldrh.w	r3, [sp]
 8009d14:	4581      	cmp	r9, r0
 8009d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d1a:	f84c 3b04 	str.w	r3, [ip], #4
 8009d1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d22:	d2db      	bcs.n	8009cdc <quorem+0x44>
 8009d24:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d28:	b92b      	cbnz	r3, 8009d36 <quorem+0x9e>
 8009d2a:	9b01      	ldr	r3, [sp, #4]
 8009d2c:	3b04      	subs	r3, #4
 8009d2e:	429d      	cmp	r5, r3
 8009d30:	461a      	mov	r2, r3
 8009d32:	d32e      	bcc.n	8009d92 <quorem+0xfa>
 8009d34:	613c      	str	r4, [r7, #16]
 8009d36:	4638      	mov	r0, r7
 8009d38:	f001 fada 	bl	800b2f0 <__mcmp>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	db24      	blt.n	8009d8a <quorem+0xf2>
 8009d40:	3601      	adds	r6, #1
 8009d42:	4628      	mov	r0, r5
 8009d44:	f04f 0c00 	mov.w	ip, #0
 8009d48:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d4c:	f8d0 e000 	ldr.w	lr, [r0]
 8009d50:	b293      	uxth	r3, r2
 8009d52:	ebac 0303 	sub.w	r3, ip, r3
 8009d56:	0c12      	lsrs	r2, r2, #16
 8009d58:	fa13 f38e 	uxtah	r3, r3, lr
 8009d5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d6a:	45c1      	cmp	r9, r8
 8009d6c:	f840 3b04 	str.w	r3, [r0], #4
 8009d70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d74:	d2e8      	bcs.n	8009d48 <quorem+0xb0>
 8009d76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d7e:	b922      	cbnz	r2, 8009d8a <quorem+0xf2>
 8009d80:	3b04      	subs	r3, #4
 8009d82:	429d      	cmp	r5, r3
 8009d84:	461a      	mov	r2, r3
 8009d86:	d30a      	bcc.n	8009d9e <quorem+0x106>
 8009d88:	613c      	str	r4, [r7, #16]
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	b003      	add	sp, #12
 8009d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	3b04      	subs	r3, #4
 8009d96:	2a00      	cmp	r2, #0
 8009d98:	d1cc      	bne.n	8009d34 <quorem+0x9c>
 8009d9a:	3c01      	subs	r4, #1
 8009d9c:	e7c7      	b.n	8009d2e <quorem+0x96>
 8009d9e:	6812      	ldr	r2, [r2, #0]
 8009da0:	3b04      	subs	r3, #4
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	d1f0      	bne.n	8009d88 <quorem+0xf0>
 8009da6:	3c01      	subs	r4, #1
 8009da8:	e7eb      	b.n	8009d82 <quorem+0xea>
 8009daa:	2000      	movs	r0, #0
 8009dac:	e7ee      	b.n	8009d8c <quorem+0xf4>
	...

08009db0 <_dtoa_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	ed2d 8b04 	vpush	{d8-d9}
 8009db8:	ec57 6b10 	vmov	r6, r7, d0
 8009dbc:	b093      	sub	sp, #76	; 0x4c
 8009dbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009dc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009dc4:	9106      	str	r1, [sp, #24]
 8009dc6:	ee10 aa10 	vmov	sl, s0
 8009dca:	4604      	mov	r4, r0
 8009dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8009dce:	930c      	str	r3, [sp, #48]	; 0x30
 8009dd0:	46bb      	mov	fp, r7
 8009dd2:	b975      	cbnz	r5, 8009df2 <_dtoa_r+0x42>
 8009dd4:	2010      	movs	r0, #16
 8009dd6:	f7ff f873 	bl	8008ec0 <malloc>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	6260      	str	r0, [r4, #36]	; 0x24
 8009dde:	b920      	cbnz	r0, 8009dea <_dtoa_r+0x3a>
 8009de0:	4ba7      	ldr	r3, [pc, #668]	; (800a080 <_dtoa_r+0x2d0>)
 8009de2:	21ea      	movs	r1, #234	; 0xea
 8009de4:	48a7      	ldr	r0, [pc, #668]	; (800a084 <_dtoa_r+0x2d4>)
 8009de6:	f001 fd93 	bl	800b910 <__assert_func>
 8009dea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009dee:	6005      	str	r5, [r0, #0]
 8009df0:	60c5      	str	r5, [r0, #12]
 8009df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009df4:	6819      	ldr	r1, [r3, #0]
 8009df6:	b151      	cbz	r1, 8009e0e <_dtoa_r+0x5e>
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	604a      	str	r2, [r1, #4]
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	4093      	lsls	r3, r2
 8009e00:	608b      	str	r3, [r1, #8]
 8009e02:	4620      	mov	r0, r4
 8009e04:	f001 f832 	bl	800ae6c <_Bfree>
 8009e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	1e3b      	subs	r3, r7, #0
 8009e10:	bfaa      	itet	ge
 8009e12:	2300      	movge	r3, #0
 8009e14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009e18:	f8c8 3000 	strge.w	r3, [r8]
 8009e1c:	4b9a      	ldr	r3, [pc, #616]	; (800a088 <_dtoa_r+0x2d8>)
 8009e1e:	bfbc      	itt	lt
 8009e20:	2201      	movlt	r2, #1
 8009e22:	f8c8 2000 	strlt.w	r2, [r8]
 8009e26:	ea33 030b 	bics.w	r3, r3, fp
 8009e2a:	d11b      	bne.n	8009e64 <_dtoa_r+0xb4>
 8009e2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e38:	4333      	orrs	r3, r6
 8009e3a:	f000 8592 	beq.w	800a962 <_dtoa_r+0xbb2>
 8009e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e40:	b963      	cbnz	r3, 8009e5c <_dtoa_r+0xac>
 8009e42:	4b92      	ldr	r3, [pc, #584]	; (800a08c <_dtoa_r+0x2dc>)
 8009e44:	e022      	b.n	8009e8c <_dtoa_r+0xdc>
 8009e46:	4b92      	ldr	r3, [pc, #584]	; (800a090 <_dtoa_r+0x2e0>)
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	9801      	ldr	r0, [sp, #4]
 8009e52:	b013      	add	sp, #76	; 0x4c
 8009e54:	ecbd 8b04 	vpop	{d8-d9}
 8009e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5c:	4b8b      	ldr	r3, [pc, #556]	; (800a08c <_dtoa_r+0x2dc>)
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	3303      	adds	r3, #3
 8009e62:	e7f3      	b.n	8009e4c <_dtoa_r+0x9c>
 8009e64:	2200      	movs	r2, #0
 8009e66:	2300      	movs	r3, #0
 8009e68:	4650      	mov	r0, sl
 8009e6a:	4659      	mov	r1, fp
 8009e6c:	f7f6 fe44 	bl	8000af8 <__aeabi_dcmpeq>
 8009e70:	ec4b ab19 	vmov	d9, sl, fp
 8009e74:	4680      	mov	r8, r0
 8009e76:	b158      	cbz	r0, 8009e90 <_dtoa_r+0xe0>
 8009e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 856b 	beq.w	800a95c <_dtoa_r+0xbac>
 8009e86:	4883      	ldr	r0, [pc, #524]	; (800a094 <_dtoa_r+0x2e4>)
 8009e88:	6018      	str	r0, [r3, #0]
 8009e8a:	1e43      	subs	r3, r0, #1
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	e7df      	b.n	8009e50 <_dtoa_r+0xa0>
 8009e90:	ec4b ab10 	vmov	d0, sl, fp
 8009e94:	aa10      	add	r2, sp, #64	; 0x40
 8009e96:	a911      	add	r1, sp, #68	; 0x44
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f001 facf 	bl	800b43c <__d2b>
 8009e9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009ea2:	ee08 0a10 	vmov	s16, r0
 8009ea6:	2d00      	cmp	r5, #0
 8009ea8:	f000 8084 	beq.w	8009fb4 <_dtoa_r+0x204>
 8009eac:	ee19 3a90 	vmov	r3, s19
 8009eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009eb8:	4656      	mov	r6, sl
 8009eba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ec2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009ec6:	4b74      	ldr	r3, [pc, #464]	; (800a098 <_dtoa_r+0x2e8>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	4630      	mov	r0, r6
 8009ecc:	4639      	mov	r1, r7
 8009ece:	f7f6 f9f3 	bl	80002b8 <__aeabi_dsub>
 8009ed2:	a365      	add	r3, pc, #404	; (adr r3, 800a068 <_dtoa_r+0x2b8>)
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	f7f6 fba6 	bl	8000628 <__aeabi_dmul>
 8009edc:	a364      	add	r3, pc, #400	; (adr r3, 800a070 <_dtoa_r+0x2c0>)
 8009ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee2:	f7f6 f9eb 	bl	80002bc <__adddf3>
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	4628      	mov	r0, r5
 8009eea:	460f      	mov	r7, r1
 8009eec:	f7f6 fb32 	bl	8000554 <__aeabi_i2d>
 8009ef0:	a361      	add	r3, pc, #388	; (adr r3, 800a078 <_dtoa_r+0x2c8>)
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f7f6 fb97 	bl	8000628 <__aeabi_dmul>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4630      	mov	r0, r6
 8009f00:	4639      	mov	r1, r7
 8009f02:	f7f6 f9db 	bl	80002bc <__adddf3>
 8009f06:	4606      	mov	r6, r0
 8009f08:	460f      	mov	r7, r1
 8009f0a:	f7f6 fe3d 	bl	8000b88 <__aeabi_d2iz>
 8009f0e:	2200      	movs	r2, #0
 8009f10:	9000      	str	r0, [sp, #0]
 8009f12:	2300      	movs	r3, #0
 8009f14:	4630      	mov	r0, r6
 8009f16:	4639      	mov	r1, r7
 8009f18:	f7f6 fdf8 	bl	8000b0c <__aeabi_dcmplt>
 8009f1c:	b150      	cbz	r0, 8009f34 <_dtoa_r+0x184>
 8009f1e:	9800      	ldr	r0, [sp, #0]
 8009f20:	f7f6 fb18 	bl	8000554 <__aeabi_i2d>
 8009f24:	4632      	mov	r2, r6
 8009f26:	463b      	mov	r3, r7
 8009f28:	f7f6 fde6 	bl	8000af8 <__aeabi_dcmpeq>
 8009f2c:	b910      	cbnz	r0, 8009f34 <_dtoa_r+0x184>
 8009f2e:	9b00      	ldr	r3, [sp, #0]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	9b00      	ldr	r3, [sp, #0]
 8009f36:	2b16      	cmp	r3, #22
 8009f38:	d85a      	bhi.n	8009ff0 <_dtoa_r+0x240>
 8009f3a:	9a00      	ldr	r2, [sp, #0]
 8009f3c:	4b57      	ldr	r3, [pc, #348]	; (800a09c <_dtoa_r+0x2ec>)
 8009f3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	ec51 0b19 	vmov	r0, r1, d9
 8009f4a:	f7f6 fddf 	bl	8000b0c <__aeabi_dcmplt>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d050      	beq.n	8009ff4 <_dtoa_r+0x244>
 8009f52:	9b00      	ldr	r3, [sp, #0]
 8009f54:	3b01      	subs	r3, #1
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	2300      	movs	r3, #0
 8009f5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f5e:	1b5d      	subs	r5, r3, r5
 8009f60:	1e6b      	subs	r3, r5, #1
 8009f62:	9305      	str	r3, [sp, #20]
 8009f64:	bf45      	ittet	mi
 8009f66:	f1c5 0301 	rsbmi	r3, r5, #1
 8009f6a:	9304      	strmi	r3, [sp, #16]
 8009f6c:	2300      	movpl	r3, #0
 8009f6e:	2300      	movmi	r3, #0
 8009f70:	bf4c      	ite	mi
 8009f72:	9305      	strmi	r3, [sp, #20]
 8009f74:	9304      	strpl	r3, [sp, #16]
 8009f76:	9b00      	ldr	r3, [sp, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	db3d      	blt.n	8009ff8 <_dtoa_r+0x248>
 8009f7c:	9b05      	ldr	r3, [sp, #20]
 8009f7e:	9a00      	ldr	r2, [sp, #0]
 8009f80:	920a      	str	r2, [sp, #40]	; 0x28
 8009f82:	4413      	add	r3, r2
 8009f84:	9305      	str	r3, [sp, #20]
 8009f86:	2300      	movs	r3, #0
 8009f88:	9307      	str	r3, [sp, #28]
 8009f8a:	9b06      	ldr	r3, [sp, #24]
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	f200 8089 	bhi.w	800a0a4 <_dtoa_r+0x2f4>
 8009f92:	2b05      	cmp	r3, #5
 8009f94:	bfc4      	itt	gt
 8009f96:	3b04      	subgt	r3, #4
 8009f98:	9306      	strgt	r3, [sp, #24]
 8009f9a:	9b06      	ldr	r3, [sp, #24]
 8009f9c:	f1a3 0302 	sub.w	r3, r3, #2
 8009fa0:	bfcc      	ite	gt
 8009fa2:	2500      	movgt	r5, #0
 8009fa4:	2501      	movle	r5, #1
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	f200 8087 	bhi.w	800a0ba <_dtoa_r+0x30a>
 8009fac:	e8df f003 	tbb	[pc, r3]
 8009fb0:	59383a2d 	.word	0x59383a2d
 8009fb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009fb8:	441d      	add	r5, r3
 8009fba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009fbe:	2b20      	cmp	r3, #32
 8009fc0:	bfc1      	itttt	gt
 8009fc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009fc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009fca:	fa0b f303 	lslgt.w	r3, fp, r3
 8009fce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009fd2:	bfda      	itte	le
 8009fd4:	f1c3 0320 	rsble	r3, r3, #32
 8009fd8:	fa06 f003 	lslle.w	r0, r6, r3
 8009fdc:	4318      	orrgt	r0, r3
 8009fde:	f7f6 faa9 	bl	8000534 <__aeabi_ui2d>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009fea:	3d01      	subs	r5, #1
 8009fec:	930e      	str	r3, [sp, #56]	; 0x38
 8009fee:	e76a      	b.n	8009ec6 <_dtoa_r+0x116>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e7b2      	b.n	8009f5a <_dtoa_r+0x1aa>
 8009ff4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ff6:	e7b1      	b.n	8009f5c <_dtoa_r+0x1ac>
 8009ff8:	9b04      	ldr	r3, [sp, #16]
 8009ffa:	9a00      	ldr	r2, [sp, #0]
 8009ffc:	1a9b      	subs	r3, r3, r2
 8009ffe:	9304      	str	r3, [sp, #16]
 800a000:	4253      	negs	r3, r2
 800a002:	9307      	str	r3, [sp, #28]
 800a004:	2300      	movs	r3, #0
 800a006:	930a      	str	r3, [sp, #40]	; 0x28
 800a008:	e7bf      	b.n	8009f8a <_dtoa_r+0x1da>
 800a00a:	2300      	movs	r3, #0
 800a00c:	9308      	str	r3, [sp, #32]
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	2b00      	cmp	r3, #0
 800a012:	dc55      	bgt.n	800a0c0 <_dtoa_r+0x310>
 800a014:	2301      	movs	r3, #1
 800a016:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a01a:	461a      	mov	r2, r3
 800a01c:	9209      	str	r2, [sp, #36]	; 0x24
 800a01e:	e00c      	b.n	800a03a <_dtoa_r+0x28a>
 800a020:	2301      	movs	r3, #1
 800a022:	e7f3      	b.n	800a00c <_dtoa_r+0x25c>
 800a024:	2300      	movs	r3, #0
 800a026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a028:	9308      	str	r3, [sp, #32]
 800a02a:	9b00      	ldr	r3, [sp, #0]
 800a02c:	4413      	add	r3, r2
 800a02e:	9302      	str	r3, [sp, #8]
 800a030:	3301      	adds	r3, #1
 800a032:	2b01      	cmp	r3, #1
 800a034:	9303      	str	r3, [sp, #12]
 800a036:	bfb8      	it	lt
 800a038:	2301      	movlt	r3, #1
 800a03a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a03c:	2200      	movs	r2, #0
 800a03e:	6042      	str	r2, [r0, #4]
 800a040:	2204      	movs	r2, #4
 800a042:	f102 0614 	add.w	r6, r2, #20
 800a046:	429e      	cmp	r6, r3
 800a048:	6841      	ldr	r1, [r0, #4]
 800a04a:	d93d      	bls.n	800a0c8 <_dtoa_r+0x318>
 800a04c:	4620      	mov	r0, r4
 800a04e:	f000 fecd 	bl	800adec <_Balloc>
 800a052:	9001      	str	r0, [sp, #4]
 800a054:	2800      	cmp	r0, #0
 800a056:	d13b      	bne.n	800a0d0 <_dtoa_r+0x320>
 800a058:	4b11      	ldr	r3, [pc, #68]	; (800a0a0 <_dtoa_r+0x2f0>)
 800a05a:	4602      	mov	r2, r0
 800a05c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a060:	e6c0      	b.n	8009de4 <_dtoa_r+0x34>
 800a062:	2301      	movs	r3, #1
 800a064:	e7df      	b.n	800a026 <_dtoa_r+0x276>
 800a066:	bf00      	nop
 800a068:	636f4361 	.word	0x636f4361
 800a06c:	3fd287a7 	.word	0x3fd287a7
 800a070:	8b60c8b3 	.word	0x8b60c8b3
 800a074:	3fc68a28 	.word	0x3fc68a28
 800a078:	509f79fb 	.word	0x509f79fb
 800a07c:	3fd34413 	.word	0x3fd34413
 800a080:	0800c05d 	.word	0x0800c05d
 800a084:	0800c074 	.word	0x0800c074
 800a088:	7ff00000 	.word	0x7ff00000
 800a08c:	0800c059 	.word	0x0800c059
 800a090:	0800c050 	.word	0x0800c050
 800a094:	0800c02d 	.word	0x0800c02d
 800a098:	3ff80000 	.word	0x3ff80000
 800a09c:	0800c1c8 	.word	0x0800c1c8
 800a0a0:	0800c0cf 	.word	0x0800c0cf
 800a0a4:	2501      	movs	r5, #1
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9306      	str	r3, [sp, #24]
 800a0aa:	9508      	str	r5, [sp, #32]
 800a0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	2312      	movs	r3, #18
 800a0b8:	e7b0      	b.n	800a01c <_dtoa_r+0x26c>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	9308      	str	r3, [sp, #32]
 800a0be:	e7f5      	b.n	800a0ac <_dtoa_r+0x2fc>
 800a0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0c6:	e7b8      	b.n	800a03a <_dtoa_r+0x28a>
 800a0c8:	3101      	adds	r1, #1
 800a0ca:	6041      	str	r1, [r0, #4]
 800a0cc:	0052      	lsls	r2, r2, #1
 800a0ce:	e7b8      	b.n	800a042 <_dtoa_r+0x292>
 800a0d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0d2:	9a01      	ldr	r2, [sp, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	9b03      	ldr	r3, [sp, #12]
 800a0d8:	2b0e      	cmp	r3, #14
 800a0da:	f200 809d 	bhi.w	800a218 <_dtoa_r+0x468>
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	f000 809a 	beq.w	800a218 <_dtoa_r+0x468>
 800a0e4:	9b00      	ldr	r3, [sp, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	dd32      	ble.n	800a150 <_dtoa_r+0x3a0>
 800a0ea:	4ab7      	ldr	r2, [pc, #732]	; (800a3c8 <_dtoa_r+0x618>)
 800a0ec:	f003 030f 	and.w	r3, r3, #15
 800a0f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0f8:	9b00      	ldr	r3, [sp, #0]
 800a0fa:	05d8      	lsls	r0, r3, #23
 800a0fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a100:	d516      	bpl.n	800a130 <_dtoa_r+0x380>
 800a102:	4bb2      	ldr	r3, [pc, #712]	; (800a3cc <_dtoa_r+0x61c>)
 800a104:	ec51 0b19 	vmov	r0, r1, d9
 800a108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a10c:	f7f6 fbb6 	bl	800087c <__aeabi_ddiv>
 800a110:	f007 070f 	and.w	r7, r7, #15
 800a114:	4682      	mov	sl, r0
 800a116:	468b      	mov	fp, r1
 800a118:	2503      	movs	r5, #3
 800a11a:	4eac      	ldr	r6, [pc, #688]	; (800a3cc <_dtoa_r+0x61c>)
 800a11c:	b957      	cbnz	r7, 800a134 <_dtoa_r+0x384>
 800a11e:	4642      	mov	r2, r8
 800a120:	464b      	mov	r3, r9
 800a122:	4650      	mov	r0, sl
 800a124:	4659      	mov	r1, fp
 800a126:	f7f6 fba9 	bl	800087c <__aeabi_ddiv>
 800a12a:	4682      	mov	sl, r0
 800a12c:	468b      	mov	fp, r1
 800a12e:	e028      	b.n	800a182 <_dtoa_r+0x3d2>
 800a130:	2502      	movs	r5, #2
 800a132:	e7f2      	b.n	800a11a <_dtoa_r+0x36a>
 800a134:	07f9      	lsls	r1, r7, #31
 800a136:	d508      	bpl.n	800a14a <_dtoa_r+0x39a>
 800a138:	4640      	mov	r0, r8
 800a13a:	4649      	mov	r1, r9
 800a13c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a140:	f7f6 fa72 	bl	8000628 <__aeabi_dmul>
 800a144:	3501      	adds	r5, #1
 800a146:	4680      	mov	r8, r0
 800a148:	4689      	mov	r9, r1
 800a14a:	107f      	asrs	r7, r7, #1
 800a14c:	3608      	adds	r6, #8
 800a14e:	e7e5      	b.n	800a11c <_dtoa_r+0x36c>
 800a150:	f000 809b 	beq.w	800a28a <_dtoa_r+0x4da>
 800a154:	9b00      	ldr	r3, [sp, #0]
 800a156:	4f9d      	ldr	r7, [pc, #628]	; (800a3cc <_dtoa_r+0x61c>)
 800a158:	425e      	negs	r6, r3
 800a15a:	4b9b      	ldr	r3, [pc, #620]	; (800a3c8 <_dtoa_r+0x618>)
 800a15c:	f006 020f 	and.w	r2, r6, #15
 800a160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	ec51 0b19 	vmov	r0, r1, d9
 800a16c:	f7f6 fa5c 	bl	8000628 <__aeabi_dmul>
 800a170:	1136      	asrs	r6, r6, #4
 800a172:	4682      	mov	sl, r0
 800a174:	468b      	mov	fp, r1
 800a176:	2300      	movs	r3, #0
 800a178:	2502      	movs	r5, #2
 800a17a:	2e00      	cmp	r6, #0
 800a17c:	d17a      	bne.n	800a274 <_dtoa_r+0x4c4>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1d3      	bne.n	800a12a <_dtoa_r+0x37a>
 800a182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 8082 	beq.w	800a28e <_dtoa_r+0x4de>
 800a18a:	4b91      	ldr	r3, [pc, #580]	; (800a3d0 <_dtoa_r+0x620>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	4650      	mov	r0, sl
 800a190:	4659      	mov	r1, fp
 800a192:	f7f6 fcbb 	bl	8000b0c <__aeabi_dcmplt>
 800a196:	2800      	cmp	r0, #0
 800a198:	d079      	beq.n	800a28e <_dtoa_r+0x4de>
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d076      	beq.n	800a28e <_dtoa_r+0x4de>
 800a1a0:	9b02      	ldr	r3, [sp, #8]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	dd36      	ble.n	800a214 <_dtoa_r+0x464>
 800a1a6:	9b00      	ldr	r3, [sp, #0]
 800a1a8:	4650      	mov	r0, sl
 800a1aa:	4659      	mov	r1, fp
 800a1ac:	1e5f      	subs	r7, r3, #1
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	4b88      	ldr	r3, [pc, #544]	; (800a3d4 <_dtoa_r+0x624>)
 800a1b2:	f7f6 fa39 	bl	8000628 <__aeabi_dmul>
 800a1b6:	9e02      	ldr	r6, [sp, #8]
 800a1b8:	4682      	mov	sl, r0
 800a1ba:	468b      	mov	fp, r1
 800a1bc:	3501      	adds	r5, #1
 800a1be:	4628      	mov	r0, r5
 800a1c0:	f7f6 f9c8 	bl	8000554 <__aeabi_i2d>
 800a1c4:	4652      	mov	r2, sl
 800a1c6:	465b      	mov	r3, fp
 800a1c8:	f7f6 fa2e 	bl	8000628 <__aeabi_dmul>
 800a1cc:	4b82      	ldr	r3, [pc, #520]	; (800a3d8 <_dtoa_r+0x628>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f7f6 f874 	bl	80002bc <__adddf3>
 800a1d4:	46d0      	mov	r8, sl
 800a1d6:	46d9      	mov	r9, fp
 800a1d8:	4682      	mov	sl, r0
 800a1da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a1de:	2e00      	cmp	r6, #0
 800a1e0:	d158      	bne.n	800a294 <_dtoa_r+0x4e4>
 800a1e2:	4b7e      	ldr	r3, [pc, #504]	; (800a3dc <_dtoa_r+0x62c>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	f7f6 f865 	bl	80002b8 <__aeabi_dsub>
 800a1ee:	4652      	mov	r2, sl
 800a1f0:	465b      	mov	r3, fp
 800a1f2:	4680      	mov	r8, r0
 800a1f4:	4689      	mov	r9, r1
 800a1f6:	f7f6 fca7 	bl	8000b48 <__aeabi_dcmpgt>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	f040 8295 	bne.w	800a72a <_dtoa_r+0x97a>
 800a200:	4652      	mov	r2, sl
 800a202:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a206:	4640      	mov	r0, r8
 800a208:	4649      	mov	r1, r9
 800a20a:	f7f6 fc7f 	bl	8000b0c <__aeabi_dcmplt>
 800a20e:	2800      	cmp	r0, #0
 800a210:	f040 8289 	bne.w	800a726 <_dtoa_r+0x976>
 800a214:	ec5b ab19 	vmov	sl, fp, d9
 800a218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f2c0 8148 	blt.w	800a4b0 <_dtoa_r+0x700>
 800a220:	9a00      	ldr	r2, [sp, #0]
 800a222:	2a0e      	cmp	r2, #14
 800a224:	f300 8144 	bgt.w	800a4b0 <_dtoa_r+0x700>
 800a228:	4b67      	ldr	r3, [pc, #412]	; (800a3c8 <_dtoa_r+0x618>)
 800a22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a22e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a234:	2b00      	cmp	r3, #0
 800a236:	f280 80d5 	bge.w	800a3e4 <_dtoa_r+0x634>
 800a23a:	9b03      	ldr	r3, [sp, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f300 80d1 	bgt.w	800a3e4 <_dtoa_r+0x634>
 800a242:	f040 826f 	bne.w	800a724 <_dtoa_r+0x974>
 800a246:	4b65      	ldr	r3, [pc, #404]	; (800a3dc <_dtoa_r+0x62c>)
 800a248:	2200      	movs	r2, #0
 800a24a:	4640      	mov	r0, r8
 800a24c:	4649      	mov	r1, r9
 800a24e:	f7f6 f9eb 	bl	8000628 <__aeabi_dmul>
 800a252:	4652      	mov	r2, sl
 800a254:	465b      	mov	r3, fp
 800a256:	f7f6 fc6d 	bl	8000b34 <__aeabi_dcmpge>
 800a25a:	9e03      	ldr	r6, [sp, #12]
 800a25c:	4637      	mov	r7, r6
 800a25e:	2800      	cmp	r0, #0
 800a260:	f040 8245 	bne.w	800a6ee <_dtoa_r+0x93e>
 800a264:	9d01      	ldr	r5, [sp, #4]
 800a266:	2331      	movs	r3, #49	; 0x31
 800a268:	f805 3b01 	strb.w	r3, [r5], #1
 800a26c:	9b00      	ldr	r3, [sp, #0]
 800a26e:	3301      	adds	r3, #1
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	e240      	b.n	800a6f6 <_dtoa_r+0x946>
 800a274:	07f2      	lsls	r2, r6, #31
 800a276:	d505      	bpl.n	800a284 <_dtoa_r+0x4d4>
 800a278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a27c:	f7f6 f9d4 	bl	8000628 <__aeabi_dmul>
 800a280:	3501      	adds	r5, #1
 800a282:	2301      	movs	r3, #1
 800a284:	1076      	asrs	r6, r6, #1
 800a286:	3708      	adds	r7, #8
 800a288:	e777      	b.n	800a17a <_dtoa_r+0x3ca>
 800a28a:	2502      	movs	r5, #2
 800a28c:	e779      	b.n	800a182 <_dtoa_r+0x3d2>
 800a28e:	9f00      	ldr	r7, [sp, #0]
 800a290:	9e03      	ldr	r6, [sp, #12]
 800a292:	e794      	b.n	800a1be <_dtoa_r+0x40e>
 800a294:	9901      	ldr	r1, [sp, #4]
 800a296:	4b4c      	ldr	r3, [pc, #304]	; (800a3c8 <_dtoa_r+0x618>)
 800a298:	4431      	add	r1, r6
 800a29a:	910d      	str	r1, [sp, #52]	; 0x34
 800a29c:	9908      	ldr	r1, [sp, #32]
 800a29e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a2a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2a6:	2900      	cmp	r1, #0
 800a2a8:	d043      	beq.n	800a332 <_dtoa_r+0x582>
 800a2aa:	494d      	ldr	r1, [pc, #308]	; (800a3e0 <_dtoa_r+0x630>)
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	f7f6 fae5 	bl	800087c <__aeabi_ddiv>
 800a2b2:	4652      	mov	r2, sl
 800a2b4:	465b      	mov	r3, fp
 800a2b6:	f7f5 ffff 	bl	80002b8 <__aeabi_dsub>
 800a2ba:	9d01      	ldr	r5, [sp, #4]
 800a2bc:	4682      	mov	sl, r0
 800a2be:	468b      	mov	fp, r1
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	f7f6 fc60 	bl	8000b88 <__aeabi_d2iz>
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	f7f6 f943 	bl	8000554 <__aeabi_i2d>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	f7f5 ffef 	bl	80002b8 <__aeabi_dsub>
 800a2da:	3630      	adds	r6, #48	; 0x30
 800a2dc:	f805 6b01 	strb.w	r6, [r5], #1
 800a2e0:	4652      	mov	r2, sl
 800a2e2:	465b      	mov	r3, fp
 800a2e4:	4680      	mov	r8, r0
 800a2e6:	4689      	mov	r9, r1
 800a2e8:	f7f6 fc10 	bl	8000b0c <__aeabi_dcmplt>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d163      	bne.n	800a3b8 <_dtoa_r+0x608>
 800a2f0:	4642      	mov	r2, r8
 800a2f2:	464b      	mov	r3, r9
 800a2f4:	4936      	ldr	r1, [pc, #216]	; (800a3d0 <_dtoa_r+0x620>)
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	f7f5 ffde 	bl	80002b8 <__aeabi_dsub>
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	465b      	mov	r3, fp
 800a300:	f7f6 fc04 	bl	8000b0c <__aeabi_dcmplt>
 800a304:	2800      	cmp	r0, #0
 800a306:	f040 80b5 	bne.w	800a474 <_dtoa_r+0x6c4>
 800a30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a30c:	429d      	cmp	r5, r3
 800a30e:	d081      	beq.n	800a214 <_dtoa_r+0x464>
 800a310:	4b30      	ldr	r3, [pc, #192]	; (800a3d4 <_dtoa_r+0x624>)
 800a312:	2200      	movs	r2, #0
 800a314:	4650      	mov	r0, sl
 800a316:	4659      	mov	r1, fp
 800a318:	f7f6 f986 	bl	8000628 <__aeabi_dmul>
 800a31c:	4b2d      	ldr	r3, [pc, #180]	; (800a3d4 <_dtoa_r+0x624>)
 800a31e:	4682      	mov	sl, r0
 800a320:	468b      	mov	fp, r1
 800a322:	4640      	mov	r0, r8
 800a324:	4649      	mov	r1, r9
 800a326:	2200      	movs	r2, #0
 800a328:	f7f6 f97e 	bl	8000628 <__aeabi_dmul>
 800a32c:	4680      	mov	r8, r0
 800a32e:	4689      	mov	r9, r1
 800a330:	e7c6      	b.n	800a2c0 <_dtoa_r+0x510>
 800a332:	4650      	mov	r0, sl
 800a334:	4659      	mov	r1, fp
 800a336:	f7f6 f977 	bl	8000628 <__aeabi_dmul>
 800a33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a33c:	9d01      	ldr	r5, [sp, #4]
 800a33e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a340:	4682      	mov	sl, r0
 800a342:	468b      	mov	fp, r1
 800a344:	4649      	mov	r1, r9
 800a346:	4640      	mov	r0, r8
 800a348:	f7f6 fc1e 	bl	8000b88 <__aeabi_d2iz>
 800a34c:	4606      	mov	r6, r0
 800a34e:	f7f6 f901 	bl	8000554 <__aeabi_i2d>
 800a352:	3630      	adds	r6, #48	; 0x30
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4640      	mov	r0, r8
 800a35a:	4649      	mov	r1, r9
 800a35c:	f7f5 ffac 	bl	80002b8 <__aeabi_dsub>
 800a360:	f805 6b01 	strb.w	r6, [r5], #1
 800a364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a366:	429d      	cmp	r5, r3
 800a368:	4680      	mov	r8, r0
 800a36a:	4689      	mov	r9, r1
 800a36c:	f04f 0200 	mov.w	r2, #0
 800a370:	d124      	bne.n	800a3bc <_dtoa_r+0x60c>
 800a372:	4b1b      	ldr	r3, [pc, #108]	; (800a3e0 <_dtoa_r+0x630>)
 800a374:	4650      	mov	r0, sl
 800a376:	4659      	mov	r1, fp
 800a378:	f7f5 ffa0 	bl	80002bc <__adddf3>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4640      	mov	r0, r8
 800a382:	4649      	mov	r1, r9
 800a384:	f7f6 fbe0 	bl	8000b48 <__aeabi_dcmpgt>
 800a388:	2800      	cmp	r0, #0
 800a38a:	d173      	bne.n	800a474 <_dtoa_r+0x6c4>
 800a38c:	4652      	mov	r2, sl
 800a38e:	465b      	mov	r3, fp
 800a390:	4913      	ldr	r1, [pc, #76]	; (800a3e0 <_dtoa_r+0x630>)
 800a392:	2000      	movs	r0, #0
 800a394:	f7f5 ff90 	bl	80002b8 <__aeabi_dsub>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4640      	mov	r0, r8
 800a39e:	4649      	mov	r1, r9
 800a3a0:	f7f6 fbb4 	bl	8000b0c <__aeabi_dcmplt>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	f43f af35 	beq.w	800a214 <_dtoa_r+0x464>
 800a3aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a3ac:	1e6b      	subs	r3, r5, #1
 800a3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3b4:	2b30      	cmp	r3, #48	; 0x30
 800a3b6:	d0f8      	beq.n	800a3aa <_dtoa_r+0x5fa>
 800a3b8:	9700      	str	r7, [sp, #0]
 800a3ba:	e049      	b.n	800a450 <_dtoa_r+0x6a0>
 800a3bc:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <_dtoa_r+0x624>)
 800a3be:	f7f6 f933 	bl	8000628 <__aeabi_dmul>
 800a3c2:	4680      	mov	r8, r0
 800a3c4:	4689      	mov	r9, r1
 800a3c6:	e7bd      	b.n	800a344 <_dtoa_r+0x594>
 800a3c8:	0800c1c8 	.word	0x0800c1c8
 800a3cc:	0800c1a0 	.word	0x0800c1a0
 800a3d0:	3ff00000 	.word	0x3ff00000
 800a3d4:	40240000 	.word	0x40240000
 800a3d8:	401c0000 	.word	0x401c0000
 800a3dc:	40140000 	.word	0x40140000
 800a3e0:	3fe00000 	.word	0x3fe00000
 800a3e4:	9d01      	ldr	r5, [sp, #4]
 800a3e6:	4656      	mov	r6, sl
 800a3e8:	465f      	mov	r7, fp
 800a3ea:	4642      	mov	r2, r8
 800a3ec:	464b      	mov	r3, r9
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	4639      	mov	r1, r7
 800a3f2:	f7f6 fa43 	bl	800087c <__aeabi_ddiv>
 800a3f6:	f7f6 fbc7 	bl	8000b88 <__aeabi_d2iz>
 800a3fa:	4682      	mov	sl, r0
 800a3fc:	f7f6 f8aa 	bl	8000554 <__aeabi_i2d>
 800a400:	4642      	mov	r2, r8
 800a402:	464b      	mov	r3, r9
 800a404:	f7f6 f910 	bl	8000628 <__aeabi_dmul>
 800a408:	4602      	mov	r2, r0
 800a40a:	460b      	mov	r3, r1
 800a40c:	4630      	mov	r0, r6
 800a40e:	4639      	mov	r1, r7
 800a410:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a414:	f7f5 ff50 	bl	80002b8 <__aeabi_dsub>
 800a418:	f805 6b01 	strb.w	r6, [r5], #1
 800a41c:	9e01      	ldr	r6, [sp, #4]
 800a41e:	9f03      	ldr	r7, [sp, #12]
 800a420:	1bae      	subs	r6, r5, r6
 800a422:	42b7      	cmp	r7, r6
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	d135      	bne.n	800a496 <_dtoa_r+0x6e6>
 800a42a:	f7f5 ff47 	bl	80002bc <__adddf3>
 800a42e:	4642      	mov	r2, r8
 800a430:	464b      	mov	r3, r9
 800a432:	4606      	mov	r6, r0
 800a434:	460f      	mov	r7, r1
 800a436:	f7f6 fb87 	bl	8000b48 <__aeabi_dcmpgt>
 800a43a:	b9d0      	cbnz	r0, 800a472 <_dtoa_r+0x6c2>
 800a43c:	4642      	mov	r2, r8
 800a43e:	464b      	mov	r3, r9
 800a440:	4630      	mov	r0, r6
 800a442:	4639      	mov	r1, r7
 800a444:	f7f6 fb58 	bl	8000af8 <__aeabi_dcmpeq>
 800a448:	b110      	cbz	r0, 800a450 <_dtoa_r+0x6a0>
 800a44a:	f01a 0f01 	tst.w	sl, #1
 800a44e:	d110      	bne.n	800a472 <_dtoa_r+0x6c2>
 800a450:	4620      	mov	r0, r4
 800a452:	ee18 1a10 	vmov	r1, s16
 800a456:	f000 fd09 	bl	800ae6c <_Bfree>
 800a45a:	2300      	movs	r3, #0
 800a45c:	9800      	ldr	r0, [sp, #0]
 800a45e:	702b      	strb	r3, [r5, #0]
 800a460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a462:	3001      	adds	r0, #1
 800a464:	6018      	str	r0, [r3, #0]
 800a466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f43f acf1 	beq.w	8009e50 <_dtoa_r+0xa0>
 800a46e:	601d      	str	r5, [r3, #0]
 800a470:	e4ee      	b.n	8009e50 <_dtoa_r+0xa0>
 800a472:	9f00      	ldr	r7, [sp, #0]
 800a474:	462b      	mov	r3, r5
 800a476:	461d      	mov	r5, r3
 800a478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a47c:	2a39      	cmp	r2, #57	; 0x39
 800a47e:	d106      	bne.n	800a48e <_dtoa_r+0x6de>
 800a480:	9a01      	ldr	r2, [sp, #4]
 800a482:	429a      	cmp	r2, r3
 800a484:	d1f7      	bne.n	800a476 <_dtoa_r+0x6c6>
 800a486:	9901      	ldr	r1, [sp, #4]
 800a488:	2230      	movs	r2, #48	; 0x30
 800a48a:	3701      	adds	r7, #1
 800a48c:	700a      	strb	r2, [r1, #0]
 800a48e:	781a      	ldrb	r2, [r3, #0]
 800a490:	3201      	adds	r2, #1
 800a492:	701a      	strb	r2, [r3, #0]
 800a494:	e790      	b.n	800a3b8 <_dtoa_r+0x608>
 800a496:	4ba6      	ldr	r3, [pc, #664]	; (800a730 <_dtoa_r+0x980>)
 800a498:	2200      	movs	r2, #0
 800a49a:	f7f6 f8c5 	bl	8000628 <__aeabi_dmul>
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	460f      	mov	r7, r1
 800a4a6:	f7f6 fb27 	bl	8000af8 <__aeabi_dcmpeq>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d09d      	beq.n	800a3ea <_dtoa_r+0x63a>
 800a4ae:	e7cf      	b.n	800a450 <_dtoa_r+0x6a0>
 800a4b0:	9a08      	ldr	r2, [sp, #32]
 800a4b2:	2a00      	cmp	r2, #0
 800a4b4:	f000 80d7 	beq.w	800a666 <_dtoa_r+0x8b6>
 800a4b8:	9a06      	ldr	r2, [sp, #24]
 800a4ba:	2a01      	cmp	r2, #1
 800a4bc:	f300 80ba 	bgt.w	800a634 <_dtoa_r+0x884>
 800a4c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4c2:	2a00      	cmp	r2, #0
 800a4c4:	f000 80b2 	beq.w	800a62c <_dtoa_r+0x87c>
 800a4c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4cc:	9e07      	ldr	r6, [sp, #28]
 800a4ce:	9d04      	ldr	r5, [sp, #16]
 800a4d0:	9a04      	ldr	r2, [sp, #16]
 800a4d2:	441a      	add	r2, r3
 800a4d4:	9204      	str	r2, [sp, #16]
 800a4d6:	9a05      	ldr	r2, [sp, #20]
 800a4d8:	2101      	movs	r1, #1
 800a4da:	441a      	add	r2, r3
 800a4dc:	4620      	mov	r0, r4
 800a4de:	9205      	str	r2, [sp, #20]
 800a4e0:	f000 fd7c 	bl	800afdc <__i2b>
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	2d00      	cmp	r5, #0
 800a4e8:	dd0c      	ble.n	800a504 <_dtoa_r+0x754>
 800a4ea:	9b05      	ldr	r3, [sp, #20]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	dd09      	ble.n	800a504 <_dtoa_r+0x754>
 800a4f0:	42ab      	cmp	r3, r5
 800a4f2:	9a04      	ldr	r2, [sp, #16]
 800a4f4:	bfa8      	it	ge
 800a4f6:	462b      	movge	r3, r5
 800a4f8:	1ad2      	subs	r2, r2, r3
 800a4fa:	9204      	str	r2, [sp, #16]
 800a4fc:	9a05      	ldr	r2, [sp, #20]
 800a4fe:	1aed      	subs	r5, r5, r3
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	9305      	str	r3, [sp, #20]
 800a504:	9b07      	ldr	r3, [sp, #28]
 800a506:	b31b      	cbz	r3, 800a550 <_dtoa_r+0x7a0>
 800a508:	9b08      	ldr	r3, [sp, #32]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 80af 	beq.w	800a66e <_dtoa_r+0x8be>
 800a510:	2e00      	cmp	r6, #0
 800a512:	dd13      	ble.n	800a53c <_dtoa_r+0x78c>
 800a514:	4639      	mov	r1, r7
 800a516:	4632      	mov	r2, r6
 800a518:	4620      	mov	r0, r4
 800a51a:	f000 fe1f 	bl	800b15c <__pow5mult>
 800a51e:	ee18 2a10 	vmov	r2, s16
 800a522:	4601      	mov	r1, r0
 800a524:	4607      	mov	r7, r0
 800a526:	4620      	mov	r0, r4
 800a528:	f000 fd6e 	bl	800b008 <__multiply>
 800a52c:	ee18 1a10 	vmov	r1, s16
 800a530:	4680      	mov	r8, r0
 800a532:	4620      	mov	r0, r4
 800a534:	f000 fc9a 	bl	800ae6c <_Bfree>
 800a538:	ee08 8a10 	vmov	s16, r8
 800a53c:	9b07      	ldr	r3, [sp, #28]
 800a53e:	1b9a      	subs	r2, r3, r6
 800a540:	d006      	beq.n	800a550 <_dtoa_r+0x7a0>
 800a542:	ee18 1a10 	vmov	r1, s16
 800a546:	4620      	mov	r0, r4
 800a548:	f000 fe08 	bl	800b15c <__pow5mult>
 800a54c:	ee08 0a10 	vmov	s16, r0
 800a550:	2101      	movs	r1, #1
 800a552:	4620      	mov	r0, r4
 800a554:	f000 fd42 	bl	800afdc <__i2b>
 800a558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	4606      	mov	r6, r0
 800a55e:	f340 8088 	ble.w	800a672 <_dtoa_r+0x8c2>
 800a562:	461a      	mov	r2, r3
 800a564:	4601      	mov	r1, r0
 800a566:	4620      	mov	r0, r4
 800a568:	f000 fdf8 	bl	800b15c <__pow5mult>
 800a56c:	9b06      	ldr	r3, [sp, #24]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	4606      	mov	r6, r0
 800a572:	f340 8081 	ble.w	800a678 <_dtoa_r+0x8c8>
 800a576:	f04f 0800 	mov.w	r8, #0
 800a57a:	6933      	ldr	r3, [r6, #16]
 800a57c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a580:	6918      	ldr	r0, [r3, #16]
 800a582:	f000 fcdb 	bl	800af3c <__hi0bits>
 800a586:	f1c0 0020 	rsb	r0, r0, #32
 800a58a:	9b05      	ldr	r3, [sp, #20]
 800a58c:	4418      	add	r0, r3
 800a58e:	f010 001f 	ands.w	r0, r0, #31
 800a592:	f000 8092 	beq.w	800a6ba <_dtoa_r+0x90a>
 800a596:	f1c0 0320 	rsb	r3, r0, #32
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	f340 808a 	ble.w	800a6b4 <_dtoa_r+0x904>
 800a5a0:	f1c0 001c 	rsb	r0, r0, #28
 800a5a4:	9b04      	ldr	r3, [sp, #16]
 800a5a6:	4403      	add	r3, r0
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	9b05      	ldr	r3, [sp, #20]
 800a5ac:	4403      	add	r3, r0
 800a5ae:	4405      	add	r5, r0
 800a5b0:	9305      	str	r3, [sp, #20]
 800a5b2:	9b04      	ldr	r3, [sp, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dd07      	ble.n	800a5c8 <_dtoa_r+0x818>
 800a5b8:	ee18 1a10 	vmov	r1, s16
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f000 fe26 	bl	800b210 <__lshift>
 800a5c4:	ee08 0a10 	vmov	s16, r0
 800a5c8:	9b05      	ldr	r3, [sp, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dd05      	ble.n	800a5da <_dtoa_r+0x82a>
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f000 fe1c 	bl	800b210 <__lshift>
 800a5d8:	4606      	mov	r6, r0
 800a5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d06e      	beq.n	800a6be <_dtoa_r+0x90e>
 800a5e0:	ee18 0a10 	vmov	r0, s16
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	f000 fe83 	bl	800b2f0 <__mcmp>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	da67      	bge.n	800a6be <_dtoa_r+0x90e>
 800a5ee:	9b00      	ldr	r3, [sp, #0]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	ee18 1a10 	vmov	r1, s16
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	220a      	movs	r2, #10
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f000 fc57 	bl	800aeb0 <__multadd>
 800a602:	9b08      	ldr	r3, [sp, #32]
 800a604:	ee08 0a10 	vmov	s16, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 81b1 	beq.w	800a970 <_dtoa_r+0xbc0>
 800a60e:	2300      	movs	r3, #0
 800a610:	4639      	mov	r1, r7
 800a612:	220a      	movs	r2, #10
 800a614:	4620      	mov	r0, r4
 800a616:	f000 fc4b 	bl	800aeb0 <__multadd>
 800a61a:	9b02      	ldr	r3, [sp, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	4607      	mov	r7, r0
 800a620:	f300 808e 	bgt.w	800a740 <_dtoa_r+0x990>
 800a624:	9b06      	ldr	r3, [sp, #24]
 800a626:	2b02      	cmp	r3, #2
 800a628:	dc51      	bgt.n	800a6ce <_dtoa_r+0x91e>
 800a62a:	e089      	b.n	800a740 <_dtoa_r+0x990>
 800a62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a62e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a632:	e74b      	b.n	800a4cc <_dtoa_r+0x71c>
 800a634:	9b03      	ldr	r3, [sp, #12]
 800a636:	1e5e      	subs	r6, r3, #1
 800a638:	9b07      	ldr	r3, [sp, #28]
 800a63a:	42b3      	cmp	r3, r6
 800a63c:	bfbf      	itttt	lt
 800a63e:	9b07      	ldrlt	r3, [sp, #28]
 800a640:	9607      	strlt	r6, [sp, #28]
 800a642:	1af2      	sublt	r2, r6, r3
 800a644:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a646:	bfb6      	itet	lt
 800a648:	189b      	addlt	r3, r3, r2
 800a64a:	1b9e      	subge	r6, r3, r6
 800a64c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a64e:	9b03      	ldr	r3, [sp, #12]
 800a650:	bfb8      	it	lt
 800a652:	2600      	movlt	r6, #0
 800a654:	2b00      	cmp	r3, #0
 800a656:	bfb7      	itett	lt
 800a658:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a65c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a660:	1a9d      	sublt	r5, r3, r2
 800a662:	2300      	movlt	r3, #0
 800a664:	e734      	b.n	800a4d0 <_dtoa_r+0x720>
 800a666:	9e07      	ldr	r6, [sp, #28]
 800a668:	9d04      	ldr	r5, [sp, #16]
 800a66a:	9f08      	ldr	r7, [sp, #32]
 800a66c:	e73b      	b.n	800a4e6 <_dtoa_r+0x736>
 800a66e:	9a07      	ldr	r2, [sp, #28]
 800a670:	e767      	b.n	800a542 <_dtoa_r+0x792>
 800a672:	9b06      	ldr	r3, [sp, #24]
 800a674:	2b01      	cmp	r3, #1
 800a676:	dc18      	bgt.n	800a6aa <_dtoa_r+0x8fa>
 800a678:	f1ba 0f00 	cmp.w	sl, #0
 800a67c:	d115      	bne.n	800a6aa <_dtoa_r+0x8fa>
 800a67e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a682:	b993      	cbnz	r3, 800a6aa <_dtoa_r+0x8fa>
 800a684:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a688:	0d1b      	lsrs	r3, r3, #20
 800a68a:	051b      	lsls	r3, r3, #20
 800a68c:	b183      	cbz	r3, 800a6b0 <_dtoa_r+0x900>
 800a68e:	9b04      	ldr	r3, [sp, #16]
 800a690:	3301      	adds	r3, #1
 800a692:	9304      	str	r3, [sp, #16]
 800a694:	9b05      	ldr	r3, [sp, #20]
 800a696:	3301      	adds	r3, #1
 800a698:	9305      	str	r3, [sp, #20]
 800a69a:	f04f 0801 	mov.w	r8, #1
 800a69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f47f af6a 	bne.w	800a57a <_dtoa_r+0x7ca>
 800a6a6:	2001      	movs	r0, #1
 800a6a8:	e76f      	b.n	800a58a <_dtoa_r+0x7da>
 800a6aa:	f04f 0800 	mov.w	r8, #0
 800a6ae:	e7f6      	b.n	800a69e <_dtoa_r+0x8ee>
 800a6b0:	4698      	mov	r8, r3
 800a6b2:	e7f4      	b.n	800a69e <_dtoa_r+0x8ee>
 800a6b4:	f43f af7d 	beq.w	800a5b2 <_dtoa_r+0x802>
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	301c      	adds	r0, #28
 800a6bc:	e772      	b.n	800a5a4 <_dtoa_r+0x7f4>
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	dc37      	bgt.n	800a734 <_dtoa_r+0x984>
 800a6c4:	9b06      	ldr	r3, [sp, #24]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	dd34      	ble.n	800a734 <_dtoa_r+0x984>
 800a6ca:	9b03      	ldr	r3, [sp, #12]
 800a6cc:	9302      	str	r3, [sp, #8]
 800a6ce:	9b02      	ldr	r3, [sp, #8]
 800a6d0:	b96b      	cbnz	r3, 800a6ee <_dtoa_r+0x93e>
 800a6d2:	4631      	mov	r1, r6
 800a6d4:	2205      	movs	r2, #5
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f000 fbea 	bl	800aeb0 <__multadd>
 800a6dc:	4601      	mov	r1, r0
 800a6de:	4606      	mov	r6, r0
 800a6e0:	ee18 0a10 	vmov	r0, s16
 800a6e4:	f000 fe04 	bl	800b2f0 <__mcmp>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	f73f adbb 	bgt.w	800a264 <_dtoa_r+0x4b4>
 800a6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f0:	9d01      	ldr	r5, [sp, #4]
 800a6f2:	43db      	mvns	r3, r3
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	f04f 0800 	mov.w	r8, #0
 800a6fa:	4631      	mov	r1, r6
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f000 fbb5 	bl	800ae6c <_Bfree>
 800a702:	2f00      	cmp	r7, #0
 800a704:	f43f aea4 	beq.w	800a450 <_dtoa_r+0x6a0>
 800a708:	f1b8 0f00 	cmp.w	r8, #0
 800a70c:	d005      	beq.n	800a71a <_dtoa_r+0x96a>
 800a70e:	45b8      	cmp	r8, r7
 800a710:	d003      	beq.n	800a71a <_dtoa_r+0x96a>
 800a712:	4641      	mov	r1, r8
 800a714:	4620      	mov	r0, r4
 800a716:	f000 fba9 	bl	800ae6c <_Bfree>
 800a71a:	4639      	mov	r1, r7
 800a71c:	4620      	mov	r0, r4
 800a71e:	f000 fba5 	bl	800ae6c <_Bfree>
 800a722:	e695      	b.n	800a450 <_dtoa_r+0x6a0>
 800a724:	2600      	movs	r6, #0
 800a726:	4637      	mov	r7, r6
 800a728:	e7e1      	b.n	800a6ee <_dtoa_r+0x93e>
 800a72a:	9700      	str	r7, [sp, #0]
 800a72c:	4637      	mov	r7, r6
 800a72e:	e599      	b.n	800a264 <_dtoa_r+0x4b4>
 800a730:	40240000 	.word	0x40240000
 800a734:	9b08      	ldr	r3, [sp, #32]
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 80ca 	beq.w	800a8d0 <_dtoa_r+0xb20>
 800a73c:	9b03      	ldr	r3, [sp, #12]
 800a73e:	9302      	str	r3, [sp, #8]
 800a740:	2d00      	cmp	r5, #0
 800a742:	dd05      	ble.n	800a750 <_dtoa_r+0x9a0>
 800a744:	4639      	mov	r1, r7
 800a746:	462a      	mov	r2, r5
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 fd61 	bl	800b210 <__lshift>
 800a74e:	4607      	mov	r7, r0
 800a750:	f1b8 0f00 	cmp.w	r8, #0
 800a754:	d05b      	beq.n	800a80e <_dtoa_r+0xa5e>
 800a756:	6879      	ldr	r1, [r7, #4]
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 fb47 	bl	800adec <_Balloc>
 800a75e:	4605      	mov	r5, r0
 800a760:	b928      	cbnz	r0, 800a76e <_dtoa_r+0x9be>
 800a762:	4b87      	ldr	r3, [pc, #540]	; (800a980 <_dtoa_r+0xbd0>)
 800a764:	4602      	mov	r2, r0
 800a766:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a76a:	f7ff bb3b 	b.w	8009de4 <_dtoa_r+0x34>
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	3202      	adds	r2, #2
 800a772:	0092      	lsls	r2, r2, #2
 800a774:	f107 010c 	add.w	r1, r7, #12
 800a778:	300c      	adds	r0, #12
 800a77a:	f7fe fbb1 	bl	8008ee0 <memcpy>
 800a77e:	2201      	movs	r2, #1
 800a780:	4629      	mov	r1, r5
 800a782:	4620      	mov	r0, r4
 800a784:	f000 fd44 	bl	800b210 <__lshift>
 800a788:	9b01      	ldr	r3, [sp, #4]
 800a78a:	f103 0901 	add.w	r9, r3, #1
 800a78e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a792:	4413      	add	r3, r2
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	f00a 0301 	and.w	r3, sl, #1
 800a79a:	46b8      	mov	r8, r7
 800a79c:	9304      	str	r3, [sp, #16]
 800a79e:	4607      	mov	r7, r0
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	ee18 0a10 	vmov	r0, s16
 800a7a6:	f7ff fa77 	bl	8009c98 <quorem>
 800a7aa:	4641      	mov	r1, r8
 800a7ac:	9002      	str	r0, [sp, #8]
 800a7ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a7b2:	ee18 0a10 	vmov	r0, s16
 800a7b6:	f000 fd9b 	bl	800b2f0 <__mcmp>
 800a7ba:	463a      	mov	r2, r7
 800a7bc:	9003      	str	r0, [sp, #12]
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 fdb1 	bl	800b328 <__mdiff>
 800a7c6:	68c2      	ldr	r2, [r0, #12]
 800a7c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	bb02      	cbnz	r2, 800a812 <_dtoa_r+0xa62>
 800a7d0:	4601      	mov	r1, r0
 800a7d2:	ee18 0a10 	vmov	r0, s16
 800a7d6:	f000 fd8b 	bl	800b2f0 <__mcmp>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	4629      	mov	r1, r5
 800a7de:	4620      	mov	r0, r4
 800a7e0:	9207      	str	r2, [sp, #28]
 800a7e2:	f000 fb43 	bl	800ae6c <_Bfree>
 800a7e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a7ea:	ea43 0102 	orr.w	r1, r3, r2
 800a7ee:	9b04      	ldr	r3, [sp, #16]
 800a7f0:	430b      	orrs	r3, r1
 800a7f2:	464d      	mov	r5, r9
 800a7f4:	d10f      	bne.n	800a816 <_dtoa_r+0xa66>
 800a7f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a7fa:	d02a      	beq.n	800a852 <_dtoa_r+0xaa2>
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dd02      	ble.n	800a808 <_dtoa_r+0xa58>
 800a802:	9b02      	ldr	r3, [sp, #8]
 800a804:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a808:	f88b a000 	strb.w	sl, [fp]
 800a80c:	e775      	b.n	800a6fa <_dtoa_r+0x94a>
 800a80e:	4638      	mov	r0, r7
 800a810:	e7ba      	b.n	800a788 <_dtoa_r+0x9d8>
 800a812:	2201      	movs	r2, #1
 800a814:	e7e2      	b.n	800a7dc <_dtoa_r+0xa2c>
 800a816:	9b03      	ldr	r3, [sp, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	db04      	blt.n	800a826 <_dtoa_r+0xa76>
 800a81c:	9906      	ldr	r1, [sp, #24]
 800a81e:	430b      	orrs	r3, r1
 800a820:	9904      	ldr	r1, [sp, #16]
 800a822:	430b      	orrs	r3, r1
 800a824:	d122      	bne.n	800a86c <_dtoa_r+0xabc>
 800a826:	2a00      	cmp	r2, #0
 800a828:	ddee      	ble.n	800a808 <_dtoa_r+0xa58>
 800a82a:	ee18 1a10 	vmov	r1, s16
 800a82e:	2201      	movs	r2, #1
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fced 	bl	800b210 <__lshift>
 800a836:	4631      	mov	r1, r6
 800a838:	ee08 0a10 	vmov	s16, r0
 800a83c:	f000 fd58 	bl	800b2f0 <__mcmp>
 800a840:	2800      	cmp	r0, #0
 800a842:	dc03      	bgt.n	800a84c <_dtoa_r+0xa9c>
 800a844:	d1e0      	bne.n	800a808 <_dtoa_r+0xa58>
 800a846:	f01a 0f01 	tst.w	sl, #1
 800a84a:	d0dd      	beq.n	800a808 <_dtoa_r+0xa58>
 800a84c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a850:	d1d7      	bne.n	800a802 <_dtoa_r+0xa52>
 800a852:	2339      	movs	r3, #57	; 0x39
 800a854:	f88b 3000 	strb.w	r3, [fp]
 800a858:	462b      	mov	r3, r5
 800a85a:	461d      	mov	r5, r3
 800a85c:	3b01      	subs	r3, #1
 800a85e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a862:	2a39      	cmp	r2, #57	; 0x39
 800a864:	d071      	beq.n	800a94a <_dtoa_r+0xb9a>
 800a866:	3201      	adds	r2, #1
 800a868:	701a      	strb	r2, [r3, #0]
 800a86a:	e746      	b.n	800a6fa <_dtoa_r+0x94a>
 800a86c:	2a00      	cmp	r2, #0
 800a86e:	dd07      	ble.n	800a880 <_dtoa_r+0xad0>
 800a870:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a874:	d0ed      	beq.n	800a852 <_dtoa_r+0xaa2>
 800a876:	f10a 0301 	add.w	r3, sl, #1
 800a87a:	f88b 3000 	strb.w	r3, [fp]
 800a87e:	e73c      	b.n	800a6fa <_dtoa_r+0x94a>
 800a880:	9b05      	ldr	r3, [sp, #20]
 800a882:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a886:	4599      	cmp	r9, r3
 800a888:	d047      	beq.n	800a91a <_dtoa_r+0xb6a>
 800a88a:	ee18 1a10 	vmov	r1, s16
 800a88e:	2300      	movs	r3, #0
 800a890:	220a      	movs	r2, #10
 800a892:	4620      	mov	r0, r4
 800a894:	f000 fb0c 	bl	800aeb0 <__multadd>
 800a898:	45b8      	cmp	r8, r7
 800a89a:	ee08 0a10 	vmov	s16, r0
 800a89e:	f04f 0300 	mov.w	r3, #0
 800a8a2:	f04f 020a 	mov.w	r2, #10
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	d106      	bne.n	800a8ba <_dtoa_r+0xb0a>
 800a8ac:	f000 fb00 	bl	800aeb0 <__multadd>
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	4607      	mov	r7, r0
 800a8b4:	f109 0901 	add.w	r9, r9, #1
 800a8b8:	e772      	b.n	800a7a0 <_dtoa_r+0x9f0>
 800a8ba:	f000 faf9 	bl	800aeb0 <__multadd>
 800a8be:	4639      	mov	r1, r7
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	220a      	movs	r2, #10
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f000 faf2 	bl	800aeb0 <__multadd>
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	e7f1      	b.n	800a8b4 <_dtoa_r+0xb04>
 800a8d0:	9b03      	ldr	r3, [sp, #12]
 800a8d2:	9302      	str	r3, [sp, #8]
 800a8d4:	9d01      	ldr	r5, [sp, #4]
 800a8d6:	ee18 0a10 	vmov	r0, s16
 800a8da:	4631      	mov	r1, r6
 800a8dc:	f7ff f9dc 	bl	8009c98 <quorem>
 800a8e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8e4:	9b01      	ldr	r3, [sp, #4]
 800a8e6:	f805 ab01 	strb.w	sl, [r5], #1
 800a8ea:	1aea      	subs	r2, r5, r3
 800a8ec:	9b02      	ldr	r3, [sp, #8]
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	dd09      	ble.n	800a906 <_dtoa_r+0xb56>
 800a8f2:	ee18 1a10 	vmov	r1, s16
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	220a      	movs	r2, #10
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 fad8 	bl	800aeb0 <__multadd>
 800a900:	ee08 0a10 	vmov	s16, r0
 800a904:	e7e7      	b.n	800a8d6 <_dtoa_r+0xb26>
 800a906:	9b02      	ldr	r3, [sp, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bfc8      	it	gt
 800a90c:	461d      	movgt	r5, r3
 800a90e:	9b01      	ldr	r3, [sp, #4]
 800a910:	bfd8      	it	le
 800a912:	2501      	movle	r5, #1
 800a914:	441d      	add	r5, r3
 800a916:	f04f 0800 	mov.w	r8, #0
 800a91a:	ee18 1a10 	vmov	r1, s16
 800a91e:	2201      	movs	r2, #1
 800a920:	4620      	mov	r0, r4
 800a922:	f000 fc75 	bl	800b210 <__lshift>
 800a926:	4631      	mov	r1, r6
 800a928:	ee08 0a10 	vmov	s16, r0
 800a92c:	f000 fce0 	bl	800b2f0 <__mcmp>
 800a930:	2800      	cmp	r0, #0
 800a932:	dc91      	bgt.n	800a858 <_dtoa_r+0xaa8>
 800a934:	d102      	bne.n	800a93c <_dtoa_r+0xb8c>
 800a936:	f01a 0f01 	tst.w	sl, #1
 800a93a:	d18d      	bne.n	800a858 <_dtoa_r+0xaa8>
 800a93c:	462b      	mov	r3, r5
 800a93e:	461d      	mov	r5, r3
 800a940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a944:	2a30      	cmp	r2, #48	; 0x30
 800a946:	d0fa      	beq.n	800a93e <_dtoa_r+0xb8e>
 800a948:	e6d7      	b.n	800a6fa <_dtoa_r+0x94a>
 800a94a:	9a01      	ldr	r2, [sp, #4]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d184      	bne.n	800a85a <_dtoa_r+0xaaa>
 800a950:	9b00      	ldr	r3, [sp, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	2331      	movs	r3, #49	; 0x31
 800a958:	7013      	strb	r3, [r2, #0]
 800a95a:	e6ce      	b.n	800a6fa <_dtoa_r+0x94a>
 800a95c:	4b09      	ldr	r3, [pc, #36]	; (800a984 <_dtoa_r+0xbd4>)
 800a95e:	f7ff ba95 	b.w	8009e8c <_dtoa_r+0xdc>
 800a962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a964:	2b00      	cmp	r3, #0
 800a966:	f47f aa6e 	bne.w	8009e46 <_dtoa_r+0x96>
 800a96a:	4b07      	ldr	r3, [pc, #28]	; (800a988 <_dtoa_r+0xbd8>)
 800a96c:	f7ff ba8e 	b.w	8009e8c <_dtoa_r+0xdc>
 800a970:	9b02      	ldr	r3, [sp, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dcae      	bgt.n	800a8d4 <_dtoa_r+0xb24>
 800a976:	9b06      	ldr	r3, [sp, #24]
 800a978:	2b02      	cmp	r3, #2
 800a97a:	f73f aea8 	bgt.w	800a6ce <_dtoa_r+0x91e>
 800a97e:	e7a9      	b.n	800a8d4 <_dtoa_r+0xb24>
 800a980:	0800c0cf 	.word	0x0800c0cf
 800a984:	0800c02c 	.word	0x0800c02c
 800a988:	0800c050 	.word	0x0800c050

0800a98c <__sflush_r>:
 800a98c:	898a      	ldrh	r2, [r1, #12]
 800a98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a992:	4605      	mov	r5, r0
 800a994:	0710      	lsls	r0, r2, #28
 800a996:	460c      	mov	r4, r1
 800a998:	d458      	bmi.n	800aa4c <__sflush_r+0xc0>
 800a99a:	684b      	ldr	r3, [r1, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	dc05      	bgt.n	800a9ac <__sflush_r+0x20>
 800a9a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	dc02      	bgt.n	800a9ac <__sflush_r+0x20>
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	d0f9      	beq.n	800a9a6 <__sflush_r+0x1a>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9b8:	682f      	ldr	r7, [r5, #0]
 800a9ba:	602b      	str	r3, [r5, #0]
 800a9bc:	d032      	beq.n	800aa24 <__sflush_r+0x98>
 800a9be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	075a      	lsls	r2, r3, #29
 800a9c4:	d505      	bpl.n	800a9d2 <__sflush_r+0x46>
 800a9c6:	6863      	ldr	r3, [r4, #4]
 800a9c8:	1ac0      	subs	r0, r0, r3
 800a9ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9cc:	b10b      	cbz	r3, 800a9d2 <__sflush_r+0x46>
 800a9ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9d0:	1ac0      	subs	r0, r0, r3
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9d8:	6a21      	ldr	r1, [r4, #32]
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b0      	blx	r6
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	d106      	bne.n	800a9f2 <__sflush_r+0x66>
 800a9e4:	6829      	ldr	r1, [r5, #0]
 800a9e6:	291d      	cmp	r1, #29
 800a9e8:	d82c      	bhi.n	800aa44 <__sflush_r+0xb8>
 800a9ea:	4a2a      	ldr	r2, [pc, #168]	; (800aa94 <__sflush_r+0x108>)
 800a9ec:	40ca      	lsrs	r2, r1
 800a9ee:	07d6      	lsls	r6, r2, #31
 800a9f0:	d528      	bpl.n	800aa44 <__sflush_r+0xb8>
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	6062      	str	r2, [r4, #4]
 800a9f6:	04d9      	lsls	r1, r3, #19
 800a9f8:	6922      	ldr	r2, [r4, #16]
 800a9fa:	6022      	str	r2, [r4, #0]
 800a9fc:	d504      	bpl.n	800aa08 <__sflush_r+0x7c>
 800a9fe:	1c42      	adds	r2, r0, #1
 800aa00:	d101      	bne.n	800aa06 <__sflush_r+0x7a>
 800aa02:	682b      	ldr	r3, [r5, #0]
 800aa04:	b903      	cbnz	r3, 800aa08 <__sflush_r+0x7c>
 800aa06:	6560      	str	r0, [r4, #84]	; 0x54
 800aa08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa0a:	602f      	str	r7, [r5, #0]
 800aa0c:	2900      	cmp	r1, #0
 800aa0e:	d0ca      	beq.n	800a9a6 <__sflush_r+0x1a>
 800aa10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa14:	4299      	cmp	r1, r3
 800aa16:	d002      	beq.n	800aa1e <__sflush_r+0x92>
 800aa18:	4628      	mov	r0, r5
 800aa1a:	f7fe fa77 	bl	8008f0c <_free_r>
 800aa1e:	2000      	movs	r0, #0
 800aa20:	6360      	str	r0, [r4, #52]	; 0x34
 800aa22:	e7c1      	b.n	800a9a8 <__sflush_r+0x1c>
 800aa24:	6a21      	ldr	r1, [r4, #32]
 800aa26:	2301      	movs	r3, #1
 800aa28:	4628      	mov	r0, r5
 800aa2a:	47b0      	blx	r6
 800aa2c:	1c41      	adds	r1, r0, #1
 800aa2e:	d1c7      	bne.n	800a9c0 <__sflush_r+0x34>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d0c4      	beq.n	800a9c0 <__sflush_r+0x34>
 800aa36:	2b1d      	cmp	r3, #29
 800aa38:	d001      	beq.n	800aa3e <__sflush_r+0xb2>
 800aa3a:	2b16      	cmp	r3, #22
 800aa3c:	d101      	bne.n	800aa42 <__sflush_r+0xb6>
 800aa3e:	602f      	str	r7, [r5, #0]
 800aa40:	e7b1      	b.n	800a9a6 <__sflush_r+0x1a>
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa48:	81a3      	strh	r3, [r4, #12]
 800aa4a:	e7ad      	b.n	800a9a8 <__sflush_r+0x1c>
 800aa4c:	690f      	ldr	r7, [r1, #16]
 800aa4e:	2f00      	cmp	r7, #0
 800aa50:	d0a9      	beq.n	800a9a6 <__sflush_r+0x1a>
 800aa52:	0793      	lsls	r3, r2, #30
 800aa54:	680e      	ldr	r6, [r1, #0]
 800aa56:	bf08      	it	eq
 800aa58:	694b      	ldreq	r3, [r1, #20]
 800aa5a:	600f      	str	r7, [r1, #0]
 800aa5c:	bf18      	it	ne
 800aa5e:	2300      	movne	r3, #0
 800aa60:	eba6 0807 	sub.w	r8, r6, r7
 800aa64:	608b      	str	r3, [r1, #8]
 800aa66:	f1b8 0f00 	cmp.w	r8, #0
 800aa6a:	dd9c      	ble.n	800a9a6 <__sflush_r+0x1a>
 800aa6c:	6a21      	ldr	r1, [r4, #32]
 800aa6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa70:	4643      	mov	r3, r8
 800aa72:	463a      	mov	r2, r7
 800aa74:	4628      	mov	r0, r5
 800aa76:	47b0      	blx	r6
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	dc06      	bgt.n	800aa8a <__sflush_r+0xfe>
 800aa7c:	89a3      	ldrh	r3, [r4, #12]
 800aa7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa82:	81a3      	strh	r3, [r4, #12]
 800aa84:	f04f 30ff 	mov.w	r0, #4294967295
 800aa88:	e78e      	b.n	800a9a8 <__sflush_r+0x1c>
 800aa8a:	4407      	add	r7, r0
 800aa8c:	eba8 0800 	sub.w	r8, r8, r0
 800aa90:	e7e9      	b.n	800aa66 <__sflush_r+0xda>
 800aa92:	bf00      	nop
 800aa94:	20400001 	.word	0x20400001

0800aa98 <_fflush_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	690b      	ldr	r3, [r1, #16]
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	b913      	cbnz	r3, 800aaa8 <_fflush_r+0x10>
 800aaa2:	2500      	movs	r5, #0
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	b118      	cbz	r0, 800aab2 <_fflush_r+0x1a>
 800aaaa:	6983      	ldr	r3, [r0, #24]
 800aaac:	b90b      	cbnz	r3, 800aab2 <_fflush_r+0x1a>
 800aaae:	f000 f887 	bl	800abc0 <__sinit>
 800aab2:	4b14      	ldr	r3, [pc, #80]	; (800ab04 <_fflush_r+0x6c>)
 800aab4:	429c      	cmp	r4, r3
 800aab6:	d11b      	bne.n	800aaf0 <_fflush_r+0x58>
 800aab8:	686c      	ldr	r4, [r5, #4]
 800aaba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d0ef      	beq.n	800aaa2 <_fflush_r+0xa>
 800aac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aac4:	07d0      	lsls	r0, r2, #31
 800aac6:	d404      	bmi.n	800aad2 <_fflush_r+0x3a>
 800aac8:	0599      	lsls	r1, r3, #22
 800aaca:	d402      	bmi.n	800aad2 <_fflush_r+0x3a>
 800aacc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aace:	f000 f91a 	bl	800ad06 <__retarget_lock_acquire_recursive>
 800aad2:	4628      	mov	r0, r5
 800aad4:	4621      	mov	r1, r4
 800aad6:	f7ff ff59 	bl	800a98c <__sflush_r>
 800aada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aadc:	07da      	lsls	r2, r3, #31
 800aade:	4605      	mov	r5, r0
 800aae0:	d4e0      	bmi.n	800aaa4 <_fflush_r+0xc>
 800aae2:	89a3      	ldrh	r3, [r4, #12]
 800aae4:	059b      	lsls	r3, r3, #22
 800aae6:	d4dd      	bmi.n	800aaa4 <_fflush_r+0xc>
 800aae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaea:	f000 f90d 	bl	800ad08 <__retarget_lock_release_recursive>
 800aaee:	e7d9      	b.n	800aaa4 <_fflush_r+0xc>
 800aaf0:	4b05      	ldr	r3, [pc, #20]	; (800ab08 <_fflush_r+0x70>)
 800aaf2:	429c      	cmp	r4, r3
 800aaf4:	d101      	bne.n	800aafa <_fflush_r+0x62>
 800aaf6:	68ac      	ldr	r4, [r5, #8]
 800aaf8:	e7df      	b.n	800aaba <_fflush_r+0x22>
 800aafa:	4b04      	ldr	r3, [pc, #16]	; (800ab0c <_fflush_r+0x74>)
 800aafc:	429c      	cmp	r4, r3
 800aafe:	bf08      	it	eq
 800ab00:	68ec      	ldreq	r4, [r5, #12]
 800ab02:	e7da      	b.n	800aaba <_fflush_r+0x22>
 800ab04:	0800c100 	.word	0x0800c100
 800ab08:	0800c120 	.word	0x0800c120
 800ab0c:	0800c0e0 	.word	0x0800c0e0

0800ab10 <std>:
 800ab10:	2300      	movs	r3, #0
 800ab12:	b510      	push	{r4, lr}
 800ab14:	4604      	mov	r4, r0
 800ab16:	e9c0 3300 	strd	r3, r3, [r0]
 800ab1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab1e:	6083      	str	r3, [r0, #8]
 800ab20:	8181      	strh	r1, [r0, #12]
 800ab22:	6643      	str	r3, [r0, #100]	; 0x64
 800ab24:	81c2      	strh	r2, [r0, #14]
 800ab26:	6183      	str	r3, [r0, #24]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	2208      	movs	r2, #8
 800ab2c:	305c      	adds	r0, #92	; 0x5c
 800ab2e:	f7fe f9e5 	bl	8008efc <memset>
 800ab32:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <std+0x38>)
 800ab34:	6263      	str	r3, [r4, #36]	; 0x24
 800ab36:	4b05      	ldr	r3, [pc, #20]	; (800ab4c <std+0x3c>)
 800ab38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab3a:	4b05      	ldr	r3, [pc, #20]	; (800ab50 <std+0x40>)
 800ab3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab3e:	4b05      	ldr	r3, [pc, #20]	; (800ab54 <std+0x44>)
 800ab40:	6224      	str	r4, [r4, #32]
 800ab42:	6323      	str	r3, [r4, #48]	; 0x30
 800ab44:	bd10      	pop	{r4, pc}
 800ab46:	bf00      	nop
 800ab48:	0800b865 	.word	0x0800b865
 800ab4c:	0800b887 	.word	0x0800b887
 800ab50:	0800b8bf 	.word	0x0800b8bf
 800ab54:	0800b8e3 	.word	0x0800b8e3

0800ab58 <_cleanup_r>:
 800ab58:	4901      	ldr	r1, [pc, #4]	; (800ab60 <_cleanup_r+0x8>)
 800ab5a:	f000 b8af 	b.w	800acbc <_fwalk_reent>
 800ab5e:	bf00      	nop
 800ab60:	0800aa99 	.word	0x0800aa99

0800ab64 <__sfmoreglue>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	2268      	movs	r2, #104	; 0x68
 800ab68:	1e4d      	subs	r5, r1, #1
 800ab6a:	4355      	muls	r5, r2
 800ab6c:	460e      	mov	r6, r1
 800ab6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab72:	f7fe fa37 	bl	8008fe4 <_malloc_r>
 800ab76:	4604      	mov	r4, r0
 800ab78:	b140      	cbz	r0, 800ab8c <__sfmoreglue+0x28>
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ab80:	300c      	adds	r0, #12
 800ab82:	60a0      	str	r0, [r4, #8]
 800ab84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab88:	f7fe f9b8 	bl	8008efc <memset>
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}

0800ab90 <__sfp_lock_acquire>:
 800ab90:	4801      	ldr	r0, [pc, #4]	; (800ab98 <__sfp_lock_acquire+0x8>)
 800ab92:	f000 b8b8 	b.w	800ad06 <__retarget_lock_acquire_recursive>
 800ab96:	bf00      	nop
 800ab98:	200030b1 	.word	0x200030b1

0800ab9c <__sfp_lock_release>:
 800ab9c:	4801      	ldr	r0, [pc, #4]	; (800aba4 <__sfp_lock_release+0x8>)
 800ab9e:	f000 b8b3 	b.w	800ad08 <__retarget_lock_release_recursive>
 800aba2:	bf00      	nop
 800aba4:	200030b1 	.word	0x200030b1

0800aba8 <__sinit_lock_acquire>:
 800aba8:	4801      	ldr	r0, [pc, #4]	; (800abb0 <__sinit_lock_acquire+0x8>)
 800abaa:	f000 b8ac 	b.w	800ad06 <__retarget_lock_acquire_recursive>
 800abae:	bf00      	nop
 800abb0:	200030b2 	.word	0x200030b2

0800abb4 <__sinit_lock_release>:
 800abb4:	4801      	ldr	r0, [pc, #4]	; (800abbc <__sinit_lock_release+0x8>)
 800abb6:	f000 b8a7 	b.w	800ad08 <__retarget_lock_release_recursive>
 800abba:	bf00      	nop
 800abbc:	200030b2 	.word	0x200030b2

0800abc0 <__sinit>:
 800abc0:	b510      	push	{r4, lr}
 800abc2:	4604      	mov	r4, r0
 800abc4:	f7ff fff0 	bl	800aba8 <__sinit_lock_acquire>
 800abc8:	69a3      	ldr	r3, [r4, #24]
 800abca:	b11b      	cbz	r3, 800abd4 <__sinit+0x14>
 800abcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abd0:	f7ff bff0 	b.w	800abb4 <__sinit_lock_release>
 800abd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abd8:	6523      	str	r3, [r4, #80]	; 0x50
 800abda:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <__sinit+0x68>)
 800abdc:	4a13      	ldr	r2, [pc, #76]	; (800ac2c <__sinit+0x6c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	62a2      	str	r2, [r4, #40]	; 0x28
 800abe2:	42a3      	cmp	r3, r4
 800abe4:	bf04      	itt	eq
 800abe6:	2301      	moveq	r3, #1
 800abe8:	61a3      	streq	r3, [r4, #24]
 800abea:	4620      	mov	r0, r4
 800abec:	f000 f820 	bl	800ac30 <__sfp>
 800abf0:	6060      	str	r0, [r4, #4]
 800abf2:	4620      	mov	r0, r4
 800abf4:	f000 f81c 	bl	800ac30 <__sfp>
 800abf8:	60a0      	str	r0, [r4, #8]
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 f818 	bl	800ac30 <__sfp>
 800ac00:	2200      	movs	r2, #0
 800ac02:	60e0      	str	r0, [r4, #12]
 800ac04:	2104      	movs	r1, #4
 800ac06:	6860      	ldr	r0, [r4, #4]
 800ac08:	f7ff ff82 	bl	800ab10 <std>
 800ac0c:	68a0      	ldr	r0, [r4, #8]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	2109      	movs	r1, #9
 800ac12:	f7ff ff7d 	bl	800ab10 <std>
 800ac16:	68e0      	ldr	r0, [r4, #12]
 800ac18:	2202      	movs	r2, #2
 800ac1a:	2112      	movs	r1, #18
 800ac1c:	f7ff ff78 	bl	800ab10 <std>
 800ac20:	2301      	movs	r3, #1
 800ac22:	61a3      	str	r3, [r4, #24]
 800ac24:	e7d2      	b.n	800abcc <__sinit+0xc>
 800ac26:	bf00      	nop
 800ac28:	0800c018 	.word	0x0800c018
 800ac2c:	0800ab59 	.word	0x0800ab59

0800ac30 <__sfp>:
 800ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac32:	4607      	mov	r7, r0
 800ac34:	f7ff ffac 	bl	800ab90 <__sfp_lock_acquire>
 800ac38:	4b1e      	ldr	r3, [pc, #120]	; (800acb4 <__sfp+0x84>)
 800ac3a:	681e      	ldr	r6, [r3, #0]
 800ac3c:	69b3      	ldr	r3, [r6, #24]
 800ac3e:	b913      	cbnz	r3, 800ac46 <__sfp+0x16>
 800ac40:	4630      	mov	r0, r6
 800ac42:	f7ff ffbd 	bl	800abc0 <__sinit>
 800ac46:	3648      	adds	r6, #72	; 0x48
 800ac48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	d503      	bpl.n	800ac58 <__sfp+0x28>
 800ac50:	6833      	ldr	r3, [r6, #0]
 800ac52:	b30b      	cbz	r3, 800ac98 <__sfp+0x68>
 800ac54:	6836      	ldr	r6, [r6, #0]
 800ac56:	e7f7      	b.n	800ac48 <__sfp+0x18>
 800ac58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac5c:	b9d5      	cbnz	r5, 800ac94 <__sfp+0x64>
 800ac5e:	4b16      	ldr	r3, [pc, #88]	; (800acb8 <__sfp+0x88>)
 800ac60:	60e3      	str	r3, [r4, #12]
 800ac62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac66:	6665      	str	r5, [r4, #100]	; 0x64
 800ac68:	f000 f84c 	bl	800ad04 <__retarget_lock_init_recursive>
 800ac6c:	f7ff ff96 	bl	800ab9c <__sfp_lock_release>
 800ac70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac78:	6025      	str	r5, [r4, #0]
 800ac7a:	61a5      	str	r5, [r4, #24]
 800ac7c:	2208      	movs	r2, #8
 800ac7e:	4629      	mov	r1, r5
 800ac80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac84:	f7fe f93a 	bl	8008efc <memset>
 800ac88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac90:	4620      	mov	r0, r4
 800ac92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac94:	3468      	adds	r4, #104	; 0x68
 800ac96:	e7d9      	b.n	800ac4c <__sfp+0x1c>
 800ac98:	2104      	movs	r1, #4
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	f7ff ff62 	bl	800ab64 <__sfmoreglue>
 800aca0:	4604      	mov	r4, r0
 800aca2:	6030      	str	r0, [r6, #0]
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d1d5      	bne.n	800ac54 <__sfp+0x24>
 800aca8:	f7ff ff78 	bl	800ab9c <__sfp_lock_release>
 800acac:	230c      	movs	r3, #12
 800acae:	603b      	str	r3, [r7, #0]
 800acb0:	e7ee      	b.n	800ac90 <__sfp+0x60>
 800acb2:	bf00      	nop
 800acb4:	0800c018 	.word	0x0800c018
 800acb8:	ffff0001 	.word	0xffff0001

0800acbc <_fwalk_reent>:
 800acbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc0:	4606      	mov	r6, r0
 800acc2:	4688      	mov	r8, r1
 800acc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acc8:	2700      	movs	r7, #0
 800acca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acce:	f1b9 0901 	subs.w	r9, r9, #1
 800acd2:	d505      	bpl.n	800ace0 <_fwalk_reent+0x24>
 800acd4:	6824      	ldr	r4, [r4, #0]
 800acd6:	2c00      	cmp	r4, #0
 800acd8:	d1f7      	bne.n	800acca <_fwalk_reent+0xe>
 800acda:	4638      	mov	r0, r7
 800acdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ace0:	89ab      	ldrh	r3, [r5, #12]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d907      	bls.n	800acf6 <_fwalk_reent+0x3a>
 800ace6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acea:	3301      	adds	r3, #1
 800acec:	d003      	beq.n	800acf6 <_fwalk_reent+0x3a>
 800acee:	4629      	mov	r1, r5
 800acf0:	4630      	mov	r0, r6
 800acf2:	47c0      	blx	r8
 800acf4:	4307      	orrs	r7, r0
 800acf6:	3568      	adds	r5, #104	; 0x68
 800acf8:	e7e9      	b.n	800acce <_fwalk_reent+0x12>
	...

0800acfc <_localeconv_r>:
 800acfc:	4800      	ldr	r0, [pc, #0]	; (800ad00 <_localeconv_r+0x4>)
 800acfe:	4770      	bx	lr
 800ad00:	2000017c 	.word	0x2000017c

0800ad04 <__retarget_lock_init_recursive>:
 800ad04:	4770      	bx	lr

0800ad06 <__retarget_lock_acquire_recursive>:
 800ad06:	4770      	bx	lr

0800ad08 <__retarget_lock_release_recursive>:
 800ad08:	4770      	bx	lr

0800ad0a <__swhatbuf_r>:
 800ad0a:	b570      	push	{r4, r5, r6, lr}
 800ad0c:	460e      	mov	r6, r1
 800ad0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad12:	2900      	cmp	r1, #0
 800ad14:	b096      	sub	sp, #88	; 0x58
 800ad16:	4614      	mov	r4, r2
 800ad18:	461d      	mov	r5, r3
 800ad1a:	da08      	bge.n	800ad2e <__swhatbuf_r+0x24>
 800ad1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	602a      	str	r2, [r5, #0]
 800ad24:	061a      	lsls	r2, r3, #24
 800ad26:	d410      	bmi.n	800ad4a <__swhatbuf_r+0x40>
 800ad28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad2c:	e00e      	b.n	800ad4c <__swhatbuf_r+0x42>
 800ad2e:	466a      	mov	r2, sp
 800ad30:	f000 fe2e 	bl	800b990 <_fstat_r>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	dbf1      	blt.n	800ad1c <__swhatbuf_r+0x12>
 800ad38:	9a01      	ldr	r2, [sp, #4]
 800ad3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad42:	425a      	negs	r2, r3
 800ad44:	415a      	adcs	r2, r3
 800ad46:	602a      	str	r2, [r5, #0]
 800ad48:	e7ee      	b.n	800ad28 <__swhatbuf_r+0x1e>
 800ad4a:	2340      	movs	r3, #64	; 0x40
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	6023      	str	r3, [r4, #0]
 800ad50:	b016      	add	sp, #88	; 0x58
 800ad52:	bd70      	pop	{r4, r5, r6, pc}

0800ad54 <__smakebuf_r>:
 800ad54:	898b      	ldrh	r3, [r1, #12]
 800ad56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad58:	079d      	lsls	r5, r3, #30
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	d507      	bpl.n	800ad70 <__smakebuf_r+0x1c>
 800ad60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	6123      	str	r3, [r4, #16]
 800ad68:	2301      	movs	r3, #1
 800ad6a:	6163      	str	r3, [r4, #20]
 800ad6c:	b002      	add	sp, #8
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}
 800ad70:	ab01      	add	r3, sp, #4
 800ad72:	466a      	mov	r2, sp
 800ad74:	f7ff ffc9 	bl	800ad0a <__swhatbuf_r>
 800ad78:	9900      	ldr	r1, [sp, #0]
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	f7fe f931 	bl	8008fe4 <_malloc_r>
 800ad82:	b948      	cbnz	r0, 800ad98 <__smakebuf_r+0x44>
 800ad84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad88:	059a      	lsls	r2, r3, #22
 800ad8a:	d4ef      	bmi.n	800ad6c <__smakebuf_r+0x18>
 800ad8c:	f023 0303 	bic.w	r3, r3, #3
 800ad90:	f043 0302 	orr.w	r3, r3, #2
 800ad94:	81a3      	strh	r3, [r4, #12]
 800ad96:	e7e3      	b.n	800ad60 <__smakebuf_r+0xc>
 800ad98:	4b0d      	ldr	r3, [pc, #52]	; (800add0 <__smakebuf_r+0x7c>)
 800ad9a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	6020      	str	r0, [r4, #0]
 800ada0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada4:	81a3      	strh	r3, [r4, #12]
 800ada6:	9b00      	ldr	r3, [sp, #0]
 800ada8:	6163      	str	r3, [r4, #20]
 800adaa:	9b01      	ldr	r3, [sp, #4]
 800adac:	6120      	str	r0, [r4, #16]
 800adae:	b15b      	cbz	r3, 800adc8 <__smakebuf_r+0x74>
 800adb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adb4:	4630      	mov	r0, r6
 800adb6:	f000 fdfd 	bl	800b9b4 <_isatty_r>
 800adba:	b128      	cbz	r0, 800adc8 <__smakebuf_r+0x74>
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	f023 0303 	bic.w	r3, r3, #3
 800adc2:	f043 0301 	orr.w	r3, r3, #1
 800adc6:	81a3      	strh	r3, [r4, #12]
 800adc8:	89a0      	ldrh	r0, [r4, #12]
 800adca:	4305      	orrs	r5, r0
 800adcc:	81a5      	strh	r5, [r4, #12]
 800adce:	e7cd      	b.n	800ad6c <__smakebuf_r+0x18>
 800add0:	0800ab59 	.word	0x0800ab59

0800add4 <__malloc_lock>:
 800add4:	4801      	ldr	r0, [pc, #4]	; (800addc <__malloc_lock+0x8>)
 800add6:	f7ff bf96 	b.w	800ad06 <__retarget_lock_acquire_recursive>
 800adda:	bf00      	nop
 800addc:	200030b0 	.word	0x200030b0

0800ade0 <__malloc_unlock>:
 800ade0:	4801      	ldr	r0, [pc, #4]	; (800ade8 <__malloc_unlock+0x8>)
 800ade2:	f7ff bf91 	b.w	800ad08 <__retarget_lock_release_recursive>
 800ade6:	bf00      	nop
 800ade8:	200030b0 	.word	0x200030b0

0800adec <_Balloc>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800adf0:	4604      	mov	r4, r0
 800adf2:	460d      	mov	r5, r1
 800adf4:	b976      	cbnz	r6, 800ae14 <_Balloc+0x28>
 800adf6:	2010      	movs	r0, #16
 800adf8:	f7fe f862 	bl	8008ec0 <malloc>
 800adfc:	4602      	mov	r2, r0
 800adfe:	6260      	str	r0, [r4, #36]	; 0x24
 800ae00:	b920      	cbnz	r0, 800ae0c <_Balloc+0x20>
 800ae02:	4b18      	ldr	r3, [pc, #96]	; (800ae64 <_Balloc+0x78>)
 800ae04:	4818      	ldr	r0, [pc, #96]	; (800ae68 <_Balloc+0x7c>)
 800ae06:	2166      	movs	r1, #102	; 0x66
 800ae08:	f000 fd82 	bl	800b910 <__assert_func>
 800ae0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae10:	6006      	str	r6, [r0, #0]
 800ae12:	60c6      	str	r6, [r0, #12]
 800ae14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae16:	68f3      	ldr	r3, [r6, #12]
 800ae18:	b183      	cbz	r3, 800ae3c <_Balloc+0x50>
 800ae1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae22:	b9b8      	cbnz	r0, 800ae54 <_Balloc+0x68>
 800ae24:	2101      	movs	r1, #1
 800ae26:	fa01 f605 	lsl.w	r6, r1, r5
 800ae2a:	1d72      	adds	r2, r6, #5
 800ae2c:	0092      	lsls	r2, r2, #2
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f000 fb60 	bl	800b4f4 <_calloc_r>
 800ae34:	b160      	cbz	r0, 800ae50 <_Balloc+0x64>
 800ae36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae3a:	e00e      	b.n	800ae5a <_Balloc+0x6e>
 800ae3c:	2221      	movs	r2, #33	; 0x21
 800ae3e:	2104      	movs	r1, #4
 800ae40:	4620      	mov	r0, r4
 800ae42:	f000 fb57 	bl	800b4f4 <_calloc_r>
 800ae46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae48:	60f0      	str	r0, [r6, #12]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e4      	bne.n	800ae1a <_Balloc+0x2e>
 800ae50:	2000      	movs	r0, #0
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	6802      	ldr	r2, [r0, #0]
 800ae56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae60:	e7f7      	b.n	800ae52 <_Balloc+0x66>
 800ae62:	bf00      	nop
 800ae64:	0800c05d 	.word	0x0800c05d
 800ae68:	0800c140 	.word	0x0800c140

0800ae6c <_Bfree>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae70:	4605      	mov	r5, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	b976      	cbnz	r6, 800ae94 <_Bfree+0x28>
 800ae76:	2010      	movs	r0, #16
 800ae78:	f7fe f822 	bl	8008ec0 <malloc>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	6268      	str	r0, [r5, #36]	; 0x24
 800ae80:	b920      	cbnz	r0, 800ae8c <_Bfree+0x20>
 800ae82:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <_Bfree+0x3c>)
 800ae84:	4809      	ldr	r0, [pc, #36]	; (800aeac <_Bfree+0x40>)
 800ae86:	218a      	movs	r1, #138	; 0x8a
 800ae88:	f000 fd42 	bl	800b910 <__assert_func>
 800ae8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae90:	6006      	str	r6, [r0, #0]
 800ae92:	60c6      	str	r6, [r0, #12]
 800ae94:	b13c      	cbz	r4, 800aea6 <_Bfree+0x3a>
 800ae96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae98:	6862      	ldr	r2, [r4, #4]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aea0:	6021      	str	r1, [r4, #0]
 800aea2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	0800c05d 	.word	0x0800c05d
 800aeac:	0800c140 	.word	0x0800c140

0800aeb0 <__multadd>:
 800aeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb4:	690d      	ldr	r5, [r1, #16]
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	460c      	mov	r4, r1
 800aeba:	461e      	mov	r6, r3
 800aebc:	f101 0c14 	add.w	ip, r1, #20
 800aec0:	2000      	movs	r0, #0
 800aec2:	f8dc 3000 	ldr.w	r3, [ip]
 800aec6:	b299      	uxth	r1, r3
 800aec8:	fb02 6101 	mla	r1, r2, r1, r6
 800aecc:	0c1e      	lsrs	r6, r3, #16
 800aece:	0c0b      	lsrs	r3, r1, #16
 800aed0:	fb02 3306 	mla	r3, r2, r6, r3
 800aed4:	b289      	uxth	r1, r1
 800aed6:	3001      	adds	r0, #1
 800aed8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aedc:	4285      	cmp	r5, r0
 800aede:	f84c 1b04 	str.w	r1, [ip], #4
 800aee2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aee6:	dcec      	bgt.n	800aec2 <__multadd+0x12>
 800aee8:	b30e      	cbz	r6, 800af2e <__multadd+0x7e>
 800aeea:	68a3      	ldr	r3, [r4, #8]
 800aeec:	42ab      	cmp	r3, r5
 800aeee:	dc19      	bgt.n	800af24 <__multadd+0x74>
 800aef0:	6861      	ldr	r1, [r4, #4]
 800aef2:	4638      	mov	r0, r7
 800aef4:	3101      	adds	r1, #1
 800aef6:	f7ff ff79 	bl	800adec <_Balloc>
 800aefa:	4680      	mov	r8, r0
 800aefc:	b928      	cbnz	r0, 800af0a <__multadd+0x5a>
 800aefe:	4602      	mov	r2, r0
 800af00:	4b0c      	ldr	r3, [pc, #48]	; (800af34 <__multadd+0x84>)
 800af02:	480d      	ldr	r0, [pc, #52]	; (800af38 <__multadd+0x88>)
 800af04:	21b5      	movs	r1, #181	; 0xb5
 800af06:	f000 fd03 	bl	800b910 <__assert_func>
 800af0a:	6922      	ldr	r2, [r4, #16]
 800af0c:	3202      	adds	r2, #2
 800af0e:	f104 010c 	add.w	r1, r4, #12
 800af12:	0092      	lsls	r2, r2, #2
 800af14:	300c      	adds	r0, #12
 800af16:	f7fd ffe3 	bl	8008ee0 <memcpy>
 800af1a:	4621      	mov	r1, r4
 800af1c:	4638      	mov	r0, r7
 800af1e:	f7ff ffa5 	bl	800ae6c <_Bfree>
 800af22:	4644      	mov	r4, r8
 800af24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af28:	3501      	adds	r5, #1
 800af2a:	615e      	str	r6, [r3, #20]
 800af2c:	6125      	str	r5, [r4, #16]
 800af2e:	4620      	mov	r0, r4
 800af30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af34:	0800c0cf 	.word	0x0800c0cf
 800af38:	0800c140 	.word	0x0800c140

0800af3c <__hi0bits>:
 800af3c:	0c03      	lsrs	r3, r0, #16
 800af3e:	041b      	lsls	r3, r3, #16
 800af40:	b9d3      	cbnz	r3, 800af78 <__hi0bits+0x3c>
 800af42:	0400      	lsls	r0, r0, #16
 800af44:	2310      	movs	r3, #16
 800af46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af4a:	bf04      	itt	eq
 800af4c:	0200      	lsleq	r0, r0, #8
 800af4e:	3308      	addeq	r3, #8
 800af50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af54:	bf04      	itt	eq
 800af56:	0100      	lsleq	r0, r0, #4
 800af58:	3304      	addeq	r3, #4
 800af5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af5e:	bf04      	itt	eq
 800af60:	0080      	lsleq	r0, r0, #2
 800af62:	3302      	addeq	r3, #2
 800af64:	2800      	cmp	r0, #0
 800af66:	db05      	blt.n	800af74 <__hi0bits+0x38>
 800af68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af6c:	f103 0301 	add.w	r3, r3, #1
 800af70:	bf08      	it	eq
 800af72:	2320      	moveq	r3, #32
 800af74:	4618      	mov	r0, r3
 800af76:	4770      	bx	lr
 800af78:	2300      	movs	r3, #0
 800af7a:	e7e4      	b.n	800af46 <__hi0bits+0xa>

0800af7c <__lo0bits>:
 800af7c:	6803      	ldr	r3, [r0, #0]
 800af7e:	f013 0207 	ands.w	r2, r3, #7
 800af82:	4601      	mov	r1, r0
 800af84:	d00b      	beq.n	800af9e <__lo0bits+0x22>
 800af86:	07da      	lsls	r2, r3, #31
 800af88:	d423      	bmi.n	800afd2 <__lo0bits+0x56>
 800af8a:	0798      	lsls	r0, r3, #30
 800af8c:	bf49      	itett	mi
 800af8e:	085b      	lsrmi	r3, r3, #1
 800af90:	089b      	lsrpl	r3, r3, #2
 800af92:	2001      	movmi	r0, #1
 800af94:	600b      	strmi	r3, [r1, #0]
 800af96:	bf5c      	itt	pl
 800af98:	600b      	strpl	r3, [r1, #0]
 800af9a:	2002      	movpl	r0, #2
 800af9c:	4770      	bx	lr
 800af9e:	b298      	uxth	r0, r3
 800afa0:	b9a8      	cbnz	r0, 800afce <__lo0bits+0x52>
 800afa2:	0c1b      	lsrs	r3, r3, #16
 800afa4:	2010      	movs	r0, #16
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	b90a      	cbnz	r2, 800afae <__lo0bits+0x32>
 800afaa:	3008      	adds	r0, #8
 800afac:	0a1b      	lsrs	r3, r3, #8
 800afae:	071a      	lsls	r2, r3, #28
 800afb0:	bf04      	itt	eq
 800afb2:	091b      	lsreq	r3, r3, #4
 800afb4:	3004      	addeq	r0, #4
 800afb6:	079a      	lsls	r2, r3, #30
 800afb8:	bf04      	itt	eq
 800afba:	089b      	lsreq	r3, r3, #2
 800afbc:	3002      	addeq	r0, #2
 800afbe:	07da      	lsls	r2, r3, #31
 800afc0:	d403      	bmi.n	800afca <__lo0bits+0x4e>
 800afc2:	085b      	lsrs	r3, r3, #1
 800afc4:	f100 0001 	add.w	r0, r0, #1
 800afc8:	d005      	beq.n	800afd6 <__lo0bits+0x5a>
 800afca:	600b      	str	r3, [r1, #0]
 800afcc:	4770      	bx	lr
 800afce:	4610      	mov	r0, r2
 800afd0:	e7e9      	b.n	800afa6 <__lo0bits+0x2a>
 800afd2:	2000      	movs	r0, #0
 800afd4:	4770      	bx	lr
 800afd6:	2020      	movs	r0, #32
 800afd8:	4770      	bx	lr
	...

0800afdc <__i2b>:
 800afdc:	b510      	push	{r4, lr}
 800afde:	460c      	mov	r4, r1
 800afe0:	2101      	movs	r1, #1
 800afe2:	f7ff ff03 	bl	800adec <_Balloc>
 800afe6:	4602      	mov	r2, r0
 800afe8:	b928      	cbnz	r0, 800aff6 <__i2b+0x1a>
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <__i2b+0x24>)
 800afec:	4805      	ldr	r0, [pc, #20]	; (800b004 <__i2b+0x28>)
 800afee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aff2:	f000 fc8d 	bl	800b910 <__assert_func>
 800aff6:	2301      	movs	r3, #1
 800aff8:	6144      	str	r4, [r0, #20]
 800affa:	6103      	str	r3, [r0, #16]
 800affc:	bd10      	pop	{r4, pc}
 800affe:	bf00      	nop
 800b000:	0800c0cf 	.word	0x0800c0cf
 800b004:	0800c140 	.word	0x0800c140

0800b008 <__multiply>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	4691      	mov	r9, r2
 800b00e:	690a      	ldr	r2, [r1, #16]
 800b010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b014:	429a      	cmp	r2, r3
 800b016:	bfb8      	it	lt
 800b018:	460b      	movlt	r3, r1
 800b01a:	460c      	mov	r4, r1
 800b01c:	bfbc      	itt	lt
 800b01e:	464c      	movlt	r4, r9
 800b020:	4699      	movlt	r9, r3
 800b022:	6927      	ldr	r7, [r4, #16]
 800b024:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b028:	68a3      	ldr	r3, [r4, #8]
 800b02a:	6861      	ldr	r1, [r4, #4]
 800b02c:	eb07 060a 	add.w	r6, r7, sl
 800b030:	42b3      	cmp	r3, r6
 800b032:	b085      	sub	sp, #20
 800b034:	bfb8      	it	lt
 800b036:	3101      	addlt	r1, #1
 800b038:	f7ff fed8 	bl	800adec <_Balloc>
 800b03c:	b930      	cbnz	r0, 800b04c <__multiply+0x44>
 800b03e:	4602      	mov	r2, r0
 800b040:	4b44      	ldr	r3, [pc, #272]	; (800b154 <__multiply+0x14c>)
 800b042:	4845      	ldr	r0, [pc, #276]	; (800b158 <__multiply+0x150>)
 800b044:	f240 115d 	movw	r1, #349	; 0x15d
 800b048:	f000 fc62 	bl	800b910 <__assert_func>
 800b04c:	f100 0514 	add.w	r5, r0, #20
 800b050:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b054:	462b      	mov	r3, r5
 800b056:	2200      	movs	r2, #0
 800b058:	4543      	cmp	r3, r8
 800b05a:	d321      	bcc.n	800b0a0 <__multiply+0x98>
 800b05c:	f104 0314 	add.w	r3, r4, #20
 800b060:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b064:	f109 0314 	add.w	r3, r9, #20
 800b068:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b06c:	9202      	str	r2, [sp, #8]
 800b06e:	1b3a      	subs	r2, r7, r4
 800b070:	3a15      	subs	r2, #21
 800b072:	f022 0203 	bic.w	r2, r2, #3
 800b076:	3204      	adds	r2, #4
 800b078:	f104 0115 	add.w	r1, r4, #21
 800b07c:	428f      	cmp	r7, r1
 800b07e:	bf38      	it	cc
 800b080:	2204      	movcc	r2, #4
 800b082:	9201      	str	r2, [sp, #4]
 800b084:	9a02      	ldr	r2, [sp, #8]
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d80c      	bhi.n	800b0a6 <__multiply+0x9e>
 800b08c:	2e00      	cmp	r6, #0
 800b08e:	dd03      	ble.n	800b098 <__multiply+0x90>
 800b090:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b094:	2b00      	cmp	r3, #0
 800b096:	d05a      	beq.n	800b14e <__multiply+0x146>
 800b098:	6106      	str	r6, [r0, #16]
 800b09a:	b005      	add	sp, #20
 800b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a0:	f843 2b04 	str.w	r2, [r3], #4
 800b0a4:	e7d8      	b.n	800b058 <__multiply+0x50>
 800b0a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0aa:	f1ba 0f00 	cmp.w	sl, #0
 800b0ae:	d024      	beq.n	800b0fa <__multiply+0xf2>
 800b0b0:	f104 0e14 	add.w	lr, r4, #20
 800b0b4:	46a9      	mov	r9, r5
 800b0b6:	f04f 0c00 	mov.w	ip, #0
 800b0ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0be:	f8d9 1000 	ldr.w	r1, [r9]
 800b0c2:	fa1f fb82 	uxth.w	fp, r2
 800b0c6:	b289      	uxth	r1, r1
 800b0c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b0cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b0d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b0d4:	4461      	add	r1, ip
 800b0d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0da:	fb0a c20b 	mla	r2, sl, fp, ip
 800b0de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0e2:	b289      	uxth	r1, r1
 800b0e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0e8:	4577      	cmp	r7, lr
 800b0ea:	f849 1b04 	str.w	r1, [r9], #4
 800b0ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0f2:	d8e2      	bhi.n	800b0ba <__multiply+0xb2>
 800b0f4:	9a01      	ldr	r2, [sp, #4]
 800b0f6:	f845 c002 	str.w	ip, [r5, r2]
 800b0fa:	9a03      	ldr	r2, [sp, #12]
 800b0fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b100:	3304      	adds	r3, #4
 800b102:	f1b9 0f00 	cmp.w	r9, #0
 800b106:	d020      	beq.n	800b14a <__multiply+0x142>
 800b108:	6829      	ldr	r1, [r5, #0]
 800b10a:	f104 0c14 	add.w	ip, r4, #20
 800b10e:	46ae      	mov	lr, r5
 800b110:	f04f 0a00 	mov.w	sl, #0
 800b114:	f8bc b000 	ldrh.w	fp, [ip]
 800b118:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b11c:	fb09 220b 	mla	r2, r9, fp, r2
 800b120:	4492      	add	sl, r2
 800b122:	b289      	uxth	r1, r1
 800b124:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b128:	f84e 1b04 	str.w	r1, [lr], #4
 800b12c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b130:	f8be 1000 	ldrh.w	r1, [lr]
 800b134:	0c12      	lsrs	r2, r2, #16
 800b136:	fb09 1102 	mla	r1, r9, r2, r1
 800b13a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b13e:	4567      	cmp	r7, ip
 800b140:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b144:	d8e6      	bhi.n	800b114 <__multiply+0x10c>
 800b146:	9a01      	ldr	r2, [sp, #4]
 800b148:	50a9      	str	r1, [r5, r2]
 800b14a:	3504      	adds	r5, #4
 800b14c:	e79a      	b.n	800b084 <__multiply+0x7c>
 800b14e:	3e01      	subs	r6, #1
 800b150:	e79c      	b.n	800b08c <__multiply+0x84>
 800b152:	bf00      	nop
 800b154:	0800c0cf 	.word	0x0800c0cf
 800b158:	0800c140 	.word	0x0800c140

0800b15c <__pow5mult>:
 800b15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b160:	4615      	mov	r5, r2
 800b162:	f012 0203 	ands.w	r2, r2, #3
 800b166:	4606      	mov	r6, r0
 800b168:	460f      	mov	r7, r1
 800b16a:	d007      	beq.n	800b17c <__pow5mult+0x20>
 800b16c:	4c25      	ldr	r4, [pc, #148]	; (800b204 <__pow5mult+0xa8>)
 800b16e:	3a01      	subs	r2, #1
 800b170:	2300      	movs	r3, #0
 800b172:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b176:	f7ff fe9b 	bl	800aeb0 <__multadd>
 800b17a:	4607      	mov	r7, r0
 800b17c:	10ad      	asrs	r5, r5, #2
 800b17e:	d03d      	beq.n	800b1fc <__pow5mult+0xa0>
 800b180:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b182:	b97c      	cbnz	r4, 800b1a4 <__pow5mult+0x48>
 800b184:	2010      	movs	r0, #16
 800b186:	f7fd fe9b 	bl	8008ec0 <malloc>
 800b18a:	4602      	mov	r2, r0
 800b18c:	6270      	str	r0, [r6, #36]	; 0x24
 800b18e:	b928      	cbnz	r0, 800b19c <__pow5mult+0x40>
 800b190:	4b1d      	ldr	r3, [pc, #116]	; (800b208 <__pow5mult+0xac>)
 800b192:	481e      	ldr	r0, [pc, #120]	; (800b20c <__pow5mult+0xb0>)
 800b194:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b198:	f000 fbba 	bl	800b910 <__assert_func>
 800b19c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1a0:	6004      	str	r4, [r0, #0]
 800b1a2:	60c4      	str	r4, [r0, #12]
 800b1a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1ac:	b94c      	cbnz	r4, 800b1c2 <__pow5mult+0x66>
 800b1ae:	f240 2171 	movw	r1, #625	; 0x271
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f7ff ff12 	bl	800afdc <__i2b>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1be:	4604      	mov	r4, r0
 800b1c0:	6003      	str	r3, [r0, #0]
 800b1c2:	f04f 0900 	mov.w	r9, #0
 800b1c6:	07eb      	lsls	r3, r5, #31
 800b1c8:	d50a      	bpl.n	800b1e0 <__pow5mult+0x84>
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f7ff ff1a 	bl	800b008 <__multiply>
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	4680      	mov	r8, r0
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7ff fe47 	bl	800ae6c <_Bfree>
 800b1de:	4647      	mov	r7, r8
 800b1e0:	106d      	asrs	r5, r5, #1
 800b1e2:	d00b      	beq.n	800b1fc <__pow5mult+0xa0>
 800b1e4:	6820      	ldr	r0, [r4, #0]
 800b1e6:	b938      	cbnz	r0, 800b1f8 <__pow5mult+0x9c>
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	4621      	mov	r1, r4
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	f7ff ff0b 	bl	800b008 <__multiply>
 800b1f2:	6020      	str	r0, [r4, #0]
 800b1f4:	f8c0 9000 	str.w	r9, [r0]
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	e7e4      	b.n	800b1c6 <__pow5mult+0x6a>
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b202:	bf00      	nop
 800b204:	0800c290 	.word	0x0800c290
 800b208:	0800c05d 	.word	0x0800c05d
 800b20c:	0800c140 	.word	0x0800c140

0800b210 <__lshift>:
 800b210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b214:	460c      	mov	r4, r1
 800b216:	6849      	ldr	r1, [r1, #4]
 800b218:	6923      	ldr	r3, [r4, #16]
 800b21a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b21e:	68a3      	ldr	r3, [r4, #8]
 800b220:	4607      	mov	r7, r0
 800b222:	4691      	mov	r9, r2
 800b224:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b228:	f108 0601 	add.w	r6, r8, #1
 800b22c:	42b3      	cmp	r3, r6
 800b22e:	db0b      	blt.n	800b248 <__lshift+0x38>
 800b230:	4638      	mov	r0, r7
 800b232:	f7ff fddb 	bl	800adec <_Balloc>
 800b236:	4605      	mov	r5, r0
 800b238:	b948      	cbnz	r0, 800b24e <__lshift+0x3e>
 800b23a:	4602      	mov	r2, r0
 800b23c:	4b2a      	ldr	r3, [pc, #168]	; (800b2e8 <__lshift+0xd8>)
 800b23e:	482b      	ldr	r0, [pc, #172]	; (800b2ec <__lshift+0xdc>)
 800b240:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b244:	f000 fb64 	bl	800b910 <__assert_func>
 800b248:	3101      	adds	r1, #1
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	e7ee      	b.n	800b22c <__lshift+0x1c>
 800b24e:	2300      	movs	r3, #0
 800b250:	f100 0114 	add.w	r1, r0, #20
 800b254:	f100 0210 	add.w	r2, r0, #16
 800b258:	4618      	mov	r0, r3
 800b25a:	4553      	cmp	r3, sl
 800b25c:	db37      	blt.n	800b2ce <__lshift+0xbe>
 800b25e:	6920      	ldr	r0, [r4, #16]
 800b260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b264:	f104 0314 	add.w	r3, r4, #20
 800b268:	f019 091f 	ands.w	r9, r9, #31
 800b26c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b270:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b274:	d02f      	beq.n	800b2d6 <__lshift+0xc6>
 800b276:	f1c9 0e20 	rsb	lr, r9, #32
 800b27a:	468a      	mov	sl, r1
 800b27c:	f04f 0c00 	mov.w	ip, #0
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	fa02 f209 	lsl.w	r2, r2, r9
 800b286:	ea42 020c 	orr.w	r2, r2, ip
 800b28a:	f84a 2b04 	str.w	r2, [sl], #4
 800b28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b292:	4298      	cmp	r0, r3
 800b294:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b298:	d8f2      	bhi.n	800b280 <__lshift+0x70>
 800b29a:	1b03      	subs	r3, r0, r4
 800b29c:	3b15      	subs	r3, #21
 800b29e:	f023 0303 	bic.w	r3, r3, #3
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	f104 0215 	add.w	r2, r4, #21
 800b2a8:	4290      	cmp	r0, r2
 800b2aa:	bf38      	it	cc
 800b2ac:	2304      	movcc	r3, #4
 800b2ae:	f841 c003 	str.w	ip, [r1, r3]
 800b2b2:	f1bc 0f00 	cmp.w	ip, #0
 800b2b6:	d001      	beq.n	800b2bc <__lshift+0xac>
 800b2b8:	f108 0602 	add.w	r6, r8, #2
 800b2bc:	3e01      	subs	r6, #1
 800b2be:	4638      	mov	r0, r7
 800b2c0:	612e      	str	r6, [r5, #16]
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	f7ff fdd2 	bl	800ae6c <_Bfree>
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	e7c1      	b.n	800b25a <__lshift+0x4a>
 800b2d6:	3904      	subs	r1, #4
 800b2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2e0:	4298      	cmp	r0, r3
 800b2e2:	d8f9      	bhi.n	800b2d8 <__lshift+0xc8>
 800b2e4:	e7ea      	b.n	800b2bc <__lshift+0xac>
 800b2e6:	bf00      	nop
 800b2e8:	0800c0cf 	.word	0x0800c0cf
 800b2ec:	0800c140 	.word	0x0800c140

0800b2f0 <__mcmp>:
 800b2f0:	b530      	push	{r4, r5, lr}
 800b2f2:	6902      	ldr	r2, [r0, #16]
 800b2f4:	690c      	ldr	r4, [r1, #16]
 800b2f6:	1b12      	subs	r2, r2, r4
 800b2f8:	d10e      	bne.n	800b318 <__mcmp+0x28>
 800b2fa:	f100 0314 	add.w	r3, r0, #20
 800b2fe:	3114      	adds	r1, #20
 800b300:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b304:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b308:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b30c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b310:	42a5      	cmp	r5, r4
 800b312:	d003      	beq.n	800b31c <__mcmp+0x2c>
 800b314:	d305      	bcc.n	800b322 <__mcmp+0x32>
 800b316:	2201      	movs	r2, #1
 800b318:	4610      	mov	r0, r2
 800b31a:	bd30      	pop	{r4, r5, pc}
 800b31c:	4283      	cmp	r3, r0
 800b31e:	d3f3      	bcc.n	800b308 <__mcmp+0x18>
 800b320:	e7fa      	b.n	800b318 <__mcmp+0x28>
 800b322:	f04f 32ff 	mov.w	r2, #4294967295
 800b326:	e7f7      	b.n	800b318 <__mcmp+0x28>

0800b328 <__mdiff>:
 800b328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	460c      	mov	r4, r1
 800b32e:	4606      	mov	r6, r0
 800b330:	4611      	mov	r1, r2
 800b332:	4620      	mov	r0, r4
 800b334:	4690      	mov	r8, r2
 800b336:	f7ff ffdb 	bl	800b2f0 <__mcmp>
 800b33a:	1e05      	subs	r5, r0, #0
 800b33c:	d110      	bne.n	800b360 <__mdiff+0x38>
 800b33e:	4629      	mov	r1, r5
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff fd53 	bl	800adec <_Balloc>
 800b346:	b930      	cbnz	r0, 800b356 <__mdiff+0x2e>
 800b348:	4b3a      	ldr	r3, [pc, #232]	; (800b434 <__mdiff+0x10c>)
 800b34a:	4602      	mov	r2, r0
 800b34c:	f240 2132 	movw	r1, #562	; 0x232
 800b350:	4839      	ldr	r0, [pc, #228]	; (800b438 <__mdiff+0x110>)
 800b352:	f000 fadd 	bl	800b910 <__assert_func>
 800b356:	2301      	movs	r3, #1
 800b358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b35c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b360:	bfa4      	itt	ge
 800b362:	4643      	movge	r3, r8
 800b364:	46a0      	movge	r8, r4
 800b366:	4630      	mov	r0, r6
 800b368:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b36c:	bfa6      	itte	ge
 800b36e:	461c      	movge	r4, r3
 800b370:	2500      	movge	r5, #0
 800b372:	2501      	movlt	r5, #1
 800b374:	f7ff fd3a 	bl	800adec <_Balloc>
 800b378:	b920      	cbnz	r0, 800b384 <__mdiff+0x5c>
 800b37a:	4b2e      	ldr	r3, [pc, #184]	; (800b434 <__mdiff+0x10c>)
 800b37c:	4602      	mov	r2, r0
 800b37e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b382:	e7e5      	b.n	800b350 <__mdiff+0x28>
 800b384:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b388:	6926      	ldr	r6, [r4, #16]
 800b38a:	60c5      	str	r5, [r0, #12]
 800b38c:	f104 0914 	add.w	r9, r4, #20
 800b390:	f108 0514 	add.w	r5, r8, #20
 800b394:	f100 0e14 	add.w	lr, r0, #20
 800b398:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b39c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3a0:	f108 0210 	add.w	r2, r8, #16
 800b3a4:	46f2      	mov	sl, lr
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3b0:	fa1f f883 	uxth.w	r8, r3
 800b3b4:	fa11 f18b 	uxtah	r1, r1, fp
 800b3b8:	0c1b      	lsrs	r3, r3, #16
 800b3ba:	eba1 0808 	sub.w	r8, r1, r8
 800b3be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3c6:	fa1f f888 	uxth.w	r8, r8
 800b3ca:	1419      	asrs	r1, r3, #16
 800b3cc:	454e      	cmp	r6, r9
 800b3ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3d2:	f84a 3b04 	str.w	r3, [sl], #4
 800b3d6:	d8e7      	bhi.n	800b3a8 <__mdiff+0x80>
 800b3d8:	1b33      	subs	r3, r6, r4
 800b3da:	3b15      	subs	r3, #21
 800b3dc:	f023 0303 	bic.w	r3, r3, #3
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	3415      	adds	r4, #21
 800b3e4:	42a6      	cmp	r6, r4
 800b3e6:	bf38      	it	cc
 800b3e8:	2304      	movcc	r3, #4
 800b3ea:	441d      	add	r5, r3
 800b3ec:	4473      	add	r3, lr
 800b3ee:	469e      	mov	lr, r3
 800b3f0:	462e      	mov	r6, r5
 800b3f2:	4566      	cmp	r6, ip
 800b3f4:	d30e      	bcc.n	800b414 <__mdiff+0xec>
 800b3f6:	f10c 0203 	add.w	r2, ip, #3
 800b3fa:	1b52      	subs	r2, r2, r5
 800b3fc:	f022 0203 	bic.w	r2, r2, #3
 800b400:	3d03      	subs	r5, #3
 800b402:	45ac      	cmp	ip, r5
 800b404:	bf38      	it	cc
 800b406:	2200      	movcc	r2, #0
 800b408:	441a      	add	r2, r3
 800b40a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b40e:	b17b      	cbz	r3, 800b430 <__mdiff+0x108>
 800b410:	6107      	str	r7, [r0, #16]
 800b412:	e7a3      	b.n	800b35c <__mdiff+0x34>
 800b414:	f856 8b04 	ldr.w	r8, [r6], #4
 800b418:	fa11 f288 	uxtah	r2, r1, r8
 800b41c:	1414      	asrs	r4, r2, #16
 800b41e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b422:	b292      	uxth	r2, r2
 800b424:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b428:	f84e 2b04 	str.w	r2, [lr], #4
 800b42c:	1421      	asrs	r1, r4, #16
 800b42e:	e7e0      	b.n	800b3f2 <__mdiff+0xca>
 800b430:	3f01      	subs	r7, #1
 800b432:	e7ea      	b.n	800b40a <__mdiff+0xe2>
 800b434:	0800c0cf 	.word	0x0800c0cf
 800b438:	0800c140 	.word	0x0800c140

0800b43c <__d2b>:
 800b43c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b440:	4689      	mov	r9, r1
 800b442:	2101      	movs	r1, #1
 800b444:	ec57 6b10 	vmov	r6, r7, d0
 800b448:	4690      	mov	r8, r2
 800b44a:	f7ff fccf 	bl	800adec <_Balloc>
 800b44e:	4604      	mov	r4, r0
 800b450:	b930      	cbnz	r0, 800b460 <__d2b+0x24>
 800b452:	4602      	mov	r2, r0
 800b454:	4b25      	ldr	r3, [pc, #148]	; (800b4ec <__d2b+0xb0>)
 800b456:	4826      	ldr	r0, [pc, #152]	; (800b4f0 <__d2b+0xb4>)
 800b458:	f240 310a 	movw	r1, #778	; 0x30a
 800b45c:	f000 fa58 	bl	800b910 <__assert_func>
 800b460:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b464:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b468:	bb35      	cbnz	r5, 800b4b8 <__d2b+0x7c>
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	d028      	beq.n	800b4c2 <__d2b+0x86>
 800b470:	4668      	mov	r0, sp
 800b472:	9600      	str	r6, [sp, #0]
 800b474:	f7ff fd82 	bl	800af7c <__lo0bits>
 800b478:	9900      	ldr	r1, [sp, #0]
 800b47a:	b300      	cbz	r0, 800b4be <__d2b+0x82>
 800b47c:	9a01      	ldr	r2, [sp, #4]
 800b47e:	f1c0 0320 	rsb	r3, r0, #32
 800b482:	fa02 f303 	lsl.w	r3, r2, r3
 800b486:	430b      	orrs	r3, r1
 800b488:	40c2      	lsrs	r2, r0
 800b48a:	6163      	str	r3, [r4, #20]
 800b48c:	9201      	str	r2, [sp, #4]
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	61a3      	str	r3, [r4, #24]
 800b492:	2b00      	cmp	r3, #0
 800b494:	bf14      	ite	ne
 800b496:	2202      	movne	r2, #2
 800b498:	2201      	moveq	r2, #1
 800b49a:	6122      	str	r2, [r4, #16]
 800b49c:	b1d5      	cbz	r5, 800b4d4 <__d2b+0x98>
 800b49e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4a2:	4405      	add	r5, r0
 800b4a4:	f8c9 5000 	str.w	r5, [r9]
 800b4a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4ac:	f8c8 0000 	str.w	r0, [r8]
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	b003      	add	sp, #12
 800b4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4bc:	e7d5      	b.n	800b46a <__d2b+0x2e>
 800b4be:	6161      	str	r1, [r4, #20]
 800b4c0:	e7e5      	b.n	800b48e <__d2b+0x52>
 800b4c2:	a801      	add	r0, sp, #4
 800b4c4:	f7ff fd5a 	bl	800af7c <__lo0bits>
 800b4c8:	9b01      	ldr	r3, [sp, #4]
 800b4ca:	6163      	str	r3, [r4, #20]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	6122      	str	r2, [r4, #16]
 800b4d0:	3020      	adds	r0, #32
 800b4d2:	e7e3      	b.n	800b49c <__d2b+0x60>
 800b4d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4dc:	f8c9 0000 	str.w	r0, [r9]
 800b4e0:	6918      	ldr	r0, [r3, #16]
 800b4e2:	f7ff fd2b 	bl	800af3c <__hi0bits>
 800b4e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4ea:	e7df      	b.n	800b4ac <__d2b+0x70>
 800b4ec:	0800c0cf 	.word	0x0800c0cf
 800b4f0:	0800c140 	.word	0x0800c140

0800b4f4 <_calloc_r>:
 800b4f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4f6:	fba1 2402 	umull	r2, r4, r1, r2
 800b4fa:	b94c      	cbnz	r4, 800b510 <_calloc_r+0x1c>
 800b4fc:	4611      	mov	r1, r2
 800b4fe:	9201      	str	r2, [sp, #4]
 800b500:	f7fd fd70 	bl	8008fe4 <_malloc_r>
 800b504:	9a01      	ldr	r2, [sp, #4]
 800b506:	4605      	mov	r5, r0
 800b508:	b930      	cbnz	r0, 800b518 <_calloc_r+0x24>
 800b50a:	4628      	mov	r0, r5
 800b50c:	b003      	add	sp, #12
 800b50e:	bd30      	pop	{r4, r5, pc}
 800b510:	220c      	movs	r2, #12
 800b512:	6002      	str	r2, [r0, #0]
 800b514:	2500      	movs	r5, #0
 800b516:	e7f8      	b.n	800b50a <_calloc_r+0x16>
 800b518:	4621      	mov	r1, r4
 800b51a:	f7fd fcef 	bl	8008efc <memset>
 800b51e:	e7f4      	b.n	800b50a <_calloc_r+0x16>

0800b520 <__sfputc_r>:
 800b520:	6893      	ldr	r3, [r2, #8]
 800b522:	3b01      	subs	r3, #1
 800b524:	2b00      	cmp	r3, #0
 800b526:	b410      	push	{r4}
 800b528:	6093      	str	r3, [r2, #8]
 800b52a:	da08      	bge.n	800b53e <__sfputc_r+0x1e>
 800b52c:	6994      	ldr	r4, [r2, #24]
 800b52e:	42a3      	cmp	r3, r4
 800b530:	db01      	blt.n	800b536 <__sfputc_r+0x16>
 800b532:	290a      	cmp	r1, #10
 800b534:	d103      	bne.n	800b53e <__sfputc_r+0x1e>
 800b536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b53a:	f7fe baed 	b.w	8009b18 <__swbuf_r>
 800b53e:	6813      	ldr	r3, [r2, #0]
 800b540:	1c58      	adds	r0, r3, #1
 800b542:	6010      	str	r0, [r2, #0]
 800b544:	7019      	strb	r1, [r3, #0]
 800b546:	4608      	mov	r0, r1
 800b548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <__sfputs_r>:
 800b54e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b550:	4606      	mov	r6, r0
 800b552:	460f      	mov	r7, r1
 800b554:	4614      	mov	r4, r2
 800b556:	18d5      	adds	r5, r2, r3
 800b558:	42ac      	cmp	r4, r5
 800b55a:	d101      	bne.n	800b560 <__sfputs_r+0x12>
 800b55c:	2000      	movs	r0, #0
 800b55e:	e007      	b.n	800b570 <__sfputs_r+0x22>
 800b560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b564:	463a      	mov	r2, r7
 800b566:	4630      	mov	r0, r6
 800b568:	f7ff ffda 	bl	800b520 <__sfputc_r>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d1f3      	bne.n	800b558 <__sfputs_r+0xa>
 800b570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b574 <_vfiprintf_r>:
 800b574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b578:	460d      	mov	r5, r1
 800b57a:	b09d      	sub	sp, #116	; 0x74
 800b57c:	4614      	mov	r4, r2
 800b57e:	4698      	mov	r8, r3
 800b580:	4606      	mov	r6, r0
 800b582:	b118      	cbz	r0, 800b58c <_vfiprintf_r+0x18>
 800b584:	6983      	ldr	r3, [r0, #24]
 800b586:	b90b      	cbnz	r3, 800b58c <_vfiprintf_r+0x18>
 800b588:	f7ff fb1a 	bl	800abc0 <__sinit>
 800b58c:	4b89      	ldr	r3, [pc, #548]	; (800b7b4 <_vfiprintf_r+0x240>)
 800b58e:	429d      	cmp	r5, r3
 800b590:	d11b      	bne.n	800b5ca <_vfiprintf_r+0x56>
 800b592:	6875      	ldr	r5, [r6, #4]
 800b594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b596:	07d9      	lsls	r1, r3, #31
 800b598:	d405      	bmi.n	800b5a6 <_vfiprintf_r+0x32>
 800b59a:	89ab      	ldrh	r3, [r5, #12]
 800b59c:	059a      	lsls	r2, r3, #22
 800b59e:	d402      	bmi.n	800b5a6 <_vfiprintf_r+0x32>
 800b5a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5a2:	f7ff fbb0 	bl	800ad06 <__retarget_lock_acquire_recursive>
 800b5a6:	89ab      	ldrh	r3, [r5, #12]
 800b5a8:	071b      	lsls	r3, r3, #28
 800b5aa:	d501      	bpl.n	800b5b0 <_vfiprintf_r+0x3c>
 800b5ac:	692b      	ldr	r3, [r5, #16]
 800b5ae:	b9eb      	cbnz	r3, 800b5ec <_vfiprintf_r+0x78>
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7fe fb02 	bl	8009bbc <__swsetup_r>
 800b5b8:	b1c0      	cbz	r0, 800b5ec <_vfiprintf_r+0x78>
 800b5ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5bc:	07dc      	lsls	r4, r3, #31
 800b5be:	d50e      	bpl.n	800b5de <_vfiprintf_r+0x6a>
 800b5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c4:	b01d      	add	sp, #116	; 0x74
 800b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ca:	4b7b      	ldr	r3, [pc, #492]	; (800b7b8 <_vfiprintf_r+0x244>)
 800b5cc:	429d      	cmp	r5, r3
 800b5ce:	d101      	bne.n	800b5d4 <_vfiprintf_r+0x60>
 800b5d0:	68b5      	ldr	r5, [r6, #8]
 800b5d2:	e7df      	b.n	800b594 <_vfiprintf_r+0x20>
 800b5d4:	4b79      	ldr	r3, [pc, #484]	; (800b7bc <_vfiprintf_r+0x248>)
 800b5d6:	429d      	cmp	r5, r3
 800b5d8:	bf08      	it	eq
 800b5da:	68f5      	ldreq	r5, [r6, #12]
 800b5dc:	e7da      	b.n	800b594 <_vfiprintf_r+0x20>
 800b5de:	89ab      	ldrh	r3, [r5, #12]
 800b5e0:	0598      	lsls	r0, r3, #22
 800b5e2:	d4ed      	bmi.n	800b5c0 <_vfiprintf_r+0x4c>
 800b5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5e6:	f7ff fb8f 	bl	800ad08 <__retarget_lock_release_recursive>
 800b5ea:	e7e9      	b.n	800b5c0 <_vfiprintf_r+0x4c>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f0:	2320      	movs	r3, #32
 800b5f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5fa:	2330      	movs	r3, #48	; 0x30
 800b5fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7c0 <_vfiprintf_r+0x24c>
 800b600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b604:	f04f 0901 	mov.w	r9, #1
 800b608:	4623      	mov	r3, r4
 800b60a:	469a      	mov	sl, r3
 800b60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b610:	b10a      	cbz	r2, 800b616 <_vfiprintf_r+0xa2>
 800b612:	2a25      	cmp	r2, #37	; 0x25
 800b614:	d1f9      	bne.n	800b60a <_vfiprintf_r+0x96>
 800b616:	ebba 0b04 	subs.w	fp, sl, r4
 800b61a:	d00b      	beq.n	800b634 <_vfiprintf_r+0xc0>
 800b61c:	465b      	mov	r3, fp
 800b61e:	4622      	mov	r2, r4
 800b620:	4629      	mov	r1, r5
 800b622:	4630      	mov	r0, r6
 800b624:	f7ff ff93 	bl	800b54e <__sfputs_r>
 800b628:	3001      	adds	r0, #1
 800b62a:	f000 80aa 	beq.w	800b782 <_vfiprintf_r+0x20e>
 800b62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b630:	445a      	add	r2, fp
 800b632:	9209      	str	r2, [sp, #36]	; 0x24
 800b634:	f89a 3000 	ldrb.w	r3, [sl]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 80a2 	beq.w	800b782 <_vfiprintf_r+0x20e>
 800b63e:	2300      	movs	r3, #0
 800b640:	f04f 32ff 	mov.w	r2, #4294967295
 800b644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b648:	f10a 0a01 	add.w	sl, sl, #1
 800b64c:	9304      	str	r3, [sp, #16]
 800b64e:	9307      	str	r3, [sp, #28]
 800b650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b654:	931a      	str	r3, [sp, #104]	; 0x68
 800b656:	4654      	mov	r4, sl
 800b658:	2205      	movs	r2, #5
 800b65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b65e:	4858      	ldr	r0, [pc, #352]	; (800b7c0 <_vfiprintf_r+0x24c>)
 800b660:	f7f4 fdd6 	bl	8000210 <memchr>
 800b664:	9a04      	ldr	r2, [sp, #16]
 800b666:	b9d8      	cbnz	r0, 800b6a0 <_vfiprintf_r+0x12c>
 800b668:	06d1      	lsls	r1, r2, #27
 800b66a:	bf44      	itt	mi
 800b66c:	2320      	movmi	r3, #32
 800b66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b672:	0713      	lsls	r3, r2, #28
 800b674:	bf44      	itt	mi
 800b676:	232b      	movmi	r3, #43	; 0x2b
 800b678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b67c:	f89a 3000 	ldrb.w	r3, [sl]
 800b680:	2b2a      	cmp	r3, #42	; 0x2a
 800b682:	d015      	beq.n	800b6b0 <_vfiprintf_r+0x13c>
 800b684:	9a07      	ldr	r2, [sp, #28]
 800b686:	4654      	mov	r4, sl
 800b688:	2000      	movs	r0, #0
 800b68a:	f04f 0c0a 	mov.w	ip, #10
 800b68e:	4621      	mov	r1, r4
 800b690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b694:	3b30      	subs	r3, #48	; 0x30
 800b696:	2b09      	cmp	r3, #9
 800b698:	d94e      	bls.n	800b738 <_vfiprintf_r+0x1c4>
 800b69a:	b1b0      	cbz	r0, 800b6ca <_vfiprintf_r+0x156>
 800b69c:	9207      	str	r2, [sp, #28]
 800b69e:	e014      	b.n	800b6ca <_vfiprintf_r+0x156>
 800b6a0:	eba0 0308 	sub.w	r3, r0, r8
 800b6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	9304      	str	r3, [sp, #16]
 800b6ac:	46a2      	mov	sl, r4
 800b6ae:	e7d2      	b.n	800b656 <_vfiprintf_r+0xe2>
 800b6b0:	9b03      	ldr	r3, [sp, #12]
 800b6b2:	1d19      	adds	r1, r3, #4
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	9103      	str	r1, [sp, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	bfbb      	ittet	lt
 800b6bc:	425b      	neglt	r3, r3
 800b6be:	f042 0202 	orrlt.w	r2, r2, #2
 800b6c2:	9307      	strge	r3, [sp, #28]
 800b6c4:	9307      	strlt	r3, [sp, #28]
 800b6c6:	bfb8      	it	lt
 800b6c8:	9204      	strlt	r2, [sp, #16]
 800b6ca:	7823      	ldrb	r3, [r4, #0]
 800b6cc:	2b2e      	cmp	r3, #46	; 0x2e
 800b6ce:	d10c      	bne.n	800b6ea <_vfiprintf_r+0x176>
 800b6d0:	7863      	ldrb	r3, [r4, #1]
 800b6d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b6d4:	d135      	bne.n	800b742 <_vfiprintf_r+0x1ce>
 800b6d6:	9b03      	ldr	r3, [sp, #12]
 800b6d8:	1d1a      	adds	r2, r3, #4
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	9203      	str	r2, [sp, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	bfb8      	it	lt
 800b6e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6e6:	3402      	adds	r4, #2
 800b6e8:	9305      	str	r3, [sp, #20]
 800b6ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7d0 <_vfiprintf_r+0x25c>
 800b6ee:	7821      	ldrb	r1, [r4, #0]
 800b6f0:	2203      	movs	r2, #3
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	f7f4 fd8c 	bl	8000210 <memchr>
 800b6f8:	b140      	cbz	r0, 800b70c <_vfiprintf_r+0x198>
 800b6fa:	2340      	movs	r3, #64	; 0x40
 800b6fc:	eba0 000a 	sub.w	r0, r0, sl
 800b700:	fa03 f000 	lsl.w	r0, r3, r0
 800b704:	9b04      	ldr	r3, [sp, #16]
 800b706:	4303      	orrs	r3, r0
 800b708:	3401      	adds	r4, #1
 800b70a:	9304      	str	r3, [sp, #16]
 800b70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b710:	482c      	ldr	r0, [pc, #176]	; (800b7c4 <_vfiprintf_r+0x250>)
 800b712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b716:	2206      	movs	r2, #6
 800b718:	f7f4 fd7a 	bl	8000210 <memchr>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d03f      	beq.n	800b7a0 <_vfiprintf_r+0x22c>
 800b720:	4b29      	ldr	r3, [pc, #164]	; (800b7c8 <_vfiprintf_r+0x254>)
 800b722:	bb1b      	cbnz	r3, 800b76c <_vfiprintf_r+0x1f8>
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	3307      	adds	r3, #7
 800b728:	f023 0307 	bic.w	r3, r3, #7
 800b72c:	3308      	adds	r3, #8
 800b72e:	9303      	str	r3, [sp, #12]
 800b730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b732:	443b      	add	r3, r7
 800b734:	9309      	str	r3, [sp, #36]	; 0x24
 800b736:	e767      	b.n	800b608 <_vfiprintf_r+0x94>
 800b738:	fb0c 3202 	mla	r2, ip, r2, r3
 800b73c:	460c      	mov	r4, r1
 800b73e:	2001      	movs	r0, #1
 800b740:	e7a5      	b.n	800b68e <_vfiprintf_r+0x11a>
 800b742:	2300      	movs	r3, #0
 800b744:	3401      	adds	r4, #1
 800b746:	9305      	str	r3, [sp, #20]
 800b748:	4619      	mov	r1, r3
 800b74a:	f04f 0c0a 	mov.w	ip, #10
 800b74e:	4620      	mov	r0, r4
 800b750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b754:	3a30      	subs	r2, #48	; 0x30
 800b756:	2a09      	cmp	r2, #9
 800b758:	d903      	bls.n	800b762 <_vfiprintf_r+0x1ee>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d0c5      	beq.n	800b6ea <_vfiprintf_r+0x176>
 800b75e:	9105      	str	r1, [sp, #20]
 800b760:	e7c3      	b.n	800b6ea <_vfiprintf_r+0x176>
 800b762:	fb0c 2101 	mla	r1, ip, r1, r2
 800b766:	4604      	mov	r4, r0
 800b768:	2301      	movs	r3, #1
 800b76a:	e7f0      	b.n	800b74e <_vfiprintf_r+0x1da>
 800b76c:	ab03      	add	r3, sp, #12
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	462a      	mov	r2, r5
 800b772:	4b16      	ldr	r3, [pc, #88]	; (800b7cc <_vfiprintf_r+0x258>)
 800b774:	a904      	add	r1, sp, #16
 800b776:	4630      	mov	r0, r6
 800b778:	f7fd fd48 	bl	800920c <_printf_float>
 800b77c:	4607      	mov	r7, r0
 800b77e:	1c78      	adds	r0, r7, #1
 800b780:	d1d6      	bne.n	800b730 <_vfiprintf_r+0x1bc>
 800b782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b784:	07d9      	lsls	r1, r3, #31
 800b786:	d405      	bmi.n	800b794 <_vfiprintf_r+0x220>
 800b788:	89ab      	ldrh	r3, [r5, #12]
 800b78a:	059a      	lsls	r2, r3, #22
 800b78c:	d402      	bmi.n	800b794 <_vfiprintf_r+0x220>
 800b78e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b790:	f7ff faba 	bl	800ad08 <__retarget_lock_release_recursive>
 800b794:	89ab      	ldrh	r3, [r5, #12]
 800b796:	065b      	lsls	r3, r3, #25
 800b798:	f53f af12 	bmi.w	800b5c0 <_vfiprintf_r+0x4c>
 800b79c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b79e:	e711      	b.n	800b5c4 <_vfiprintf_r+0x50>
 800b7a0:	ab03      	add	r3, sp, #12
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	462a      	mov	r2, r5
 800b7a6:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <_vfiprintf_r+0x258>)
 800b7a8:	a904      	add	r1, sp, #16
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f7fd ffd2 	bl	8009754 <_printf_i>
 800b7b0:	e7e4      	b.n	800b77c <_vfiprintf_r+0x208>
 800b7b2:	bf00      	nop
 800b7b4:	0800c100 	.word	0x0800c100
 800b7b8:	0800c120 	.word	0x0800c120
 800b7bc:	0800c0e0 	.word	0x0800c0e0
 800b7c0:	0800c29c 	.word	0x0800c29c
 800b7c4:	0800c2a6 	.word	0x0800c2a6
 800b7c8:	0800920d 	.word	0x0800920d
 800b7cc:	0800b54f 	.word	0x0800b54f
 800b7d0:	0800c2a2 	.word	0x0800c2a2

0800b7d4 <_putc_r>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	460d      	mov	r5, r1
 800b7d8:	4614      	mov	r4, r2
 800b7da:	4606      	mov	r6, r0
 800b7dc:	b118      	cbz	r0, 800b7e6 <_putc_r+0x12>
 800b7de:	6983      	ldr	r3, [r0, #24]
 800b7e0:	b90b      	cbnz	r3, 800b7e6 <_putc_r+0x12>
 800b7e2:	f7ff f9ed 	bl	800abc0 <__sinit>
 800b7e6:	4b1c      	ldr	r3, [pc, #112]	; (800b858 <_putc_r+0x84>)
 800b7e8:	429c      	cmp	r4, r3
 800b7ea:	d124      	bne.n	800b836 <_putc_r+0x62>
 800b7ec:	6874      	ldr	r4, [r6, #4]
 800b7ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7f0:	07d8      	lsls	r0, r3, #31
 800b7f2:	d405      	bmi.n	800b800 <_putc_r+0x2c>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	0599      	lsls	r1, r3, #22
 800b7f8:	d402      	bmi.n	800b800 <_putc_r+0x2c>
 800b7fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7fc:	f7ff fa83 	bl	800ad06 <__retarget_lock_acquire_recursive>
 800b800:	68a3      	ldr	r3, [r4, #8]
 800b802:	3b01      	subs	r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	60a3      	str	r3, [r4, #8]
 800b808:	da05      	bge.n	800b816 <_putc_r+0x42>
 800b80a:	69a2      	ldr	r2, [r4, #24]
 800b80c:	4293      	cmp	r3, r2
 800b80e:	db1c      	blt.n	800b84a <_putc_r+0x76>
 800b810:	b2eb      	uxtb	r3, r5
 800b812:	2b0a      	cmp	r3, #10
 800b814:	d019      	beq.n	800b84a <_putc_r+0x76>
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	6022      	str	r2, [r4, #0]
 800b81c:	701d      	strb	r5, [r3, #0]
 800b81e:	b2ed      	uxtb	r5, r5
 800b820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b822:	07da      	lsls	r2, r3, #31
 800b824:	d405      	bmi.n	800b832 <_putc_r+0x5e>
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	059b      	lsls	r3, r3, #22
 800b82a:	d402      	bmi.n	800b832 <_putc_r+0x5e>
 800b82c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b82e:	f7ff fa6b 	bl	800ad08 <__retarget_lock_release_recursive>
 800b832:	4628      	mov	r0, r5
 800b834:	bd70      	pop	{r4, r5, r6, pc}
 800b836:	4b09      	ldr	r3, [pc, #36]	; (800b85c <_putc_r+0x88>)
 800b838:	429c      	cmp	r4, r3
 800b83a:	d101      	bne.n	800b840 <_putc_r+0x6c>
 800b83c:	68b4      	ldr	r4, [r6, #8]
 800b83e:	e7d6      	b.n	800b7ee <_putc_r+0x1a>
 800b840:	4b07      	ldr	r3, [pc, #28]	; (800b860 <_putc_r+0x8c>)
 800b842:	429c      	cmp	r4, r3
 800b844:	bf08      	it	eq
 800b846:	68f4      	ldreq	r4, [r6, #12]
 800b848:	e7d1      	b.n	800b7ee <_putc_r+0x1a>
 800b84a:	4629      	mov	r1, r5
 800b84c:	4622      	mov	r2, r4
 800b84e:	4630      	mov	r0, r6
 800b850:	f7fe f962 	bl	8009b18 <__swbuf_r>
 800b854:	4605      	mov	r5, r0
 800b856:	e7e3      	b.n	800b820 <_putc_r+0x4c>
 800b858:	0800c100 	.word	0x0800c100
 800b85c:	0800c120 	.word	0x0800c120
 800b860:	0800c0e0 	.word	0x0800c0e0

0800b864 <__sread>:
 800b864:	b510      	push	{r4, lr}
 800b866:	460c      	mov	r4, r1
 800b868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b86c:	f000 f8d6 	bl	800ba1c <_read_r>
 800b870:	2800      	cmp	r0, #0
 800b872:	bfab      	itete	ge
 800b874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b876:	89a3      	ldrhlt	r3, [r4, #12]
 800b878:	181b      	addge	r3, r3, r0
 800b87a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b87e:	bfac      	ite	ge
 800b880:	6563      	strge	r3, [r4, #84]	; 0x54
 800b882:	81a3      	strhlt	r3, [r4, #12]
 800b884:	bd10      	pop	{r4, pc}

0800b886 <__swrite>:
 800b886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88a:	461f      	mov	r7, r3
 800b88c:	898b      	ldrh	r3, [r1, #12]
 800b88e:	05db      	lsls	r3, r3, #23
 800b890:	4605      	mov	r5, r0
 800b892:	460c      	mov	r4, r1
 800b894:	4616      	mov	r6, r2
 800b896:	d505      	bpl.n	800b8a4 <__swrite+0x1e>
 800b898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b89c:	2302      	movs	r3, #2
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f000 f898 	bl	800b9d4 <_lseek_r>
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8ae:	81a3      	strh	r3, [r4, #12]
 800b8b0:	4632      	mov	r2, r6
 800b8b2:	463b      	mov	r3, r7
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ba:	f000 b817 	b.w	800b8ec <_write_r>

0800b8be <__sseek>:
 800b8be:	b510      	push	{r4, lr}
 800b8c0:	460c      	mov	r4, r1
 800b8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c6:	f000 f885 	bl	800b9d4 <_lseek_r>
 800b8ca:	1c43      	adds	r3, r0, #1
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	bf15      	itete	ne
 800b8d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8da:	81a3      	strheq	r3, [r4, #12]
 800b8dc:	bf18      	it	ne
 800b8de:	81a3      	strhne	r3, [r4, #12]
 800b8e0:	bd10      	pop	{r4, pc}

0800b8e2 <__sclose>:
 800b8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e6:	f000 b831 	b.w	800b94c <_close_r>
	...

0800b8ec <_write_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4d07      	ldr	r5, [pc, #28]	; (800b90c <_write_r+0x20>)
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	4608      	mov	r0, r1
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	602a      	str	r2, [r5, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	f7f7 fd7e 	bl	80033fc <_write>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_write_r+0x1e>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_write_r+0x1e>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	200030b4 	.word	0x200030b4

0800b910 <__assert_func>:
 800b910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b912:	4614      	mov	r4, r2
 800b914:	461a      	mov	r2, r3
 800b916:	4b09      	ldr	r3, [pc, #36]	; (800b93c <__assert_func+0x2c>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4605      	mov	r5, r0
 800b91c:	68d8      	ldr	r0, [r3, #12]
 800b91e:	b14c      	cbz	r4, 800b934 <__assert_func+0x24>
 800b920:	4b07      	ldr	r3, [pc, #28]	; (800b940 <__assert_func+0x30>)
 800b922:	9100      	str	r1, [sp, #0]
 800b924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b928:	4906      	ldr	r1, [pc, #24]	; (800b944 <__assert_func+0x34>)
 800b92a:	462b      	mov	r3, r5
 800b92c:	f000 f81e 	bl	800b96c <fiprintf>
 800b930:	f000 f893 	bl	800ba5a <abort>
 800b934:	4b04      	ldr	r3, [pc, #16]	; (800b948 <__assert_func+0x38>)
 800b936:	461c      	mov	r4, r3
 800b938:	e7f3      	b.n	800b922 <__assert_func+0x12>
 800b93a:	bf00      	nop
 800b93c:	20000028 	.word	0x20000028
 800b940:	0800c2ad 	.word	0x0800c2ad
 800b944:	0800c2ba 	.word	0x0800c2ba
 800b948:	0800c2e8 	.word	0x0800c2e8

0800b94c <_close_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d06      	ldr	r5, [pc, #24]	; (800b968 <_close_r+0x1c>)
 800b950:	2300      	movs	r3, #0
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	602b      	str	r3, [r5, #0]
 800b958:	f7f7 fd5e 	bl	8003418 <_close>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d102      	bne.n	800b966 <_close_r+0x1a>
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	b103      	cbz	r3, 800b966 <_close_r+0x1a>
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	bd38      	pop	{r3, r4, r5, pc}
 800b968:	200030b4 	.word	0x200030b4

0800b96c <fiprintf>:
 800b96c:	b40e      	push	{r1, r2, r3}
 800b96e:	b503      	push	{r0, r1, lr}
 800b970:	4601      	mov	r1, r0
 800b972:	ab03      	add	r3, sp, #12
 800b974:	4805      	ldr	r0, [pc, #20]	; (800b98c <fiprintf+0x20>)
 800b976:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97a:	6800      	ldr	r0, [r0, #0]
 800b97c:	9301      	str	r3, [sp, #4]
 800b97e:	f7ff fdf9 	bl	800b574 <_vfiprintf_r>
 800b982:	b002      	add	sp, #8
 800b984:	f85d eb04 	ldr.w	lr, [sp], #4
 800b988:	b003      	add	sp, #12
 800b98a:	4770      	bx	lr
 800b98c:	20000028 	.word	0x20000028

0800b990 <_fstat_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	4d07      	ldr	r5, [pc, #28]	; (800b9b0 <_fstat_r+0x20>)
 800b994:	2300      	movs	r3, #0
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	4611      	mov	r1, r2
 800b99c:	602b      	str	r3, [r5, #0]
 800b99e:	f7f7 fd3f 	bl	8003420 <_fstat>
 800b9a2:	1c43      	adds	r3, r0, #1
 800b9a4:	d102      	bne.n	800b9ac <_fstat_r+0x1c>
 800b9a6:	682b      	ldr	r3, [r5, #0]
 800b9a8:	b103      	cbz	r3, 800b9ac <_fstat_r+0x1c>
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	bd38      	pop	{r3, r4, r5, pc}
 800b9ae:	bf00      	nop
 800b9b0:	200030b4 	.word	0x200030b4

0800b9b4 <_isatty_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4d06      	ldr	r5, [pc, #24]	; (800b9d0 <_isatty_r+0x1c>)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	602b      	str	r3, [r5, #0]
 800b9c0:	f7f7 fd34 	bl	800342c <_isatty>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_isatty_r+0x1a>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_isatty_r+0x1a>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	200030b4 	.word	0x200030b4

0800b9d4 <_lseek_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d07      	ldr	r5, [pc, #28]	; (800b9f4 <_lseek_r+0x20>)
 800b9d8:	4604      	mov	r4, r0
 800b9da:	4608      	mov	r0, r1
 800b9dc:	4611      	mov	r1, r2
 800b9de:	2200      	movs	r2, #0
 800b9e0:	602a      	str	r2, [r5, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f7f7 fd24 	bl	8003430 <_lseek>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_lseek_r+0x1e>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_lseek_r+0x1e>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	200030b4 	.word	0x200030b4

0800b9f8 <__ascii_mbtowc>:
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	b901      	cbnz	r1, 800b9fe <__ascii_mbtowc+0x6>
 800b9fc:	a901      	add	r1, sp, #4
 800b9fe:	b142      	cbz	r2, 800ba12 <__ascii_mbtowc+0x1a>
 800ba00:	b14b      	cbz	r3, 800ba16 <__ascii_mbtowc+0x1e>
 800ba02:	7813      	ldrb	r3, [r2, #0]
 800ba04:	600b      	str	r3, [r1, #0]
 800ba06:	7812      	ldrb	r2, [r2, #0]
 800ba08:	1e10      	subs	r0, r2, #0
 800ba0a:	bf18      	it	ne
 800ba0c:	2001      	movne	r0, #1
 800ba0e:	b002      	add	sp, #8
 800ba10:	4770      	bx	lr
 800ba12:	4610      	mov	r0, r2
 800ba14:	e7fb      	b.n	800ba0e <__ascii_mbtowc+0x16>
 800ba16:	f06f 0001 	mvn.w	r0, #1
 800ba1a:	e7f8      	b.n	800ba0e <__ascii_mbtowc+0x16>

0800ba1c <_read_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4d07      	ldr	r5, [pc, #28]	; (800ba3c <_read_r+0x20>)
 800ba20:	4604      	mov	r4, r0
 800ba22:	4608      	mov	r0, r1
 800ba24:	4611      	mov	r1, r2
 800ba26:	2200      	movs	r2, #0
 800ba28:	602a      	str	r2, [r5, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f7f7 fcd8 	bl	80033e0 <_read>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_read_r+0x1e>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_read_r+0x1e>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	200030b4 	.word	0x200030b4

0800ba40 <__ascii_wctomb>:
 800ba40:	b149      	cbz	r1, 800ba56 <__ascii_wctomb+0x16>
 800ba42:	2aff      	cmp	r2, #255	; 0xff
 800ba44:	bf85      	ittet	hi
 800ba46:	238a      	movhi	r3, #138	; 0x8a
 800ba48:	6003      	strhi	r3, [r0, #0]
 800ba4a:	700a      	strbls	r2, [r1, #0]
 800ba4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba50:	bf98      	it	ls
 800ba52:	2001      	movls	r0, #1
 800ba54:	4770      	bx	lr
 800ba56:	4608      	mov	r0, r1
 800ba58:	4770      	bx	lr

0800ba5a <abort>:
 800ba5a:	b508      	push	{r3, lr}
 800ba5c:	2006      	movs	r0, #6
 800ba5e:	f000 f82b 	bl	800bab8 <raise>
 800ba62:	2001      	movs	r0, #1
 800ba64:	f7f7 fcb6 	bl	80033d4 <_exit>

0800ba68 <_raise_r>:
 800ba68:	291f      	cmp	r1, #31
 800ba6a:	b538      	push	{r3, r4, r5, lr}
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	460d      	mov	r5, r1
 800ba70:	d904      	bls.n	800ba7c <_raise_r+0x14>
 800ba72:	2316      	movs	r3, #22
 800ba74:	6003      	str	r3, [r0, #0]
 800ba76:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba7e:	b112      	cbz	r2, 800ba86 <_raise_r+0x1e>
 800ba80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba84:	b94b      	cbnz	r3, 800ba9a <_raise_r+0x32>
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 f830 	bl	800baec <_getpid_r>
 800ba8c:	462a      	mov	r2, r5
 800ba8e:	4601      	mov	r1, r0
 800ba90:	4620      	mov	r0, r4
 800ba92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba96:	f000 b817 	b.w	800bac8 <_kill_r>
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d00a      	beq.n	800bab4 <_raise_r+0x4c>
 800ba9e:	1c59      	adds	r1, r3, #1
 800baa0:	d103      	bne.n	800baaa <_raise_r+0x42>
 800baa2:	2316      	movs	r3, #22
 800baa4:	6003      	str	r3, [r0, #0]
 800baa6:	2001      	movs	r0, #1
 800baa8:	e7e7      	b.n	800ba7a <_raise_r+0x12>
 800baaa:	2400      	movs	r4, #0
 800baac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bab0:	4628      	mov	r0, r5
 800bab2:	4798      	blx	r3
 800bab4:	2000      	movs	r0, #0
 800bab6:	e7e0      	b.n	800ba7a <_raise_r+0x12>

0800bab8 <raise>:
 800bab8:	4b02      	ldr	r3, [pc, #8]	; (800bac4 <raise+0xc>)
 800baba:	4601      	mov	r1, r0
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	f7ff bfd3 	b.w	800ba68 <_raise_r>
 800bac2:	bf00      	nop
 800bac4:	20000028 	.word	0x20000028

0800bac8 <_kill_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4d07      	ldr	r5, [pc, #28]	; (800bae8 <_kill_r+0x20>)
 800bacc:	2300      	movs	r3, #0
 800bace:	4604      	mov	r4, r0
 800bad0:	4608      	mov	r0, r1
 800bad2:	4611      	mov	r1, r2
 800bad4:	602b      	str	r3, [r5, #0]
 800bad6:	f7f7 fc75 	bl	80033c4 <_kill>
 800bada:	1c43      	adds	r3, r0, #1
 800badc:	d102      	bne.n	800bae4 <_kill_r+0x1c>
 800bade:	682b      	ldr	r3, [r5, #0]
 800bae0:	b103      	cbz	r3, 800bae4 <_kill_r+0x1c>
 800bae2:	6023      	str	r3, [r4, #0]
 800bae4:	bd38      	pop	{r3, r4, r5, pc}
 800bae6:	bf00      	nop
 800bae8:	200030b4 	.word	0x200030b4

0800baec <_getpid_r>:
 800baec:	f7f7 bc68 	b.w	80033c0 <_getpid>

0800baf0 <_init>:
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	bf00      	nop
 800baf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baf6:	bc08      	pop	{r3}
 800baf8:	469e      	mov	lr, r3
 800bafa:	4770      	bx	lr

0800bafc <_fini>:
 800bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafe:	bf00      	nop
 800bb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb02:	bc08      	pop	{r3}
 800bb04:	469e      	mov	lr, r3
 800bb06:	4770      	bx	lr
