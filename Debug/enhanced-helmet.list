
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001184  0800a980  0800a980  0001a980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb04  0800bb04  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb04  0800bb04  0001bb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb0c  0800bb0c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb0c  0800bb0c  0001bb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb10  0800bb10  0001bb10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800bb14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002344  200001f8  0800bd08  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000253c  0800bd08  0002253c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e79  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004187  00000000  00000000  0004a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002956c  00000000  00000000  0004e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  00077790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005060  00000000  00000000  00078810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af6f  00000000  00000000  0007d870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d260  00000000  00000000  000987df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0cfb  00000000  00000000  000c5a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016673a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050e8  00000000  00000000  0016678c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a968 	.word	0x0800a968

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800a968 	.word	0x0800a968

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <OV5462_read_i2c_reg>:
	}

	return 0;
}

uint8_t OV5462_read_i2c_reg(OV5462_t* ov5462, int addr) {
 8000f1c:	b530      	push	{r4, r5, lr}
 8000f1e:	b085      	sub	sp, #20
	uint8_t buf[2];
	buf[0] = (uint8_t)(addr >> 8);
	buf[1] = (uint8_t)(addr & 0xFF);

	HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 2, HAL_MAX_DELAY);
 8000f20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
uint8_t OV5462_read_i2c_reg(OV5462_t* ov5462, int addr) {
 8000f24:	4604      	mov	r4, r0
	buf[0] = (uint8_t)(addr >> 8);
 8000f26:	120b      	asrs	r3, r1, #8
	HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 2, HAL_MAX_DELAY);
 8000f28:	9500      	str	r5, [sp, #0]
	buf[0] = (uint8_t)(addr >> 8);
 8000f2a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = (uint8_t)(addr & 0xFF);
 8000f2e:	f88d 100d 	strb.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 2, HAL_MAX_DELAY);
 8000f32:	aa03      	add	r2, sp, #12
 8000f34:	2302      	movs	r3, #2
 8000f36:	2179      	movs	r1, #121	; 0x79
 8000f38:	6800      	ldr	r0, [r0, #0]
 8000f3a:	f002 fc99 	bl	8003870 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 1, HAL_MAX_DELAY);
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	9500      	str	r5, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	aa03      	add	r2, sp, #12
 8000f46:	2179      	movs	r1, #121	; 0x79
 8000f48:	f002 fe24 	bl	8003b94 <HAL_I2C_Master_Receive>

	return buf[0];
}
 8000f4c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000f50:	b005      	add	sp, #20
 8000f52:	bd30      	pop	{r4, r5, pc}

08000f54 <OV5462_write_spi_reg>:

void OV5462_write_spi_reg(OV5462_t* ov5462, uint8_t addr, uint8_t data) {
 8000f54:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8000f56:	4f11      	ldr	r7, [pc, #68]	; (8000f9c <OV5462_write_spi_reg+0x48>)
void OV5462_write_spi_reg(OV5462_t* ov5462, uint8_t addr, uint8_t data) {
 8000f58:	4605      	mov	r5, r0
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	4616      	mov	r6, r2
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8000f5e:	4638      	mov	r0, r7
void OV5462_write_spi_reg(OV5462_t* ov5462, uint8_t addr, uint8_t data) {
 8000f60:	460c      	mov	r4, r1
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8000f62:	2200      	movs	r2, #0
 8000f64:	2110      	movs	r1, #16
 8000f66:	f002 fba9 	bl	80036bc <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr | 0x80 };
 8000f6a:	f064 047f 	orn	r4, r4, #127	; 0x7f
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8000f6e:	a901      	add	r1, sp, #4
 8000f70:	6868      	ldr	r0, [r5, #4]
	uint8_t buf[1] = { addr | 0x80 };
 8000f72:	f88d 4004 	strb.w	r4, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8000f76:	2364      	movs	r3, #100	; 0x64
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f003 fc13 	bl	80047a4 <HAL_SPI_Transmit>
	buf[0] = data;
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8000f7e:	a901      	add	r1, sp, #4
 8000f80:	2364      	movs	r3, #100	; 0x64
 8000f82:	6868      	ldr	r0, [r5, #4]
	buf[0] = data;
 8000f84:	f88d 6004 	strb.w	r6, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f003 fc0b 	bl	80047a4 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2110      	movs	r1, #16
 8000f92:	4638      	mov	r0, r7
 8000f94:	f002 fb92 	bl	80036bc <HAL_GPIO_WritePin>

//	HAL_Delay(100);
}
 8000f98:	b003      	add	sp, #12
 8000f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9c:	40020800 	.word	0x40020800

08000fa0 <OV5462_read_spi_reg>:

uint8_t OV5462_read_spi_reg(OV5462_t* ov5462, uint8_t addr) {
 8000fa0:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8000fa2:	4e10      	ldr	r6, [pc, #64]	; (8000fe4 <OV5462_read_spi_reg+0x44>)
uint8_t OV5462_read_spi_reg(OV5462_t* ov5462, uint8_t addr) {
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8000faa:	4630      	mov	r0, r6
 8000fac:	2200      	movs	r2, #0
 8000fae:	2110      	movs	r1, #16
 8000fb0:	f002 fb84 	bl	80036bc <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr };
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8000fb4:	a901      	add	r1, sp, #4
 8000fb6:	6860      	ldr	r0, [r4, #4]
	uint8_t buf[1] = { addr };
 8000fb8:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8000fbc:	2364      	movs	r3, #100	; 0x64
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f003 fbf0 	bl	80047a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	a901      	add	r1, sp, #4
 8000fc8:	6860      	ldr	r0, [r4, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f003 fe86 	bl	8004cdc <HAL_SPI_Receive>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	f002 fb71 	bl	80036bc <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	return buf[0];
}
 8000fda:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd70      	pop	{r4, r5, r6, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <OV5462_init>:


uint8_t OV5462_init(OV5462_t* ov5462) {
 8000fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select is default HIGH
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	488c      	ldr	r0, [pc, #560]	; (8001224 <OV5462_init+0x23c>)
 8000ff4:	4c8c      	ldr	r4, [pc, #560]	; (8001228 <OV5462_init+0x240>)
 8000ff6:	2110      	movs	r1, #16
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8000ff8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select is default HIGH
 8000ffc:	f002 fb5e 	bl	80036bc <HAL_GPIO_WritePin>
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8001000:	f44f 6203 	mov.w	r2, #2096	; 0x830
	buf[2] = data;
 8001004:	2380      	movs	r3, #128	; 0x80
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001006:	9700      	str	r7, [sp, #0]
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8001008:	f8ad 200c 	strh.w	r2, [sp, #12]
	buf[2] = data;
 800100c:	f88d 300e 	strb.w	r3, [sp, #14]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001010:	6828      	ldr	r0, [r5, #0]
 8001012:	2303      	movs	r3, #3
 8001014:	aa03      	add	r2, sp, #12
 8001016:	2178      	movs	r1, #120	; 0x78
 8001018:	f002 fc2a 	bl	8003870 <HAL_I2C_Master_Transmit>
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 800101c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8001020:	f834 cc04 	ldrh.w	ip, [r4, #-4]
		ret = OV5462_write_i2c_reg(ov5462, curr->addr, curr->value);
 8001024:	f814 ec02 	ldrb.w	lr, [r4, #-2]
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8001028:	45c4      	cmp	ip, r8
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 800102a:	f04f 0303 	mov.w	r3, #3
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 800102e:	ea4f 262c 	mov.w	r6, ip, asr #8
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001032:	aa03      	add	r2, sp, #12
 8001034:	f04f 0178 	mov.w	r1, #120	; 0x78
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8001038:	d102      	bne.n	8001040 <OV5462_init+0x58>
 800103a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800103e:	d013      	beq.n	8001068 <OV5462_init+0x80>
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001040:	6828      	ldr	r0, [r5, #0]
 8001042:	9700      	str	r7, [sp, #0]
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8001044:	f88d 600c 	strb.w	r6, [sp, #12]
	buf[1] = (uint8_t)(addr & 0xFF); // lower addr byte
 8001048:	f88d c00d 	strb.w	ip, [sp, #13]
	buf[2] = data;
 800104c:	f88d e00e 	strb.w	lr, [sp, #14]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001050:	f002 fc0e 	bl	8003870 <HAL_I2C_Master_Transmit>
 8001054:	4603      	mov	r3, r0
	if ( ret != HAL_OK ) {
 8001056:	3404      	adds	r4, #4
		HAL_Delay(1);
 8001058:	2001      	movs	r0, #1
	if ( ret != HAL_OK ) {
 800105a:	b913      	cbnz	r3, 8001062 <OV5462_init+0x7a>
		HAL_Delay(1);
 800105c:	f002 f856 	bl	800310c <HAL_Delay>
		if ( ret != HAL_OK ) {
 8001060:	e7de      	b.n	8001020 <OV5462_init+0x38>
		HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f002 f852 	bl	800310c <HAL_Delay>
		if ( ret != HAL_OK ) {
 8001068:	4c70      	ldr	r4, [pc, #448]	; (800122c <OV5462_init+0x244>)
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 800106a:	f64f 77ff 	movw	r7, #65535	; 0xffff
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 800106e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8001072:	f834 cc04 	ldrh.w	ip, [r4, #-4]
		ret = OV5462_write_i2c_reg(ov5462, curr->addr, curr->value);
 8001076:	f814 ec02 	ldrb.w	lr, [r4, #-2]
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 800107a:	45bc      	cmp	ip, r7
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 800107c:	f04f 0303 	mov.w	r3, #3
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8001080:	ea4f 262c 	mov.w	r6, ip, asr #8
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001084:	aa03      	add	r2, sp, #12
 8001086:	f04f 0178 	mov.w	r1, #120	; 0x78
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 800108a:	d103      	bne.n	8001094 <OV5462_init+0xac>
 800108c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8001090:	f000 80c4 	beq.w	800121c <OV5462_init+0x234>
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001094:	6828      	ldr	r0, [r5, #0]
 8001096:	f8cd 8000 	str.w	r8, [sp]
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 800109a:	f88d 600c 	strb.w	r6, [sp, #12]
	buf[1] = (uint8_t)(addr & 0xFF); // lower addr byte
 800109e:	f88d c00d 	strb.w	ip, [sp, #13]
	buf[2] = data;
 80010a2:	f88d e00e 	strb.w	lr, [sp, #14]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 80010a6:	f002 fbe3 	bl	8003870 <HAL_I2C_Master_Transmit>
 80010aa:	4603      	mov	r3, r0
	if ( ret != HAL_OK ) {
 80010ac:	3404      	adds	r4, #4
		HAL_Delay(1);
 80010ae:	2001      	movs	r0, #1
	if ( ret != HAL_OK ) {
 80010b0:	b913      	cbnz	r3, 80010b8 <OV5462_init+0xd0>
		HAL_Delay(1);
 80010b2:	f002 f82b 	bl	800310c <HAL_Delay>
		if ( ret != HAL_OK ) {
 80010b6:	e7dc      	b.n	8001072 <OV5462_init+0x8a>
		HAL_Delay(1);
 80010b8:	f002 f828 	bl	800310c <HAL_Delay>
			return 1;
 80010bc:	f04f 0901 	mov.w	r9, #1
uint8_t OV5462_write_i2c_regs(OV5462_t* ov5462, const reg_value_pair regs[]) {
 80010c0:	4c5b      	ldr	r4, [pc, #364]	; (8001230 <OV5462_init+0x248>)
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 80010c2:	f64f 77ff 	movw	r7, #65535	; 0xffff
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 80010c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 80010ca:	f834 cc04 	ldrh.w	ip, [r4, #-4]
		ret = OV5462_write_i2c_reg(ov5462, curr->addr, curr->value);
 80010ce:	f814 ec02 	ldrb.w	lr, [r4, #-2]
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 80010d2:	45bc      	cmp	ip, r7
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 80010d4:	f04f 0303 	mov.w	r3, #3
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 80010d8:	ea4f 262c 	mov.w	r6, ip, asr #8
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 80010dc:	aa03      	add	r2, sp, #12
 80010de:	f04f 0178 	mov.w	r1, #120	; 0x78
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 80010e2:	d102      	bne.n	80010ea <OV5462_init+0x102>
 80010e4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80010e8:	d015      	beq.n	8001116 <OV5462_init+0x12e>
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 80010ea:	6828      	ldr	r0, [r5, #0]
 80010ec:	f8cd 8000 	str.w	r8, [sp]
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 80010f0:	f88d 600c 	strb.w	r6, [sp, #12]
	buf[1] = (uint8_t)(addr & 0xFF); // lower addr byte
 80010f4:	f88d c00d 	strb.w	ip, [sp, #13]
	buf[2] = data;
 80010f8:	f88d e00e 	strb.w	lr, [sp, #14]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 80010fc:	f002 fbb8 	bl	8003870 <HAL_I2C_Master_Transmit>
 8001100:	4603      	mov	r3, r0
	if ( ret != HAL_OK ) {
 8001102:	3404      	adds	r4, #4
		HAL_Delay(1);
 8001104:	2001      	movs	r0, #1
	if ( ret != HAL_OK ) {
 8001106:	b913      	cbnz	r3, 800110e <OV5462_init+0x126>
		HAL_Delay(1);
 8001108:	f002 f800 	bl	800310c <HAL_Delay>
		if ( ret != HAL_OK ) {
 800110c:	e7dd      	b.n	80010ca <OV5462_init+0xe2>
		HAL_Delay(1);
 800110e:	f001 fffd 	bl	800310c <HAL_Delay>
 8001112:	f04f 0901 	mov.w	r9, #1
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001116:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800111a:	9700      	str	r7, [sp, #0]
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 800111c:	f641 0238 	movw	r2, #6200	; 0x1838
 8001120:	f8ad 200c 	strh.w	r2, [sp, #12]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001124:	6828      	ldr	r0, [r5, #0]
 8001126:	aa03      	add	r2, sp, #12
 8001128:	2303      	movs	r3, #3
 800112a:	2178      	movs	r1, #120	; 0x78
	buf[2] = data;
 800112c:	24a8      	movs	r4, #168	; 0xa8
 800112e:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001132:	f002 fb9d 	bl	8003870 <HAL_I2C_Master_Transmit>
 8001136:	9700      	str	r7, [sp, #0]
	buf[2] = data;
 8001138:	2410      	movs	r4, #16
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 800113a:	4682      	mov	sl, r0
 800113c:	aa03      	add	r2, sp, #12
 800113e:	6828      	ldr	r0, [r5, #0]
	buf[2] = data;
 8001140:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001144:	2303      	movs	r3, #3
 8001146:	2178      	movs	r1, #120	; 0x78
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8001148:	f242 1636 	movw	r6, #8502	; 0x2136
 800114c:	f8ad 600c 	strh.w	r6, [sp, #12]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001150:	f002 fb8e 	bl	8003870 <HAL_I2C_Master_Transmit>
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8001154:	f44f 769c 	mov.w	r6, #312	; 0x138
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001158:	9700      	str	r7, [sp, #0]
 800115a:	aa03      	add	r2, sp, #12
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 800115c:	f8ad 600c 	strh.w	r6, [sp, #12]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001160:	4680      	mov	r8, r0
 8001162:	2303      	movs	r3, #3
 8001164:	6828      	ldr	r0, [r5, #0]
 8001166:	2178      	movs	r1, #120	; 0x78
	buf[2] = data;
 8001168:	26b0      	movs	r6, #176	; 0xb0
 800116a:	f88d 600e 	strb.w	r6, [sp, #14]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 800116e:	f002 fb7f 	bl	8003870 <HAL_I2C_Master_Transmit>
 8001172:	9700      	str	r7, [sp, #0]
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8001174:	f240 7744 	movw	r7, #1860	; 0x744
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001178:	2303      	movs	r3, #3
 800117a:	aa03      	add	r2, sp, #12
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 800117c:	f8ad 700c 	strh.w	r7, [sp, #12]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8001180:	4606      	mov	r6, r0
 8001182:	2178      	movs	r1, #120	; 0x78
 8001184:	6828      	ldr	r0, [r5, #0]
	buf[2] = data;
 8001186:	2704      	movs	r7, #4
 8001188:	f88d 700e 	strb.w	r7, [sp, #14]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 800118c:	f002 fb70 	bl	8003870 <HAL_I2C_Master_Transmit>
	return 0;
 8001190:	ea48 080a 	orr.w	r8, r8, sl
 8001194:	ea46 0608 	orr.w	r6, r6, r8
 8001198:	4330      	orrs	r0, r6
 800119a:	b2c0      	uxtb	r0, r0
	err |= OV5462_write_i2c_regs(ov5462, CONFIGURE_JPEG_CAPTURE); // use JPEG capture mode
	err |=OV5462_write_i2c_regs(ov5462, SET_RESOLUTION_320X240); // set sensor to low resolution
	err |=OV5462_write_i2c_reg(ov5462, 0x3818, 0xa8);
	err |=OV5462_write_i2c_reg(ov5462, 0x3621, 0x10);
	err |=OV5462_write_i2c_reg(ov5462, 0x3801, 0xb0);
	err |=OV5462_write_i2c_reg(ov5462, 0x4407, 0x04); // 04?
 800119c:	2800      	cmp	r0, #0
 800119e:	bf18      	it	ne
 80011a0:	f049 0901 	orrne.w	r9, r9, #1
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 80011a4:	4621      	mov	r1, r4
 80011a6:	481f      	ldr	r0, [pc, #124]	; (8001224 <OV5462_init+0x23c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f002 fa87 	bl	80036bc <HAL_GPIO_WritePin>
	uint8_t buf[1] = { addr | 0x80 };
 80011ae:	2383      	movs	r3, #131	; 0x83
 80011b0:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 80011b4:	a903      	add	r1, sp, #12
 80011b6:	6868      	ldr	r0, [r5, #4]
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	2201      	movs	r2, #1
 80011bc:	f003 faf2 	bl	80047a4 <HAL_SPI_Transmit>
	buf[0] = data;
 80011c0:	2302      	movs	r3, #2
 80011c2:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 80011c6:	a903      	add	r1, sp, #12
 80011c8:	2364      	movs	r3, #100	; 0x64
 80011ca:	6868      	ldr	r0, [r5, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f003 fae9 	bl	80047a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 80011d2:	4621      	mov	r1, r4
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <OV5462_init+0x23c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	f002 fa70 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 80011dc:	4621      	mov	r1, r4
 80011de:	4811      	ldr	r0, [pc, #68]	; (8001224 <OV5462_init+0x23c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f002 fa6b 	bl	80036bc <HAL_GPIO_WritePin>
	buf[0] = data;
 80011e6:	2601      	movs	r6, #1
	uint8_t buf[1] = { addr | 0x80 };
 80011e8:	2384      	movs	r3, #132	; 0x84
 80011ea:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 80011ee:	4632      	mov	r2, r6
 80011f0:	a903      	add	r1, sp, #12
 80011f2:	6868      	ldr	r0, [r5, #4]
 80011f4:	2364      	movs	r3, #100	; 0x64
 80011f6:	f003 fad5 	bl	80047a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 80011fa:	a903      	add	r1, sp, #12
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	4632      	mov	r2, r6
 8001200:	6868      	ldr	r0, [r5, #4]
	buf[0] = data;
 8001202:	f88d 600c 	strb.w	r6, [sp, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001206:	f003 facd 	bl	80047a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <OV5462_init+0x23c>)
 800120c:	4632      	mov	r2, r6
 800120e:	4621      	mov	r1, r4
 8001210:	f002 fa54 	bl	80036bc <HAL_GPIO_WritePin>

	OV5462_write_spi_reg(ov5462, OV5462_ARDUCHIP_TIM, OV5462_VSYNC_LEVEL_MASK);
	OV5462_write_spi_reg(ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);

	return err;
}
 8001214:	4648      	mov	r0, r9
 8001216:	b004      	add	sp, #16
 8001218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return 0;
 800121c:	f04f 0900 	mov.w	r9, #0
 8001220:	e74e      	b.n	80010c0 <OV5462_init+0xd8>
 8001222:	bf00      	nop
 8001224:	40020800 	.word	0x40020800
 8001228:	0800aaa4 	.word	0x0800aaa4
 800122c:	0800a984 	.word	0x0800a984
 8001230:	0800b3c4 	.word	0x0800b3c4

08001234 <OV5462_continuous_capture_init>:

void OV5462_continuous_capture_init(OV5462_t* ov5462) {
 8001234:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001236:	2200      	movs	r2, #0
void OV5462_continuous_capture_init(OV5462_t* ov5462) {
 8001238:	b083      	sub	sp, #12
 800123a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 800123c:	2110      	movs	r1, #16
 800123e:	481d      	ldr	r0, [pc, #116]	; (80012b4 <OV5462_continuous_capture_init+0x80>)
 8001240:	f002 fa3c 	bl	80036bc <HAL_GPIO_WritePin>
	uint8_t buf[1] = { addr };
 8001244:	2040      	movs	r0, #64	; 0x40
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001246:	a901      	add	r1, sp, #4
	uint8_t buf[1] = { addr };
 8001248:	f88d 0004 	strb.w	r0, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800124c:	2364      	movs	r3, #100	; 0x64
 800124e:	6860      	ldr	r0, [r4, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f003 faa7 	bl	80047a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 8001256:	2364      	movs	r3, #100	; 0x64
 8001258:	a901      	add	r1, sp, #4
 800125a:	6860      	ldr	r0, [r4, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f003 fd3d 	bl	8004cdc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 8001262:	4814      	ldr	r0, [pc, #80]	; (80012b4 <OV5462_continuous_capture_init+0x80>)
 8001264:	2201      	movs	r2, #1
 8001266:	2110      	movs	r1, #16
 8001268:	f002 fa28 	bl	80036bc <HAL_GPIO_WritePin>
	return buf[0];
 800126c:	f89d 3004 	ldrb.w	r3, [sp, #4]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <OV5462_continuous_capture_init+0x80>)
 8001272:	2200      	movs	r2, #0

	// set continuous capture (depends on version)
	if (camera_version && 0x70) {
		frames = 0xFF;
	} else {
		frames = 0x07;
 8001274:	4293      	cmp	r3, r2
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001276:	f04f 0110 	mov.w	r1, #16
		frames = 0x07;
 800127a:	bf14      	ite	ne
 800127c:	25ff      	movne	r5, #255	; 0xff
 800127e:	2507      	moveq	r5, #7
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001280:	f002 fa1c 	bl	80036bc <HAL_GPIO_WritePin>
	uint8_t buf[1] = { addr | 0x80 };
 8001284:	2181      	movs	r1, #129	; 0x81
 8001286:	f88d 1004 	strb.w	r1, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800128a:	6860      	ldr	r0, [r4, #4]
 800128c:	a901      	add	r1, sp, #4
 800128e:	2364      	movs	r3, #100	; 0x64
 8001290:	2201      	movs	r2, #1
 8001292:	f003 fa87 	bl	80047a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001296:	a901      	add	r1, sp, #4
 8001298:	2364      	movs	r3, #100	; 0x64
 800129a:	6860      	ldr	r0, [r4, #4]
	buf[0] = data;
 800129c:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f003 fa7f 	bl	80047a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <OV5462_continuous_capture_init+0x80>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	2110      	movs	r1, #16
 80012ac:	f002 fa06 	bl	80036bc <HAL_GPIO_WritePin>
	}

	OV5462_write_spi_reg(ov5462, ARDUCHIP_FRAMES, frames);
}
 80012b0:	b003      	add	sp, #12
 80012b2:	bd30      	pop	{r4, r5, pc}
 80012b4:	40020800 	.word	0x40020800

080012b8 <OV5462_read_fifo_length>:

uint32_t OV5462_read_fifo_length(OV5462_t* ov5462) {
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 80012ba:	4e2e      	ldr	r6, [pc, #184]	; (8001374 <OV5462_read_fifo_length+0xbc>)
uint32_t OV5462_read_fifo_length(OV5462_t* ov5462) {
 80012bc:	b083      	sub	sp, #12
 80012be:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 80012c0:	2200      	movs	r2, #0
 80012c2:	4630      	mov	r0, r6
 80012c4:	2110      	movs	r1, #16
 80012c6:	f002 f9f9 	bl	80036bc <HAL_GPIO_WritePin>
	uint8_t buf[1] = { addr };
 80012ca:	2142      	movs	r1, #66	; 0x42
 80012cc:	f88d 1004 	strb.w	r1, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 80012d0:	6860      	ldr	r0, [r4, #4]
 80012d2:	a901      	add	r1, sp, #4
 80012d4:	2364      	movs	r3, #100	; 0x64
 80012d6:	2201      	movs	r2, #1
 80012d8:	f003 fa64 	bl	80047a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 80012dc:	2364      	movs	r3, #100	; 0x64
 80012de:	a901      	add	r1, sp, #4
 80012e0:	6860      	ldr	r0, [r4, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f003 fcfa 	bl	8004cdc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 80012e8:	4630      	mov	r0, r6
 80012ea:	2201      	movs	r2, #1
 80012ec:	2110      	movs	r1, #16
 80012ee:	f002 f9e5 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 80012f2:	4630      	mov	r0, r6
 80012f4:	2200      	movs	r2, #0
 80012f6:	2110      	movs	r1, #16
	return buf[0];
 80012f8:	f89d 7004 	ldrb.w	r7, [sp, #4]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 80012fc:	f002 f9de 	bl	80036bc <HAL_GPIO_WritePin>
	uint8_t buf[1] = { addr };
 8001300:	2343      	movs	r3, #67	; 0x43
 8001302:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001306:	a901      	add	r1, sp, #4
 8001308:	6860      	ldr	r0, [r4, #4]
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	2201      	movs	r2, #1
 800130e:	f003 fa49 	bl	80047a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	a901      	add	r1, sp, #4
 8001316:	6860      	ldr	r0, [r4, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f003 fcdf 	bl	8004cdc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 800131e:	4630      	mov	r0, r6
 8001320:	2201      	movs	r2, #1
 8001322:	2110      	movs	r1, #16
 8001324:	f002 f9ca 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001328:	4630      	mov	r0, r6
 800132a:	2200      	movs	r2, #0
 800132c:	2110      	movs	r1, #16
	return buf[0];
 800132e:	f89d 5004 	ldrb.w	r5, [sp, #4]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001332:	f002 f9c3 	bl	80036bc <HAL_GPIO_WritePin>
	uint8_t buf[1] = { addr };
 8001336:	f04f 0c44 	mov.w	ip, #68	; 0x44
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800133a:	a901      	add	r1, sp, #4
 800133c:	6860      	ldr	r0, [r4, #4]
	uint8_t buf[1] = { addr };
 800133e:	f88d c004 	strb.w	ip, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001342:	2364      	movs	r3, #100	; 0x64
 8001344:	2201      	movs	r2, #1
 8001346:	f003 fa2d 	bl	80047a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 800134a:	a901      	add	r1, sp, #4
 800134c:	2364      	movs	r3, #100	; 0x64
 800134e:	6860      	ldr	r0, [r4, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f003 fcc3 	bl	8004cdc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 8001356:	4630      	mov	r0, r6
 8001358:	2201      	movs	r2, #1
 800135a:	2110      	movs	r1, #16
 800135c:	f002 f9ae 	bl	80036bc <HAL_GPIO_WritePin>
	return buf[0];
 8001360:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint32_t lower, middle, upper;
	lower = OV5462_read_spi_reg(ov5462, FIFO_SIZE_LOWER);
	middle = OV5462_read_spi_reg(ov5462, FIFO_SIZE_MIDDLE);
	upper = OV5462_read_spi_reg(ov5462, FIFO_SIZE_UPPER);

	return ((upper << 16) | (middle << 8) | lower) & 0x07fffff;
 8001364:	0228      	lsls	r0, r5, #8
 8001366:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800136a:	4338      	orrs	r0, r7
}
 800136c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8001370:	b003      	add	sp, #12
 8001372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001374:	40020800 	.word	0x40020800

08001378 <OV5462_request_FIFO_burst>:

void OV5462_request_FIFO_burst(OV5462_t* ov5462) {
 8001378:	b500      	push	{lr}
 800137a:	b083      	sub	sp, #12
	uint8_t buf[1] = { BURST_FIFO_READ };
 800137c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001380:	2364      	movs	r3, #100	; 0x64
 8001382:	2201      	movs	r2, #1
 8001384:	a901      	add	r1, sp, #4
 8001386:	6840      	ldr	r0, [r0, #4]
	uint8_t buf[1] = { BURST_FIFO_READ };
 8001388:	f88d c004 	strb.w	ip, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800138c:	f003 fa0a 	bl	80047a4 <HAL_SPI_Transmit>
}
 8001390:	b003      	add	sp, #12
 8001392:	f85d fb04 	ldr.w	pc, [sp], #4
 8001396:	bf00      	nop

08001398 <SPI_OptimizedReadByte>:

uint8_t SPI_OptimizedReadByte(uint8_t* data) {
	while (((SPI1->SR)&(1>>7))) {}; // wait for BSY bit to reset
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <SPI_OptimizedReadByte+0x14>)
	SPI1->DR = 0; // dummy byte
 800139a:	2300      	movs	r3, #0
	while (((SPI1->SR)&(1>>7))) {}; // wait for BSY bit to reset
 800139c:	6891      	ldr	r1, [r2, #8]
	SPI1->DR = 0; // dummy byte
 800139e:	60d3      	str	r3, [r2, #12]
	while (!((SPI1->SR) & (1<<0))) {};
 80013a0:	6893      	ldr	r3, [r2, #8]
 80013a2:	07db      	lsls	r3, r3, #31
 80013a4:	d5fc      	bpl.n	80013a0 <SPI_OptimizedReadByte+0x8>
	return SPI1->DR;
 80013a6:	68d0      	ldr	r0, [r2, #12]
}
 80013a8:	b2c0      	uxtb	r0, r0
 80013aa:	4770      	bx	lr
 80013ac:	40013000 	.word	0x40013000

080013b0 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void)
{
 80013b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80013b4:	4834      	ldr	r0, [pc, #208]	; (8001488 <SD_PowerOn+0xd8>)
 80013b6:	4d35      	ldr	r5, [pc, #212]	; (800148c <SD_PowerOn+0xdc>)
{
 80013b8:	b086      	sub	sp, #24
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2102      	movs	r1, #2
 80013be:	f002 f97d 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f001 fea2 	bl	800310c <HAL_Delay>
 80013c8:	240a      	movs	r4, #10
 80013ca:	26ff      	movs	r6, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80013cc:	682a      	ldr	r2, [r5, #0]
 80013ce:	f88d 600d 	strb.w	r6, [sp, #13]
 80013d2:	6893      	ldr	r3, [r2, #8]
 80013d4:	079f      	lsls	r7, r3, #30
 80013d6:	d5fc      	bpl.n	80013d2 <SD_PowerOn+0x22>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	2201      	movs	r2, #1
 80013dc:	f10d 010d 	add.w	r1, sp, #13
 80013e0:	4628      	mov	r0, r5
 80013e2:	f003 f9df 	bl	80047a4 <HAL_SPI_Transmit>
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
	for(int i = 0; i < 10; i++)
 80013e6:	3c01      	subs	r4, #1
 80013e8:	d1f0      	bne.n	80013cc <SD_PowerOn+0x1c>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80013ea:	4622      	mov	r2, r4
 80013ec:	2102      	movs	r1, #2
 80013ee:	4826      	ldr	r0, [pc, #152]	; (8001488 <SD_PowerOn+0xd8>)
 80013f0:	f002 f964 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f001 fe89 	bl	800310c <HAL_Delay>

	/* slave select */
	SELECT();

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80013fa:	2140      	movs	r1, #64	; 0x40
	args[1] = 0;
	args[2] = 0;
	args[3] = 0;
	args[4] = 0;
 80013fc:	f44f 4315 	mov.w	r3, #38144	; 0x9500
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001400:	682a      	ldr	r2, [r5, #0]
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001402:	9104      	str	r1, [sp, #16]
	args[4] = 0;
 8001404:	f8ad 3014 	strh.w	r3, [sp, #20]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001408:	6893      	ldr	r3, [r2, #8]
 800140a:	0798      	lsls	r0, r3, #30
 800140c:	d5fc      	bpl.n	8001408 <SD_PowerOn+0x58>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800140e:	481f      	ldr	r0, [pc, #124]	; (800148c <SD_PowerOn+0xdc>)
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001410:	4f1e      	ldr	r7, [pc, #120]	; (800148c <SD_PowerOn+0xdc>)
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001412:	2364      	movs	r3, #100	; 0x64
 8001414:	2206      	movs	r2, #6
 8001416:	a904      	add	r1, sp, #16
 8001418:	f003 f9c4 	bl	80047a4 <HAL_SPI_Transmit>
}
 800141c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	dummy = 0xFF;
 8001420:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001424:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001426:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001428:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800142c:	6893      	ldr	r3, [r2, #8]
 800142e:	0799      	lsls	r1, r3, #30
 8001430:	d5fc      	bpl.n	800142c <SD_PowerOn+0x7c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001432:	2301      	movs	r3, #1
 8001434:	9600      	str	r6, [sp, #0]
 8001436:	f10d 020f 	add.w	r2, sp, #15
 800143a:	f10d 010e 	add.w	r1, sp, #14
 800143e:	4638      	mov	r0, r7
 8001440:	f003 fb02 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001444:	f89d 300f 	ldrb.w	r3, [sp, #15]
	args[5] = 0x95;		/* CRC */

	SPI_TxBuffer(args, sizeof(args));

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001448:	2b01      	cmp	r3, #1
 800144a:	d001      	beq.n	8001450 <SD_PowerOn+0xa0>
 800144c:	3c01      	subs	r4, #1
 800144e:	d1ea      	bne.n	8001426 <SD_PowerOn+0x76>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <SD_PowerOn+0xd8>)
 8001454:	2102      	movs	r1, #2
 8001456:	f002 f931 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f001 fe56 	bl	800310c <HAL_Delay>
static void SPI_TxByte(uint8_t data)
 8001460:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001462:	682a      	ldr	r2, [r5, #0]
 8001464:	f88d 300f 	strb.w	r3, [sp, #15]
 8001468:	6893      	ldr	r3, [r2, #8]
 800146a:	079b      	lsls	r3, r3, #30
 800146c:	d5fc      	bpl.n	8001468 <SD_PowerOn+0xb8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	2201      	movs	r2, #1
 8001472:	f10d 010f 	add.w	r1, sp, #15
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <SD_PowerOn+0xdc>)
 8001478:	f003 f994 	bl	80047a4 <HAL_SPI_Transmit>
	}

	DESELECT();
	SPI_TxByte(0XFF);

	PowerFlag = 1;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SD_PowerOn+0xe0>)
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
}
 8001482:	b006      	add	sp, #24
 8001484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001488:	40020800 	.word	0x40020800
 800148c:	2000238c 	.word	0x2000238c
 8001490:	20000215 	.word	0x20000215

08001494 <SD_RxDataBlock>:
	return PowerFlag;
}

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001498:	4e33      	ldr	r6, [pc, #204]	; (8001568 <SD_RxDataBlock+0xd4>)
 800149a:	4c34      	ldr	r4, [pc, #208]	; (800156c <SD_RxDataBlock+0xd8>)
 800149c:	23c8      	movs	r3, #200	; 0xc8
{
 800149e:	b085      	sub	sp, #20
 80014a0:	4605      	mov	r5, r0
 80014a2:	4689      	mov	r9, r1
	Timer1 = 200;
 80014a4:	8033      	strh	r3, [r6, #0]
	dummy = 0xFF;
 80014a6:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80014aa:	2764      	movs	r7, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80014ac:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80014ae:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80014b2:	6893      	ldr	r3, [r2, #8]
 80014b4:	079b      	lsls	r3, r3, #30
 80014b6:	d5fc      	bpl.n	80014b2 <SD_RxDataBlock+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80014b8:	2301      	movs	r3, #1
 80014ba:	9700      	str	r7, [sp, #0]
 80014bc:	f10d 020f 	add.w	r2, sp, #15
 80014c0:	f10d 010e 	add.w	r1, sp, #14
 80014c4:	4620      	mov	r0, r4
 80014c6:	f003 fabf 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 80014ca:	f89d 300f 	ldrb.w	r3, [sp, #15]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
	} while((token == 0xFF) && Timer1);
 80014ce:	2bff      	cmp	r3, #255	; 0xff
 80014d0:	d105      	bne.n	80014de <SD_RxDataBlock+0x4a>
 80014d2:	8830      	ldrh	r0, [r6, #0]
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d1e9      	bne.n	80014ac <SD_RxDataBlock+0x18>
	/* discard CRC */
	SPI_RxByte();
	SPI_RxByte();

	return TRUE;
}
 80014d8:	b005      	add	sp, #20
 80014da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 80014de:	2bfe      	cmp	r3, #254	; 0xfe
 80014e0:	d140      	bne.n	8001564 <SD_RxDataBlock+0xd0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80014e2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800156c <SD_RxDataBlock+0xd8>
 80014e6:	44a9      	add	r9, r5
	dummy = 0xFF;
 80014e8:	27ff      	movs	r7, #255	; 0xff
 80014ea:	3d01      	subs	r5, #1
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80014ec:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80014ee:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80014f0:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80014f4:	6893      	ldr	r3, [r2, #8]
 80014f6:	0798      	lsls	r0, r3, #30
 80014f8:	d5fc      	bpl.n	80014f4 <SD_RxDataBlock+0x60>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80014fa:	2301      	movs	r3, #1
 80014fc:	9600      	str	r6, [sp, #0]
 80014fe:	f10d 020f 	add.w	r2, sp, #15
 8001502:	f10d 010e 	add.w	r1, sp, #14
 8001506:	4640      	mov	r0, r8
 8001508:	f003 fa9e 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 800150c:	f89d 300f 	ldrb.w	r3, [sp, #15]
	*buff = SPI_RxByte();
 8001510:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while(len--);
 8001514:	45a9      	cmp	r9, r5
 8001516:	d1ea      	bne.n	80014ee <SD_RxDataBlock+0x5a>
	dummy = 0xFF;
 8001518:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800151a:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800151c:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001520:	6893      	ldr	r3, [r2, #8]
 8001522:	0799      	lsls	r1, r3, #30
 8001524:	d5fc      	bpl.n	8001520 <SD_RxDataBlock+0x8c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001526:	2364      	movs	r3, #100	; 0x64
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	f10d 020f 	add.w	r2, sp, #15
 800152e:	2301      	movs	r3, #1
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <SD_RxDataBlock+0xd8>)
 8001532:	f10d 010e 	add.w	r1, sp, #14
 8001536:	f003 fa87 	bl	8004a48 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 800153a:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800153c:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800153e:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001542:	6893      	ldr	r3, [r2, #8]
 8001544:	079b      	lsls	r3, r3, #30
 8001546:	d5fc      	bpl.n	8001542 <SD_RxDataBlock+0xae>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001548:	2364      	movs	r3, #100	; 0x64
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	f10d 020f 	add.w	r2, sp, #15
 8001550:	2301      	movs	r3, #1
 8001552:	f10d 010e 	add.w	r1, sp, #14
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <SD_RxDataBlock+0xd8>)
 8001558:	f003 fa76 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return TRUE;
 800155c:	2001      	movs	r0, #1
}
 800155e:	b005      	add	sp, #20
 8001560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 8001564:	2000      	movs	r0, #0
 8001566:	e7b7      	b.n	80014d8 <SD_RxDataBlock+0x44>
 8001568:	20000216 	.word	0x20000216
 800156c:	2000238c 	.word	0x2000238c

08001570 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Timer2 = 500;
 8001574:	4d5b      	ldr	r5, [pc, #364]	; (80016e4 <SD_SendCmd+0x174>)
 8001576:	4c5c      	ldr	r4, [pc, #368]	; (80016e8 <SD_SendCmd+0x178>)
 8001578:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 800157c:	b085      	sub	sp, #20
 800157e:	4681      	mov	r9, r0
 8001580:	4688      	mov	r8, r1
	Timer2 = 500;
 8001582:	802b      	strh	r3, [r5, #0]
	dummy = 0xFF;
 8001584:	27ff      	movs	r7, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001586:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001588:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800158a:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800158e:	6893      	ldr	r3, [r2, #8]
 8001590:	0798      	lsls	r0, r3, #30
 8001592:	d5fc      	bpl.n	800158e <SD_SendCmd+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001594:	2301      	movs	r3, #1
 8001596:	9600      	str	r6, [sp, #0]
 8001598:	f10d 020f 	add.w	r2, sp, #15
 800159c:	f10d 010e 	add.w	r1, sp, #14
 80015a0:	4620      	mov	r0, r4
 80015a2:	f003 fa51 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 80015a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while ((res != 0xFF) && Timer2);
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d006      	beq.n	80015bc <SD_SendCmd+0x4c>
 80015ae:	882b      	ldrh	r3, [r5, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1e9      	bne.n	8001588 <SD_SendCmd+0x18>
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80015b4:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 80015b6:	b005      	add	sp, #20
 80015b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80015bc:	6822      	ldr	r2, [r4, #0]
 80015be:	f88d 900f 	strb.w	r9, [sp, #15]
 80015c2:	6893      	ldr	r3, [r2, #8]
 80015c4:	0799      	lsls	r1, r3, #30
 80015c6:	d5fc      	bpl.n	80015c2 <SD_SendCmd+0x52>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	2201      	movs	r2, #1
 80015cc:	4846      	ldr	r0, [pc, #280]	; (80016e8 <SD_SendCmd+0x178>)
 80015ce:	f10d 010f 	add.w	r1, sp, #15
 80015d2:	f003 f8e7 	bl	80047a4 <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80015d6:	ea4f 6318 	mov.w	r3, r8, lsr #24
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80015da:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80015dc:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80015e0:	6893      	ldr	r3, [r2, #8]
 80015e2:	079b      	lsls	r3, r3, #30
 80015e4:	d5fc      	bpl.n	80015e0 <SD_SendCmd+0x70>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80015e6:	2364      	movs	r3, #100	; 0x64
 80015e8:	2201      	movs	r2, #1
 80015ea:	483f      	ldr	r0, [pc, #252]	; (80016e8 <SD_SendCmd+0x178>)
 80015ec:	f10d 010f 	add.w	r1, sp, #15
 80015f0:	f003 f8d8 	bl	80047a4 <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80015f4:	ea4f 4318 	mov.w	r3, r8, lsr #16
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80015f8:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80015fa:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80015fe:	6893      	ldr	r3, [r2, #8]
 8001600:	079f      	lsls	r7, r3, #30
 8001602:	d5fc      	bpl.n	80015fe <SD_SendCmd+0x8e>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001604:	2364      	movs	r3, #100	; 0x64
 8001606:	2201      	movs	r2, #1
 8001608:	4837      	ldr	r0, [pc, #220]	; (80016e8 <SD_SendCmd+0x178>)
 800160a:	f10d 010f 	add.w	r1, sp, #15
 800160e:	f003 f8c9 	bl	80047a4 <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001612:	ea4f 2318 	mov.w	r3, r8, lsr #8
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001616:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001618:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800161c:	6893      	ldr	r3, [r2, #8]
 800161e:	079e      	lsls	r6, r3, #30
 8001620:	d5fc      	bpl.n	800161c <SD_SendCmd+0xac>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001622:	2201      	movs	r2, #1
 8001624:	4830      	ldr	r0, [pc, #192]	; (80016e8 <SD_SendCmd+0x178>)
 8001626:	2364      	movs	r3, #100	; 0x64
 8001628:	f10d 010f 	add.w	r1, sp, #15
 800162c:	f003 f8ba 	bl	80047a4 <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001630:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001632:	f88d 800f 	strb.w	r8, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001636:	6893      	ldr	r3, [r2, #8]
 8001638:	079d      	lsls	r5, r3, #30
 800163a:	d5fc      	bpl.n	8001636 <SD_SendCmd+0xc6>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800163c:	482a      	ldr	r0, [pc, #168]	; (80016e8 <SD_SendCmd+0x178>)
 800163e:	2364      	movs	r3, #100	; 0x64
 8001640:	2201      	movs	r2, #1
 8001642:	f10d 010f 	add.w	r1, sp, #15
 8001646:	f003 f8ad 	bl	80047a4 <HAL_SPI_Transmit>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800164a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800164e:	d035      	beq.n	80016bc <SD_SendCmd+0x14c>
	else crc = 1;
 8001650:	f1b9 0f48 	cmp.w	r9, #72	; 0x48
 8001654:	bf0c      	ite	eq
 8001656:	2387      	moveq	r3, #135	; 0x87
 8001658:	2301      	movne	r3, #1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800165a:	6822      	ldr	r2, [r4, #0]
 800165c:	f88d 300f 	strb.w	r3, [sp, #15]
 8001660:	6893      	ldr	r3, [r2, #8]
 8001662:	0798      	lsls	r0, r3, #30
 8001664:	d5fc      	bpl.n	8001660 <SD_SendCmd+0xf0>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001666:	4820      	ldr	r0, [pc, #128]	; (80016e8 <SD_SendCmd+0x178>)
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	2201      	movs	r2, #1
 800166c:	f10d 010f 	add.w	r1, sp, #15
 8001670:	f003 f898 	bl	80047a4 <HAL_SPI_Transmit>
	if (cmd == CMD12) SPI_RxByte();
 8001674:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
 8001678:	d022      	beq.n	80016c0 <SD_SendCmd+0x150>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800167a:	4f1b      	ldr	r7, [pc, #108]	; (80016e8 <SD_SendCmd+0x178>)
	else crc = 1;
 800167c:	250a      	movs	r5, #10
	dummy = 0xFF;
 800167e:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001682:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001684:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8001686:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800168a:	6893      	ldr	r3, [r2, #8]
 800168c:	079b      	lsls	r3, r3, #30
 800168e:	d5fc      	bpl.n	800168a <SD_SendCmd+0x11a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001690:	2301      	movs	r3, #1
 8001692:	9600      	str	r6, [sp, #0]
 8001694:	f10d 020f 	add.w	r2, sp, #15
 8001698:	f10d 010e 	add.w	r1, sp, #14
 800169c:	4638      	mov	r0, r7
 800169e:	f003 f9d3 	bl	8004a48 <HAL_SPI_TransmitReceive>
	} while ((res & 0x80) && --n);
 80016a2:	f99d 300f 	ldrsb.w	r3, [sp, #15]
	return data;
 80016a6:	f89d 000f 	ldrb.w	r0, [sp, #15]
	} while ((res & 0x80) && --n);
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	da83      	bge.n	80015b6 <SD_SendCmd+0x46>
 80016ae:	1e6b      	subs	r3, r5, #1
 80016b0:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 80016b4:	d1e6      	bne.n	8001684 <SD_SendCmd+0x114>
}
 80016b6:	b005      	add	sp, #20
 80016b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80016bc:	2395      	movs	r3, #149	; 0x95
 80016be:	e7cc      	b.n	800165a <SD_SendCmd+0xea>
	dummy = 0xFF;
 80016c0:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80016c2:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80016c4:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80016c8:	6893      	ldr	r3, [r2, #8]
 80016ca:	0799      	lsls	r1, r3, #30
 80016cc:	d5fc      	bpl.n	80016c8 <SD_SendCmd+0x158>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80016ce:	2364      	movs	r3, #100	; 0x64
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	f10d 020f 	add.w	r2, sp, #15
 80016d6:	2301      	movs	r3, #1
 80016d8:	f10d 010e 	add.w	r1, sp, #14
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <SD_SendCmd+0x178>)
 80016de:	f003 f9b3 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 80016e2:	e7ca      	b.n	800167a <SD_SendCmd+0x10a>
 80016e4:	20000218 	.word	0x20000218
 80016e8:	2000238c 	.word	0x2000238c

080016ec <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d145      	bne.n	800177c <SD_disk_initialize+0x90>
{
 80016f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80016f4:	4d7f      	ldr	r5, [pc, #508]	; (80018f4 <SD_disk_initialize+0x208>)
 80016f6:	782c      	ldrb	r4, [r5, #0]
 80016f8:	f014 0402 	ands.w	r4, r4, #2
{
 80016fc:	b087      	sub	sp, #28
	if(Stat & STA_NODISK) return Stat;
 80016fe:	d004      	beq.n	800170a <SD_disk_initialize+0x1e>
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 8001700:	7828      	ldrb	r0, [r5, #0]
 8001702:	b2c0      	uxtb	r0, r0
}
 8001704:	b007      	add	sp, #28
 8001706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SD_PowerOn();
 800170a:	f7ff fe51 	bl	80013b0 <SD_PowerOn>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800170e:	4622      	mov	r2, r4
 8001710:	2102      	movs	r1, #2
 8001712:	4879      	ldr	r0, [pc, #484]	; (80018f8 <SD_disk_initialize+0x20c>)
 8001714:	f001 ffd2 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f001 fcf7 	bl	800310c <HAL_Delay>
	if (SD_SendCmd(CMD0, 0) == 1)
 800171e:	4621      	mov	r1, r4
 8001720:	2040      	movs	r0, #64	; 0x40
 8001722:	f7ff ff25 	bl	8001570 <SD_SendCmd>
 8001726:	2801      	cmp	r0, #1
 8001728:	4607      	mov	r7, r0
 800172a:	d030      	beq.n	800178e <SD_disk_initialize+0xa2>
 800172c:	4e73      	ldr	r6, [pc, #460]	; (80018fc <SD_disk_initialize+0x210>)
 800172e:	f10d 0813 	add.w	r8, sp, #19
 8001732:	f10d 0712 	add.w	r7, sp, #18
	CardType = type;
 8001736:	4b72      	ldr	r3, [pc, #456]	; (8001900 <SD_disk_initialize+0x214>)
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001738:	486f      	ldr	r0, [pc, #444]	; (80018f8 <SD_disk_initialize+0x20c>)
	CardType = type;
 800173a:	701c      	strb	r4, [r3, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2102      	movs	r1, #2
 8001740:	f001 ffbc 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f001 fce1 	bl	800310c <HAL_Delay>
	dummy = 0xFF;
 800174a:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800174c:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 800174e:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001752:	6893      	ldr	r3, [r2, #8]
 8001754:	079b      	lsls	r3, r3, #30
 8001756:	d5fc      	bpl.n	8001752 <SD_disk_initialize+0x66>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001758:	2364      	movs	r3, #100	; 0x64
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	4867      	ldr	r0, [pc, #412]	; (80018fc <SD_disk_initialize+0x210>)
 800175e:	2301      	movs	r3, #1
 8001760:	4642      	mov	r2, r8
 8001762:	4639      	mov	r1, r7
 8001764:	f003 f970 	bl	8004a48 <HAL_SPI_TransmitReceive>
	if (type)
 8001768:	b154      	cbz	r4, 8001780 <SD_disk_initialize+0x94>
		Stat &= ~STA_NOINIT;
 800176a:	782b      	ldrb	r3, [r5, #0]
 800176c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001770:	702b      	strb	r3, [r5, #0]
	return Stat;
 8001772:	7828      	ldrb	r0, [r5, #0]
 8001774:	b2c0      	uxtb	r0, r0
}
 8001776:	b007      	add	sp, #28
 8001778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(drv) return STA_NOINIT;
 800177c:	2001      	movs	r0, #1
}
 800177e:	4770      	bx	lr
	return Stat;
 8001780:	7828      	ldrb	r0, [r5, #0]
	PowerFlag = 0;
 8001782:	4b60      	ldr	r3, [pc, #384]	; (8001904 <SD_disk_initialize+0x218>)
	return Stat;
 8001784:	b2c0      	uxtb	r0, r0
	PowerFlag = 0;
 8001786:	701c      	strb	r4, [r3, #0]
}
 8001788:	b007      	add	sp, #28
 800178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Timer1 = 1000;
 800178e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8001908 <SD_disk_initialize+0x21c>
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001796:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800179a:	2048      	movs	r0, #72	; 0x48
		Timer1 = 1000;
 800179c:	f8a9 3000 	strh.w	r3, [r9]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80017a0:	f7ff fee6 	bl	8001570 <SD_SendCmd>
 80017a4:	2801      	cmp	r0, #1
 80017a6:	d167      	bne.n	8001878 <SD_disk_initialize+0x18c>
 80017a8:	4e54      	ldr	r6, [pc, #336]	; (80018fc <SD_disk_initialize+0x210>)
 80017aa:	ab05      	add	r3, sp, #20
 80017ac:	9303      	str	r3, [sp, #12]
 80017ae:	469a      	mov	sl, r3
 80017b0:	f10d 0813 	add.w	r8, sp, #19
 80017b4:	f10d 0712 	add.w	r7, sp, #18
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80017b8:	46b3      	mov	fp, r6
	dummy = 0xFF;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017be:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 80017c0:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017c4:	6893      	ldr	r3, [r2, #8]
 80017c6:	0799      	lsls	r1, r3, #30
 80017c8:	d5fc      	bpl.n	80017c4 <SD_disk_initialize+0xd8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80017ca:	2364      	movs	r3, #100	; 0x64
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	4642      	mov	r2, r8
 80017d0:	2301      	movs	r3, #1
 80017d2:	4639      	mov	r1, r7
 80017d4:	4658      	mov	r0, fp
 80017d6:	f003 f937 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 80017da:	f89d 3013 	ldrb.w	r3, [sp, #19]
				ocr[n] = SPI_RxByte();
 80017de:	f80a 3b01 	strb.w	r3, [sl], #1
			for (n = 0; n < 4; n++)
 80017e2:	ab06      	add	r3, sp, #24
 80017e4:	459a      	cmp	sl, r3
 80017e6:	d1e8      	bne.n	80017ba <SD_disk_initialize+0xce>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80017e8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d1a2      	bne.n	8001736 <SD_disk_initialize+0x4a>
 80017f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80017f4:	2baa      	cmp	r3, #170	; 0xaa
 80017f6:	d19e      	bne.n	8001736 <SD_disk_initialize+0x4a>
 80017f8:	e003      	b.n	8001802 <SD_disk_initialize+0x116>
				} while (Timer1);
 80017fa:	f8b9 3000 	ldrh.w	r3, [r9]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d099      	beq.n	8001736 <SD_disk_initialize+0x4a>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001802:	2100      	movs	r1, #0
 8001804:	2077      	movs	r0, #119	; 0x77
 8001806:	f7ff feb3 	bl	8001570 <SD_SendCmd>
 800180a:	2801      	cmp	r0, #1
 800180c:	d8f5      	bhi.n	80017fa <SD_disk_initialize+0x10e>
 800180e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001812:	2069      	movs	r0, #105	; 0x69
 8001814:	f7ff feac 	bl	8001570 <SD_SendCmd>
 8001818:	2800      	cmp	r0, #0
 800181a:	d1ee      	bne.n	80017fa <SD_disk_initialize+0x10e>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800181c:	f8b9 3000 	ldrh.w	r3, [r9]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d088      	beq.n	8001736 <SD_disk_initialize+0x4a>
 8001824:	4601      	mov	r1, r0
 8001826:	207a      	movs	r0, #122	; 0x7a
 8001828:	f7ff fea2 	bl	8001570 <SD_SendCmd>
 800182c:	2800      	cmp	r0, #0
 800182e:	d182      	bne.n	8001736 <SD_disk_initialize+0x4a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001830:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80018fc <SD_disk_initialize+0x210>
 8001834:	f8dd b00c 	ldr.w	fp, [sp, #12]
	dummy = 0xFF;
 8001838:	24ff      	movs	r4, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800183a:	f04f 0a64 	mov.w	sl, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800183e:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8001840:	f88d 4012 	strb.w	r4, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001844:	6883      	ldr	r3, [r0, #8]
 8001846:	079a      	lsls	r2, r3, #30
 8001848:	d5fc      	bpl.n	8001844 <SD_disk_initialize+0x158>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800184a:	2301      	movs	r3, #1
 800184c:	f8cd a000 	str.w	sl, [sp]
 8001850:	4642      	mov	r2, r8
 8001852:	4639      	mov	r1, r7
 8001854:	4648      	mov	r0, r9
 8001856:	f003 f8f7 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 800185a:	f89d 3013 	ldrb.w	r3, [sp, #19]
						ocr[n] = SPI_RxByte();
 800185e:	f80b 3b01 	strb.w	r3, [fp], #1
					for (n = 0; n < 4; n++)
 8001862:	ab06      	add	r3, sp, #24
 8001864:	459b      	cmp	fp, r3
 8001866:	d1ea      	bne.n	800183e <SD_disk_initialize+0x152>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001868:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800186c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001870:	bf14      	ite	ne
 8001872:	240c      	movne	r4, #12
 8001874:	2404      	moveq	r4, #4
 8001876:	e75e      	b.n	8001736 <SD_disk_initialize+0x4a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001878:	4621      	mov	r1, r4
 800187a:	2077      	movs	r0, #119	; 0x77
 800187c:	f7ff fe78 	bl	8001570 <SD_SendCmd>
 8001880:	2801      	cmp	r0, #1
 8001882:	d805      	bhi.n	8001890 <SD_disk_initialize+0x1a4>
 8001884:	e01c      	b.n	80018c0 <SD_disk_initialize+0x1d4>
			} while (Timer1);
 8001886:	f8b9 3000 	ldrh.w	r3, [r9]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f43f af4e 	beq.w	800172c <SD_disk_initialize+0x40>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001890:	2100      	movs	r1, #0
 8001892:	2041      	movs	r0, #65	; 0x41
 8001894:	f7ff fe6c 	bl	8001570 <SD_SendCmd>
 8001898:	2800      	cmp	r0, #0
 800189a:	d1f4      	bne.n	8001886 <SD_disk_initialize+0x19a>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800189c:	f8b9 3000 	ldrh.w	r3, [r9]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f43f af43 	beq.w	800172c <SD_disk_initialize+0x40>
 80018a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018aa:	2050      	movs	r0, #80	; 0x50
 80018ac:	f7ff fe60 	bl	8001570 <SD_SendCmd>
 80018b0:	4e12      	ldr	r6, [pc, #72]	; (80018fc <SD_disk_initialize+0x210>)
 80018b2:	b900      	cbnz	r0, 80018b6 <SD_disk_initialize+0x1ca>
 80018b4:	463c      	mov	r4, r7
 80018b6:	f10d 0813 	add.w	r8, sp, #19
 80018ba:	f10d 0712 	add.w	r7, sp, #18
 80018be:	e73a      	b.n	8001736 <SD_disk_initialize+0x4a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80018c0:	4621      	mov	r1, r4
 80018c2:	2069      	movs	r0, #105	; 0x69
 80018c4:	f7ff fe54 	bl	8001570 <SD_SendCmd>
 80018c8:	2801      	cmp	r0, #1
 80018ca:	d8e1      	bhi.n	8001890 <SD_disk_initialize+0x1a4>
 80018cc:	e004      	b.n	80018d8 <SD_disk_initialize+0x1ec>
			} while (Timer1);
 80018ce:	f8b9 3000 	ldrh.w	r3, [r9]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f43f af2a 	beq.w	800172c <SD_disk_initialize+0x40>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80018d8:	2100      	movs	r1, #0
 80018da:	2077      	movs	r0, #119	; 0x77
 80018dc:	f7ff fe48 	bl	8001570 <SD_SendCmd>
 80018e0:	2801      	cmp	r0, #1
 80018e2:	d8f4      	bhi.n	80018ce <SD_disk_initialize+0x1e2>
 80018e4:	2100      	movs	r1, #0
 80018e6:	2069      	movs	r0, #105	; 0x69
 80018e8:	f7ff fe42 	bl	8001570 <SD_SendCmd>
 80018ec:	2800      	cmp	r0, #0
 80018ee:	d1ee      	bne.n	80018ce <SD_disk_initialize+0x1e2>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80018f0:	2702      	movs	r7, #2
 80018f2:	e7d3      	b.n	800189c <SD_disk_initialize+0x1b0>
 80018f4:	20000000 	.word	0x20000000
 80018f8:	40020800 	.word	0x40020800
 80018fc:	2000238c 	.word	0x2000238c
 8001900:	20000214 	.word	0x20000214
 8001904:	20000215 	.word	0x20000215
 8001908:	20000216 	.word	0x20000216

0800190c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
	if (drv) return STA_NOINIT;
 800190c:	b918      	cbnz	r0, 8001916 <SD_disk_status+0xa>
	return Stat;
 800190e:	4b03      	ldr	r3, [pc, #12]	; (800191c <SD_disk_status+0x10>)
 8001910:	7818      	ldrb	r0, [r3, #0]
 8001912:	b2c0      	uxtb	r0, r0
 8001914:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8001916:	2001      	movs	r0, #1
}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000000 	.word	0x20000000

08001920 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	b089      	sub	sp, #36	; 0x24
 8001926:	9303      	str	r3, [sp, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001928:	2800      	cmp	r0, #0
 800192a:	d14e      	bne.n	80019ca <SD_disk_read+0xaa>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d04c      	beq.n	80019ca <SD_disk_read+0xaa>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001930:	4b9b      	ldr	r3, [pc, #620]	; (8001ba0 <SD_disk_read+0x280>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	07dc      	lsls	r4, r3, #31
 8001936:	d46f      	bmi.n	8001a18 <SD_disk_read+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001938:	4b9a      	ldr	r3, [pc, #616]	; (8001ba4 <SD_disk_read+0x284>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	0758      	lsls	r0, r3, #29
 800193e:	4614      	mov	r4, r2
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001940:	4899      	ldr	r0, [pc, #612]	; (8001ba8 <SD_disk_read+0x288>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8001942:	bf58      	it	pl
 8001944:	0254      	lslpl	r4, r2, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001946:	468a      	mov	sl, r1
 8001948:	2200      	movs	r2, #0
 800194a:	2102      	movs	r1, #2
 800194c:	f001 feb6 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f001 fbdb 	bl	800310c <HAL_Delay>

	SELECT();

	if (count == 1)
 8001956:	9b03      	ldr	r3, [sp, #12]
 8001958:	2b01      	cmp	r3, #1
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800195a:	4621      	mov	r1, r4
	if (count == 1)
 800195c:	f000 80a9 	beq.w	8001ab2 <SD_disk_read+0x192>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001960:	2052      	movs	r0, #82	; 0x52
 8001962:	f7ff fe05 	bl	8001570 <SD_SendCmd>
 8001966:	4e91      	ldr	r6, [pc, #580]	; (8001bac <SD_disk_read+0x28c>)
 8001968:	9004      	str	r0, [sp, #16]
 800196a:	bba0      	cbnz	r0, 80019d6 <SD_disk_read+0xb6>
 800196c:	f10d 051f 	add.w	r5, sp, #31
 8001970:	f10d 041e 	add.w	r4, sp, #30
 8001974:	f8df b238 	ldr.w	fp, [pc, #568]	; 8001bb0 <SD_disk_read+0x290>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001978:	462a      	mov	r2, r5
	dummy = 0xFF;
 800197a:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800197e:	4637      	mov	r7, r6
 8001980:	4625      	mov	r5, r4
	Timer1 = 200;
 8001982:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 8001986:	f8ab 3000 	strh.w	r3, [fp]
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800198a:	2464      	movs	r4, #100	; 0x64
 800198c:	4691      	mov	r9, r2
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800198e:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001990:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001994:	6893      	ldr	r3, [r2, #8]
 8001996:	0799      	lsls	r1, r3, #30
 8001998:	d5fc      	bpl.n	8001994 <SD_disk_read+0x74>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800199a:	2301      	movs	r3, #1
 800199c:	9400      	str	r4, [sp, #0]
 800199e:	464a      	mov	r2, r9
 80019a0:	4629      	mov	r1, r5
 80019a2:	4638      	mov	r0, r7
 80019a4:	f003 f850 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 80019a8:	f89d 301f 	ldrb.w	r3, [sp, #31]
	} while((token == 0xFF) && Timer1);
 80019ac:	2bff      	cmp	r3, #255	; 0xff
 80019ae:	d139      	bne.n	8001a24 <SD_disk_read+0x104>
 80019b0:	f8bb 3000 	ldrh.w	r3, [fp]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1ea      	bne.n	800198e <SD_disk_read+0x6e>
 80019b8:	2301      	movs	r3, #1
 80019ba:	462c      	mov	r4, r5
 80019bc:	9304      	str	r3, [sp, #16]
 80019be:	464d      	mov	r5, r9
				if (!SD_RxDataBlock(buff, 512)) break;
				buff += 512;
			} while (--count);

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80019c0:	2100      	movs	r1, #0
 80019c2:	204c      	movs	r0, #76	; 0x4c
 80019c4:	f7ff fdd4 	bl	8001570 <SD_SendCmd>
 80019c8:	e00b      	b.n	80019e2 <SD_disk_read+0xc2>
	if (pdrv || !count) return RES_PARERR;
 80019ca:	2304      	movs	r3, #4
 80019cc:	9304      	str	r3, [sp, #16]
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 80019ce:	9804      	ldr	r0, [sp, #16]
 80019d0:	b009      	add	sp, #36	; 0x24
 80019d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019d6:	2301      	movs	r3, #1
 80019d8:	9304      	str	r3, [sp, #16]
 80019da:	f10d 051f 	add.w	r5, sp, #31
 80019de:	f10d 041e 	add.w	r4, sp, #30
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	4870      	ldr	r0, [pc, #448]	; (8001ba8 <SD_disk_read+0x288>)
 80019e6:	2102      	movs	r1, #2
 80019e8:	f001 fe68 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019ec:	2001      	movs	r0, #1
 80019ee:	f001 fb8d 	bl	800310c <HAL_Delay>
	dummy = 0xFF;
 80019f2:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019f4:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 80019f6:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019fa:	6893      	ldr	r3, [r2, #8]
 80019fc:	079b      	lsls	r3, r3, #30
 80019fe:	d5fc      	bpl.n	80019fa <SD_disk_read+0xda>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a00:	2364      	movs	r3, #100	; 0x64
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	462a      	mov	r2, r5
 8001a06:	2301      	movs	r3, #1
 8001a08:	4621      	mov	r1, r4
 8001a0a:	4868      	ldr	r0, [pc, #416]	; (8001bac <SD_disk_read+0x28c>)
 8001a0c:	f003 f81c 	bl	8004a48 <HAL_SPI_TransmitReceive>
}
 8001a10:	9804      	ldr	r0, [sp, #16]
 8001a12:	b009      	add	sp, #36	; 0x24
 8001a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	9304      	str	r3, [sp, #16]
}
 8001a1c:	9804      	ldr	r0, [sp, #16]
 8001a1e:	b009      	add	sp, #36	; 0x24
 8001a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(token != 0xFE) return FALSE;
 8001a24:	2bfe      	cmp	r3, #254	; 0xfe
 8001a26:	464a      	mov	r2, r9
 8001a28:	d176      	bne.n	8001b18 <SD_disk_read+0x1f8>
 8001a2a:	f10a 39ff 	add.w	r9, sl, #4294967295	; 0xffffffff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a2e:	f8cd b014 	str.w	fp, [sp, #20]
 8001a32:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 8001a36:	2464      	movs	r4, #100	; 0x64
 8001a38:	4693      	mov	fp, r2
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a3a:	6831      	ldr	r1, [r6, #0]
	dummy = 0xFF;
 8001a3c:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a40:	688b      	ldr	r3, [r1, #8]
 8001a42:	079b      	lsls	r3, r3, #30
 8001a44:	d5fc      	bpl.n	8001a40 <SD_disk_read+0x120>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a46:	2301      	movs	r3, #1
 8001a48:	9400      	str	r4, [sp, #0]
 8001a4a:	465a      	mov	r2, fp
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	4638      	mov	r0, r7
 8001a50:	f002 fffa 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001a54:	f89d 301f 	ldrb.w	r3, [sp, #31]
	*buff = SPI_RxByte();
 8001a58:	f809 3f01 	strb.w	r3, [r9, #1]!
	} while(len--);
 8001a5c:	45d1      	cmp	r9, sl
 8001a5e:	d1ec      	bne.n	8001a3a <SD_disk_read+0x11a>
	dummy = 0xFF;
 8001a60:	465a      	mov	r2, fp
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a62:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8001a64:	f8dd b014 	ldr.w	fp, [sp, #20]
 8001a68:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a6c:	6883      	ldr	r3, [r0, #8]
 8001a6e:	079c      	lsls	r4, r3, #30
 8001a70:	d5fc      	bpl.n	8001a6c <SD_disk_read+0x14c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a72:	2364      	movs	r3, #100	; 0x64
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4629      	mov	r1, r5
 8001a78:	2301      	movs	r3, #1
 8001a7a:	4638      	mov	r0, r7
 8001a7c:	9205      	str	r2, [sp, #20]
 8001a7e:	f002 ffe3 	bl	8004a48 <HAL_SPI_TransmitReceive>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a82:	6830      	ldr	r0, [r6, #0]
 8001a84:	9a05      	ldr	r2, [sp, #20]
	dummy = 0xFF;
 8001a86:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a8a:	6883      	ldr	r3, [r0, #8]
 8001a8c:	0799      	lsls	r1, r3, #30
 8001a8e:	d5fc      	bpl.n	8001a8a <SD_disk_read+0x16a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4629      	mov	r1, r5
 8001a96:	2301      	movs	r3, #1
 8001a98:	4638      	mov	r0, r7
 8001a9a:	9205      	str	r2, [sp, #20]
 8001a9c:	f002 ffd4 	bl	8004a48 <HAL_SPI_TransmitReceive>
			} while (--count);
 8001aa0:	9b03      	ldr	r3, [sp, #12]
 8001aa2:	9a05      	ldr	r2, [sp, #20]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	9303      	str	r3, [sp, #12]
 8001aa8:	f47f af6b 	bne.w	8001982 <SD_disk_read+0x62>
 8001aac:	462c      	mov	r4, r5
 8001aae:	4615      	mov	r5, r2
 8001ab0:	e786      	b.n	80019c0 <SD_disk_read+0xa0>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001ab2:	2051      	movs	r0, #81	; 0x51
 8001ab4:	f7ff fd5c 	bl	8001570 <SD_SendCmd>
 8001ab8:	9004      	str	r0, [sp, #16]
 8001aba:	b138      	cbz	r0, 8001acc <SD_disk_read+0x1ac>
 8001abc:	4e3b      	ldr	r6, [pc, #236]	; (8001bac <SD_disk_read+0x28c>)
 8001abe:	f10d 051f 	add.w	r5, sp, #31
 8001ac2:	f10d 041e 	add.w	r4, sp, #30
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9304      	str	r3, [sp, #16]
 8001aca:	e78a      	b.n	80019e2 <SD_disk_read+0xc2>
	Timer1 = 200;
 8001acc:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8001bb0 <SD_disk_read+0x290>
 8001ad0:	4e36      	ldr	r6, [pc, #216]	; (8001bac <SD_disk_read+0x28c>)
 8001ad2:	23c8      	movs	r3, #200	; 0xc8
 8001ad4:	f8ab 3000 	strh.w	r3, [fp]
 8001ad8:	f10d 051f 	add.w	r5, sp, #31
 8001adc:	f10d 041e 	add.w	r4, sp, #30
	dummy = 0xFF;
 8001ae0:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ae4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ae8:	4637      	mov	r7, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001aea:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001aec:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001af0:	6893      	ldr	r3, [r2, #8]
 8001af2:	0799      	lsls	r1, r3, #30
 8001af4:	d5fc      	bpl.n	8001af0 <SD_disk_read+0x1d0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001af6:	2301      	movs	r3, #1
 8001af8:	f8cd 9000 	str.w	r9, [sp]
 8001afc:	462a      	mov	r2, r5
 8001afe:	4621      	mov	r1, r4
 8001b00:	4638      	mov	r0, r7
 8001b02:	f002 ffa1 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001b06:	f89d 301f 	ldrb.w	r3, [sp, #31]
	} while((token == 0xFF) && Timer1);
 8001b0a:	2bff      	cmp	r3, #255	; 0xff
 8001b0c:	d109      	bne.n	8001b22 <SD_disk_read+0x202>
 8001b0e:	f8bb 3000 	ldrh.w	r3, [fp]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1e9      	bne.n	8001aea <SD_disk_read+0x1ca>
 8001b16:	e7d6      	b.n	8001ac6 <SD_disk_read+0x1a6>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	462c      	mov	r4, r5
 8001b1c:	9304      	str	r3, [sp, #16]
 8001b1e:	464d      	mov	r5, r9
 8001b20:	e74e      	b.n	80019c0 <SD_disk_read+0xa0>
	if(token != 0xFE) return FALSE;
 8001b22:	2bfe      	cmp	r3, #254	; 0xfe
 8001b24:	d1cf      	bne.n	8001ac6 <SD_disk_read+0x1a6>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b26:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001bac <SD_disk_read+0x28c>
 8001b2a:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
	dummy = 0xFF;
 8001b2e:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8001b32:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b36:	f04f 0b64 	mov.w	fp, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b3a:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8001b3c:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b40:	6883      	ldr	r3, [r0, #8]
 8001b42:	079b      	lsls	r3, r3, #30
 8001b44:	d5fc      	bpl.n	8001b40 <SD_disk_read+0x220>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b46:	2301      	movs	r3, #1
 8001b48:	f8cd b000 	str.w	fp, [sp]
 8001b4c:	462a      	mov	r2, r5
 8001b4e:	4621      	mov	r1, r4
 8001b50:	4648      	mov	r0, r9
 8001b52:	f002 ff79 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001b56:	f89d 301f 	ldrb.w	r3, [sp, #31]
	*buff = SPI_RxByte();
 8001b5a:	f807 3f01 	strb.w	r3, [r7, #1]!
	} while(len--);
 8001b5e:	4557      	cmp	r7, sl
 8001b60:	d1eb      	bne.n	8001b3a <SD_disk_read+0x21a>
	dummy = 0xFF;
 8001b62:	23ff      	movs	r3, #255	; 0xff
 8001b64:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b68:	6833      	ldr	r3, [r6, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	0797      	lsls	r7, r2, #30
 8001b6e:	d5fc      	bpl.n	8001b6a <SD_disk_read+0x24a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b70:	2364      	movs	r3, #100	; 0x64
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	480d      	ldr	r0, [pc, #52]	; (8001bac <SD_disk_read+0x28c>)
 8001b76:	2301      	movs	r3, #1
 8001b78:	462a      	mov	r2, r5
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	f002 ff64 	bl	8004a48 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8001b80:	23ff      	movs	r3, #255	; 0xff
 8001b82:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b86:	6833      	ldr	r3, [r6, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	0790      	lsls	r0, r2, #30
 8001b8c:	d5fc      	bpl.n	8001b88 <SD_disk_read+0x268>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b8e:	2364      	movs	r3, #100	; 0x64
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	462a      	mov	r2, r5
 8001b94:	2301      	movs	r3, #1
 8001b96:	4621      	mov	r1, r4
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <SD_disk_read+0x28c>)
 8001b9a:	f002 ff55 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return TRUE;
 8001b9e:	e720      	b.n	80019e2 <SD_disk_read+0xc2>
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000214 	.word	0x20000214
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	2000238c 	.word	0x2000238c
 8001bb0:	20000216 	.word	0x20000216

08001bb4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb8:	b087      	sub	sp, #28
 8001bba:	e9cd 3102 	strd	r3, r1, [sp, #8]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	d16c      	bne.n	8001c9c <SD_disk_write+0xe8>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06a      	beq.n	8001c9c <SD_disk_write+0xe8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001bc6:	4bb3      	ldr	r3, [pc, #716]	; (8001e94 <SD_disk_write+0x2e0>)
 8001bc8:	4614      	mov	r4, r2
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	07d6      	lsls	r6, r2, #31
 8001bce:	f100 808a 	bmi.w	8001ce6 <SD_disk_write+0x132>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	075d      	lsls	r5, r3, #29
 8001bd6:	f100 8101 	bmi.w	8001ddc <SD_disk_write+0x228>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001bda:	4daf      	ldr	r5, [pc, #700]	; (8001e98 <SD_disk_write+0x2e4>)
 8001bdc:	782b      	ldrb	r3, [r5, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
	if (!(CardType & CT_SD2)) sector *= 512;
 8001be0:	0758      	lsls	r0, r3, #29
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001be2:	f04f 0102 	mov.w	r1, #2
 8001be6:	48ad      	ldr	r0, [pc, #692]	; (8001e9c <SD_disk_write+0x2e8>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8001be8:	bf58      	it	pl
 8001bea:	0264      	lslpl	r4, r4, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001bec:	f001 fd66 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f001 fa8b 	bl	800310c <HAL_Delay>

	SELECT();

	if (count == 1)
 8001bf6:	9b02      	ldr	r3, [sp, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	f000 80fd 	beq.w	8001df8 <SD_disk_write+0x244>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001bfe:	782b      	ldrb	r3, [r5, #0]
 8001c00:	079a      	lsls	r2, r3, #30
 8001c02:	f100 80f0 	bmi.w	8001de6 <SD_disk_write+0x232>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001c06:	4621      	mov	r1, r4
 8001c08:	2059      	movs	r0, #89	; 0x59
 8001c0a:	f7ff fcb1 	bl	8001570 <SD_SendCmd>
 8001c0e:	4da4      	ldr	r5, [pc, #656]	; (8001ea0 <SD_disk_write+0x2ec>)
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d148      	bne.n	8001ca6 <SD_disk_write+0xf2>
 8001c14:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8001ea4 <SD_disk_write+0x2f0>
 8001c18:	f10d 0617 	add.w	r6, sp, #23
 8001c1c:	f10d 0716 	add.w	r7, sp, #22
	dummy = 0xFF;
 8001c20:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c24:	46a8      	mov	r8, r5
	Timer2 = 500;
 8001c26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c2a:	f8aa 3000 	strh.w	r3, [sl]
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c2e:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c30:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001c32:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c36:	6883      	ldr	r3, [r0, #8]
 8001c38:	079b      	lsls	r3, r3, #30
 8001c3a:	d5fc      	bpl.n	8001c36 <SD_disk_write+0x82>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	9400      	str	r4, [sp, #0]
 8001c40:	4632      	mov	r2, r6
 8001c42:	4639      	mov	r1, r7
 8001c44:	4640      	mov	r0, r8
 8001c46:	f002 feff 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001c4a:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8001c4e:	2bff      	cmp	r3, #255	; 0xff
 8001c50:	d04e      	beq.n	8001cf0 <SD_disk_write+0x13c>
 8001c52:	f8ba 3000 	ldrh.w	r3, [sl]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ea      	bne.n	8001c30 <SD_disk_write+0x7c>
	Timer2 = 500;
 8001c5a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c5e:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8001ea0 <SD_disk_write+0x2ec>
	Timer2 = 500;
 8001c62:	f8aa 3000 	strh.w	r3, [sl]
	dummy = 0xFF;
 8001c66:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c6a:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c6c:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001c6e:	f88d 8016 	strb.w	r8, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c72:	6883      	ldr	r3, [r0, #8]
 8001c74:	079b      	lsls	r3, r3, #30
 8001c76:	d5fc      	bpl.n	8001c72 <SD_disk_write+0xbe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c78:	2301      	movs	r3, #1
 8001c7a:	9400      	str	r4, [sp, #0]
 8001c7c:	4632      	mov	r2, r6
 8001c7e:	4639      	mov	r1, r7
 8001c80:	4648      	mov	r0, r9
 8001c82:	f002 fee1 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001c86:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8001c8a:	2bff      	cmp	r3, #255	; 0xff
 8001c8c:	f000 80bf 	beq.w	8001e0e <SD_disk_write+0x25a>
 8001c90:	f8ba 3000 	ldrh.w	r3, [sl]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e9      	bne.n	8001c6c <SD_disk_write+0xb8>
 8001c98:	2401      	movs	r4, #1
 8001c9a:	e009      	b.n	8001cb0 <SD_disk_write+0xfc>
	if (pdrv || !count) return RES_PARERR;
 8001c9c:	2404      	movs	r4, #4
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	b007      	add	sp, #28
 8001ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ca6:	2401      	movs	r4, #1
 8001ca8:	f10d 0617 	add.w	r6, sp, #23
 8001cac:	f10d 0716 	add.w	r7, sp, #22
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	487a      	ldr	r0, [pc, #488]	; (8001e9c <SD_disk_write+0x2e8>)
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	f001 fd01 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f001 fa26 	bl	800310c <HAL_Delay>
	dummy = 0xFF;
 8001cc0:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cc2:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001cc4:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cc8:	6893      	ldr	r3, [r2, #8]
 8001cca:	079b      	lsls	r3, r3, #30
 8001ccc:	d5fc      	bpl.n	8001cc8 <SD_disk_write+0x114>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	4632      	mov	r2, r6
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	4639      	mov	r1, r7
 8001cd8:	4871      	ldr	r0, [pc, #452]	; (8001ea0 <SD_disk_write+0x2ec>)
 8001cda:	f002 feb5 	bl	8004a48 <HAL_SPI_TransmitReceive>
}
 8001cde:	4620      	mov	r0, r4
 8001ce0:	b007      	add	sp, #28
 8001ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ce6:	2403      	movs	r4, #3
}
 8001ce8:	4620      	mov	r0, r4
 8001cea:	b007      	add	sp, #28
 8001cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SPI_TxByte(token);
 8001cf0:	23fc      	movs	r3, #252	; 0xfc
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cf2:	682a      	ldr	r2, [r5, #0]
 8001cf4:	f88d 3017 	strb.w	r3, [sp, #23]
 8001cf8:	6893      	ldr	r3, [r2, #8]
 8001cfa:	0799      	lsls	r1, r3, #30
 8001cfc:	d5fc      	bpl.n	8001cf8 <SD_disk_write+0x144>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2364      	movs	r3, #100	; 0x64
 8001d02:	4631      	mov	r1, r6
 8001d04:	4640      	mov	r0, r8
 8001d06:	f002 fd4d 	bl	80047a4 <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d0a:	682a      	ldr	r2, [r5, #0]
 8001d0c:	6893      	ldr	r3, [r2, #8]
 8001d0e:	079b      	lsls	r3, r3, #30
 8001d10:	d5fc      	bpl.n	8001d0c <SD_disk_write+0x158>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d16:	9903      	ldr	r1, [sp, #12]
 8001d18:	2364      	movs	r3, #100	; 0x64
 8001d1a:	4640      	mov	r0, r8
 8001d1c:	f002 fd42 	bl	80047a4 <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d20:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001d22:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d26:	6893      	ldr	r3, [r2, #8]
 8001d28:	079c      	lsls	r4, r3, #30
 8001d2a:	d5fc      	bpl.n	8001d26 <SD_disk_write+0x172>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d2c:	2364      	movs	r3, #100	; 0x64
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4632      	mov	r2, r6
 8001d32:	2301      	movs	r3, #1
 8001d34:	4639      	mov	r1, r7
 8001d36:	4640      	mov	r0, r8
 8001d38:	f002 fe86 	bl	8004a48 <HAL_SPI_TransmitReceive>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d3c:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001d3e:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d42:	6893      	ldr	r3, [r2, #8]
 8001d44:	0798      	lsls	r0, r3, #30
 8001d46:	d5fc      	bpl.n	8001d42 <SD_disk_write+0x18e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d48:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8001d4c:	f8cd b000 	str.w	fp, [sp]
 8001d50:	2301      	movs	r3, #1
 8001d52:	4632      	mov	r2, r6
 8001d54:	4639      	mov	r1, r7
 8001d56:	4640      	mov	r0, r8
 8001d58:	f002 fe76 	bl	8004a48 <HAL_SPI_TransmitReceive>
		while (i <= 64)
 8001d5c:	2441      	movs	r4, #65	; 0x41
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d5e:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001d60:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d64:	6893      	ldr	r3, [r2, #8]
 8001d66:	0799      	lsls	r1, r3, #30
 8001d68:	d5fc      	bpl.n	8001d64 <SD_disk_write+0x1b0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f8cd b000 	str.w	fp, [sp]
 8001d70:	4632      	mov	r2, r6
 8001d72:	4639      	mov	r1, r7
 8001d74:	4640      	mov	r0, r8
 8001d76:	f002 fe67 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001d7a:	f89d 3017 	ldrb.w	r3, [sp, #23]
			resp = SPI_RxByte();
 8001d7e:	f88d 3014 	strb.w	r3, [sp, #20]
			if ((resp & 0x1F) == 0x05) break;
 8001d82:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d003      	beq.n	8001d96 <SD_disk_write+0x1e2>
		while (i <= 64)
 8001d8e:	3c01      	subs	r4, #1
 8001d90:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001d94:	d1e3      	bne.n	8001d5e <SD_disk_write+0x1aa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d96:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d98:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001d9a:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d9e:	6883      	ldr	r3, [r0, #8]
 8001da0:	079a      	lsls	r2, r3, #30
 8001da2:	d5fc      	bpl.n	8001d9e <SD_disk_write+0x1ea>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001da4:	2301      	movs	r3, #1
 8001da6:	9400      	str	r4, [sp, #0]
 8001da8:	4632      	mov	r2, r6
 8001daa:	4639      	mov	r1, r7
 8001dac:	4640      	mov	r0, r8
 8001dae:	f002 fe4b 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001db2:	f89d 3017 	ldrb.w	r3, [sp, #23]
		while (SPI_RxByte() == 0);
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0ee      	beq.n	8001d98 <SD_disk_write+0x1e4>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001dba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	f47f af49 	bne.w	8001c5a <SD_disk_write+0xa6>
				buff += 512;
 8001dc8:	9b03      	ldr	r3, [sp, #12]
 8001dca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001dce:	9303      	str	r3, [sp, #12]
			} while (--count);
 8001dd0:	9b02      	ldr	r3, [sp, #8]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	f47f af26 	bne.w	8001c26 <SD_disk_write+0x72>
 8001dda:	e73e      	b.n	8001c5a <SD_disk_write+0xa6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001ddc:	2402      	movs	r4, #2
}
 8001dde:	4620      	mov	r0, r4
 8001de0:	b007      	add	sp, #28
 8001de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SD_SendCmd(CMD55, 0);
 8001de6:	2100      	movs	r1, #0
 8001de8:	2077      	movs	r0, #119	; 0x77
 8001dea:	f7ff fbc1 	bl	8001570 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001dee:	9902      	ldr	r1, [sp, #8]
 8001df0:	2057      	movs	r0, #87	; 0x57
 8001df2:	f7ff fbbd 	bl	8001570 <SD_SendCmd>
 8001df6:	e706      	b.n	8001c06 <SD_disk_write+0x52>
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001df8:	4621      	mov	r1, r4
 8001dfa:	2058      	movs	r0, #88	; 0x58
 8001dfc:	f7ff fbb8 	bl	8001570 <SD_SendCmd>
 8001e00:	b308      	cbz	r0, 8001e46 <SD_disk_write+0x292>
 8001e02:	4d27      	ldr	r5, [pc, #156]	; (8001ea0 <SD_disk_write+0x2ec>)
 8001e04:	f10d 0617 	add.w	r6, sp, #23
 8001e08:	f10d 0716 	add.w	r7, sp, #22
 8001e0c:	e744      	b.n	8001c98 <SD_disk_write+0xe4>
	SPI_TxByte(token);
 8001e0e:	23fd      	movs	r3, #253	; 0xfd
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e10:	682a      	ldr	r2, [r5, #0]
 8001e12:	f88d 3017 	strb.w	r3, [sp, #23]
 8001e16:	6893      	ldr	r3, [r2, #8]
 8001e18:	0799      	lsls	r1, r3, #30
 8001e1a:	d5fc      	bpl.n	8001e16 <SD_disk_write+0x262>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001e1c:	2364      	movs	r3, #100	; 0x64
 8001e1e:	4820      	ldr	r0, [pc, #128]	; (8001ea0 <SD_disk_write+0x2ec>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	4631      	mov	r1, r6
 8001e24:	f002 fcbe 	bl	80047a4 <HAL_SPI_Transmit>
		resp = 0x05;
 8001e28:	2305      	movs	r3, #5
 8001e2a:	f88d 3015 	strb.w	r3, [sp, #21]
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001e2e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	f47f af2e 	bne.w	8001c98 <SD_disk_write+0xe4>
	return count ? RES_ERROR : RES_OK;
 8001e3c:	9b02      	ldr	r3, [sp, #8]
 8001e3e:	1e1c      	subs	r4, r3, #0
 8001e40:	bf18      	it	ne
 8001e42:	2401      	movne	r4, #1
 8001e44:	e734      	b.n	8001cb0 <SD_disk_write+0xfc>
	Timer2 = 500;
 8001e46:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001ea4 <SD_disk_write+0x2f0>
 8001e4a:	4d15      	ldr	r5, [pc, #84]	; (8001ea0 <SD_disk_write+0x2ec>)
 8001e4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e50:	f8aa 3000 	strh.w	r3, [sl]
 8001e54:	f10d 0617 	add.w	r6, sp, #23
 8001e58:	f10d 0716 	add.w	r7, sp, #22
	dummy = 0xFF;
 8001e5c:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e60:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001e64:	462c      	mov	r4, r5
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e66:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001e68:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e6c:	6883      	ldr	r3, [r0, #8]
 8001e6e:	0799      	lsls	r1, r3, #30
 8001e70:	d5fc      	bpl.n	8001e6c <SD_disk_write+0x2b8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e72:	2301      	movs	r3, #1
 8001e74:	f8cd 8000 	str.w	r8, [sp]
 8001e78:	4632      	mov	r2, r6
 8001e7a:	4639      	mov	r1, r7
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f002 fde3 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001e82:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8001e86:	2bff      	cmp	r3, #255	; 0xff
 8001e88:	d00e      	beq.n	8001ea8 <SD_disk_write+0x2f4>
 8001e8a:	f8ba 3000 	ldrh.w	r3, [sl]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1e9      	bne.n	8001e66 <SD_disk_write+0x2b2>
 8001e92:	e701      	b.n	8001c98 <SD_disk_write+0xe4>
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000214 	.word	0x20000214
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	2000238c 	.word	0x2000238c
 8001ea4:	20000218 	.word	0x20000218
	SPI_TxByte(token);
 8001ea8:	23fe      	movs	r3, #254	; 0xfe
 8001eaa:	f88d 3017 	strb.w	r3, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	0792      	lsls	r2, r2, #30
 8001eb4:	d5fc      	bpl.n	8001eb0 <SD_disk_write+0x2fc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001eb6:	2364      	movs	r3, #100	; 0x64
 8001eb8:	4837      	ldr	r0, [pc, #220]	; (8001f98 <SD_disk_write+0x3e4>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4631      	mov	r1, r6
 8001ebe:	f002 fc71 	bl	80047a4 <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ec2:	682b      	ldr	r3, [r5, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	0794      	lsls	r4, r2, #30
 8001ec8:	d5fc      	bpl.n	8001ec4 <SD_disk_write+0x310>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001eca:	2364      	movs	r3, #100	; 0x64
 8001ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed0:	9903      	ldr	r1, [sp, #12]
 8001ed2:	4831      	ldr	r0, [pc, #196]	; (8001f98 <SD_disk_write+0x3e4>)
 8001ed4:	f002 fc66 	bl	80047a4 <HAL_SPI_Transmit>
	dummy = 0xFF;
 8001ed8:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001eda:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001edc:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ee0:	6893      	ldr	r3, [r2, #8]
 8001ee2:	0798      	lsls	r0, r3, #30
 8001ee4:	d5fc      	bpl.n	8001ee0 <SD_disk_write+0x32c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ee6:	2364      	movs	r3, #100	; 0x64
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	4632      	mov	r2, r6
 8001eec:	2301      	movs	r3, #1
 8001eee:	482a      	ldr	r0, [pc, #168]	; (8001f98 <SD_disk_write+0x3e4>)
 8001ef0:	4639      	mov	r1, r7
 8001ef2:	f002 fda9 	bl	8004a48 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8001ef6:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ef8:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001efa:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001efe:	6893      	ldr	r3, [r2, #8]
 8001f00:	0799      	lsls	r1, r3, #30
 8001f02:	d5fc      	bpl.n	8001efe <SD_disk_write+0x34a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f04:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001f08:	4823      	ldr	r0, [pc, #140]	; (8001f98 <SD_disk_write+0x3e4>)
 8001f0a:	f8cd 8000 	str.w	r8, [sp]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	4632      	mov	r2, r6
 8001f12:	4639      	mov	r1, r7
 8001f14:	f002 fd98 	bl	8004a48 <HAL_SPI_TransmitReceive>
 8001f18:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001f98 <SD_disk_write+0x3e4>
 8001f1c:	2441      	movs	r4, #65	; 0x41
	dummy = 0xFF;
 8001f1e:	f04f 09ff 	mov.w	r9, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f22:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001f24:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f28:	6883      	ldr	r3, [r0, #8]
 8001f2a:	079b      	lsls	r3, r3, #30
 8001f2c:	d5fc      	bpl.n	8001f28 <SD_disk_write+0x374>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f8cd 8000 	str.w	r8, [sp]
 8001f34:	4632      	mov	r2, r6
 8001f36:	4639      	mov	r1, r7
 8001f38:	4650      	mov	r0, sl
 8001f3a:	f002 fd85 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001f3e:	f89d 3017 	ldrb.w	r3, [sp, #23]
			resp = SPI_RxByte();
 8001f42:	f88d 3013 	strb.w	r3, [sp, #19]
			if ((resp & 0x1F) == 0x05) break;
 8001f46:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d003      	beq.n	8001f5a <SD_disk_write+0x3a6>
		while (i <= 64)
 8001f52:	3c01      	subs	r4, #1
 8001f54:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001f58:	d1e3      	bne.n	8001f22 <SD_disk_write+0x36e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f5a:	4c0f      	ldr	r4, [pc, #60]	; (8001f98 <SD_disk_write+0x3e4>)
	dummy = 0xFF;
 8001f5c:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f60:	f04f 0864 	mov.w	r8, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f64:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001f66:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f6a:	6883      	ldr	r3, [r0, #8]
 8001f6c:	0799      	lsls	r1, r3, #30
 8001f6e:	d5fc      	bpl.n	8001f6a <SD_disk_write+0x3b6>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f70:	2301      	movs	r3, #1
 8001f72:	f8cd 8000 	str.w	r8, [sp]
 8001f76:	4632      	mov	r2, r6
 8001f78:	4639      	mov	r1, r7
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f002 fd64 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8001f80:	f89d 3017 	ldrb.w	r3, [sp, #23]
		while (SPI_RxByte() == 0);
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ed      	beq.n	8001f64 <SD_disk_write+0x3b0>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001f88:	f89d 4013 	ldrb.w	r4, [sp, #19]
 8001f8c:	f004 041f 	and.w	r4, r4, #31
	return count ? RES_ERROR : RES_OK;
 8001f90:	3c05      	subs	r4, #5
 8001f92:	bf18      	it	ne
 8001f94:	2401      	movne	r4, #1
 8001f96:	e68b      	b.n	8001cb0 <SD_disk_write+0xfc>
 8001f98:	2000238c 	.word	0x2000238c

08001f9c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa0:	b08b      	sub	sp, #44	; 0x2c
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001fa2:	bb08      	cbnz	r0, 8001fe8 <SD_disk_ioctl+0x4c>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8001fa4:	2905      	cmp	r1, #5
 8001fa6:	460d      	mov	r5, r1
 8001fa8:	4617      	mov	r7, r2
 8001faa:	d017      	beq.n	8001fdc <SD_disk_ioctl+0x40>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001fac:	4b86      	ldr	r3, [pc, #536]	; (80021c8 <SD_disk_ioctl+0x22c>)
 8001fae:	781c      	ldrb	r4, [r3, #0]
 8001fb0:	f014 0401 	ands.w	r4, r4, #1
 8001fb4:	d11d      	bne.n	8001ff2 <SD_disk_ioctl+0x56>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001fb6:	4885      	ldr	r0, [pc, #532]	; (80021cc <SD_disk_ioctl+0x230>)
 8001fb8:	4622      	mov	r2, r4
 8001fba:	2102      	movs	r1, #2
 8001fbc:	f001 fb7e 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f001 f8a3 	bl	800310c <HAL_Delay>

		SELECT();

		switch (ctrl)
 8001fc6:	2d0d      	cmp	r5, #13
 8001fc8:	d818      	bhi.n	8001ffc <SD_disk_ioctl+0x60>
 8001fca:	e8df f005 	tbb	[pc, r5]
 8001fce:	7550      	.short	0x7550
 8001fd0:	17171791 	.word	0x17171791
 8001fd4:	17171717 	.word	0x17171717
 8001fd8:	45988017 	.word	0x45988017
		switch (*ptr)
 8001fdc:	7814      	ldrb	r4, [r2, #0]
 8001fde:	2c01      	cmp	r4, #1
 8001fe0:	d034      	beq.n	800204c <SD_disk_ioctl+0xb0>
 8001fe2:	2c02      	cmp	r4, #2
 8001fe4:	d02d      	beq.n	8002042 <SD_disk_ioctl+0xa6>
 8001fe6:	b34c      	cbz	r4, 800203c <SD_disk_ioctl+0xa0>
 8001fe8:	2404      	movs	r4, #4
		DESELECT();
		SPI_RxByte();
	}

	return res;
}
 8001fea:	4620      	mov	r0, r4
 8001fec:	b00b      	add	sp, #44	; 0x2c
 8001fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ff2:	2403      	movs	r4, #3
}
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	b00b      	add	sp, #44	; 0x2c
 8001ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ffc:	4e74      	ldr	r6, [pc, #464]	; (80021d0 <SD_disk_ioctl+0x234>)
		switch (ctrl)
 8001ffe:	2404      	movs	r4, #4
 8002000:	f10d 0717 	add.w	r7, sp, #23
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	4871      	ldr	r0, [pc, #452]	; (80021cc <SD_disk_ioctl+0x230>)
 8002008:	2102      	movs	r1, #2
 800200a:	f001 fb57 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800200e:	2001      	movs	r0, #1
 8002010:	f001 f87c 	bl	800310c <HAL_Delay>
	dummy = 0xFF;
 8002014:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002016:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8002018:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800201c:	6893      	ldr	r3, [r2, #8]
 800201e:	079b      	lsls	r3, r3, #30
 8002020:	d5fc      	bpl.n	800201c <SD_disk_ioctl+0x80>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002022:	2364      	movs	r3, #100	; 0x64
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	463a      	mov	r2, r7
 8002028:	2301      	movs	r3, #1
 800202a:	f10d 0116 	add.w	r1, sp, #22
 800202e:	4868      	ldr	r0, [pc, #416]	; (80021d0 <SD_disk_ioctl+0x234>)
 8002030:	f002 fd0a 	bl	8004a48 <HAL_SPI_TransmitReceive>
}
 8002034:	4620      	mov	r0, r4
 8002036:	b00b      	add	sp, #44	; 0x2c
 8002038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PowerFlag = 0;
 800203c:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <SD_disk_ioctl+0x238>)
 800203e:	701c      	strb	r4, [r3, #0]
			break;
 8002040:	e7d3      	b.n	8001fea <SD_disk_ioctl+0x4e>
	return PowerFlag;
 8002042:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <SD_disk_ioctl+0x238>)
			*(ptr + 1) = SD_CheckPower();
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	7053      	strb	r3, [r2, #1]
			res = RES_OK;		/* Power Check */
 8002048:	4604      	mov	r4, r0
			break;
 800204a:	e7ce      	b.n	8001fea <SD_disk_ioctl+0x4e>
 800204c:	9003      	str	r0, [sp, #12]
			SD_PowerOn();		/* Power On */
 800204e:	f7ff f9af 	bl	80013b0 <SD_PowerOn>
			res = RES_OK;
 8002052:	9803      	ldr	r0, [sp, #12]
 8002054:	4604      	mov	r4, r0
			break;
 8002056:	e7c8      	b.n	8001fea <SD_disk_ioctl+0x4e>
			if (SD_SendCmd(CMD58, 0) == 0)
 8002058:	2100      	movs	r1, #0
 800205a:	207a      	movs	r0, #122	; 0x7a
 800205c:	f7ff fa88 	bl	8001570 <SD_SendCmd>
 8002060:	4e5b      	ldr	r6, [pc, #364]	; (80021d0 <SD_disk_ioctl+0x234>)
 8002062:	2800      	cmp	r0, #0
 8002064:	d054      	beq.n	8002110 <SD_disk_ioctl+0x174>
 8002066:	f10d 0717 	add.w	r7, sp, #23
			res = RES_PARERR;
 800206a:	2404      	movs	r4, #4
 800206c:	e7ca      	b.n	8002004 <SD_disk_ioctl+0x68>
	Timer2 = 500;
 800206e:	4c5a      	ldr	r4, [pc, #360]	; (80021d8 <SD_disk_ioctl+0x23c>)
 8002070:	4e57      	ldr	r6, [pc, #348]	; (80021d0 <SD_disk_ioctl+0x234>)
 8002072:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002076:	8023      	strh	r3, [r4, #0]
 8002078:	f10d 0b18 	add.w	fp, sp, #24
 800207c:	f10d 0717 	add.w	r7, sp, #23
	dummy = 0xFF;
 8002080:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002084:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002088:	46b0      	mov	r8, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800208a:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 800208c:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002090:	6893      	ldr	r3, [r2, #8]
 8002092:	0798      	lsls	r0, r3, #30
 8002094:	d5fc      	bpl.n	8002090 <SD_disk_ioctl+0xf4>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002096:	2301      	movs	r3, #1
 8002098:	f8cd 9000 	str.w	r9, [sp]
 800209c:	465a      	mov	r2, fp
 800209e:	4639      	mov	r1, r7
 80020a0:	4640      	mov	r0, r8
 80020a2:	f002 fcd1 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 80020a6:	f89d 3018 	ldrb.w	r3, [sp, #24]
	} while ((res != 0xFF) && Timer2);
 80020aa:	2bff      	cmp	r3, #255	; 0xff
 80020ac:	d02e      	beq.n	800210c <SD_disk_ioctl+0x170>
 80020ae:	8823      	ldrh	r3, [r4, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ea      	bne.n	800208a <SD_disk_ioctl+0xee>
	res = RES_ERROR;
 80020b4:	2401      	movs	r4, #1
 80020b6:	e7a5      	b.n	8002004 <SD_disk_ioctl+0x68>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80020b8:	2100      	movs	r1, #0
 80020ba:	2049      	movs	r0, #73	; 0x49
 80020bc:	f7ff fa58 	bl	8001570 <SD_SendCmd>
 80020c0:	4604      	mov	r4, r0
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d044      	beq.n	8002150 <SD_disk_ioctl+0x1b4>
 80020c6:	4e42      	ldr	r6, [pc, #264]	; (80021d0 <SD_disk_ioctl+0x234>)
 80020c8:	f10d 0717 	add.w	r7, sp, #23
 80020cc:	e7f2      	b.n	80020b4 <SD_disk_ioctl+0x118>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80020ce:	2100      	movs	r1, #0
 80020d0:	2049      	movs	r0, #73	; 0x49
 80020d2:	f7ff fa4d 	bl	8001570 <SD_SendCmd>
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d1f5      	bne.n	80020c6 <SD_disk_ioctl+0x12a>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80020da:	4638      	mov	r0, r7
 80020dc:	2110      	movs	r1, #16
 80020de:	f7ff f9d9 	bl	8001494 <SD_RxDataBlock>
	res = RES_ERROR;
 80020e2:	fab0 f480 	clz	r4, r0
 80020e6:	4e3a      	ldr	r6, [pc, #232]	; (80021d0 <SD_disk_ioctl+0x234>)
 80020e8:	0964      	lsrs	r4, r4, #5
 80020ea:	f10d 0717 	add.w	r7, sp, #23
 80020ee:	e789      	b.n	8002004 <SD_disk_ioctl+0x68>
			*(WORD*) buff = 512;
 80020f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f4:	803b      	strh	r3, [r7, #0]
			break;
 80020f6:	4e36      	ldr	r6, [pc, #216]	; (80021d0 <SD_disk_ioctl+0x234>)
 80020f8:	f10d 0717 	add.w	r7, sp, #23
 80020fc:	e782      	b.n	8002004 <SD_disk_ioctl+0x68>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80020fe:	2100      	movs	r1, #0
 8002100:	204a      	movs	r0, #74	; 0x4a
 8002102:	f7ff fa35 	bl	8001570 <SD_SendCmd>
 8002106:	2800      	cmp	r0, #0
 8002108:	d1dd      	bne.n	80020c6 <SD_disk_ioctl+0x12a>
 800210a:	e7e6      	b.n	80020da <SD_disk_ioctl+0x13e>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800210c:	462c      	mov	r4, r5
 800210e:	e779      	b.n	8002004 <SD_disk_ioctl+0x68>
 8002110:	1e7d      	subs	r5, r7, #1
 8002112:	1cfc      	adds	r4, r7, #3
 8002114:	f10d 0b18 	add.w	fp, sp, #24
 8002118:	f10d 0717 	add.w	r7, sp, #23
	dummy = 0xFF;
 800211c:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002120:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002124:	46b0      	mov	r8, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002126:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8002128:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800212c:	6893      	ldr	r3, [r2, #8]
 800212e:	0799      	lsls	r1, r3, #30
 8002130:	d5fc      	bpl.n	800212c <SD_disk_ioctl+0x190>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002132:	2301      	movs	r3, #1
 8002134:	f8cd 9000 	str.w	r9, [sp]
 8002138:	465a      	mov	r2, fp
 800213a:	4639      	mov	r1, r7
 800213c:	4640      	mov	r0, r8
 800213e:	f002 fc83 	bl	8004a48 <HAL_SPI_TransmitReceive>
	return data;
 8002142:	f89d 3018 	ldrb.w	r3, [sp, #24]
					*ptr++ = SPI_RxByte();
 8002146:	f805 3f01 	strb.w	r3, [r5, #1]!
				for (n = 0; n < 4; n++)
 800214a:	42ac      	cmp	r4, r5
 800214c:	d1eb      	bne.n	8002126 <SD_disk_ioctl+0x18a>
 800214e:	e78c      	b.n	800206a <SD_disk_ioctl+0xce>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002150:	2110      	movs	r1, #16
 8002152:	a806      	add	r0, sp, #24
 8002154:	f7ff f99e 	bl	8001494 <SD_RxDataBlock>
 8002158:	2800      	cmp	r0, #0
 800215a:	d0b4      	beq.n	80020c6 <SD_disk_ioctl+0x12a>
				if ((csd[0] >> 6) == 1)
 800215c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002160:	099b      	lsrs	r3, r3, #6
 8002162:	2b01      	cmp	r3, #1
 8002164:	d022      	beq.n	80021ac <SD_disk_ioctl+0x210>
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002166:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800216a:	f89d 1020 	ldrb.w	r1, [sp, #32]
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800216e:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8002172:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 8002176:	4e16      	ldr	r6, [pc, #88]	; (80021d0 <SD_disk_ioctl+0x234>)
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 800217e:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8002182:	0289      	lsls	r1, r1, #10
 8002184:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8002188:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800218a:	440b      	add	r3, r1
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800218c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 8002190:	f002 020f 	and.w	r2, r2, #15
 8002194:	0049      	lsls	r1, r1, #1
 8002196:	f001 0106 	and.w	r1, r1, #6
 800219a:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800219e:	440a      	add	r2, r1
 80021a0:	3a07      	subs	r2, #7
 80021a2:	4093      	lsls	r3, r2
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	f10d 0717 	add.w	r7, sp, #23
 80021aa:	e72b      	b.n	8002004 <SD_disk_ioctl+0x68>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80021ac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80021b0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80021b4:	4e06      	ldr	r6, [pc, #24]	; (80021d0 <SD_disk_ioctl+0x234>)
 80021b6:	3301      	adds	r3, #1
 80021b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 80021bc:	b29b      	uxth	r3, r3
 80021be:	029b      	lsls	r3, r3, #10
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	f10d 0717 	add.w	r7, sp, #23
 80021c6:	e71d      	b.n	8002004 <SD_disk_ioctl+0x68>
 80021c8:	20000000 	.word	0x20000000
 80021cc:	40020800 	.word	0x40020800
 80021d0:	2000238c 	.word	0x2000238c
 80021d4:	20000215 	.word	0x20000215
 80021d8:	20000218 	.word	0x20000218

080021dc <testSD>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int testSD() {
 80021dc:	b570      	push	{r4, r5, r6, lr}
/* Mount SD Card */
	int ret = 0;
	if(f_mount(&fs, "/", 0) != FR_OK) {
 80021de:	494a      	ldr	r1, [pc, #296]	; (8002308 <testSD+0x12c>)
 80021e0:	484a      	ldr	r0, [pc, #296]	; (800230c <testSD+0x130>)
int testSD() {
 80021e2:	b082      	sub	sp, #8
	if(f_mount(&fs, "/", 0) != FR_OK) {
 80021e4:	2200      	movs	r2, #0
 80021e6:	f004 fd0f 	bl	8006c08 <f_mount>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d15c      	bne.n	80022a8 <testSD+0xcc>
		printf("Failed to mount SD Card\r\n");
		return -1;
	}

	/* Open file to write */
	ret = f_open(&fil, "/TEST.TXT", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80021ee:	4948      	ldr	r1, [pc, #288]	; (8002310 <testSD+0x134>)
 80021f0:	4848      	ldr	r0, [pc, #288]	; (8002314 <testSD+0x138>)
 80021f2:	2213      	movs	r2, #19
 80021f4:	f004 fd4a 	bl	8006c8c <f_open>
	if(ret != FR_OK) {
 80021f8:	4601      	mov	r1, r0
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d15a      	bne.n	80022b4 <testSD+0xd8>
		printf("Failed to open file (%i) \r\n", ret);
		return -1;
	}

	if(f_getfree("", &fre_clust, &pfs) != FR_OK) {
 80021fe:	4d46      	ldr	r5, [pc, #280]	; (8002318 <testSD+0x13c>)
 8002200:	4c46      	ldr	r4, [pc, #280]	; (800231c <testSD+0x140>)
 8002202:	4847      	ldr	r0, [pc, #284]	; (8002320 <testSD+0x144>)
 8002204:	462a      	mov	r2, r5
 8002206:	4621      	mov	r1, r4
 8002208:	f005 fa56 	bl	80076b8 <f_getfree>
 800220c:	2800      	cmp	r0, #0
 800220e:	d175      	bne.n	80022fc <testSD+0x120>
		printf("Free space check failed\r\n");
		return -1;
	}

	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002210:	682b      	ldr	r3, [r5, #0]
 8002212:	4e44      	ldr	r6, [pc, #272]	; (8002324 <testSD+0x148>)
 8002214:	6998      	ldr	r0, [r3, #24]
 8002216:	895d      	ldrh	r5, [r3, #10]
 8002218:	3802      	subs	r0, #2
 800221a:	fb05 f000 	mul.w	r0, r5, r0
 800221e:	f7fe f989 	bl	8000534 <__aeabi_ui2d>
 8002222:	2200      	movs	r2, #0
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <testSD+0x14c>)
 8002226:	f7fe f9ff 	bl	8000628 <__aeabi_dmul>
 800222a:	f7fe fcd5 	bl	8000bd8 <__aeabi_d2uiz>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800222e:	6823      	ldr	r3, [r4, #0]
	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002230:	6030      	str	r0, [r6, #0]
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002232:	fb03 f005 	mul.w	r0, r3, r5
 8002236:	f7fe f97d 	bl	8000534 <__aeabi_ui2d>
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <testSD+0x14c>)
 800223c:	2200      	movs	r2, #0
 800223e:	f7fe f9f3 	bl	8000628 <__aeabi_dmul>
 8002242:	f7fe fcc9 	bl	8000bd8 <__aeabi_d2uiz>
 8002246:	4b39      	ldr	r3, [pc, #228]	; (800232c <testSD+0x150>)
 8002248:	6018      	str	r0, [r3, #0]

	/* free space is less than 1kb */
	if(free_space < 1) {
 800224a:	2800      	cmp	r0, #0
 800224c:	d038      	beq.n	80022c0 <testSD+0xe4>
		return -1;
	}

//	printf("SD CARD MOUNTED! TESTING R/W...\r\n");

	f_puts("TEST", &fil);
 800224e:	4931      	ldr	r1, [pc, #196]	; (8002314 <testSD+0x138>)
 8002250:	4837      	ldr	r0, [pc, #220]	; (8002330 <testSD+0x154>)
 8002252:	f005 fb43 	bl	80078dc <f_puts>

	/* Close file */
	ret = f_close(&fil);
 8002256:	482f      	ldr	r0, [pc, #188]	; (8002314 <testSD+0x138>)
 8002258:	f005 f99e 	bl	8007598 <f_close>
	if(ret != FR_OK) {
 800225c:	4601      	mov	r1, r0
 800225e:	2800      	cmp	r0, #0
 8002260:	d134      	bne.n	80022cc <testSD+0xf0>
		printf("Failed to close file (%i) \r\n", ret);
		return -1;
	}

	/* Open file to read */
	ret = f_open(&fil, "/TEST.TXT", FA_READ);
 8002262:	492b      	ldr	r1, [pc, #172]	; (8002310 <testSD+0x134>)
 8002264:	482b      	ldr	r0, [pc, #172]	; (8002314 <testSD+0x138>)
 8002266:	2201      	movs	r2, #1
 8002268:	f004 fd10 	bl	8006c8c <f_open>
	if(ret != FR_OK) {
 800226c:	4601      	mov	r1, r0
 800226e:	bb98      	cbnz	r0, 80022d8 <testSD+0xfc>
		printf("Failed to open in read mode (%i) \r\n", ret);
		return -1;
	}

	char buffer[5];
	f_gets(buffer, sizeof(buffer), &fil);
 8002270:	4a28      	ldr	r2, [pc, #160]	; (8002314 <testSD+0x138>)
 8002272:	2105      	movs	r1, #5
 8002274:	4668      	mov	r0, sp
 8002276:	f005 fb03 	bl	8007880 <f_gets>

	if (strcmp(buffer, "TEST")) {
 800227a:	492d      	ldr	r1, [pc, #180]	; (8002330 <testSD+0x154>)
 800227c:	4668      	mov	r0, sp
 800227e:	f7fd ffaf 	bl	80001e0 <strcmp>
 8002282:	4604      	mov	r4, r0
 8002284:	bb70      	cbnz	r0, 80022e4 <testSD+0x108>
	}

//	printf("PASSED: read file contents\r\n");

	/* Close file */
	if(f_close(&fil) != FR_OK) {
 8002286:	4823      	ldr	r0, [pc, #140]	; (8002314 <testSD+0x138>)
 8002288:	f005 f986 	bl	8007598 <f_close>
 800228c:	bb80      	cbnz	r0, 80022f0 <testSD+0x114>
		printf("Failed to close\r\n");
		return -1;
	}

	if(f_unlink("test.txt") != FR_OK) {
 800228e:	4829      	ldr	r0, [pc, #164]	; (8002334 <testSD+0x158>)
 8002290:	f005 fa84 	bl	800779c <f_unlink>
 8002294:	b910      	cbnz	r0, 800229c <testSD+0xc0>
		printf("Failed to delete test file \r\n");
	}

	return 0;
}
 8002296:	4620      	mov	r0, r4
 8002298:	b002      	add	sp, #8
 800229a:	bd70      	pop	{r4, r5, r6, pc}
		printf("Failed to delete test file \r\n");
 800229c:	4826      	ldr	r0, [pc, #152]	; (8002338 <testSD+0x15c>)
 800229e:	f006 f9b5 	bl	800860c <puts>
}
 80022a2:	4620      	mov	r0, r4
 80022a4:	b002      	add	sp, #8
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
		printf("Failed to mount SD Card\r\n");
 80022a8:	4824      	ldr	r0, [pc, #144]	; (800233c <testSD+0x160>)
 80022aa:	f006 f9af 	bl	800860c <puts>
		return -1;
 80022ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022b2:	e7f0      	b.n	8002296 <testSD+0xba>
		printf("Failed to open file (%i) \r\n", ret);
 80022b4:	4822      	ldr	r0, [pc, #136]	; (8002340 <testSD+0x164>)
 80022b6:	f006 f923 	bl	8008500 <iprintf>
		return -1;
 80022ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022be:	e7ea      	b.n	8002296 <testSD+0xba>
		printf("Drive is full\r\n");
 80022c0:	4820      	ldr	r0, [pc, #128]	; (8002344 <testSD+0x168>)
 80022c2:	f006 f9a3 	bl	800860c <puts>
		return -1;
 80022c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022ca:	e7e4      	b.n	8002296 <testSD+0xba>
		printf("Failed to close file (%i) \r\n", ret);
 80022cc:	481e      	ldr	r0, [pc, #120]	; (8002348 <testSD+0x16c>)
 80022ce:	f006 f917 	bl	8008500 <iprintf>
		return -1;
 80022d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022d6:	e7de      	b.n	8002296 <testSD+0xba>
		printf("Failed to open in read mode (%i) \r\n", ret);
 80022d8:	481c      	ldr	r0, [pc, #112]	; (800234c <testSD+0x170>)
 80022da:	f006 f911 	bl	8008500 <iprintf>
		return -1;
 80022de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022e2:	e7d8      	b.n	8002296 <testSD+0xba>
		printf("File contents MISMATCH. FAIL R/W test\r\n");
 80022e4:	481a      	ldr	r0, [pc, #104]	; (8002350 <testSD+0x174>)
 80022e6:	f006 f991 	bl	800860c <puts>
		return -1;
 80022ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022ee:	e7d2      	b.n	8002296 <testSD+0xba>
		printf("Failed to close\r\n");
 80022f0:	4818      	ldr	r0, [pc, #96]	; (8002354 <testSD+0x178>)
 80022f2:	f006 f98b 	bl	800860c <puts>
		return -1;
 80022f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022fa:	e7cc      	b.n	8002296 <testSD+0xba>
		printf("Free space check failed\r\n");
 80022fc:	4816      	ldr	r0, [pc, #88]	; (8002358 <testSD+0x17c>)
 80022fe:	f006 f985 	bl	800860c <puts>
		return -1;
 8002302:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002306:	e7c6      	b.n	8002296 <testSD+0xba>
 8002308:	0800b42c 	.word	0x0800b42c
 800230c:	20001260 	.word	0x20001260
 8002310:	0800b44c 	.word	0x0800b44c
 8002314:	20000228 	.word	0x20000228
 8002318:	200024d4 	.word	0x200024d4
 800231c:	20001258 	.word	0x20001258
 8002320:	0800b4c4 	.word	0x0800b4c4
 8002324:	200024dc 	.word	0x200024dc
 8002328:	3fe00000 	.word	0x3fe00000
 800232c:	2000125c 	.word	0x2000125c
 8002330:	0800b4a0 	.word	0x0800b4a0
 8002334:	0800b528 	.word	0x0800b528
 8002338:	0800b534 	.word	0x0800b534
 800233c:	0800b430 	.word	0x0800b430
 8002340:	0800b458 	.word	0x0800b458
 8002344:	0800b490 	.word	0x0800b490
 8002348:	0800b4a8 	.word	0x0800b4a8
 800234c:	0800b4c8 	.word	0x0800b4c8
 8002350:	0800b4ec 	.word	0x0800b4ec
 8002354:	0800b514 	.word	0x0800b514
 8002358:	0800b474 	.word	0x0800b474

0800235c <trigger_capture>:

void trigger_capture() {
 800235c:	b538      	push	{r3, r4, r5, lr}
	printf("Capture!\r\n");
 800235e:	4811      	ldr	r0, [pc, #68]	; (80023a4 <trigger_capture+0x48>)
	capture_flag = 0;
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 8002360:	4c11      	ldr	r4, [pc, #68]	; (80023a8 <trigger_capture+0x4c>)
	printf("Capture!\r\n");
 8002362:	f006 f953 	bl	800860c <puts>
	capture_flag = 0;
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <trigger_capture+0x50>)
 8002368:	2500      	movs	r5, #0
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 800236a:	2201      	movs	r2, #1
 800236c:	2104      	movs	r1, #4
 800236e:	4620      	mov	r0, r4
	capture_flag = 0;
 8002370:	601d      	str	r5, [r3, #0]
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 8002372:	f7fe fdef 	bl	8000f54 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_WRITE);
 8002376:	2220      	movs	r2, #32
 8002378:	2104      	movs	r1, #4
 800237a:	4620      	mov	r0, r4
 800237c:	f7fe fdea 	bl	8000f54 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_READ);
 8002380:	2210      	movs	r2, #16
 8002382:	2104      	movs	r1, #4
 8002384:	4620      	mov	r0, r4
 8002386:	f7fe fde5 	bl	8000f54 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 800238a:	2202      	movs	r2, #2
 800238c:	2104      	movs	r1, #4
 800238e:	4620      	mov	r0, r4
 8002390:	f7fe fde0 	bl	8000f54 <OV5462_write_spi_reg>

	check_capturing = 1;
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <trigger_capture+0x54>)
	TIM2->CNT = 0;
 8002396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	check_capturing = 1;
 800239a:	2101      	movs	r1, #1
 800239c:	6011      	str	r1, [r2, #0]
	TIM2->CNT = 0;
 800239e:	625d      	str	r5, [r3, #36]	; 0x24
}
 80023a0:	bd38      	pop	{r3, r4, r5, pc}
 80023a2:	bf00      	nop
 80023a4:	0800b554 	.word	0x0800b554
 80023a8:	200024cc 	.word	0x200024cc
 80023ac:	20000220 	.word	0x20000220
 80023b0:	20000224 	.word	0x20000224

080023b4 <read_fifo_and_write_data_file>:

int read_fifo_and_write_data_file() {
 80023b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023b8:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80023bc:	b082      	sub	sp, #8
//	while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {}; // wait for buffer to fill before saving
//	while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {}; // wait for final frame
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_READ);
 80023be:	4865      	ldr	r0, [pc, #404]	; (8002554 <read_fifo_and_write_data_file+0x1a0>)
 80023c0:	2210      	movs	r2, #16
 80023c2:	2104      	movs	r1, #4
 80023c4:	f7fe fdc6 	bl	8000f54 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 80023c8:	2201      	movs	r2, #1
 80023ca:	2104      	movs	r1, #4
 80023cc:	4861      	ldr	r0, [pc, #388]	; (8002554 <read_fifo_and_write_data_file+0x1a0>)
 80023ce:	f7fe fdc1 	bl	8000f54 <OV5462_write_spi_reg>
	int i = 0;
	uint8_t buf[CHUNK_SIZE];

	static int video_id = 0;

	length = OV5462_read_fifo_length(&ov5462);
 80023d2:	4860      	ldr	r0, [pc, #384]	; (8002554 <read_fifo_and_write_data_file+0x1a0>)
 80023d4:	f7fe ff70 	bl	80012b8 <OV5462_read_fifo_length>
 80023d8:	4605      	mov	r5, r0
	printf("Buffer length: %lu\r\n", length);
 80023da:	4629      	mov	r1, r5
 80023dc:	485e      	ldr	r0, [pc, #376]	; (8002558 <read_fifo_and_write_data_file+0x1a4>)
 80023de:	f006 f88f 	bl	8008500 <iprintf>

	if (length >= MAX_FIFO_LENGTH) {
 80023e2:	4b5e      	ldr	r3, [pc, #376]	; (800255c <read_fifo_and_write_data_file+0x1a8>)
 80023e4:	429d      	cmp	r5, r3
 80023e6:	f200 80a5 	bhi.w	8002534 <read_fifo_and_write_data_file+0x180>
		printf("Buffer too large\r\n");
		length = MAX_FIFO_LENGTH-1;
	}

	if (length == 0) {
 80023ea:	2d00      	cmp	r5, #0
 80023ec:	f000 80ab 	beq.w	8002546 <read_fifo_and_write_data_file+0x192>
	i = 0;

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
	OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command

	while (length--) {
 80023f0:	3d01      	subs	r5, #1
	int filename_len = snprintf(NULL, 0, "%d.DAT", video_id);
 80023f2:	4e5b      	ldr	r6, [pc, #364]	; (8002560 <read_fifo_and_write_data_file+0x1ac>)
 80023f4:	4a5b      	ldr	r2, [pc, #364]	; (8002564 <read_fifo_and_write_data_file+0x1b0>)
 80023f6:	6833      	ldr	r3, [r6, #0]
 80023f8:	2100      	movs	r1, #0
 80023fa:	4608      	mov	r0, r1
 80023fc:	f006 f91e 	bl	800863c <sniprintf>
	char* filename = malloc(filename_len+1);
 8002400:	1c41      	adds	r1, r0, #1
 8002402:	4608      	mov	r0, r1
 8002404:	9101      	str	r1, [sp, #4]
 8002406:	f005 fb19 	bl	8007a3c <malloc>
	snprintf(filename, filename_len+1, "%d.DAT", video_id);
 800240a:	6833      	ldr	r3, [r6, #0]
 800240c:	9901      	ldr	r1, [sp, #4]
 800240e:	4a55      	ldr	r2, [pc, #340]	; (8002564 <read_fifo_and_write_data_file+0x1b0>)
	char* filename = malloc(filename_len+1);
 8002410:	4604      	mov	r4, r0
	snprintf(filename, filename_len+1, "%d.DAT", video_id);
 8002412:	f006 f913 	bl	800863c <sniprintf>
	FRESULT fr = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002416:	2213      	movs	r2, #19
 8002418:	4621      	mov	r1, r4
 800241a:	4853      	ldr	r0, [pc, #332]	; (8002568 <read_fifo_and_write_data_file+0x1b4>)
 800241c:	f004 fc36 	bl	8006c8c <f_open>
	printf("%s\r\n", filename);
 8002420:	4621      	mov	r1, r4
	FRESULT fr = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002422:	4607      	mov	r7, r0
	printf("%s\r\n", filename);
 8002424:	4851      	ldr	r0, [pc, #324]	; (800256c <read_fifo_and_write_data_file+0x1b8>)
 8002426:	f006 f86b 	bl	8008500 <iprintf>
	free(filename);
 800242a:	4620      	mov	r0, r4
 800242c:	f005 fb0e 	bl	8007a4c <free>
	if (fr) printf("file open failed\r\n");
 8002430:	2f00      	cmp	r7, #0
 8002432:	f040 8084 	bne.w	800253e <read_fifo_and_write_data_file+0x18a>
	++video_id;
 8002436:	6833      	ldr	r3, [r6, #0]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8002438:	484d      	ldr	r0, [pc, #308]	; (8002570 <read_fifo_and_write_data_file+0x1bc>)
		if (i < CHUNK_SIZE) {
			buf[i++] = temp;
		} else {
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);

			f_write(&fil, buf, sizeof(uint8_t)*CHUNK_SIZE, &bw);
 800243a:	f8df 8160 	ldr.w	r8, [pc, #352]	; 800259c <read_fifo_and_write_data_file+0x1e8>
 800243e:	4f4a      	ldr	r7, [pc, #296]	; (8002568 <read_fifo_and_write_data_file+0x1b4>)
	++video_id;
 8002440:	3301      	adds	r3, #1
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	2110      	movs	r1, #16
	++video_id;
 8002446:	6033      	str	r3, [r6, #0]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8002448:	f001 f938 	bl	80036bc <HAL_GPIO_WritePin>
	OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 800244c:	4841      	ldr	r0, [pc, #260]	; (8002554 <read_fifo_and_write_data_file+0x1a0>)
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 800244e:	4e48      	ldr	r6, [pc, #288]	; (8002570 <read_fifo_and_write_data_file+0x1bc>)
	OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8002450:	f7fe ff92 	bl	8001378 <OV5462_request_FIFO_burst>
		temp = SPI_OptimizedReadByte();
 8002454:	f7fe ffa0 	bl	8001398 <SPI_OptimizedReadByte>
	i = 0;
 8002458:	2300      	movs	r3, #0
		temp = SPI_OptimizedReadByte();
 800245a:	4604      	mov	r4, r0
			buf[i++] = temp;
 800245c:	aa02      	add	r2, sp, #8
 800245e:	f103 0901 	add.w	r9, r3, #1
 8002462:	54d4      	strb	r4, [r2, r3]
	while (length--) {
 8002464:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8002468:	b365      	cbz	r5, 80024c4 <read_fifo_and_write_data_file+0x110>
		temp = SPI_OptimizedReadByte();
 800246a:	f7fe ff95 	bl	8001398 <SPI_OptimizedReadByte>
		if (i < CHUNK_SIZE) {
 800246e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
		temp = SPI_OptimizedReadByte();
 8002472:	4604      	mov	r4, r0
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002474:	f04f 0201 	mov.w	r2, #1
 8002478:	4630      	mov	r0, r6
 800247a:	f04f 0110 	mov.w	r1, #16
		if (i < CHUNK_SIZE) {
 800247e:	d156      	bne.n	800252e <read_fifo_and_write_data_file+0x17a>
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002480:	f001 f91c 	bl	80036bc <HAL_GPIO_WritePin>
			f_write(&fil, buf, sizeof(uint8_t)*CHUNK_SIZE, &bw);
 8002484:	4643      	mov	r3, r8
 8002486:	464a      	mov	r2, r9
 8002488:	a902      	add	r1, sp, #8
 800248a:	4638      	mov	r0, r7
 800248c:	f004 fef2 	bl	8007274 <f_write>

			i = 0;
			buf[i++] = temp;
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	2110      	movs	r1, #16
 8002494:	4630      	mov	r0, r6
			buf[i++] = temp;
 8002496:	f88d 4008 	strb.w	r4, [sp, #8]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 800249a:	f001 f90f 	bl	80036bc <HAL_GPIO_WritePin>

			OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 800249e:	482d      	ldr	r0, [pc, #180]	; (8002554 <read_fifo_and_write_data_file+0x1a0>)
 80024a0:	f7fe ff6a 	bl	8001378 <OV5462_request_FIFO_burst>
	while (length--) {
 80024a4:	3d02      	subs	r5, #2
 80024a6:	f1ba 0f00 	cmp.w	sl, #0
 80024aa:	d00b      	beq.n	80024c4 <read_fifo_and_write_data_file+0x110>
		temp = SPI_OptimizedReadByte();
 80024ac:	f7fe ff74 	bl	8001398 <SPI_OptimizedReadByte>
			buf[i++] = temp;
 80024b0:	2301      	movs	r3, #1
			buf[i++] = temp;
 80024b2:	aa02      	add	r2, sp, #8
		temp = SPI_OptimizedReadByte();
 80024b4:	4604      	mov	r4, r0
			buf[i++] = temp;
 80024b6:	54d4      	strb	r4, [r2, r3]
 80024b8:	f103 0901 	add.w	r9, r3, #1
	while (length--) {
 80024bc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80024c0:	2d00      	cmp	r5, #0
 80024c2:	d1d2      	bne.n	800246a <read_fifo_and_write_data_file+0xb6>
		}
	}

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 80024c4:	2201      	movs	r2, #1
 80024c6:	2110      	movs	r1, #16
 80024c8:	4829      	ldr	r0, [pc, #164]	; (8002570 <read_fifo_and_write_data_file+0x1bc>)
 80024ca:	f001 f8f7 	bl	80036bc <HAL_GPIO_WritePin>
	is_header = 0;
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <read_fifo_and_write_data_file+0x1c0>)
	f_close(&fil);
 80024d0:	4825      	ldr	r0, [pc, #148]	; (8002568 <read_fifo_and_write_data_file+0x1b4>)
	is_header = 0;
 80024d2:	2400      	movs	r4, #0
 80024d4:	601c      	str	r4, [r3, #0]
	f_close(&fil);
 80024d6:	f005 f85f 	bl	8007598 <f_close>
	printf("Save complete \r\n");
 80024da:	4827      	ldr	r0, [pc, #156]	; (8002578 <read_fifo_and_write_data_file+0x1c4>)
 80024dc:	f006 f896 	bl	800860c <puts>
	save_requested = 0;
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <read_fifo_and_write_data_file+0x1c8>)
	printf("Capture!\r\n");
 80024e2:	4827      	ldr	r0, [pc, #156]	; (8002580 <read_fifo_and_write_data_file+0x1cc>)
	save_requested = 0;
 80024e4:	601c      	str	r4, [r3, #0]
	printf("Capture!\r\n");
 80024e6:	f006 f891 	bl	800860c <puts>
	capture_flag = 0;
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <read_fifo_and_write_data_file+0x1d0>)
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 80024ec:	4819      	ldr	r0, [pc, #100]	; (8002554 <read_fifo_and_write_data_file+0x1a0>)
	capture_flag = 0;
 80024ee:	601c      	str	r4, [r3, #0]
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 80024f0:	2201      	movs	r2, #1
 80024f2:	2104      	movs	r1, #4
 80024f4:	f7fe fd2e 	bl	8000f54 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_WRITE);
 80024f8:	4816      	ldr	r0, [pc, #88]	; (8002554 <read_fifo_and_write_data_file+0x1a0>)
 80024fa:	2220      	movs	r2, #32
 80024fc:	2104      	movs	r1, #4
 80024fe:	f7fe fd29 	bl	8000f54 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_READ);
 8002502:	4814      	ldr	r0, [pc, #80]	; (8002554 <read_fifo_and_write_data_file+0x1a0>)
 8002504:	2210      	movs	r2, #16
 8002506:	2104      	movs	r1, #4
 8002508:	f7fe fd24 	bl	8000f54 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 800250c:	4811      	ldr	r0, [pc, #68]	; (8002554 <read_fifo_and_write_data_file+0x1a0>)
 800250e:	2202      	movs	r2, #2
 8002510:	2104      	movs	r1, #4
 8002512:	f7fe fd1f 	bl	8000f54 <OV5462_write_spi_reg>
	check_capturing = 1;
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <read_fifo_and_write_data_file+0x1d4>)
	TIM2->CNT = 0;
 8002518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	check_capturing = 1;
 800251c:	2101      	movs	r1, #1
 800251e:	6011      	str	r1, [r2, #0]

	trigger_capture();

//	OV5462_continuous_capture_init(&ov5462); // restore continuous capture functionality

	return 0;
 8002520:	4620      	mov	r0, r4
	TIM2->CNT = 0;
 8002522:	625c      	str	r4, [r3, #36]	; 0x24
}
 8002524:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
 8002528:	b002      	add	sp, #8
 800252a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800252e:	4655      	mov	r5, sl
 8002530:	464b      	mov	r3, r9
 8002532:	e793      	b.n	800245c <read_fifo_and_write_data_file+0xa8>
		printf("Buffer too large\r\n");
 8002534:	4815      	ldr	r0, [pc, #84]	; (800258c <read_fifo_and_write_data_file+0x1d8>)
 8002536:	4d16      	ldr	r5, [pc, #88]	; (8002590 <read_fifo_and_write_data_file+0x1dc>)
 8002538:	f006 f868 	bl	800860c <puts>
	if (length == 0) {
 800253c:	e759      	b.n	80023f2 <read_fifo_and_write_data_file+0x3e>
	if (fr) printf("file open failed\r\n");
 800253e:	4815      	ldr	r0, [pc, #84]	; (8002594 <read_fifo_and_write_data_file+0x1e0>)
 8002540:	f006 f864 	bl	800860c <puts>
 8002544:	e777      	b.n	8002436 <read_fifo_and_write_data_file+0x82>
		printf("Buffer empty\r\n");
 8002546:	4814      	ldr	r0, [pc, #80]	; (8002598 <read_fifo_and_write_data_file+0x1e4>)
 8002548:	f006 f860 	bl	800860c <puts>
		return -1;
 800254c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002550:	e7e8      	b.n	8002524 <read_fifo_and_write_data_file+0x170>
 8002552:	bf00      	nop
 8002554:	200024cc 	.word	0x200024cc
 8002558:	0800b560 	.word	0x0800b560
 800255c:	007ffffe 	.word	0x007ffffe
 8002560:	200024e0 	.word	0x200024e0
 8002564:	0800b59c 	.word	0x0800b59c
 8002568:	20000228 	.word	0x20000228
 800256c:	0800b5a4 	.word	0x0800b5a4
 8002570:	40020800 	.word	0x40020800
 8002574:	200024c8 	.word	0x200024c8
 8002578:	0800b5c0 	.word	0x0800b5c0
 800257c:	200024d8 	.word	0x200024d8
 8002580:	0800b554 	.word	0x0800b554
 8002584:	20000220 	.word	0x20000220
 8002588:	20000224 	.word	0x20000224
 800258c:	0800b578 	.word	0x0800b578
 8002590:	007ffffd 	.word	0x007ffffd
 8002594:	0800b5ac 	.word	0x0800b5ac
 8002598:	0800b58c 	.word	0x0800b58c
 800259c:	2000021c 	.word	0x2000021c

080025a0 <set_capture_flag>:

void set_capture_flag(int f) {
	capture_flag = f;
 80025a0:	4b01      	ldr	r3, [pc, #4]	; (80025a8 <set_capture_flag+0x8>)
 80025a2:	6018      	str	r0, [r3, #0]
}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000220 	.word	0x20000220

080025ac <set_save_requested>:

void set_save_requested(int f) {
	save_requested = f;
 80025ac:	4b01      	ldr	r3, [pc, #4]	; (80025b4 <set_save_requested+0x8>)
 80025ae:	6018      	str	r0, [r3, #0]
}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	200024d8 	.word	0x200024d8

080025b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ba:	2300      	movs	r3, #0
{
 80025bc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025be:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80025c2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80025ca:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4928      	ldr	r1, [pc, #160]	; (8002670 <SystemClock_Config+0xb8>)
 80025d0:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025d4:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80025d8:	4a26      	ldr	r2, [pc, #152]	; (8002674 <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80025de:	6408      	str	r0, [r1, #64]	; 0x40
 80025e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025e2:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80025e6:	9100      	str	r1, [sp, #0]
 80025e8:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	6813      	ldr	r3, [r2, #0]
 80025ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025fe:	9301      	str	r3, [sp, #4]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002600:	2002      	movs	r0, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002602:	9901      	ldr	r1, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002604:	2100      	movs	r1, #0
 8002606:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800260a:	2010      	movs	r0, #16
 800260c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002610:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002614:	2004      	movs	r0, #4
 8002616:	2107      	movs	r1, #7
 8002618:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800261c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800261e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002620:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002622:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002624:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002626:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002628:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800262a:	f001 fd23 	bl	8004074 <HAL_RCC_OscConfig>
 800262e:	b108      	cbz	r0, 8002634 <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002630:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002632:	e7fe      	b.n	8002632 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002634:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002660 <SystemClock_Config+0xa8>
 8002638:	ed8d 7b02 	vstr	d7, [sp, #8]
 800263c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002668 <SystemClock_Config+0xb0>
 8002640:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002642:	4621      	mov	r1, r4
 8002644:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002646:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800264a:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800264c:	f001 ff2a 	bl	80044a4 <HAL_RCC_ClockConfig>
 8002650:	b108      	cbz	r0, 8002656 <SystemClock_Config+0x9e>
 8002652:	b672      	cpsid	i
  while (1)
 8002654:	e7fe      	b.n	8002654 <SystemClock_Config+0x9c>
}
 8002656:	b014      	add	sp, #80	; 0x50
 8002658:	bd10      	pop	{r4, pc}
 800265a:	bf00      	nop
 800265c:	f3af 8000 	nop.w
 8002660:	0000000f 	.word	0x0000000f
 8002664:	00000002 	.word	0x00000002
 8002668:	00000000 	.word	0x00000000
 800266c:	00001000 	.word	0x00001000
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000

08002678 <main>:
{
 8002678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	2400      	movs	r4, #0
{
 800267e:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8002680:	f000 fd18 	bl	80030b4 <HAL_Init>
  SystemClock_Config();
 8002684:	f7ff ff98 	bl	80025b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800268c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002690:	4bb8      	ldr	r3, [pc, #736]	; (8002974 <main+0x2fc>)
 8002692:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	940c      	str	r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002698:	48b7      	ldr	r0, [pc, #732]	; (8002978 <main+0x300>)
  hi2c1.Instance = I2C1;
 800269a:	4db8      	ldr	r5, [pc, #736]	; (800297c <main+0x304>)
  hi2c1.Init.ClockSpeed = 100000;
 800269c:	f8df 8328 	ldr.w	r8, [pc, #808]	; 80029c8 <main+0x350>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a0:	f042 0204 	orr.w	r2, r2, #4
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
 80026a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a8:	f002 0204 	and.w	r2, r2, #4
 80026ac:	9202      	str	r2, [sp, #8]
 80026ae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026b0:	9403      	str	r4, [sp, #12]
 80026b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
 80026ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80026c0:	9203      	str	r2, [sp, #12]
 80026c2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	9404      	str	r4, [sp, #16]
 80026c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
 80026ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d0:	f002 0201 	and.w	r2, r2, #1
 80026d4:	9204      	str	r2, [sp, #16]
 80026d6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d8:	9405      	str	r4, [sp, #20]
 80026da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026dc:	f042 0202 	orr.w	r2, r2, #2
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin, GPIO_PIN_RESET);
 80026e8:	2112      	movs	r1, #18
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin, GPIO_PIN_RESET);
 80026ec:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin, GPIO_PIN_RESET);
 80026f0:	f000 ffe4 	bl	80036bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 80026f4:	48a2      	ldr	r0, [pc, #648]	; (8002980 <main+0x308>)
 80026f6:	4622      	mov	r2, r4
 80026f8:	2104      	movs	r1, #4
 80026fa:	f000 ffdf 	bl	80036bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80026fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002702:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002706:	489c      	ldr	r0, [pc, #624]	; (8002978 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800270a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = B1_Pin;
 800270c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002710:	f000 fee2 	bl	80034d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 8002714:	2202      	movs	r2, #2
 8002716:	2301      	movs	r3, #1
 8002718:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800271c:	4896      	ldr	r0, [pc, #600]	; (8002978 <main+0x300>)
  GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 800271e:	2201      	movs	r2, #1
 8002720:	2300      	movs	r3, #0
  HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002722:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 8002724:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = CAM_SPI1_CS_Pin;
 8002728:	f04f 0a00 	mov.w	sl, #0
  HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800272c:	f000 fed4 	bl	80034d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAM_SPI1_CS_Pin;
 8002730:	f04f 0b00 	mov.w	fp, #0
 8002734:	2210      	movs	r2, #16
 8002736:	2301      	movs	r3, #1
  HAL_GPIO_Init(CAM_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002738:	488f      	ldr	r0, [pc, #572]	; (8002978 <main+0x300>)
 800273a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = CAM_SPI1_CS_Pin;
 800273c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002740:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
  HAL_GPIO_Init(CAM_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002744:	f000 fec8 	bl	80034d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 8002748:	2301      	movs	r3, #1
 800274a:	2204      	movs	r2, #4
  HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800274c:	488c      	ldr	r0, [pc, #560]	; (8002980 <main+0x308>)
 800274e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 8002750:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002754:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
  HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002758:	f000 febe 	bl	80034d8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800275c:	4622      	mov	r2, r4
 800275e:	2101      	movs	r1, #1
 8002760:	2028      	movs	r0, #40	; 0x28
 8002762:	f000 fe53 	bl	800340c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002766:	2028      	movs	r0, #40	; 0x28
 8002768:	f000 fe8e 	bl	8003488 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.ClockSpeed = 100000;
 800276c:	4b85      	ldr	r3, [pc, #532]	; (8002984 <main+0x30c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800276e:	4628      	mov	r0, r5
  hi2c1.Init.ClockSpeed = 100000;
 8002770:	e9c5 8300 	strd	r8, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002774:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002778:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800277c:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002780:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002784:	612b      	str	r3, [r5, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002786:	f000 ffab 	bl	80036e0 <HAL_I2C_Init>
 800278a:	b108      	cbz	r0, 8002790 <main+0x118>
 800278c:	b672      	cpsid	i
  while (1)
 800278e:	e7fe      	b.n	800278e <main+0x116>
  hspi2.Instance = SPI2;
 8002790:	4b7d      	ldr	r3, [pc, #500]	; (8002988 <main+0x310>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002792:	4a7e      	ldr	r2, [pc, #504]	; (800298c <main+0x314>)
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002794:	6298      	str	r0, [r3, #40]	; 0x28
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002796:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800279a:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800279e:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027a2:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027a6:	f44f 7600 	mov.w	r6, #512	; 0x200
 80027aa:	f04f 0810 	mov.w	r8, #16
  hspi2.Init.CRCPolynomial = 10;
 80027ae:	240a      	movs	r4, #10
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027b0:	4618      	mov	r0, r3
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027b2:	e9c3 2700 	strd	r2, r7, [r3]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027b6:	e9c3 6806 	strd	r6, r8, [r3, #24]
  hspi2.Init.CRCPolynomial = 10;
 80027ba:	62dc      	str	r4, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027bc:	f001 ff90 	bl	80046e0 <HAL_SPI_Init>
 80027c0:	b108      	cbz	r0, 80027c6 <main+0x14e>
 80027c2:	b672      	cpsid	i
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <main+0x14c>
  huart2.Instance = USART2;
 80027c6:	4b72      	ldr	r3, [pc, #456]	; (8002990 <main+0x318>)
  huart2.Init.BaudRate = 115200;
 80027c8:	f8df e200 	ldr.w	lr, [pc, #512]	; 80029cc <main+0x354>
  huart2.Init.Parity = UART_PARITY_NONE;
 80027cc:	6118      	str	r0, [r3, #16]
  huart2.Init.BaudRate = 115200;
 80027ce:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027d2:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d6:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart2.Init.BaudRate = 115200;
 80027da:	e9c3 e200 	strd	lr, r2, [r3]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027de:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027e0:	220c      	movs	r2, #12
 80027e2:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027e4:	f002 fe0a 	bl	80053fc <HAL_UART_Init>
 80027e8:	bb50      	cbnz	r0, 8002840 <main+0x1c8>
  hadc1.Instance = ADC1;
 80027ea:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 80029d0 <main+0x358>
 80027ee:	9001      	str	r0, [sp, #4]
  MX_FATFS_Init();
 80027f0:	f002 ff4c 	bl	800568c <MX_FATFS_Init>
  hadc1.Init.NbrOfConversion = 1;
 80027f4:	2301      	movs	r3, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80027f6:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80029d4 <main+0x35c>
  ADC_ChannelConfTypeDef sConfig = {0};
 80027fa:	9801      	ldr	r0, [sp, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027fc:	4a65      	ldr	r2, [pc, #404]	; (8002994 <main+0x31c>)
  hadc1.Init.NbrOfConversion = 1;
 80027fe:	f8c9 301c 	str.w	r3, [r9, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002802:	f8c9 3014 	str.w	r3, [r9, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800280a:	e9c9 c300 	strd	ip, r3, [r9]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800280e:	2300      	movs	r3, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002810:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8002814:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002818:	f8c9 0008 	str.w	r0, [r9, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800281c:	f8c9 0010 	str.w	r0, [r9, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002820:	f889 0018 	strb.w	r0, [r9, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002824:	f889 0020 	strb.w	r0, [r9, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002828:	f8c9 000c 	str.w	r0, [r9, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800282c:	f889 0030 	strb.w	r0, [r9, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002830:	e9c9 230a 	strd	r2, r3, [r9, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002834:	4648      	mov	r0, r9
 8002836:	f000 fc7b 	bl	8003130 <HAL_ADC_Init>
 800283a:	b118      	cbz	r0, 8002844 <main+0x1cc>
 800283c:	b672      	cpsid	i
  while (1)
 800283e:	e7fe      	b.n	800283e <main+0x1c6>
 8002840:	b672      	cpsid	i
 8002842:	e7fe      	b.n	8002842 <main+0x1ca>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002844:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.Channel = ADC_CHANNEL_8;
 8002846:	2208      	movs	r2, #8
 8002848:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800284a:	4648      	mov	r0, r9
 800284c:	a908      	add	r1, sp, #32
  sConfig.Channel = ADC_CHANNEL_8;
 800284e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002852:	f000 fd1b 	bl	800328c <HAL_ADC_ConfigChannel>
 8002856:	b108      	cbz	r0, 800285c <main+0x1e4>
 8002858:	b672      	cpsid	i
  while (1)
 800285a:	e7fe      	b.n	800285a <main+0x1e2>
  hspi1.Instance = SPI1;
 800285c:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80029b0 <main+0x338>
 8002860:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <main+0x320>)
 8002862:	f8c9 3000 	str.w	r3, [r9]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002866:	e9c9 7001 	strd	r7, r0, [r9, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800286a:	e9c9 0003 	strd	r0, r0, [r9, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800286e:	e9c9 0605 	strd	r0, r6, [r9, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002872:	e9c9 0008 	strd	r0, r0, [r9, #32]
  hspi1.Init.CRCPolynomial = 10;
 8002876:	e9c9 040a 	strd	r0, r4, [r9, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800287a:	4648      	mov	r0, r9
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800287c:	f8c9 801c 	str.w	r8, [r9, #28]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002880:	f001 ff2e 	bl	80046e0 <HAL_SPI_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	b108      	cbz	r0, 800288c <main+0x214>
 8002888:	b672      	cpsid	i
  while (1)
 800288a:	e7fe      	b.n	800288a <main+0x212>
  hspi3.Instance = SPI3;
 800288c:	4843      	ldr	r0, [pc, #268]	; (800299c <main+0x324>)
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800288e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002892:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002896:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800289a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi3.Instance = SPI3;
 800289e:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <main+0x328>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80028a0:	6047      	str	r7, [r0, #4]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80028a2:	6186      	str	r6, [r0, #24]
  hspi3.Init.CRCPolynomial = 10;
 80028a4:	62c4      	str	r4, [r0, #44]	; 0x2c
  hspi3.Instance = SPI3;
 80028a6:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80028a8:	f001 ff1a 	bl	80046e0 <HAL_SPI_Init>
 80028ac:	b108      	cbz	r0, 80028b2 <main+0x23a>
 80028ae:	b672      	cpsid	i
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <main+0x238>
  htim2.Instance = TIM2;
 80028b2:	4c3c      	ldr	r4, [pc, #240]	; (80029a4 <main+0x32c>)
  htim2.Init.Period = 610000;
 80028b4:	4b3c      	ldr	r3, [pc, #240]	; (80029a8 <main+0x330>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b6:	60a0      	str	r0, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028b8:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80028bc:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c0:	e9cd 0006 	strd	r0, r0, [sp, #24]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c4:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c6:	61a0      	str	r0, [r4, #24]
  htim2.Init.Period = 610000;
 80028c8:	60e3      	str	r3, [r4, #12]
  htim2.Init.Prescaler = 8399;
 80028ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80028ce:	f242 03cf 	movw	r3, #8399	; 0x20cf
 80028d2:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028d6:	4620      	mov	r0, r4
 80028d8:	f002 fb3e 	bl	8004f58 <HAL_TIM_Base_Init>
 80028dc:	b108      	cbz	r0, 80028e2 <main+0x26a>
 80028de:	b672      	cpsid	i
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <main+0x268>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028e6:	a908      	add	r1, sp, #32
 80028e8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ea:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028ec:	f002 fbe6 	bl	80050bc <HAL_TIM_ConfigClockSource>
 80028f0:	b108      	cbz	r0, 80028f6 <main+0x27e>
 80028f2:	b672      	cpsid	i
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <main+0x27c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028f6:	a906      	add	r1, sp, #24
 80028f8:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fa:	e9cd ab06 	strd	sl, fp, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028fe:	f002 fd41 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 8002902:	b108      	cbz	r0, 8002908 <main+0x290>
 8002904:	b672      	cpsid	i
  while (1)
 8002906:	e7fe      	b.n	8002906 <main+0x28e>
  HAL_TIM_Base_Start_IT(&htim2);
 8002908:	4826      	ldr	r0, [pc, #152]	; (80029a4 <main+0x32c>)
			f_mount(NULL, "/", 1);
 800290a:	4c28      	ldr	r4, [pc, #160]	; (80029ac <main+0x334>)
  HAL_TIM_Base_Start_IT(&htim2);
 800290c:	f002 fba2 	bl	8005054 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002910:	4819      	ldr	r0, [pc, #100]	; (8002978 <main+0x300>)
 8002912:	2201      	movs	r2, #1
 8002914:	2110      	movs	r1, #16
 8002916:	f000 fed1 	bl	80036bc <HAL_GPIO_WritePin>
  	uint8_t buf[1] = { 0x00 }; // dummy write
 800291a:	2000      	movs	r0, #0
  	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 800291c:	2201      	movs	r2, #1
 800291e:	a908      	add	r1, sp, #32
 8002920:	2364      	movs	r3, #100	; 0x64
  	uint8_t buf[1] = { 0x00 }; // dummy write
 8002922:	f88d 0020 	strb.w	r0, [sp, #32]
  	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8002926:	4822      	ldr	r0, [pc, #136]	; (80029b0 <main+0x338>)
 8002928:	f001 ff3c 	bl	80047a4 <HAL_SPI_Transmit>
  	ov5462.hi2c = &hi2c1;
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <main+0x33c>)
	printf("program start!\r\n");
 800292e:	4822      	ldr	r0, [pc, #136]	; (80029b8 <main+0x340>)
	ov5462.hspi = &hspi1;
 8002930:	e9c3 5900 	strd	r5, r9, [r3]
	printf("program start!\r\n");
 8002934:	f005 fe6a 	bl	800860c <puts>
  	HAL_Delay(1000);
 8002938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800293c:	f000 fbe6 	bl	800310c <HAL_Delay>
			printf("SD test FAIL! Retrying...\r\n");
 8002940:	4d1e      	ldr	r5, [pc, #120]	; (80029bc <main+0x344>)
 8002942:	e00a      	b.n	800295a <main+0x2e2>
 8002944:	f005 fe62 	bl	800860c <puts>
			f_mount(NULL, "/", 1);
 8002948:	2201      	movs	r2, #1
 800294a:	4621      	mov	r1, r4
 800294c:	2000      	movs	r0, #0
 800294e:	f004 f95b 	bl	8006c08 <f_mount>
			HAL_Delay(10000);
 8002952:	f242 7010 	movw	r0, #10000	; 0x2710
 8002956:	f000 fbd9 	bl	800310c <HAL_Delay>
		if(testSD()) {
 800295a:	f7ff fc3f 	bl	80021dc <testSD>
 800295e:	4603      	mov	r3, r0
			printf("SD test FAIL! Retrying...\r\n");
 8002960:	4628      	mov	r0, r5
		if(testSD()) {
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1ee      	bne.n	8002944 <main+0x2cc>
			printf("SD test PASS!\r\n");
 8002966:	4816      	ldr	r0, [pc, #88]	; (80029c0 <main+0x348>)
  		OV5462_write_spi_reg(&ov5462, 0x00, 0x25);
 8002968:	4c12      	ldr	r4, [pc, #72]	; (80029b4 <main+0x33c>)
  		printf("SPI Test FAIL!\r\n");
 800296a:	4d16      	ldr	r5, [pc, #88]	; (80029c4 <main+0x34c>)
			printf("SD test PASS!\r\n");
 800296c:	f005 fe4e 	bl	800860c <puts>
			break;
 8002970:	e038      	b.n	80029e4 <main+0x36c>
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	40020800 	.word	0x40020800
 800297c:	200022e0 	.word	0x200022e0
 8002980:	40020400 	.word	0x40020400
 8002984:	000186a0 	.word	0x000186a0
 8002988:	2000238c 	.word	0x2000238c
 800298c:	40003800 	.word	0x40003800
 8002990:	20002484 	.word	0x20002484
 8002994:	0f000001 	.word	0x0f000001
 8002998:	40013000 	.word	0x40013000
 800299c:	200023e4 	.word	0x200023e4
 80029a0:	40003c00 	.word	0x40003c00
 80029a4:	2000243c 	.word	0x2000243c
 80029a8:	00094ed0 	.word	0x00094ed0
 80029ac:	0800b42c 	.word	0x0800b42c
 80029b0:	20002334 	.word	0x20002334
 80029b4:	200024cc 	.word	0x200024cc
 80029b8:	0800b5d0 	.word	0x0800b5d0
 80029bc:	0800b5e0 	.word	0x0800b5e0
 80029c0:	0800b5fc 	.word	0x0800b5fc
 80029c4:	0800b61c 	.word	0x0800b61c
 80029c8:	40005400 	.word	0x40005400
 80029cc:	40004400 	.word	0x40004400
 80029d0:	20002298 	.word	0x20002298
 80029d4:	40012000 	.word	0x40012000
  		printf("SPI Test FAIL!\r\n");
 80029d8:	f005 fe18 	bl	800860c <puts>
  		HAL_Delay(1000);
 80029dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029e0:	f000 fb94 	bl	800310c <HAL_Delay>
  		OV5462_write_spi_reg(&ov5462, 0x00, 0x25);
 80029e4:	2225      	movs	r2, #37	; 0x25
 80029e6:	4620      	mov	r0, r4
 80029e8:	2100      	movs	r1, #0
 80029ea:	f7fe fab3 	bl	8000f54 <OV5462_write_spi_reg>
  		uint8_t tmp = OV5462_read_spi_reg(&ov5462, 0x00);
 80029ee:	2100      	movs	r1, #0
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7fe fad5 	bl	8000fa0 <OV5462_read_spi_reg>
 80029f6:	4603      	mov	r3, r0
  		if (tmp == 0x25) {
 80029f8:	2b25      	cmp	r3, #37	; 0x25
  		printf("SPI Test FAIL!\r\n");
 80029fa:	4628      	mov	r0, r5
  		if (tmp == 0x25) {
 80029fc:	d1ec      	bne.n	80029d8 <main+0x360>
  		printf("SPI Test PASS!\r\n");
 80029fe:	484d      	ldr	r0, [pc, #308]	; (8002b34 <main+0x4bc>)
  		uint8_t upper = OV5462_read_i2c_reg(&ov5462, CHIPID_UPPER);
 8002a00:	4d4d      	ldr	r5, [pc, #308]	; (8002b38 <main+0x4c0>)
  			printf("I2C Test FAIL!\r\n");
 8002a02:	4e4e      	ldr	r6, [pc, #312]	; (8002b3c <main+0x4c4>)
  		printf("SPI Test PASS!\r\n");
 8002a04:	f005 fe02 	bl	800860c <puts>
  		break; // continue to program
 8002a08:	e005      	b.n	8002a16 <main+0x39e>
  			printf("I2C Test FAIL!\r\n");
 8002a0a:	f005 fdff 	bl	800860c <puts>
  			HAL_Delay(1000);
 8002a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a12:	f000 fb7b 	bl	800310c <HAL_Delay>
  		uint8_t upper = OV5462_read_i2c_reg(&ov5462, CHIPID_UPPER);
 8002a16:	f243 010a 	movw	r1, #12298	; 0x300a
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f7fe fa7e 	bl	8000f1c <OV5462_read_i2c_reg>
  		uint8_t lower = OV5462_read_i2c_reg(&ov5462, CHIPID_LOWER);
 8002a20:	f243 010b 	movw	r1, #12299	; 0x300b
  		uint8_t upper = OV5462_read_i2c_reg(&ov5462, CHIPID_UPPER);
 8002a24:	4604      	mov	r4, r0
  		uint8_t lower = OV5462_read_i2c_reg(&ov5462, CHIPID_LOWER);
 8002a26:	4628      	mov	r0, r5
 8002a28:	f7fe fa78 	bl	8000f1c <OV5462_read_i2c_reg>
  		if (upper == 0x56 && lower == 0x42) {
 8002a2c:	2c56      	cmp	r4, #86	; 0x56
  		uint8_t lower = OV5462_read_i2c_reg(&ov5462, CHIPID_LOWER);
 8002a2e:	4603      	mov	r3, r0
  			printf("I2C Test FAIL!\r\n");
 8002a30:	4630      	mov	r0, r6
  		if (upper == 0x56 && lower == 0x42) {
 8002a32:	d1ea      	bne.n	8002a0a <main+0x392>
 8002a34:	2b42      	cmp	r3, #66	; 0x42
 8002a36:	d1e8      	bne.n	8002a0a <main+0x392>
  			printf("I2C Test PASS!\r\n");
 8002a38:	4841      	ldr	r0, [pc, #260]	; (8002b40 <main+0x4c8>)
 8002a3a:	f005 fde7 	bl	800860c <puts>
  	if (OV5462_init(&ov5462)) {
 8002a3e:	483e      	ldr	r0, [pc, #248]	; (8002b38 <main+0x4c0>)
 8002a40:	f7fe fad2 	bl	8000fe8 <OV5462_init>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d165      	bne.n	8002b14 <main+0x49c>
  	OV5462_continuous_capture_init(&ov5462);
 8002a48:	483b      	ldr	r0, [pc, #236]	; (8002b38 <main+0x4c0>)
  	check_capturing = 1;
 8002a4a:	4d3e      	ldr	r5, [pc, #248]	; (8002b44 <main+0x4cc>)
 8002a4c:	4e3e      	ldr	r6, [pc, #248]	; (8002b48 <main+0x4d0>)
 8002a4e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8002b58 <main+0x4e0>
	 if (capture_flag && (OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {
 8002a52:	4c39      	ldr	r4, [pc, #228]	; (8002b38 <main+0x4c0>)
	printf("Capture!\r\n");
 8002a54:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002b5c <main+0x4e4>
  	OV5462_continuous_capture_init(&ov5462);
 8002a58:	f7fe fbec 	bl	8001234 <OV5462_continuous_capture_init>
  	trigger_capture();
 8002a5c:	f7ff fc7e 	bl	800235c <trigger_capture>
  	check_capturing = 1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	602b      	str	r3, [r5, #0]
	TIM2->CNT = 0;
 8002a64:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8002a68:	e001      	b.n	8002a6e <main+0x3f6>
	 if (check_capturing) {
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	bb6b      	cbnz	r3, 8002aca <main+0x452>
	 if (capture_flag && (OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {
 8002a6e:	6833      	ldr	r3, [r6, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0fa      	beq.n	8002a6a <main+0x3f2>
 8002a74:	2141      	movs	r1, #65	; 0x41
 8002a76:	4620      	mov	r0, r4
 8002a78:	f7fe fa92 	bl	8000fa0 <OV5462_read_spi_reg>
 8002a7c:	0702      	lsls	r2, r0, #28
 8002a7e:	d5f4      	bpl.n	8002a6a <main+0x3f2>
		 if (save_requested) {
 8002a80:	f8d9 a000 	ldr.w	sl, [r9]
 8002a84:	f1ba 0f00 	cmp.w	sl, #0
 8002a88:	d002      	beq.n	8002a90 <main+0x418>
			 read_fifo_and_write_data_file();
 8002a8a:	f7ff fc93 	bl	80023b4 <read_fifo_and_write_data_file>
 8002a8e:	e7ec      	b.n	8002a6a <main+0x3f2>
	printf("Capture!\r\n");
 8002a90:	4640      	mov	r0, r8
 8002a92:	f005 fdbb 	bl	800860c <puts>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 8002a96:	2201      	movs	r2, #1
 8002a98:	2104      	movs	r1, #4
 8002a9a:	4620      	mov	r0, r4
	capture_flag = 0;
 8002a9c:	f8c6 a000 	str.w	sl, [r6]
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 8002aa0:	f7fe fa58 	bl	8000f54 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_WRITE);
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7fe fa53 	bl	8000f54 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_READ);
 8002aae:	2210      	movs	r2, #16
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7fe fa4e 	bl	8000f54 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 8002ab8:	2202      	movs	r2, #2
 8002aba:	2104      	movs	r1, #4
 8002abc:	4620      	mov	r0, r4
 8002abe:	f7fe fa49 	bl	8000f54 <OV5462_write_spi_reg>
	check_capturing = 1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	602b      	str	r3, [r5, #0]
	TIM2->CNT = 0;
 8002ac6:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
		 if (TIM2->CNT < 10000) {
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	f242 730f 	movw	r3, #9999	; 0x270f
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d81c      	bhi.n	8002b0e <main+0x496>
			 if (OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK) {
 8002ad4:	2141      	movs	r1, #65	; 0x41
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f7fe fa62 	bl	8000fa0 <OV5462_read_spi_reg>
 8002adc:	0703      	lsls	r3, r0, #28
 8002ade:	d5c6      	bpl.n	8002a6e <main+0x3f6>
				 uint32_t length = OV5462_read_fifo_length(&ov5462);
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f7fe fbe9 	bl	80012b8 <OV5462_read_fifo_length>
				 if (length < 0x3FFFFF) {
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <main+0x4d4>)
 8002ae8:	4298      	cmp	r0, r3
				 uint32_t length = OV5462_read_fifo_length(&ov5462);
 8002aea:	4601      	mov	r1, r0
				 if (length < 0x3FFFFF) {
 8002aec:	d816      	bhi.n	8002b1c <main+0x4a4>
					 printf("Premature capture completion! %lu bytes \r\n", length);
 8002aee:	4818      	ldr	r0, [pc, #96]	; (8002b50 <main+0x4d8>)
 8002af0:	f005 fd06 	bl	8008500 <iprintf>
					OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2104      	movs	r1, #4
 8002af8:	4620      	mov	r0, r4
 8002afa:	f7fe fa2b 	bl	8000f54 <OV5462_write_spi_reg>
					OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK);
 8002afe:	2202      	movs	r2, #2
 8002b00:	2104      	movs	r1, #4
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7fe fa26 	bl	8000f54 <OV5462_write_spi_reg>
					check_capturing = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	602b      	str	r3, [r5, #0]
 8002b0c:	e7af      	b.n	8002a6e <main+0x3f6>
			 check_capturing = 0; // it's been over a second, the capture probably started successfully
 8002b0e:	2300      	movs	r3, #0
 8002b10:	602b      	str	r3, [r5, #0]
 8002b12:	e7ac      	b.n	8002a6e <main+0x3f6>
  		printf("Init fail!\r\n");
 8002b14:	480f      	ldr	r0, [pc, #60]	; (8002b54 <main+0x4dc>)
 8002b16:	f005 fd79 	bl	800860c <puts>
 8002b1a:	e795      	b.n	8002a48 <main+0x3d0>
					 OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2104      	movs	r1, #4
 8002b22:	f7fe fa17 	bl	8000f54 <OV5462_write_spi_reg>
					 OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK);
 8002b26:	2202      	movs	r2, #2
 8002b28:	2104      	movs	r1, #4
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f7fe fa12 	bl	8000f54 <OV5462_write_spi_reg>
 8002b30:	e79d      	b.n	8002a6e <main+0x3f6>
 8002b32:	bf00      	nop
 8002b34:	0800b60c 	.word	0x0800b60c
 8002b38:	200024cc 	.word	0x200024cc
 8002b3c:	0800b63c 	.word	0x0800b63c
 8002b40:	0800b62c 	.word	0x0800b62c
 8002b44:	20000224 	.word	0x20000224
 8002b48:	20000220 	.word	0x20000220
 8002b4c:	003ffffe 	.word	0x003ffffe
 8002b50:	0800b658 	.word	0x0800b658
 8002b54:	0800b64c 	.word	0x0800b64c
 8002b58:	200024d8 	.word	0x200024d8
 8002b5c:	0800b554 	.word	0x0800b554

08002b60 <__io_putchar>:
{
 8002b60:	b500      	push	{lr}
 8002b62:	b083      	sub	sp, #12
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8002b68:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	a901      	add	r1, sp, #4
 8002b6e:	4803      	ldr	r0, [pc, #12]	; (8002b7c <__io_putchar+0x1c>)
 8002b70:	f002 fcde 	bl	8005530 <HAL_UART_Transmit>
}
 8002b74:	9801      	ldr	r0, [sp, #4]
 8002b76:	b003      	add	sp, #12
 8002b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b7c:	20002484 	.word	0x20002484

08002b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b80:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <HAL_MspInit+0x38>)
 8002b84:	2100      	movs	r1, #0
 8002b86:	9100      	str	r1, [sp, #0]
 8002b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
 8002b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b92:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b96:	9200      	str	r2, [sp, #0]
 8002b98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	9101      	str	r1, [sp, #4]
 8002b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002bae:	2005      	movs	r0, #5
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb0:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002bb2:	f000 bc19 	b.w	80033e8 <HAL_NVIC_SetPriorityGrouping>
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bbc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_ADC_MspInit+0x84>)
 8002bc0:	6802      	ldr	r2, [r0, #0]
{
 8002bc2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8002bc6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002bcc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002bd0:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8002bd2:	d001      	beq.n	8002bd8 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bd4:	b00a      	add	sp, #40	; 0x28
 8002bd6:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bd8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002bdc:	9401      	str	r4, [sp, #4]
 8002bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8002be0:	4818      	ldr	r0, [pc, #96]	; (8002c44 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
 8002be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bea:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002bee:	9201      	str	r2, [sp, #4]
 8002bf0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf2:	9402      	str	r4, [sp, #8]
 8002bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf6:	f042 0204 	orr.w	r2, r2, #4
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfe:	f002 0204 	and.w	r2, r2, #4
 8002c02:	9202      	str	r2, [sp, #8]
 8002c04:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	9403      	str	r4, [sp, #12]
 8002c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0a:	f042 0202 	orr.w	r2, r2, #2
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8002c18:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8002c24:	f000 fc58 	bl	80034d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 8002c28:	2203      	movs	r2, #3
 8002c2a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2c:	4806      	ldr	r0, [pc, #24]	; (8002c48 <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 8002c32:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f000 fc4f 	bl	80034d8 <HAL_GPIO_Init>
}
 8002c3a:	b00a      	add	sp, #40	; 0x28
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	bf00      	nop
 8002c40:	40012000 	.word	0x40012000
 8002c44:	40020800 	.word	0x40020800
 8002c48:	40020400 	.word	0x40020400

08002c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c4c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_I2C_MspInit+0x64>)
 8002c50:	6802      	ldr	r2, [r0, #0]
{
 8002c52:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c54:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8002c56:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002c5c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002c60:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 8002c62:	d001      	beq.n	8002c68 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c64:	b009      	add	sp, #36	; 0x24
 8002c66:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c68:	4d12      	ldr	r5, [pc, #72]	; (8002cb4 <HAL_I2C_MspInit+0x68>)
 8002c6a:	9400      	str	r4, [sp, #0]
 8002c6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6e:	4812      	ldr	r0, [pc, #72]	; (8002cb8 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	632b      	str	r3, [r5, #48]	; 0x30
 8002c76:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8002c7e:	22c0      	movs	r2, #192	; 0xc0
 8002c80:	2312      	movs	r3, #18
 8002c82:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c90:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c92:	f000 fc21 	bl	80034d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c96:	9401      	str	r4, [sp, #4]
 8002c98:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002c9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c9e:	642b      	str	r3, [r5, #64]	; 0x40
 8002ca0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	9b01      	ldr	r3, [sp, #4]
}
 8002caa:	b009      	add	sp, #36	; 0x24
 8002cac:	bd30      	pop	{r4, r5, pc}
 8002cae:	bf00      	nop
 8002cb0:	40005400 	.word	0x40005400
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40020400 	.word	0x40020400

08002cbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cbc:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8002cbe:	6802      	ldr	r2, [r0, #0]
 8002cc0:	4949      	ldr	r1, [pc, #292]	; (8002de8 <HAL_SPI_MspInit+0x12c>)
{
 8002cc2:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8002cc6:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8002ccc:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8002cd0:	930c      	str	r3, [sp, #48]	; 0x30
  if(hspi->Instance==SPI1)
 8002cd2:	d007      	beq.n	8002ce4 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8002cd4:	4945      	ldr	r1, [pc, #276]	; (8002dec <HAL_SPI_MspInit+0x130>)
 8002cd6:	428a      	cmp	r2, r1
 8002cd8:	d027      	beq.n	8002d2a <HAL_SPI_MspInit+0x6e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8002cda:	4945      	ldr	r1, [pc, #276]	; (8002df0 <HAL_SPI_MspInit+0x134>)
 8002cdc:	428a      	cmp	r2, r1
 8002cde:	d05f      	beq.n	8002da0 <HAL_SPI_MspInit+0xe4>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ce0:	b00e      	add	sp, #56	; 0x38
 8002ce2:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ce4:	4a43      	ldr	r2, [pc, #268]	; (8002df4 <HAL_SPI_MspInit+0x138>)
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002cea:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8002cee:	6450      	str	r0, [r2, #68]	; 0x44
 8002cf0:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002cf2:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8002cf6:	9001      	str	r0, [sp, #4]
 8002cf8:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	9302      	str	r3, [sp, #8]
 8002cfc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfe:	483e      	ldr	r0, [pc, #248]	; (8002df8 <HAL_SPI_MspInit+0x13c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0e:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d10:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d12:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = CAM_SPI1_SCK_Pin|CAM_SPI1_MISO_Pin|CAM_SPI1_MOSI_Pin;
 8002d14:	26e0      	movs	r6, #224	; 0xe0
 8002d16:	2702      	movs	r7, #2
 8002d18:	e9cd 6708 	strd	r6, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d1c:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d20:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d22:	f000 fbd9 	bl	80034d8 <HAL_GPIO_Init>
}
 8002d26:	b00e      	add	sp, #56	; 0x38
 8002d28:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d2a:	4a32      	ldr	r2, [pc, #200]	; (8002df4 <HAL_SPI_MspInit+0x138>)
 8002d2c:	9303      	str	r3, [sp, #12]
 8002d2e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d30:	4832      	ldr	r0, [pc, #200]	; (8002dfc <HAL_SPI_MspInit+0x140>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d32:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002d36:	6411      	str	r1, [r2, #64]	; 0x40
 8002d38:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002d3a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002d3e:	9103      	str	r1, [sp, #12]
 8002d40:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d42:	9304      	str	r3, [sp, #16]
 8002d44:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d46:	f041 0104 	orr.w	r1, r1, #4
 8002d4a:	6311      	str	r1, [r2, #48]	; 0x30
 8002d4c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d4e:	f001 0104 	and.w	r1, r1, #4
 8002d52:	9104      	str	r1, [sp, #16]
 8002d54:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d56:	9305      	str	r3, [sp, #20]
 8002d58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d68:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 8002d6c:	220c      	movs	r2, #12
 8002d6e:	2601      	movs	r6, #1
 8002d70:	2703      	movs	r7, #3
 8002d72:	2302      	movs	r3, #2
 8002d74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002d78:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d7e:	940c      	str	r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d80:	f000 fbaa 	bl	80034d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8002d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d88:	2302      	movs	r3, #2
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002d8a:	481d      	ldr	r0, [pc, #116]	; (8002e00 <HAL_SPI_MspInit+0x144>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d8c:	940c      	str	r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002d8e:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8002d90:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8002d94:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002d98:	f000 fb9e 	bl	80034d8 <HAL_GPIO_Init>
}
 8002d9c:	b00e      	add	sp, #56	; 0x38
 8002d9e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <HAL_SPI_MspInit+0x138>)
 8002da2:	9306      	str	r3, [sp, #24]
 8002da4:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002da6:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002daa:	6410      	str	r0, [r2, #64]	; 0x40
 8002dac:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002dae:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 8002db2:	9006      	str	r0, [sp, #24]
 8002db4:	9806      	ldr	r0, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db6:	9307      	str	r3, [sp, #28]
 8002db8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dba:	4810      	ldr	r0, [pc, #64]	; (8002dfc <HAL_SPI_MspInit+0x140>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbc:	f043 0304 	orr.w	r3, r3, #4
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dca:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dcc:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dce:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002dd0:	f44f 56e0 	mov.w	r6, #7168	; 0x1c00
 8002dd4:	2702      	movs	r7, #2
 8002dd6:	e9cd 6708 	strd	r6, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dda:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dde:	9c07      	ldr	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de0:	f000 fb7a 	bl	80034d8 <HAL_GPIO_Init>
}
 8002de4:	b00e      	add	sp, #56	; 0x38
 8002de6:	bdd0      	pop	{r4, r6, r7, pc}
 8002de8:	40013000 	.word	0x40013000
 8002dec:	40003800 	.word	0x40003800
 8002df0:	40003c00 	.word	0x40003c00
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020400 	.word	0x40020400

08002e04 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002e04:	6803      	ldr	r3, [r0, #0]
 8002e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0a:	d000      	beq.n	8002e0e <HAL_TIM_Base_MspInit+0xa>
 8002e0c:	4770      	bx	lr
{
 8002e0e:	b500      	push	{lr}
 8002e10:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e12:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002e16:	2200      	movs	r2, #0
 8002e18:	9201      	str	r2, [sp, #4]
 8002e1a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e1c:	f041 0101 	orr.w	r1, r1, #1
 8002e20:	6419      	str	r1, [r3, #64]	; 0x40
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002e2a:	201c      	movs	r0, #28
 8002e2c:	2102      	movs	r1, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e2e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002e30:	f000 faec 	bl	800340c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e34:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e36:	b003      	add	sp, #12
 8002e38:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e3c:	f000 bb24 	b.w	8003488 <HAL_NVIC_EnableIRQ>

08002e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e40:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8002e42:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <HAL_UART_MspInit+0x70>)
 8002e44:	6801      	ldr	r1, [r0, #0]
{
 8002e46:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002e4a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002e50:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002e54:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8002e56:	d002      	beq.n	8002e5e <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e58:	b009      	add	sp, #36	; 0x24
 8002e5a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e5e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002e66:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8002e6a:	6410      	str	r0, [r2, #64]	; 0x40
 8002e6c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002e6e:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8002e72:	9000      	str	r0, [sp, #0]
 8002e74:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7a:	480e      	ldr	r0, [pc, #56]	; (8002eb4 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002e84:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8002ea8 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e90:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002e92:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e96:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e98:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9a:	f000 fb1d 	bl	80034d8 <HAL_GPIO_Init>
}
 8002e9e:	b009      	add	sp, #36	; 0x24
 8002ea0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ea4:	f3af 8000 	nop.w
 8002ea8:	0000000c 	.word	0x0000000c
 8002eac:	00000002 	.word	0x00000002
 8002eb0:	40004400 	.word	0x40004400
 8002eb4:	40020000 	.word	0x40020000

08002eb8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eb8:	e7fe      	b.n	8002eb8 <NMI_Handler>
 8002eba:	bf00      	nop

08002ebc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <HardFault_Handler>
 8002ebe:	bf00      	nop

08002ec0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <MemManage_Handler>
 8002ec2:	bf00      	nop

08002ec4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ec4:	e7fe      	b.n	8002ec4 <BusFault_Handler>
 8002ec6:	bf00      	nop

08002ec8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <UsageFault_Handler>
 8002eca:	bf00      	nop

08002ecc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop

08002ed0 <DebugMon_Handler>:
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop

08002ed4 <PendSV_Handler>:
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8002ed8:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <SysTick_Handler+0x3c>)
 8002eda:	7813      	ldrb	r3, [r2, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	7013      	strb	r3, [r2, #0]

	if (FatFsCnt >= 10) {
 8002ee2:	7813      	ldrb	r3, [r2, #0]
 8002ee4:	2b09      	cmp	r3, #9
 8002ee6:	d801      	bhi.n	8002eec <SysTick_Handler+0x14>
		FatFsCnt = 0;
		SDTimer_Handler();
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee8:	f000 b8fe 	b.w	80030e8 <HAL_IncTick>
	if (Timer1 > 0) {
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <SysTick_Handler+0x40>)
		FatFsCnt = 0;
 8002eee:	2100      	movs	r1, #0
 8002ef0:	7011      	strb	r1, [r2, #0]
	if (Timer1 > 0) {
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	b11a      	cbz	r2, 8002efe <SysTick_Handler+0x26>
		--Timer1;
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0) {
 8002efe:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <SysTick_Handler+0x44>)
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	2a00      	cmp	r2, #0
 8002f04:	d0f0      	beq.n	8002ee8 <SysTick_Handler+0x10>
		--Timer2;
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	3a01      	subs	r2, #1
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]
  HAL_IncTick();
 8002f0e:	f000 b8eb 	b.w	80030e8 <HAL_IncTick>
 8002f12:	bf00      	nop
 8002f14:	200024e4 	.word	0x200024e4
 8002f18:	20000216 	.word	0x20000216
 8002f1c:	20000218 	.word	0x20000218

08002f20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f22:	4804      	ldr	r0, [pc, #16]	; (8002f34 <TIM2_IRQHandler+0x14>)
 8002f24:	f002 f984 	bl	8005230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  set_capture_flag(1);

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  set_capture_flag(1);
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	f7ff bb37 	b.w	80025a0 <set_capture_flag>
 8002f32:	bf00      	nop
 8002f34:	2000243c 	.word	0x2000243c

08002f38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f3a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f3e:	f000 fbc3 	bl	80036c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  set_save_requested(1);

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  set_save_requested(1);
 8002f46:	2001      	movs	r0, #1
 8002f48:	f7ff bb30 	b.w	80025ac <set_save_requested>

08002f4c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	4770      	bx	lr

08002f50 <_kill>:

int _kill(int pid, int sig)
{
 8002f50:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002f52:	f004 fd49 	bl	80079e8 <__errno>
 8002f56:	2316      	movs	r3, #22
 8002f58:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f5e:	bd08      	pop	{r3, pc}

08002f60 <_exit>:

void _exit (int status)
{
 8002f60:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002f62:	f004 fd41 	bl	80079e8 <__errno>
 8002f66:	2316      	movs	r3, #22
 8002f68:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002f6a:	e7fe      	b.n	8002f6a <_exit+0xa>

08002f6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f6c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6e:	1e16      	subs	r6, r2, #0
 8002f70:	dd07      	ble.n	8002f82 <_read+0x16>
 8002f72:	460c      	mov	r4, r1
 8002f74:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002f76:	f3af 8000 	nop.w
 8002f7a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7e:	42a5      	cmp	r5, r4
 8002f80:	d1f9      	bne.n	8002f76 <_read+0xa>
	}

return len;
}
 8002f82:	4630      	mov	r0, r6
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
 8002f86:	bf00      	nop

08002f88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f88:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8a:	1e16      	subs	r6, r2, #0
 8002f8c:	dd07      	ble.n	8002f9e <_write+0x16>
 8002f8e:	460c      	mov	r4, r1
 8002f90:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002f92:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002f96:	f7ff fde3 	bl	8002b60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	42ac      	cmp	r4, r5
 8002f9c:	d1f9      	bne.n	8002f92 <_write+0xa>
	}
	return len;
}
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
 8002fa2:	bf00      	nop

08002fa4 <_close>:

int _close(int file)
{
	return -1;
}
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop

08002fac <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb0:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop

08002fb8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002fb8:	2001      	movs	r0, #1
 8002fba:	4770      	bx	lr

08002fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	4770      	bx	lr

08002fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fc0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc2:	4c0c      	ldr	r4, [pc, #48]	; (8002ff4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <_sbrk+0x38>)
 8002fc6:	490d      	ldr	r1, [pc, #52]	; (8002ffc <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8002fc8:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fca:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8002fcc:	b12a      	cbz	r2, 8002fda <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fce:	4410      	add	r0, r2
 8002fd0:	4288      	cmp	r0, r1
 8002fd2:	d807      	bhi.n	8002fe4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002fd4:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <_sbrk+0x40>)
 8002fdc:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002fde:	4410      	add	r0, r2
 8002fe0:	4288      	cmp	r0, r1
 8002fe2:	d9f7      	bls.n	8002fd4 <_sbrk+0x14>
    errno = ENOMEM;
 8002fe4:	f004 fd00 	bl	80079e8 <__errno>
 8002fe8:	230c      	movs	r3, #12
    return (void *)-1;
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8002fee:	6003      	str	r3, [r0, #0]
}
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	bd10      	pop	{r4, pc}
 8002ff4:	200024e8 	.word	0x200024e8
 8002ff8:	20018000 	.word	0x20018000
 8002ffc:	00000400 	.word	0x00000400
 8003000:	20002540 	.word	0x20002540

08003004 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003004:	4a03      	ldr	r2, [pc, #12]	; (8003014 <SystemInit+0x10>)
 8003006:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800300a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800300e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003050 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800301c:	480d      	ldr	r0, [pc, #52]	; (8003054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800301e:	490e      	ldr	r1, [pc, #56]	; (8003058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003020:	4a0e      	ldr	r2, [pc, #56]	; (800305c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003024:	e002      	b.n	800302c <LoopCopyDataInit>

08003026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302a:	3304      	adds	r3, #4

0800302c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800302c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003030:	d3f9      	bcc.n	8003026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003032:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003034:	4c0b      	ldr	r4, [pc, #44]	; (8003064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003038:	e001      	b.n	800303e <LoopFillZerobss>

0800303a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800303c:	3204      	adds	r2, #4

0800303e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800303e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003040:	d3fb      	bcc.n	800303a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003042:	f7ff ffdf 	bl	8003004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003046:	f004 fcd5 	bl	80079f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304a:	f7ff fb15 	bl	8002678 <main>
  bx  lr    
 800304e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003050:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003058:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800305c:	0800bb14 	.word	0x0800bb14
  ldr r2, =_sbss
 8003060:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003064:	2000253c 	.word	0x2000253c

08003068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003068:	e7fe      	b.n	8003068 <ADC_IRQHandler>
	...

0800306c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800306c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800306e:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <HAL_InitTick+0x3c>)
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_InitTick+0x40>)
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
{
 8003076:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800307c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003080:	fbb3 f0f0 	udiv	r0, r3, r0
 8003084:	f000 fa0e 	bl	80034a4 <HAL_SYSTICK_Config>
 8003088:	b908      	cbnz	r0, 800308e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308a:	2d0f      	cmp	r5, #15
 800308c:	d901      	bls.n	8003092 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800308e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003090:	bd38      	pop	{r3, r4, r5, pc}
 8003092:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003094:	4602      	mov	r2, r0
 8003096:	4629      	mov	r1, r5
 8003098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800309c:	f000 f9b6 	bl	800340c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_InitTick+0x44>)
 80030a2:	4620      	mov	r0, r4
 80030a4:	601d      	str	r5, [r3, #0]
}
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	20000008 	.word	0x20000008
 80030ac:	20000004 	.word	0x20000004
 80030b0:	2000000c 	.word	0x2000000c

080030b4 <HAL_Init>:
{
 80030b4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_Init+0x30>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ce:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d0:	2003      	movs	r0, #3
 80030d2:	f000 f989 	bl	80033e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7ff ffc8 	bl	800306c <HAL_InitTick>
  HAL_MspInit();
 80030dc:	f7ff fd50 	bl	8002b80 <HAL_MspInit>
}
 80030e0:	2000      	movs	r0, #0
 80030e2:	bd08      	pop	{r3, pc}
 80030e4:	40023c00 	.word	0x40023c00

080030e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030e8:	4a03      	ldr	r2, [pc, #12]	; (80030f8 <HAL_IncTick+0x10>)
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <HAL_IncTick+0x14>)
 80030ec:	6811      	ldr	r1, [r2, #0]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	440b      	add	r3, r1
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	200024ec 	.word	0x200024ec
 80030fc:	20000008 	.word	0x20000008

08003100 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003100:	4b01      	ldr	r3, [pc, #4]	; (8003108 <HAL_GetTick+0x8>)
 8003102:	6818      	ldr	r0, [r3, #0]
}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	200024ec 	.word	0x200024ec

0800310c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff fff6 	bl	8003100 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003114:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003116:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003118:	d002      	beq.n	8003120 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800311a:	4b04      	ldr	r3, [pc, #16]	; (800312c <HAL_Delay+0x20>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003120:	f7ff ffee 	bl	8003100 <HAL_GetTick>
 8003124:	1b43      	subs	r3, r0, r5
 8003126:	42a3      	cmp	r3, r4
 8003128:	d3fa      	bcc.n	8003120 <HAL_Delay+0x14>
  {
  }
}
 800312a:	bd38      	pop	{r3, r4, r5, pc}
 800312c:	20000008 	.word	0x20000008

08003130 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003130:	2800      	cmp	r0, #0
 8003132:	f000 809f 	beq.w	8003274 <HAL_ADC_Init+0x144>
{
 8003136:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003138:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800313a:	4604      	mov	r4, r0
 800313c:	b13d      	cbz	r5, 800314e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800313e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003140:	06db      	lsls	r3, r3, #27
 8003142:	d50c      	bpl.n	800315e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003144:	2300      	movs	r3, #0
 8003146:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 800314a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 800314c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800314e:	f7ff fd35 	bl	8002bbc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003152:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003154:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003156:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800315a:	06db      	lsls	r3, r3, #27
 800315c:	d4f2      	bmi.n	8003144 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800315e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003160:	4a48      	ldr	r2, [pc, #288]	; (8003284 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8003162:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003166:	f023 0302 	bic.w	r3, r3, #2
 800316a:	f043 0302 	orr.w	r3, r3, #2
 800316e:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003170:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003172:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003174:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003178:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800317a:	6851      	ldr	r1, [r2, #4]
 800317c:	6860      	ldr	r0, [r4, #4]
 800317e:	4301      	orrs	r1, r0
 8003180:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003182:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003184:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003186:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800318c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8003194:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 800319c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	4302      	orrs	r2, r0
 80031a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031a4:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031a6:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031a8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80031ac:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031ae:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031b2:	4302      	orrs	r2, r0
 80031b4:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b6:	4a34      	ldr	r2, [pc, #208]	; (8003288 <HAL_ADC_Init+0x158>)
 80031b8:	4291      	cmp	r1, r2
 80031ba:	d052      	beq.n	8003262 <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031bc:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031be:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c0:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80031c4:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	4311      	orrs	r1, r2
 80031ca:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80031d2:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	432a      	orrs	r2, r5
 80031d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	f022 0202 	bic.w	r2, r2, #2
 80031e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	7e21      	ldrb	r1, [r4, #24]
 80031e6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80031ea:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031ec:	f894 2020 	ldrb.w	r2, [r4, #32]
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	d041      	beq.n	8003278 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031f4:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031f8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80031fc:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031fe:	6858      	ldr	r0, [r3, #4]
 8003200:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003204:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003206:	1e51      	subs	r1, r2, #1
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800320e:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003212:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003214:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003216:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800321c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321e:	3901      	subs	r1, #1
 8003220:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003226:	6899      	ldr	r1, [r3, #8]
 8003228:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800322c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800322e:	6899      	ldr	r1, [r3, #8]
 8003230:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003234:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003238:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003240:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003242:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003244:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003246:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800324a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800324c:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800324e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003250:	f023 0303 	bic.w	r3, r3, #3
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800325a:	2300      	movs	r3, #0
 800325c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003260:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	e7b2      	b.n	80031da <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8003274:	2001      	movs	r0, #1
}
 8003276:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	e7c6      	b.n	8003210 <HAL_ADC_Init+0xe0>
 8003282:	bf00      	nop
 8003284:	40012300 	.word	0x40012300
 8003288:	0f000001 	.word	0x0f000001

0800328c <HAL_ADC_ConfigChannel>:
{
 800328c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800328e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003292:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003294:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003296:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003298:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800329a:	f000 809c 	beq.w	80033d6 <HAL_ADC_ConfigChannel+0x14a>
 800329e:	2301      	movs	r3, #1
 80032a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032a4:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032a6:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032a8:	2c09      	cmp	r4, #9
 80032aa:	d82d      	bhi.n	8003308 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032ac:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032ae:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032b0:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80032b4:	f04f 0c07 	mov.w	ip, #7
 80032b8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80032bc:	ea25 050c 	bic.w	r5, r5, ip
 80032c0:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032c2:	691d      	ldr	r5, [r3, #16]
 80032c4:	fa02 f20e 	lsl.w	r2, r2, lr
 80032c8:	432a      	orrs	r2, r5
 80032ca:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 80032cc:	684a      	ldr	r2, [r1, #4]
 80032ce:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032d0:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 80032d2:	d82f      	bhi.n	8003334 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80032d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032da:	3a05      	subs	r2, #5
 80032dc:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032e0:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032e4:	fa0e f202 	lsl.w	r2, lr, r2
 80032e8:	ea21 0202 	bic.w	r2, r1, r2
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f0:	ea4c 0202 	orr.w	r2, ip, r2
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032f6:	4a39      	ldr	r2, [pc, #228]	; (80033dc <HAL_ADC_ConfigChannel+0x150>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d030      	beq.n	800335e <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 80032fc:	2300      	movs	r3, #0
 80032fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003302:	4618      	mov	r0, r3
}
 8003304:	b003      	add	sp, #12
 8003306:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003308:	fa1f fc84 	uxth.w	ip, r4
 800330c:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8003310:	68dd      	ldr	r5, [r3, #12]
 8003312:	f1a2 0e1e 	sub.w	lr, r2, #30
 8003316:	2207      	movs	r2, #7
 8003318:	fa02 f20e 	lsl.w	r2, r2, lr
 800331c:	ea25 0202 	bic.w	r2, r5, r2
 8003320:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003322:	688a      	ldr	r2, [r1, #8]
 8003324:	68dd      	ldr	r5, [r3, #12]
 8003326:	fa02 f20e 	lsl.w	r2, r2, lr
 800332a:	432a      	orrs	r2, r5
 800332c:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800332e:	684a      	ldr	r2, [r1, #4]
 8003330:	2a06      	cmp	r2, #6
 8003332:	d9cf      	bls.n	80032d4 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8003334:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003336:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 800333a:	d836      	bhi.n	80033aa <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800333c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800333e:	3a23      	subs	r2, #35	; 0x23
 8003340:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003342:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003346:	fa05 f202 	lsl.w	r2, r5, r2
 800334a:	ea21 0202 	bic.w	r2, r1, r2
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003352:	ea4c 0202 	orr.w	r2, ip, r2
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003358:	4a20      	ldr	r2, [pc, #128]	; (80033dc <HAL_ADC_ConfigChannel+0x150>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d1ce      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x70>
 800335e:	2c12      	cmp	r4, #18
 8003360:	d032      	beq.n	80033c8 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003362:	f1a4 0310 	sub.w	r3, r4, #16
 8003366:	2b01      	cmp	r3, #1
 8003368:	d8c8      	bhi.n	80032fc <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800336a:	4a1d      	ldr	r2, [pc, #116]	; (80033e0 <HAL_ADC_ConfigChannel+0x154>)
 800336c:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800336e:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003370:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003374:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003376:	d1c1      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <HAL_ADC_ConfigChannel+0x158>)
 800337a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8003384:	f202 3283 	addw	r2, r2, #899	; 0x383
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	0c9b      	lsrs	r3, r3, #18
 800338e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003396:	9b01      	ldr	r3, [sp, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0af      	beq.n	80032fc <HAL_ADC_ConfigChannel+0x70>
        counter--;
 800339c:	9b01      	ldr	r3, [sp, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80033a2:	9b01      	ldr	r3, [sp, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f9      	bne.n	800339c <HAL_ADC_ConfigChannel+0x110>
 80033a8:	e7a8      	b.n	80032fc <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ac:	3a41      	subs	r2, #65	; 0x41
 80033ae:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033b0:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033b4:	fa05 f202 	lsl.w	r2, r5, r2
 80033b8:	ea21 0202 	bic.w	r2, r1, r2
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	ea4c 0202 	orr.w	r2, ip, r2
 80033c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80033c6:	e796      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033c8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80033cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033d4:	e792      	b.n	80032fc <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80033d6:	2002      	movs	r0, #2
}
 80033d8:	b003      	add	sp, #12
 80033da:	bd30      	pop	{r4, r5, pc}
 80033dc:	40012000 	.word	0x40012000
 80033e0:	40012300 	.word	0x40012300
 80033e4:	20000004 	.word	0x20000004

080033e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e8:	4907      	ldr	r1, [pc, #28]	; (8003408 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80033ea:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033ec:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ee:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003402:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <HAL_NVIC_SetPriority+0x74>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003414:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003416:	f1c3 0e07 	rsb	lr, r3, #7
 800341a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003422:	bf28      	it	cs
 8003424:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003428:	f1bc 0f06 	cmp.w	ip, #6
 800342c:	d91b      	bls.n	8003466 <HAL_NVIC_SetPriority+0x5a>
 800342e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003430:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003434:	fa0c fc03 	lsl.w	ip, ip, r3
 8003438:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003440:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003444:	ea21 010c 	bic.w	r1, r1, ip
 8003448:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800344a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003450:	db0c      	blt.n	800346c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003452:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003456:	0109      	lsls	r1, r1, #4
 8003458:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800345c:	b2c9      	uxtb	r1, r1
 800345e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003462:	f85d fb04 	ldr.w	pc, [sp], #4
 8003466:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003468:	4613      	mov	r3, r2
 800346a:	e7e7      	b.n	800343c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_NVIC_SetPriority+0x78>)
 800346e:	f000 000f 	and.w	r0, r0, #15
 8003472:	0109      	lsls	r1, r1, #4
 8003474:	4403      	add	r3, r0
 8003476:	b2c9      	uxtb	r1, r1
 8003478:	7619      	strb	r1, [r3, #24]
 800347a:	f85d fb04 	ldr.w	pc, [sp], #4
 800347e:	bf00      	nop
 8003480:	e000ed00 	.word	0xe000ed00
 8003484:	e000ecfc 	.word	0xe000ecfc

08003488 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003488:	2800      	cmp	r0, #0
 800348a:	db08      	blt.n	800349e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348c:	0941      	lsrs	r1, r0, #5
 800348e:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <HAL_NVIC_EnableIRQ+0x18>)
 8003490:	f000 001f 	and.w	r0, r0, #31
 8003494:	2301      	movs	r3, #1
 8003496:	fa03 f000 	lsl.w	r0, r3, r0
 800349a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800349e:	4770      	bx	lr
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a4:	3801      	subs	r0, #1
 80034a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80034aa:	d210      	bcs.n	80034ce <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ac:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b2:	4c08      	ldr	r4, [pc, #32]	; (80034d4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80034ba:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034be:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80034c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ca:	6119      	str	r1, [r3, #16]
 80034cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80034ce:	2001      	movs	r0, #1
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034dc:	2200      	movs	r2, #0
 80034de:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e0:	4e70      	ldr	r6, [pc, #448]	; (80036a4 <HAL_GPIO_Init+0x1cc>)
{
 80034e2:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e4:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 80034e6:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ea:	4689      	mov	r9, r1
 80034ec:	e004      	b.n	80034f8 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ee:	3301      	adds	r3, #1
 80034f0:	2b10      	cmp	r3, #16
 80034f2:	f102 0202 	add.w	r2, r2, #2
 80034f6:	d078      	beq.n	80035ea <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 80034f8:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034fc:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8003500:	43a1      	bics	r1, r4
 8003502:	d1f4      	bne.n	80034ee <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003504:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8003508:	f00c 0103 	and.w	r1, ip, #3
 800350c:	1e4d      	subs	r5, r1, #1
 800350e:	2d01      	cmp	r5, #1
 8003510:	d96e      	bls.n	80035f0 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003512:	2903      	cmp	r1, #3
 8003514:	f040 80ae 	bne.w	8003674 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003518:	4091      	lsls	r1, r2
 800351a:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 800351c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800351e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003520:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003522:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003526:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003528:	d0e1      	beq.n	80034ee <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352a:	4d5f      	ldr	r5, [pc, #380]	; (80036a8 <HAL_GPIO_Init+0x1d0>)
 800352c:	2100      	movs	r1, #0
 800352e:	9103      	str	r1, [sp, #12]
 8003530:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8003532:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003536:	6469      	str	r1, [r5, #68]	; 0x44
 8003538:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800353a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800353e:	9103      	str	r1, [sp, #12]
 8003540:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003542:	f023 0103 	bic.w	r1, r3, #3
 8003546:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800354a:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800354e:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003552:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003556:	00bf      	lsls	r7, r7, #2
 8003558:	250f      	movs	r5, #15
 800355a:	40bd      	lsls	r5, r7
 800355c:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003560:	4d52      	ldr	r5, [pc, #328]	; (80036ac <HAL_GPIO_Init+0x1d4>)
 8003562:	42a8      	cmp	r0, r5
 8003564:	d017      	beq.n	8003596 <HAL_GPIO_Init+0xbe>
 8003566:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800356a:	42a8      	cmp	r0, r5
 800356c:	f000 8086 	beq.w	800367c <HAL_GPIO_Init+0x1a4>
 8003570:	4d4f      	ldr	r5, [pc, #316]	; (80036b0 <HAL_GPIO_Init+0x1d8>)
 8003572:	42a8      	cmp	r0, r5
 8003574:	f000 8087 	beq.w	8003686 <HAL_GPIO_Init+0x1ae>
 8003578:	4d4e      	ldr	r5, [pc, #312]	; (80036b4 <HAL_GPIO_Init+0x1dc>)
 800357a:	42a8      	cmp	r0, r5
 800357c:	f000 808a 	beq.w	8003694 <HAL_GPIO_Init+0x1bc>
 8003580:	4d4d      	ldr	r5, [pc, #308]	; (80036b8 <HAL_GPIO_Init+0x1e0>)
 8003582:	42a8      	cmp	r0, r5
 8003584:	bf0c      	ite	eq
 8003586:	f04f 0e04 	moveq.w	lr, #4
 800358a:	f04f 0e07 	movne.w	lr, #7
 800358e:	fa0e f707 	lsl.w	r7, lr, r7
 8003592:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003596:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 800359a:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800359c:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035a0:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80035a4:	bf0c      	ite	eq
 80035a6:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80035a8:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80035ac:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80035ae:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035b0:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80035b4:	bf0c      	ite	eq
 80035b6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80035b8:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 80035bc:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 80035be:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035c0:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80035c4:	bf0c      	ite	eq
 80035c6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80035c8:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 80035cc:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ce:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d0:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d4:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80035d8:	bf0c      	ite	eq
 80035da:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80035dc:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035e0:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 80035e2:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035e4:	f102 0202 	add.w	r2, r2, #2
 80035e8:	d186      	bne.n	80034f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035ea:	b005      	add	sp, #20
 80035ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f0:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 80035f4:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f6:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035fa:	2503      	movs	r5, #3
 80035fc:	fa05 fe02 	lsl.w	lr, r5, r2
 8003600:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003604:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8003608:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800360a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800360c:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003610:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003614:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8003618:	409f      	lsls	r7, r3
 800361a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800361e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003620:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003622:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003626:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800362a:	4097      	lsls	r7, r2
 800362c:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003630:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8003632:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003634:	fa01 f102 	lsl.w	r1, r1, r2
 8003638:	f47f af70 	bne.w	800351c <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 800363c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003640:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003644:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003648:	f8de 7020 	ldr.w	r7, [lr, #32]
 800364c:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800364e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003652:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003656:	fa07 f708 	lsl.w	r7, r7, r8
 800365a:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800365c:	270f      	movs	r7, #15
 800365e:	fa07 f808 	lsl.w	r8, r7, r8
 8003662:	9f00      	ldr	r7, [sp, #0]
 8003664:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003668:	9f01      	ldr	r7, [sp, #4]
 800366a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800366e:	f8ce 7020 	str.w	r7, [lr, #32]
 8003672:	e753      	b.n	800351c <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003674:	2503      	movs	r5, #3
 8003676:	4095      	lsls	r5, r2
 8003678:	43ed      	mvns	r5, r5
 800367a:	e7d1      	b.n	8003620 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800367c:	fa0a f707 	lsl.w	r7, sl, r7
 8003680:	ea48 0807 	orr.w	r8, r8, r7
 8003684:	e787      	b.n	8003596 <HAL_GPIO_Init+0xbe>
 8003686:	f04f 0e02 	mov.w	lr, #2
 800368a:	fa0e f707 	lsl.w	r7, lr, r7
 800368e:	ea48 0807 	orr.w	r8, r8, r7
 8003692:	e780      	b.n	8003596 <HAL_GPIO_Init+0xbe>
 8003694:	f04f 0e03 	mov.w	lr, #3
 8003698:	fa0e f707 	lsl.w	r7, lr, r7
 800369c:	ea48 0807 	orr.w	r8, r8, r7
 80036a0:	e779      	b.n	8003596 <HAL_GPIO_Init+0xbe>
 80036a2:	bf00      	nop
 80036a4:	40013c00 	.word	0x40013c00
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40020000 	.word	0x40020000
 80036b0:	40020800 	.word	0x40020800
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40021000 	.word	0x40021000

080036bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036bc:	b902      	cbnz	r2, 80036c0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036be:	0409      	lsls	r1, r1, #16
 80036c0:	6181      	str	r1, [r0, #24]
  }
}
 80036c2:	4770      	bx	lr

080036c4 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop

080036c8 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036c8:	4a04      	ldr	r2, [pc, #16]	; (80036dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80036ca:	6951      	ldr	r1, [r2, #20]
 80036cc:	4201      	tst	r1, r0
 80036ce:	d100      	bne.n	80036d2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80036d0:	4770      	bx	lr
{
 80036d2:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036d4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d6:	f7ff fff5 	bl	80036c4 <HAL_GPIO_EXTI_Callback>
}
 80036da:	bd08      	pop	{r3, pc}
 80036dc:	40013c00 	.word	0x40013c00

080036e0 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e0:	2800      	cmp	r0, #0
 80036e2:	f000 80b9 	beq.w	8003858 <HAL_I2C_Init+0x178>
{
 80036e6:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036ec:	4604      	mov	r4, r0
 80036ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8098 	beq.w	8003828 <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003718:	f000 ff62 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800371c:	6863      	ldr	r3, [r4, #4]
 800371e:	494f      	ldr	r1, [pc, #316]	; (800385c <HAL_I2C_Init+0x17c>)
 8003720:	428b      	cmp	r3, r1
 8003722:	d84f      	bhi.n	80037c4 <HAL_I2C_Init+0xe4>
 8003724:	4a4e      	ldr	r2, [pc, #312]	; (8003860 <HAL_I2C_Init+0x180>)
 8003726:	4290      	cmp	r0, r2
 8003728:	d97c      	bls.n	8003824 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800372a:	4d4e      	ldr	r5, [pc, #312]	; (8003864 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800372c:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800372e:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003732:	1e43      	subs	r3, r0, #1
 8003734:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003738:	6822      	ldr	r2, [r4, #0]
 800373a:	6850      	ldr	r0, [r2, #4]
 800373c:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003740:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8003744:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003746:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003748:	f101 0c01 	add.w	ip, r1, #1
 800374c:	6a11      	ldr	r1, [r2, #32]
 800374e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003752:	ea41 010c 	orr.w	r1, r1, ip
 8003756:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003758:	69d1      	ldr	r1, [r2, #28]
 800375a:	f640 7efc 	movw	lr, #4092	; 0xffc
 800375e:	3301      	adds	r3, #1
 8003760:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003764:	ea13 0f0e 	tst.w	r3, lr
 8003768:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800376c:	d161      	bne.n	8003832 <HAL_I2C_Init+0x152>
 800376e:	2304      	movs	r3, #4
 8003770:	430b      	orrs	r3, r1
 8003772:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003774:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003778:	6811      	ldr	r1, [r2, #0]
 800377a:	4303      	orrs	r3, r0
 800377c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003780:	430b      	orrs	r3, r1
 8003782:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003784:	6891      	ldr	r1, [r2, #8]
 8003786:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800378a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800378e:	4303      	orrs	r3, r0
 8003790:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003794:	430b      	orrs	r3, r1
 8003796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003798:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800379c:	68d1      	ldr	r1, [r2, #12]
 800379e:	4303      	orrs	r3, r0
 80037a0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80037a4:	430b      	orrs	r3, r1
 80037a6:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a8:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037aa:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80037ac:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80037b2:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 80037c0:	4618      	mov	r0, r3
}
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037c4:	4a28      	ldr	r2, [pc, #160]	; (8003868 <HAL_I2C_Init+0x188>)
 80037c6:	4290      	cmp	r0, r2
 80037c8:	d92c      	bls.n	8003824 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80037ca:	4d26      	ldr	r5, [pc, #152]	; (8003864 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037cc:	4e27      	ldr	r6, [pc, #156]	; (800386c <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80037ce:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	6855      	ldr	r5, [r2, #4]
 80037d6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80037da:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 80037de:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80037e0:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037e4:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80037e8:	fb05 f101 	mul.w	r1, r5, r1
 80037ec:	fba6 5101 	umull	r5, r1, r6, r1
 80037f0:	6a15      	ldr	r5, [r2, #32]
 80037f2:	0989      	lsrs	r1, r1, #6
 80037f4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80037f8:	3101      	adds	r1, #1
 80037fa:	4329      	orrs	r1, r5
 80037fc:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037fe:	69d1      	ldr	r1, [r2, #28]
 8003800:	68a5      	ldr	r5, [r4, #8]
 8003802:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003806:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800380a:	b9ad      	cbnz	r5, 8003838 <HAL_I2C_Init+0x158>
 800380c:	3801      	subs	r0, #1
 800380e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	b1d3      	cbz	r3, 8003854 <HAL_I2C_Init+0x174>
 800381e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003822:	e7a5      	b.n	8003770 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003824:	2001      	movs	r0, #1
}
 8003826:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003828:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800382c:	f7ff fa0e 	bl	8002c4c <HAL_I2C_MspInit>
 8003830:	e762      	b.n	80036f8 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003836:	e79b      	b.n	8003770 <HAL_I2C_Init+0x90>
 8003838:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800383c:	3801      	subs	r0, #1
 800383e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003842:	fbb0 f3f3 	udiv	r3, r0, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384c:	b113      	cbz	r3, 8003854 <HAL_I2C_Init+0x174>
 800384e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003852:	e78d      	b.n	8003770 <HAL_I2C_Init+0x90>
 8003854:	2301      	movs	r3, #1
 8003856:	e78b      	b.n	8003770 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003858:	2001      	movs	r0, #1
}
 800385a:	4770      	bx	lr
 800385c:	000186a0 	.word	0x000186a0
 8003860:	001e847f 	.word	0x001e847f
 8003864:	431bde83 	.word	0x431bde83
 8003868:	003d08ff 	.word	0x003d08ff
 800386c:	10624dd3 	.word	0x10624dd3

08003870 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003874:	4605      	mov	r5, r0
 8003876:	b083      	sub	sp, #12
 8003878:	4699      	mov	r9, r3
 800387a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800387c:	4688      	mov	r8, r1
 800387e:	4692      	mov	sl, r2
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003880:	f7ff fc3e 	bl	8003100 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003884:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8003888:	2b20      	cmp	r3, #32
 800388a:	d003      	beq.n	8003894 <HAL_I2C_Master_Transmit+0x24>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 800388c:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 800388e:	b003      	add	sp, #12
 8003890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003894:	4606      	mov	r6, r0
 8003896:	e005      	b.n	80038a4 <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003898:	f7ff fc32 	bl	8003100 <HAL_GetTick>
 800389c:	1b80      	subs	r0, r0, r6
 800389e:	2819      	cmp	r0, #25
 80038a0:	f200 80f5 	bhi.w	8003a8e <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a4:	682c      	ldr	r4, [r5, #0]
 80038a6:	69a3      	ldr	r3, [r4, #24]
 80038a8:	ea6f 0c03 	mvn.w	ip, r3
 80038ac:	f01c 0b02 	ands.w	fp, ip, #2
 80038b0:	d0f2      	beq.n	8003898 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 80038b2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d0e8      	beq.n	800388c <HAL_I2C_Master_Transmit+0x1c>
 80038ba:	2301      	movs	r3, #1
 80038bc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	07d9      	lsls	r1, r3, #31
 80038c4:	d56f      	bpl.n	80039a6 <HAL_I2C_Master_Transmit+0x136>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c6:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c8:	4a97      	ldr	r2, [pc, #604]	; (8003b28 <HAL_I2C_Master_Transmit+0x2b8>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ce:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038d0:	2321      	movs	r3, #33	; 0x21
 80038d2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038d6:	2310      	movs	r3, #16
 80038d8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038dc:	2300      	movs	r3, #0
 80038de:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80038e0:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038e4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038e6:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80038e8:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80038ec:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d006      	beq.n	8003902 <HAL_I2C_Master_Transmit+0x92>
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d004      	beq.n	8003902 <HAL_I2C_Master_Transmit+0x92>
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d002      	beq.n	8003902 <HAL_I2C_Master_Transmit+0x92>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80038fe:	2b12      	cmp	r3, #18
 8003900:	d103      	bne.n	800390a <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	1c7b      	adds	r3, r7, #1
 800390c:	d13d      	bne.n	800398a <HAL_I2C_Master_Transmit+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800390e:	6963      	ldr	r3, [r4, #20]
 8003910:	07d8      	lsls	r0, r3, #31
 8003912:	d5fc      	bpl.n	800390e <HAL_I2C_Master_Transmit+0x9e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003914:	692b      	ldr	r3, [r5, #16]
 8003916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800391a:	d149      	bne.n	80039b0 <HAL_I2C_Master_Transmit+0x140>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800391c:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8003920:	6121      	str	r1, [r4, #16]
 8003922:	1c78      	adds	r0, r7, #1
 8003924:	d004      	beq.n	8003930 <HAL_I2C_Master_Transmit+0xc0>
 8003926:	e0d8      	b.n	8003ada <HAL_I2C_Master_Transmit+0x26a>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003928:	6963      	ldr	r3, [r4, #20]
 800392a:	055a      	lsls	r2, r3, #21
 800392c:	f100 80bd 	bmi.w	8003aaa <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003930:	6963      	ldr	r3, [r4, #20]
 8003932:	0799      	lsls	r1, r3, #30
 8003934:	d5f8      	bpl.n	8003928 <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	6963      	ldr	r3, [r4, #20]
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	69a3      	ldr	r3, [r4, #24]
 8003940:	9301      	str	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003942:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003944:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003946:	2b00      	cmp	r3, #0
 8003948:	d074      	beq.n	8003a34 <HAL_I2C_Master_Transmit+0x1c4>
 800394a:	1c79      	adds	r1, r7, #1
 800394c:	d17f      	bne.n	8003a4e <HAL_I2C_Master_Transmit+0x1de>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800394e:	6963      	ldr	r3, [r4, #20]
 8003950:	061a      	lsls	r2, r3, #24
 8003952:	d441      	bmi.n	80039d8 <HAL_I2C_Master_Transmit+0x168>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003954:	6963      	ldr	r3, [r4, #20]
 8003956:	055b      	lsls	r3, r3, #21
 8003958:	d5f9      	bpl.n	800394e <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800395a:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003962:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003964:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003966:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396e:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003970:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800397a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800397c:	2b04      	cmp	r3, #4
 800397e:	f000 80e4 	beq.w	8003b4a <HAL_I2C_Master_Transmit+0x2da>
      return HAL_ERROR;
 8003982:	2001      	movs	r0, #1
}
 8003984:	b003      	add	sp, #12
 8003986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800398a:	6963      	ldr	r3, [r4, #20]
 800398c:	07d9      	lsls	r1, r3, #31
 800398e:	d4c1      	bmi.n	8003914 <HAL_I2C_Master_Transmit+0xa4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003990:	f7ff fbb6 	bl	8003100 <HAL_GetTick>
 8003994:	1b80      	subs	r0, r0, r6
 8003996:	4287      	cmp	r7, r0
 8003998:	f0c0 80af 	bcc.w	8003afa <HAL_I2C_Master_Transmit+0x28a>
 800399c:	2f00      	cmp	r7, #0
 800399e:	f000 80ac 	beq.w	8003afa <HAL_I2C_Master_Transmit+0x28a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a2:	682c      	ldr	r4, [r5, #0]
 80039a4:	e7b1      	b.n	800390a <HAL_I2C_Master_Transmit+0x9a>
      __HAL_I2C_ENABLE(hi2c);
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	e78a      	b.n	80038c6 <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039b0:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80039b4:	f003 0306 	and.w	r3, r3, #6
 80039b8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80039bc:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80039be:	1c7b      	adds	r3, r7, #1
 80039c0:	d003      	beq.n	80039ca <HAL_I2C_Master_Transmit+0x15a>
 80039c2:	e0b3      	b.n	8003b2c <HAL_I2C_Master_Transmit+0x2bc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c4:	6963      	ldr	r3, [r4, #20]
 80039c6:	0559      	lsls	r1, r3, #21
 80039c8:	d46f      	bmi.n	8003aaa <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ca:	6963      	ldr	r3, [r4, #20]
 80039cc:	0718      	lsls	r0, r3, #28
 80039ce:	d5f9      	bpl.n	80039c4 <HAL_I2C_Master_Transmit+0x154>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039d0:	fa5f f388 	uxtb.w	r3, r8
 80039d4:	6123      	str	r3, [r4, #16]
 80039d6:	e7a4      	b.n	8003922 <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80039da:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039de:	4601      	mov	r1, r0
      hi2c->XferSize--;
 80039e0:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039e8:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 80039ea:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80039ec:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039f4:	6963      	ldr	r3, [r4, #20]
      hi2c->XferSize--;
 80039f6:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039f8:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 80039fa:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039fc:	d50c      	bpl.n	8003a18 <HAL_I2C_Master_Transmit+0x1a8>
 80039fe:	b15a      	cbz	r2, 8003a18 <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a00:	7843      	ldrb	r3, [r0, #1]
 8003a02:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8003a04:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8003a06:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8003a08:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 8003a0c:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8003a0e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003a10:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003a14:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8003a16:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8003a18:	1c78      	adds	r0, r7, #1
 8003a1a:	d128      	bne.n	8003a6e <HAL_I2C_Master_Transmit+0x1fe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a1c:	6963      	ldr	r3, [r4, #20]
 8003a1e:	0759      	lsls	r1, r3, #29
 8003a20:	d405      	bmi.n	8003a2e <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a22:	6963      	ldr	r3, [r4, #20]
 8003a24:	055a      	lsls	r2, r3, #21
 8003a26:	d498      	bmi.n	800395a <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a28:	6963      	ldr	r3, [r4, #20]
 8003a2a:	0759      	lsls	r1, r3, #29
 8003a2c:	d5f9      	bpl.n	8003a22 <HAL_I2C_Master_Transmit+0x1b2>
    while (hi2c->XferSize > 0U)
 8003a2e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d18a      	bne.n	800394a <HAL_I2C_Master_Transmit+0xda>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	6823      	ldr	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a36:	2000      	movs	r0, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3e:	6023      	str	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003a44:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a48:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8003a4c:	e71f      	b.n	800388e <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a4e:	6963      	ldr	r3, [r4, #20]
 8003a50:	0618      	lsls	r0, r3, #24
 8003a52:	d4c1      	bmi.n	80039d8 <HAL_I2C_Master_Transmit+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a54:	6963      	ldr	r3, [r4, #20]
 8003a56:	0558      	lsls	r0, r3, #21
 8003a58:	f53f af7f 	bmi.w	800395a <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5c:	f7ff fb50 	bl	8003100 <HAL_GetTick>
 8003a60:	1b80      	subs	r0, r0, r6
 8003a62:	4287      	cmp	r7, r0
 8003a64:	d378      	bcc.n	8003b58 <HAL_I2C_Master_Transmit+0x2e8>
 8003a66:	2f00      	cmp	r7, #0
 8003a68:	d076      	beq.n	8003b58 <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a6a:	682c      	ldr	r4, [r5, #0]
 8003a6c:	e76d      	b.n	800394a <HAL_I2C_Master_Transmit+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a6e:	6963      	ldr	r3, [r4, #20]
 8003a70:	075b      	lsls	r3, r3, #29
 8003a72:	d4dc      	bmi.n	8003a2e <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a74:	6963      	ldr	r3, [r4, #20]
 8003a76:	055b      	lsls	r3, r3, #21
 8003a78:	f53f af6f 	bmi.w	800395a <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7c:	f7ff fb40 	bl	8003100 <HAL_GetTick>
 8003a80:	1b80      	subs	r0, r0, r6
 8003a82:	4287      	cmp	r7, r0
 8003a84:	d368      	bcc.n	8003b58 <HAL_I2C_Master_Transmit+0x2e8>
 8003a86:	2f00      	cmp	r7, #0
 8003a88:	d066      	beq.n	8003b58 <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a8a:	682c      	ldr	r4, [r5, #0]
 8003a8c:	e7c4      	b.n	8003a18 <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a8e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a90:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a94:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a98:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003a9e:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003aa2:	f043 0320 	orr.w	r3, r3, #32
 8003aa6:	642b      	str	r3, [r5, #64]	; 0x40
 8003aa8:	e6f0      	b.n	800388c <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ab0:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab2:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ab8:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aba:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003abc:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003abe:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac2:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ac6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003ac8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003acc:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8003ad0:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ad2:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003ad4:	b003      	add	sp, #12
 8003ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ada:	6963      	ldr	r3, [r4, #20]
 8003adc:	079b      	lsls	r3, r3, #30
 8003ade:	f53f af2a 	bmi.w	8003936 <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae2:	6963      	ldr	r3, [r4, #20]
 8003ae4:	055b      	lsls	r3, r3, #21
 8003ae6:	d4e0      	bmi.n	8003aaa <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7ff fb0a 	bl	8003100 <HAL_GetTick>
 8003aec:	1b80      	subs	r0, r0, r6
 8003aee:	4287      	cmp	r7, r0
 8003af0:	d340      	bcc.n	8003b74 <HAL_I2C_Master_Transmit+0x304>
 8003af2:	2f00      	cmp	r7, #0
 8003af4:	d03e      	beq.n	8003b74 <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003af6:	682c      	ldr	r4, [r5, #0]
 8003af8:	e713      	b.n	8003922 <HAL_I2C_Master_Transmit+0xb2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003afa:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003afc:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003afe:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b00:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b04:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b0a:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 8003b0c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b10:	f042 0220 	orr.w	r2, r2, #32
 8003b14:	642a      	str	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b16:	680b      	ldr	r3, [r1, #0]
 8003b18:	05da      	lsls	r2, r3, #23
 8003b1a:	f57f af32 	bpl.w	8003982 <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b22:	642b      	str	r3, [r5, #64]	; 0x40
 8003b24:	e72d      	b.n	8003982 <HAL_I2C_Master_Transmit+0x112>
 8003b26:	bf00      	nop
 8003b28:	ffff0000 	.word	0xffff0000
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b2c:	6963      	ldr	r3, [r4, #20]
 8003b2e:	071a      	lsls	r2, r3, #28
 8003b30:	f53f af4e 	bmi.w	80039d0 <HAL_I2C_Master_Transmit+0x160>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b34:	6963      	ldr	r3, [r4, #20]
 8003b36:	055a      	lsls	r2, r3, #21
 8003b38:	d4b7      	bmi.n	8003aaa <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7ff fae1 	bl	8003100 <HAL_GetTick>
 8003b3e:	1b80      	subs	r0, r0, r6
 8003b40:	4287      	cmp	r7, r0
 8003b42:	d317      	bcc.n	8003b74 <HAL_I2C_Master_Transmit+0x304>
 8003b44:	b1b7      	cbz	r7, 8003b74 <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b46:	682c      	ldr	r4, [r5, #0]
 8003b48:	e739      	b.n	80039be <HAL_I2C_Master_Transmit+0x14e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4a:	682a      	ldr	r2, [r5, #0]
 8003b4c:	6813      	ldr	r3, [r2, #0]
 8003b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        return HAL_ERROR;
 8003b52:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e69a      	b.n	800388e <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b58:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b5a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b5c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b5e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b62:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b66:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b68:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b6c:	f043 0320 	orr.w	r3, r3, #32
 8003b70:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003b72:	e702      	b.n	800397a <HAL_I2C_Master_Transmit+0x10a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b74:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b76:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b78:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b7a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b82:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b84:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b88:	f043 0320 	orr.w	r3, r3, #32
 8003b8c:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003b8e:	2001      	movs	r0, #1
 8003b90:	e67d      	b.n	800388e <HAL_I2C_Master_Transmit+0x1e>
 8003b92:	bf00      	nop

08003b94 <HAL_I2C_Master_Receive>:
{
 8003b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b98:	4605      	mov	r5, r0
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	4699      	mov	r9, r3
 8003b9e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8003ba0:	4688      	mov	r8, r1
 8003ba2:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7ff faac 	bl	8003100 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba8:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d003      	beq.n	8003bb8 <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 8003bb0:	2002      	movs	r0, #2
}
 8003bb2:	b007      	add	sp, #28
 8003bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb8:	4607      	mov	r7, r0
 8003bba:	e005      	b.n	8003bc8 <HAL_I2C_Master_Receive+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbc:	f7ff faa0 	bl	8003100 <HAL_GetTick>
 8003bc0:	1bc0      	subs	r0, r0, r7
 8003bc2:	2819      	cmp	r0, #25
 8003bc4:	f200 80a7 	bhi.w	8003d16 <HAL_I2C_Master_Receive+0x182>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc8:	682c      	ldr	r4, [r5, #0]
 8003bca:	69a0      	ldr	r0, [r4, #24]
 8003bcc:	43c0      	mvns	r0, r0
 8003bce:	f010 0b02 	ands.w	fp, r0, #2
 8003bd2:	d0f3      	beq.n	8003bbc <HAL_I2C_Master_Receive+0x28>
    __HAL_LOCK(hi2c);
 8003bd4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d0e9      	beq.n	8003bb0 <HAL_I2C_Master_Receive+0x1c>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	07db      	lsls	r3, r3, #31
 8003be6:	d560      	bpl.n	8003caa <HAL_I2C_Master_Receive+0x116>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be8:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bea:	4a8d      	ldr	r2, [pc, #564]	; (8003e20 <HAL_I2C_Master_Receive+0x28c>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf0:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003bf2:	2322      	movs	r3, #34	; 0x22
 8003bf4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003c02:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c06:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c08:	62ea      	str	r2, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c0a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003c0c:	852b      	strh	r3, [r5, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0e:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr    = pData;
 8003c10:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c18:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c1a:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c1c:	d007      	beq.n	8003c2e <HAL_I2C_Master_Receive+0x9a>
 8003c1e:	2a01      	cmp	r2, #1
 8003c20:	d005      	beq.n	8003c2e <HAL_I2C_Master_Receive+0x9a>
 8003c22:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003c26:	d002      	beq.n	8003c2e <HAL_I2C_Master_Receive+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003c28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003c2a:	2b11      	cmp	r3, #17
 8003c2c:	d103      	bne.n	8003c36 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	1c70      	adds	r0, r6, #1
 8003c38:	d129      	bne.n	8003c8e <HAL_I2C_Master_Receive+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c3a:	6963      	ldr	r3, [r4, #20]
 8003c3c:	07d9      	lsls	r1, r3, #31
 8003c3e:	d5fc      	bpl.n	8003c3a <HAL_I2C_Master_Receive+0xa6>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c40:	692b      	ldr	r3, [r5, #16]
 8003c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c46:	d135      	bne.n	8003cb4 <HAL_I2C_Master_Receive+0x120>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c48:	f048 0301 	orr.w	r3, r8, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	6123      	str	r3, [r4, #16]
 8003c50:	1c72      	adds	r2, r6, #1
 8003c52:	d003      	beq.n	8003c5c <HAL_I2C_Master_Receive+0xc8>
 8003c54:	e107      	b.n	8003e66 <HAL_I2C_Master_Receive+0x2d2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c56:	6963      	ldr	r3, [r4, #20]
 8003c58:	0558      	lsls	r0, r3, #21
 8003c5a:	d46a      	bmi.n	8003d32 <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c5c:	6963      	ldr	r3, [r4, #20]
 8003c5e:	079b      	lsls	r3, r3, #30
 8003c60:	d5f9      	bpl.n	8003c56 <HAL_I2C_Master_Receive+0xc2>
    if (hi2c->XferSize == 0U)
 8003c62:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d17c      	bne.n	8003d62 <HAL_I2C_Master_Receive+0x1ce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	6963      	ldr	r3, [r4, #20]
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	69a3      	ldr	r3, [r4, #24]
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c7a:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	2320      	movs	r3, #32
 8003c80:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003c84:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c88:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8003c8c:	e791      	b.n	8003bb2 <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c8e:	6963      	ldr	r3, [r4, #20]
 8003c90:	07da      	lsls	r2, r3, #31
 8003c92:	d4d5      	bmi.n	8003c40 <HAL_I2C_Master_Receive+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c94:	f7ff fa34 	bl	8003100 <HAL_GetTick>
 8003c98:	1bc0      	subs	r0, r0, r7
 8003c9a:	4286      	cmp	r6, r0
 8003c9c:	f0c0 810c 	bcc.w	8003eb8 <HAL_I2C_Master_Receive+0x324>
 8003ca0:	2e00      	cmp	r6, #0
 8003ca2:	f000 8109 	beq.w	8003eb8 <HAL_I2C_Master_Receive+0x324>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca6:	682c      	ldr	r4, [r5, #0]
 8003ca8:	e7c5      	b.n	8003c36 <HAL_I2C_Master_Receive+0xa2>
      __HAL_I2C_ENABLE(hi2c);
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	e799      	b.n	8003be8 <HAL_I2C_Master_Receive+0x54>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cb4:	ea4f 19e8 	mov.w	r9, r8, asr #7
 8003cb8:	f009 0906 	and.w	r9, r9, #6
 8003cbc:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 8003cc0:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003cc2:	1c70      	adds	r0, r6, #1
 8003cc4:	d003      	beq.n	8003cce <HAL_I2C_Master_Receive+0x13a>
 8003cc6:	e11d      	b.n	8003f04 <HAL_I2C_Master_Receive+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cc8:	6963      	ldr	r3, [r4, #20]
 8003cca:	055a      	lsls	r2, r3, #21
 8003ccc:	d431      	bmi.n	8003d32 <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cce:	6963      	ldr	r3, [r4, #20]
 8003cd0:	0719      	lsls	r1, r3, #28
 8003cd2:	d5f9      	bpl.n	8003cc8 <HAL_I2C_Master_Receive+0x134>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cd4:	fa5f f388 	uxtb.w	r3, r8
 8003cd8:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003cda:	1c71      	adds	r1, r6, #1
 8003cdc:	d003      	beq.n	8003ce6 <HAL_I2C_Master_Receive+0x152>
 8003cde:	e1a6      	b.n	800402e <HAL_I2C_Master_Receive+0x49a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce0:	6963      	ldr	r3, [r4, #20]
 8003ce2:	055b      	lsls	r3, r3, #21
 8003ce4:	d425      	bmi.n	8003d32 <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ce6:	6963      	ldr	r3, [r4, #20]
 8003ce8:	079a      	lsls	r2, r3, #30
 8003cea:	d5f9      	bpl.n	8003ce0 <HAL_I2C_Master_Receive+0x14c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cec:	2300      	movs	r3, #0
 8003cee:	9305      	str	r3, [sp, #20]
 8003cf0:	6963      	ldr	r3, [r4, #20]
 8003cf2:	9305      	str	r3, [sp, #20]
 8003cf4:	69a3      	ldr	r3, [r4, #24]
 8003cf6:	9305      	str	r3, [sp, #20]
 8003cf8:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d00:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003d02:	1c72      	adds	r2, r6, #1
 8003d04:	f040 81a6 	bne.w	8004054 <HAL_I2C_Master_Receive+0x4c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d08:	6963      	ldr	r3, [r4, #20]
 8003d0a:	07db      	lsls	r3, r3, #31
 8003d0c:	d5fc      	bpl.n	8003d08 <HAL_I2C_Master_Receive+0x174>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003d0e:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 8003d12:	6123      	str	r3, [r4, #16]
 8003d14:	e79c      	b.n	8003c50 <HAL_I2C_Master_Receive+0xbc>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d16:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d18:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d1c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d20:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d24:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d26:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d2a:	f043 0320 	orr.w	r3, r3, #32
 8003d2e:	642b      	str	r3, [r5, #64]	; 0x40
 8003d30:	e73e      	b.n	8003bb0 <HAL_I2C_Master_Receive+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d38:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d40:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d42:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d44:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d46:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d4e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003d50:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d54:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8003d58:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d5a:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003d5c:	b007      	add	sp, #28
 8003d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 8003d62:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d64:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 8003d66:	f000 8153 	beq.w	8004010 <HAL_I2C_Master_Receive+0x47c>
    else if (hi2c->XferSize == 2U)
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	f000 810b 	beq.w	8003f86 <HAL_I2C_Master_Receive+0x3f2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d74:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2200      	movs	r2, #0
 8003d78:	9204      	str	r2, [sp, #16]
 8003d7a:	6962      	ldr	r2, [r4, #20]
 8003d7c:	9204      	str	r2, [sp, #16]
 8003d7e:	69a2      	ldr	r2, [r4, #24]
 8003d80:	9204      	str	r2, [sp, #16]
 8003d82:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d848      	bhi.n	8003e1a <HAL_I2C_Master_Receive+0x286>
        if (hi2c->XferSize == 1U)
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f000 8128 	beq.w	8003fde <HAL_I2C_Master_Receive+0x44a>
        else if (hi2c->XferSize == 2U)
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	f000 80d4 	beq.w	8003f3c <HAL_I2C_Master_Receive+0x3a8>
 8003d94:	1c72      	adds	r2, r6, #1
 8003d96:	f040 8105 	bne.w	8003fa4 <HAL_I2C_Master_Receive+0x410>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d9a:	6963      	ldr	r3, [r4, #20]
 8003d9c:	075b      	lsls	r3, r3, #29
 8003d9e:	d5fc      	bpl.n	8003d9a <HAL_I2C_Master_Receive+0x206>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da0:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003da8:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003daa:	6923      	ldr	r3, [r4, #16]
 8003dac:	7013      	strb	r3, [r2, #0]
          hi2c->XferCount--;
 8003dae:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003db0:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003db2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003db4:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8003db6:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003db8:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003dba:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003dbc:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003dbe:	852a      	strh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003dc0:	856b      	strh	r3, [r5, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003dc2:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc4:	682a      	ldr	r2, [r5, #0]
 8003dc6:	f040 80fc 	bne.w	8003fc2 <HAL_I2C_Master_Receive+0x42e>
 8003dca:	6953      	ldr	r3, [r2, #20]
 8003dcc:	075b      	lsls	r3, r3, #29
 8003dce:	d5fc      	bpl.n	8003dca <HAL_I2C_Master_Receive+0x236>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd0:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd2:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dda:	6913      	ldr	r3, [r2, #16]
 8003ddc:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003dde:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003de0:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003de2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de4:	6828      	ldr	r0, [r5, #0]
          hi2c->XferCount--;
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dec:	6900      	ldr	r0, [r0, #16]
          hi2c->XferSize--;
 8003dee:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8003df0:	1c4c      	adds	r4, r1, #1
 8003df2:	626c      	str	r4, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003df4:	852b      	strh	r3, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df6:	7048      	strb	r0, [r1, #1]
          hi2c->XferSize--;
 8003df8:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003dfa:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003dfc:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003dfe:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8003e00:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8003e02:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003e04:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8003e06:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8003e08:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003e0a:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003e0c:	856a      	strh	r2, [r5, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f43f af34 	beq.w	8003c7c <HAL_I2C_Master_Receive+0xe8>
      if (hi2c->XferSize <= 3U)
 8003e14:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e16:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 8003e18:	d9b6      	bls.n	8003d88 <HAL_I2C_Master_Receive+0x1f4>
 8003e1a:	b966      	cbnz	r6, 8003e36 <HAL_I2C_Master_Receive+0x2a2>
 8003e1c:	e033      	b.n	8003e86 <HAL_I2C_Master_Receive+0x2f2>
 8003e1e:	bf00      	nop
 8003e20:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e24:	6963      	ldr	r3, [r4, #20]
 8003e26:	06db      	lsls	r3, r3, #27
 8003e28:	d45c      	bmi.n	8003ee4 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7ff f969 	bl	8003100 <HAL_GetTick>
 8003e2e:	1bc0      	subs	r0, r0, r7
 8003e30:	4286      	cmp	r6, r0
 8003e32:	d330      	bcc.n	8003e96 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e34:	682c      	ldr	r4, [r5, #0]
 8003e36:	6963      	ldr	r3, [r4, #20]
 8003e38:	065a      	lsls	r2, r3, #25
 8003e3a:	d5f3      	bpl.n	8003e24 <HAL_I2C_Master_Receive+0x290>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e3e:	6922      	ldr	r2, [r4, #16]
 8003e40:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8003e42:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e44:	6828      	ldr	r0, [r5, #0]
        hi2c->XferSize--;
 8003e46:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003e48:	6a69      	ldr	r1, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8003e4a:	3a01      	subs	r2, #1
 8003e4c:	b292      	uxth	r2, r2
 8003e4e:	856a      	strh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e50:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 8003e52:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8003e54:	1c4c      	adds	r4, r1, #1
        hi2c->XferSize--;
 8003e56:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e58:	0752      	lsls	r2, r2, #29
        hi2c->pBuffPtr++;
 8003e5a:	626c      	str	r4, [r5, #36]	; 0x24
        hi2c->XferSize--;
 8003e5c:	852b      	strh	r3, [r5, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e5e:	d5d6      	bpl.n	8003e0e <HAL_I2C_Master_Receive+0x27a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e60:	6903      	ldr	r3, [r0, #16]
 8003e62:	704b      	strb	r3, [r1, #1]
 8003e64:	e083      	b.n	8003f6e <HAL_I2C_Master_Receive+0x3da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e66:	6963      	ldr	r3, [r4, #20]
 8003e68:	0799      	lsls	r1, r3, #30
 8003e6a:	f53f aefa 	bmi.w	8003c62 <HAL_I2C_Master_Receive+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e6e:	6963      	ldr	r3, [r4, #20]
 8003e70:	0559      	lsls	r1, r3, #21
 8003e72:	f53f af5e 	bmi.w	8003d32 <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7ff f943 	bl	8003100 <HAL_GetTick>
 8003e7a:	1bc0      	subs	r0, r0, r7
 8003e7c:	4286      	cmp	r6, r0
 8003e7e:	d30a      	bcc.n	8003e96 <HAL_I2C_Master_Receive+0x302>
 8003e80:	b14e      	cbz	r6, 8003e96 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e82:	682c      	ldr	r4, [r5, #0]
 8003e84:	e6e4      	b.n	8003c50 <HAL_I2C_Master_Receive+0xbc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e86:	6963      	ldr	r3, [r4, #20]
 8003e88:	0659      	lsls	r1, r3, #25
 8003e8a:	d4d7      	bmi.n	8003e3c <HAL_I2C_Master_Receive+0x2a8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e8c:	6963      	ldr	r3, [r4, #20]
 8003e8e:	06d8      	lsls	r0, r3, #27
 8003e90:	d428      	bmi.n	8003ee4 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7ff f935 	bl	8003100 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e96:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e98:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e9a:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e9c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ea0:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ea4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003ea6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 8003eae:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003eb2:	b007      	add	sp, #28
 8003eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003eb8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eba:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ebc:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ebe:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ec2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ec6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ec8:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 8003eca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ece:	f042 0220 	orr.w	r2, r2, #32
 8003ed2:	642a      	str	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed4:	680b      	ldr	r3, [r1, #0]
 8003ed6:	05d9      	lsls	r1, r3, #23
 8003ed8:	d512      	bpl.n	8003f00 <HAL_I2C_Master_Receive+0x36c>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ede:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	e666      	b.n	8003bb2 <HAL_I2C_Master_Receive+0x1e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee4:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ee6:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee8:	f06f 0110 	mvn.w	r1, #16
 8003eec:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eee:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ef8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003efa:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003efc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8003f00:	2001      	movs	r0, #1
 8003f02:	e656      	b.n	8003bb2 <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f04:	6963      	ldr	r3, [r4, #20]
 8003f06:	071b      	lsls	r3, r3, #28
 8003f08:	f53f aee4 	bmi.w	8003cd4 <HAL_I2C_Master_Receive+0x140>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f0c:	6963      	ldr	r3, [r4, #20]
 8003f0e:	055b      	lsls	r3, r3, #21
 8003f10:	f53f af0f 	bmi.w	8003d32 <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f14:	f7ff f8f4 	bl	8003100 <HAL_GetTick>
 8003f18:	1bc0      	subs	r0, r0, r7
 8003f1a:	4286      	cmp	r6, r0
 8003f1c:	d3bb      	bcc.n	8003e96 <HAL_I2C_Master_Receive+0x302>
 8003f1e:	2e00      	cmp	r6, #0
 8003f20:	d0b9      	beq.n	8003e96 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f22:	682c      	ldr	r4, [r5, #0]
 8003f24:	e6cd      	b.n	8003cc2 <HAL_I2C_Master_Receive+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f26:	6963      	ldr	r3, [r4, #20]
 8003f28:	0759      	lsls	r1, r3, #29
 8003f2a:	d40c      	bmi.n	8003f46 <HAL_I2C_Master_Receive+0x3b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2c:	f7ff f8e8 	bl	8003100 <HAL_GetTick>
 8003f30:	1bc0      	subs	r0, r0, r7
 8003f32:	4286      	cmp	r6, r0
 8003f34:	d3af      	bcc.n	8003e96 <HAL_I2C_Master_Receive+0x302>
 8003f36:	2e00      	cmp	r6, #0
 8003f38:	d0ad      	beq.n	8003e96 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f3a:	682c      	ldr	r4, [r5, #0]
 8003f3c:	1c73      	adds	r3, r6, #1
 8003f3e:	d1f2      	bne.n	8003f26 <HAL_I2C_Master_Receive+0x392>
 8003f40:	6963      	ldr	r3, [r4, #20]
 8003f42:	0758      	lsls	r0, r3, #29
 8003f44:	d5fc      	bpl.n	8003f40 <HAL_I2C_Master_Receive+0x3ac>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f4c:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f50:	6922      	ldr	r2, [r4, #16]
 8003f52:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003f54:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003f56:	1c53      	adds	r3, r2, #1
 8003f58:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003f5a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003f60:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8003f6e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003f70:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003f72:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003f74:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8003f76:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8003f78:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003f7a:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8003f7c:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8003f7e:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferCount--;
 8003f80:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 8003f82:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003f84:	e743      	b.n	8003e0e <HAL_I2C_Master_Receive+0x27a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8a:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f92:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f94:	2200      	movs	r2, #0
 8003f96:	9203      	str	r2, [sp, #12]
 8003f98:	6962      	ldr	r2, [r4, #20]
 8003f9a:	9203      	str	r2, [sp, #12]
 8003f9c:	69a2      	ldr	r2, [r4, #24]
 8003f9e:	9203      	str	r2, [sp, #12]
 8003fa0:	9a03      	ldr	r2, [sp, #12]
 8003fa2:	e6ef      	b.n	8003d84 <HAL_I2C_Master_Receive+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fa4:	6963      	ldr	r3, [r4, #20]
 8003fa6:	0758      	lsls	r0, r3, #29
 8003fa8:	f53f aefa 	bmi.w	8003da0 <HAL_I2C_Master_Receive+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fac:	f7ff f8a8 	bl	8003100 <HAL_GetTick>
 8003fb0:	1bc0      	subs	r0, r0, r7
 8003fb2:	4286      	cmp	r6, r0
 8003fb4:	f4ff af6f 	bcc.w	8003e96 <HAL_I2C_Master_Receive+0x302>
 8003fb8:	2e00      	cmp	r6, #0
 8003fba:	f43f af6c 	beq.w	8003e96 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fbe:	682c      	ldr	r4, [r5, #0]
 8003fc0:	e6e8      	b.n	8003d94 <HAL_I2C_Master_Receive+0x200>
 8003fc2:	6953      	ldr	r3, [r2, #20]
 8003fc4:	075c      	lsls	r4, r3, #29
 8003fc6:	f53f af03 	bmi.w	8003dd0 <HAL_I2C_Master_Receive+0x23c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7ff f899 	bl	8003100 <HAL_GetTick>
 8003fce:	1bc0      	subs	r0, r0, r7
 8003fd0:	4286      	cmp	r6, r0
 8003fd2:	f4ff af60 	bcc.w	8003e96 <HAL_I2C_Master_Receive+0x302>
 8003fd6:	2e00      	cmp	r6, #0
 8003fd8:	f47f aef3 	bne.w	8003dc2 <HAL_I2C_Master_Receive+0x22e>
 8003fdc:	e75b      	b.n	8003e96 <HAL_I2C_Master_Receive+0x302>
 8003fde:	b95e      	cbnz	r6, 8003ff8 <HAL_I2C_Master_Receive+0x464>
 8003fe0:	e011      	b.n	8004006 <HAL_I2C_Master_Receive+0x472>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fe2:	6963      	ldr	r3, [r4, #20]
 8003fe4:	06d9      	lsls	r1, r3, #27
 8003fe6:	f53f af7d 	bmi.w	8003ee4 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7ff f889 	bl	8003100 <HAL_GetTick>
 8003fee:	1bc0      	subs	r0, r0, r7
 8003ff0:	4286      	cmp	r6, r0
 8003ff2:	f4ff af50 	bcc.w	8003e96 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ff6:	682c      	ldr	r4, [r5, #0]
 8003ff8:	6963      	ldr	r3, [r4, #20]
 8003ffa:	0658      	lsls	r0, r3, #25
 8003ffc:	d5f1      	bpl.n	8003fe2 <HAL_I2C_Master_Receive+0x44e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004000:	6922      	ldr	r2, [r4, #16]
 8004002:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004004:	e7b3      	b.n	8003f6e <HAL_I2C_Master_Receive+0x3da>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004006:	6963      	ldr	r3, [r4, #20]
 8004008:	065a      	lsls	r2, r3, #25
 800400a:	f57f af3f 	bpl.w	8003e8c <HAL_I2C_Master_Receive+0x2f8>
 800400e:	e7f6      	b.n	8003ffe <HAL_I2C_Master_Receive+0x46a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004014:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004016:	2200      	movs	r2, #0
 8004018:	9202      	str	r2, [sp, #8]
 800401a:	6962      	ldr	r2, [r4, #20]
 800401c:	9202      	str	r2, [sp, #8]
 800401e:	69a2      	ldr	r2, [r4, #24]
 8004020:	9202      	str	r2, [sp, #8]
 8004022:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402a:	6022      	str	r2, [r4, #0]
 800402c:	e6aa      	b.n	8003d84 <HAL_I2C_Master_Receive+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800402e:	6963      	ldr	r3, [r4, #20]
 8004030:	0798      	lsls	r0, r3, #30
 8004032:	f53f ae5b 	bmi.w	8003cec <HAL_I2C_Master_Receive+0x158>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004036:	6963      	ldr	r3, [r4, #20]
 8004038:	0558      	lsls	r0, r3, #21
 800403a:	f53f ae7a 	bmi.w	8003d32 <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403e:	f7ff f85f 	bl	8003100 <HAL_GetTick>
 8004042:	1bc0      	subs	r0, r0, r7
 8004044:	4286      	cmp	r6, r0
 8004046:	f4ff af26 	bcc.w	8003e96 <HAL_I2C_Master_Receive+0x302>
 800404a:	2e00      	cmp	r6, #0
 800404c:	f43f af23 	beq.w	8003e96 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004050:	682c      	ldr	r4, [r5, #0]
 8004052:	e642      	b.n	8003cda <HAL_I2C_Master_Receive+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004054:	6963      	ldr	r3, [r4, #20]
 8004056:	07d8      	lsls	r0, r3, #31
 8004058:	f53f ae59 	bmi.w	8003d0e <HAL_I2C_Master_Receive+0x17a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405c:	f7ff f850 	bl	8003100 <HAL_GetTick>
 8004060:	1bc0      	subs	r0, r0, r7
 8004062:	4286      	cmp	r6, r0
 8004064:	f4ff af28 	bcc.w	8003eb8 <HAL_I2C_Master_Receive+0x324>
 8004068:	2e00      	cmp	r6, #0
 800406a:	f43f af25 	beq.w	8003eb8 <HAL_I2C_Master_Receive+0x324>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800406e:	682c      	ldr	r4, [r5, #0]
 8004070:	e647      	b.n	8003d02 <HAL_I2C_Master_Receive+0x16e>
 8004072:	bf00      	nop

08004074 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004074:	2800      	cmp	r0, #0
 8004076:	f000 81a2 	beq.w	80043be <HAL_RCC_OscConfig+0x34a>
{
 800407a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	6803      	ldr	r3, [r0, #0]
 8004080:	07dd      	lsls	r5, r3, #31
{
 8004082:	b082      	sub	sp, #8
 8004084:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004086:	d52f      	bpl.n	80040e8 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004088:	499e      	ldr	r1, [pc, #632]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 800408a:	688a      	ldr	r2, [r1, #8]
 800408c:	f002 020c 	and.w	r2, r2, #12
 8004090:	2a04      	cmp	r2, #4
 8004092:	f000 80ed 	beq.w	8004270 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004096:	688a      	ldr	r2, [r1, #8]
 8004098:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409c:	2a08      	cmp	r2, #8
 800409e:	f000 80e3 	beq.w	8004268 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a2:	6863      	ldr	r3, [r4, #4]
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a8:	f000 80ec 	beq.w	8004284 <HAL_RCC_OscConfig+0x210>
 80040ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b0:	f000 8175 	beq.w	800439e <HAL_RCC_OscConfig+0x32a>
 80040b4:	4d93      	ldr	r5, [pc, #588]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 80040b6:	682a      	ldr	r2, [r5, #0]
 80040b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040bc:	602a      	str	r2, [r5, #0]
 80040be:	682a      	ldr	r2, [r5, #0]
 80040c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040c4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f040 80e1 	bne.w	800428e <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7ff f818 	bl	8003100 <HAL_GetTick>
 80040d0:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	e005      	b.n	80040e0 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d4:	f7ff f814 	bl	8003100 <HAL_GetTick>
 80040d8:	1b80      	subs	r0, r0, r6
 80040da:	2864      	cmp	r0, #100	; 0x64
 80040dc:	f200 8101 	bhi.w	80042e2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	039b      	lsls	r3, r3, #14
 80040e4:	d4f6      	bmi.n	80040d4 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	079f      	lsls	r7, r3, #30
 80040ea:	d528      	bpl.n	800413e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ec:	4a85      	ldr	r2, [pc, #532]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 80040ee:	6891      	ldr	r1, [r2, #8]
 80040f0:	f011 0f0c 	tst.w	r1, #12
 80040f4:	f000 8090 	beq.w	8004218 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f8:	6891      	ldr	r1, [r2, #8]
 80040fa:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040fe:	2908      	cmp	r1, #8
 8004100:	f000 8086 	beq.w	8004210 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004104:	68e3      	ldr	r3, [r4, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 810e 	beq.w	8004328 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800410c:	4b7e      	ldr	r3, [pc, #504]	; (8004308 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410e:	4e7d      	ldr	r6, [pc, #500]	; (8004304 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8004110:	2201      	movs	r2, #1
 8004112:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004114:	f7fe fff4 	bl	8003100 <HAL_GetTick>
 8004118:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411a:	e005      	b.n	8004128 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411c:	f7fe fff0 	bl	8003100 <HAL_GetTick>
 8004120:	1b40      	subs	r0, r0, r5
 8004122:	2802      	cmp	r0, #2
 8004124:	f200 80dd 	bhi.w	80042e2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004128:	6833      	ldr	r3, [r6, #0]
 800412a:	0798      	lsls	r0, r3, #30
 800412c:	d5f6      	bpl.n	800411c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412e:	6833      	ldr	r3, [r6, #0]
 8004130:	6922      	ldr	r2, [r4, #16]
 8004132:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004136:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800413a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	071a      	lsls	r2, r3, #28
 8004140:	d451      	bmi.n	80041e6 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004142:	0758      	lsls	r0, r3, #29
 8004144:	d52f      	bpl.n	80041a6 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004146:	4a6f      	ldr	r2, [pc, #444]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 8004148:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800414a:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800414e:	d07f      	beq.n	8004250 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8004150:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004152:	4e6e      	ldr	r6, [pc, #440]	; (800430c <HAL_RCC_OscConfig+0x298>)
 8004154:	6833      	ldr	r3, [r6, #0]
 8004156:	05d9      	lsls	r1, r3, #23
 8004158:	f140 80b3 	bpl.w	80042c2 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	68a3      	ldr	r3, [r4, #8]
 800415e:	2b01      	cmp	r3, #1
 8004160:	f000 80c3 	beq.w	80042ea <HAL_RCC_OscConfig+0x276>
 8004164:	2b05      	cmp	r3, #5
 8004166:	f000 812c 	beq.w	80043c2 <HAL_RCC_OscConfig+0x34e>
 800416a:	4e66      	ldr	r6, [pc, #408]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 800416c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	6732      	str	r2, [r6, #112]	; 0x70
 8004174:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004176:	f022 0204 	bic.w	r2, r2, #4
 800417a:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 80b9 	bne.w	80042f4 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004182:	f7fe ffbd 	bl	8003100 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800418a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418c:	e005      	b.n	800419a <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fe ffb7 	bl	8003100 <HAL_GetTick>
 8004192:	1bc0      	subs	r0, r0, r7
 8004194:	4540      	cmp	r0, r8
 8004196:	f200 80a4 	bhi.w	80042e2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800419c:	0798      	lsls	r0, r3, #30
 800419e:	d4f6      	bmi.n	800418e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041a0:	2d00      	cmp	r5, #0
 80041a2:	f040 8106 	bne.w	80043b2 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041a6:	69a0      	ldr	r0, [r4, #24]
 80041a8:	b1c8      	cbz	r0, 80041de <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041aa:	4d56      	ldr	r5, [pc, #344]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 80041ac:	68ab      	ldr	r3, [r5, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	f000 80c9 	beq.w	800434a <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b8:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_OscConfig+0x294>)
 80041ba:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041bc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80041be:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c0:	f000 8109 	beq.w	80043d6 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fe ff9c 	bl	8003100 <HAL_GetTick>
 80041c8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	e005      	b.n	80041d8 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fe ff98 	bl	8003100 <HAL_GetTick>
 80041d0:	1b00      	subs	r0, r0, r4
 80041d2:	2802      	cmp	r0, #2
 80041d4:	f200 8085 	bhi.w	80042e2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	019b      	lsls	r3, r3, #6
 80041dc:	d4f6      	bmi.n	80041cc <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80041de:	2000      	movs	r0, #0
}
 80041e0:	b002      	add	sp, #8
 80041e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041e6:	6963      	ldr	r3, [r4, #20]
 80041e8:	b30b      	cbz	r3, 800422e <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ec:	4e45      	ldr	r6, [pc, #276]	; (8004304 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80041ee:	2201      	movs	r2, #1
 80041f0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80041f4:	f7fe ff84 	bl	8003100 <HAL_GetTick>
 80041f8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fa:	e004      	b.n	8004206 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fc:	f7fe ff80 	bl	8003100 <HAL_GetTick>
 8004200:	1b40      	subs	r0, r0, r5
 8004202:	2802      	cmp	r0, #2
 8004204:	d86d      	bhi.n	80042e2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004206:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004208:	079b      	lsls	r3, r3, #30
 800420a:	d5f7      	bpl.n	80041fc <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	e798      	b.n	8004142 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004210:	6852      	ldr	r2, [r2, #4]
 8004212:	0256      	lsls	r6, r2, #9
 8004214:	f53f af76 	bmi.w	8004104 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004218:	4a3a      	ldr	r2, [pc, #232]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	0795      	lsls	r5, r2, #30
 800421e:	d544      	bpl.n	80042aa <HAL_RCC_OscConfig+0x236>
 8004220:	68e2      	ldr	r2, [r4, #12]
 8004222:	2a01      	cmp	r2, #1
 8004224:	d041      	beq.n	80042aa <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8004226:	2001      	movs	r0, #1
}
 8004228:	b002      	add	sp, #8
 800422a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800422e:	4a36      	ldr	r2, [pc, #216]	; (8004308 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004230:	4e34      	ldr	r6, [pc, #208]	; (8004304 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8004232:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004236:	f7fe ff63 	bl	8003100 <HAL_GetTick>
 800423a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423c:	e004      	b.n	8004248 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800423e:	f7fe ff5f 	bl	8003100 <HAL_GetTick>
 8004242:	1b40      	subs	r0, r0, r5
 8004244:	2802      	cmp	r0, #2
 8004246:	d84c      	bhi.n	80042e2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004248:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800424a:	079f      	lsls	r7, r3, #30
 800424c:	d4f7      	bmi.n	800423e <HAL_RCC_OscConfig+0x1ca>
 800424e:	e7dd      	b.n	800420c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
 800425a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004264:	2501      	movs	r5, #1
 8004266:	e774      	b.n	8004152 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004268:	684a      	ldr	r2, [r1, #4]
 800426a:	0250      	lsls	r0, r2, #9
 800426c:	f57f af19 	bpl.w	80040a2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004270:	4a24      	ldr	r2, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	0391      	lsls	r1, r2, #14
 8004276:	f57f af37 	bpl.w	80040e8 <HAL_RCC_OscConfig+0x74>
 800427a:	6862      	ldr	r2, [r4, #4]
 800427c:	2a00      	cmp	r2, #0
 800427e:	f47f af33 	bne.w	80040e8 <HAL_RCC_OscConfig+0x74>
 8004282:	e7d0      	b.n	8004226 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004284:	4a1f      	ldr	r2, [pc, #124]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800428e:	f7fe ff37 	bl	8003100 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4e1c      	ldr	r6, [pc, #112]	; (8004304 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8004294:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	e004      	b.n	80042a2 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7fe ff32 	bl	8003100 <HAL_GetTick>
 800429c:	1b40      	subs	r0, r0, r5
 800429e:	2864      	cmp	r0, #100	; 0x64
 80042a0:	d81f      	bhi.n	80042e2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	6833      	ldr	r3, [r6, #0]
 80042a4:	039a      	lsls	r2, r3, #14
 80042a6:	d5f7      	bpl.n	8004298 <HAL_RCC_OscConfig+0x224>
 80042a8:	e71d      	b.n	80040e6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042aa:	4916      	ldr	r1, [pc, #88]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 80042ac:	6920      	ldr	r0, [r4, #16]
 80042ae:	680a      	ldr	r2, [r1, #0]
 80042b0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80042b4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80042b8:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ba:	071a      	lsls	r2, r3, #28
 80042bc:	f57f af41 	bpl.w	8004142 <HAL_RCC_OscConfig+0xce>
 80042c0:	e791      	b.n	80041e6 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c2:	6833      	ldr	r3, [r6, #0]
 80042c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80042ca:	f7fe ff19 	bl	8003100 <HAL_GetTick>
 80042ce:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d0:	6833      	ldr	r3, [r6, #0]
 80042d2:	05da      	lsls	r2, r3, #23
 80042d4:	f53f af42 	bmi.w	800415c <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d8:	f7fe ff12 	bl	8003100 <HAL_GetTick>
 80042dc:	1bc0      	subs	r0, r0, r7
 80042de:	2802      	cmp	r0, #2
 80042e0:	d9f6      	bls.n	80042d0 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80042e2:	2003      	movs	r0, #3
}
 80042e4:	b002      	add	sp, #8
 80042e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ea:	4a06      	ldr	r2, [pc, #24]	; (8004304 <HAL_RCC_OscConfig+0x290>)
 80042ec:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80042f4:	f7fe ff04 	bl	8003100 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	4f02      	ldr	r7, [pc, #8]	; (8004304 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80042fa:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004300:	e00b      	b.n	800431a <HAL_RCC_OscConfig+0x2a6>
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	42470000 	.word	0x42470000
 800430c:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fe fef6 	bl	8003100 <HAL_GetTick>
 8004314:	1b80      	subs	r0, r0, r6
 8004316:	4540      	cmp	r0, r8
 8004318:	d8e3      	bhi.n	80042e2 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800431c:	079b      	lsls	r3, r3, #30
 800431e:	d5f7      	bpl.n	8004310 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8004320:	2d00      	cmp	r5, #0
 8004322:	f43f af40 	beq.w	80041a6 <HAL_RCC_OscConfig+0x132>
 8004326:	e044      	b.n	80043b2 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8004328:	4a42      	ldr	r2, [pc, #264]	; (8004434 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	4e43      	ldr	r6, [pc, #268]	; (8004438 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 800432c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800432e:	f7fe fee7 	bl	8003100 <HAL_GetTick>
 8004332:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004334:	e004      	b.n	8004340 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004336:	f7fe fee3 	bl	8003100 <HAL_GetTick>
 800433a:	1b40      	subs	r0, r0, r5
 800433c:	2802      	cmp	r0, #2
 800433e:	d8d0      	bhi.n	80042e2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004340:	6833      	ldr	r3, [r6, #0]
 8004342:	0799      	lsls	r1, r3, #30
 8004344:	d4f7      	bmi.n	8004336 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	e6f9      	b.n	800413e <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800434a:	2801      	cmp	r0, #1
 800434c:	f43f af48 	beq.w	80041e0 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8004350:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004352:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004354:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004358:	4291      	cmp	r1, r2
 800435a:	f47f af64 	bne.w	8004226 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004360:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004364:	4291      	cmp	r1, r2
 8004366:	f47f af5e 	bne.w	8004226 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800436a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800436c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004370:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004372:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004376:	f47f af56 	bne.w	8004226 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800437a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800437c:	0852      	lsrs	r2, r2, #1
 800437e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004382:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004384:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004388:	f47f af4d 	bne.w	8004226 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800438c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800438e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004392:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8004396:	bf14      	ite	ne
 8004398:	2001      	movne	r0, #1
 800439a:	2000      	moveq	r0, #0
 800439c:	e720      	b.n	80041e0 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439e:	4b26      	ldr	r3, [pc, #152]	; (8004438 <HAL_RCC_OscConfig+0x3c4>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043ae:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b0:	e76d      	b.n	800428e <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b2:	4a21      	ldr	r2, [pc, #132]	; (8004438 <HAL_RCC_OscConfig+0x3c4>)
 80043b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80043b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ba:	6413      	str	r3, [r2, #64]	; 0x40
 80043bc:	e6f3      	b.n	80041a6 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80043be:	2001      	movs	r0, #1
}
 80043c0:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_RCC_OscConfig+0x3c4>)
 80043c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043c6:	f042 0204 	orr.w	r2, r2, #4
 80043ca:	671a      	str	r2, [r3, #112]	; 0x70
 80043cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d4:	e78e      	b.n	80042f4 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 80043d6:	f7fe fe93 	bl	8003100 <HAL_GetTick>
 80043da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043dc:	e005      	b.n	80043ea <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043de:	f7fe fe8f 	bl	8003100 <HAL_GetTick>
 80043e2:	1b80      	subs	r0, r0, r6
 80043e4:	2802      	cmp	r0, #2
 80043e6:	f63f af7c 	bhi.w	80042e2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	682b      	ldr	r3, [r5, #0]
 80043ec:	0199      	lsls	r1, r3, #6
 80043ee:	d4f6      	bmi.n	80043de <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f0:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80043f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043f6:	430b      	orrs	r3, r1
 80043f8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80043fc:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8004400:	0852      	lsrs	r2, r2, #1
 8004402:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004406:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004408:	490a      	ldr	r1, [pc, #40]	; (8004434 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800440a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800440e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004410:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004412:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004414:	f7fe fe74 	bl	8003100 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004418:	4d07      	ldr	r5, [pc, #28]	; (8004438 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 800441a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441c:	e005      	b.n	800442a <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441e:	f7fe fe6f 	bl	8003100 <HAL_GetTick>
 8004422:	1b00      	subs	r0, r0, r4
 8004424:	2802      	cmp	r0, #2
 8004426:	f63f af5c 	bhi.w	80042e2 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442a:	682b      	ldr	r3, [r5, #0]
 800442c:	019a      	lsls	r2, r3, #6
 800442e:	d5f6      	bpl.n	800441e <HAL_RCC_OscConfig+0x3aa>
 8004430:	e6d5      	b.n	80041de <HAL_RCC_OscConfig+0x16a>
 8004432:	bf00      	nop
 8004434:	42470000 	.word	0x42470000
 8004438:	40023800 	.word	0x40023800

0800443c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800443c:	4916      	ldr	r1, [pc, #88]	; (8004498 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800443e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004440:	688b      	ldr	r3, [r1, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b04      	cmp	r3, #4
 8004448:	d01b      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x46>
 800444a:	2b08      	cmp	r3, #8
 800444c:	d117      	bne.n	800447e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800444e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004450:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004452:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004454:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004458:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800445c:	d113      	bne.n	8004486 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445e:	480f      	ldr	r0, [pc, #60]	; (800449c <HAL_RCC_GetSysClockFreq+0x60>)
 8004460:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004464:	fba1 0100 	umull	r0, r1, r1, r0
 8004468:	f7fc fbd6 	bl	8000c18 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <HAL_RCC_GetSysClockFreq+0x5c>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004474:	3301      	adds	r3, #1
 8004476:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004478:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800447c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800447e:	4807      	ldr	r0, [pc, #28]	; (800449c <HAL_RCC_GetSysClockFreq+0x60>)
}
 8004480:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004482:	4807      	ldr	r0, [pc, #28]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004484:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004486:	4806      	ldr	r0, [pc, #24]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x64>)
 8004488:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800448c:	2300      	movs	r3, #0
 800448e:	fba1 0100 	umull	r0, r1, r1, r0
 8004492:	f7fc fbc1 	bl	8000c18 <__aeabi_uldivmod>
 8004496:	e7e9      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x30>
 8004498:	40023800 	.word	0x40023800
 800449c:	00f42400 	.word	0x00f42400
 80044a0:	007a1200 	.word	0x007a1200

080044a4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80044a4:	2800      	cmp	r0, #0
 80044a6:	f000 8087 	beq.w	80045b8 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044aa:	4a48      	ldr	r2, [pc, #288]	; (80045cc <HAL_RCC_ClockConfig+0x128>)
 80044ac:	6813      	ldr	r3, [r2, #0]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	428b      	cmp	r3, r1
{
 80044b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b8:	460d      	mov	r5, r1
 80044ba:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044bc:	d209      	bcs.n	80044d2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	b2cb      	uxtb	r3, r1
 80044c0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	6813      	ldr	r3, [r2, #0]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	428b      	cmp	r3, r1
 80044ca:	d002      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80044cc:	2001      	movs	r0, #1
}
 80044ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	0798      	lsls	r0, r3, #30
 80044d6:	d514      	bpl.n	8004502 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	0759      	lsls	r1, r3, #29
 80044da:	d504      	bpl.n	80044e6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044dc:	493c      	ldr	r1, [pc, #240]	; (80045d0 <HAL_RCC_ClockConfig+0x12c>)
 80044de:	688a      	ldr	r2, [r1, #8]
 80044e0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80044e4:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e6:	071a      	lsls	r2, r3, #28
 80044e8:	d504      	bpl.n	80044f4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044ea:	4939      	ldr	r1, [pc, #228]	; (80045d0 <HAL_RCC_ClockConfig+0x12c>)
 80044ec:	688a      	ldr	r2, [r1, #8]
 80044ee:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80044f2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f4:	4936      	ldr	r1, [pc, #216]	; (80045d0 <HAL_RCC_ClockConfig+0x12c>)
 80044f6:	68a0      	ldr	r0, [r4, #8]
 80044f8:	688a      	ldr	r2, [r1, #8]
 80044fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80044fe:	4302      	orrs	r2, r0
 8004500:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004502:	07df      	lsls	r7, r3, #31
 8004504:	d521      	bpl.n	800454a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004506:	6862      	ldr	r2, [r4, #4]
 8004508:	2a01      	cmp	r2, #1
 800450a:	d057      	beq.n	80045bc <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450c:	1e93      	subs	r3, r2, #2
 800450e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004510:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <HAL_RCC_ClockConfig+0x12c>)
 8004512:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004514:	d94d      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004516:	0799      	lsls	r1, r3, #30
 8004518:	d5d8      	bpl.n	80044cc <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451a:	4e2d      	ldr	r6, [pc, #180]	; (80045d0 <HAL_RCC_ClockConfig+0x12c>)
 800451c:	68b3      	ldr	r3, [r6, #8]
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	4313      	orrs	r3, r2
 8004524:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004526:	f7fe fdeb 	bl	8003100 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800452e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004530:	e004      	b.n	800453c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004532:	f7fe fde5 	bl	8003100 <HAL_GetTick>
 8004536:	1bc0      	subs	r0, r0, r7
 8004538:	4540      	cmp	r0, r8
 800453a:	d844      	bhi.n	80045c6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453c:	68b3      	ldr	r3, [r6, #8]
 800453e:	6862      	ldr	r2, [r4, #4]
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004548:	d1f3      	bne.n	8004532 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800454a:	4a20      	ldr	r2, [pc, #128]	; (80045cc <HAL_RCC_ClockConfig+0x128>)
 800454c:	6813      	ldr	r3, [r2, #0]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	42ab      	cmp	r3, r5
 8004554:	d906      	bls.n	8004564 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004556:	b2eb      	uxtb	r3, r5
 8004558:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	6813      	ldr	r3, [r2, #0]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	42ab      	cmp	r3, r5
 8004562:	d1b3      	bne.n	80044cc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	075a      	lsls	r2, r3, #29
 8004568:	d506      	bpl.n	8004578 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800456a:	4919      	ldr	r1, [pc, #100]	; (80045d0 <HAL_RCC_ClockConfig+0x12c>)
 800456c:	68e0      	ldr	r0, [r4, #12]
 800456e:	688a      	ldr	r2, [r1, #8]
 8004570:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004574:	4302      	orrs	r2, r0
 8004576:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004578:	071b      	lsls	r3, r3, #28
 800457a:	d507      	bpl.n	800458c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800457c:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <HAL_RCC_ClockConfig+0x12c>)
 800457e:	6921      	ldr	r1, [r4, #16]
 8004580:	6893      	ldr	r3, [r2, #8]
 8004582:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004586:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800458a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800458c:	f7ff ff56 	bl	800443c <HAL_RCC_GetSysClockFreq>
 8004590:	4a0f      	ldr	r2, [pc, #60]	; (80045d0 <HAL_RCC_ClockConfig+0x12c>)
 8004592:	4c10      	ldr	r4, [pc, #64]	; (80045d4 <HAL_RCC_ClockConfig+0x130>)
 8004594:	6892      	ldr	r2, [r2, #8]
 8004596:	4910      	ldr	r1, [pc, #64]	; (80045d8 <HAL_RCC_ClockConfig+0x134>)
 8004598:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800459c:	4603      	mov	r3, r0
 800459e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80045a0:	480e      	ldr	r0, [pc, #56]	; (80045dc <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a2:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80045a4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a6:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80045a8:	f7fe fd60 	bl	800306c <HAL_InitTick>
  return HAL_OK;
 80045ac:	2000      	movs	r0, #0
}
 80045ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b2:	0198      	lsls	r0, r3, #6
 80045b4:	d4b1      	bmi.n	800451a <HAL_RCC_ClockConfig+0x76>
 80045b6:	e789      	b.n	80044cc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80045b8:	2001      	movs	r0, #1
}
 80045ba:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <HAL_RCC_ClockConfig+0x12c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	039e      	lsls	r6, r3, #14
 80045c2:	d4aa      	bmi.n	800451a <HAL_RCC_ClockConfig+0x76>
 80045c4:	e782      	b.n	80044cc <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80045c6:	2003      	movs	r0, #3
 80045c8:	e781      	b.n	80044ce <HAL_RCC_ClockConfig+0x2a>
 80045ca:	bf00      	nop
 80045cc:	40023c00 	.word	0x40023c00
 80045d0:	40023800 	.word	0x40023800
 80045d4:	0800b684 	.word	0x0800b684
 80045d8:	20000004 	.word	0x20000004
 80045dc:	2000000c 	.word	0x2000000c

080045e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80045e2:	4905      	ldr	r1, [pc, #20]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	4a05      	ldr	r2, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80045e8:	6808      	ldr	r0, [r1, #0]
 80045ea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80045ee:	5cd3      	ldrb	r3, [r2, r3]
}
 80045f0:	40d8      	lsrs	r0, r3
 80045f2:	4770      	bx	lr
 80045f4:	40023800 	.word	0x40023800
 80045f8:	20000004 	.word	0x20000004
 80045fc:	0800b694 	.word	0x0800b694

08004600 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004602:	4905      	ldr	r1, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	4a05      	ldr	r2, [pc, #20]	; (800461c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004608:	6808      	ldr	r0, [r1, #0]
 800460a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800460e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004610:	40d8      	lsrs	r0, r3
 8004612:	4770      	bx	lr
 8004614:	40023800 	.word	0x40023800
 8004618:	20000004 	.word	0x20000004
 800461c:	0800b694 	.word	0x0800b694

08004620 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	461d      	mov	r5, r3
 8004628:	4616      	mov	r6, r2
 800462a:	460c      	mov	r4, r1
 800462c:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800462e:	f7fe fd67 	bl	8003100 <HAL_GetTick>
 8004632:	4435      	add	r5, r6
 8004634:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004636:	f7fe fd63 	bl	8003100 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800463a:	4b28      	ldr	r3, [pc, #160]	; (80046dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004642:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8004646:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004648:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800464a:	1c73      	adds	r3, r6, #1
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	d107      	bne.n	8004660 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
 8004650:	688b      	ldr	r3, [r1, #8]
 8004652:	ea34 0303 	bics.w	r3, r4, r3
 8004656:	d0fb      	beq.n	8004650 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8004658:	2000      	movs	r0, #0
}
 800465a:	b002      	add	sp, #8
 800465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004660:	688b      	ldr	r3, [r1, #8]
 8004662:	ea34 0303 	bics.w	r3, r4, r3
 8004666:	d1f7      	bne.n	8004658 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004668:	f7fe fd4a 	bl	8003100 <HAL_GetTick>
 800466c:	eba0 0008 	sub.w	r0, r0, r8
 8004670:	42a8      	cmp	r0, r5
 8004672:	d208      	bcs.n	8004686 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
      if (count == 0U)
 8004674:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004676:	2b00      	cmp	r3, #0
      count--;
 8004678:	9b01      	ldr	r3, [sp, #4]
 800467a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 800467e:	bf08      	it	eq
 8004680:	2500      	moveq	r5, #0
      count--;
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	e7e1      	b.n	800464a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004686:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800468a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004694:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004696:	d014      	beq.n	80046c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800469e:	d007      	beq.n	80046b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 80046a0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80046a2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80046a4:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80046a8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80046ac:	2003      	movs	r0, #3
 80046ae:	e7d4      	b.n	800465a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e7ee      	b.n	80046a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80046c8:	d002      	beq.n	80046d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80046ce:	d1e3      	bne.n	8004698 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e7de      	b.n	8004698 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
 80046da:	bf00      	nop
 80046dc:	20000004 	.word	0x20000004

080046e0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d05c      	beq.n	800479e <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046e4:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 80046e6:	b570      	push	{r4, r5, r6, lr}
 80046e8:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ea:	2900      	cmp	r1, #0
 80046ec:	d047      	beq.n	800477e <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ee:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80046f4:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f8:	2300      	movs	r3, #0
 80046fa:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80046fc:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8004700:	2a00      	cmp	r2, #0
 8004702:	d042      	beq.n	800478a <HAL_SPI_Init+0xaa>
 8004704:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 8004706:	6825      	ldr	r5, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004708:	68a2      	ldr	r2, [r4, #8]
  hspi->State = HAL_SPI_STATE_BUSY;
 800470a:	2302      	movs	r3, #2
 800470c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004716:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800471e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004722:	4313      	orrs	r3, r2
 8004724:	68e2      	ldr	r2, [r4, #12]
 8004726:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800472a:	4313      	orrs	r3, r2
 800472c:	6922      	ldr	r2, [r4, #16]
 800472e:	f002 0202 	and.w	r2, r2, #2
 8004732:	4313      	orrs	r3, r2
 8004734:	6962      	ldr	r2, [r4, #20]
 8004736:	f002 0201 	and.w	r2, r2, #1
 800473a:	431a      	orrs	r2, r3
 800473c:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800473e:	f001 0010 	and.w	r0, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004742:	f003 0638 	and.w	r6, r3, #56	; 0x38
 8004746:	69a1      	ldr	r1, [r4, #24]
 8004748:	6a23      	ldr	r3, [r4, #32]
 800474a:	f003 0e80 	and.w	lr, r3, #128	; 0x80
 800474e:	f401 7300 	and.w	r3, r1, #512	; 0x200
 8004752:	4313      	orrs	r3, r2
 8004754:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004756:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004758:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800475c:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004760:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004764:	4301      	orrs	r1, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004766:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004768:	6069      	str	r1, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800476a:	69eb      	ldr	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800476c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800476e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004772:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004774:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004776:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004778:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 800477c:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477e:	6843      	ldr	r3, [r0, #4]
 8004780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004784:	d0b6      	beq.n	80046f4 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004786:	61c1      	str	r1, [r0, #28]
 8004788:	e7b4      	b.n	80046f4 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 800478a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800478e:	4620      	mov	r0, r4
 8004790:	f7fe fa94 	bl	8002cbc <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004794:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004798:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 800479c:	e7b3      	b.n	8004706 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 800479e:	2001      	movs	r0, #1
}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop

080047a4 <HAL_SPI_Transmit>:
{
 80047a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80047aa:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80047ae:	2801      	cmp	r0, #1
{
 80047b0:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80047b2:	f000 8087 	beq.w	80048c4 <HAL_SPI_Transmit+0x120>
 80047b6:	461d      	mov	r5, r3
 80047b8:	2301      	movs	r3, #1
 80047ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80047be:	4688      	mov	r8, r1
 80047c0:	4617      	mov	r7, r2
 80047c2:	f7fe fc9d 	bl	8003100 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80047c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80047ca:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80047cc:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80047ce:	b2d8      	uxtb	r0, r3
 80047d0:	d009      	beq.n	80047e6 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80047d2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80047d4:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80047d6:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80047d8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047dc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80047e0:	b002      	add	sp, #8
 80047e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80047e6:	f1b8 0f00 	cmp.w	r8, #0
 80047ea:	d0f3      	beq.n	80047d4 <HAL_SPI_Transmit+0x30>
 80047ec:	2f00      	cmp	r7, #0
 80047ee:	d0f1      	beq.n	80047d4 <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047f0:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80047f2:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047f4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047f8:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047fa:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004800:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
 8004804:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004808:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 800480a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800480c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800480e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004810:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004812:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004814:	f000 8083 	beq.w	800491e <HAL_SPI_Transmit+0x17a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004818:	6803      	ldr	r3, [r0, #0]
 800481a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_DISABLE(hspi);
 800481c:	4684      	mov	ip, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800481e:	d403      	bmi.n	8004828 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8004820:	6803      	ldr	r3, [r0, #0]
 8004822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004826:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004828:	68e3      	ldr	r3, [r4, #12]
 800482a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800482e:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004830:	d04c      	beq.n	80048cc <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 8095 	beq.w	8004962 <HAL_SPI_Transmit+0x1be>
 8004838:	2f01      	cmp	r7, #1
 800483a:	f000 8092 	beq.w	8004962 <HAL_SPI_Transmit+0x1be>
    while (hspi->TxXferCount > 0U)
 800483e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004840:	b29b      	uxth	r3, r3
 8004842:	b1bb      	cbz	r3, 8004874 <HAL_SPI_Transmit+0xd0>
 8004844:	2d00      	cmp	r5, #0
 8004846:	f000 80cb 	beq.w	80049e0 <HAL_SPI_Transmit+0x23c>
 800484a:	1c6f      	adds	r7, r5, #1
 800484c:	d17e      	bne.n	800494c <HAL_SPI_Transmit+0x1a8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	0790      	lsls	r0, r2, #30
 8004854:	f140 8090 	bpl.w	8004978 <HAL_SPI_Transmit+0x1d4>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004858:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800485a:	7812      	ldrb	r2, [r2, #0]
 800485c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800485e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004860:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004862:	3901      	subs	r1, #1
 8004864:	b289      	uxth	r1, r1
 8004866:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004868:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800486a:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 800486c:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800486e:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8004870:	2900      	cmp	r1, #0
 8004872:	d1ec      	bne.n	800484e <HAL_SPI_Transmit+0xaa>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004874:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004876:	4b72      	ldr	r3, [pc, #456]	; (8004a40 <HAL_SPI_Transmit+0x29c>)
 8004878:	4972      	ldr	r1, [pc, #456]	; (8004a44 <HAL_SPI_Transmit+0x2a0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	fba1 1303 	umull	r1, r3, r1, r3
 8004880:	0d5b      	lsrs	r3, r3, #21
 8004882:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004886:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800488e:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004890:	d107      	bne.n	80048a2 <HAL_SPI_Transmit+0xfe>
 8004892:	e0c6      	b.n	8004a22 <HAL_SPI_Transmit+0x27e>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8004894:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004896:	6822      	ldr	r2, [r4, #0]
      count--;
 8004898:	3b01      	subs	r3, #1
 800489a:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800489c:	6893      	ldr	r3, [r2, #8]
 800489e:	061b      	lsls	r3, r3, #24
 80048a0:	d502      	bpl.n	80048a8 <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 80048a2:	9b01      	ldr	r3, [sp, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f5      	bne.n	8004894 <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048a8:	68a3      	ldr	r3, [r4, #8]
 80048aa:	b933      	cbnz	r3, 80048ba <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	68d3      	ldr	r3, [r2, #12]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	6893      	ldr	r3, [r2, #8]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80048bc:	3800      	subs	r0, #0
 80048be:	bf18      	it	ne
 80048c0:	2001      	movne	r0, #1
error:
 80048c2:	e787      	b.n	80047d4 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80048c4:	2002      	movs	r0, #2
}
 80048c6:	b002      	add	sp, #8
 80048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048cc:	461a      	mov	r2, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d174      	bne.n	80049bc <HAL_SPI_Transmit+0x218>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d2:	4641      	mov	r1, r8
 80048d4:	f831 7b02 	ldrh.w	r7, [r1], #2
 80048d8:	60c7      	str	r7, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048da:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80048dc:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80048de:	3901      	subs	r1, #1
 80048e0:	b289      	uxth	r1, r1
 80048e2:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80048e4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80048e6:	b289      	uxth	r1, r1
 80048e8:	2900      	cmp	r1, #0
 80048ea:	d0c4      	beq.n	8004876 <HAL_SPI_Transmit+0xd2>
 80048ec:	2d00      	cmp	r5, #0
 80048ee:	f000 808b 	beq.w	8004a08 <HAL_SPI_Transmit+0x264>
 80048f2:	1c69      	adds	r1, r5, #1
 80048f4:	d158      	bne.n	80049a8 <HAL_SPI_Transmit+0x204>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f6:	6883      	ldr	r3, [r0, #8]
 80048f8:	079a      	lsls	r2, r3, #30
 80048fa:	f140 8089 	bpl.w	8004a10 <HAL_SPI_Transmit+0x26c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004900:	f832 3b02 	ldrh.w	r3, [r2], #2
 8004904:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8004906:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004908:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800490a:	3b01      	subs	r3, #1
 800490c:	b29b      	uxth	r3, r3
 800490e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004910:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ee      	bne.n	80048f6 <HAL_SPI_Transmit+0x152>
 8004918:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800491a:	461a      	mov	r2, r3
 800491c:	e7ab      	b.n	8004876 <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 800491e:	6803      	ldr	r3, [r0, #0]
 8004920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004924:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8004926:	6803      	ldr	r3, [r0, #0]
 8004928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800492c:	6003      	str	r3, [r0, #0]
 800492e:	e773      	b.n	8004818 <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004930:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004936:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004938:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800493a:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800493c:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800493e:	b29b      	uxth	r3, r3
 8004940:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004942:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8004944:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d093      	beq.n	8004874 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	0791      	lsls	r1, r2, #30
 8004952:	d4ed      	bmi.n	8004930 <HAL_SPI_Transmit+0x18c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004954:	f7fe fbd4 	bl	8003100 <HAL_GetTick>
 8004958:	1b80      	subs	r0, r0, r6
 800495a:	4285      	cmp	r5, r0
 800495c:	d8f2      	bhi.n	8004944 <HAL_SPI_Transmit+0x1a0>
          errorcode = HAL_TIMEOUT;
 800495e:	2003      	movs	r0, #3
 8004960:	e738      	b.n	80047d4 <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004962:	f898 3000 	ldrb.w	r3, [r8]
 8004966:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8004968:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800496a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800496c:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800496e:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004970:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004972:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004974:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004976:	e762      	b.n	800483e <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004978:	f7fe fbc2 	bl	8003100 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800497c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	f47f af64 	bne.w	800484e <HAL_SPI_Transmit+0xaa>
 8004986:	e775      	b.n	8004874 <HAL_SPI_Transmit+0xd0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004988:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800498a:	f832 3b02 	ldrh.w	r3, [r2], #2
 800498e:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 8004992:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004994:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004996:	3b01      	subs	r3, #1
 8004998:	b29b      	uxth	r3, r3
 800499a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800499c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0b9      	beq.n	8004918 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049a4:	f8d4 c000 	ldr.w	ip, [r4]
 80049a8:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80049ac:	079b      	lsls	r3, r3, #30
 80049ae:	d4eb      	bmi.n	8004988 <HAL_SPI_Transmit+0x1e4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049b0:	f7fe fba6 	bl	8003100 <HAL_GetTick>
 80049b4:	1b80      	subs	r0, r0, r6
 80049b6:	4285      	cmp	r5, r0
 80049b8:	d9d1      	bls.n	800495e <HAL_SPI_Transmit+0x1ba>
 80049ba:	e7ef      	b.n	800499c <HAL_SPI_Transmit+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049bc:	2f01      	cmp	r7, #1
 80049be:	d191      	bne.n	80048e4 <HAL_SPI_Transmit+0x140>
 80049c0:	e787      	b.n	80048d2 <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80049c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80049d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d4:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 80049d6:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d8:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f43f af4a 	beq.w	8004874 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	0792      	lsls	r2, r2, #30
 80049e6:	d4ec      	bmi.n	80049c2 <HAL_SPI_Transmit+0x21e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e8:	f7fe fb8a 	bl	8003100 <HAL_GetTick>
 80049ec:	e7b7      	b.n	800495e <HAL_SPI_Transmit+0x1ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80049f0:	f831 2b02 	ldrh.w	r2, [r1], #2
 80049f4:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 80049f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f8:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80049fa:	3a01      	subs	r2, #1
 80049fc:	b292      	uxth	r2, r2
 80049fe:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004a00:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004a02:	b292      	uxth	r2, r2
 8004a04:	2a00      	cmp	r2, #0
 8004a06:	d088      	beq.n	800491a <HAL_SPI_Transmit+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a08:	6882      	ldr	r2, [r0, #8]
 8004a0a:	0797      	lsls	r7, r2, #30
 8004a0c:	d5ec      	bpl.n	80049e8 <HAL_SPI_Transmit+0x244>
 8004a0e:	e7ee      	b.n	80049ee <HAL_SPI_Transmit+0x24a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a10:	f7fe fb76 	bl	8003100 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8004a14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f43f af7d 	beq.w	8004918 <HAL_SPI_Transmit+0x174>
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	e769      	b.n	80048f6 <HAL_SPI_Transmit+0x152>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a22:	4633      	mov	r3, r6
 8004a24:	462a      	mov	r2, r5
 8004a26:	2180      	movs	r1, #128	; 0x80
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff fdf9 	bl	8004620 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	f43f af3a 	beq.w	80048a8 <HAL_SPI_Transmit+0x104>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a34:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a36:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a3c:	6562      	str	r2, [r4, #84]	; 0x54
 8004a3e:	e733      	b.n	80048a8 <HAL_SPI_Transmit+0x104>
 8004a40:	20000004 	.word	0x20000004
 8004a44:	165e9f81 	.word	0x165e9f81

08004a48 <HAL_SPI_TransmitReceive>:
{
 8004a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a4c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004a4e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 8004a52:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8004a54:	2801      	cmp	r0, #1
{
 8004a56:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004a58:	f000 8083 	beq.w	8004b62 <HAL_SPI_TransmitReceive+0x11a>
 8004a5c:	461f      	mov	r7, r3
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004a64:	4689      	mov	r9, r1
 8004a66:	4690      	mov	r8, r2
 8004a68:	f7fe fb4a 	bl	8003100 <HAL_GetTick>
 8004a6c:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8004a6e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8004a72:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a74:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8004a76:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a78:	d011      	beq.n	8004a9e <HAL_SPI_TransmitReceive+0x56>
 8004a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a7e:	d009      	beq.n	8004a94 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8004a80:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004a82:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004a84:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004a86:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a8a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004a8e:	b003      	add	sp, #12
 8004a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a94:	68a2      	ldr	r2, [r4, #8]
 8004a96:	2a00      	cmp	r2, #0
 8004a98:	d1f2      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x38>
 8004a9a:	2904      	cmp	r1, #4
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a9e:	f1b9 0f00 	cmp.w	r9, #0
 8004aa2:	d062      	beq.n	8004b6a <HAL_SPI_TransmitReceive+0x122>
 8004aa4:	f1b8 0f00 	cmp.w	r8, #0
 8004aa8:	d05f      	beq.n	8004b6a <HAL_SPI_TransmitReceive+0x122>
 8004aaa:	2f00      	cmp	r7, #0
 8004aac:	d05d      	beq.n	8004b6a <HAL_SPI_TransmitReceive+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004aae:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ab2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ab6:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ab8:	bf1c      	itt	ne
 8004aba:	2205      	movne	r2, #5
 8004abc:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004ac4:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac8:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8004aca:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004acc:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ace:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 8004ad0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad2:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ad4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ad8:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ada:	d403      	bmi.n	8004ae4 <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8004adc:	6811      	ldr	r1, [r2, #0]
 8004ade:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004ae2:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ae4:	68e1      	ldr	r1, [r4, #12]
 8004ae6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004aea:	d04e      	beq.n	8004b8a <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d03e      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x126>
 8004af0:	2f01      	cmp	r7, #1
 8004af2:	d03c      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 8004af4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004af6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	b91b      	cbnz	r3, 8004b04 <HAL_SPI_TransmitReceive+0xbc>
 8004afc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d07f      	beq.n	8004c04 <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	6893      	ldr	r3, [r2, #8]
 8004b08:	0799      	lsls	r1, r3, #30
 8004b0a:	d50f      	bpl.n	8004b2c <HAL_SPI_TransmitReceive+0xe4>
 8004b0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	b163      	cbz	r3, 8004b2c <HAL_SPI_TransmitReceive+0xe4>
 8004b12:	b15f      	cbz	r7, 8004b2c <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8004b1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004b1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004b1e:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8004b20:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8004b22:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004b24:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b26:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8004b28:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004b2a:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b2c:	6893      	ldr	r3, [r2, #8]
 8004b2e:	f013 0301 	ands.w	r3, r3, #1
 8004b32:	d00d      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x108>
 8004b34:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004b36:	b289      	uxth	r1, r1
 8004b38:	b151      	cbz	r1, 8004b50 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 8004b3a:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b3e:	68d2      	ldr	r2, [r2, #12]
 8004b40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b44:	3301      	adds	r3, #1
 8004b46:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004b48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b50:	f7fe fad6 	bl	8003100 <HAL_GetTick>
 8004b54:	1b80      	subs	r0, r0, r6
 8004b56:	42a8      	cmp	r0, r5
 8004b58:	d314      	bcc.n	8004b84 <HAL_SPI_TransmitReceive+0x13c>
 8004b5a:	1c6a      	adds	r2, r5, #1
 8004b5c:	d0cb      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8004b5e:	2003      	movs	r0, #3
 8004b60:	e78f      	b.n	8004a82 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8004b62:	2002      	movs	r0, #2
}
 8004b64:	b003      	add	sp, #12
 8004b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	e789      	b.n	8004a82 <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b6e:	f899 3000 	ldrb.w	r3, [r9]
 8004b72:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 8004b74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b76:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004b78:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b7a:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004b7c:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b7e:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004b80:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004b82:	e7b7      	b.n	8004af4 <HAL_SPI_TransmitReceive+0xac>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b84:	2d00      	cmp	r5, #0
 8004b86:	d1b6      	bne.n	8004af6 <HAL_SPI_TransmitReceive+0xae>
 8004b88:	e7e9      	b.n	8004b5e <HAL_SPI_TransmitReceive+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d16c      	bne.n	8004c68 <HAL_SPI_TransmitReceive+0x220>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b8e:	4649      	mov	r1, r9
 8004b90:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004b94:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8004b96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b98:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004ba0:	1c6a      	adds	r2, r5, #1
{
 8004ba2:	f04f 0701 	mov.w	r7, #1
 8004ba6:	d025      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x1ac>
 8004ba8:	e061      	b.n	8004c6e <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	6893      	ldr	r3, [r2, #8]
 8004bae:	079b      	lsls	r3, r3, #30
 8004bb0:	d50d      	bpl.n	8004bce <HAL_SPI_TransmitReceive+0x186>
 8004bb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	b153      	cbz	r3, 8004bce <HAL_SPI_TransmitReceive+0x186>
 8004bb8:	b14f      	cbz	r7, 8004bce <HAL_SPI_TransmitReceive+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004bbc:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004bc0:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8004bc2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc4:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8004bca:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8004bcc:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bce:	6893      	ldr	r3, [r2, #8]
 8004bd0:	f013 0301 	ands.w	r3, r3, #1
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x1a8>
 8004bd6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004bd8:	b289      	uxth	r1, r1
 8004bda:	b149      	cbz	r1, 8004bf0 <HAL_SPI_TransmitReceive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bdc:	68d1      	ldr	r1, [r2, #12]
 8004bde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004be0:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8004be4:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8004be6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004be8:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bf0:	f7fe fa86 	bl	8003100 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1d6      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x162>
 8004bfc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1d2      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x162>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c04:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <HAL_SPI_TransmitReceive+0x28c>)
 8004c06:	4a34      	ldr	r2, [pc, #208]	; (8004cd8 <HAL_SPI_TransmitReceive+0x290>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	0d5b      	lsrs	r3, r3, #21
 8004c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c14:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c18:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c1a:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004c20:	d114      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x204>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c22:	4633      	mov	r3, r6
 8004c24:	462a      	mov	r2, r5
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f7ff fcf9 	bl	8004620 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004c2e:	b180      	cbz	r0, 8004c52 <HAL_SPI_TransmitReceive+0x20a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c30:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c32:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c34:	4313      	orrs	r3, r2
 8004c36:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004c38:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c3a:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8004c3c:	e721      	b.n	8004a82 <HAL_SPI_TransmitReceive+0x3a>
      count--;
 8004c3e:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c40:	6822      	ldr	r2, [r4, #0]
      count--;
 8004c42:	3b01      	subs	r3, #1
 8004c44:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c46:	6893      	ldr	r3, [r2, #8]
 8004c48:	061b      	lsls	r3, r3, #24
 8004c4a:	d502      	bpl.n	8004c52 <HAL_SPI_TransmitReceive+0x20a>
      if (count == 0U)
 8004c4c:	9b01      	ldr	r3, [sp, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f5      	bne.n	8004c3e <HAL_SPI_TransmitReceive+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c52:	68a0      	ldr	r0, [r4, #8]
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d13a      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x286>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	9000      	str	r0, [sp, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	9200      	str	r2, [sp, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	9b00      	ldr	r3, [sp, #0]
 8004c66:	e70c      	b.n	8004a82 <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c68:	2f01      	cmp	r7, #1
 8004c6a:	d199      	bne.n	8004ba0 <HAL_SPI_TransmitReceive+0x158>
 8004c6c:	e78f      	b.n	8004b8e <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	b91b      	cbnz	r3, 8004c7c <HAL_SPI_TransmitReceive+0x234>
 8004c74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0c3      	beq.n	8004c04 <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	6893      	ldr	r3, [r2, #8]
 8004c80:	0798      	lsls	r0, r3, #30
 8004c82:	d50d      	bpl.n	8004ca0 <HAL_SPI_TransmitReceive+0x258>
 8004c84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	b153      	cbz	r3, 8004ca0 <HAL_SPI_TransmitReceive+0x258>
 8004c8a:	b14f      	cbz	r7, 8004ca0 <HAL_SPI_TransmitReceive+0x258>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c8e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004c92:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c94:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004c96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8004c9c:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8004c9e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ca0:	6893      	ldr	r3, [r2, #8]
 8004ca2:	f013 0301 	ands.w	r3, r3, #1
 8004ca6:	d00c      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x27a>
 8004ca8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004caa:	b289      	uxth	r1, r1
 8004cac:	b149      	cbz	r1, 8004cc2 <HAL_SPI_TransmitReceive+0x27a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cae:	68d1      	ldr	r1, [r2, #12]
 8004cb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004cb2:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8004cb6:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8004cb8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cba:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cc2:	f7fe fa1d 	bl	8003100 <HAL_GetTick>
 8004cc6:	1b80      	subs	r0, r0, r6
 8004cc8:	42a8      	cmp	r0, r5
 8004cca:	d3d0      	bcc.n	8004c6e <HAL_SPI_TransmitReceive+0x226>
 8004ccc:	e747      	b.n	8004b5e <HAL_SPI_TransmitReceive+0x116>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e6d7      	b.n	8004a82 <HAL_SPI_TransmitReceive+0x3a>
 8004cd2:	bf00      	nop
 8004cd4:	20000004 	.word	0x20000004
 8004cd8:	165e9f81 	.word	0x165e9f81

08004cdc <HAL_SPI_Receive>:
{
 8004cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ce0:	6846      	ldr	r6, [r0, #4]
 8004ce2:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
{
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	4604      	mov	r4, r0
 8004cea:	4690      	mov	r8, r2
 8004cec:	461d      	mov	r5, r3
 8004cee:	460f      	mov	r7, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cf0:	d073      	beq.n	8004dda <HAL_SPI_Receive+0xfe>
  __HAL_LOCK(hspi);
 8004cf2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d07b      	beq.n	8004df2 <HAL_SPI_Receive+0x116>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004d00:	f7fe f9fe 	bl	8003100 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d04:	f894 c051 	ldrb.w	ip, [r4, #81]	; 0x51
 8004d08:	f1bc 0f01 	cmp.w	ip, #1
  tickstart = HAL_GetTick();
 8004d0c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d0e:	fa5f f08c 	uxtb.w	r0, ip
 8004d12:	d009      	beq.n	8004d28 <HAL_SPI_Receive+0x4c>
    errorcode = HAL_BUSY;
 8004d14:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004d16:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004d18:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004d1a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d1e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004d22:	b002      	add	sp, #8
 8004d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004d28:	2f00      	cmp	r7, #0
 8004d2a:	d0f4      	beq.n	8004d16 <HAL_SPI_Receive+0x3a>
 8004d2c:	f1b8 0f00 	cmp.w	r8, #0
 8004d30:	d0f1      	beq.n	8004d16 <HAL_SPI_Receive+0x3a>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d32:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d34:	63a7      	str	r7, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d36:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 8004d3a:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 8004d3c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d40:	f04f 0300 	mov.w	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d44:	f04f 0104 	mov.w	r1, #4
 8004d48:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->TxISR       = NULL;
 8004d4c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d50:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d52:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d54:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->RxXferCount = Size;
 8004d56:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d5a:	86e3      	strh	r3, [r4, #54]	; 0x36
    __HAL_SPI_DISABLE(hspi);
 8004d5c:	4613      	mov	r3, r2
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5e:	d107      	bne.n	8004d70 <HAL_SPI_Receive+0x94>
    __HAL_SPI_DISABLE(hspi);
 8004d60:	6811      	ldr	r1, [r2, #0]
 8004d62:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004d66:	6011      	str	r1, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004d68:	6811      	ldr	r1, [r2, #0]
 8004d6a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004d6e:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d70:	6811      	ldr	r1, [r2, #0]
 8004d72:	064f      	lsls	r7, r1, #25
 8004d74:	d403      	bmi.n	8004d7e <HAL_SPI_Receive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8004d76:	6811      	ldr	r1, [r2, #0]
 8004d78:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004d7c:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d7e:	68e1      	ldr	r1, [r4, #12]
 8004d80:	2900      	cmp	r1, #0
 8004d82:	d05a      	beq.n	8004e3a <HAL_SPI_Receive+0x15e>
    while (hspi->RxXferCount > 0U)
 8004d84:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004d86:	b289      	uxth	r1, r1
 8004d88:	b1a1      	cbz	r1, 8004db4 <HAL_SPI_Receive+0xd8>
 8004d8a:	2d00      	cmp	r5, #0
 8004d8c:	f000 80b3 	beq.w	8004ef6 <HAL_SPI_Receive+0x21a>
 8004d90:	1c68      	adds	r0, r5, #1
 8004d92:	d140      	bne.n	8004e16 <HAL_SPI_Receive+0x13a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d94:	6893      	ldr	r3, [r2, #8]
 8004d96:	07d9      	lsls	r1, r3, #31
 8004d98:	d547      	bpl.n	8004e2a <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d9c:	68d1      	ldr	r1, [r2, #12]
 8004d9e:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->RxXferCount--;
 8004da2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004da4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004da6:	3901      	subs	r1, #1
 8004da8:	b289      	uxth	r1, r1
 8004daa:	87e1      	strh	r1, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004dac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1ef      	bne.n	8004d94 <HAL_SPI_Receive+0xb8>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dba:	f000 80a0 	beq.w	8004efe <HAL_SPI_Receive+0x222>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbe:	4633      	mov	r3, r6
 8004dc0:	462a      	mov	r2, r5
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f7ff fc2b 	bl	8004620 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	f040 80a7 	bne.w	8004f1e <HAL_SPI_Receive+0x242>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004dd2:	3800      	subs	r0, #0
 8004dd4:	bf18      	it	ne
 8004dd6:	2001      	movne	r0, #1
error :
 8004dd8:	e79d      	b.n	8004d16 <HAL_SPI_Receive+0x3a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004dda:	6883      	ldr	r3, [r0, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d188      	bne.n	8004cf2 <HAL_SPI_Receive+0x16>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004de0:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004de2:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004de4:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004de6:	f880 5051 	strb.w	r5, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004dea:	460a      	mov	r2, r1
 8004dec:	f7ff fe2c 	bl	8004a48 <HAL_SPI_TransmitReceive>
 8004df0:	e797      	b.n	8004d22 <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 8004df2:	2002      	movs	r0, #2
}
 8004df4:	b002      	add	sp, #8
 8004df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dfa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8004e02:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e04:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004e0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0cf      	beq.n	8004db4 <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	07d2      	lsls	r2, r2, #31
 8004e1a:	d4ee      	bmi.n	8004dfa <HAL_SPI_Receive+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e1c:	f7fe f970 	bl	8003100 <HAL_GetTick>
 8004e20:	1b80      	subs	r0, r0, r6
 8004e22:	4285      	cmp	r5, r0
 8004e24:	d8f2      	bhi.n	8004e0c <HAL_SPI_Receive+0x130>
          errorcode = HAL_TIMEOUT;
 8004e26:	2003      	movs	r0, #3
 8004e28:	e775      	b.n	8004d16 <HAL_SPI_Receive+0x3a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e2a:	f7fe f969 	bl	8003100 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8004e2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0be      	beq.n	8004db4 <HAL_SPI_Receive+0xd8>
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	e7ac      	b.n	8004d94 <HAL_SPI_Receive+0xb8>
    while (hspi->RxXferCount > 0U)
 8004e3a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	2a00      	cmp	r2, #0
 8004e40:	d0b8      	beq.n	8004db4 <HAL_SPI_Receive+0xd8>
 8004e42:	2d00      	cmp	r5, #0
 8004e44:	d043      	beq.n	8004ece <HAL_SPI_Receive+0x1f2>
 8004e46:	1c6f      	adds	r7, r5, #1
 8004e48:	d00f      	beq.n	8004e6a <HAL_SPI_Receive+0x18e>
 8004e4a:	e027      	b.n	8004e9c <HAL_SPI_Receive+0x1c0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e4e:	7b1b      	ldrb	r3, [r3, #12]
 8004e50:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8004e52:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004e56:	3901      	subs	r1, #1
 8004e58:	b289      	uxth	r1, r1
 8004e5a:	87e1      	strh	r1, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004e5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e5e:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 8004e60:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e62:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0a5      	beq.n	8004db4 <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	07d0      	lsls	r0, r2, #31
 8004e6e:	d4ed      	bmi.n	8004e4c <HAL_SPI_Receive+0x170>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e70:	f7fe f946 	bl	8003100 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8004e74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f5      	bne.n	8004e68 <HAL_SPI_Receive+0x18c>
 8004e7c:	e79a      	b.n	8004db4 <HAL_SPI_Receive+0xd8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e80:	7b1b      	ldrb	r3, [r3, #12]
 8004e82:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8004e84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004e88:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e8a:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e90:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8004e92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d08c      	beq.n	8004db4 <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	07d1      	lsls	r1, r2, #31
 8004ea0:	d4ed      	bmi.n	8004e7e <HAL_SPI_Receive+0x1a2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ea2:	f7fe f92d 	bl	8003100 <HAL_GetTick>
 8004ea6:	1b80      	subs	r0, r0, r6
 8004ea8:	4285      	cmp	r5, r0
 8004eaa:	d9bc      	bls.n	8004e26 <HAL_SPI_Receive+0x14a>
 8004eac:	e7f1      	b.n	8004e92 <HAL_SPI_Receive+0x1b6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004eae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004eb0:	7b1b      	ldrb	r3, [r3, #12]
 8004eb2:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8004eb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004eb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004ebe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ec0:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 8004ec2:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ec4:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f43f af74 	beq.w	8004db4 <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	07d2      	lsls	r2, r2, #31
 8004ed2:	d4ec      	bmi.n	8004eae <HAL_SPI_Receive+0x1d2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed4:	f7fe f914 	bl	8003100 <HAL_GetTick>
 8004ed8:	e7a5      	b.n	8004e26 <HAL_SPI_Receive+0x14a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004edc:	68d3      	ldr	r3, [r2, #12]
 8004ede:	f821 3b02 	strh.w	r3, [r1], #2
        hspi->RxXferCount--;
 8004ee2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ee4:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004eec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f43f af5f 	beq.w	8004db4 <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ef6:	6893      	ldr	r3, [r2, #8]
 8004ef8:	07db      	lsls	r3, r3, #31
 8004efa:	d5eb      	bpl.n	8004ed4 <HAL_SPI_Receive+0x1f8>
 8004efc:	e7ed      	b.n	8004eda <HAL_SPI_Receive+0x1fe>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efe:	68a3      	ldr	r3, [r4, #8]
 8004f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f04:	d021      	beq.n	8004f4a <HAL_SPI_Receive+0x26e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0a:	d00f      	beq.n	8004f2c <HAL_SPI_Receive+0x250>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0c:	4633      	mov	r3, r6
 8004f0e:	462a      	mov	r2, r5
 8004f10:	2180      	movs	r1, #128	; 0x80
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7ff fb84 	bl	8004620 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f43f af59 	beq.w	8004dd0 <HAL_SPI_Receive+0xf4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f20:	f043 0320 	orr.w	r3, r3, #32
 8004f24:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f26:	2320      	movs	r3, #32
 8004f28:	6563      	str	r3, [r4, #84]	; 0x54
 8004f2a:	e751      	b.n	8004dd0 <HAL_SPI_Receive+0xf4>
    __HAL_SPI_DISABLE(hspi);
 8004f2c:	6820      	ldr	r0, [r4, #0]
 8004f2e:	6801      	ldr	r1, [r0, #0]
 8004f30:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004f34:	6001      	str	r1, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f36:	4633      	mov	r3, r6
 8004f38:	462a      	mov	r2, r5
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7ff fb6f 	bl	8004620 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004f42:	2800      	cmp	r0, #0
 8004f44:	f43f af44 	beq.w	8004dd0 <HAL_SPI_Receive+0xf4>
 8004f48:	e7e9      	b.n	8004f1e <HAL_SPI_Receive+0x242>
    __HAL_SPI_DISABLE(hspi);
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	6813      	ldr	r3, [r2, #0]
 8004f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f52:	6013      	str	r3, [r2, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f54:	e7da      	b.n	8004f0c <HAL_SPI_Receive+0x230>
 8004f56:	bf00      	nop

08004f58 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d076      	beq.n	800504a <HAL_TIM_Base_Init+0xf2>
{
 8004f5c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f62:	4604      	mov	r4, r0
 8004f64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d055      	beq.n	8005018 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f6c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f6e:	4938      	ldr	r1, [pc, #224]	; (8005050 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	2302      	movs	r3, #2
 8004f72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f76:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004f78:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f7a:	d052      	beq.n	8005022 <HAL_TIM_Base_Init+0xca>
 8004f7c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004f80:	d021      	beq.n	8004fc6 <HAL_TIM_Base_Init+0x6e>
 8004f82:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004f86:	428a      	cmp	r2, r1
 8004f88:	d01d      	beq.n	8004fc6 <HAL_TIM_Base_Init+0x6e>
 8004f8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f8e:	428a      	cmp	r2, r1
 8004f90:	d019      	beq.n	8004fc6 <HAL_TIM_Base_Init+0x6e>
 8004f92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f96:	428a      	cmp	r2, r1
 8004f98:	d015      	beq.n	8004fc6 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8004f9e:	428a      	cmp	r2, r1
 8004fa0:	d015      	beq.n	8004fce <HAL_TIM_Base_Init+0x76>
 8004fa2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fa6:	428a      	cmp	r2, r1
 8004fa8:	d011      	beq.n	8004fce <HAL_TIM_Base_Init+0x76>
 8004faa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fae:	428a      	cmp	r2, r1
 8004fb0:	d00d      	beq.n	8004fce <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb2:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fba:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004fbc:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fbe:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc0:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fc2:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc4:	e010      	b.n	8004fe8 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8004fc6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004fcc:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fce:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fdc:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fde:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004fe0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004fe2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fe6:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fec:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004ff4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004ff8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004ffc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005008:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800500c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005010:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005014:	2000      	movs	r0, #0
}
 8005016:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005018:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800501c:	f7fd fef2 	bl	8002e04 <HAL_TIM_Base_MspInit>
 8005020:	e7a4      	b.n	8004f6c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005022:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005024:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800502a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800502c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005030:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005032:	69a1      	ldr	r1, [r4, #24]
 8005034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005038:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800503a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800503c:	68e3      	ldr	r3, [r4, #12]
 800503e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005040:	6863      	ldr	r3, [r4, #4]
 8005042:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005044:	6963      	ldr	r3, [r4, #20]
 8005046:	6313      	str	r3, [r2, #48]	; 0x30
 8005048:	e7ce      	b.n	8004fe8 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 800504a:	2001      	movs	r0, #1
}
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000

08005054 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005054:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005058:	2b01      	cmp	r3, #1
 800505a:	d127      	bne.n	80050ac <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800505c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505e:	4915      	ldr	r1, [pc, #84]	; (80050b4 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	2202      	movs	r2, #2
 8005062:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005066:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005070:	d011      	beq.n	8005096 <HAL_TIM_Base_Start_IT+0x42>
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d00e      	beq.n	8005096 <HAL_TIM_Base_Start_IT+0x42>
 8005078:	4a0f      	ldr	r2, [pc, #60]	; (80050b8 <HAL_TIM_Base_Start_IT+0x64>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <HAL_TIM_Base_Start_IT+0x42>
 800507e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <HAL_TIM_Base_Start_IT+0x42>
 8005086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <HAL_TIM_Base_Start_IT+0x42>
 800508e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005092:	4293      	cmp	r3, r2
 8005094:	d104      	bne.n	80050a0 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509c:	2a06      	cmp	r2, #6
 800509e:	d007      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80050a6:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	4770      	bx	lr
    return HAL_ERROR;
 80050ac:	2001      	movs	r0, #1
 80050ae:	4770      	bx	lr
  return HAL_OK;
 80050b0:	2000      	movs	r0, #0
}
 80050b2:	4770      	bx	lr
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40000400 	.word	0x40000400

080050bc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80050bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d075      	beq.n	80051b0 <HAL_TIM_ConfigClockSource+0xf4>
 80050c4:	4602      	mov	r2, r0
{
 80050c6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80050c8:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80050ca:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80050d0:	2001      	movs	r0, #1
 80050d2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80050d6:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80050e0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80050e2:	680b      	ldr	r3, [r1, #0]
 80050e4:	2b60      	cmp	r3, #96	; 0x60
 80050e6:	d065      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0xf8>
 80050e8:	d824      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x78>
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d07c      	beq.n	80051e8 <HAL_TIM_ConfigClockSource+0x12c>
 80050ee:	d94b      	bls.n	8005188 <HAL_TIM_ConfigClockSource+0xcc>
 80050f0:	2b50      	cmp	r3, #80	; 0x50
 80050f2:	d117      	bne.n	8005124 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f4:	6848      	ldr	r0, [r1, #4]
 80050f6:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050f8:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fa:	6a23      	ldr	r3, [r4, #32]
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005102:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005104:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800510c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800510e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005112:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005114:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005116:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800511c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8005120:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005122:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005124:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005126:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005128:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800512c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005130:	bc30      	pop	{r4, r5}
 8005132:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005138:	d038      	beq.n	80051ac <HAL_TIM_ConfigClockSource+0xf0>
 800513a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513e:	d110      	bne.n	8005162 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005140:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005144:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005146:	432b      	orrs	r3, r5
 8005148:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800514a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800514e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005152:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005154:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005156:	68a3      	ldr	r3, [r4, #8]
 8005158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 800515c:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800515e:	60a3      	str	r3, [r4, #8]
      break;
 8005160:	e7e0      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005162:	2b70      	cmp	r3, #112	; 0x70
 8005164:	d1de      	bne.n	8005124 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005166:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800516a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800516c:	432b      	orrs	r3, r5
 800516e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005170:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005174:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005178:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800517a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800517c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800517e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8005184:	60a3      	str	r3, [r4, #8]
      break;
 8005186:	e7cd      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005188:	2b20      	cmp	r3, #32
 800518a:	d002      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0xd6>
 800518c:	d90a      	bls.n	80051a4 <HAL_TIM_ConfigClockSource+0xe8>
 800518e:	2b30      	cmp	r3, #48	; 0x30
 8005190:	d1c8      	bne.n	8005124 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8005192:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005194:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005198:	430b      	orrs	r3, r1
 800519a:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 800519e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80051a0:	60a3      	str	r3, [r4, #8]
}
 80051a2:	e7bf      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80051a4:	f033 0110 	bics.w	r1, r3, #16
 80051a8:	d1bc      	bne.n	8005124 <HAL_TIM_ConfigClockSource+0x68>
 80051aa:	e7f2      	b.n	8005192 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80051ac:	2000      	movs	r0, #0
 80051ae:	e7b9      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 80051b0:	2002      	movs	r0, #2
}
 80051b2:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b4:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051b6:	68cb      	ldr	r3, [r1, #12]
 80051b8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ba:	f020 0010 	bic.w	r0, r0, #16
 80051be:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c0:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051c2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c6:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 80051ca:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80051cc:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80051d6:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80051d8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051de:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80051e4:	60a3      	str	r3, [r4, #8]
}
 80051e6:	e79d      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e8:	6848      	ldr	r0, [r1, #4]
 80051ea:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80051ec:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ee:	6a23      	ldr	r3, [r4, #32]
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f6:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051f8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005200:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005202:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005206:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005208:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800520a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005210:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005216:	60a3      	str	r3, [r4, #8]
}
 8005218:	e784      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x68>
 800521a:	bf00      	nop

0800521c <HAL_TIM_PeriodElapsedCallback>:
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop

08005220 <HAL_TIM_OC_DelayElapsedCallback>:
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop

08005224 <HAL_TIM_IC_CaptureCallback>:
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop

08005228 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop

0800522c <HAL_TIM_TriggerCallback>:
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop

08005230 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005230:	6803      	ldr	r3, [r0, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	0791      	lsls	r1, r2, #30
{
 8005236:	b510      	push	{r4, lr}
 8005238:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800523a:	d502      	bpl.n	8005242 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	0792      	lsls	r2, r2, #30
 8005240:	d45f      	bmi.n	8005302 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	0750      	lsls	r0, r2, #29
 8005246:	d502      	bpl.n	800524e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	0751      	lsls	r1, r2, #29
 800524c:	d446      	bmi.n	80052dc <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	0712      	lsls	r2, r2, #28
 8005252:	d502      	bpl.n	800525a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	0710      	lsls	r0, r2, #28
 8005258:	d42e      	bmi.n	80052b8 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	06d2      	lsls	r2, r2, #27
 800525e:	d502      	bpl.n	8005266 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	06d0      	lsls	r0, r2, #27
 8005264:	d418      	bmi.n	8005298 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	07d1      	lsls	r1, r2, #31
 800526a:	d502      	bpl.n	8005272 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	07d2      	lsls	r2, r2, #31
 8005270:	d45d      	bmi.n	800532e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	0610      	lsls	r0, r2, #24
 8005276:	d502      	bpl.n	800527e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	0611      	lsls	r1, r2, #24
 800527c:	d45f      	bmi.n	800533e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	0652      	lsls	r2, r2, #25
 8005282:	d502      	bpl.n	800528a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	0650      	lsls	r0, r2, #25
 8005288:	d461      	bmi.n	800534e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	0691      	lsls	r1, r2, #26
 800528e:	d502      	bpl.n	8005296 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	0692      	lsls	r2, r2, #26
 8005294:	d443      	bmi.n	800531e <HAL_TIM_IRQHandler+0xee>
}
 8005296:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005298:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800529e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80052a8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052aa:	d064      	beq.n	8005376 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80052ac:	f7ff ffba 	bl	8005224 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052b2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b4:	7722      	strb	r2, [r4, #28]
 80052b6:	e7d6      	b.n	8005266 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052b8:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052bc:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052be:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052c8:	d152      	bne.n	8005370 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	f7ff ffa9 	bl	8005220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7ff ffaa 	bl	8005228 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052d6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d8:	7722      	strb	r2, [r4, #28]
 80052da:	e7be      	b.n	800525a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052dc:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052e0:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052e2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052e4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80052ec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ee:	d13c      	bne.n	800536a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f0:	f7ff ff96 	bl	8005220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	4620      	mov	r0, r4
 80052f6:	f7ff ff97 	bl	8005228 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052fc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	7722      	strb	r2, [r4, #28]
 8005300:	e7a5      	b.n	800524e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005302:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005306:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005308:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800530a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	079b      	lsls	r3, r3, #30
 8005310:	d025      	beq.n	800535e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005312:	f7ff ff87 	bl	8005224 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005318:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	7722      	strb	r2, [r4, #28]
 800531c:	e791      	b.n	8005242 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800531e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005322:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005324:	611a      	str	r2, [r3, #16]
}
 8005326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800532a:	f000 b863 	b.w	80053f4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800532e:	f06f 0201 	mvn.w	r2, #1
 8005332:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005334:	4620      	mov	r0, r4
 8005336:	f7ff ff71 	bl	800521c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	e799      	b.n	8005272 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800533e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005342:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005344:	4620      	mov	r0, r4
 8005346:	f000 f857 	bl	80053f8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	e797      	b.n	800527e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800534e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005352:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005354:	4620      	mov	r0, r4
 8005356:	f7ff ff69 	bl	800522c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	e795      	b.n	800528a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	f7ff ff5f 	bl	8005220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005362:	4620      	mov	r0, r4
 8005364:	f7ff ff60 	bl	8005228 <HAL_TIM_PWM_PulseFinishedCallback>
 8005368:	e7d5      	b.n	8005316 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	f7ff ff5b 	bl	8005224 <HAL_TIM_IC_CaptureCallback>
 800536e:	e7c4      	b.n	80052fa <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8005370:	f7ff ff58 	bl	8005224 <HAL_TIM_IC_CaptureCallback>
 8005374:	e7ae      	b.n	80052d4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	f7ff ff53 	bl	8005220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537a:	4620      	mov	r0, r4
 800537c:	f7ff ff54 	bl	8005228 <HAL_TIM_PWM_PulseFinishedCallback>
 8005380:	e796      	b.n	80052b0 <HAL_TIM_IRQHandler+0x80>
 8005382:	bf00      	nop

08005384 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005384:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d02f      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800538e:	2202      	movs	r2, #2
{
 8005390:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005392:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005396:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005398:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800539a:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800539c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a4:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d012      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ae:	d00f      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053b0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00b      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053bc:	4293      	cmp	r3, r2
 80053be:	d007      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053c8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d104      	bne.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d0:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d6:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053d8:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80053da:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	2201      	movs	r2, #1
 80053de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80053e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80053e6:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80053e8:	4618      	mov	r0, r3
}
 80053ea:	4770      	bx	lr
  __HAL_LOCK(htim);
 80053ec:	2002      	movs	r0, #2
}
 80053ee:	4770      	bx	lr
 80053f0:	40010000 	.word	0x40010000

080053f4 <HAL_TIMEx_CommutCallback>:
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop

080053f8 <HAL_TIMEx_BreakCallback>:
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop

080053fc <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f000 808f 	beq.w	8005520 <HAL_UART_Init+0x124>
{
 8005402:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005404:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005408:	4604      	mov	r4, r0
 800540a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 8081 	beq.w	8005516 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005414:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005416:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8005418:	2224      	movs	r2, #36	; 0x24
 800541a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005424:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005426:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005428:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800542a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800542e:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005430:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005432:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005434:	4302      	orrs	r2, r0
 8005436:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005438:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800543a:	4302      	orrs	r2, r0
 800543c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800543e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8005442:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005446:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005448:	430a      	orrs	r2, r1
 800544a:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005450:	4934      	ldr	r1, [pc, #208]	; (8005524 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005452:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005456:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005458:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800545a:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800545c:	d035      	beq.n	80054ca <HAL_UART_Init+0xce>
 800545e:	4a32      	ldr	r2, [pc, #200]	; (8005528 <HAL_UART_Init+0x12c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d032      	beq.n	80054ca <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005464:	f7ff f8bc 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005468:	69e3      	ldr	r3, [r4, #28]
 800546a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800546e:	d032      	beq.n	80054d6 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	2119      	movs	r1, #25
 8005474:	009a      	lsls	r2, r3, #2
 8005476:	fba0 0101 	umull	r0, r1, r0, r1
 800547a:	0f9b      	lsrs	r3, r3, #30
 800547c:	f7fb fbcc 	bl	8000c18 <__aeabi_uldivmod>
 8005480:	492a      	ldr	r1, [pc, #168]	; (800552c <HAL_UART_Init+0x130>)
 8005482:	fba1 3200 	umull	r3, r2, r1, r0
 8005486:	0952      	lsrs	r2, r2, #5
 8005488:	2564      	movs	r5, #100	; 0x64
 800548a:	fb05 0012 	mls	r0, r5, r2, r0
 800548e:	0100      	lsls	r0, r0, #4
 8005490:	3032      	adds	r0, #50	; 0x32
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	fba1 1000 	umull	r1, r0, r1, r0
 8005498:	0112      	lsls	r2, r2, #4
 800549a:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 800549e:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ae:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80054b0:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80054b4:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80054b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ba:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054bc:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054be:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054c2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80054c6:	4628      	mov	r0, r5
}
 80054c8:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80054ca:	f7ff f899 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ce:	69e3      	ldr	r3, [r4, #28]
 80054d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d4:	d1cc      	bne.n	8005470 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054d6:	6862      	ldr	r2, [r4, #4]
 80054d8:	2119      	movs	r1, #25
 80054da:	1892      	adds	r2, r2, r2
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	415b      	adcs	r3, r3
 80054e2:	fba0 0101 	umull	r0, r1, r0, r1
 80054e6:	f7fb fb97 	bl	8000c18 <__aeabi_uldivmod>
 80054ea:	4b10      	ldr	r3, [pc, #64]	; (800552c <HAL_UART_Init+0x130>)
 80054ec:	fba3 2100 	umull	r2, r1, r3, r0
 80054f0:	094d      	lsrs	r5, r1, #5
 80054f2:	2264      	movs	r2, #100	; 0x64
 80054f4:	fb02 0215 	mls	r2, r2, r5, r0
 80054f8:	00d2      	lsls	r2, r2, #3
 80054fa:	3232      	adds	r2, #50	; 0x32
 80054fc:	fba3 3202 	umull	r3, r2, r3, r2
 8005500:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8005504:	0912      	lsrs	r2, r2, #4
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800550c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005510:	440a      	add	r2, r1
 8005512:	609a      	str	r2, [r3, #8]
 8005514:	e7c4      	b.n	80054a0 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8005516:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800551a:	f7fd fc91 	bl	8002e40 <HAL_UART_MspInit>
 800551e:	e779      	b.n	8005414 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8005520:	2001      	movs	r0, #1
}
 8005522:	4770      	bx	lr
 8005524:	40011000 	.word	0x40011000
 8005528:	40011400 	.word	0x40011400
 800552c:	51eb851f 	.word	0x51eb851f

08005530 <HAL_UART_Transmit>:
{
 8005530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005534:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005536:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800553a:	2820      	cmp	r0, #32
 800553c:	d177      	bne.n	800562e <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 800553e:	4689      	mov	r9, r1
 8005540:	2900      	cmp	r1, #0
 8005542:	d040      	beq.n	80055c6 <HAL_UART_Transmit+0x96>
 8005544:	4614      	mov	r4, r2
 8005546:	2a00      	cmp	r2, #0
 8005548:	d03d      	beq.n	80055c6 <HAL_UART_Transmit+0x96>
 800554a:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800554c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d06c      	beq.n	800562e <HAL_UART_Transmit+0xfe>
 8005554:	2301      	movs	r3, #1
 8005556:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800555e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005564:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8005568:	f7fd fdca 	bl	8003100 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556c:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 800556e:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8005574:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8005576:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005578:	d05c      	beq.n	8005634 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 800557a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800557c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800557e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8005580:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8005584:	2b00      	cmp	r3, #0
 8005586:	d07e      	beq.n	8005686 <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005588:	682c      	ldr	r4, [r5, #0]
 800558a:	1c72      	adds	r2, r6, #1
 800558c:	d11e      	bne.n	80055cc <HAL_UART_Transmit+0x9c>
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	0613      	lsls	r3, r2, #24
 8005592:	d5fc      	bpl.n	800558e <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8005594:	f1b9 0f00 	cmp.w	r9, #0
 8005598:	d044      	beq.n	8005624 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800559a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800559e:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 80055a0:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055a8:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ec      	bne.n	800558a <HAL_UART_Transmit+0x5a>
 80055b0:	1c71      	adds	r1, r6, #1
 80055b2:	d145      	bne.n	8005640 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	065a      	lsls	r2, r3, #25
 80055b8:	d5fc      	bpl.n	80055b4 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80055ba:	2320      	movs	r3, #32
 80055bc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 80055c0:	2000      	movs	r0, #0
}
 80055c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80055c6:	2001      	movs	r0, #1
}
 80055c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	0618      	lsls	r0, r3, #24
 80055d0:	d4e0      	bmi.n	8005594 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055d2:	b12e      	cbz	r6, 80055e0 <HAL_UART_Transmit+0xb0>
 80055d4:	f7fd fd94 	bl	8003100 <HAL_GetTick>
 80055d8:	1bc0      	subs	r0, r0, r7
 80055da:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055dc:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055de:	d2d4      	bcs.n	800558a <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	f104 030c 	add.w	r3, r4, #12
 80055e4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	f104 010c 	add.w	r1, r4, #12
 80055f0:	e841 3200 	strex	r2, r3, [r1]
 80055f4:	2a00      	cmp	r2, #0
 80055f6:	d1f3      	bne.n	80055e0 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	f104 0314 	add.w	r3, r4, #20
 80055fc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005600:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	f104 0114 	add.w	r1, r4, #20
 8005608:	e841 3200 	strex	r2, r3, [r1]
 800560c:	2a00      	cmp	r2, #0
 800560e:	d1f3      	bne.n	80055f8 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8005610:	2320      	movs	r3, #32
 8005612:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8005616:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 800561a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 800561e:	2003      	movs	r0, #3
}
 8005620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005624:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562c:	e7b7      	b.n	800559e <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 800562e:	2002      	movs	r0, #2
}
 8005630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005634:	692b      	ldr	r3, [r5, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d19f      	bne.n	800557a <HAL_UART_Transmit+0x4a>
 800563a:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 800563c:	4699      	mov	r9, r3
 800563e:	e79c      	b.n	800557a <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	065b      	lsls	r3, r3, #25
 8005644:	d4b9      	bmi.n	80055ba <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005646:	b12e      	cbz	r6, 8005654 <HAL_UART_Transmit+0x124>
 8005648:	f7fd fd5a 	bl	8003100 <HAL_GetTick>
 800564c:	1bc0      	subs	r0, r0, r7
 800564e:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005650:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005652:	d2ad      	bcs.n	80055b0 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	f104 030c 	add.w	r3, r4, #12
 8005658:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800565c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	f104 010c 	add.w	r1, r4, #12
 8005664:	e841 3200 	strex	r2, r3, [r1]
 8005668:	2a00      	cmp	r2, #0
 800566a:	d1f3      	bne.n	8005654 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	f104 0314 	add.w	r3, r4, #20
 8005670:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005674:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	f104 0114 	add.w	r1, r4, #20
 800567c:	e841 3200 	strex	r2, r3, [r1]
 8005680:	2a00      	cmp	r2, #0
 8005682:	d1f3      	bne.n	800566c <HAL_UART_Transmit+0x13c>
 8005684:	e7c4      	b.n	8005610 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005686:	682c      	ldr	r4, [r5, #0]
 8005688:	e792      	b.n	80055b0 <HAL_UART_Transmit+0x80>
 800568a:	bf00      	nop

0800568c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800568c:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800568e:	4903      	ldr	r1, [pc, #12]	; (800569c <MX_FATFS_Init+0x10>)
 8005690:	4803      	ldr	r0, [pc, #12]	; (80056a0 <MX_FATFS_Init+0x14>)
 8005692:	f002 f985 	bl	80079a0 <FATFS_LinkDriver>
 8005696:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <MX_FATFS_Init+0x18>)
 8005698:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800569a:	bd08      	pop	{r3, pc}
 800569c:	200024f0 	.word	0x200024f0
 80056a0:	20000010 	.word	0x20000010
 80056a4:	200024f4 	.word	0x200024f4

080056a8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80056a8:	2000      	movs	r0, #0
 80056aa:	4770      	bx	lr

080056ac <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80056ac:	f7fc b81e 	b.w	80016ec <SD_disk_initialize>

080056b0 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80056b0:	f7fc b92c 	b.w	800190c <SD_disk_status>

080056b4 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80056b4:	f7fc b934 	b.w	8001920 <SD_disk_read>

080056b8 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80056b8:	f7fc ba7c 	b.w	8001bb4 <SD_disk_write>

080056bc <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80056bc:	f7fc bc6e 	b.w	8001f9c <SD_disk_ioctl>

080056c0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80056c0:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <disk_status+0x10>)
 80056c2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80056c6:	4403      	add	r3, r0
 80056c8:	6852      	ldr	r2, [r2, #4]
 80056ca:	7a18      	ldrb	r0, [r3, #8]
 80056cc:	6853      	ldr	r3, [r2, #4]
 80056ce:	4718      	bx	r3
 80056d0:	20002520 	.word	0x20002520

080056d4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <disk_initialize+0x1c>)
 80056d6:	5c1a      	ldrb	r2, [r3, r0]
 80056d8:	b942      	cbnz	r2, 80056ec <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80056da:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 80056de:	2101      	movs	r1, #1
 80056e0:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80056e2:	6852      	ldr	r2, [r2, #4]
 80056e4:	4418      	add	r0, r3
 80056e6:	6813      	ldr	r3, [r2, #0]
 80056e8:	7a00      	ldrb	r0, [r0, #8]
 80056ea:	4718      	bx	r3
  }
  return stat;
}
 80056ec:	2000      	movs	r0, #0
 80056ee:	4770      	bx	lr
 80056f0:	20002520 	.word	0x20002520

080056f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80056f4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80056f6:	4c05      	ldr	r4, [pc, #20]	; (800570c <disk_read+0x18>)
 80056f8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80056fc:	4404      	add	r4, r0
 80056fe:	686d      	ldr	r5, [r5, #4]
 8005700:	7a20      	ldrb	r0, [r4, #8]
 8005702:	68ac      	ldr	r4, [r5, #8]
 8005704:	46a4      	mov	ip, r4
  return res;
}
 8005706:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005708:	4760      	bx	ip
 800570a:	bf00      	nop
 800570c:	20002520 	.word	0x20002520

08005710 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005710:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005712:	4c05      	ldr	r4, [pc, #20]	; (8005728 <disk_write+0x18>)
 8005714:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8005718:	4404      	add	r4, r0
 800571a:	686d      	ldr	r5, [r5, #4]
 800571c:	7a20      	ldrb	r0, [r4, #8]
 800571e:	68ec      	ldr	r4, [r5, #12]
 8005720:	46a4      	mov	ip, r4
  return res;
}
 8005722:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005724:	4760      	bx	ip
 8005726:	bf00      	nop
 8005728:	20002520 	.word	0x20002520

0800572c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <disk_ioctl+0x14>)
 800572e:	eb03 0c00 	add.w	ip, r3, r0
 8005732:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005736:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	4718      	bx	r3
 8005740:	20002520 	.word	0x20002520

08005744 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8005744:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <inc_lock+0xac>)
{
 8005746:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	6805      	ldr	r5, [r0, #0]
 800574c:	4295      	cmp	r5, r2
 800574e:	d01d      	beq.n	800578c <inc_lock+0x48>
 8005750:	691c      	ldr	r4, [r3, #16]
 8005752:	42ac      	cmp	r4, r5
 8005754:	d007      	beq.n	8005766 <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005756:	2a00      	cmp	r2, #0
 8005758:	d02e      	beq.n	80057b8 <inc_lock+0x74>
 800575a:	2c00      	cmp	r4, #0
 800575c:	d044      	beq.n	80057e8 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800575e:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 8005760:	4620      	mov	r0, r4
 8005762:	bcf0      	pop	{r4, r5, r6, r7}
 8005764:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 8005766:	695e      	ldr	r6, [r3, #20]
 8005768:	6887      	ldr	r7, [r0, #8]
 800576a:	42be      	cmp	r6, r7
 800576c:	d1f3      	bne.n	8005756 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 800576e:	699e      	ldr	r6, [r3, #24]
 8005770:	6947      	ldr	r7, [r0, #20]
 8005772:	42be      	cmp	r6, r7
 8005774:	d1ef      	bne.n	8005756 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005776:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005778:	b999      	cbnz	r1, 80057a2 <inc_lock+0x5e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800577a:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 800577e:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8005782:	8989      	ldrh	r1, [r1, #12]
	return i + 1;
 8005784:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005786:	1c4a      	adds	r2, r1, #1
 8005788:	b292      	uxth	r2, r2
 800578a:	e028      	b.n	80057de <inc_lock+0x9a>
		if (Files[i].fs == dp->obj.fs &&
 800578c:	6884      	ldr	r4, [r0, #8]
 800578e:	685e      	ldr	r6, [r3, #4]
 8005790:	42a6      	cmp	r6, r4
 8005792:	d1dd      	bne.n	8005750 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 8005794:	689c      	ldr	r4, [r3, #8]
 8005796:	6946      	ldr	r6, [r0, #20]
 8005798:	42a6      	cmp	r6, r4
 800579a:	d1d9      	bne.n	8005750 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800579c:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800579e:	2900      	cmp	r1, #0
 80057a0:	d0eb      	beq.n	800577a <inc_lock+0x36>
 80057a2:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 80057a6:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 80057aa:	8989      	ldrh	r1, [r1, #12]
 80057ac:	2900      	cmp	r1, #0
 80057ae:	d1d6      	bne.n	800575e <inc_lock+0x1a>
	return i + 1;
 80057b0:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80057b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057b6:	e012      	b.n	80057de <inc_lock+0x9a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057b8:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80057ba:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 80057bc:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 80057c0:	eb03 1102 	add.w	r1, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 80057c4:	6942      	ldr	r2, [r0, #20]
 80057c6:	6880      	ldr	r0, [r0, #8]
		Files[i].fs = dp->obj.fs;
 80057c8:	f843 500c 	str.w	r5, [r3, ip]
		Files[i].clu = dp->obj.sclust;
 80057cc:	e9c1 0201 	strd	r0, r2, [r1, #4]
		Files[i].ctr = 0;
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80057d6:	bf14      	ite	ne
 80057d8:	f44f 7280 	movne.w	r2, #256	; 0x100
 80057dc:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80057de:	4463      	add	r3, ip
}
 80057e0:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80057e2:	819a      	strh	r2, [r3, #12]
}
 80057e4:	bcf0      	pop	{r4, r5, r6, r7}
 80057e6:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057e8:	2402      	movs	r4, #2
 80057ea:	2201      	movs	r2, #1
 80057ec:	e7e5      	b.n	80057ba <inc_lock+0x76>
 80057ee:	bf00      	nop
 80057f0:	200024fc 	.word	0x200024fc

080057f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80057f4:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80057f6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80057fa:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80057fc:	42b1      	cmp	r1, r6
{
 80057fe:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005800:	70c3      	strb	r3, [r0, #3]
 8005802:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005804:	d00c      	beq.n	8005820 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005806:	460d      	mov	r5, r1
 8005808:	460a      	mov	r2, r1
 800580a:	7840      	ldrb	r0, [r0, #1]
 800580c:	2301      	movs	r3, #1
 800580e:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8005812:	f7ff ff6f 	bl	80056f4 <disk_read>
 8005816:	b110      	cbz	r0, 800581e <check_fs+0x2a>
			fs->winsect = sector;
 8005818:	6326      	str	r6, [r4, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800581a:	2004      	movs	r0, #4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800581c:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800581e:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005820:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8005824:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005828:	429a      	cmp	r2, r3
 800582a:	d11a      	bne.n	8005862 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800582c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005830:	2be9      	cmp	r3, #233	; 0xe9
 8005832:	d007      	beq.n	8005844 <check_fs+0x50>
 8005834:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005836:	4a0d      	ldr	r2, [pc, #52]	; (800586c <check_fs+0x78>)
 8005838:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800583c:	4293      	cmp	r3, r2
 800583e:	d001      	beq.n	8005844 <check_fs+0x50>
	return 2;
 8005840:	2002      	movs	r0, #2
}
 8005842:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 8005844:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005848:	4a09      	ldr	r2, [pc, #36]	; (8005870 <check_fs+0x7c>)
 800584a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 8005852:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005856:	4b07      	ldr	r3, [pc, #28]	; (8005874 <check_fs+0x80>)
 8005858:	4298      	cmp	r0, r3
 800585a:	bf14      	ite	ne
 800585c:	2002      	movne	r0, #2
 800585e:	2000      	moveq	r0, #0
}
 8005860:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005862:	2003      	movs	r0, #3
}
 8005864:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005866:	2000      	movs	r0, #0
}
 8005868:	bd70      	pop	{r4, r5, r6, pc}
 800586a:	bf00      	nop
 800586c:	009000eb 	.word	0x009000eb
 8005870:	00544146 	.word	0x00544146
 8005874:	33544146 	.word	0x33544146

08005878 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8005878:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800587a:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800587c:	b083      	sub	sp, #12
 800587e:	4604      	mov	r4, r0
 8005880:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005882:	b973      	cbnz	r3, 80058a2 <move_window.part.0+0x2a>
 8005884:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005888:	462a      	mov	r2, r5
 800588a:	7860      	ldrb	r0, [r4, #1]
 800588c:	2301      	movs	r3, #1
 800588e:	f7ff ff31 	bl	80056f4 <disk_read>
				res = FR_DISK_ERR;
 8005892:	2800      	cmp	r0, #0
 8005894:	bf1c      	itt	ne
 8005896:	2001      	movne	r0, #1
 8005898:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 800589c:	6325      	str	r5, [r4, #48]	; 0x30
}
 800589e:	b003      	add	sp, #12
 80058a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 80058a2:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80058a4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80058a8:	2301      	movs	r3, #1
 80058aa:	7840      	ldrb	r0, [r0, #1]
 80058ac:	9101      	str	r1, [sp, #4]
 80058ae:	4632      	mov	r2, r6
 80058b0:	f7ff ff2e 	bl	8005710 <disk_write>
 80058b4:	b9b8      	cbnz	r0, 80058e6 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80058b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058b8:	69e3      	ldr	r3, [r4, #28]
 80058ba:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 80058bc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80058be:	1ab2      	subs	r2, r6, r2
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d2e1      	bcs.n	8005888 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80058c4:	78a7      	ldrb	r7, [r4, #2]
 80058c6:	2f01      	cmp	r7, #1
 80058c8:	d801      	bhi.n	80058ce <move_window.part.0+0x56>
 80058ca:	e7dd      	b.n	8005888 <move_window.part.0+0x10>
					wsect += fs->fsize;
 80058cc:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80058ce:	7860      	ldrb	r0, [r4, #1]
 80058d0:	9101      	str	r1, [sp, #4]
					wsect += fs->fsize;
 80058d2:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80058d4:	4632      	mov	r2, r6
 80058d6:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80058d8:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80058da:	f7ff ff19 	bl	8005710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80058de:	2f01      	cmp	r7, #1
 80058e0:	9901      	ldr	r1, [sp, #4]
 80058e2:	d1f3      	bne.n	80058cc <move_window.part.0+0x54>
 80058e4:	e7d0      	b.n	8005888 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 80058e6:	2001      	movs	r0, #1
}
 80058e8:	b003      	add	sp, #12
 80058ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (*path) {	/* If the pointer is not a null */
 80058f0:	6805      	ldr	r5, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 80058f6:	b175      	cbz	r5, 8005916 <find_volume+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80058f8:	782c      	ldrb	r4, [r5, #0]
 80058fa:	2c20      	cmp	r4, #32
 80058fc:	d914      	bls.n	8005928 <find_volume+0x3c>
 80058fe:	4623      	mov	r3, r4
 8005900:	46ac      	mov	ip, r5
 8005902:	e003      	b.n	800590c <find_volume+0x20>
 8005904:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8005908:	2b20      	cmp	r3, #32
 800590a:	d90d      	bls.n	8005928 <find_volume+0x3c>
 800590c:	2b3a      	cmp	r3, #58	; 0x3a
 800590e:	d1f9      	bne.n	8005904 <find_volume+0x18>
			i = *tp++ - '0';
 8005910:	3501      	adds	r5, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005912:	45ac      	cmp	ip, r5
 8005914:	d003      	beq.n	800591e <find_volume+0x32>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8005916:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8005918:	4620      	mov	r0, r4
 800591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800591e:	2c30      	cmp	r4, #48	; 0x30
 8005920:	d1f9      	bne.n	8005916 <find_volume+0x2a>
					*path = ++tt;
 8005922:	f10c 0301 	add.w	r3, ip, #1
 8005926:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005928:	4bb5      	ldr	r3, [pc, #724]	; (8005c00 <find_volume+0x314>)
 800592a:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800592c:	2d00      	cmp	r5, #0
 800592e:	f000 80f8 	beq.w	8005b22 <find_volume+0x236>
	*rfs = fs;							/* Return pointer to the file system object */
 8005932:	600d      	str	r5, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005934:	782b      	ldrb	r3, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005936:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800593a:	b17b      	cbz	r3, 800595c <find_volume+0x70>
		stat = disk_status(fs->drv);
 800593c:	7868      	ldrb	r0, [r5, #1]
 800593e:	f7ff febf 	bl	80056c0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005942:	07c1      	lsls	r1, r0, #31
 8005944:	d40a      	bmi.n	800595c <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005946:	2c00      	cmp	r4, #0
 8005948:	f000 80e4 	beq.w	8005b14 <find_volume+0x228>
 800594c:	f010 0404 	ands.w	r4, r0, #4
 8005950:	f000 80e0 	beq.w	8005b14 <find_volume+0x228>
				return FR_WRITE_PROTECTED;
 8005954:	240a      	movs	r4, #10
}
 8005956:	4620      	mov	r0, r4
 8005958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800595c:	2000      	movs	r0, #0
 800595e:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005960:	f7ff feb8 	bl	80056d4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005964:	07c2      	lsls	r2, r0, #31
 8005966:	f100 80d8 	bmi.w	8005b1a <find_volume+0x22e>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800596a:	b10c      	cbz	r4, 8005970 <find_volume+0x84>
 800596c:	0743      	lsls	r3, r0, #29
 800596e:	d4f1      	bmi.n	8005954 <find_volume+0x68>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005970:	7868      	ldrb	r0, [r5, #1]
 8005972:	f105 020c 	add.w	r2, r5, #12
 8005976:	2102      	movs	r1, #2
 8005978:	f7ff fed8 	bl	800572c <disk_ioctl>
 800597c:	4604      	mov	r4, r0
 800597e:	2800      	cmp	r0, #0
 8005980:	f040 80c7 	bne.w	8005b12 <find_volume+0x226>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005984:	89ab      	ldrh	r3, [r5, #12]
 8005986:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800598a:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 800598e:	f200 80c0 	bhi.w	8005b12 <find_volume+0x226>
 8005992:	1e5a      	subs	r2, r3, #1
 8005994:	421a      	tst	r2, r3
 8005996:	f040 80bc 	bne.w	8005b12 <find_volume+0x226>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800599a:	4601      	mov	r1, r0
 800599c:	4628      	mov	r0, r5
 800599e:	f7ff ff29 	bl	80057f4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80059a2:	2802      	cmp	r0, #2
 80059a4:	f000 808e 	beq.w	8005ac4 <find_volume+0x1d8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80059a8:	2804      	cmp	r0, #4
 80059aa:	f000 80b2 	beq.w	8005b12 <find_volume+0x226>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80059ae:	2801      	cmp	r0, #1
	bsect = 0;
 80059b0:	bf98      	it	ls
 80059b2:	4626      	movls	r6, r4
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80059b4:	f200 80b7 	bhi.w	8005b26 <find_volume+0x23a>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80059b8:	89a8      	ldrh	r0, [r5, #12]
 80059ba:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 80059be:	4283      	cmp	r3, r0
 80059c0:	f040 80b1 	bne.w	8005b26 <find_volume+0x23a>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80059c4:	f8b5 c04a 	ldrh.w	ip, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80059c8:	f1bc 0f00 	cmp.w	ip, #0
 80059cc:	d101      	bne.n	80059d2 <find_volume+0xe6>
	rv = rv << 8 | ptr[0];
 80059ce:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80059d2:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 80059d6:	f8c5 c01c 	str.w	ip, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80059da:	1e5a      	subs	r2, r3, #1
 80059dc:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80059de:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80059e0:	f200 80a1 	bhi.w	8005b26 <find_volume+0x23a>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80059e4:	f895 8041 	ldrb.w	r8, [r5, #65]	; 0x41
 80059e8:	fa1f f288 	uxth.w	r2, r8
 80059ec:	816a      	strh	r2, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	f000 8099 	beq.w	8005b26 <find_volume+0x23a>
 80059f4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80059f8:	ea12 0f08 	tst.w	r2, r8
 80059fc:	f040 8093 	bne.w	8005b26 <find_volume+0x23a>
	rv = ptr[1];
 8005a00:	f8b5 e045 	ldrh.w	lr, [r5, #69]	; 0x45
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005a04:	f8a5 e008 	strh.w	lr, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005a08:	0942      	lsrs	r2, r0, #5
 8005a0a:	fbbe faf2 	udiv	sl, lr, r2
 8005a0e:	fb02 e21a 	mls	r2, r2, sl, lr
 8005a12:	b292      	uxth	r2, r2
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	f040 8086 	bne.w	8005b26 <find_volume+0x23a>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005a1a:	f8b5 9047 	ldrh.w	r9, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005a1e:	f1b9 0f00 	cmp.w	r9, #0
 8005a22:	d101      	bne.n	8005a28 <find_volume+0x13c>
	rv = rv << 8 | ptr[0];
 8005a24:	f8d5 9054 	ldr.w	r9, [r5, #84]	; 0x54
	rv = ptr[1];
 8005a28:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	d07a      	beq.n	8005b26 <find_volume+0x23a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005a30:	fb0c f703 	mul.w	r7, ip, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005a34:	eb0a 0201 	add.w	r2, sl, r1
 8005a38:	443a      	add	r2, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005a3a:	4591      	cmp	r9, r2
 8005a3c:	d373      	bcc.n	8005b26 <find_volume+0x23a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005a3e:	eba9 0902 	sub.w	r9, r9, r2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005a42:	45c1      	cmp	r9, r8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005a44:	fbb9 f3f8 	udiv	r3, r9, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005a48:	d36d      	bcc.n	8005b26 <find_volume+0x23a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005a4a:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 8005a4e:	4543      	cmp	r3, r8
 8005a50:	f200 8087 	bhi.w	8005b62 <find_volume+0x276>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005a54:	f640 78f5 	movw	r8, #4085	; 0xff5
 8005a58:	4543      	cmp	r3, r8
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005a5a:	4431      	add	r1, r6
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005a5c:	f103 0302 	add.w	r3, r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8005a60:	4432      	add	r2, r6
		fs->volbase = bsect;							/* Volume start sector */
 8005a62:	622e      	str	r6, [r5, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005a64:	62ea      	str	r2, [r5, #44]	; 0x2c
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005a66:	61ab      	str	r3, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005a68:	6269      	str	r1, [r5, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005a6a:	f200 809b 	bhi.w	8005ba4 <find_volume+0x2b8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005a6e:	f1be 0f00 	cmp.w	lr, #0
 8005a72:	d058      	beq.n	8005b26 <find_volume+0x23a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005a74:	4439      	add	r1, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005a76:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8005a7a:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005a7e:	62a9      	str	r1, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005a80:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005a84:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005a86:	1e42      	subs	r2, r0, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	fbb3 f0f0 	udiv	r0, r3, r0
 8005a8e:	4584      	cmp	ip, r0
 8005a90:	d349      	bcc.n	8005b26 <find_volume+0x23a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a96:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8005a9e:	4859      	ldr	r0, [pc, #356]	; (8005c04 <find_volume+0x318>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005aa0:	4a59      	ldr	r2, [pc, #356]	; (8005c08 <find_volume+0x31c>)
	fs->id = ++Fsid;		/* File system mount ID */
 8005aa2:	8803      	ldrh	r3, [r0, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 8005aa4:	7029      	strb	r1, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	8003      	strh	r3, [r0, #0]
 8005aac:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005aae:	6813      	ldr	r3, [r2, #0]
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	bf04      	itt	eq
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	6013      	streq	r3, [r2, #0]
 8005ab8:	6913      	ldr	r3, [r2, #16]
 8005aba:	429d      	cmp	r5, r3
 8005abc:	d12a      	bne.n	8005b14 <find_volume+0x228>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6113      	str	r3, [r2, #16]
 8005ac2:	e027      	b.n	8005b14 <find_volume+0x228>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005ac4:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d048      	beq.n	8005b5e <find_volume+0x272>
	rv = rv << 8 | ptr[0];
 8005acc:	f8d5 91fa 	ldr.w	r9, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005ad0:	f895 3206 	ldrb.w	r3, [r5, #518]	; 0x206
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d040      	beq.n	8005b5a <find_volume+0x26e>
	rv = rv << 8 | ptr[0];
 8005ad8:	f8d5 820a 	ldr.w	r8, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005adc:	f895 7216 	ldrb.w	r7, [r5, #534]	; 0x216
 8005ae0:	b10f      	cbz	r7, 8005ae6 <find_volume+0x1fa>
	rv = rv << 8 | ptr[0];
 8005ae2:	f8d5 721a 	ldr.w	r7, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005ae6:	f895 6226 	ldrb.w	r6, [r5, #550]	; 0x226
 8005aea:	b10e      	cbz	r6, 8005af0 <find_volume+0x204>
	rv = rv << 8 | ptr[0];
 8005aec:	f8d5 622a 	ldr.w	r6, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005af0:	f1b9 0f00 	cmp.w	r9, #0
 8005af4:	d121      	bne.n	8005b3a <find_volume+0x24e>
 8005af6:	f1b8 0f00 	cmp.w	r8, #0
 8005afa:	d116      	bne.n	8005b2a <find_volume+0x23e>
 8005afc:	bb2f      	cbnz	r7, 8005b4a <find_volume+0x25e>
 8005afe:	b196      	cbz	r6, 8005b26 <find_volume+0x23a>
 8005b00:	4631      	mov	r1, r6
 8005b02:	4628      	mov	r0, r5
 8005b04:	f7ff fe76 	bl	80057f4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005b08:	2801      	cmp	r0, #1
 8005b0a:	f67f af55 	bls.w	80059b8 <find_volume+0xcc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005b0e:	2804      	cmp	r0, #4
 8005b10:	d109      	bne.n	8005b26 <find_volume+0x23a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005b12:	2401      	movs	r4, #1
}
 8005b14:	4620      	mov	r0, r4
 8005b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005b1a:	2403      	movs	r4, #3
}
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005b22:	240c      	movs	r4, #12
 8005b24:	e7f6      	b.n	8005b14 <find_volume+0x228>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005b26:	240d      	movs	r4, #13
 8005b28:	e7f4      	b.n	8005b14 <find_volume+0x228>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f7ff fe61 	bl	80057f4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005b32:	2801      	cmp	r0, #1
 8005b34:	d8e2      	bhi.n	8005afc <find_volume+0x210>
 8005b36:	4646      	mov	r6, r8
 8005b38:	e73e      	b.n	80059b8 <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f7ff fe59 	bl	80057f4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005b42:	2801      	cmp	r0, #1
 8005b44:	d8d7      	bhi.n	8005af6 <find_volume+0x20a>
 8005b46:	464e      	mov	r6, r9
 8005b48:	e736      	b.n	80059b8 <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f7ff fe51 	bl	80057f4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005b52:	2801      	cmp	r0, #1
 8005b54:	d8d3      	bhi.n	8005afe <find_volume+0x212>
 8005b56:	463e      	mov	r6, r7
 8005b58:	e72e      	b.n	80059b8 <find_volume+0xcc>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005b5a:	4698      	mov	r8, r3
 8005b5c:	e7be      	b.n	8005adc <find_volume+0x1f0>
 8005b5e:	46a1      	mov	r9, r4
 8005b60:	e7b6      	b.n	8005ad0 <find_volume+0x1e4>
		fs->database = bsect + sysect;					/* Data start sector */
 8005b62:	4432      	add	r2, r6
 8005b64:	62ea      	str	r2, [r5, #44]	; 0x2c
	rv = rv << 8 | ptr[0];
 8005b66:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
		fs->volbase = bsect;							/* Volume start sector */
 8005b6a:	622e      	str	r6, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005b6c:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005b6e:	4431      	add	r1, r6
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005b70:	ea52 020e 	orrs.w	r2, r2, lr
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005b74:	6269      	str	r1, [r5, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005b76:	61ab      	str	r3, [r5, #24]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005b78:	d1d5      	bne.n	8005b26 <find_volume+0x23a>
	rv = rv << 8 | ptr[0];
 8005b7a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005b7c:	62aa      	str	r2, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005b7e:	1e42      	subs	r2, r0, #1
 8005b80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b84:	fbb3 f0f0 	udiv	r0, r3, r0
 8005b88:	4584      	cmp	ip, r0
 8005b8a:	d3cc      	bcc.n	8005b26 <find_volume+0x23a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b90:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005b94:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
		fs->fsi_flag = 0x80;
 8005b98:	2280      	movs	r2, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005b9a:	2b01      	cmp	r3, #1
		fs->fsi_flag = 0x80;
 8005b9c:	712a      	strb	r2, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005b9e:	d009      	beq.n	8005bb4 <find_volume+0x2c8>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005ba0:	2103      	movs	r1, #3
 8005ba2:	e77c      	b.n	8005a9e <find_volume+0x1b2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005ba4:	f1be 0f00 	cmp.w	lr, #0
 8005ba8:	d0bd      	beq.n	8005b26 <find_volume+0x23a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005baa:	4439      	add	r1, r7
 8005bac:	62a9      	str	r1, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	2102      	movs	r1, #2
 8005bb2:	e768      	b.n	8005a86 <find_volume+0x19a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005bb4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			&& move_window(fs, bsect + 1) == FR_OK)
 8005bb6:	1c71      	adds	r1, r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	d004      	beq.n	8005bc6 <find_volume+0x2da>
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f7ff fe5b 	bl	8005878 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d1ec      	bne.n	8005ba0 <find_volume+0x2b4>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005bc6:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
 8005bca:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 8005bce:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005bd0:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 8005bd2:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005bd4:	d1e4      	bne.n	8005ba0 <find_volume+0x2b4>
	rv = rv << 8 | ptr[0];
 8005bd6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <find_volume+0x320>)
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d1e0      	bne.n	8005ba0 <find_volume+0x2b4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005bde:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8005be2:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005be6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bea:	3320      	adds	r3, #32
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d1d7      	bne.n	8005ba0 <find_volume+0x2b4>
	rv = rv << 8 | ptr[0];
 8005bf0:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005bf4:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 8005bf8:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8005bfc:	e7d0      	b.n	8005ba0 <find_volume+0x2b4>
 8005bfe:	bf00      	nop
 8005c00:	200024f8 	.word	0x200024f8
 8005c04:	2000251c 	.word	0x2000251c
 8005c08:	200024fc 	.word	0x200024fc
 8005c0c:	41615252 	.word	0x41615252

08005c10 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8005c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 8005c14:	7803      	ldrb	r3, [r0, #0]
 8005c16:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8005c18:	4604      	mov	r4, r0
 8005c1a:	460d      	mov	r5, r1
 8005c1c:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8005c1e:	d006      	beq.n	8005c2e <put_fat.part.0+0x1e>
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d05f      	beq.n	8005ce4 <put_fat.part.0+0xd4>
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d021      	beq.n	8005c6c <put_fat.part.0+0x5c>
 8005c28:	2002      	movs	r0, #2
}
 8005c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c2e:	8987      	ldrh	r7, [r0, #12]
 8005c30:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c32:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c34:	0879      	lsrs	r1, r7, #1
 8005c36:	fbb5 f1f1 	udiv	r1, r5, r1
 8005c3a:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	d004      	beq.n	8005c4a <put_fat.part.0+0x3a>
 8005c40:	f7ff fe1a 	bl	8005878 <move_window.part.0>
			if (res != FR_OK) break;
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d1f0      	bne.n	8005c2a <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005c48:	89a7      	ldrh	r7, [r4, #12]
 8005c4a:	006d      	lsls	r5, r5, #1
 8005c4c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8005c50:	fbb5 f2f7 	udiv	r2, r5, r7
 8005c54:	fb07 5512 	mls	r5, r7, r2, r5
 8005c58:	1959      	adds	r1, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8005c5a:	555e      	strb	r6, [r3, r5]
 8005c5c:	f3c6 2607 	ubfx	r6, r6, #8, #8
			fs->wflag = 1;
 8005c60:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8005c62:	704e      	strb	r6, [r1, #1]
			fs->wflag = 1;
 8005c64:	70e3      	strb	r3, [r4, #3]
			break;
 8005c66:	2000      	movs	r0, #0
}
 8005c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bc = (UINT)clst; bc += bc / 2;
 8005c6c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c70:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c72:	6b02      	ldr	r2, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c74:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8005c78:	fbb7 f3fc 	udiv	r3, r7, ip
 8005c7c:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c7e:	4291      	cmp	r1, r2
 8005c80:	d007      	beq.n	8005c92 <put_fat.part.0+0x82>
 8005c82:	f7ff fdf9 	bl	8005878 <move_window.part.0>
			if (res != FR_OK) break;
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d1cf      	bne.n	8005c2a <put_fat.part.0+0x1a>
			p = fs->win + bc++ % SS(fs);
 8005c8a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8005c8e:	fbb7 f3fc 	udiv	r3, r7, ip
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005c92:	07ea      	lsls	r2, r5, #31
			p = fs->win + bc++ % SS(fs);
 8005c94:	fb0c 7313 	mls	r3, ip, r3, r7
 8005c98:	f104 0834 	add.w	r8, r4, #52	; 0x34
 8005c9c:	f107 0701 	add.w	r7, r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005ca0:	d548      	bpl.n	8005d34 <put_fat.part.0+0x124>
 8005ca2:	f818 2003 	ldrb.w	r2, [r8, r3]
 8005ca6:	f002 020f 	and.w	r2, r2, #15
 8005caa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8005cae:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005cb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005cb6:	89a0      	ldrh	r0, [r4, #12]
			fs->wflag = 1;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005cbc:	fbb7 f3f0 	udiv	r3, r7, r0
 8005cc0:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cc2:	4291      	cmp	r1, r2
 8005cc4:	d05b      	beq.n	8005d7e <put_fat.part.0+0x16e>
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f7ff fdd6 	bl	8005878 <move_window.part.0>
			if (res != FR_OK) break;
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d1ac      	bne.n	8005c2a <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8005cd0:	89a2      	ldrh	r2, [r4, #12]
 8005cd2:	fbb7 f3f2 	udiv	r3, r7, r2
 8005cd6:	fb02 7713 	mls	r7, r2, r3, r7
 8005cda:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005cde:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8005ce2:	e046      	b.n	8005d72 <put_fat.part.0+0x162>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005ce4:	8987      	ldrh	r7, [r0, #12]
 8005ce6:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ce8:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005cea:	08b9      	lsrs	r1, r7, #2
 8005cec:	fbb5 f1f1 	udiv	r1, r5, r1
 8005cf0:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cf2:	4299      	cmp	r1, r3
 8005cf4:	d004      	beq.n	8005d00 <put_fat.part.0+0xf0>
 8005cf6:	f7ff fdbf 	bl	8005878 <move_window.part.0>
			if (res != FR_OK) break;
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d195      	bne.n	8005c2a <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005cfe:	89a7      	ldrh	r7, [r4, #12]
 8005d00:	00ad      	lsls	r5, r5, #2
 8005d02:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8005d06:	fbb5 f3f7 	udiv	r3, r5, r7
 8005d0a:	fb07 5513 	mls	r5, r7, r3, r5
 8005d0e:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[0];
 8005d12:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005d14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005d18:	1941      	adds	r1, r0, r5
 8005d1a:	431e      	orrs	r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8005d1c:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005d1e:	5546      	strb	r6, [r0, r5]
 8005d20:	0a32      	lsrs	r2, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8005d22:	708b      	strb	r3, [r1, #2]
 8005d24:	0e36      	lsrs	r6, r6, #24
			fs->wflag = 1;
 8005d26:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8005d28:	704a      	strb	r2, [r1, #1]
	*ptr++ = (BYTE)val;
 8005d2a:	70ce      	strb	r6, [r1, #3]
			fs->wflag = 1;
 8005d2c:	70e3      	strb	r3, [r4, #3]
			break;
 8005d2e:	2000      	movs	r0, #0
}
 8005d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005d34:	f808 6003 	strb.w	r6, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d38:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
			fs->wflag = 1;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	fbb7 f2f3 	udiv	r2, r7, r3
 8005d46:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d48:	4288      	cmp	r0, r1
 8005d4a:	d008      	beq.n	8005d5e <put_fat.part.0+0x14e>
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f7ff fd93 	bl	8005878 <move_window.part.0>
			if (res != FR_OK) break;
 8005d52:	2800      	cmp	r0, #0
 8005d54:	f47f af69 	bne.w	8005c2a <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8005d58:	89a2      	ldrh	r2, [r4, #12]
 8005d5a:	fbb7 f3f2 	udiv	r3, r7, r2
 8005d5e:	fb02 7713 	mls	r7, r2, r3, r7
 8005d62:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d66:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8005d6a:	7819      	ldrb	r1, [r3, #0]
 8005d6c:	f021 060f 	bic.w	r6, r1, #15
 8005d70:	4316      	orrs	r6, r2
			fs->wflag = 1;
 8005d72:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d74:	701e      	strb	r6, [r3, #0]
			fs->wflag = 1;
 8005d76:	70e2      	strb	r2, [r4, #3]
			break;
 8005d78:	2000      	movs	r0, #0
}
 8005d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p = fs->win + bc % SS(fs);
 8005d7e:	fb00 7313 	mls	r3, r0, r3, r7
 8005d82:	4443      	add	r3, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d84:	e7ab      	b.n	8005cde <put_fat.part.0+0xce>
 8005d86:	bf00      	nop

08005d88 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005d88:	2901      	cmp	r1, #1
 8005d8a:	d90e      	bls.n	8005daa <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005d8e:	6983      	ldr	r3, [r0, #24]
 8005d90:	4299      	cmp	r1, r3
 8005d92:	460c      	mov	r4, r1
 8005d94:	4605      	mov	r5, r0
 8005d96:	d206      	bcs.n	8005da6 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 8005d98:	7803      	ldrb	r3, [r0, #0]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d056      	beq.n	8005e4c <get_fat.isra.0+0xc4>
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d03d      	beq.n	8005e1e <get_fat.isra.0+0x96>
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d003      	beq.n	8005dae <get_fat.isra.0+0x26>
 8005da6:	2001      	movs	r0, #1
}
 8005da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8005daa:	2001      	movs	r0, #1
}
 8005dac:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dae:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005db0:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005db4:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 8005db8:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dbc:	fbb7 f3fc 	udiv	r3, r7, ip
 8005dc0:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dc2:	4571      	cmp	r1, lr
 8005dc4:	d00a      	beq.n	8005ddc <get_fat.isra.0+0x54>
 8005dc6:	f7ff fd57 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d153      	bne.n	8005e76 <get_fat.isra.0+0xee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dd0:	f8d5 e030 	ldr.w	lr, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8005dd4:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8005dd8:	fbb7 f3fc 	udiv	r3, r7, ip
 8005ddc:	fb0c 7313 	mls	r3, ip, r3, r7
 8005de0:	442b      	add	r3, r5
 8005de2:	3701      	adds	r7, #1
 8005de4:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005de8:	fbb7 f3fc 	udiv	r3, r7, ip
 8005dec:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dee:	4571      	cmp	r1, lr
 8005df0:	d008      	beq.n	8005e04 <get_fat.isra.0+0x7c>
 8005df2:	4628      	mov	r0, r5
 8005df4:	f7ff fd40 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d13c      	bne.n	8005e76 <get_fat.isra.0+0xee>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005dfc:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8005e00:	fbb7 f3fc 	udiv	r3, r7, ip
 8005e04:	fb0c 7713 	mls	r7, ip, r3, r7
 8005e08:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005e0a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8005e0c:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8005e10:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005e14:	bf4c      	ite	mi
 8005e16:	0900      	lsrmi	r0, r0, #4
 8005e18:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8005e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e1e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005e20:	8983      	ldrh	r3, [r0, #12]
 8005e22:	0899      	lsrs	r1, r3, #2
 8005e24:	fbb4 f1f1 	udiv	r1, r4, r1
 8005e28:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e2a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005e2c:	4291      	cmp	r1, r2
 8005e2e:	d003      	beq.n	8005e38 <get_fat.isra.0+0xb0>
 8005e30:	f7ff fd22 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e34:	b9f8      	cbnz	r0, 8005e76 <get_fat.isra.0+0xee>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005e36:	89ab      	ldrh	r3, [r5, #12]
 8005e38:	00a4      	lsls	r4, r4, #2
 8005e3a:	fbb4 f2f3 	udiv	r2, r4, r3
 8005e3e:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 8005e42:	442c      	add	r4, r5
 8005e44:	6b60      	ldr	r0, [r4, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005e46:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8005e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e4c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005e4e:	8983      	ldrh	r3, [r0, #12]
 8005e50:	0859      	lsrs	r1, r3, #1
 8005e52:	fbb4 f1f1 	udiv	r1, r4, r1
 8005e56:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e58:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005e5a:	4291      	cmp	r1, r2
 8005e5c:	d003      	beq.n	8005e66 <get_fat.isra.0+0xde>
 8005e5e:	f7ff fd0b 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e62:	b940      	cbnz	r0, 8005e76 <get_fat.isra.0+0xee>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005e64:	89ab      	ldrh	r3, [r5, #12]
 8005e66:	0064      	lsls	r4, r4, #1
 8005e68:	fbb4 f2f3 	udiv	r2, r4, r3
 8005e6c:	fb03 4412 	mls	r4, r3, r2, r4
 8005e70:	4425      	add	r5, r4
 8005e72:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 8005e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e7c <dir_read.constprop.0>:
FRESULT dir_read (
 8005e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while (dp->sect) {
 8005e80:	f8d0 801c 	ldr.w	r8, [r0, #28]
	FATFS *fs = dp->obj.fs;
 8005e84:	6806      	ldr	r6, [r0, #0]
FRESULT dir_read (
 8005e86:	b083      	sub	sp, #12
 8005e88:	4604      	mov	r4, r0
	while (dp->sect) {
 8005e8a:	f1b8 0f00 	cmp.w	r8, #0
 8005e8e:	d05d      	beq.n	8005f4c <dir_read.constprop.0+0xd0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e90:	f106 0734 	add.w	r7, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e94:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8005e96:	4545      	cmp	r5, r8
 8005e98:	d014      	beq.n	8005ec4 <dir_read.constprop.0+0x48>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e9a:	78f3      	ldrb	r3, [r6, #3]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d15c      	bne.n	8005f5a <dir_read.constprop.0+0xde>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005ea0:	7870      	ldrb	r0, [r6, #1]
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	4639      	mov	r1, r7
 8005ea8:	f7ff fc24 	bl	80056f4 <disk_read>
 8005eac:	b140      	cbz	r0, 8005ec0 <dir_read.constprop.0+0x44>
			fs->winsect = sector;
 8005eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb2:	6333      	str	r3, [r6, #48]	; 0x30
				res = FR_DISK_ERR;
 8005eb4:	2001      	movs	r0, #1
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61e3      	str	r3, [r4, #28]
}
 8005eba:	b003      	add	sp, #12
 8005ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			fs->winsect = sector;
 8005ec0:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005ec4:	6a23      	ldr	r3, [r4, #32]
 8005ec6:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 8005ec8:	2a00      	cmp	r2, #0
 8005eca:	d03f      	beq.n	8005f4c <dir_read.constprop.0+0xd0>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005ecc:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005ece:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed4:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005ed6:	d007      	beq.n	8005ee8 <dir_read.constprop.0+0x6c>
 8005ed8:	2a2e      	cmp	r2, #46	; 0x2e
 8005eda:	d005      	beq.n	8005ee8 <dir_read.constprop.0+0x6c>
 8005edc:	2b0f      	cmp	r3, #15
 8005ede:	d003      	beq.n	8005ee8 <dir_read.constprop.0+0x6c>
 8005ee0:	f023 0320 	bic.w	r3, r3, #32
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d122      	bne.n	8005f2e <dir_read.constprop.0+0xb2>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005ee8:	6963      	ldr	r3, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005eea:	f8d4 801c 	ldr.w	r8, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005eee:	3320      	adds	r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ef0:	f1b8 0f00 	cmp.w	r8, #0
 8005ef4:	d02a      	beq.n	8005f4c <dir_read.constprop.0+0xd0>
 8005ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005efa:	d227      	bcs.n	8005f4c <dir_read.constprop.0+0xd0>
	FATFS *fs = dp->obj.fs;
 8005efc:	6825      	ldr	r5, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005efe:	89aa      	ldrh	r2, [r5, #12]
 8005f00:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f04:	fb02 3210 	mls	r2, r2, r0, r3
 8005f08:	bb12      	cbnz	r2, 8005f50 <dir_read.constprop.0+0xd4>
		if (!dp->clust) {		/* Static table */
 8005f0a:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8005f0c:	f108 0801 	add.w	r8, r8, #1
 8005f10:	f8c4 801c 	str.w	r8, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8005f14:	2900      	cmp	r1, #0
 8005f16:	d142      	bne.n	8005f9e <dir_read.constprop.0+0x122>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005f18:	892a      	ldrh	r2, [r5, #8]
 8005f1a:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8005f1e:	d915      	bls.n	8005f4c <dir_read.constprop.0+0xd0>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f20:	3534      	adds	r5, #52	; 0x34
 8005f22:	440d      	add	r5, r1
	dp->dptr = ofs;						/* Current entry */
 8005f24:	6163      	str	r3, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f26:	6225      	str	r5, [r4, #32]
	while (dp->sect) {
 8005f28:	f1b8 0f00 	cmp.w	r8, #0
 8005f2c:	d1b2      	bne.n	8005e94 <dir_read.constprop.0+0x18>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f2e:	2000      	movs	r0, #0
}
 8005f30:	b003      	add	sp, #12
 8005f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005f36:	4628      	mov	r0, r5
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	f7ff ff25 	bl	8005d88 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f3e:	2801      	cmp	r0, #1
 8005f40:	d94c      	bls.n	8005fdc <dir_read.constprop.0+0x160>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	d0b6      	beq.n	8005eb4 <dir_read.constprop.0+0x38>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005f46:	69aa      	ldr	r2, [r5, #24]
 8005f48:	4290      	cmp	r0, r2
 8005f4a:	d331      	bcc.n	8005fb0 <dir_read.constprop.0+0x134>
	FRESULT res = FR_NO_FILE;
 8005f4c:	2004      	movs	r0, #4
 8005f4e:	e7b2      	b.n	8005eb6 <dir_read.constprop.0+0x3a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f50:	3534      	adds	r5, #52	; 0x34
 8005f52:	4415      	add	r5, r2
	dp->dptr = ofs;						/* Current entry */
 8005f54:	6163      	str	r3, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f56:	6225      	str	r5, [r4, #32]
	while (dp->sect) {
 8005f58:	e79c      	b.n	8005e94 <dir_read.constprop.0+0x18>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005f5a:	7870      	ldrb	r0, [r6, #1]
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	462a      	mov	r2, r5
 8005f60:	4639      	mov	r1, r7
 8005f62:	f7ff fbd5 	bl	8005710 <disk_write>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d1a4      	bne.n	8005eb4 <dir_read.constprop.0+0x38>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f6a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005f6c:	69f3      	ldr	r3, [r6, #28]
			fs->wflag = 0;
 8005f6e:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f70:	1aaa      	subs	r2, r5, r2
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d294      	bcs.n	8005ea0 <dir_read.constprop.0+0x24>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f76:	f896 9002 	ldrb.w	r9, [r6, #2]
 8005f7a:	f1b9 0f01 	cmp.w	r9, #1
 8005f7e:	d801      	bhi.n	8005f84 <dir_read.constprop.0+0x108>
 8005f80:	e78e      	b.n	8005ea0 <dir_read.constprop.0+0x24>
					wsect += fs->fsize;
 8005f82:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f84:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8005f86:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f88:	462a      	mov	r2, r5
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f8e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f92:	f7ff fbbd 	bl	8005710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f96:	f1b9 0f01 	cmp.w	r9, #1
 8005f9a:	d1f2      	bne.n	8005f82 <dir_read.constprop.0+0x106>
 8005f9c:	e780      	b.n	8005ea0 <dir_read.constprop.0+0x24>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005f9e:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 8005fa2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005fa6:	ea1c 0900 	ands.w	r9, ip, r0
 8005faa:	d0c4      	beq.n	8005f36 <dir_read.constprop.0+0xba>
 8005fac:	4611      	mov	r1, r2
 8005fae:	e7b7      	b.n	8005f20 <dir_read.constprop.0+0xa4>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005fb0:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8005fb2:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8005fb4:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005fb6:	4290      	cmp	r0, r2
	return clst * fs->csize + fs->database;
 8005fb8:	bf3c      	itt	cc
 8005fba:	6aea      	ldrcc	r2, [r5, #44]	; 0x2c
 8005fbc:	f8b5 800a 	ldrhcc.w	r8, [r5, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005fc0:	9b01      	ldr	r3, [sp, #4]
	return clst * fs->csize + fs->database;
 8005fc2:	bf38      	it	cc
 8005fc4:	fb00 2808 	mlacc	r8, r0, r8, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005fc8:	89aa      	ldrh	r2, [r5, #12]
 8005fca:	fbb3 f1f2 	udiv	r1, r3, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005fce:	bf28      	it	cs
 8005fd0:	46c8      	movcs	r8, r9
				dp->sect = clust2sect(fs, clst);
 8005fd2:	f8c4 801c 	str.w	r8, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005fd6:	fb02 3111 	mls	r1, r2, r1, r3
 8005fda:	e7a1      	b.n	8005f20 <dir_read.constprop.0+0xa4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005fdc:	2002      	movs	r0, #2
 8005fde:	e76a      	b.n	8005eb6 <dir_read.constprop.0+0x3a>

08005fe0 <sync_fs>:
{
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005fe2:	78c3      	ldrb	r3, [r0, #3]
{
 8005fe4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005fe6:	b95b      	cbnz	r3, 8006000 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005fe8:	7823      	ldrb	r3, [r4, #0]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d029      	beq.n	8006042 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005fee:	2200      	movs	r2, #0
 8005ff0:	7860      	ldrb	r0, [r4, #1]
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	f7ff fb9a 	bl	800572c <disk_ioctl>
			res = FR_DISK_ERR;
 8005ff8:	3800      	subs	r0, #0
 8005ffa:	bf18      	it	ne
 8005ffc:	2001      	movne	r0, #1
}
 8005ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8006000:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006002:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8006006:	2301      	movs	r3, #1
 8006008:	7840      	ldrb	r0, [r0, #1]
 800600a:	462a      	mov	r2, r5
 800600c:	4639      	mov	r1, r7
 800600e:	f7ff fb7f 	bl	8005710 <disk_write>
 8006012:	2800      	cmp	r0, #0
 8006014:	d14f      	bne.n	80060b6 <sync_fs+0xd6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006016:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006018:	69e3      	ldr	r3, [r4, #28]
			fs->wflag = 0;
 800601a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800601c:	1aaa      	subs	r2, r5, r2
 800601e:	429a      	cmp	r2, r3
 8006020:	d2e2      	bcs.n	8005fe8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006022:	78a6      	ldrb	r6, [r4, #2]
 8006024:	2e01      	cmp	r6, #1
 8006026:	d801      	bhi.n	800602c <sync_fs+0x4c>
 8006028:	e7de      	b.n	8005fe8 <sync_fs+0x8>
					wsect += fs->fsize;
 800602a:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800602c:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800602e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006030:	462a      	mov	r2, r5
 8006032:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006034:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006036:	4639      	mov	r1, r7
 8006038:	f7ff fb6a 	bl	8005710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800603c:	2e01      	cmp	r6, #1
 800603e:	d1f4      	bne.n	800602a <sync_fs+0x4a>
 8006040:	e7d2      	b.n	8005fe8 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006042:	7926      	ldrb	r6, [r4, #4]
 8006044:	2e01      	cmp	r6, #1
 8006046:	d1d2      	bne.n	8005fee <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8006048:	f104 0734 	add.w	r7, r4, #52	; 0x34
		*d++ = (BYTE)val;
 800604c:	89a2      	ldrh	r2, [r4, #12]
 800604e:	2100      	movs	r1, #0
 8006050:	4638      	mov	r0, r7
 8006052:	f001 fd03 	bl	8007a5c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8006056:	4b19      	ldr	r3, [pc, #100]	; (80060bc <sync_fs+0xdc>)
 8006058:	6363      	str	r3, [r4, #52]	; 0x34
 800605a:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800605e:	6962      	ldr	r2, [r4, #20]
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006060:	6925      	ldr	r5, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006062:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 8006066:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800606a:	3320      	adds	r3, #32
 800606c:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 8006070:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006072:	f884 321d 	strb.w	r3, [r4, #541]	; 0x21d
 8006076:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006078:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val;
 800607a:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
			fs->winsect = fs->volbase + 1;
 800607e:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8006080:	f884 5220 	strb.w	r5, [r4, #544]	; 0x220
 8006084:	0a28      	lsrs	r0, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006086:	f64a 2155 	movw	r1, #43605	; 0xaa55
			fs->winsect = fs->volbase + 1;
 800608a:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800608c:	f884 0221 	strb.w	r0, [r4, #545]	; 0x221
 8006090:	0c28      	lsrs	r0, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006092:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8006094:	f8a4 1232 	strh.w	r1, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val; val >>= 8;
 8006098:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
 800609c:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80060a0:	4633      	mov	r3, r6
 80060a2:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80060a4:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80060a6:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val;
 80060a8:	f884 5223 	strb.w	r5, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80060ac:	f7ff fb30 	bl	8005710 <disk_write>
			fs->fsi_flag = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	7123      	strb	r3, [r4, #4]
 80060b4:	e79b      	b.n	8005fee <sync_fs+0xe>
			res = FR_DISK_ERR;
 80060b6:	2001      	movs	r0, #1
}
 80060b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ba:	bf00      	nop
 80060bc:	41615252 	.word	0x41615252

080060c0 <create_chain>:
{
 80060c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 80060c4:	f8d0 8000 	ldr.w	r8, [r0]
{
 80060c8:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 80060ca:	4689      	mov	r9, r1
 80060cc:	2900      	cmp	r1, #0
 80060ce:	f040 80a5 	bne.w	800621c <create_chain+0x15c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80060d2:	f8d8 6010 	ldr.w	r6, [r8, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80060d6:	f8d8 3018 	ldr.w	r3, [r8, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80060da:	b9be      	cbnz	r6, 800610c <create_chain+0x4c>
 80060dc:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 80060de:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 80060e0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80060e2:	429c      	cmp	r4, r3
 80060e4:	d316      	bcc.n	8006114 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 80060e6:	2e01      	cmp	r6, #1
 80060e8:	f000 80a8 	beq.w	800623c <create_chain+0x17c>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80060ec:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 80060ee:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80060f0:	69ab      	ldr	r3, [r5, #24]
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	d906      	bls.n	8006104 <create_chain+0x44>
		switch (fs->fs_type) {
 80060f6:	782b      	ldrb	r3, [r5, #0]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d078      	beq.n	80061ee <create_chain+0x12e>
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d05d      	beq.n	80061bc <create_chain+0xfc>
 8006100:	2b01      	cmp	r3, #1
 8006102:	d00b      	beq.n	800611c <create_chain+0x5c>
 8006104:	2401      	movs	r4, #1
}
 8006106:	4620      	mov	r0, r4
 8006108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800610c:	42b3      	cmp	r3, r6
 800610e:	bf98      	it	ls
 8006110:	2601      	movls	r6, #1
 8006112:	e7e4      	b.n	80060de <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006114:	2c01      	cmp	r4, #1
 8006116:	683d      	ldr	r5, [r7, #0]
 8006118:	d9f4      	bls.n	8006104 <create_chain+0x44>
 800611a:	e7e9      	b.n	80060f0 <create_chain+0x30>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800611c:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800611e:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006122:	89aa      	ldrh	r2, [r5, #12]
			bc = (UINT)clst; bc += bc / 2;
 8006124:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006128:	fbbb f3f2 	udiv	r3, fp, r2
 800612c:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800612e:	4561      	cmp	r1, ip
 8006130:	d00a      	beq.n	8006148 <create_chain+0x88>
 8006132:	4628      	mov	r0, r5
 8006134:	f7ff fba0 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006138:	2800      	cmp	r0, #0
 800613a:	d13a      	bne.n	80061b2 <create_chain+0xf2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800613c:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800613e:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8006142:	89aa      	ldrh	r2, [r5, #12]
 8006144:	fbbb f3f2 	udiv	r3, fp, r2
 8006148:	fb02 b313 	mls	r3, r2, r3, fp
 800614c:	442b      	add	r3, r5
 800614e:	f10b 0b01 	add.w	fp, fp, #1
 8006152:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006156:	fbbb f3f2 	udiv	r3, fp, r2
 800615a:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800615c:	4561      	cmp	r1, ip
 800615e:	d006      	beq.n	800616e <create_chain+0xae>
 8006160:	4628      	mov	r0, r5
 8006162:	f7ff fb89 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006166:	bb20      	cbnz	r0, 80061b2 <create_chain+0xf2>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006168:	89aa      	ldrh	r2, [r5, #12]
 800616a:	fbbb f3f2 	udiv	r3, fp, r2
 800616e:	fb02 b213 	mls	r2, r2, r3, fp
 8006172:	4415      	add	r5, r2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006174:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8006176:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800617a:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800617e:	bf4c      	ite	mi
 8006180:	091b      	lsrmi	r3, r3, #4
 8006182:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 8006186:	b133      	cbz	r3, 8006196 <create_chain+0xd6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006188:	2b01      	cmp	r3, #1
 800618a:	d0bb      	beq.n	8006104 <create_chain+0x44>
			if (ncl == scl) return 0;		/* No free cluster */
 800618c:	42a6      	cmp	r6, r4
 800618e:	d055      	beq.n	800623c <create_chain+0x17c>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006190:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006194:	e7a4      	b.n	80060e0 <create_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006196:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800619a:	42a3      	cmp	r3, r4
 800619c:	d9b2      	bls.n	8006104 <create_chain+0x44>
 800619e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061a2:	4621      	mov	r1, r4
 80061a4:	4640      	mov	r0, r8
 80061a6:	f7ff fd33 	bl	8005c10 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d04a      	beq.n	8006244 <create_chain+0x184>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80061ae:	2801      	cmp	r0, #1
 80061b0:	d1a8      	bne.n	8006104 <create_chain+0x44>
 80061b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 80061b6:	4620      	mov	r0, r4
 80061b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061bc:	89a8      	ldrh	r0, [r5, #12]
 80061be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80061c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061c2:	0881      	lsrs	r1, r0, #2
 80061c4:	fbb4 f1f1 	udiv	r1, r4, r1
 80061c8:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80061ca:	4299      	cmp	r1, r3
 80061cc:	d005      	beq.n	80061da <create_chain+0x11a>
 80061ce:	4628      	mov	r0, r5
 80061d0:	f7ff fb52 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d1ec      	bne.n	80061b2 <create_chain+0xf2>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80061d8:	89a8      	ldrh	r0, [r5, #12]
 80061da:	00a3      	lsls	r3, r4, #2
 80061dc:	fbb3 f2f0 	udiv	r2, r3, r0
 80061e0:	fb00 3312 	mls	r3, r0, r2, r3
	rv = rv << 8 | ptr[0];
 80061e4:	441d      	add	r5, r3
 80061e6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80061e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			break;
 80061ec:	e7cb      	b.n	8006186 <create_chain+0xc6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061ee:	89a8      	ldrh	r0, [r5, #12]
 80061f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80061f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061f4:	0841      	lsrs	r1, r0, #1
 80061f6:	fbb4 f1f1 	udiv	r1, r4, r1
 80061fa:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80061fc:	4299      	cmp	r1, r3
 80061fe:	d005      	beq.n	800620c <create_chain+0x14c>
 8006200:	4628      	mov	r0, r5
 8006202:	f7ff fb39 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006206:	2800      	cmp	r0, #0
 8006208:	d1d3      	bne.n	80061b2 <create_chain+0xf2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800620a:	89a8      	ldrh	r0, [r5, #12]
 800620c:	0063      	lsls	r3, r4, #1
 800620e:	fbb3 f2f0 	udiv	r2, r3, r0
 8006212:	fb00 3312 	mls	r3, r0, r2, r3
 8006216:	441d      	add	r5, r3
 8006218:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 800621a:	e7b4      	b.n	8006186 <create_chain+0xc6>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800621c:	4640      	mov	r0, r8
 800621e:	f7ff fdb3 	bl	8005d88 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006222:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006224:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006226:	f67f af6d 	bls.w	8006104 <create_chain+0x44>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800622a:	1c41      	adds	r1, r0, #1
 800622c:	d0c1      	beq.n	80061b2 <create_chain+0xf2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800622e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006232:	4283      	cmp	r3, r0
 8006234:	f63f af67 	bhi.w	8006106 <create_chain+0x46>
 8006238:	464e      	mov	r6, r9
 800623a:	e750      	b.n	80060de <create_chain+0x1e>
				if (ncl > scl) return 0;	/* No free cluster */
 800623c:	2400      	movs	r4, #0
}
 800623e:	4620      	mov	r0, r4
 8006240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK && clst != 0) {
 8006244:	f1b9 0f00 	cmp.w	r9, #0
 8006248:	d00f      	beq.n	800626a <create_chain+0x1aa>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800624a:	f1b9 0f01 	cmp.w	r9, #1
 800624e:	f43f af59 	beq.w	8006104 <create_chain+0x44>
 8006252:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006256:	4599      	cmp	r9, r3
 8006258:	f4bf af54 	bcs.w	8006104 <create_chain+0x44>
 800625c:	4622      	mov	r2, r4
 800625e:	4649      	mov	r1, r9
 8006260:	4640      	mov	r0, r8
 8006262:	f7ff fcd5 	bl	8005c10 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006266:	2800      	cmp	r0, #0
 8006268:	d1a1      	bne.n	80061ae <create_chain+0xee>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800626a:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 800626e:	3b02      	subs	r3, #2
 8006270:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 8006272:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006276:	d802      	bhi.n	800627e <create_chain+0x1be>
 8006278:	3a01      	subs	r2, #1
 800627a:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 800627e:	f898 3004 	ldrb.w	r3, [r8, #4]
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	f888 3004 	strb.w	r3, [r8, #4]
 800628a:	e73c      	b.n	8006106 <create_chain+0x46>

0800628c <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800628c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006290:	6884      	ldr	r4, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8006292:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8006294:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8006296:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 8006298:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800629a:	b9bc      	cbnz	r4, 80062cc <dir_sdi.constprop.0+0x40>
 800629c:	783b      	ldrb	r3, [r7, #0]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d810      	bhi.n	80062c4 <dir_sdi.constprop.0+0x38>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80062a2:	893b      	ldrh	r3, [r7, #8]
 80062a4:	b15b      	cbz	r3, 80062be <dir_sdi.constprop.0+0x32>
		dp->sect = fs->dirbase;
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80062aa:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80062ac:	b13b      	cbz	r3, 80062be <dir_sdi.constprop.0+0x32>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80062ae:	3734      	adds	r7, #52	; 0x34
 80062b0:	6237      	str	r7, [r6, #32]
	return FR_OK;
 80062b2:	2000      	movs	r0, #0
}
 80062b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		dp->sect = clust2sect(fs, clst);
 80062b8:	2300      	movs	r3, #0
	dp->clust = clst;					/* Current cluster# */
 80062ba:	e9c6 4306 	strd	r4, r3, [r6, #24]
		switch (fs->fs_type) {
 80062be:	2002      	movs	r0, #2
}
 80062c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0eb      	beq.n	80062a2 <dir_sdi.constprop.0+0x16>
 80062ca:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80062cc:	897a      	ldrh	r2, [r7, #10]
 80062ce:	89bb      	ldrh	r3, [r7, #12]
 80062d0:	fb02 f303 	mul.w	r3, r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d179      	bne.n	80063cc <dir_sdi.constprop.0+0x140>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80062d8:	2c01      	cmp	r4, #1
 80062da:	d9f0      	bls.n	80062be <dir_sdi.constprop.0+0x32>
 80062dc:	6835      	ldr	r5, [r6, #0]
 80062de:	69ab      	ldr	r3, [r5, #24]
 80062e0:	429c      	cmp	r4, r3
 80062e2:	d2ec      	bcs.n	80062be <dir_sdi.constprop.0+0x32>
		switch (fs->fs_type) {
 80062e4:	782b      	ldrb	r3, [r5, #0]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d058      	beq.n	800639c <dir_sdi.constprop.0+0x110>
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d039      	beq.n	8006362 <dir_sdi.constprop.0+0xd6>
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d1e5      	bne.n	80062be <dir_sdi.constprop.0+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062f2:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80062f4:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062f8:	89aa      	ldrh	r2, [r5, #12]
			bc = (UINT)clst; bc += bc / 2;
 80062fa:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062fe:	fbb8 f3f2 	udiv	r3, r8, r2
 8006302:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006304:	4561      	cmp	r1, ip
 8006306:	d00a      	beq.n	800631e <dir_sdi.constprop.0+0x92>
 8006308:	4628      	mov	r0, r5
 800630a:	f7ff fab5 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800630e:	2800      	cmp	r0, #0
 8006310:	d15a      	bne.n	80063c8 <dir_sdi.constprop.0+0x13c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006312:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006314:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8006318:	89aa      	ldrh	r2, [r5, #12]
 800631a:	fbb8 f3f2 	udiv	r3, r8, r2
 800631e:	fb02 8313 	mls	r3, r2, r3, r8
 8006322:	442b      	add	r3, r5
 8006324:	f108 0801 	add.w	r8, r8, #1
 8006328:	f893 9034 	ldrb.w	r9, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800632c:	fbb8 f3f2 	udiv	r3, r8, r2
 8006330:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006332:	4561      	cmp	r1, ip
 8006334:	d007      	beq.n	8006346 <dir_sdi.constprop.0+0xba>
 8006336:	4628      	mov	r0, r5
 8006338:	f7ff fa9e 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800633c:	2800      	cmp	r0, #0
 800633e:	d143      	bne.n	80063c8 <dir_sdi.constprop.0+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006340:	89aa      	ldrh	r2, [r5, #12]
 8006342:	fbb8 f3f2 	udiv	r3, r8, r2
 8006346:	fb02 8813 	mls	r8, r2, r3, r8
 800634a:	4445      	add	r5, r8
 800634c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8006350:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006354:	07e3      	lsls	r3, r4, #31
 8006356:	bf4c      	ite	mi
 8006358:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 800635c:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
 8006360:	e016      	b.n	8006390 <dir_sdi.constprop.0+0x104>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006362:	89a8      	ldrh	r0, [r5, #12]
 8006364:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006366:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006368:	0881      	lsrs	r1, r0, #2
 800636a:	fbb4 f1f1 	udiv	r1, r4, r1
 800636e:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006370:	4299      	cmp	r1, r3
 8006372:	d004      	beq.n	800637e <dir_sdi.constprop.0+0xf2>
 8006374:	4628      	mov	r0, r5
 8006376:	f7ff fa7f 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800637a:	bb28      	cbnz	r0, 80063c8 <dir_sdi.constprop.0+0x13c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800637c:	89a8      	ldrh	r0, [r5, #12]
 800637e:	00a4      	lsls	r4, r4, #2
 8006380:	fbb4 f3f0 	udiv	r3, r4, r0
 8006384:	fb00 4413 	mls	r4, r0, r3, r4
	rv = rv << 8 | ptr[0];
 8006388:	4425      	add	r5, r4
 800638a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800638c:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006390:	2c01      	cmp	r4, #1
 8006392:	d994      	bls.n	80062be <dir_sdi.constprop.0+0x32>
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	42a3      	cmp	r3, r4
 8006398:	d89e      	bhi.n	80062d8 <dir_sdi.constprop.0+0x4c>
 800639a:	e790      	b.n	80062be <dir_sdi.constprop.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800639c:	89a8      	ldrh	r0, [r5, #12]
 800639e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063a2:	0841      	lsrs	r1, r0, #1
 80063a4:	fbb4 f1f1 	udiv	r1, r4, r1
 80063a8:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063aa:	4299      	cmp	r1, r3
 80063ac:	d004      	beq.n	80063b8 <dir_sdi.constprop.0+0x12c>
 80063ae:	4628      	mov	r0, r5
 80063b0:	f7ff fa62 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063b4:	b940      	cbnz	r0, 80063c8 <dir_sdi.constprop.0+0x13c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80063b6:	89a8      	ldrh	r0, [r5, #12]
 80063b8:	0064      	lsls	r4, r4, #1
 80063ba:	fbb4 f3f0 	udiv	r3, r4, r0
 80063be:	fb00 4413 	mls	r4, r0, r3, r4
 80063c2:	4425      	add	r5, r4
 80063c4:	8eac      	ldrh	r4, [r5, #52]	; 0x34
			break;
 80063c6:	e7e3      	b.n	8006390 <dir_sdi.constprop.0+0x104>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063c8:	2001      	movs	r0, #1
 80063ca:	e773      	b.n	80062b4 <dir_sdi.constprop.0+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80063cc:	69b9      	ldr	r1, [r7, #24]
	clst -= 2;
 80063ce:	1ea0      	subs	r0, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80063d0:	3902      	subs	r1, #2
 80063d2:	4288      	cmp	r0, r1
 80063d4:	f4bf af70 	bcs.w	80062b8 <dir_sdi.constprop.0+0x2c>
	return clst * fs->csize + fs->database;
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	fb00 3302 	mla	r3, r0, r2, r3
		dp->sect = clust2sect(fs, clst);
 80063de:	61f3      	str	r3, [r6, #28]
 80063e0:	e763      	b.n	80062aa <dir_sdi.constprop.0+0x1e>
 80063e2:	bf00      	nop

080063e4 <follow_path>:
{
 80063e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 80063e8:	f8d0 a000 	ldr.w	sl, [r0]
{
 80063ec:	b083      	sub	sp, #12
 80063ee:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80063f0:	780b      	ldrb	r3, [r1, #0]
 80063f2:	2b2f      	cmp	r3, #47	; 0x2f
 80063f4:	4689      	mov	r9, r1
 80063f6:	f101 0101 	add.w	r1, r1, #1
 80063fa:	d0f9      	beq.n	80063f0 <follow_path+0xc>
 80063fc:	2b5c      	cmp	r3, #92	; 0x5c
 80063fe:	d0f7      	beq.n	80063f0 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8006400:	2300      	movs	r3, #0
 8006402:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006404:	f899 3000 	ldrb.w	r3, [r9]
 8006408:	2b1f      	cmp	r3, #31
 800640a:	f240 8172 	bls.w	80066f2 <follow_path+0x30e>
	p = *path; sfn = dp->fn;
 800640e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8006412:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 8006414:	2320      	movs	r3, #32
 8006416:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 800641a:	6262      	str	r2, [r4, #36]	; 0x24
 800641c:	62a2      	str	r2, [r4, #40]	; 0x28
 800641e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8006422:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8006426:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		c = (BYTE)p[si++];
 800642a:	f899 3000 	ldrb.w	r3, [r9]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800642e:	2b20      	cmp	r3, #32
 8006430:	d90b      	bls.n	800644a <follow_path+0x66>
 8006432:	464f      	mov	r7, r9
	si = i = 0; ni = 8;
 8006434:	2500      	movs	r5, #0
 8006436:	2608      	movs	r6, #8
		c = (BYTE)p[si++];
 8006438:	2101      	movs	r1, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800643a:	2b2f      	cmp	r3, #47	; 0x2f
 800643c:	d03e      	beq.n	80064bc <follow_path+0xd8>
 800643e:	2b5c      	cmp	r3, #92	; 0x5c
 8006440:	d03c      	beq.n	80064bc <follow_path+0xd8>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006442:	2b2e      	cmp	r3, #46	; 0x2e
 8006444:	d005      	beq.n	8006452 <follow_path+0x6e>
 8006446:	42b5      	cmp	r5, r6
 8006448:	d321      	bcc.n	800648e <follow_path+0xaa>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800644a:	2006      	movs	r0, #6
}
 800644c:	b003      	add	sp, #12
 800644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006452:	2e0b      	cmp	r6, #11
 8006454:	d0f9      	beq.n	800644a <follow_path+0x66>
			i = 8; ni = 11;				/* Goto extension */
 8006456:	2508      	movs	r5, #8
 8006458:	260b      	movs	r6, #11
		c = (BYTE)p[si++];
 800645a:	f817 3f01 	ldrb.w	r3, [r7, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800645e:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8006460:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006464:	d8e9      	bhi.n	800643a <follow_path+0x56>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006466:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800646a:	2be5      	cmp	r3, #229	; 0xe5
	*path = p + si;						/* Return pointer to the next segment */
 800646c:	4489      	add	r9, r1
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800646e:	f000 814b 	beq.w	8006708 <follow_path+0x324>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006472:	2304      	movs	r3, #4
 8006474:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006478:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800647a:	6827      	ldr	r7, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800647c:	f7ff ff06 	bl	800628c <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 8006480:	2800      	cmp	r0, #0
 8006482:	d035      	beq.n	80064f0 <follow_path+0x10c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006484:	2804      	cmp	r0, #4
			ns = dp->fn[NSFLAG];
 8006486:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 800648a:	d1df      	bne.n	800644c <follow_path+0x68>
 800648c:	e0d2      	b.n	8006634 <follow_path+0x250>
		if (c >= 0x80) {				/* Extended character? */
 800648e:	061a      	lsls	r2, r3, #24
 8006490:	d502      	bpl.n	8006498 <follow_path+0xb4>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006492:	4aa2      	ldr	r2, [pc, #648]	; (800671c <follow_path+0x338>)
 8006494:	3b80      	subs	r3, #128	; 0x80
 8006496:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 8006498:	48a1      	ldr	r0, [pc, #644]	; (8006720 <follow_path+0x33c>)
 800649a:	2222      	movs	r2, #34	; 0x22
 800649c:	4293      	cmp	r3, r2
 800649e:	d0d4      	beq.n	800644a <follow_path+0x66>
 80064a0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80064a4:	2a00      	cmp	r2, #0
 80064a6:	d1f9      	bne.n	800649c <follow_path+0xb8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80064a8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80064ac:	2a19      	cmp	r2, #25
 80064ae:	d801      	bhi.n	80064b4 <follow_path+0xd0>
 80064b0:	3b20      	subs	r3, #32
 80064b2:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 80064b4:	9a01      	ldr	r2, [sp, #4]
 80064b6:	5553      	strb	r3, [r2, r5]
 80064b8:	3501      	adds	r5, #1
 80064ba:	e7ce      	b.n	800645a <follow_path+0x76>
 80064bc:	eb09 0301 	add.w	r3, r9, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80064c0:	781a      	ldrb	r2, [r3, #0]
 80064c2:	2a2f      	cmp	r2, #47	; 0x2f
 80064c4:	4699      	mov	r9, r3
 80064c6:	f103 0301 	add.w	r3, r3, #1
 80064ca:	d0f9      	beq.n	80064c0 <follow_path+0xdc>
 80064cc:	2a5c      	cmp	r2, #92	; 0x5c
 80064ce:	d0f7      	beq.n	80064c0 <follow_path+0xdc>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	d0ba      	beq.n	800644a <follow_path+0x66>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80064d4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80064d8:	2be5      	cmp	r3, #229	; 0xe5
 80064da:	f000 8119 	beq.w	8006710 <follow_path+0x32c>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80064de:	2300      	movs	r3, #0
 80064e0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80064e4:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 80064e6:	6827      	ldr	r7, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80064e8:	f7ff fed0 	bl	800628c <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d1c9      	bne.n	8006484 <follow_path+0xa0>
		res = move_window(fs, dp->sect);
 80064f0:	f8d4 b01c 	ldr.w	fp, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80064f4:	465b      	mov	r3, fp
 80064f6:	f107 0634 	add.w	r6, r7, #52	; 0x34
 80064fa:	46bb      	mov	fp, r7
 80064fc:	461f      	mov	r7, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 80064fe:	f8db 5030 	ldr.w	r5, [fp, #48]	; 0x30
 8006502:	42bd      	cmp	r5, r7
 8006504:	d016      	beq.n	8006534 <follow_path+0x150>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006506:	f89b 3003 	ldrb.w	r3, [fp, #3]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 8096 	bne.w	800663c <follow_path+0x258>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006510:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006514:	2301      	movs	r3, #1
 8006516:	463a      	mov	r2, r7
 8006518:	4631      	mov	r1, r6
 800651a:	f7ff f8eb 	bl	80056f4 <disk_read>
 800651e:	b138      	cbz	r0, 8006530 <follow_path+0x14c>
			fs->winsect = sector;
 8006520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8006524:	2001      	movs	r0, #1
			fs->winsect = sector;
 8006526:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
}
 800652a:	b003      	add	sp, #12
 800652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8006530:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8006534:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006536:	781a      	ldrb	r2, [r3, #0]
 8006538:	2a00      	cmp	r2, #0
 800653a:	d079      	beq.n	8006630 <follow_path+0x24c>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800653c:	7ad9      	ldrb	r1, [r3, #11]
 800653e:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 8006542:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006544:	7ada      	ldrb	r2, [r3, #11]
 8006546:	f012 0208 	ands.w	r2, r2, #8
 800654a:	d01e      	beq.n	800658a <follow_path+0x1a6>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800654c:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800654e:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006550:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006552:	2f00      	cmp	r7, #0
 8006554:	d06c      	beq.n	8006630 <follow_path+0x24c>
 8006556:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800655a:	d269      	bcs.n	8006630 <follow_path+0x24c>
	FATFS *fs = dp->obj.fs;
 800655c:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800655e:	899a      	ldrh	r2, [r3, #12]
 8006560:	fbb5 f0f2 	udiv	r0, r5, r2
 8006564:	fb02 5210 	mls	r2, r2, r0, r5
 8006568:	b952      	cbnz	r2, 8006580 <follow_path+0x19c>
		if (!dp->clust) {		/* Static table */
 800656a:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800656c:	3701      	adds	r7, #1
 800656e:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8006570:	2900      	cmp	r1, #0
 8006572:	f040 808b 	bne.w	800668c <follow_path+0x2a8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006576:	8918      	ldrh	r0, [r3, #8]
 8006578:	ebb0 1f55 	cmp.w	r0, r5, lsr #5
 800657c:	f240 80a1 	bls.w	80066c2 <follow_path+0x2de>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006580:	3334      	adds	r3, #52	; 0x34
 8006582:	4413      	add	r3, r2
	dp->dptr = ofs;						/* Current entry */
 8006584:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006586:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8006588:	e7b9      	b.n	80064fe <follow_path+0x11a>
	} while (--cnt && r == 0);
 800658a:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 800658e:	7818      	ldrb	r0, [r3, #0]
 8006590:	4285      	cmp	r5, r0
 8006592:	d1db      	bne.n	800654c <follow_path+0x168>
 8006594:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 8006598:	7858      	ldrb	r0, [r3, #1]
 800659a:	4285      	cmp	r5, r0
 800659c:	d1d6      	bne.n	800654c <follow_path+0x168>
 800659e:	789d      	ldrb	r5, [r3, #2]
 80065a0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 80065a4:	4285      	cmp	r5, r0
 80065a6:	d1d1      	bne.n	800654c <follow_path+0x168>
 80065a8:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 80065ac:	78d8      	ldrb	r0, [r3, #3]
 80065ae:	4285      	cmp	r5, r0
 80065b0:	d1cc      	bne.n	800654c <follow_path+0x168>
 80065b2:	791d      	ldrb	r5, [r3, #4]
 80065b4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80065b8:	4285      	cmp	r5, r0
 80065ba:	d1c7      	bne.n	800654c <follow_path+0x168>
 80065bc:	795d      	ldrb	r5, [r3, #5]
 80065be:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80065c2:	4285      	cmp	r5, r0
 80065c4:	d1c2      	bne.n	800654c <follow_path+0x168>
 80065c6:	799d      	ldrb	r5, [r3, #6]
 80065c8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80065cc:	4285      	cmp	r5, r0
 80065ce:	d1bd      	bne.n	800654c <follow_path+0x168>
 80065d0:	79dd      	ldrb	r5, [r3, #7]
 80065d2:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80065d6:	4285      	cmp	r5, r0
 80065d8:	d1b8      	bne.n	800654c <follow_path+0x168>
 80065da:	7a1d      	ldrb	r5, [r3, #8]
 80065dc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80065e0:	4285      	cmp	r5, r0
 80065e2:	d1b3      	bne.n	800654c <follow_path+0x168>
 80065e4:	7a5d      	ldrb	r5, [r3, #9]
 80065e6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80065ea:	4285      	cmp	r5, r0
 80065ec:	d1ae      	bne.n	800654c <follow_path+0x168>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80065ee:	7a98      	ldrb	r0, [r3, #10]
 80065f0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80065f4:	4298      	cmp	r0, r3
 80065f6:	d1a9      	bne.n	800654c <follow_path+0x168>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065f8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80065fc:	075b      	lsls	r3, r3, #29
 80065fe:	4610      	mov	r0, r2
 8006600:	f53f af24 	bmi.w	800644c <follow_path+0x68>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006604:	06ca      	lsls	r2, r1, #27
 8006606:	d517      	bpl.n	8006638 <follow_path+0x254>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006608:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 800660c:	6962      	ldr	r2, [r4, #20]
 800660e:	fbb2 f0f1 	udiv	r0, r2, r1
 8006612:	f10a 0334 	add.w	r3, sl, #52	; 0x34
 8006616:	fb01 2210 	mls	r2, r1, r0, r2
	if (fs->fs_type == FS_FAT32) {
 800661a:	f89a 1000 	ldrb.w	r1, [sl]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800661e:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 8006620:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8006622:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006624:	bf04      	itt	eq
 8006626:	8a9b      	ldrheq	r3, [r3, #20]
 8006628:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800662c:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800662e:	e6f1      	b.n	8006414 <follow_path+0x30>
			ns = dp->fn[NSFLAG];
 8006630:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006634:	0759      	lsls	r1, r3, #29
 8006636:	d465      	bmi.n	8006704 <follow_path+0x320>
 8006638:	2005      	movs	r0, #5
 800663a:	e707      	b.n	800644c <follow_path+0x68>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800663c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006640:	2301      	movs	r3, #1
 8006642:	462a      	mov	r2, r5
 8006644:	4631      	mov	r1, r6
 8006646:	f7ff f863 	bl	8005710 <disk_write>
 800664a:	bbc0      	cbnz	r0, 80066be <follow_path+0x2da>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800664c:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8006650:	f8db 301c 	ldr.w	r3, [fp, #28]
			fs->wflag = 0;
 8006654:	f88b 0003 	strb.w	r0, [fp, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006658:	1aaa      	subs	r2, r5, r2
 800665a:	429a      	cmp	r2, r3
 800665c:	f4bf af58 	bcs.w	8006510 <follow_path+0x12c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006660:	f89b 8002 	ldrb.w	r8, [fp, #2]
 8006664:	f1b8 0f01 	cmp.w	r8, #1
 8006668:	d802      	bhi.n	8006670 <follow_path+0x28c>
 800666a:	e751      	b.n	8006510 <follow_path+0x12c>
					wsect += fs->fsize;
 800666c:	f8db 301c 	ldr.w	r3, [fp, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006670:	f89b 0001 	ldrb.w	r0, [fp, #1]
					wsect += fs->fsize;
 8006674:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006676:	462a      	mov	r2, r5
 8006678:	2301      	movs	r3, #1
 800667a:	4631      	mov	r1, r6
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800667c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8006680:	f7ff f846 	bl	8005710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006684:	f1b8 0f01 	cmp.w	r8, #1
 8006688:	d1f0      	bne.n	800666c <follow_path+0x288>
 800668a:	e741      	b.n	8006510 <follow_path+0x12c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800668c:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 8006690:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006694:	ea1c 0800 	ands.w	r8, ip, r0
 8006698:	f47f af72 	bne.w	8006580 <follow_path+0x19c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800669c:	4618      	mov	r0, r3
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	f7ff fb72 	bl	8005d88 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80066a4:	2801      	cmp	r0, #1
 80066a6:	d922      	bls.n	80066ee <follow_path+0x30a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80066a8:	1c47      	adds	r7, r0, #1
 80066aa:	d008      	beq.n	80066be <follow_path+0x2da>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80066ac:	9b00      	ldr	r3, [sp, #0]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	4290      	cmp	r0, r2
 80066b2:	d30a      	bcc.n	80066ca <follow_path+0x2e6>
			ns = dp->fn[NSFLAG];
 80066b4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
						dp->sect = 0; return FR_NO_FILE;
 80066b8:	f8c4 801c 	str.w	r8, [r4, #28]
				if (res == FR_NO_FILE) {	/* Object is not found */
 80066bc:	e7ba      	b.n	8006634 <follow_path+0x250>
			res = FR_DISK_ERR;
 80066be:	2001      	movs	r0, #1
 80066c0:	e6c4      	b.n	800644c <follow_path+0x68>
			ns = dp->fn[NSFLAG];
 80066c2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
				dp->sect = 0; return FR_NO_FILE;
 80066c6:	61e1      	str	r1, [r4, #28]
				if (res == FR_NO_FILE) {	/* Object is not found */
 80066c8:	e7b4      	b.n	8006634 <follow_path+0x250>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80066ca:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80066cc:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80066ce:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80066d0:	4290      	cmp	r0, r2
	return clst * fs->csize + fs->database;
 80066d2:	bf3e      	ittt	cc
 80066d4:	895a      	ldrhcc	r2, [r3, #10]
 80066d6:	6adf      	ldrcc	r7, [r3, #44]	; 0x2c
 80066d8:	fb00 7702 	mlacc	r7, r0, r2, r7
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80066dc:	899a      	ldrh	r2, [r3, #12]
 80066de:	fbb5 f1f2 	udiv	r1, r5, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80066e2:	bf28      	it	cs
 80066e4:	4647      	movcs	r7, r8
				dp->sect = clust2sect(fs, clst);
 80066e6:	61e7      	str	r7, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80066e8:	fb02 5211 	mls	r2, r2, r1, r5
 80066ec:	e748      	b.n	8006580 <follow_path+0x19c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80066ee:	2002      	movs	r0, #2
	return res;
 80066f0:	e6ac      	b.n	800644c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80066f2:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80066f4:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 80066f6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 80066fa:	b003      	add	sp, #12
 80066fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8006700:	f7ff bdc4 	b.w	800628c <dir_sdi.constprop.0>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006704:	2004      	movs	r0, #4
 8006706:	e6a1      	b.n	800644c <follow_path+0x68>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006708:	2305      	movs	r3, #5
 800670a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800670e:	e6b0      	b.n	8006472 <follow_path+0x8e>
 8006710:	2305      	movs	r3, #5
 8006712:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006716:	2300      	movs	r3, #0
 8006718:	e6e2      	b.n	80064e0 <follow_path+0xfc>
 800671a:	bf00      	nop
 800671c:	0800b6ac 	.word	0x0800b6ac
 8006720:	0800b69c 	.word	0x0800b69c

08006724 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006724:	2901      	cmp	r1, #1
{
 8006726:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 800672a:	6806      	ldr	r6, [r0, #0]
{
 800672c:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800672e:	d910      	bls.n	8006752 <remove_chain+0x2e>
 8006730:	69b3      	ldr	r3, [r6, #24]
 8006732:	428b      	cmp	r3, r1
 8006734:	d90d      	bls.n	8006752 <remove_chain+0x2e>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006736:	4605      	mov	r5, r0
 8006738:	4611      	mov	r1, r2
 800673a:	b96a      	cbnz	r2, 8006758 <remove_chain+0x34>
 800673c:	4637      	mov	r7, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800673e:	429c      	cmp	r4, r3
 8006740:	d207      	bcs.n	8006752 <remove_chain+0x2e>
		switch (fs->fs_type) {
 8006742:	783b      	ldrb	r3, [r7, #0]
 8006744:	2b02      	cmp	r3, #2
 8006746:	f000 8089 	beq.w	800685c <remove_chain+0x138>
 800674a:	2b03      	cmp	r3, #3
 800674c:	d06a      	beq.n	8006824 <remove_chain+0x100>
 800674e:	2b01      	cmp	r3, #1
 8006750:	d010      	beq.n	8006774 <remove_chain+0x50>
 8006752:	2002      	movs	r0, #2
}
 8006754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006758:	2a01      	cmp	r2, #1
 800675a:	d0fa      	beq.n	8006752 <remove_chain+0x2e>
 800675c:	4293      	cmp	r3, r2
 800675e:	d9f8      	bls.n	8006752 <remove_chain+0x2e>
 8006760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006764:	4630      	mov	r0, r6
 8006766:	f7ff fa53 	bl	8005c10 <put_fat.part.0>
		if (res != FR_OK) return res;
 800676a:	2800      	cmp	r0, #0
 800676c:	d1f2      	bne.n	8006754 <remove_chain+0x30>
 800676e:	682f      	ldr	r7, [r5, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	e7e4      	b.n	800673e <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006774:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006776:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800677a:	89ba      	ldrh	r2, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 800677c:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006780:	fbb8 f3f2 	udiv	r3, r8, r2
 8006784:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006786:	4561      	cmp	r1, ip
 8006788:	d00a      	beq.n	80067a0 <remove_chain+0x7c>
 800678a:	4638      	mov	r0, r7
 800678c:	f7ff f874 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006790:	2800      	cmp	r0, #0
 8006792:	d17d      	bne.n	8006890 <remove_chain+0x16c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006794:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006796:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800679a:	89ba      	ldrh	r2, [r7, #12]
 800679c:	fbb8 f3f2 	udiv	r3, r8, r2
 80067a0:	fb02 8313 	mls	r3, r2, r3, r8
 80067a4:	443b      	add	r3, r7
 80067a6:	f108 0801 	add.w	r8, r8, #1
 80067aa:	f893 9034 	ldrb.w	r9, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067ae:	fbb8 f3f2 	udiv	r3, r8, r2
 80067b2:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067b4:	4561      	cmp	r1, ip
 80067b6:	d007      	beq.n	80067c8 <remove_chain+0xa4>
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff f85d 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067be:	2800      	cmp	r0, #0
 80067c0:	d166      	bne.n	8006890 <remove_chain+0x16c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80067c2:	89ba      	ldrh	r2, [r7, #12]
 80067c4:	fbb8 f3f2 	udiv	r3, r8, r2
 80067c8:	fb02 8813 	mls	r8, r2, r3, r8
 80067cc:	4447      	add	r7, r8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80067ce:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80067d0:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
 80067d4:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80067d8:	bf4c      	ite	mi
 80067da:	ea4f 1818 	movmi.w	r8, r8, lsr #4
 80067de:	f3c8 080b 	ubfxpl	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 80067e2:	f1b8 0f00 	cmp.w	r8, #0
 80067e6:	d055      	beq.n	8006894 <remove_chain+0x170>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80067e8:	f1b8 0f01 	cmp.w	r8, #1
 80067ec:	d0b1      	beq.n	8006752 <remove_chain+0x2e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80067ee:	69b3      	ldr	r3, [r6, #24]
 80067f0:	42a3      	cmp	r3, r4
 80067f2:	d9ae      	bls.n	8006752 <remove_chain+0x2e>
 80067f4:	2200      	movs	r2, #0
 80067f6:	4621      	mov	r1, r4
 80067f8:	4630      	mov	r0, r6
 80067fa:	f7ff fa09 	bl	8005c10 <put_fat.part.0>
			if (res != FR_OK) return res;
 80067fe:	2800      	cmp	r0, #0
 8006800:	d1a8      	bne.n	8006754 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006802:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
 8006806:	1e91      	subs	r1, r2, #2
 8006808:	428b      	cmp	r3, r1
 800680a:	d205      	bcs.n	8006818 <remove_chain+0xf4>
			fs->free_clst++;
 800680c:	3301      	adds	r3, #1
 800680e:	6173      	str	r3, [r6, #20]
			fs->fsi_flag |= 1;
 8006810:	7933      	ldrb	r3, [r6, #4]
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006818:	4542      	cmp	r2, r8
 800681a:	d93b      	bls.n	8006894 <remove_chain+0x170>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800681c:	682f      	ldr	r7, [r5, #0]
 800681e:	4644      	mov	r4, r8
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	e78c      	b.n	800673e <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006824:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8006828:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800682a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800682c:	ea4f 019c 	mov.w	r1, ip, lsr #2
 8006830:	fbb4 f1f1 	udiv	r1, r4, r1
 8006834:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006836:	4291      	cmp	r1, r2
 8006838:	d005      	beq.n	8006846 <remove_chain+0x122>
 800683a:	4638      	mov	r0, r7
 800683c:	f7ff f81c 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006840:	bb30      	cbnz	r0, 8006890 <remove_chain+0x16c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006842:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8006846:	00a3      	lsls	r3, r4, #2
 8006848:	fbb3 f2fc 	udiv	r2, r3, ip
 800684c:	fb0c 3312 	mls	r3, ip, r2, r3
	rv = rv << 8 | ptr[0];
 8006850:	441f      	add	r7, r3
 8006852:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006856:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 800685a:	e7c2      	b.n	80067e2 <remove_chain+0xbe>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800685c:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8006860:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006864:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8006868:	fbb4 f1f1 	udiv	r1, r4, r1
 800686c:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800686e:	4291      	cmp	r1, r2
 8006870:	d005      	beq.n	800687e <remove_chain+0x15a>
 8006872:	4638      	mov	r0, r7
 8006874:	f7ff f800 	bl	8005878 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006878:	b950      	cbnz	r0, 8006890 <remove_chain+0x16c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800687a:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 800687e:	0063      	lsls	r3, r4, #1
 8006880:	fbb3 f2fc 	udiv	r2, r3, ip
 8006884:	fb0c 3312 	mls	r3, ip, r2, r3
 8006888:	441f      	add	r7, r3
 800688a:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 800688e:	e7a8      	b.n	80067e2 <remove_chain+0xbe>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006890:	2001      	movs	r0, #1
 8006892:	e75f      	b.n	8006754 <remove_chain+0x30>
	return FR_OK;
 8006894:	2000      	movs	r0, #0
 8006896:	e75d      	b.n	8006754 <remove_chain+0x30>

08006898 <dir_register>:
{
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	ed2d 8b02 	vpush	{d8}
 80068a0:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 80068a2:	6806      	ldr	r6, [r0, #0]
{
 80068a4:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);
 80068a6:	f7ff fcf1 	bl	800628c <dir_sdi.constprop.0>
	if (res == FR_OK) {
 80068aa:	9001      	str	r0, [sp, #4]
 80068ac:	b310      	cbz	r0, 80068f4 <dir_register+0x5c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d119      	bne.n	80068e8 <dir_register+0x50>
 80068b4:	2307      	movs	r3, #7
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	4618      	mov	r0, r3
}
 80068ba:	b005      	add	sp, #20
 80068bc:	ecbd 8b02 	vpop	{d8}
 80068c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80068c4:	f8b8 700a 	ldrh.w	r7, [r8, #10]
 80068c8:	3f01      	subs	r7, #1
 80068ca:	4217      	tst	r7, r2
 80068cc:	f040 8084 	bne.w	80069d8 <dir_register+0x140>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80068d0:	4640      	mov	r0, r8
 80068d2:	f7ff fa59 	bl	8005d88 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80068d6:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80068d8:	9002      	str	r0, [sp, #8]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80068da:	f240 8150 	bls.w	8006b7e <dir_register+0x2e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	f040 809f 	bne.w	8006a22 <dir_register+0x18a>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80068e4:	2301      	movs	r3, #1
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	4618      	mov	r0, r3
}
 80068ea:	b005      	add	sp, #20
 80068ec:	ecbd 8b02 	vpop	{d8}
 80068f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 80068f4:	f8d4 901c 	ldr.w	r9, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80068f8:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80068fc:	f106 0b34 	add.w	fp, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006900:	45d1      	cmp	r9, sl
 8006902:	d018      	beq.n	8006936 <dir_register+0x9e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006904:	78f3      	ldrb	r3, [r6, #3]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d16b      	bne.n	80069e2 <dir_register+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800690a:	7870      	ldrb	r0, [r6, #1]
 800690c:	2301      	movs	r3, #1
 800690e:	464a      	mov	r2, r9
 8006910:	4659      	mov	r1, fp
 8006912:	f7fe feef 	bl	80056f4 <disk_read>
 8006916:	b150      	cbz	r0, 800692e <dir_register+0x96>
			fs->winsect = sector;
 8006918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800691c:	6333      	str	r3, [r6, #48]	; 0x30
				res = FR_DISK_ERR;
 800691e:	2301      	movs	r3, #1
 8006920:	4618      	mov	r0, r3
 8006922:	9301      	str	r3, [sp, #4]
}
 8006924:	b005      	add	sp, #20
 8006926:	ecbd 8b02 	vpop	{d8}
 800692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800692e:	f8d4 a01c 	ldr.w	sl, [r4, #28]
			fs->winsect = sector;
 8006932:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006936:	6a20      	ldr	r0, [r4, #32]
 8006938:	7803      	ldrb	r3, [r0, #0]
 800693a:	2be5      	cmp	r3, #229	; 0xe5
 800693c:	d000      	beq.n	8006940 <dir_register+0xa8>
 800693e:	bb2b      	cbnz	r3, 800698c <dir_register+0xf4>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006940:	45d1      	cmp	r9, sl
 8006942:	d007      	beq.n	8006954 <dir_register+0xbc>
 8006944:	4651      	mov	r1, sl
 8006946:	4630      	mov	r0, r6
 8006948:	f7fe ff96 	bl	8005878 <move_window.part.0>
		if (res == FR_OK) {
 800694c:	2800      	cmp	r0, #0
 800694e:	f040 808a 	bne.w	8006a66 <dir_register+0x1ce>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006952:	6a20      	ldr	r0, [r4, #32]
		*d++ = (BYTE)val;
 8006954:	2220      	movs	r2, #32
 8006956:	2100      	movs	r1, #0
 8006958:	f001 f880 	bl	8007a5c <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800695c:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800695e:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8006962:	1a9a      	subs	r2, r3, r2
 8006964:	2a02      	cmp	r2, #2
 8006966:	f240 80f1 	bls.w	8006b4c <dir_register+0x2b4>
			*d++ = *s++;
 800696a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8006976:	721a      	strb	r2, [r3, #8]
 8006978:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800697c:	725a      	strb	r2, [r3, #9]
 800697e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8006982:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8006984:	2301      	movs	r3, #1
 8006986:	9801      	ldr	r0, [sp, #4]
 8006988:	70f3      	strb	r3, [r6, #3]
 800698a:	e796      	b.n	80068ba <dir_register+0x22>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800698c:	6965      	ldr	r5, [r4, #20]
 800698e:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006990:	f1ba 0f00 	cmp.w	sl, #0
 8006994:	d08e      	beq.n	80068b4 <dir_register+0x1c>
 8006996:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800699a:	d28b      	bcs.n	80068b4 <dir_register+0x1c>
	FATFS *fs = dp->obj.fs;
 800699c:	f8d4 8000 	ldr.w	r8, [r4]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80069a0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80069a4:	fbb5 f2f3 	udiv	r2, r5, r3
 80069a8:	fb03 5312 	mls	r3, r3, r2, r5
 80069ac:	b143      	cbz	r3, 80069c0 <dir_register+0x128>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80069ae:	464a      	mov	r2, r9
 80069b0:	f108 0734 	add.w	r7, r8, #52	; 0x34
 80069b4:	46d1      	mov	r9, sl
 80069b6:	4692      	mov	sl, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069b8:	443b      	add	r3, r7
	dp->dptr = ofs;						/* Current entry */
 80069ba:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069bc:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80069be:	e79f      	b.n	8006900 <dir_register+0x68>
		if (!dp->clust) {		/* Static table */
 80069c0:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80069c2:	f10a 0001 	add.w	r0, sl, #1
 80069c6:	61e0      	str	r0, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80069c8:	2900      	cmp	r1, #0
 80069ca:	f47f af7b 	bne.w	80068c4 <dir_register+0x2c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80069ce:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 80069d2:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 80069d6:	d948      	bls.n	8006a6a <dir_register+0x1d2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80069d8:	46ca      	mov	sl, r9
 80069da:	f108 0734 	add.w	r7, r8, #52	; 0x34
 80069de:	4681      	mov	r9, r0
 80069e0:	e7ea      	b.n	80069b8 <dir_register+0x120>
 80069e2:	7870      	ldrb	r0, [r6, #1]
 80069e4:	2301      	movs	r3, #1
 80069e6:	4652      	mov	r2, sl
 80069e8:	4659      	mov	r1, fp
 80069ea:	f7fe fe91 	bl	8005710 <disk_write>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f47f af78 	bne.w	80068e4 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80069f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 80069f6:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80069f8:	ebaa 0203 	sub.w	r2, sl, r3
 80069fc:	69f3      	ldr	r3, [r6, #28]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d283      	bcs.n	800690a <dir_register+0x72>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a02:	78b5      	ldrb	r5, [r6, #2]
 8006a04:	2d01      	cmp	r5, #1
 8006a06:	d801      	bhi.n	8006a0c <dir_register+0x174>
 8006a08:	e77f      	b.n	800690a <dir_register+0x72>
					wsect += fs->fsize;
 8006a0a:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a0c:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8006a0e:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a10:	4652      	mov	r2, sl
 8006a12:	2301      	movs	r3, #1
 8006a14:	4659      	mov	r1, fp
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a16:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a18:	f7fe fe7a 	bl	8005710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a1c:	2d01      	cmp	r5, #1
 8006a1e:	d1f4      	bne.n	8006a0a <dir_register+0x172>
 8006a20:	e773      	b.n	800690a <dir_register+0x72>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006a22:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006a26:	4298      	cmp	r0, r3
 8006a28:	d221      	bcs.n	8006a6e <dir_register+0x1d6>
	clst -= 2;
 8006a2a:	1e82      	subs	r2, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a2c:	3b02      	subs	r3, #2
	clst -= 2;
 8006a2e:	9203      	str	r2, [sp, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a30:	f108 0734 	add.w	r7, r8, #52	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8006a34:	9a02      	ldr	r2, [sp, #8]
 8006a36:	61a2      	str	r2, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a38:	9a03      	ldr	r2, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a3a:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a3e:	4293      	cmp	r3, r2
	return clst * fs->csize + fs->database;
 8006a40:	bf82      	ittt	hi
 8006a42:	f8d8 302c 	ldrhi.w	r3, [r8, #44]	; 0x2c
 8006a46:	f8b8 900a 	ldrhhi.w	r9, [r8, #10]
 8006a4a:	fb02 3909 	mlahi	r9, r2, r9, r3
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006a4e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006a52:	fbb5 f2f3 	udiv	r2, r5, r3
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a56:	bf98      	it	ls
 8006a58:	f04f 0900 	movls.w	r9, #0
				dp->sect = clust2sect(fs, clst);
 8006a5c:	f8c4 901c 	str.w	r9, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006a60:	fb03 5312 	mls	r3, r3, r2, r5
 8006a64:	e7a8      	b.n	80069b8 <dir_register+0x120>
 8006a66:	9001      	str	r0, [sp, #4]
 8006a68:	e727      	b.n	80068ba <dir_register+0x22>
				dp->sect = 0; return FR_NO_FILE;
 8006a6a:	61e1      	str	r1, [r4, #28]
 8006a6c:	e722      	b.n	80068b4 <dir_register+0x1c>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006a6e:	69a1      	ldr	r1, [r4, #24]
 8006a70:	4620      	mov	r0, r4
 8006a72:	f7ff fb25 	bl	80060c0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a76:	4603      	mov	r3, r0
 8006a78:	9002      	str	r0, [sp, #8]
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f43f af1a 	beq.w	80068b4 <dir_register+0x1c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006a80:	2801      	cmp	r0, #1
 8006a82:	d07c      	beq.n	8006b7e <dir_register+0x2e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a84:	3301      	adds	r3, #1
 8006a86:	f43f af2d 	beq.w	80068e4 <dir_register+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006a8a:	f898 3003 	ldrb.w	r3, [r8, #3]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d179      	bne.n	8006b86 <dir_register+0x2ee>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a92:	f108 0734 	add.w	r7, r8, #52	; 0x34
		*d++ = (BYTE)val;
 8006a96:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f000 ffdd 	bl	8007a5c <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006aa2:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 8006aa6:	9a02      	ldr	r2, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006aa8:	3b02      	subs	r3, #2
	clst -= 2;
 8006aaa:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006aac:	429a      	cmp	r2, r3
	clst -= 2;
 8006aae:	9203      	str	r2, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ab0:	f080 80a4 	bcs.w	8006bfc <dir_register+0x364>
	return clst * fs->csize + fs->database;
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8006aba:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8006abe:	fb00 2a01 	mla	sl, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ac2:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	f000 8095 	beq.w	8006bf6 <dir_register+0x35e>
 8006acc:	2300      	movs	r3, #0
 8006ace:	ee08 ba10 	vmov	s16, fp
 8006ad2:	46bb      	mov	fp, r7
 8006ad4:	4627      	mov	r7, r4
 8006ad6:	4654      	mov	r4, sl
 8006ad8:	469a      	mov	sl, r3
						fs->wflag = 1;
 8006ada:	f04f 0301 	mov.w	r3, #1
 8006ade:	f888 3003 	strb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006ae2:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4622      	mov	r2, r4
 8006aea:	4659      	mov	r1, fp
 8006aec:	f7fe fe10 	bl	8005710 <disk_write>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f47f aef7 	bne.w	80068e4 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006af6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8006afa:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006afe:	1ae2      	subs	r2, r4, r3
 8006b00:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d214      	bcs.n	8006b32 <dir_register+0x29a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b08:	f898 9002 	ldrb.w	r9, [r8, #2]
 8006b0c:	f1b9 0f01 	cmp.w	r9, #1
 8006b10:	d802      	bhi.n	8006b18 <dir_register+0x280>
 8006b12:	e00e      	b.n	8006b32 <dir_register+0x29a>
					wsect += fs->fsize;
 8006b14:	f8d8 301c 	ldr.w	r3, [r8, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b18:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 8006b1c:	441c      	add	r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b1e:	4622      	mov	r2, r4
 8006b20:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b22:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b26:	4659      	mov	r1, fp
 8006b28:	f7fe fdf2 	bl	8005710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b2c:	f1b9 0f01 	cmp.w	r9, #1
 8006b30:	d1f0      	bne.n	8006b14 <dir_register+0x27c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b32:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
 8006b36:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8006b3a:	f10a 0301 	add.w	r3, sl, #1
 8006b3e:	1c4c      	adds	r4, r1, #1
 8006b40:	4293      	cmp	r3, r2
 8006b42:	f8c8 4030 	str.w	r4, [r8, #48]	; 0x30
 8006b46:	d24d      	bcs.n	8006be4 <dir_register+0x34c>
 8006b48:	469a      	mov	sl, r3
 8006b4a:	e7c6      	b.n	8006ada <dir_register+0x242>
			*d++ = *s++;
 8006b4c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8006b56:	705a      	strb	r2, [r3, #1]
 8006b58:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8006b5c:	709a      	strb	r2, [r3, #2]
 8006b5e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8006b62:	70da      	strb	r2, [r3, #3]
 8006b64:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006b68:	711a      	strb	r2, [r3, #4]
 8006b6a:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8006b6e:	715a      	strb	r2, [r3, #5]
 8006b70:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8006b74:	719a      	strb	r2, [r3, #6]
 8006b76:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8006b7a:	71da      	strb	r2, [r3, #7]
 8006b7c:	e6f9      	b.n	8006972 <dir_register+0xda>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b7e:	2302      	movs	r3, #2
 8006b80:	9301      	str	r3, [sp, #4]
 8006b82:	4618      	mov	r0, r3
 8006b84:	e699      	b.n	80068ba <dir_register+0x22>
		wsect = fs->winsect;	/* Current sector number */
 8006b86:	f8d8 a030 	ldr.w	sl, [r8, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006b8a:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006b8e:	f108 0734 	add.w	r7, r8, #52	; 0x34
 8006b92:	2301      	movs	r3, #1
 8006b94:	4652      	mov	r2, sl
 8006b96:	4639      	mov	r1, r7
 8006b98:	f7fe fdba 	bl	8005710 <disk_write>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f47f aea1 	bne.w	80068e4 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006ba2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8006ba6:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006baa:	ebaa 0103 	sub.w	r1, sl, r3
 8006bae:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006bb2:	4299      	cmp	r1, r3
 8006bb4:	f4bf af6f 	bcs.w	8006a96 <dir_register+0x1fe>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006bb8:	f898 9002 	ldrb.w	r9, [r8, #2]
 8006bbc:	f1b9 0f01 	cmp.w	r9, #1
 8006bc0:	d802      	bhi.n	8006bc8 <dir_register+0x330>
 8006bc2:	e768      	b.n	8006a96 <dir_register+0x1fe>
					wsect += fs->fsize;
 8006bc4:	f8d8 301c 	ldr.w	r3, [r8, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006bc8:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 8006bcc:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006bce:	4652      	mov	r2, sl
 8006bd0:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006bd2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7fe fd9a 	bl	8005710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006bdc:	f1b9 0f01 	cmp.w	r9, #1
 8006be0:	d1f0      	bne.n	8006bc4 <dir_register+0x32c>
 8006be2:	e758      	b.n	8006a96 <dir_register+0x1fe>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006be4:	f8d8 3018 	ldr.w	r3, [r8, #24]
					fs->winsect -= n;							/* Restore window offset */
 8006be8:	463c      	mov	r4, r7
 8006bea:	465f      	mov	r7, fp
 8006bec:	ee18 ba10 	vmov	fp, s16
 8006bf0:	eba1 0a0a 	sub.w	sl, r1, sl
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006bf4:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8006bf6:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
 8006bfa:	e71b      	b.n	8006a34 <dir_register+0x19c>
	return clst * fs->csize + fs->database;
 8006bfc:	f8b8 100a 	ldrh.w	r1, [r8, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c00:	f04f 0a00 	mov.w	sl, #0
 8006c04:	e75d      	b.n	8006ac2 <dir_register+0x22a>
 8006c06:	bf00      	nop

08006c08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8006c10:	b181      	cbz	r1, 8006c34 <f_mount+0x2c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c12:	f891 c000 	ldrb.w	ip, [r1]
 8006c16:	f1bc 0f20 	cmp.w	ip, #32
 8006c1a:	d911      	bls.n	8006c40 <f_mount+0x38>
 8006c1c:	4663      	mov	r3, ip
 8006c1e:	4608      	mov	r0, r1
 8006c20:	e003      	b.n	8006c2a <f_mount+0x22>
 8006c22:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d90a      	bls.n	8006c40 <f_mount+0x38>
 8006c2a:	2b3a      	cmp	r3, #58	; 0x3a
 8006c2c:	d1f9      	bne.n	8006c22 <f_mount+0x1a>
			i = *tp++ - '0';
 8006c2e:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006c30:	4288      	cmp	r0, r1
 8006c32:	d002      	beq.n	8006c3a <f_mount+0x32>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c34:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8006c36:	b002      	add	sp, #8
 8006c38:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006c3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006c3e:	d1f9      	bne.n	8006c34 <f_mount+0x2c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c40:	4910      	ldr	r1, [pc, #64]	; (8006c84 <f_mount+0x7c>)
 8006c42:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 8006c44:	b163      	cbz	r3, 8006c60 <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006c46:	4810      	ldr	r0, [pc, #64]	; (8006c88 <f_mount+0x80>)
 8006c48:	6804      	ldr	r4, [r0, #0]
 8006c4a:	42a3      	cmp	r3, r4
 8006c4c:	bf04      	itt	eq
 8006c4e:	2400      	moveq	r4, #0
 8006c50:	6004      	streq	r4, [r0, #0]
 8006c52:	6904      	ldr	r4, [r0, #16]
 8006c54:	429c      	cmp	r4, r3
 8006c56:	bf04      	itt	eq
 8006c58:	2400      	moveq	r4, #0
 8006c5a:	6104      	streq	r4, [r0, #16]
		cfs->fs_type = 0;				/* Clear old fs object */
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	7018      	strb	r0, [r3, #0]
	if (fs) {
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	b15b      	cbz	r3, 8006c7c <f_mount+0x74>
		fs->fs_type = 0;				/* Clear new fs object */
 8006c64:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c66:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 8006c68:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8006c6a:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c6c:	d1e3      	bne.n	8006c36 <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006c6e:	4602      	mov	r2, r0
 8006c70:	a901      	add	r1, sp, #4
 8006c72:	4668      	mov	r0, sp
 8006c74:	f7fe fe3a 	bl	80058ec <find_volume>
}
 8006c78:	b002      	add	sp, #8
 8006c7a:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c7c:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8006c7e:	600b      	str	r3, [r1, #0]
}
 8006c80:	b002      	add	sp, #8
 8006c82:	bd10      	pop	{r4, pc}
 8006c84:	200024f8 	.word	0x200024f8
 8006c88:	200024fc 	.word	0x200024fc

08006c8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	b090      	sub	sp, #64	; 0x40
 8006c92:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006c94:	2800      	cmp	r0, #0
 8006c96:	f000 809c 	beq.w	8006dd2 <f_open+0x146>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006c9a:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8006c9e:	4616      	mov	r6, r2
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	463a      	mov	r2, r7
 8006ca4:	a903      	add	r1, sp, #12
 8006ca6:	a801      	add	r0, sp, #4
 8006ca8:	f7fe fe20 	bl	80058ec <find_volume>
	if (res == FR_OK) {
 8006cac:	4605      	mov	r5, r0
 8006cae:	b128      	cbz	r0, 8006cbc <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	b010      	add	sp, #64	; 0x40
 8006cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 8006cbc:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006cbe:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8006cc0:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006cc2:	a804      	add	r0, sp, #16
 8006cc4:	f7ff fb8e 	bl	80063e4 <follow_path>
		if (res == FR_OK) {
 8006cc8:	bb00      	cbnz	r0, 8006d0c <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006cca:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f2c0 8086 	blt.w	8006de0 <f_open+0x154>
		if (Files[i].fs) {	/* Existing entry */
 8006cd4:	4baa      	ldr	r3, [pc, #680]	; (8006f80 <f_open+0x2f4>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006cd6:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 8006cd8:	f8d3 8000 	ldr.w	r8, [r3]
				Files[i].clu == dp->obj.sclust &&
 8006cdc:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 8006ce0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ce4:	f027 0201 	bic.w	r2, r7, #1
 8006ce8:	4611      	mov	r1, r2
		if (Files[i].fs) {	/* Existing entry */
 8006cea:	f1b8 0f00 	cmp.w	r8, #0
 8006cee:	f000 80fb 	beq.w	8006ee8 <f_open+0x25c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006cf2:	4580      	cmp	r8, r0
 8006cf4:	d076      	beq.n	8006de4 <f_open+0x158>
		if (Files[i].fs) {	/* Existing entry */
 8006cf6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8006cfa:	f1b8 0f00 	cmp.w	r8, #0
 8006cfe:	f000 8088 	beq.w	8006e12 <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d02:	4580      	cmp	r8, r0
 8006d04:	f000 8129 	beq.w	8006f5a <f_open+0x2ce>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006d08:	2512      	movs	r5, #18
 8006d0a:	e7d1      	b.n	8006cb0 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d0c:	f016 0f1c 	tst.w	r6, #28
 8006d10:	d064      	beq.n	8006ddc <f_open+0x150>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d12:	2804      	cmp	r0, #4
 8006d14:	d162      	bne.n	8006ddc <f_open+0x150>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d16:	4b9a      	ldr	r3, [pc, #616]	; (8006f80 <f_open+0x2f4>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	b112      	cbz	r2, 8006d22 <f_open+0x96>
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f2      	bne.n	8006d08 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006d22:	a804      	add	r0, sp, #16
 8006d24:	f7ff fdb8 	bl	8006898 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006d28:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d155      	bne.n	8006ddc <f_open+0x150>
				dw = GET_FATTIME();
 8006d30:	f7fe fcba 	bl	80056a8 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006d34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8006d36:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8006d38:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006d3c:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 8006d40:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8006d42:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val;
 8006d44:	7458      	strb	r0, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d46:	739e      	strb	r6, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d48:	741a      	strb	r2, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8006d4c:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val;
 8006d4e:	7658      	strb	r0, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d50:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d52:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006d54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006d56:	9b03      	ldr	r3, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006d58:	2120      	movs	r1, #32
 8006d5a:	72d1      	strb	r1, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
 8006d5c:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8006d60:	2903      	cmp	r1, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d62:	bf08      	it	eq
 8006d64:	8a91      	ldrheq	r1, [r2, #20]
	cl = ld_word(dir + DIR_FstClusLO);
 8006d66:	8b56      	ldrh	r6, [r2, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d68:	bf08      	it	eq
 8006d6a:	ea46 4601 	orreq.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006d6e:	2100      	movs	r1, #0
 8006d70:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 8006d72:	7818      	ldrb	r0, [r3, #0]
 8006d74:	2803      	cmp	r0, #3
 8006d76:	d100      	bne.n	8006d7a <f_open+0xee>
	*ptr++ = (BYTE)val; val >>= 8;
 8006d78:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8006d7a:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 8006d80:	2101      	movs	r1, #1
 8006d82:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8006d84:	b19e      	cbz	r6, 8006dae <f_open+0x122>
						res = remove_chain(&dj.obj, cl, 0);
 8006d86:	4631      	mov	r1, r6
 8006d88:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8006d8a:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8006d8e:	f7ff fcc9 	bl	8006724 <remove_chain>
						if (res == FR_OK) {
 8006d92:	bb18      	cbnz	r0, 8006ddc <f_open+0x150>
							res = move_window(fs, dw);
 8006d94:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d98:	4590      	cmp	r8, r2
 8006d9a:	f000 80eb 	beq.w	8006f74 <f_open+0x2e8>
 8006d9e:	4618      	mov	r0, r3
 8006da0:	4641      	mov	r1, r8
 8006da2:	f7fe fd69 	bl	8005878 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	3e01      	subs	r6, #1
 8006daa:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8006dac:	b9b0      	cbnz	r0, 8006ddc <f_open+0x150>
				mode |= FA_MODIFIED;
 8006dae:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006db2:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006dba:	3900      	subs	r1, #0
			fp->dir_ptr = dj.dir;
 8006dbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dbe:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006dc0:	bf18      	it	ne
 8006dc2:	2101      	movne	r1, #1
 8006dc4:	a804      	add	r0, sp, #16
 8006dc6:	f7fe fcbd 	bl	8005744 <inc_lock>
 8006dca:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006dcc:	bb68      	cbnz	r0, 8006e2a <f_open+0x19e>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006dce:	2502      	movs	r5, #2
 8006dd0:	e76e      	b.n	8006cb0 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8006dd2:	2509      	movs	r5, #9
}
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	b010      	add	sp, #64	; 0x40
 8006dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ddc:	4605      	mov	r5, r0
 8006dde:	e767      	b.n	8006cb0 <f_open+0x24>
				res = FR_INVALID_NAME;
 8006de0:	2506      	movs	r5, #6
 8006de2:	e765      	b.n	8006cb0 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006de4:	6858      	ldr	r0, [r3, #4]
 8006de6:	4560      	cmp	r0, ip
 8006de8:	f000 80bc 	beq.w	8006f64 <f_open+0x2d8>
		if (Files[i].fs) {	/* Existing entry */
 8006dec:	6918      	ldr	r0, [r3, #16]
 8006dee:	b180      	cbz	r0, 8006e12 <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006df0:	4540      	cmp	r0, r8
 8006df2:	d189      	bne.n	8006d08 <f_open+0x7c>
 8006df4:	6958      	ldr	r0, [r3, #20]
 8006df6:	4584      	cmp	ip, r0
 8006df8:	d186      	bne.n	8006d08 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8006dfa:	6998      	ldr	r0, [r3, #24]
 8006dfc:	4570      	cmp	r0, lr
 8006dfe:	d183      	bne.n	8006d08 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e00:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006e02:	2a00      	cmp	r2, #0
 8006e04:	d167      	bne.n	8006ed6 <f_open+0x24a>
 8006e06:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8006e0a:	899b      	ldrh	r3, [r3, #12]
 8006e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e10:	d061      	beq.n	8006ed6 <f_open+0x24a>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006e12:	f016 0f1c 	tst.w	r6, #28
 8006e16:	d04c      	beq.n	8006eb2 <f_open+0x226>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006e18:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006e1c:	f013 0f11 	tst.w	r3, #17
 8006e20:	d160      	bne.n	8006ee4 <f_open+0x258>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006e22:	0773      	lsls	r3, r6, #29
 8006e24:	d559      	bpl.n	8006eda <f_open+0x24e>
 8006e26:	2508      	movs	r5, #8
 8006e28:	e742      	b.n	8006cb0 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006e2a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8006e30:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 8006e34:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8006e36:	2a03      	cmp	r2, #3
 8006e38:	d102      	bne.n	8006e40 <f_open+0x1b4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006e3a:	8a9a      	ldrh	r2, [r3, #20]
 8006e3c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006e40:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 8006e42:	f8d3 801c 	ldr.w	r8, [r3, #28]
			fp->obj.id = fs->id;
 8006e46:	f8b9 3006 	ldrh.w	r3, [r9, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006e4a:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006e4e:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006e50:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->flag = mode;		/* Set file access mode */
 8006e54:	7527      	strb	r7, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006e56:	f8c4 9000 	str.w	r9, [r4]
			fp->obj.id = fs->id;
 8006e5a:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006e5c:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 8006e5e:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006e60:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e62:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 8006e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e68:	4650      	mov	r0, sl
 8006e6a:	f000 fdf7 	bl	8007a5c <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006e6e:	06bf      	lsls	r7, r7, #26
 8006e70:	f57f af20 	bpl.w	8006cb4 <f_open+0x28>
 8006e74:	f1b8 0f00 	cmp.w	r8, #0
 8006e78:	f43f af1c 	beq.w	8006cb4 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006e7c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006e80:	f8b9 700a 	ldrh.w	r7, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006e84:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006e88:	fb03 f707 	mul.w	r7, r3, r7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e8c:	4547      	cmp	r7, r8
 8006e8e:	d306      	bcc.n	8006e9e <f_open+0x212>
 8006e90:	e03e      	b.n	8006f10 <f_open+0x284>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006e92:	1c70      	adds	r0, r6, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e94:	eba8 0807 	sub.w	r8, r8, r7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006e98:	d01b      	beq.n	8006ed2 <f_open+0x246>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e9a:	4547      	cmp	r7, r8
 8006e9c:	d234      	bcs.n	8006f08 <f_open+0x27c>
					clst = get_fat(&fp->obj, clst);
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	6820      	ldr	r0, [r4, #0]
 8006ea2:	f7fe ff71 	bl	8005d88 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8006ea6:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8006ea8:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 8006eaa:	d8f2      	bhi.n	8006e92 <f_open+0x206>
 8006eac:	2502      	movs	r5, #2
				fp->clust = clst;
 8006eae:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006eb0:	e6fe      	b.n	8006cb0 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006eb2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006eb6:	06d9      	lsls	r1, r3, #27
 8006eb8:	d424      	bmi.n	8006f04 <f_open+0x278>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006eba:	07b1      	lsls	r1, r6, #30
 8006ebc:	d501      	bpl.n	8006ec2 <f_open+0x236>
 8006ebe:	07db      	lsls	r3, r3, #31
 8006ec0:	d410      	bmi.n	8006ee4 <f_open+0x258>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006ec2:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ec6:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006ec8:	2e00      	cmp	r6, #0
 8006eca:	f47f af70 	bne.w	8006dae <f_open+0x122>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ece:	4611      	mov	r1, r2
 8006ed0:	e771      	b.n	8006db6 <f_open+0x12a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006ed2:	2501      	movs	r5, #1
 8006ed4:	e7eb      	b.n	8006eae <f_open+0x222>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006ed6:	2510      	movs	r5, #16
 8006ed8:	e6ea      	b.n	8006cb0 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006eda:	0730      	lsls	r0, r6, #28
 8006edc:	f53f af28 	bmi.w	8006d30 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	e768      	b.n	8006db6 <f_open+0x12a>
						res = FR_DENIED;
 8006ee4:	2507      	movs	r5, #7
 8006ee6:	e6e3      	b.n	8006cb0 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 8006ee8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8006eec:	f1b8 0f00 	cmp.w	r8, #0
 8006ef0:	d08f      	beq.n	8006e12 <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ef2:	4540      	cmp	r0, r8
 8006ef4:	d18d      	bne.n	8006e12 <f_open+0x186>
 8006ef6:	6958      	ldr	r0, [r3, #20]
 8006ef8:	4560      	cmp	r0, ip
 8006efa:	d18a      	bne.n	8006e12 <f_open+0x186>
				Files[i].clu == dp->obj.sclust &&
 8006efc:	6998      	ldr	r0, [r3, #24]
 8006efe:	4570      	cmp	r0, lr
 8006f00:	d187      	bne.n	8006e12 <f_open+0x186>
 8006f02:	e77d      	b.n	8006e00 <f_open+0x174>
					res = FR_NO_FILE;
 8006f04:	2504      	movs	r5, #4
 8006f06:	e6d3      	b.n	8006cb0 <f_open+0x24>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006f08:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006f0c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006f10:	fbb8 f2f3 	udiv	r2, r8, r3
 8006f14:	fb03 8312 	mls	r3, r3, r2, r8
				fp->clust = clst;
 8006f18:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f43f aeca 	beq.w	8006cb4 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f20:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8006f24:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f26:	3b02      	subs	r3, #2
 8006f28:	429e      	cmp	r6, r3
 8006f2a:	f4bf af50 	bcs.w	8006dce <f_open+0x142>
	return clst * fs->csize + fs->database;
 8006f2e:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8006f32:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8006f36:	fb06 3301 	mla	r3, r6, r1, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f43f af47 	beq.w	8006dce <f_open+0x142>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006f40:	441a      	add	r2, r3
 8006f42:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006f44:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006f48:	4651      	mov	r1, sl
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f7fe fbd2 	bl	80056f4 <disk_read>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f43f aeaf 	beq.w	8006cb4 <f_open+0x28>
 8006f56:	2501      	movs	r5, #1
 8006f58:	e6aa      	b.n	8006cb0 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f5a:	6958      	ldr	r0, [r3, #20]
 8006f5c:	4560      	cmp	r0, ip
 8006f5e:	f47f aed3 	bne.w	8006d08 <f_open+0x7c>
 8006f62:	e74a      	b.n	8006dfa <f_open+0x16e>
				Files[i].clu == dp->obj.sclust &&
 8006f64:	6898      	ldr	r0, [r3, #8]
 8006f66:	4570      	cmp	r0, lr
 8006f68:	d007      	beq.n	8006f7a <f_open+0x2ee>
		if (Files[i].fs) {	/* Existing entry */
 8006f6a:	6918      	ldr	r0, [r3, #16]
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f47f aec8 	bne.w	8006d02 <f_open+0x76>
 8006f72:	e74e      	b.n	8006e12 <f_open+0x186>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006f74:	3e01      	subs	r6, #1
 8006f76:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8006f78:	e719      	b.n	8006dae <f_open+0x122>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	e741      	b.n	8006e02 <f_open+0x176>
 8006f7e:	bf00      	nop
 8006f80:	200024fc 	.word	0x200024fc

08006f84 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f88:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8006f8a:	2300      	movs	r3, #0
{
 8006f8c:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8006f8e:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006f90:	b150      	cbz	r0, 8006fa8 <f_read+0x24>
 8006f92:	6803      	ldr	r3, [r0, #0]
 8006f94:	4604      	mov	r4, r0
 8006f96:	b13b      	cbz	r3, 8006fa8 <f_read+0x24>
 8006f98:	4690      	mov	r8, r2
 8006f9a:	781a      	ldrb	r2, [r3, #0]
 8006f9c:	b122      	cbz	r2, 8006fa8 <f_read+0x24>
 8006f9e:	88da      	ldrh	r2, [r3, #6]
 8006fa0:	460e      	mov	r6, r1
 8006fa2:	8881      	ldrh	r1, [r0, #4]
 8006fa4:	4291      	cmp	r1, r2
 8006fa6:	d005      	beq.n	8006fb4 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8006fa8:	f04f 0909 	mov.w	r9, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8006fac:	4648      	mov	r0, r9
 8006fae:	b005      	add	sp, #20
 8006fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006fb4:	7858      	ldrb	r0, [r3, #1]
 8006fb6:	f7fe fb83 	bl	80056c0 <disk_status>
 8006fba:	07c2      	lsls	r2, r0, #31
 8006fbc:	d4f4      	bmi.n	8006fa8 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006fbe:	f894 9015 	ldrb.w	r9, [r4, #21]
 8006fc2:	f1b9 0f00 	cmp.w	r9, #0
 8006fc6:	d1f1      	bne.n	8006fac <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006fc8:	7d23      	ldrb	r3, [r4, #20]
 8006fca:	f013 0301 	ands.w	r3, r3, #1
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	f000 80f1 	beq.w	80071b6 <f_read+0x232>
	remain = fp->obj.objsize - fp->fptr;
 8006fd4:	69a1      	ldr	r1, [r4, #24]
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	1a5b      	subs	r3, r3, r1
 8006fda:	4598      	cmp	r8, r3
 8006fdc:	bf28      	it	cs
 8006fde:	4698      	movcs	r8, r3
	for ( ;  btr;								/* Repeat until all data read */
 8006fe0:	f1b8 0f00 	cmp.w	r8, #0
 8006fe4:	d0e2      	beq.n	8006fac <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006fe6:	46a3      	mov	fp, r4
 8006fe8:	f104 0331 	add.w	r3, r4, #49	; 0x31
 8006fec:	f85b ab30 	ldr.w	sl, [fp], #48
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006ff6:	4618      	mov	r0, r3
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006ff8:	fbb1 f3f0 	udiv	r3, r1, r0
 8006ffc:	fb00 1513 	mls	r5, r0, r3, r1
 8007000:	2d00      	cmp	r5, #0
 8007002:	d147      	bne.n	8007094 <f_read+0x110>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007004:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8007008:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800700a:	401a      	ands	r2, r3
 800700c:	d07a      	beq.n	8007104 <f_read+0x180>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800700e:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007010:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 8007014:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007016:	3b02      	subs	r3, #2
 8007018:	4298      	cmp	r0, r3
 800701a:	f080 8081 	bcs.w	8007120 <f_read+0x19c>
	return clst * fs->csize + fs->database;
 800701e:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 8007022:	f8da 502c 	ldr.w	r5, [sl, #44]	; 0x2c
 8007026:	fb01 5500 	mla	r5, r1, r0, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 800702a:	2d00      	cmp	r5, #0
 800702c:	d078      	beq.n	8007120 <f_read+0x19c>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800702e:	f8ba 000c 	ldrh.w	r0, [sl, #12]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007032:	4540      	cmp	r0, r8
			sect += csect;
 8007034:	4415      	add	r5, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007036:	d87b      	bhi.n	8007130 <f_read+0x1ac>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007038:	fbb8 f3f0 	udiv	r3, r8, r0
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800703c:	18d0      	adds	r0, r2, r3
 800703e:	4288      	cmp	r0, r1
					cc = fs->csize - csect;
 8007040:	bf88      	it	hi
 8007042:	1a8b      	subhi	r3, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007044:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8007048:	9302      	str	r3, [sp, #8]
 800704a:	462a      	mov	r2, r5
 800704c:	4631      	mov	r1, r6
 800704e:	f7fe fb51 	bl	80056f4 <disk_read>
 8007052:	2800      	cmp	r0, #0
 8007054:	f040 80a7 	bne.w	80071a6 <f_read+0x222>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007058:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800705c:	9b02      	ldr	r3, [sp, #8]
 800705e:	2a00      	cmp	r2, #0
 8007060:	f2c0 80c1 	blt.w	80071e6 <f_read+0x262>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007064:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007068:	69a1      	ldr	r1, [r4, #24]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800706a:	fb00 f303 	mul.w	r3, r0, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800706e:	441e      	add	r6, r3
 8007070:	eba8 0803 	sub.w	r8, r8, r3
 8007074:	4419      	add	r1, r3
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	61a1      	str	r1, [r4, #24]
 800707a:	4413      	add	r3, r2
 800707c:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800707e:	f1b8 0f00 	cmp.w	r8, #0
 8007082:	d093      	beq.n	8006fac <f_read+0x28>
 8007084:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007088:	fbb1 f3f0 	udiv	r3, r1, r0
 800708c:	fb00 1513 	mls	r5, r0, r3, r1
 8007090:	2d00      	cmp	r5, #0
 8007092:	d0b7      	beq.n	8007004 <f_read+0x80>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007094:	1b43      	subs	r3, r0, r5
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007096:	4543      	cmp	r3, r8
 8007098:	bf28      	it	cs
 800709a:	4643      	movcs	r3, r8
	if (cnt) {
 800709c:	b383      	cbz	r3, 8007100 <f_read+0x17c>
 800709e:	1c6a      	adds	r2, r5, #1
 80070a0:	445a      	add	r2, fp
 80070a2:	1ab2      	subs	r2, r6, r2
 80070a4:	2a02      	cmp	r2, #2
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80070a6:	445d      	add	r5, fp
 80070a8:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 80070ac:	f240 8086 	bls.w	80071bc <f_read+0x238>
 80070b0:	f1be 0f07 	cmp.w	lr, #7
 80070b4:	f240 8082 	bls.w	80071bc <f_read+0x238>
 80070b8:	f023 0c03 	bic.w	ip, r3, #3
 80070bc:	44ac      	add	ip, r5
 80070be:	462a      	mov	r2, r5
 80070c0:	4631      	mov	r1, r6
			*d++ = *s++;
 80070c2:	f852 0b04 	ldr.w	r0, [r2], #4
 80070c6:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
 80070ca:	4562      	cmp	r2, ip
 80070cc:	d1f9      	bne.n	80070c2 <f_read+0x13e>
 80070ce:	f023 0203 	bic.w	r2, r3, #3
 80070d2:	4293      	cmp	r3, r2
 80070d4:	eb06 0102 	add.w	r1, r6, r2
 80070d8:	eb05 0002 	add.w	r0, r5, r2
 80070dc:	d00a      	beq.n	80070f4 <f_read+0x170>
			*d++ = *s++;
 80070de:	5cad      	ldrb	r5, [r5, r2]
 80070e0:	54b5      	strb	r5, [r6, r2]
		} while (--cnt);
 80070e2:	ebbe 0202 	subs.w	r2, lr, r2
 80070e6:	d005      	beq.n	80070f4 <f_read+0x170>
			*d++ = *s++;
 80070e8:	7845      	ldrb	r5, [r0, #1]
 80070ea:	704d      	strb	r5, [r1, #1]
		} while (--cnt);
 80070ec:	2a01      	cmp	r2, #1
 80070ee:	d001      	beq.n	80070f4 <f_read+0x170>
			*d++ = *s++;
 80070f0:	7882      	ldrb	r2, [r0, #2]
 80070f2:	708a      	strb	r2, [r1, #2]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80070f4:	69a1      	ldr	r1, [r4, #24]
 80070f6:	441e      	add	r6, r3
 80070f8:	eba8 0803 	sub.w	r8, r8, r3
 80070fc:	4419      	add	r1, r3
 80070fe:	e7ba      	b.n	8007076 <f_read+0xf2>
 8007100:	61a1      	str	r1, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 8007102:	e779      	b.n	8006ff8 <f_read+0x74>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007104:	bb61      	cbnz	r1, 8007160 <f_read+0x1dc>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007106:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007108:	2801      	cmp	r0, #1
 800710a:	d909      	bls.n	8007120 <f_read+0x19c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d04a      	beq.n	80071a6 <f_read+0x222>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007110:	f8da 3018 	ldr.w	r3, [sl, #24]
				fp->clust = clst;				/* Update current cluster */
 8007114:	61e0      	str	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007116:	3b02      	subs	r3, #2
	clst -= 2;
 8007118:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800711a:	4298      	cmp	r0, r3
 800711c:	f4ff af7f 	bcc.w	800701e <f_read+0x9a>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007120:	f04f 0902 	mov.w	r9, #2
}
 8007124:	4648      	mov	r0, r9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007126:	f884 9015 	strb.w	r9, [r4, #21]
}
 800712a:	b005      	add	sp, #20
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007130:	6a22      	ldr	r2, [r4, #32]
 8007132:	42aa      	cmp	r2, r5
 8007134:	d00d      	beq.n	8007152 <f_read+0x1ce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007136:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800713a:	2b00      	cmp	r3, #0
 800713c:	db2c      	blt.n	8007198 <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800713e:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8007142:	2301      	movs	r3, #1
 8007144:	462a      	mov	r2, r5
 8007146:	4659      	mov	r1, fp
 8007148:	f7fe fad4 	bl	80056f4 <disk_read>
 800714c:	bb58      	cbnz	r0, 80071a6 <f_read+0x222>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800714e:	f8ba 000c 	ldrh.w	r0, [sl, #12]
 8007152:	69a1      	ldr	r1, [r4, #24]
			fp->sect = sect;
 8007154:	6225      	str	r5, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007156:	fbb1 f5f0 	udiv	r5, r1, r0
 800715a:	fb00 1515 	mls	r5, r0, r5, r1
 800715e:	e799      	b.n	8007094 <f_read+0x110>
					if (fp->cltbl) {
 8007160:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007162:	b3a5      	cbz	r5, 80071ce <f_read+0x24a>
	FATFS *fs = fp->obj.fs;
 8007164:	f8d4 c000 	ldr.w	ip, [r4]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007168:	6868      	ldr	r0, [r5, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800716a:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 800716e:	fbb1 f3f3 	udiv	r3, r1, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007172:	3504      	adds	r5, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007174:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 8007178:	fbb3 f3f1 	udiv	r3, r3, r1
		if (ncl == 0) return 0;	/* End of table? (error) */
 800717c:	2800      	cmp	r0, #0
 800717e:	d0cf      	beq.n	8007120 <f_read+0x19c>
 8007180:	4629      	mov	r1, r5
 8007182:	e004      	b.n	800718e <f_read+0x20a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007184:	1a1b      	subs	r3, r3, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007186:	f851 0f08 	ldr.w	r0, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800718a:	2800      	cmp	r0, #0
 800718c:	d0c8      	beq.n	8007120 <f_read+0x19c>
		if (cl < ncl) break;	/* In this fragment? */
 800718e:	4283      	cmp	r3, r0
 8007190:	d2f8      	bcs.n	8007184 <f_read+0x200>
	return cl + *tbl;	/* Return the cluster number */
 8007192:	6848      	ldr	r0, [r1, #4]
 8007194:	4418      	add	r0, r3
 8007196:	e7b7      	b.n	8007108 <f_read+0x184>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007198:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800719c:	2301      	movs	r3, #1
 800719e:	4659      	mov	r1, fp
 80071a0:	f7fe fab6 	bl	8005710 <disk_write>
 80071a4:	b1d0      	cbz	r0, 80071dc <f_read+0x258>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071a6:	f8dd 9000 	ldr.w	r9, [sp]
 80071aa:	2301      	movs	r3, #1
}
 80071ac:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071ae:	7563      	strb	r3, [r4, #21]
}
 80071b0:	b005      	add	sp, #20
 80071b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80071b6:	f04f 0907 	mov.w	r9, #7
 80071ba:	e6f7      	b.n	8006fac <f_read+0x28>
 80071bc:	1e72      	subs	r2, r6, #1
 80071be:	18e8      	adds	r0, r5, r3
			*d++ = *s++;
 80071c0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80071c4:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 80071c8:	4285      	cmp	r5, r0
 80071ca:	d1f9      	bne.n	80071c0 <f_read+0x23c>
 80071cc:	e792      	b.n	80070f4 <f_read+0x170>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80071ce:	69e1      	ldr	r1, [r4, #28]
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	9202      	str	r2, [sp, #8]
 80071d4:	f7fe fdd8 	bl	8005d88 <get_fat.isra.0>
 80071d8:	9a02      	ldr	r2, [sp, #8]
 80071da:	e795      	b.n	8007108 <f_read+0x184>
					fp->flag &= (BYTE)~FA_DIRTY;
 80071dc:	7d23      	ldrb	r3, [r4, #20]
 80071de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e2:	7523      	strb	r3, [r4, #20]
 80071e4:	e7ab      	b.n	800713e <f_read+0x1ba>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80071e6:	6a22      	ldr	r2, [r4, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80071e8:	f8ba 000c 	ldrh.w	r0, [sl, #12]
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80071ec:	1b55      	subs	r5, r2, r5
 80071ee:	429d      	cmp	r5, r3
 80071f0:	f4bf af3a 	bcs.w	8007068 <f_read+0xe4>
	if (cnt) {
 80071f4:	2800      	cmp	r0, #0
 80071f6:	f43f af37 	beq.w	8007068 <f_read+0xe4>
 80071fa:	9a01      	ldr	r2, [sp, #4]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80071fc:	fb00 6105 	mla	r1, r0, r5, r6
 8007200:	1a8a      	subs	r2, r1, r2
 8007202:	1e45      	subs	r5, r0, #1
 8007204:	2a02      	cmp	r2, #2
 8007206:	9102      	str	r1, [sp, #8]
 8007208:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800720c:	9503      	str	r5, [sp, #12]
 800720e:	d928      	bls.n	8007262 <f_read+0x2de>
 8007210:	2d07      	cmp	r5, #7
 8007212:	d926      	bls.n	8007262 <f_read+0x2de>
 8007214:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8007218:	460a      	mov	r2, r1
 800721a:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 800721e:	4671      	mov	r1, lr
			*d++ = *s++;
 8007220:	f851 5b04 	ldr.w	r5, [r1], #4
 8007224:	f842 5b04 	str.w	r5, [r2], #4
		} while (--cnt);
 8007228:	4562      	cmp	r2, ip
 800722a:	d1f9      	bne.n	8007220 <f_read+0x29c>
 800722c:	f020 0203 	bic.w	r2, r0, #3
 8007230:	9902      	ldr	r1, [sp, #8]
 8007232:	4290      	cmp	r0, r2
 8007234:	eb01 0c02 	add.w	ip, r1, r2
 8007238:	eb0e 0502 	add.w	r5, lr, r2
 800723c:	f43f af12 	beq.w	8007064 <f_read+0xe0>
			*d++ = *s++;
 8007240:	f81e 0002 	ldrb.w	r0, [lr, r2]
 8007244:	5488      	strb	r0, [r1, r2]
		} while (--cnt);
 8007246:	9903      	ldr	r1, [sp, #12]
 8007248:	1a8a      	subs	r2, r1, r2
 800724a:	f43f af0b 	beq.w	8007064 <f_read+0xe0>
			*d++ = *s++;
 800724e:	7868      	ldrb	r0, [r5, #1]
 8007250:	f88c 0001 	strb.w	r0, [ip, #1]
		} while (--cnt);
 8007254:	2a01      	cmp	r2, #1
 8007256:	f43f af05 	beq.w	8007064 <f_read+0xe0>
			*d++ = *s++;
 800725a:	78aa      	ldrb	r2, [r5, #2]
 800725c:	f88c 2002 	strb.w	r2, [ip, #2]
		} while (--cnt);
 8007260:	e700      	b.n	8007064 <f_read+0xe0>
 8007262:	9a02      	ldr	r2, [sp, #8]
 8007264:	4410      	add	r0, r2
			*d++ = *s++;
 8007266:	f81e 1b01 	ldrb.w	r1, [lr], #1
 800726a:	f802 1b01 	strb.w	r1, [r2], #1
		} while (--cnt);
 800726e:	4290      	cmp	r0, r2
 8007270:	d1f9      	bne.n	8007266 <f_read+0x2e2>
 8007272:	e6f7      	b.n	8007064 <f_read+0xe0>

08007274 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007278:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800727a:	2300      	movs	r3, #0
{
 800727c:	b083      	sub	sp, #12
	*bw = 0;	/* Clear write byte counter */
 800727e:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007280:	b150      	cbz	r0, 8007298 <f_write+0x24>
 8007282:	6803      	ldr	r3, [r0, #0]
 8007284:	4604      	mov	r4, r0
 8007286:	b13b      	cbz	r3, 8007298 <f_write+0x24>
 8007288:	4616      	mov	r6, r2
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	b122      	cbz	r2, 8007298 <f_write+0x24>
 800728e:	88da      	ldrh	r2, [r3, #6]
 8007290:	460d      	mov	r5, r1
 8007292:	8881      	ldrh	r1, [r0, #4]
 8007294:	4291      	cmp	r1, r2
 8007296:	d005      	beq.n	80072a4 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8007298:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800729c:	4640      	mov	r0, r8
 800729e:	b003      	add	sp, #12
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80072a4:	7858      	ldrb	r0, [r3, #1]
 80072a6:	f7fe fa0b 	bl	80056c0 <disk_status>
 80072aa:	07c1      	lsls	r1, r0, #31
 80072ac:	d4f4      	bmi.n	8007298 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80072ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 80072b2:	f1b8 0f00 	cmp.w	r8, #0
 80072b6:	d1f1      	bne.n	800729c <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80072b8:	7d23      	ldrb	r3, [r4, #20]
 80072ba:	079a      	lsls	r2, r3, #30
 80072bc:	f140 8138 	bpl.w	8007530 <f_write+0x2bc>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80072c0:	69a1      	ldr	r1, [r4, #24]
 80072c2:	42f1      	cmn	r1, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80072c4:	bf28      	it	cs
 80072c6:	43ce      	mvncs	r6, r1
	for ( ;  btw;							/* Repeat until all data written */
 80072c8:	2e00      	cmp	r6, #0
 80072ca:	f000 80a8 	beq.w	800741e <f_write+0x1aa>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80072ce:	46a3      	mov	fp, r4
 80072d0:	f85b 9b30 	ldr.w	r9, [fp], #48
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80072d4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80072d8:	fbb1 f0f3 	udiv	r0, r1, r3
 80072dc:	fb03 1210 	mls	r2, r3, r0, r1
 80072e0:	2a00      	cmp	r2, #0
 80072e2:	f040 80ad 	bne.w	8007440 <f_write+0x1cc>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80072e6:	f8b9 a00a 	ldrh.w	sl, [r9, #10]
 80072ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 80072ee:	ea1a 0a00 	ands.w	sl, sl, r0
 80072f2:	d110      	bne.n	8007316 <f_write+0xa2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80072f4:	2900      	cmp	r1, #0
 80072f6:	f040 80e6 	bne.w	80074c6 <f_write+0x252>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80072fa:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80072fc:	2800      	cmp	r0, #0
 80072fe:	f000 812b 	beq.w	8007558 <f_write+0x2e4>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007302:	2801      	cmp	r0, #1
 8007304:	f000 80d7 	beq.w	80074b6 <f_write+0x242>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	f000 8109 	beq.w	8007520 <f_write+0x2ac>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800730e:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8007310:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007312:	b903      	cbnz	r3, 8007316 <f_write+0xa2>
 8007314:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007316:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f2c0 80f3 	blt.w	8007506 <f_write+0x292>
	clst -= 2;
 8007320:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007322:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8007326:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007328:	3b02      	subs	r3, #2
 800732a:	429a      	cmp	r2, r3
 800732c:	f080 80c3 	bcs.w	80074b6 <f_write+0x242>
	return clst * fs->csize + fs->database;
 8007330:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8007334:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8007338:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800733c:	2a00      	cmp	r2, #0
 800733e:	f000 80ba 	beq.w	80074b6 <f_write+0x242>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007342:	f8b9 300c 	ldrh.w	r3, [r9, #12]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007346:	42b3      	cmp	r3, r6
			sect += csect;
 8007348:	4452      	add	r2, sl
			if (cc) {						/* Write maximum contiguous sectors directly */
 800734a:	d86c      	bhi.n	8007426 <f_write+0x1b2>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800734c:	fbb6 f3f3 	udiv	r3, r6, r3
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007350:	eb0a 0003 	add.w	r0, sl, r3
 8007354:	4288      	cmp	r0, r1
					cc = fs->csize - csect;
 8007356:	bf88      	it	hi
 8007358:	eba1 030a 	subhi.w	r3, r1, sl
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800735c:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007360:	4629      	mov	r1, r5
 8007362:	e9cd 2300 	strd	r2, r3, [sp]
 8007366:	f7fe f9d3 	bl	8005710 <disk_write>
 800736a:	2800      	cmp	r0, #0
 800736c:	f040 80d8 	bne.w	8007520 <f_write+0x2ac>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007370:	6a21      	ldr	r1, [r4, #32]
 8007372:	9a00      	ldr	r2, [sp, #0]
 8007374:	9b01      	ldr	r3, [sp, #4]
 8007376:	1a8a      	subs	r2, r1, r2
 8007378:	429a      	cmp	r2, r3
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800737a:	f8b9 100c 	ldrh.w	r1, [r9, #12]
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800737e:	d23b      	bcs.n	80073f8 <f_write+0x184>
	if (cnt) {
 8007380:	b3b1      	cbz	r1, 80073f0 <f_write+0x17c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007382:	fb01 f202 	mul.w	r2, r1, r2
 8007386:	1c50      	adds	r0, r2, #1
 8007388:	4428      	add	r0, r5
 800738a:	ebab 0c00 	sub.w	ip, fp, r0
 800738e:	f1bc 0f02 	cmp.w	ip, #2
 8007392:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8007396:	442a      	add	r2, r5
 8007398:	9000      	str	r0, [sp, #0]
 800739a:	f240 80f3 	bls.w	8007584 <f_write+0x310>
 800739e:	2807      	cmp	r0, #7
 80073a0:	f240 80f0 	bls.w	8007584 <f_write+0x310>
 80073a4:	ea4f 0a91 	mov.w	sl, r1, lsr #2
 80073a8:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
 80073ac:	4658      	mov	r0, fp
 80073ae:	4694      	mov	ip, r2
			*d++ = *s++;
 80073b0:	f85c eb04 	ldr.w	lr, [ip], #4
 80073b4:	f840 eb04 	str.w	lr, [r0], #4
		} while (--cnt);
 80073b8:	4582      	cmp	sl, r0
 80073ba:	d1f9      	bne.n	80073b0 <f_write+0x13c>
 80073bc:	f021 0003 	bic.w	r0, r1, #3
 80073c0:	4281      	cmp	r1, r0
 80073c2:	eb0b 0c00 	add.w	ip, fp, r0
 80073c6:	eb02 0e00 	add.w	lr, r2, r0
 80073ca:	d00f      	beq.n	80073ec <f_write+0x178>
			*d++ = *s++;
 80073cc:	5c12      	ldrb	r2, [r2, r0]
 80073ce:	f80b 2000 	strb.w	r2, [fp, r0]
		} while (--cnt);
 80073d2:	9a00      	ldr	r2, [sp, #0]
 80073d4:	1a10      	subs	r0, r2, r0
 80073d6:	d009      	beq.n	80073ec <f_write+0x178>
			*d++ = *s++;
 80073d8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80073dc:	f88c 2001 	strb.w	r2, [ip, #1]
		} while (--cnt);
 80073e0:	2801      	cmp	r0, #1
 80073e2:	d003      	beq.n	80073ec <f_write+0x178>
			*d++ = *s++;
 80073e4:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80073e8:	f88c 2002 	strb.w	r2, [ip, #2]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80073ec:	f8b9 100c 	ldrh.w	r1, [r9, #12]
					fp->flag &= (BYTE)~FA_DIRTY;
 80073f0:	7d22      	ldrb	r2, [r4, #20]
 80073f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073f6:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80073f8:	fb01 f303 	mul.w	r3, r1, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80073fc:	69a1      	ldr	r1, [r4, #24]
 80073fe:	18e8      	adds	r0, r5, r3
 8007400:	68e2      	ldr	r2, [r4, #12]
 8007402:	4419      	add	r1, r3
 8007404:	428a      	cmp	r2, r1
 8007406:	bf38      	it	cc
 8007408:	460a      	movcc	r2, r1
 800740a:	60e2      	str	r2, [r4, #12]
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	61a1      	str	r1, [r4, #24]
 8007410:	441a      	add	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 8007412:	1af6      	subs	r6, r6, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007414:	4605      	mov	r5, r0
 8007416:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8007418:	f47f af5c 	bne.w	80072d4 <f_write+0x60>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800741c:	7d23      	ldrb	r3, [r4, #20]
 800741e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007422:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8007424:	e73a      	b.n	800729c <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007426:	6a21      	ldr	r1, [r4, #32]
 8007428:	4291      	cmp	r1, r2
				fp->fptr < fp->obj.objsize &&
 800742a:	69a1      	ldr	r1, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800742c:	d003      	beq.n	8007436 <f_write+0x1c2>
 800742e:	68e0      	ldr	r0, [r4, #12]
 8007430:	4281      	cmp	r1, r0
 8007432:	f0c0 8099 	bcc.w	8007568 <f_write+0x2f4>
			fp->sect = sect;
 8007436:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007438:	fbb1 f2f3 	udiv	r2, r1, r3
 800743c:	fb03 1212 	mls	r2, r3, r2, r1
 8007440:	1a9b      	subs	r3, r3, r2
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007442:	42b3      	cmp	r3, r6
 8007444:	bf28      	it	cs
 8007446:	4633      	movcs	r3, r6
	if (cnt) {
 8007448:	b92b      	cbnz	r3, 8007456 <f_write+0x1e2>
 800744a:	4628      	mov	r0, r5
		fp->flag |= FA_DIRTY;
 800744c:	7d22      	ldrb	r2, [r4, #20]
 800744e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007452:	7522      	strb	r2, [r4, #20]
 8007454:	e7d4      	b.n	8007400 <f_write+0x18c>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007456:	eb0b 0102 	add.w	r1, fp, r2
 800745a:	1c6a      	adds	r2, r5, #1
 800745c:	1a8a      	subs	r2, r1, r2
 800745e:	2a02      	cmp	r2, #2
 8007460:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007464:	d967      	bls.n	8007536 <f_write+0x2c2>
 8007466:	f1ba 0f07 	cmp.w	sl, #7
 800746a:	d964      	bls.n	8007536 <f_write+0x2c2>
 800746c:	f023 0e03 	bic.w	lr, r3, #3
 8007470:	448e      	add	lr, r1
 8007472:	460a      	mov	r2, r1
 8007474:	4628      	mov	r0, r5
			*d++ = *s++;
 8007476:	f850 cb04 	ldr.w	ip, [r0], #4
 800747a:	f842 cb04 	str.w	ip, [r2], #4
		} while (--cnt);
 800747e:	4572      	cmp	r2, lr
 8007480:	d1f9      	bne.n	8007476 <f_write+0x202>
 8007482:	f023 0203 	bic.w	r2, r3, #3
 8007486:	4293      	cmp	r3, r2
 8007488:	eb01 0c02 	add.w	ip, r1, r2
 800748c:	eb05 0002 	add.w	r0, r5, r2
 8007490:	d00f      	beq.n	80074b2 <f_write+0x23e>
			*d++ = *s++;
 8007492:	f815 e002 	ldrb.w	lr, [r5, r2]
 8007496:	f801 e002 	strb.w	lr, [r1, r2]
		} while (--cnt);
 800749a:	ebba 0202 	subs.w	r2, sl, r2
 800749e:	d007      	beq.n	80074b0 <f_write+0x23c>
			*d++ = *s++;
 80074a0:	7841      	ldrb	r1, [r0, #1]
 80074a2:	f88c 1001 	strb.w	r1, [ip, #1]
		} while (--cnt);
 80074a6:	2a01      	cmp	r2, #1
			*d++ = *s++;
 80074a8:	bf1c      	itt	ne
 80074aa:	7882      	ldrbne	r2, [r0, #2]
 80074ac:	f88c 2002 	strbne.w	r2, [ip, #2]
		} while (--cnt);
 80074b0:	18e8      	adds	r0, r5, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80074b2:	69a1      	ldr	r1, [r4, #24]
 80074b4:	e7ca      	b.n	800744c <f_write+0x1d8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80074b6:	f04f 0802 	mov.w	r8, #2
}
 80074ba:	4640      	mov	r0, r8
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80074bc:	f884 8015 	strb.w	r8, [r4, #21]
}
 80074c0:	b003      	add	sp, #12
 80074c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80074c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d03d      	beq.n	8007548 <f_write+0x2d4>
	FATFS *fs = fp->obj.fs;
 80074cc:	f8d4 c000 	ldr.w	ip, [r4]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80074d0:	6842      	ldr	r2, [r0, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80074d2:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 80074d6:	fbb1 f1f3 	udiv	r1, r1, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80074da:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80074dc:	f8bc 300a 	ldrh.w	r3, [ip, #10]
 80074e0:	fbb1 f1f3 	udiv	r1, r1, r3
		if (ncl == 0) return 0;	/* End of table? (error) */
 80074e4:	2a00      	cmp	r2, #0
 80074e6:	d099      	beq.n	800741c <f_write+0x1a8>
 80074e8:	4603      	mov	r3, r0
 80074ea:	e004      	b.n	80074f6 <f_write+0x282>
		cl -= ncl; tbl++;		/* Next fragment */
 80074ec:	1a89      	subs	r1, r1, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80074ee:	f853 2f08 	ldr.w	r2, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	d092      	beq.n	800741c <f_write+0x1a8>
		if (cl < ncl) break;	/* In this fragment? */
 80074f6:	4291      	cmp	r1, r2
 80074f8:	d2f8      	bcs.n	80074ec <f_write+0x278>
	return cl + *tbl;	/* Return the cluster number */
 80074fa:	6858      	ldr	r0, [r3, #4]
 80074fc:	4408      	add	r0, r1
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80074fe:	2800      	cmp	r0, #0
 8007500:	f47f aeff 	bne.w	8007302 <f_write+0x8e>
 8007504:	e78a      	b.n	800741c <f_write+0x1a8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007506:	6a22      	ldr	r2, [r4, #32]
 8007508:	f899 0001 	ldrb.w	r0, [r9, #1]
 800750c:	2301      	movs	r3, #1
 800750e:	4659      	mov	r1, fp
 8007510:	f7fe f8fe 	bl	8005710 <disk_write>
 8007514:	b920      	cbnz	r0, 8007520 <f_write+0x2ac>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007516:	7d23      	ldrb	r3, [r4, #20]
 8007518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751c:	7523      	strb	r3, [r4, #20]
 800751e:	e6ff      	b.n	8007320 <f_write+0xac>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007520:	f04f 0801 	mov.w	r8, #1
}
 8007524:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007526:	f884 8015 	strb.w	r8, [r4, #21]
}
 800752a:	b003      	add	sp, #12
 800752c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007530:	f04f 0807 	mov.w	r8, #7
 8007534:	e6b2      	b.n	800729c <f_write+0x28>
 8007536:	1e4a      	subs	r2, r1, #1
 8007538:	18e8      	adds	r0, r5, r3
			*d++ = *s++;
 800753a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800753e:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 8007542:	42a8      	cmp	r0, r5
 8007544:	d1f9      	bne.n	800753a <f_write+0x2c6>
 8007546:	e7b4      	b.n	80074b2 <f_write+0x23e>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007548:	69e1      	ldr	r1, [r4, #28]
 800754a:	4620      	mov	r0, r4
 800754c:	f7fe fdb8 	bl	80060c0 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007550:	2800      	cmp	r0, #0
 8007552:	f47f aed6 	bne.w	8007302 <f_write+0x8e>
 8007556:	e761      	b.n	800741c <f_write+0x1a8>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007558:	4651      	mov	r1, sl
 800755a:	4620      	mov	r0, r4
 800755c:	f7fe fdb0 	bl	80060c0 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007560:	2800      	cmp	r0, #0
 8007562:	f47f aece 	bne.w	8007302 <f_write+0x8e>
 8007566:	e759      	b.n	800741c <f_write+0x1a8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007568:	f899 0001 	ldrb.w	r0, [r9, #1]
 800756c:	9200      	str	r2, [sp, #0]
 800756e:	2301      	movs	r3, #1
 8007570:	4659      	mov	r1, fp
 8007572:	f7fe f8bf 	bl	80056f4 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8007576:	2800      	cmp	r0, #0
 8007578:	d1d2      	bne.n	8007520 <f_write+0x2ac>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800757a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800757e:	69a1      	ldr	r1, [r4, #24]
 8007580:	9a00      	ldr	r2, [sp, #0]
 8007582:	e758      	b.n	8007436 <f_write+0x1c2>
 8007584:	4411      	add	r1, r2
 8007586:	f104 002f 	add.w	r0, r4, #47	; 0x2f
			*d++ = *s++;
 800758a:	f812 cb01 	ldrb.w	ip, [r2], #1
 800758e:	f800 cf01 	strb.w	ip, [r0, #1]!
		} while (--cnt);
 8007592:	4291      	cmp	r1, r2
 8007594:	d1f9      	bne.n	800758a <f_write+0x316>
 8007596:	e729      	b.n	80073ec <f_write+0x178>

08007598 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007598:	b158      	cbz	r0, 80075b2 <f_close+0x1a>
 800759a:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80075a0:	b12b      	cbz	r3, 80075ae <f_close+0x16>
 80075a2:	781a      	ldrb	r2, [r3, #0]
 80075a4:	b11a      	cbz	r2, 80075ae <f_close+0x16>
 80075a6:	8881      	ldrh	r1, [r0, #4]
 80075a8:	88da      	ldrh	r2, [r3, #6]
 80075aa:	4291      	cmp	r1, r2
 80075ac:	d003      	beq.n	80075b6 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 80075ae:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80075b0:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 80075b2:	2009      	movs	r0, #9
}
 80075b4:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80075b6:	7858      	ldrb	r0, [r3, #1]
 80075b8:	f7fe f882 	bl	80056c0 <disk_status>
 80075bc:	07c1      	lsls	r1, r0, #31
 80075be:	d4f6      	bmi.n	80075ae <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80075c0:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80075c2:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80075c4:	065a      	lsls	r2, r3, #25
 80075c6:	d53c      	bpl.n	8007642 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80075c8:	061b      	lsls	r3, r3, #24
 80075ca:	d45d      	bmi.n	8007688 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 80075cc:	f7fe f86c 	bl	80056a8 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 80075d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80075d4:	4299      	cmp	r1, r3
			tm = GET_FATTIME();				/* Modified time */
 80075d6:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075d8:	d004      	beq.n	80075e4 <f_close+0x4c>
 80075da:	4628      	mov	r0, r5
 80075dc:	f7fe f94c 	bl	8005878 <move_window.part.0>
				if (res == FR_OK) {
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d1e5      	bne.n	80075b0 <f_close+0x18>
					dir = fp->dir_ptr;
 80075e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80075e6:	7ad3      	ldrb	r3, [r2, #11]
 80075e8:	f043 0320 	orr.w	r3, r3, #32
 80075ec:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80075ee:	68a3      	ldr	r3, [r4, #8]
 80075f0:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075f2:	7693      	strb	r3, [r2, #26]
 80075f4:	f3c3 2007 	ubfx	r0, r3, #8, #8
	*ptr++ = (BYTE)val;
 80075f8:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 80075fa:	7809      	ldrb	r1, [r1, #0]
 80075fc:	2903      	cmp	r1, #3
 80075fe:	d103      	bne.n	8007608 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007600:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007602:	7513      	strb	r3, [r2, #20]
 8007604:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8007606:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007608:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800760a:	7713      	strb	r3, [r2, #28]
 800760c:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800760e:	7751      	strb	r1, [r2, #29]
 8007610:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007612:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val;
 8007614:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8007616:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007618:	75d3      	strb	r3, [r2, #23]
 800761a:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800761c:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 800761e:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8007620:	7596      	strb	r6, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8007622:	8253      	strh	r3, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8007624:	0e36      	lsrs	r6, r6, #24
					fs->wflag = 1;
 8007626:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8007628:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 800762a:	7656      	strb	r6, [r2, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 800762c:	4628      	mov	r0, r5
					fs->wflag = 1;
 800762e:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007630:	f7fe fcd6 	bl	8005fe0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007634:	7d23      	ldrb	r3, [r4, #20]
 8007636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800763a:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800763c:	2800      	cmp	r0, #0
 800763e:	d1b7      	bne.n	80075b0 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007640:	6825      	ldr	r5, [r4, #0]
 8007642:	2d00      	cmp	r5, #0
 8007644:	d0b3      	beq.n	80075ae <f_close+0x16>
 8007646:	782b      	ldrb	r3, [r5, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0b0      	beq.n	80075ae <f_close+0x16>
 800764c:	88a2      	ldrh	r2, [r4, #4]
 800764e:	88eb      	ldrh	r3, [r5, #6]
 8007650:	429a      	cmp	r2, r3
 8007652:	d1ac      	bne.n	80075ae <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007654:	7868      	ldrb	r0, [r5, #1]
 8007656:	f7fe f833 	bl	80056c0 <disk_status>
 800765a:	f010 0001 	ands.w	r0, r0, #1
 800765e:	d1a6      	bne.n	80075ae <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	3b01      	subs	r3, #1
 8007664:	2b01      	cmp	r3, #1
 8007666:	d81c      	bhi.n	80076a2 <f_close+0x10a>
		n = Files[i].ctr;
 8007668:	4912      	ldr	r1, [pc, #72]	; (80076b4 <f_close+0x11c>)
 800766a:	011d      	lsls	r5, r3, #4
 800766c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8007670:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007672:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007676:	d016      	beq.n	80076a6 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8007678:	b1b2      	cbz	r2, 80076a8 <f_close+0x110>
 800767a:	3a01      	subs	r2, #1
 800767c:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800767e:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007680:	b192      	cbz	r2, 80076a8 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 8007682:	2300      	movs	r3, #0
 8007684:	6023      	str	r3, [r4, #0]
}
 8007686:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007688:	6a22      	ldr	r2, [r4, #32]
 800768a:	7868      	ldrb	r0, [r5, #1]
 800768c:	2301      	movs	r3, #1
 800768e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8007692:	f7fe f83d 	bl	8005710 <disk_write>
 8007696:	b950      	cbnz	r0, 80076ae <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007698:	7d23      	ldrb	r3, [r4, #20]
 800769a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769e:	7523      	strb	r3, [r4, #20]
 80076a0:	e794      	b.n	80075cc <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 80076a2:	2002      	movs	r0, #2
}
 80076a4:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 80076a6:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076a8:	2300      	movs	r3, #0
 80076aa:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 80076ac:	e7e9      	b.n	8007682 <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80076ae:	2001      	movs	r0, #1
}
 80076b0:	bd70      	pop	{r4, r5, r6, pc}
 80076b2:	bf00      	nop
 80076b4:	200024fc 	.word	0x200024fc

080076b8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80076b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076bc:	b085      	sub	sp, #20
 80076be:	460f      	mov	r7, r1
 80076c0:	9001      	str	r0, [sp, #4]
 80076c2:	4615      	mov	r5, r2
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80076c4:	a903      	add	r1, sp, #12
 80076c6:	2200      	movs	r2, #0
 80076c8:	a801      	add	r0, sp, #4
 80076ca:	f7fe f90f 	bl	80058ec <find_volume>
	if (res == FR_OK) {
 80076ce:	4606      	mov	r6, r0
 80076d0:	b938      	cbnz	r0, 80076e2 <f_getfree+0x2a>
		*fatfs = fs;				/* Return ptr to the fs object */
 80076d2:	9c03      	ldr	r4, [sp, #12]
 80076d4:	602c      	str	r4, [r5, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80076d6:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
 80076da:	1eaa      	subs	r2, r5, #2
 80076dc:	4293      	cmp	r3, r2
 80076de:	d804      	bhi.n	80076ea <f_getfree+0x32>
			*nclst = fs->free_clst;
 80076e0:	603b      	str	r3, [r7, #0]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
		}
	}

	LEAVE_FF(fs, res);
}
 80076e2:	4630      	mov	r0, r6
 80076e4:	b005      	add	sp, #20
 80076e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80076ea:	7820      	ldrb	r0, [r4, #0]
 80076ec:	2801      	cmp	r0, #1
 80076ee:	d02d      	beq.n	800774c <f_getfree+0x94>
					clst = fs->n_fatent; sect = fs->fatbase;
 80076f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
					i = 0; p = 0;
 80076f2:	4632      	mov	r2, r6
 80076f4:	4633      	mov	r3, r6
			nfree = 0;
 80076f6:	46b0      	mov	r8, r6
						if (i == 0) {
 80076f8:	b97b      	cbnz	r3, 800771a <f_getfree+0x62>
	if (sector != fs->winsect) {	/* Window offset changed? */
 80076fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076fc:	4299      	cmp	r1, r3
							res = move_window(fs, sect++);
 80076fe:	f101 0901 	add.w	r9, r1, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007702:	d006      	beq.n	8007712 <f_getfree+0x5a>
 8007704:	4620      	mov	r0, r4
 8007706:	f7fe f8b7 	bl	8005878 <move_window.part.0>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800770a:	9c03      	ldr	r4, [sp, #12]
							if (res != FR_OK) break;
 800770c:	2800      	cmp	r0, #0
 800770e:	d13e      	bne.n	800778e <f_getfree+0xd6>
						if (fs->fs_type == FS_FAT16) {
 8007710:	7820      	ldrb	r0, [r4, #0]
							i = SS(fs);
 8007712:	89a3      	ldrh	r3, [r4, #12]
							res = move_window(fs, sect++);
 8007714:	4649      	mov	r1, r9
							p = fs->win;
 8007716:	f104 0234 	add.w	r2, r4, #52	; 0x34
						if (fs->fs_type == FS_FAT16) {
 800771a:	2802      	cmp	r0, #2
 800771c:	d02d      	beq.n	800777a <f_getfree+0xc2>
	rv = rv << 8 | ptr[0];
 800771e:	f8d2 c000 	ldr.w	ip, [r2]
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007722:	f03c 4c70 	bics.w	ip, ip, #4026531840	; 0xf0000000
 8007726:	bf08      	it	eq
 8007728:	f108 0801 	addeq.w	r8, r8, #1
							p += 4; i -= 4;
 800772c:	3204      	adds	r2, #4
 800772e:	3b04      	subs	r3, #4
					} while (--clst);
 8007730:	3d01      	subs	r5, #1
 8007732:	d1e1      	bne.n	80076f8 <f_getfree+0x40>
			*nclst = nfree;			/* Return the free clusters */
 8007734:	f8c7 8000 	str.w	r8, [r7]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007738:	7923      	ldrb	r3, [r4, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800773a:	f8c4 8014 	str.w	r8, [r4, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800773e:	f043 0301 	orr.w	r3, r3, #1
}
 8007742:	4630      	mov	r0, r6
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007744:	7123      	strb	r3, [r4, #4]
}
 8007746:	b005      	add	sp, #20
 8007748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				clst = 2; obj.fs = fs;
 800774c:	2502      	movs	r5, #2
			nfree = 0;
 800774e:	46b0      	mov	r8, r6
 8007750:	e008      	b.n	8007764 <f_getfree+0xac>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007752:	2801      	cmp	r0, #1
 8007754:	d01d      	beq.n	8007792 <f_getfree+0xda>
					if (stat == 0) nfree++;
 8007756:	b908      	cbnz	r0, 800775c <f_getfree+0xa4>
 8007758:	f108 0801 	add.w	r8, r8, #1
				} while (++clst < fs->n_fatent);
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	699a      	ldr	r2, [r3, #24]
 8007760:	42aa      	cmp	r2, r5
 8007762:	d919      	bls.n	8007798 <f_getfree+0xe0>
					stat = get_fat(&obj, clst);
 8007764:	4629      	mov	r1, r5
 8007766:	4620      	mov	r0, r4
 8007768:	f7fe fb0e 	bl	8005d88 <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800776c:	1c43      	adds	r3, r0, #1
				} while (++clst < fs->n_fatent);
 800776e:	f105 0501 	add.w	r5, r5, #1
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007772:	d1ee      	bne.n	8007752 <f_getfree+0x9a>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007774:	9c03      	ldr	r4, [sp, #12]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007776:	2601      	movs	r6, #1
 8007778:	e7dc      	b.n	8007734 <f_getfree+0x7c>
							if (ld_word(p) == 0) nfree++;
 800777a:	f8b2 c000 	ldrh.w	ip, [r2]
 800777e:	f1bc 0f00 	cmp.w	ip, #0
 8007782:	d101      	bne.n	8007788 <f_getfree+0xd0>
 8007784:	f108 0801 	add.w	r8, r8, #1
							p += 2; i -= 2;
 8007788:	3202      	adds	r2, #2
 800778a:	3b02      	subs	r3, #2
 800778c:	e7d0      	b.n	8007730 <f_getfree+0x78>
 800778e:	4606      	mov	r6, r0
 8007790:	e7d0      	b.n	8007734 <f_getfree+0x7c>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007792:	9c03      	ldr	r4, [sp, #12]
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007794:	2602      	movs	r6, #2
 8007796:	e7cd      	b.n	8007734 <f_getfree+0x7c>
 8007798:	461c      	mov	r4, r3
 800779a:	e7cb      	b.n	8007734 <f_getfree+0x7c>

0800779c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800779c:	b530      	push	{r4, r5, lr}
 800779e:	b09d      	sub	sp, #116	; 0x74
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80077a0:	2202      	movs	r2, #2
{
 80077a2:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 80077a4:	a903      	add	r1, sp, #12
 80077a6:	a801      	add	r0, sp, #4
 80077a8:	f7fe f8a0 	bl	80058ec <find_volume>
	dj.obj.fs = fs;
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	9304      	str	r3, [sp, #16]
	if (res == FR_OK) {
 80077b0:	b108      	cbz	r0, 80077b6 <f_unlink+0x1a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 80077b2:	b01d      	add	sp, #116	; 0x74
 80077b4:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);		/* Follow the file path */
 80077b6:	9901      	ldr	r1, [sp, #4]
 80077b8:	a804      	add	r0, sp, #16
 80077ba:	f7fe fe13 	bl	80063e4 <follow_path>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80077be:	2800      	cmp	r0, #0
 80077c0:	d1f7      	bne.n	80077b2 <f_unlink+0x16>
		if (Files[i].fs) {	/* Existing entry */
 80077c2:	4b2e      	ldr	r3, [pc, #184]	; (800787c <f_unlink+0xe0>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077c4:	9c04      	ldr	r4, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 80077c6:	681a      	ldr	r2, [r3, #0]
				Files[i].clu == dp->obj.sclust &&
 80077c8:	9906      	ldr	r1, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 80077ca:	9809      	ldr	r0, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 80077cc:	b10a      	cbz	r2, 80077d2 <f_unlink+0x36>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077ce:	42a2      	cmp	r2, r4
 80077d0:	d02d      	beq.n	800782e <f_unlink+0x92>
		if (Files[i].fs) {	/* Existing entry */
 80077d2:	691a      	ldr	r2, [r3, #16]
 80077d4:	b10a      	cbz	r2, 80077da <f_unlink+0x3e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077d6:	42a2      	cmp	r2, r4
 80077d8:	d031      	beq.n	800783e <f_unlink+0xa2>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80077da:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80077de:	2b00      	cmp	r3, #0
 80077e0:	db23      	blt.n	800782a <f_unlink+0x8e>
				if (dj.obj.attr & AM_RDO) {
 80077e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80077e6:	07da      	lsls	r2, r3, #31
 80077e8:	d41d      	bmi.n	8007826 <f_unlink+0x8a>
					dclst = ld_clust(fs, dj.dir);
 80077ea:	9a03      	ldr	r2, [sp, #12]
 80077ec:	990c      	ldr	r1, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 80077ee:	7810      	ldrb	r0, [r2, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 80077f0:	8b4d      	ldrh	r5, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 80077f2:	2803      	cmp	r0, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80077f4:	bf04      	itt	eq
 80077f6:	8a89      	ldrheq	r1, [r1, #20]
 80077f8:	ea45 4501 	orreq.w	r5, r5, r1, lsl #16
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80077fc:	06db      	lsls	r3, r3, #27
 80077fe:	d425      	bmi.n	800784c <f_unlink+0xb0>
	res = move_window(fs, dp->sect);
 8007800:	990b      	ldr	r1, [sp, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007804:	4299      	cmp	r1, r3
 8007806:	d004      	beq.n	8007812 <f_unlink+0x76>
 8007808:	4620      	mov	r0, r4
 800780a:	f7fe f835 	bl	8005878 <move_window.part.0>
	if (res == FR_OK) {
 800780e:	2800      	cmp	r0, #0
 8007810:	d1cf      	bne.n	80077b2 <f_unlink+0x16>
		dp->dir[DIR_Name] = DDEM;
 8007812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007814:	22e5      	movs	r2, #229	; 0xe5
 8007816:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007818:	2301      	movs	r3, #1
 800781a:	70e3      	strb	r3, [r4, #3]
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800781c:	bb35      	cbnz	r5, 800786c <f_unlink+0xd0>
				if (res == FR_OK) res = sync_fs(fs);
 800781e:	9803      	ldr	r0, [sp, #12]
 8007820:	f7fe fbde 	bl	8005fe0 <sync_fs>
 8007824:	e7c5      	b.n	80077b2 <f_unlink+0x16>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8007826:	2007      	movs	r0, #7
 8007828:	e7c3      	b.n	80077b2 <f_unlink+0x16>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800782a:	2006      	movs	r0, #6
	LEAVE_FF(fs, res);
 800782c:	e7c1      	b.n	80077b2 <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	428a      	cmp	r2, r1
 8007832:	d1ce      	bne.n	80077d2 <f_unlink+0x36>
				Files[i].clu == dp->obj.sclust &&
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	4282      	cmp	r2, r0
 8007838:	d1cb      	bne.n	80077d2 <f_unlink+0x36>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800783a:	2010      	movs	r0, #16
 800783c:	e7b9      	b.n	80077b2 <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800783e:	695a      	ldr	r2, [r3, #20]
 8007840:	428a      	cmp	r2, r1
 8007842:	d1ca      	bne.n	80077da <f_unlink+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	4283      	cmp	r3, r0
 8007848:	d1c7      	bne.n	80077da <f_unlink+0x3e>
 800784a:	e7f6      	b.n	800783a <f_unlink+0x9e>
						res = dir_sdi(&sdj, 0);
 800784c:	a810      	add	r0, sp, #64	; 0x40
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800784e:	9210      	str	r2, [sp, #64]	; 0x40
						sdj.obj.sclust = dclst;
 8007850:	9512      	str	r5, [sp, #72]	; 0x48
						res = dir_sdi(&sdj, 0);
 8007852:	f7fe fd1b 	bl	800628c <dir_sdi.constprop.0>
						if (res == FR_OK) {
 8007856:	2800      	cmp	r0, #0
 8007858:	d1ab      	bne.n	80077b2 <f_unlink+0x16>
							res = dir_read(&sdj, 0);			/* Read an item */
 800785a:	a810      	add	r0, sp, #64	; 0x40
 800785c:	f7fe fb0e 	bl	8005e7c <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007860:	2800      	cmp	r0, #0
 8007862:	d0e0      	beq.n	8007826 <f_unlink+0x8a>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007864:	2804      	cmp	r0, #4
 8007866:	d1a4      	bne.n	80077b2 <f_unlink+0x16>
	FATFS *fs = dp->obj.fs;
 8007868:	9c04      	ldr	r4, [sp, #16]
 800786a:	e7c9      	b.n	8007800 <f_unlink+0x64>
					res = remove_chain(&dj.obj, dclst, 0);
 800786c:	2200      	movs	r2, #0
 800786e:	4629      	mov	r1, r5
 8007870:	a804      	add	r0, sp, #16
 8007872:	f7fe ff57 	bl	8006724 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 8007876:	2800      	cmp	r0, #0
 8007878:	d19b      	bne.n	80077b2 <f_unlink+0x16>
 800787a:	e7d0      	b.n	800781e <f_unlink+0x82>
 800787c:	200024fc 	.word	0x200024fc

08007880 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007884:	4680      	mov	r8, r0
 8007886:	b082      	sub	sp, #8
 8007888:	4616      	mov	r6, r2
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800788a:	1e4f      	subs	r7, r1, #1
	TCHAR c, *p = buff;
 800788c:	4605      	mov	r5, r0
	int n = 0;
 800788e:	2400      	movs	r4, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007890:	e009      	b.n	80078a6 <f_gets+0x26>
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
		if (rc != 1) break;
		c = s[0];
 8007892:	f89d 3000 	ldrb.w	r3, [sp]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007896:	2b0d      	cmp	r3, #13
 8007898:	d007      	beq.n	80078aa <f_gets+0x2a>
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
 800789a:	2b0a      	cmp	r3, #10
		*p++ = c;
 800789c:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 80078a0:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 80078a4:	d013      	beq.n	80078ce <f_gets+0x4e>
 80078a6:	42bc      	cmp	r4, r7
 80078a8:	da08      	bge.n	80078bc <f_gets+0x3c>
		f_read(fp, s, 1, &rc);
 80078aa:	ab01      	add	r3, sp, #4
 80078ac:	2201      	movs	r2, #1
 80078ae:	4669      	mov	r1, sp
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7ff fb67 	bl	8006f84 <f_read>
		if (rc != 1) break;
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d0ea      	beq.n	8007892 <f_gets+0x12>
	}
	*p = 0;
 80078bc:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80078be:	429c      	cmp	r4, r3
 80078c0:	bf08      	it	eq
 80078c2:	4698      	moveq	r8, r3
}
 80078c4:	4640      	mov	r0, r8
	*p = 0;
 80078c6:	702b      	strb	r3, [r5, #0]
}
 80078c8:	b002      	add	sp, #8
 80078ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*p = 0;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4640      	mov	r0, r8
	*p = 0;
 80078d2:	702b      	strb	r3, [r5, #0]
}
 80078d4:	b002      	add	sp, #8
 80078d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078da:	bf00      	nop

080078dc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80078dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078de:	b095      	sub	sp, #84	; 0x54
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80078e0:	7804      	ldrb	r4, [r0, #0]
	pb->nchr = pb->idx = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80078e8:	9303      	str	r3, [sp, #12]
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80078ea:	2c00      	cmp	r4, #0
 80078ec:	d054      	beq.n	8007998 <f_puts+0xbc>
 80078ee:	4606      	mov	r6, r0
	pb->buf[i++] = (BYTE)c;
 80078f0:	270d      	movs	r7, #13
 80078f2:	e007      	b.n	8007904 <f_puts+0x28>
	pb->nchr++;
 80078f4:	9b03      	ldr	r3, [sp, #12]
	pb->idx = i;
 80078f6:	9502      	str	r5, [sp, #8]
	pb->nchr++;
 80078f8:	3301      	adds	r3, #1
 80078fa:	9303      	str	r3, [sp, #12]
 80078fc:	462b      	mov	r3, r5
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80078fe:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8007902:	b34c      	cbz	r4, 8007958 <f_puts+0x7c>
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007904:	2c0a      	cmp	r4, #10
 8007906:	d016      	beq.n	8007936 <f_puts+0x5a>
	pb->buf[i++] = (BYTE)c;
 8007908:	f103 0250 	add.w	r2, r3, #80	; 0x50
	if (i < 0) return;
 800790c:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 800790e:	446a      	add	r2, sp
 8007910:	f103 0501 	add.w	r5, r3, #1
	if (i < 0) return;
 8007914:	dbf3      	blt.n	80078fe <f_puts+0x22>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007916:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8007918:	f802 4c40 	strb.w	r4, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800791c:	ddea      	ble.n	80078f4 <f_puts+0x18>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800791e:	462a      	mov	r2, r5
 8007920:	466b      	mov	r3, sp
 8007922:	9801      	ldr	r0, [sp, #4]
 8007924:	a904      	add	r1, sp, #16
 8007926:	f7ff fca5 	bl	8007274 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800792a:	9b00      	ldr	r3, [sp, #0]
 800792c:	1b5d      	subs	r5, r3, r5
 800792e:	bf18      	it	ne
 8007930:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8007934:	e7de      	b.n	80078f4 <f_puts+0x18>
	pb->buf[i++] = (BYTE)c;
 8007936:	f103 0250 	add.w	r2, r3, #80	; 0x50
	if (i < 0) return;
 800793a:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 800793c:	446a      	add	r2, sp
 800793e:	f103 0501 	add.w	r5, r3, #1
	if (i < 0) return;
 8007942:	dbdc      	blt.n	80078fe <f_puts+0x22>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007944:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8007946:	f802 7c40 	strb.w	r7, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800794a:	dc15      	bgt.n	8007978 <f_puts+0x9c>
	pb->nchr++;
 800794c:	9b03      	ldr	r3, [sp, #12]
	pb->idx = i;
 800794e:	9502      	str	r5, [sp, #8]
	pb->nchr++;
 8007950:	3301      	adds	r3, #1
 8007952:	9303      	str	r3, [sp, #12]
 8007954:	462b      	mov	r3, r5
 8007956:	e7d7      	b.n	8007908 <f_puts+0x2c>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007958:	2b00      	cmp	r3, #0
 800795a:	db19      	blt.n	8007990 <f_puts+0xb4>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800795c:	9801      	ldr	r0, [sp, #4]
 800795e:	461a      	mov	r2, r3
 8007960:	466b      	mov	r3, sp
 8007962:	a904      	add	r1, sp, #16
 8007964:	f7ff fc86 	bl	8007274 <f_write>
 8007968:	b990      	cbnz	r0, 8007990 <f_puts+0xb4>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800796a:	9a02      	ldr	r2, [sp, #8]
 800796c:	9b00      	ldr	r3, [sp, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d10e      	bne.n	8007990 <f_puts+0xb4>
 8007972:	9803      	ldr	r0, [sp, #12]
	return putc_flush(&pb);
}
 8007974:	b015      	add	sp, #84	; 0x54
 8007976:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007978:	466b      	mov	r3, sp
 800797a:	462a      	mov	r2, r5
 800797c:	9801      	ldr	r0, [sp, #4]
 800797e:	a904      	add	r1, sp, #16
 8007980:	f7ff fc78 	bl	8007274 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007984:	9b00      	ldr	r3, [sp, #0]
 8007986:	1b5d      	subs	r5, r3, r5
 8007988:	bf18      	it	ne
 800798a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800798e:	e7dd      	b.n	800794c <f_puts+0x70>
	return EOF;
 8007990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007994:	b015      	add	sp, #84	; 0x54
 8007996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007998:	4608      	mov	r0, r1
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800799a:	4622      	mov	r2, r4
 800799c:	e7e0      	b.n	8007960 <f_puts+0x84>
 800799e:	bf00      	nop

080079a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80079a0:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 80079a2:	4b10      	ldr	r3, [pc, #64]	; (80079e4 <FATFS_LinkDriver+0x44>)
 80079a4:	7a5c      	ldrb	r4, [r3, #9]
 80079a6:	b9cc      	cbnz	r4, 80079dc <FATFS_LinkDriver+0x3c>
 80079a8:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 80079aa:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 80079ae:	7a5c      	ldrb	r4, [r3, #9]
 80079b0:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 80079b2:	7a5c      	ldrb	r4, [r3, #9]
 80079b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80079b8:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 80079ba:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 80079bc:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80079be:	441c      	add	r4, r3
 80079c0:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 80079c2:	1c54      	adds	r4, r2, #1
 80079c4:	b2e4      	uxtb	r4, r4
 80079c6:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 80079c8:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 80079ca:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 80079cc:	232f      	movs	r3, #47	; 0x2f
    path[1] = ':';
 80079ce:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 80079d0:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80079d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 80079d6:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80079d8:	70c8      	strb	r0, [r1, #3]
}
 80079da:	4770      	bx	lr
  uint8_t ret = 1;
 80079dc:	2001      	movs	r0, #1
}
 80079de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	20002520 	.word	0x20002520

080079e8 <__errno>:
 80079e8:	4b01      	ldr	r3, [pc, #4]	; (80079f0 <__errno+0x8>)
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	20000024 	.word	0x20000024

080079f4 <__libc_init_array>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	4d0d      	ldr	r5, [pc, #52]	; (8007a2c <__libc_init_array+0x38>)
 80079f8:	4c0d      	ldr	r4, [pc, #52]	; (8007a30 <__libc_init_array+0x3c>)
 80079fa:	1b64      	subs	r4, r4, r5
 80079fc:	10a4      	asrs	r4, r4, #2
 80079fe:	2600      	movs	r6, #0
 8007a00:	42a6      	cmp	r6, r4
 8007a02:	d109      	bne.n	8007a18 <__libc_init_array+0x24>
 8007a04:	4d0b      	ldr	r5, [pc, #44]	; (8007a34 <__libc_init_array+0x40>)
 8007a06:	4c0c      	ldr	r4, [pc, #48]	; (8007a38 <__libc_init_array+0x44>)
 8007a08:	f002 ffae 	bl	800a968 <_init>
 8007a0c:	1b64      	subs	r4, r4, r5
 8007a0e:	10a4      	asrs	r4, r4, #2
 8007a10:	2600      	movs	r6, #0
 8007a12:	42a6      	cmp	r6, r4
 8007a14:	d105      	bne.n	8007a22 <__libc_init_array+0x2e>
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
 8007a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1c:	4798      	blx	r3
 8007a1e:	3601      	adds	r6, #1
 8007a20:	e7ee      	b.n	8007a00 <__libc_init_array+0xc>
 8007a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a26:	4798      	blx	r3
 8007a28:	3601      	adds	r6, #1
 8007a2a:	e7f2      	b.n	8007a12 <__libc_init_array+0x1e>
 8007a2c:	0800bb0c 	.word	0x0800bb0c
 8007a30:	0800bb0c 	.word	0x0800bb0c
 8007a34:	0800bb0c 	.word	0x0800bb0c
 8007a38:	0800bb10 	.word	0x0800bb10

08007a3c <malloc>:
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <malloc+0xc>)
 8007a3e:	4601      	mov	r1, r0
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	f000 b87f 	b.w	8007b44 <_malloc_r>
 8007a46:	bf00      	nop
 8007a48:	20000024 	.word	0x20000024

08007a4c <free>:
 8007a4c:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <free+0xc>)
 8007a4e:	4601      	mov	r1, r0
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	f000 b80b 	b.w	8007a6c <_free_r>
 8007a56:	bf00      	nop
 8007a58:	20000024 	.word	0x20000024

08007a5c <memset>:
 8007a5c:	4402      	add	r2, r0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d100      	bne.n	8007a66 <memset+0xa>
 8007a64:	4770      	bx	lr
 8007a66:	f803 1b01 	strb.w	r1, [r3], #1
 8007a6a:	e7f9      	b.n	8007a60 <memset+0x4>

08007a6c <_free_r>:
 8007a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a6e:	2900      	cmp	r1, #0
 8007a70:	d044      	beq.n	8007afc <_free_r+0x90>
 8007a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a76:	9001      	str	r0, [sp, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a7e:	bfb8      	it	lt
 8007a80:	18e4      	addlt	r4, r4, r3
 8007a82:	f001 ff7d 	bl	8009980 <__malloc_lock>
 8007a86:	4a1e      	ldr	r2, [pc, #120]	; (8007b00 <_free_r+0x94>)
 8007a88:	9801      	ldr	r0, [sp, #4]
 8007a8a:	6813      	ldr	r3, [r2, #0]
 8007a8c:	b933      	cbnz	r3, 8007a9c <_free_r+0x30>
 8007a8e:	6063      	str	r3, [r4, #4]
 8007a90:	6014      	str	r4, [r2, #0]
 8007a92:	b003      	add	sp, #12
 8007a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a98:	f001 bf78 	b.w	800998c <__malloc_unlock>
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	d908      	bls.n	8007ab2 <_free_r+0x46>
 8007aa0:	6825      	ldr	r5, [r4, #0]
 8007aa2:	1961      	adds	r1, r4, r5
 8007aa4:	428b      	cmp	r3, r1
 8007aa6:	bf01      	itttt	eq
 8007aa8:	6819      	ldreq	r1, [r3, #0]
 8007aaa:	685b      	ldreq	r3, [r3, #4]
 8007aac:	1949      	addeq	r1, r1, r5
 8007aae:	6021      	streq	r1, [r4, #0]
 8007ab0:	e7ed      	b.n	8007a8e <_free_r+0x22>
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	b10b      	cbz	r3, 8007abc <_free_r+0x50>
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	d9fa      	bls.n	8007ab2 <_free_r+0x46>
 8007abc:	6811      	ldr	r1, [r2, #0]
 8007abe:	1855      	adds	r5, r2, r1
 8007ac0:	42a5      	cmp	r5, r4
 8007ac2:	d10b      	bne.n	8007adc <_free_r+0x70>
 8007ac4:	6824      	ldr	r4, [r4, #0]
 8007ac6:	4421      	add	r1, r4
 8007ac8:	1854      	adds	r4, r2, r1
 8007aca:	42a3      	cmp	r3, r4
 8007acc:	6011      	str	r1, [r2, #0]
 8007ace:	d1e0      	bne.n	8007a92 <_free_r+0x26>
 8007ad0:	681c      	ldr	r4, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	6053      	str	r3, [r2, #4]
 8007ad6:	4421      	add	r1, r4
 8007ad8:	6011      	str	r1, [r2, #0]
 8007ada:	e7da      	b.n	8007a92 <_free_r+0x26>
 8007adc:	d902      	bls.n	8007ae4 <_free_r+0x78>
 8007ade:	230c      	movs	r3, #12
 8007ae0:	6003      	str	r3, [r0, #0]
 8007ae2:	e7d6      	b.n	8007a92 <_free_r+0x26>
 8007ae4:	6825      	ldr	r5, [r4, #0]
 8007ae6:	1961      	adds	r1, r4, r5
 8007ae8:	428b      	cmp	r3, r1
 8007aea:	bf04      	itt	eq
 8007aec:	6819      	ldreq	r1, [r3, #0]
 8007aee:	685b      	ldreq	r3, [r3, #4]
 8007af0:	6063      	str	r3, [r4, #4]
 8007af2:	bf04      	itt	eq
 8007af4:	1949      	addeq	r1, r1, r5
 8007af6:	6021      	streq	r1, [r4, #0]
 8007af8:	6054      	str	r4, [r2, #4]
 8007afa:	e7ca      	b.n	8007a92 <_free_r+0x26>
 8007afc:	b003      	add	sp, #12
 8007afe:	bd30      	pop	{r4, r5, pc}
 8007b00:	2000252c 	.word	0x2000252c

08007b04 <sbrk_aligned>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	4e0e      	ldr	r6, [pc, #56]	; (8007b40 <sbrk_aligned+0x3c>)
 8007b08:	460c      	mov	r4, r1
 8007b0a:	6831      	ldr	r1, [r6, #0]
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	b911      	cbnz	r1, 8007b16 <sbrk_aligned+0x12>
 8007b10:	f000 fd84 	bl	800861c <_sbrk_r>
 8007b14:	6030      	str	r0, [r6, #0]
 8007b16:	4621      	mov	r1, r4
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f000 fd7f 	bl	800861c <_sbrk_r>
 8007b1e:	1c43      	adds	r3, r0, #1
 8007b20:	d00a      	beq.n	8007b38 <sbrk_aligned+0x34>
 8007b22:	1cc4      	adds	r4, r0, #3
 8007b24:	f024 0403 	bic.w	r4, r4, #3
 8007b28:	42a0      	cmp	r0, r4
 8007b2a:	d007      	beq.n	8007b3c <sbrk_aligned+0x38>
 8007b2c:	1a21      	subs	r1, r4, r0
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 fd74 	bl	800861c <_sbrk_r>
 8007b34:	3001      	adds	r0, #1
 8007b36:	d101      	bne.n	8007b3c <sbrk_aligned+0x38>
 8007b38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	20002530 	.word	0x20002530

08007b44 <_malloc_r>:
 8007b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b48:	1ccd      	adds	r5, r1, #3
 8007b4a:	f025 0503 	bic.w	r5, r5, #3
 8007b4e:	3508      	adds	r5, #8
 8007b50:	2d0c      	cmp	r5, #12
 8007b52:	bf38      	it	cc
 8007b54:	250c      	movcc	r5, #12
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	4607      	mov	r7, r0
 8007b5a:	db01      	blt.n	8007b60 <_malloc_r+0x1c>
 8007b5c:	42a9      	cmp	r1, r5
 8007b5e:	d905      	bls.n	8007b6c <_malloc_r+0x28>
 8007b60:	230c      	movs	r3, #12
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	2600      	movs	r6, #0
 8007b66:	4630      	mov	r0, r6
 8007b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6c:	4e2e      	ldr	r6, [pc, #184]	; (8007c28 <_malloc_r+0xe4>)
 8007b6e:	f001 ff07 	bl	8009980 <__malloc_lock>
 8007b72:	6833      	ldr	r3, [r6, #0]
 8007b74:	461c      	mov	r4, r3
 8007b76:	bb34      	cbnz	r4, 8007bc6 <_malloc_r+0x82>
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	f7ff ffc2 	bl	8007b04 <sbrk_aligned>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	4604      	mov	r4, r0
 8007b84:	d14d      	bne.n	8007c22 <_malloc_r+0xde>
 8007b86:	6834      	ldr	r4, [r6, #0]
 8007b88:	4626      	mov	r6, r4
 8007b8a:	2e00      	cmp	r6, #0
 8007b8c:	d140      	bne.n	8007c10 <_malloc_r+0xcc>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	4631      	mov	r1, r6
 8007b92:	4638      	mov	r0, r7
 8007b94:	eb04 0803 	add.w	r8, r4, r3
 8007b98:	f000 fd40 	bl	800861c <_sbrk_r>
 8007b9c:	4580      	cmp	r8, r0
 8007b9e:	d13a      	bne.n	8007c16 <_malloc_r+0xd2>
 8007ba0:	6821      	ldr	r1, [r4, #0]
 8007ba2:	3503      	adds	r5, #3
 8007ba4:	1a6d      	subs	r5, r5, r1
 8007ba6:	f025 0503 	bic.w	r5, r5, #3
 8007baa:	3508      	adds	r5, #8
 8007bac:	2d0c      	cmp	r5, #12
 8007bae:	bf38      	it	cc
 8007bb0:	250c      	movcc	r5, #12
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff ffa5 	bl	8007b04 <sbrk_aligned>
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d02b      	beq.n	8007c16 <_malloc_r+0xd2>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	442b      	add	r3, r5
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	e00e      	b.n	8007be4 <_malloc_r+0xa0>
 8007bc6:	6822      	ldr	r2, [r4, #0]
 8007bc8:	1b52      	subs	r2, r2, r5
 8007bca:	d41e      	bmi.n	8007c0a <_malloc_r+0xc6>
 8007bcc:	2a0b      	cmp	r2, #11
 8007bce:	d916      	bls.n	8007bfe <_malloc_r+0xba>
 8007bd0:	1961      	adds	r1, r4, r5
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	6025      	str	r5, [r4, #0]
 8007bd6:	bf18      	it	ne
 8007bd8:	6059      	strne	r1, [r3, #4]
 8007bda:	6863      	ldr	r3, [r4, #4]
 8007bdc:	bf08      	it	eq
 8007bde:	6031      	streq	r1, [r6, #0]
 8007be0:	5162      	str	r2, [r4, r5]
 8007be2:	604b      	str	r3, [r1, #4]
 8007be4:	4638      	mov	r0, r7
 8007be6:	f104 060b 	add.w	r6, r4, #11
 8007bea:	f001 fecf 	bl	800998c <__malloc_unlock>
 8007bee:	f026 0607 	bic.w	r6, r6, #7
 8007bf2:	1d23      	adds	r3, r4, #4
 8007bf4:	1af2      	subs	r2, r6, r3
 8007bf6:	d0b6      	beq.n	8007b66 <_malloc_r+0x22>
 8007bf8:	1b9b      	subs	r3, r3, r6
 8007bfa:	50a3      	str	r3, [r4, r2]
 8007bfc:	e7b3      	b.n	8007b66 <_malloc_r+0x22>
 8007bfe:	6862      	ldr	r2, [r4, #4]
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	bf0c      	ite	eq
 8007c04:	6032      	streq	r2, [r6, #0]
 8007c06:	605a      	strne	r2, [r3, #4]
 8007c08:	e7ec      	b.n	8007be4 <_malloc_r+0xa0>
 8007c0a:	4623      	mov	r3, r4
 8007c0c:	6864      	ldr	r4, [r4, #4]
 8007c0e:	e7b2      	b.n	8007b76 <_malloc_r+0x32>
 8007c10:	4634      	mov	r4, r6
 8007c12:	6876      	ldr	r6, [r6, #4]
 8007c14:	e7b9      	b.n	8007b8a <_malloc_r+0x46>
 8007c16:	230c      	movs	r3, #12
 8007c18:	603b      	str	r3, [r7, #0]
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	f001 feb6 	bl	800998c <__malloc_unlock>
 8007c20:	e7a1      	b.n	8007b66 <_malloc_r+0x22>
 8007c22:	6025      	str	r5, [r4, #0]
 8007c24:	e7de      	b.n	8007be4 <_malloc_r+0xa0>
 8007c26:	bf00      	nop
 8007c28:	2000252c 	.word	0x2000252c

08007c2c <__cvt>:
 8007c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	ec55 4b10 	vmov	r4, r5, d0
 8007c34:	2d00      	cmp	r5, #0
 8007c36:	460e      	mov	r6, r1
 8007c38:	4619      	mov	r1, r3
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	bfbb      	ittet	lt
 8007c3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c42:	461d      	movlt	r5, r3
 8007c44:	2300      	movge	r3, #0
 8007c46:	232d      	movlt	r3, #45	; 0x2d
 8007c48:	700b      	strb	r3, [r1, #0]
 8007c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c50:	4691      	mov	r9, r2
 8007c52:	f023 0820 	bic.w	r8, r3, #32
 8007c56:	bfbc      	itt	lt
 8007c58:	4622      	movlt	r2, r4
 8007c5a:	4614      	movlt	r4, r2
 8007c5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c60:	d005      	beq.n	8007c6e <__cvt+0x42>
 8007c62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c66:	d100      	bne.n	8007c6a <__cvt+0x3e>
 8007c68:	3601      	adds	r6, #1
 8007c6a:	2102      	movs	r1, #2
 8007c6c:	e000      	b.n	8007c70 <__cvt+0x44>
 8007c6e:	2103      	movs	r1, #3
 8007c70:	ab03      	add	r3, sp, #12
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	ab02      	add	r3, sp, #8
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	ec45 4b10 	vmov	d0, r4, r5
 8007c7c:	4653      	mov	r3, sl
 8007c7e:	4632      	mov	r2, r6
 8007c80:	f000 fe5e 	bl	8008940 <_dtoa_r>
 8007c84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c88:	4607      	mov	r7, r0
 8007c8a:	d102      	bne.n	8007c92 <__cvt+0x66>
 8007c8c:	f019 0f01 	tst.w	r9, #1
 8007c90:	d022      	beq.n	8007cd8 <__cvt+0xac>
 8007c92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c96:	eb07 0906 	add.w	r9, r7, r6
 8007c9a:	d110      	bne.n	8007cbe <__cvt+0x92>
 8007c9c:	783b      	ldrb	r3, [r7, #0]
 8007c9e:	2b30      	cmp	r3, #48	; 0x30
 8007ca0:	d10a      	bne.n	8007cb8 <__cvt+0x8c>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 ff25 	bl	8000af8 <__aeabi_dcmpeq>
 8007cae:	b918      	cbnz	r0, 8007cb8 <__cvt+0x8c>
 8007cb0:	f1c6 0601 	rsb	r6, r6, #1
 8007cb4:	f8ca 6000 	str.w	r6, [sl]
 8007cb8:	f8da 3000 	ldr.w	r3, [sl]
 8007cbc:	4499      	add	r9, r3
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f7f8 ff17 	bl	8000af8 <__aeabi_dcmpeq>
 8007cca:	b108      	cbz	r0, 8007cd0 <__cvt+0xa4>
 8007ccc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cd0:	2230      	movs	r2, #48	; 0x30
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	454b      	cmp	r3, r9
 8007cd6:	d307      	bcc.n	8007ce8 <__cvt+0xbc>
 8007cd8:	9b03      	ldr	r3, [sp, #12]
 8007cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cdc:	1bdb      	subs	r3, r3, r7
 8007cde:	4638      	mov	r0, r7
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	b004      	add	sp, #16
 8007ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce8:	1c59      	adds	r1, r3, #1
 8007cea:	9103      	str	r1, [sp, #12]
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e7f0      	b.n	8007cd2 <__cvt+0xa6>

08007cf0 <__exponent>:
 8007cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	bfb8      	it	lt
 8007cf8:	4249      	neglt	r1, r1
 8007cfa:	f803 2b02 	strb.w	r2, [r3], #2
 8007cfe:	bfb4      	ite	lt
 8007d00:	222d      	movlt	r2, #45	; 0x2d
 8007d02:	222b      	movge	r2, #43	; 0x2b
 8007d04:	2909      	cmp	r1, #9
 8007d06:	7042      	strb	r2, [r0, #1]
 8007d08:	dd2a      	ble.n	8007d60 <__exponent+0x70>
 8007d0a:	f10d 0407 	add.w	r4, sp, #7
 8007d0e:	46a4      	mov	ip, r4
 8007d10:	270a      	movs	r7, #10
 8007d12:	46a6      	mov	lr, r4
 8007d14:	460a      	mov	r2, r1
 8007d16:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d1a:	fb07 1516 	mls	r5, r7, r6, r1
 8007d1e:	3530      	adds	r5, #48	; 0x30
 8007d20:	2a63      	cmp	r2, #99	; 0x63
 8007d22:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007d26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	dcf1      	bgt.n	8007d12 <__exponent+0x22>
 8007d2e:	3130      	adds	r1, #48	; 0x30
 8007d30:	f1ae 0502 	sub.w	r5, lr, #2
 8007d34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d38:	1c44      	adds	r4, r0, #1
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4561      	cmp	r1, ip
 8007d3e:	d30a      	bcc.n	8007d56 <__exponent+0x66>
 8007d40:	f10d 0209 	add.w	r2, sp, #9
 8007d44:	eba2 020e 	sub.w	r2, r2, lr
 8007d48:	4565      	cmp	r5, ip
 8007d4a:	bf88      	it	hi
 8007d4c:	2200      	movhi	r2, #0
 8007d4e:	4413      	add	r3, r2
 8007d50:	1a18      	subs	r0, r3, r0
 8007d52:	b003      	add	sp, #12
 8007d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d5e:	e7ed      	b.n	8007d3c <__exponent+0x4c>
 8007d60:	2330      	movs	r3, #48	; 0x30
 8007d62:	3130      	adds	r1, #48	; 0x30
 8007d64:	7083      	strb	r3, [r0, #2]
 8007d66:	70c1      	strb	r1, [r0, #3]
 8007d68:	1d03      	adds	r3, r0, #4
 8007d6a:	e7f1      	b.n	8007d50 <__exponent+0x60>

08007d6c <_printf_float>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	ed2d 8b02 	vpush	{d8}
 8007d74:	b08d      	sub	sp, #52	; 0x34
 8007d76:	460c      	mov	r4, r1
 8007d78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	461f      	mov	r7, r3
 8007d80:	4605      	mov	r5, r0
 8007d82:	f001 fd83 	bl	800988c <_localeconv_r>
 8007d86:	f8d0 a000 	ldr.w	sl, [r0]
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	f7f8 fa32 	bl	80001f4 <strlen>
 8007d90:	2300      	movs	r3, #0
 8007d92:	930a      	str	r3, [sp, #40]	; 0x28
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	9305      	str	r3, [sp, #20]
 8007d98:	f8d8 3000 	ldr.w	r3, [r8]
 8007d9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007da0:	3307      	adds	r3, #7
 8007da2:	f023 0307 	bic.w	r3, r3, #7
 8007da6:	f103 0208 	add.w	r2, r3, #8
 8007daa:	f8c8 2000 	str.w	r2, [r8]
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007db6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007dba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dbe:	9307      	str	r3, [sp, #28]
 8007dc0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dc4:	ee08 0a10 	vmov	s16, r0
 8007dc8:	4b9f      	ldr	r3, [pc, #636]	; (8008048 <_printf_float+0x2dc>)
 8007dca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dd2:	f7f8 fec3 	bl	8000b5c <__aeabi_dcmpun>
 8007dd6:	bb88      	cbnz	r0, 8007e3c <_printf_float+0xd0>
 8007dd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ddc:	4b9a      	ldr	r3, [pc, #616]	; (8008048 <_printf_float+0x2dc>)
 8007dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007de2:	f7f8 fe9d 	bl	8000b20 <__aeabi_dcmple>
 8007de6:	bb48      	cbnz	r0, 8007e3c <_printf_float+0xd0>
 8007de8:	2200      	movs	r2, #0
 8007dea:	2300      	movs	r3, #0
 8007dec:	4640      	mov	r0, r8
 8007dee:	4649      	mov	r1, r9
 8007df0:	f7f8 fe8c 	bl	8000b0c <__aeabi_dcmplt>
 8007df4:	b110      	cbz	r0, 8007dfc <_printf_float+0x90>
 8007df6:	232d      	movs	r3, #45	; 0x2d
 8007df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfc:	4b93      	ldr	r3, [pc, #588]	; (800804c <_printf_float+0x2e0>)
 8007dfe:	4894      	ldr	r0, [pc, #592]	; (8008050 <_printf_float+0x2e4>)
 8007e00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e04:	bf94      	ite	ls
 8007e06:	4698      	movls	r8, r3
 8007e08:	4680      	movhi	r8, r0
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	6123      	str	r3, [r4, #16]
 8007e0e:	9b05      	ldr	r3, [sp, #20]
 8007e10:	f023 0204 	bic.w	r2, r3, #4
 8007e14:	6022      	str	r2, [r4, #0]
 8007e16:	f04f 0900 	mov.w	r9, #0
 8007e1a:	9700      	str	r7, [sp, #0]
 8007e1c:	4633      	mov	r3, r6
 8007e1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e20:	4621      	mov	r1, r4
 8007e22:	4628      	mov	r0, r5
 8007e24:	f000 f9d8 	bl	80081d8 <_printf_common>
 8007e28:	3001      	adds	r0, #1
 8007e2a:	f040 8090 	bne.w	8007f4e <_printf_float+0x1e2>
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e32:	b00d      	add	sp, #52	; 0x34
 8007e34:	ecbd 8b02 	vpop	{d8}
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	4640      	mov	r0, r8
 8007e42:	4649      	mov	r1, r9
 8007e44:	f7f8 fe8a 	bl	8000b5c <__aeabi_dcmpun>
 8007e48:	b140      	cbz	r0, 8007e5c <_printf_float+0xf0>
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bfbc      	itt	lt
 8007e50:	232d      	movlt	r3, #45	; 0x2d
 8007e52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e56:	487f      	ldr	r0, [pc, #508]	; (8008054 <_printf_float+0x2e8>)
 8007e58:	4b7f      	ldr	r3, [pc, #508]	; (8008058 <_printf_float+0x2ec>)
 8007e5a:	e7d1      	b.n	8007e00 <_printf_float+0x94>
 8007e5c:	6863      	ldr	r3, [r4, #4]
 8007e5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e62:	9206      	str	r2, [sp, #24]
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	d13f      	bne.n	8007ee8 <_printf_float+0x17c>
 8007e68:	2306      	movs	r3, #6
 8007e6a:	6063      	str	r3, [r4, #4]
 8007e6c:	9b05      	ldr	r3, [sp, #20]
 8007e6e:	6861      	ldr	r1, [r4, #4]
 8007e70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e74:	2300      	movs	r3, #0
 8007e76:	9303      	str	r3, [sp, #12]
 8007e78:	ab0a      	add	r3, sp, #40	; 0x28
 8007e7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e7e:	ab09      	add	r3, sp, #36	; 0x24
 8007e80:	ec49 8b10 	vmov	d0, r8, r9
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	6022      	str	r2, [r4, #0]
 8007e88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	f7ff fecd 	bl	8007c2c <__cvt>
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e96:	2b47      	cmp	r3, #71	; 0x47
 8007e98:	4680      	mov	r8, r0
 8007e9a:	d108      	bne.n	8007eae <_printf_float+0x142>
 8007e9c:	1cc8      	adds	r0, r1, #3
 8007e9e:	db02      	blt.n	8007ea6 <_printf_float+0x13a>
 8007ea0:	6863      	ldr	r3, [r4, #4]
 8007ea2:	4299      	cmp	r1, r3
 8007ea4:	dd41      	ble.n	8007f2a <_printf_float+0x1be>
 8007ea6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007eaa:	fa5f fb8b 	uxtb.w	fp, fp
 8007eae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007eb2:	d820      	bhi.n	8007ef6 <_printf_float+0x18a>
 8007eb4:	3901      	subs	r1, #1
 8007eb6:	465a      	mov	r2, fp
 8007eb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ebc:	9109      	str	r1, [sp, #36]	; 0x24
 8007ebe:	f7ff ff17 	bl	8007cf0 <__exponent>
 8007ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ec4:	1813      	adds	r3, r2, r0
 8007ec6:	2a01      	cmp	r2, #1
 8007ec8:	4681      	mov	r9, r0
 8007eca:	6123      	str	r3, [r4, #16]
 8007ecc:	dc02      	bgt.n	8007ed4 <_printf_float+0x168>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	07d2      	lsls	r2, r2, #31
 8007ed2:	d501      	bpl.n	8007ed8 <_printf_float+0x16c>
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d09c      	beq.n	8007e1a <_printf_float+0xae>
 8007ee0:	232d      	movs	r3, #45	; 0x2d
 8007ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee6:	e798      	b.n	8007e1a <_printf_float+0xae>
 8007ee8:	9a06      	ldr	r2, [sp, #24]
 8007eea:	2a47      	cmp	r2, #71	; 0x47
 8007eec:	d1be      	bne.n	8007e6c <_printf_float+0x100>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1bc      	bne.n	8007e6c <_printf_float+0x100>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e7b9      	b.n	8007e6a <_printf_float+0xfe>
 8007ef6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007efa:	d118      	bne.n	8007f2e <_printf_float+0x1c2>
 8007efc:	2900      	cmp	r1, #0
 8007efe:	6863      	ldr	r3, [r4, #4]
 8007f00:	dd0b      	ble.n	8007f1a <_printf_float+0x1ae>
 8007f02:	6121      	str	r1, [r4, #16]
 8007f04:	b913      	cbnz	r3, 8007f0c <_printf_float+0x1a0>
 8007f06:	6822      	ldr	r2, [r4, #0]
 8007f08:	07d0      	lsls	r0, r2, #31
 8007f0a:	d502      	bpl.n	8007f12 <_printf_float+0x1a6>
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	440b      	add	r3, r1
 8007f10:	6123      	str	r3, [r4, #16]
 8007f12:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f14:	f04f 0900 	mov.w	r9, #0
 8007f18:	e7de      	b.n	8007ed8 <_printf_float+0x16c>
 8007f1a:	b913      	cbnz	r3, 8007f22 <_printf_float+0x1b6>
 8007f1c:	6822      	ldr	r2, [r4, #0]
 8007f1e:	07d2      	lsls	r2, r2, #31
 8007f20:	d501      	bpl.n	8007f26 <_printf_float+0x1ba>
 8007f22:	3302      	adds	r3, #2
 8007f24:	e7f4      	b.n	8007f10 <_printf_float+0x1a4>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e7f2      	b.n	8007f10 <_printf_float+0x1a4>
 8007f2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f30:	4299      	cmp	r1, r3
 8007f32:	db05      	blt.n	8007f40 <_printf_float+0x1d4>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	6121      	str	r1, [r4, #16]
 8007f38:	07d8      	lsls	r0, r3, #31
 8007f3a:	d5ea      	bpl.n	8007f12 <_printf_float+0x1a6>
 8007f3c:	1c4b      	adds	r3, r1, #1
 8007f3e:	e7e7      	b.n	8007f10 <_printf_float+0x1a4>
 8007f40:	2900      	cmp	r1, #0
 8007f42:	bfd4      	ite	le
 8007f44:	f1c1 0202 	rsble	r2, r1, #2
 8007f48:	2201      	movgt	r2, #1
 8007f4a:	4413      	add	r3, r2
 8007f4c:	e7e0      	b.n	8007f10 <_printf_float+0x1a4>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	055a      	lsls	r2, r3, #21
 8007f52:	d407      	bmi.n	8007f64 <_printf_float+0x1f8>
 8007f54:	6923      	ldr	r3, [r4, #16]
 8007f56:	4642      	mov	r2, r8
 8007f58:	4631      	mov	r1, r6
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b8      	blx	r7
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d12c      	bne.n	8007fbc <_printf_float+0x250>
 8007f62:	e764      	b.n	8007e2e <_printf_float+0xc2>
 8007f64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f68:	f240 80e0 	bls.w	800812c <_printf_float+0x3c0>
 8007f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f70:	2200      	movs	r2, #0
 8007f72:	2300      	movs	r3, #0
 8007f74:	f7f8 fdc0 	bl	8000af8 <__aeabi_dcmpeq>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d034      	beq.n	8007fe6 <_printf_float+0x27a>
 8007f7c:	4a37      	ldr	r2, [pc, #220]	; (800805c <_printf_float+0x2f0>)
 8007f7e:	2301      	movs	r3, #1
 8007f80:	4631      	mov	r1, r6
 8007f82:	4628      	mov	r0, r5
 8007f84:	47b8      	blx	r7
 8007f86:	3001      	adds	r0, #1
 8007f88:	f43f af51 	beq.w	8007e2e <_printf_float+0xc2>
 8007f8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f90:	429a      	cmp	r2, r3
 8007f92:	db02      	blt.n	8007f9a <_printf_float+0x22e>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	07d8      	lsls	r0, r3, #31
 8007f98:	d510      	bpl.n	8007fbc <_printf_float+0x250>
 8007f9a:	ee18 3a10 	vmov	r3, s16
 8007f9e:	4652      	mov	r2, sl
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	47b8      	blx	r7
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	f43f af41 	beq.w	8007e2e <_printf_float+0xc2>
 8007fac:	f04f 0800 	mov.w	r8, #0
 8007fb0:	f104 091a 	add.w	r9, r4, #26
 8007fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	4543      	cmp	r3, r8
 8007fba:	dc09      	bgt.n	8007fd0 <_printf_float+0x264>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	f100 8105 	bmi.w	80081ce <_printf_float+0x462>
 8007fc4:	68e0      	ldr	r0, [r4, #12]
 8007fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fc8:	4298      	cmp	r0, r3
 8007fca:	bfb8      	it	lt
 8007fcc:	4618      	movlt	r0, r3
 8007fce:	e730      	b.n	8007e32 <_printf_float+0xc6>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	464a      	mov	r2, r9
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f43f af27 	beq.w	8007e2e <_printf_float+0xc2>
 8007fe0:	f108 0801 	add.w	r8, r8, #1
 8007fe4:	e7e6      	b.n	8007fb4 <_printf_float+0x248>
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	dc39      	bgt.n	8008060 <_printf_float+0x2f4>
 8007fec:	4a1b      	ldr	r2, [pc, #108]	; (800805c <_printf_float+0x2f0>)
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f43f af19 	beq.w	8007e2e <_printf_float+0xc2>
 8007ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008000:	4313      	orrs	r3, r2
 8008002:	d102      	bne.n	800800a <_printf_float+0x29e>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	07d9      	lsls	r1, r3, #31
 8008008:	d5d8      	bpl.n	8007fbc <_printf_float+0x250>
 800800a:	ee18 3a10 	vmov	r3, s16
 800800e:	4652      	mov	r2, sl
 8008010:	4631      	mov	r1, r6
 8008012:	4628      	mov	r0, r5
 8008014:	47b8      	blx	r7
 8008016:	3001      	adds	r0, #1
 8008018:	f43f af09 	beq.w	8007e2e <_printf_float+0xc2>
 800801c:	f04f 0900 	mov.w	r9, #0
 8008020:	f104 0a1a 	add.w	sl, r4, #26
 8008024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008026:	425b      	negs	r3, r3
 8008028:	454b      	cmp	r3, r9
 800802a:	dc01      	bgt.n	8008030 <_printf_float+0x2c4>
 800802c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800802e:	e792      	b.n	8007f56 <_printf_float+0x1ea>
 8008030:	2301      	movs	r3, #1
 8008032:	4652      	mov	r2, sl
 8008034:	4631      	mov	r1, r6
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	f43f aef7 	beq.w	8007e2e <_printf_float+0xc2>
 8008040:	f109 0901 	add.w	r9, r9, #1
 8008044:	e7ee      	b.n	8008024 <_printf_float+0x2b8>
 8008046:	bf00      	nop
 8008048:	7fefffff 	.word	0x7fefffff
 800804c:	0800b730 	.word	0x0800b730
 8008050:	0800b734 	.word	0x0800b734
 8008054:	0800b73c 	.word	0x0800b73c
 8008058:	0800b738 	.word	0x0800b738
 800805c:	0800b740 	.word	0x0800b740
 8008060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008062:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008064:	429a      	cmp	r2, r3
 8008066:	bfa8      	it	ge
 8008068:	461a      	movge	r2, r3
 800806a:	2a00      	cmp	r2, #0
 800806c:	4691      	mov	r9, r2
 800806e:	dc37      	bgt.n	80080e0 <_printf_float+0x374>
 8008070:	f04f 0b00 	mov.w	fp, #0
 8008074:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008078:	f104 021a 	add.w	r2, r4, #26
 800807c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800807e:	9305      	str	r3, [sp, #20]
 8008080:	eba3 0309 	sub.w	r3, r3, r9
 8008084:	455b      	cmp	r3, fp
 8008086:	dc33      	bgt.n	80080f0 <_printf_float+0x384>
 8008088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800808c:	429a      	cmp	r2, r3
 800808e:	db3b      	blt.n	8008108 <_printf_float+0x39c>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	07da      	lsls	r2, r3, #31
 8008094:	d438      	bmi.n	8008108 <_printf_float+0x39c>
 8008096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008098:	9a05      	ldr	r2, [sp, #20]
 800809a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800809c:	1a9a      	subs	r2, r3, r2
 800809e:	eba3 0901 	sub.w	r9, r3, r1
 80080a2:	4591      	cmp	r9, r2
 80080a4:	bfa8      	it	ge
 80080a6:	4691      	movge	r9, r2
 80080a8:	f1b9 0f00 	cmp.w	r9, #0
 80080ac:	dc35      	bgt.n	800811a <_printf_float+0x3ae>
 80080ae:	f04f 0800 	mov.w	r8, #0
 80080b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080b6:	f104 0a1a 	add.w	sl, r4, #26
 80080ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080be:	1a9b      	subs	r3, r3, r2
 80080c0:	eba3 0309 	sub.w	r3, r3, r9
 80080c4:	4543      	cmp	r3, r8
 80080c6:	f77f af79 	ble.w	8007fbc <_printf_float+0x250>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4652      	mov	r2, sl
 80080ce:	4631      	mov	r1, r6
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	f43f aeaa 	beq.w	8007e2e <_printf_float+0xc2>
 80080da:	f108 0801 	add.w	r8, r8, #1
 80080de:	e7ec      	b.n	80080ba <_printf_float+0x34e>
 80080e0:	4613      	mov	r3, r2
 80080e2:	4631      	mov	r1, r6
 80080e4:	4642      	mov	r2, r8
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	d1c0      	bne.n	8008070 <_printf_float+0x304>
 80080ee:	e69e      	b.n	8007e2e <_printf_float+0xc2>
 80080f0:	2301      	movs	r3, #1
 80080f2:	4631      	mov	r1, r6
 80080f4:	4628      	mov	r0, r5
 80080f6:	9205      	str	r2, [sp, #20]
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	f43f ae97 	beq.w	8007e2e <_printf_float+0xc2>
 8008100:	9a05      	ldr	r2, [sp, #20]
 8008102:	f10b 0b01 	add.w	fp, fp, #1
 8008106:	e7b9      	b.n	800807c <_printf_float+0x310>
 8008108:	ee18 3a10 	vmov	r3, s16
 800810c:	4652      	mov	r2, sl
 800810e:	4631      	mov	r1, r6
 8008110:	4628      	mov	r0, r5
 8008112:	47b8      	blx	r7
 8008114:	3001      	adds	r0, #1
 8008116:	d1be      	bne.n	8008096 <_printf_float+0x32a>
 8008118:	e689      	b.n	8007e2e <_printf_float+0xc2>
 800811a:	9a05      	ldr	r2, [sp, #20]
 800811c:	464b      	mov	r3, r9
 800811e:	4442      	add	r2, r8
 8008120:	4631      	mov	r1, r6
 8008122:	4628      	mov	r0, r5
 8008124:	47b8      	blx	r7
 8008126:	3001      	adds	r0, #1
 8008128:	d1c1      	bne.n	80080ae <_printf_float+0x342>
 800812a:	e680      	b.n	8007e2e <_printf_float+0xc2>
 800812c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800812e:	2a01      	cmp	r2, #1
 8008130:	dc01      	bgt.n	8008136 <_printf_float+0x3ca>
 8008132:	07db      	lsls	r3, r3, #31
 8008134:	d538      	bpl.n	80081a8 <_printf_float+0x43c>
 8008136:	2301      	movs	r3, #1
 8008138:	4642      	mov	r2, r8
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	f43f ae74 	beq.w	8007e2e <_printf_float+0xc2>
 8008146:	ee18 3a10 	vmov	r3, s16
 800814a:	4652      	mov	r2, sl
 800814c:	4631      	mov	r1, r6
 800814e:	4628      	mov	r0, r5
 8008150:	47b8      	blx	r7
 8008152:	3001      	adds	r0, #1
 8008154:	f43f ae6b 	beq.w	8007e2e <_printf_float+0xc2>
 8008158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800815c:	2200      	movs	r2, #0
 800815e:	2300      	movs	r3, #0
 8008160:	f7f8 fcca 	bl	8000af8 <__aeabi_dcmpeq>
 8008164:	b9d8      	cbnz	r0, 800819e <_printf_float+0x432>
 8008166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008168:	f108 0201 	add.w	r2, r8, #1
 800816c:	3b01      	subs	r3, #1
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	d10e      	bne.n	8008196 <_printf_float+0x42a>
 8008178:	e659      	b.n	8007e2e <_printf_float+0xc2>
 800817a:	2301      	movs	r3, #1
 800817c:	4652      	mov	r2, sl
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f ae52 	beq.w	8007e2e <_printf_float+0xc2>
 800818a:	f108 0801 	add.w	r8, r8, #1
 800818e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008190:	3b01      	subs	r3, #1
 8008192:	4543      	cmp	r3, r8
 8008194:	dcf1      	bgt.n	800817a <_printf_float+0x40e>
 8008196:	464b      	mov	r3, r9
 8008198:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800819c:	e6dc      	b.n	8007f58 <_printf_float+0x1ec>
 800819e:	f04f 0800 	mov.w	r8, #0
 80081a2:	f104 0a1a 	add.w	sl, r4, #26
 80081a6:	e7f2      	b.n	800818e <_printf_float+0x422>
 80081a8:	2301      	movs	r3, #1
 80081aa:	4642      	mov	r2, r8
 80081ac:	e7df      	b.n	800816e <_printf_float+0x402>
 80081ae:	2301      	movs	r3, #1
 80081b0:	464a      	mov	r2, r9
 80081b2:	4631      	mov	r1, r6
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	f43f ae38 	beq.w	8007e2e <_printf_float+0xc2>
 80081be:	f108 0801 	add.w	r8, r8, #1
 80081c2:	68e3      	ldr	r3, [r4, #12]
 80081c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081c6:	1a5b      	subs	r3, r3, r1
 80081c8:	4543      	cmp	r3, r8
 80081ca:	dcf0      	bgt.n	80081ae <_printf_float+0x442>
 80081cc:	e6fa      	b.n	8007fc4 <_printf_float+0x258>
 80081ce:	f04f 0800 	mov.w	r8, #0
 80081d2:	f104 0919 	add.w	r9, r4, #25
 80081d6:	e7f4      	b.n	80081c2 <_printf_float+0x456>

080081d8 <_printf_common>:
 80081d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	4616      	mov	r6, r2
 80081de:	4699      	mov	r9, r3
 80081e0:	688a      	ldr	r2, [r1, #8]
 80081e2:	690b      	ldr	r3, [r1, #16]
 80081e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081e8:	4293      	cmp	r3, r2
 80081ea:	bfb8      	it	lt
 80081ec:	4613      	movlt	r3, r2
 80081ee:	6033      	str	r3, [r6, #0]
 80081f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081f4:	4607      	mov	r7, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	b10a      	cbz	r2, 80081fe <_printf_common+0x26>
 80081fa:	3301      	adds	r3, #1
 80081fc:	6033      	str	r3, [r6, #0]
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	0699      	lsls	r1, r3, #26
 8008202:	bf42      	ittt	mi
 8008204:	6833      	ldrmi	r3, [r6, #0]
 8008206:	3302      	addmi	r3, #2
 8008208:	6033      	strmi	r3, [r6, #0]
 800820a:	6825      	ldr	r5, [r4, #0]
 800820c:	f015 0506 	ands.w	r5, r5, #6
 8008210:	d106      	bne.n	8008220 <_printf_common+0x48>
 8008212:	f104 0a19 	add.w	sl, r4, #25
 8008216:	68e3      	ldr	r3, [r4, #12]
 8008218:	6832      	ldr	r2, [r6, #0]
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	42ab      	cmp	r3, r5
 800821e:	dc26      	bgt.n	800826e <_printf_common+0x96>
 8008220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008224:	1e13      	subs	r3, r2, #0
 8008226:	6822      	ldr	r2, [r4, #0]
 8008228:	bf18      	it	ne
 800822a:	2301      	movne	r3, #1
 800822c:	0692      	lsls	r2, r2, #26
 800822e:	d42b      	bmi.n	8008288 <_printf_common+0xb0>
 8008230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008234:	4649      	mov	r1, r9
 8008236:	4638      	mov	r0, r7
 8008238:	47c0      	blx	r8
 800823a:	3001      	adds	r0, #1
 800823c:	d01e      	beq.n	800827c <_printf_common+0xa4>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	68e5      	ldr	r5, [r4, #12]
 8008242:	6832      	ldr	r2, [r6, #0]
 8008244:	f003 0306 	and.w	r3, r3, #6
 8008248:	2b04      	cmp	r3, #4
 800824a:	bf08      	it	eq
 800824c:	1aad      	subeq	r5, r5, r2
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	6922      	ldr	r2, [r4, #16]
 8008252:	bf0c      	ite	eq
 8008254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008258:	2500      	movne	r5, #0
 800825a:	4293      	cmp	r3, r2
 800825c:	bfc4      	itt	gt
 800825e:	1a9b      	subgt	r3, r3, r2
 8008260:	18ed      	addgt	r5, r5, r3
 8008262:	2600      	movs	r6, #0
 8008264:	341a      	adds	r4, #26
 8008266:	42b5      	cmp	r5, r6
 8008268:	d11a      	bne.n	80082a0 <_printf_common+0xc8>
 800826a:	2000      	movs	r0, #0
 800826c:	e008      	b.n	8008280 <_printf_common+0xa8>
 800826e:	2301      	movs	r3, #1
 8008270:	4652      	mov	r2, sl
 8008272:	4649      	mov	r1, r9
 8008274:	4638      	mov	r0, r7
 8008276:	47c0      	blx	r8
 8008278:	3001      	adds	r0, #1
 800827a:	d103      	bne.n	8008284 <_printf_common+0xac>
 800827c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008284:	3501      	adds	r5, #1
 8008286:	e7c6      	b.n	8008216 <_printf_common+0x3e>
 8008288:	18e1      	adds	r1, r4, r3
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	2030      	movs	r0, #48	; 0x30
 800828e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008292:	4422      	add	r2, r4
 8008294:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008298:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800829c:	3302      	adds	r3, #2
 800829e:	e7c7      	b.n	8008230 <_printf_common+0x58>
 80082a0:	2301      	movs	r3, #1
 80082a2:	4622      	mov	r2, r4
 80082a4:	4649      	mov	r1, r9
 80082a6:	4638      	mov	r0, r7
 80082a8:	47c0      	blx	r8
 80082aa:	3001      	adds	r0, #1
 80082ac:	d0e6      	beq.n	800827c <_printf_common+0xa4>
 80082ae:	3601      	adds	r6, #1
 80082b0:	e7d9      	b.n	8008266 <_printf_common+0x8e>
	...

080082b4 <_printf_i>:
 80082b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082b8:	7e0f      	ldrb	r7, [r1, #24]
 80082ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082bc:	2f78      	cmp	r7, #120	; 0x78
 80082be:	4691      	mov	r9, r2
 80082c0:	4680      	mov	r8, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	469a      	mov	sl, r3
 80082c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082ca:	d807      	bhi.n	80082dc <_printf_i+0x28>
 80082cc:	2f62      	cmp	r7, #98	; 0x62
 80082ce:	d80a      	bhi.n	80082e6 <_printf_i+0x32>
 80082d0:	2f00      	cmp	r7, #0
 80082d2:	f000 80d8 	beq.w	8008486 <_printf_i+0x1d2>
 80082d6:	2f58      	cmp	r7, #88	; 0x58
 80082d8:	f000 80a3 	beq.w	8008422 <_printf_i+0x16e>
 80082dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082e4:	e03a      	b.n	800835c <_printf_i+0xa8>
 80082e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082ea:	2b15      	cmp	r3, #21
 80082ec:	d8f6      	bhi.n	80082dc <_printf_i+0x28>
 80082ee:	a101      	add	r1, pc, #4	; (adr r1, 80082f4 <_printf_i+0x40>)
 80082f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082f4:	0800834d 	.word	0x0800834d
 80082f8:	08008361 	.word	0x08008361
 80082fc:	080082dd 	.word	0x080082dd
 8008300:	080082dd 	.word	0x080082dd
 8008304:	080082dd 	.word	0x080082dd
 8008308:	080082dd 	.word	0x080082dd
 800830c:	08008361 	.word	0x08008361
 8008310:	080082dd 	.word	0x080082dd
 8008314:	080082dd 	.word	0x080082dd
 8008318:	080082dd 	.word	0x080082dd
 800831c:	080082dd 	.word	0x080082dd
 8008320:	0800846d 	.word	0x0800846d
 8008324:	08008391 	.word	0x08008391
 8008328:	0800844f 	.word	0x0800844f
 800832c:	080082dd 	.word	0x080082dd
 8008330:	080082dd 	.word	0x080082dd
 8008334:	0800848f 	.word	0x0800848f
 8008338:	080082dd 	.word	0x080082dd
 800833c:	08008391 	.word	0x08008391
 8008340:	080082dd 	.word	0x080082dd
 8008344:	080082dd 	.word	0x080082dd
 8008348:	08008457 	.word	0x08008457
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	1d1a      	adds	r2, r3, #4
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	602a      	str	r2, [r5, #0]
 8008354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800835c:	2301      	movs	r3, #1
 800835e:	e0a3      	b.n	80084a8 <_printf_i+0x1f4>
 8008360:	6820      	ldr	r0, [r4, #0]
 8008362:	6829      	ldr	r1, [r5, #0]
 8008364:	0606      	lsls	r6, r0, #24
 8008366:	f101 0304 	add.w	r3, r1, #4
 800836a:	d50a      	bpl.n	8008382 <_printf_i+0xce>
 800836c:	680e      	ldr	r6, [r1, #0]
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	2e00      	cmp	r6, #0
 8008372:	da03      	bge.n	800837c <_printf_i+0xc8>
 8008374:	232d      	movs	r3, #45	; 0x2d
 8008376:	4276      	negs	r6, r6
 8008378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800837c:	485e      	ldr	r0, [pc, #376]	; (80084f8 <_printf_i+0x244>)
 800837e:	230a      	movs	r3, #10
 8008380:	e019      	b.n	80083b6 <_printf_i+0x102>
 8008382:	680e      	ldr	r6, [r1, #0]
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	f010 0f40 	tst.w	r0, #64	; 0x40
 800838a:	bf18      	it	ne
 800838c:	b236      	sxthne	r6, r6
 800838e:	e7ef      	b.n	8008370 <_printf_i+0xbc>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	6820      	ldr	r0, [r4, #0]
 8008394:	1d19      	adds	r1, r3, #4
 8008396:	6029      	str	r1, [r5, #0]
 8008398:	0601      	lsls	r1, r0, #24
 800839a:	d501      	bpl.n	80083a0 <_printf_i+0xec>
 800839c:	681e      	ldr	r6, [r3, #0]
 800839e:	e002      	b.n	80083a6 <_printf_i+0xf2>
 80083a0:	0646      	lsls	r6, r0, #25
 80083a2:	d5fb      	bpl.n	800839c <_printf_i+0xe8>
 80083a4:	881e      	ldrh	r6, [r3, #0]
 80083a6:	4854      	ldr	r0, [pc, #336]	; (80084f8 <_printf_i+0x244>)
 80083a8:	2f6f      	cmp	r7, #111	; 0x6f
 80083aa:	bf0c      	ite	eq
 80083ac:	2308      	moveq	r3, #8
 80083ae:	230a      	movne	r3, #10
 80083b0:	2100      	movs	r1, #0
 80083b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083b6:	6865      	ldr	r5, [r4, #4]
 80083b8:	60a5      	str	r5, [r4, #8]
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	bfa2      	ittt	ge
 80083be:	6821      	ldrge	r1, [r4, #0]
 80083c0:	f021 0104 	bicge.w	r1, r1, #4
 80083c4:	6021      	strge	r1, [r4, #0]
 80083c6:	b90e      	cbnz	r6, 80083cc <_printf_i+0x118>
 80083c8:	2d00      	cmp	r5, #0
 80083ca:	d04d      	beq.n	8008468 <_printf_i+0x1b4>
 80083cc:	4615      	mov	r5, r2
 80083ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80083d2:	fb03 6711 	mls	r7, r3, r1, r6
 80083d6:	5dc7      	ldrb	r7, [r0, r7]
 80083d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083dc:	4637      	mov	r7, r6
 80083de:	42bb      	cmp	r3, r7
 80083e0:	460e      	mov	r6, r1
 80083e2:	d9f4      	bls.n	80083ce <_printf_i+0x11a>
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d10b      	bne.n	8008400 <_printf_i+0x14c>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	07de      	lsls	r6, r3, #31
 80083ec:	d508      	bpl.n	8008400 <_printf_i+0x14c>
 80083ee:	6923      	ldr	r3, [r4, #16]
 80083f0:	6861      	ldr	r1, [r4, #4]
 80083f2:	4299      	cmp	r1, r3
 80083f4:	bfde      	ittt	le
 80083f6:	2330      	movle	r3, #48	; 0x30
 80083f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008400:	1b52      	subs	r2, r2, r5
 8008402:	6122      	str	r2, [r4, #16]
 8008404:	f8cd a000 	str.w	sl, [sp]
 8008408:	464b      	mov	r3, r9
 800840a:	aa03      	add	r2, sp, #12
 800840c:	4621      	mov	r1, r4
 800840e:	4640      	mov	r0, r8
 8008410:	f7ff fee2 	bl	80081d8 <_printf_common>
 8008414:	3001      	adds	r0, #1
 8008416:	d14c      	bne.n	80084b2 <_printf_i+0x1fe>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800841c:	b004      	add	sp, #16
 800841e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008422:	4835      	ldr	r0, [pc, #212]	; (80084f8 <_printf_i+0x244>)
 8008424:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008428:	6829      	ldr	r1, [r5, #0]
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008430:	6029      	str	r1, [r5, #0]
 8008432:	061d      	lsls	r5, r3, #24
 8008434:	d514      	bpl.n	8008460 <_printf_i+0x1ac>
 8008436:	07df      	lsls	r7, r3, #31
 8008438:	bf44      	itt	mi
 800843a:	f043 0320 	orrmi.w	r3, r3, #32
 800843e:	6023      	strmi	r3, [r4, #0]
 8008440:	b91e      	cbnz	r6, 800844a <_printf_i+0x196>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	f023 0320 	bic.w	r3, r3, #32
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	2310      	movs	r3, #16
 800844c:	e7b0      	b.n	80083b0 <_printf_i+0xfc>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	f043 0320 	orr.w	r3, r3, #32
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	2378      	movs	r3, #120	; 0x78
 8008458:	4828      	ldr	r0, [pc, #160]	; (80084fc <_printf_i+0x248>)
 800845a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800845e:	e7e3      	b.n	8008428 <_printf_i+0x174>
 8008460:	0659      	lsls	r1, r3, #25
 8008462:	bf48      	it	mi
 8008464:	b2b6      	uxthmi	r6, r6
 8008466:	e7e6      	b.n	8008436 <_printf_i+0x182>
 8008468:	4615      	mov	r5, r2
 800846a:	e7bb      	b.n	80083e4 <_printf_i+0x130>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	6826      	ldr	r6, [r4, #0]
 8008470:	6961      	ldr	r1, [r4, #20]
 8008472:	1d18      	adds	r0, r3, #4
 8008474:	6028      	str	r0, [r5, #0]
 8008476:	0635      	lsls	r5, r6, #24
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	d501      	bpl.n	8008480 <_printf_i+0x1cc>
 800847c:	6019      	str	r1, [r3, #0]
 800847e:	e002      	b.n	8008486 <_printf_i+0x1d2>
 8008480:	0670      	lsls	r0, r6, #25
 8008482:	d5fb      	bpl.n	800847c <_printf_i+0x1c8>
 8008484:	8019      	strh	r1, [r3, #0]
 8008486:	2300      	movs	r3, #0
 8008488:	6123      	str	r3, [r4, #16]
 800848a:	4615      	mov	r5, r2
 800848c:	e7ba      	b.n	8008404 <_printf_i+0x150>
 800848e:	682b      	ldr	r3, [r5, #0]
 8008490:	1d1a      	adds	r2, r3, #4
 8008492:	602a      	str	r2, [r5, #0]
 8008494:	681d      	ldr	r5, [r3, #0]
 8008496:	6862      	ldr	r2, [r4, #4]
 8008498:	2100      	movs	r1, #0
 800849a:	4628      	mov	r0, r5
 800849c:	f7f7 feb8 	bl	8000210 <memchr>
 80084a0:	b108      	cbz	r0, 80084a6 <_printf_i+0x1f2>
 80084a2:	1b40      	subs	r0, r0, r5
 80084a4:	6060      	str	r0, [r4, #4]
 80084a6:	6863      	ldr	r3, [r4, #4]
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	2300      	movs	r3, #0
 80084ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b0:	e7a8      	b.n	8008404 <_printf_i+0x150>
 80084b2:	6923      	ldr	r3, [r4, #16]
 80084b4:	462a      	mov	r2, r5
 80084b6:	4649      	mov	r1, r9
 80084b8:	4640      	mov	r0, r8
 80084ba:	47d0      	blx	sl
 80084bc:	3001      	adds	r0, #1
 80084be:	d0ab      	beq.n	8008418 <_printf_i+0x164>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	079b      	lsls	r3, r3, #30
 80084c4:	d413      	bmi.n	80084ee <_printf_i+0x23a>
 80084c6:	68e0      	ldr	r0, [r4, #12]
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	4298      	cmp	r0, r3
 80084cc:	bfb8      	it	lt
 80084ce:	4618      	movlt	r0, r3
 80084d0:	e7a4      	b.n	800841c <_printf_i+0x168>
 80084d2:	2301      	movs	r3, #1
 80084d4:	4632      	mov	r2, r6
 80084d6:	4649      	mov	r1, r9
 80084d8:	4640      	mov	r0, r8
 80084da:	47d0      	blx	sl
 80084dc:	3001      	adds	r0, #1
 80084de:	d09b      	beq.n	8008418 <_printf_i+0x164>
 80084e0:	3501      	adds	r5, #1
 80084e2:	68e3      	ldr	r3, [r4, #12]
 80084e4:	9903      	ldr	r1, [sp, #12]
 80084e6:	1a5b      	subs	r3, r3, r1
 80084e8:	42ab      	cmp	r3, r5
 80084ea:	dcf2      	bgt.n	80084d2 <_printf_i+0x21e>
 80084ec:	e7eb      	b.n	80084c6 <_printf_i+0x212>
 80084ee:	2500      	movs	r5, #0
 80084f0:	f104 0619 	add.w	r6, r4, #25
 80084f4:	e7f5      	b.n	80084e2 <_printf_i+0x22e>
 80084f6:	bf00      	nop
 80084f8:	0800b742 	.word	0x0800b742
 80084fc:	0800b753 	.word	0x0800b753

08008500 <iprintf>:
 8008500:	b40f      	push	{r0, r1, r2, r3}
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <iprintf+0x2c>)
 8008504:	b513      	push	{r0, r1, r4, lr}
 8008506:	681c      	ldr	r4, [r3, #0]
 8008508:	b124      	cbz	r4, 8008514 <iprintf+0x14>
 800850a:	69a3      	ldr	r3, [r4, #24]
 800850c:	b913      	cbnz	r3, 8008514 <iprintf+0x14>
 800850e:	4620      	mov	r0, r4
 8008510:	f001 f91e 	bl	8009750 <__sinit>
 8008514:	ab05      	add	r3, sp, #20
 8008516:	9a04      	ldr	r2, [sp, #16]
 8008518:	68a1      	ldr	r1, [r4, #8]
 800851a:	9301      	str	r3, [sp, #4]
 800851c:	4620      	mov	r0, r4
 800851e:	f001 ff5b 	bl	800a3d8 <_vfiprintf_r>
 8008522:	b002      	add	sp, #8
 8008524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008528:	b004      	add	sp, #16
 800852a:	4770      	bx	lr
 800852c:	20000024 	.word	0x20000024

08008530 <_puts_r>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	460e      	mov	r6, r1
 8008534:	4605      	mov	r5, r0
 8008536:	b118      	cbz	r0, 8008540 <_puts_r+0x10>
 8008538:	6983      	ldr	r3, [r0, #24]
 800853a:	b90b      	cbnz	r3, 8008540 <_puts_r+0x10>
 800853c:	f001 f908 	bl	8009750 <__sinit>
 8008540:	69ab      	ldr	r3, [r5, #24]
 8008542:	68ac      	ldr	r4, [r5, #8]
 8008544:	b913      	cbnz	r3, 800854c <_puts_r+0x1c>
 8008546:	4628      	mov	r0, r5
 8008548:	f001 f902 	bl	8009750 <__sinit>
 800854c:	4b2c      	ldr	r3, [pc, #176]	; (8008600 <_puts_r+0xd0>)
 800854e:	429c      	cmp	r4, r3
 8008550:	d120      	bne.n	8008594 <_puts_r+0x64>
 8008552:	686c      	ldr	r4, [r5, #4]
 8008554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008556:	07db      	lsls	r3, r3, #31
 8008558:	d405      	bmi.n	8008566 <_puts_r+0x36>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	0598      	lsls	r0, r3, #22
 800855e:	d402      	bmi.n	8008566 <_puts_r+0x36>
 8008560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008562:	f001 f998 	bl	8009896 <__retarget_lock_acquire_recursive>
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	0719      	lsls	r1, r3, #28
 800856a:	d51d      	bpl.n	80085a8 <_puts_r+0x78>
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	b1db      	cbz	r3, 80085a8 <_puts_r+0x78>
 8008570:	3e01      	subs	r6, #1
 8008572:	68a3      	ldr	r3, [r4, #8]
 8008574:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008578:	3b01      	subs	r3, #1
 800857a:	60a3      	str	r3, [r4, #8]
 800857c:	bb39      	cbnz	r1, 80085ce <_puts_r+0x9e>
 800857e:	2b00      	cmp	r3, #0
 8008580:	da38      	bge.n	80085f4 <_puts_r+0xc4>
 8008582:	4622      	mov	r2, r4
 8008584:	210a      	movs	r1, #10
 8008586:	4628      	mov	r0, r5
 8008588:	f000 f88c 	bl	80086a4 <__swbuf_r>
 800858c:	3001      	adds	r0, #1
 800858e:	d011      	beq.n	80085b4 <_puts_r+0x84>
 8008590:	250a      	movs	r5, #10
 8008592:	e011      	b.n	80085b8 <_puts_r+0x88>
 8008594:	4b1b      	ldr	r3, [pc, #108]	; (8008604 <_puts_r+0xd4>)
 8008596:	429c      	cmp	r4, r3
 8008598:	d101      	bne.n	800859e <_puts_r+0x6e>
 800859a:	68ac      	ldr	r4, [r5, #8]
 800859c:	e7da      	b.n	8008554 <_puts_r+0x24>
 800859e:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <_puts_r+0xd8>)
 80085a0:	429c      	cmp	r4, r3
 80085a2:	bf08      	it	eq
 80085a4:	68ec      	ldreq	r4, [r5, #12]
 80085a6:	e7d5      	b.n	8008554 <_puts_r+0x24>
 80085a8:	4621      	mov	r1, r4
 80085aa:	4628      	mov	r0, r5
 80085ac:	f000 f8cc 	bl	8008748 <__swsetup_r>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d0dd      	beq.n	8008570 <_puts_r+0x40>
 80085b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80085b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ba:	07da      	lsls	r2, r3, #31
 80085bc:	d405      	bmi.n	80085ca <_puts_r+0x9a>
 80085be:	89a3      	ldrh	r3, [r4, #12]
 80085c0:	059b      	lsls	r3, r3, #22
 80085c2:	d402      	bmi.n	80085ca <_puts_r+0x9a>
 80085c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085c6:	f001 f967 	bl	8009898 <__retarget_lock_release_recursive>
 80085ca:	4628      	mov	r0, r5
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	da04      	bge.n	80085dc <_puts_r+0xac>
 80085d2:	69a2      	ldr	r2, [r4, #24]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	dc06      	bgt.n	80085e6 <_puts_r+0xb6>
 80085d8:	290a      	cmp	r1, #10
 80085da:	d004      	beq.n	80085e6 <_puts_r+0xb6>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	6022      	str	r2, [r4, #0]
 80085e2:	7019      	strb	r1, [r3, #0]
 80085e4:	e7c5      	b.n	8008572 <_puts_r+0x42>
 80085e6:	4622      	mov	r2, r4
 80085e8:	4628      	mov	r0, r5
 80085ea:	f000 f85b 	bl	80086a4 <__swbuf_r>
 80085ee:	3001      	adds	r0, #1
 80085f0:	d1bf      	bne.n	8008572 <_puts_r+0x42>
 80085f2:	e7df      	b.n	80085b4 <_puts_r+0x84>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	250a      	movs	r5, #10
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	6022      	str	r2, [r4, #0]
 80085fc:	701d      	strb	r5, [r3, #0]
 80085fe:	e7db      	b.n	80085b8 <_puts_r+0x88>
 8008600:	0800b814 	.word	0x0800b814
 8008604:	0800b834 	.word	0x0800b834
 8008608:	0800b7f4 	.word	0x0800b7f4

0800860c <puts>:
 800860c:	4b02      	ldr	r3, [pc, #8]	; (8008618 <puts+0xc>)
 800860e:	4601      	mov	r1, r0
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	f7ff bf8d 	b.w	8008530 <_puts_r>
 8008616:	bf00      	nop
 8008618:	20000024 	.word	0x20000024

0800861c <_sbrk_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	4d06      	ldr	r5, [pc, #24]	; (8008638 <_sbrk_r+0x1c>)
 8008620:	2300      	movs	r3, #0
 8008622:	4604      	mov	r4, r0
 8008624:	4608      	mov	r0, r1
 8008626:	602b      	str	r3, [r5, #0]
 8008628:	f7fa fcca 	bl	8002fc0 <_sbrk>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_sbrk_r+0x1a>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	b103      	cbz	r3, 8008636 <_sbrk_r+0x1a>
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	20002538 	.word	0x20002538

0800863c <sniprintf>:
 800863c:	b40c      	push	{r2, r3}
 800863e:	b530      	push	{r4, r5, lr}
 8008640:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <sniprintf+0x64>)
 8008642:	1e0c      	subs	r4, r1, #0
 8008644:	681d      	ldr	r5, [r3, #0]
 8008646:	b09d      	sub	sp, #116	; 0x74
 8008648:	da08      	bge.n	800865c <sniprintf+0x20>
 800864a:	238b      	movs	r3, #139	; 0x8b
 800864c:	602b      	str	r3, [r5, #0]
 800864e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008652:	b01d      	add	sp, #116	; 0x74
 8008654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008658:	b002      	add	sp, #8
 800865a:	4770      	bx	lr
 800865c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008660:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008664:	bf14      	ite	ne
 8008666:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800866a:	4623      	moveq	r3, r4
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008674:	9002      	str	r0, [sp, #8]
 8008676:	9006      	str	r0, [sp, #24]
 8008678:	f8ad 3016 	strh.w	r3, [sp, #22]
 800867c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800867e:	ab21      	add	r3, sp, #132	; 0x84
 8008680:	a902      	add	r1, sp, #8
 8008682:	4628      	mov	r0, r5
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	f001 fd7d 	bl	800a184 <_svfiprintf_r>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	bfbc      	itt	lt
 800868e:	238b      	movlt	r3, #139	; 0x8b
 8008690:	602b      	strlt	r3, [r5, #0]
 8008692:	2c00      	cmp	r4, #0
 8008694:	d0dd      	beq.n	8008652 <sniprintf+0x16>
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	2200      	movs	r2, #0
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	e7d9      	b.n	8008652 <sniprintf+0x16>
 800869e:	bf00      	nop
 80086a0:	20000024 	.word	0x20000024

080086a4 <__swbuf_r>:
 80086a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a6:	460e      	mov	r6, r1
 80086a8:	4614      	mov	r4, r2
 80086aa:	4605      	mov	r5, r0
 80086ac:	b118      	cbz	r0, 80086b6 <__swbuf_r+0x12>
 80086ae:	6983      	ldr	r3, [r0, #24]
 80086b0:	b90b      	cbnz	r3, 80086b6 <__swbuf_r+0x12>
 80086b2:	f001 f84d 	bl	8009750 <__sinit>
 80086b6:	4b21      	ldr	r3, [pc, #132]	; (800873c <__swbuf_r+0x98>)
 80086b8:	429c      	cmp	r4, r3
 80086ba:	d12b      	bne.n	8008714 <__swbuf_r+0x70>
 80086bc:	686c      	ldr	r4, [r5, #4]
 80086be:	69a3      	ldr	r3, [r4, #24]
 80086c0:	60a3      	str	r3, [r4, #8]
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	071a      	lsls	r2, r3, #28
 80086c6:	d52f      	bpl.n	8008728 <__swbuf_r+0x84>
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	b36b      	cbz	r3, 8008728 <__swbuf_r+0x84>
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	6820      	ldr	r0, [r4, #0]
 80086d0:	1ac0      	subs	r0, r0, r3
 80086d2:	6963      	ldr	r3, [r4, #20]
 80086d4:	b2f6      	uxtb	r6, r6
 80086d6:	4283      	cmp	r3, r0
 80086d8:	4637      	mov	r7, r6
 80086da:	dc04      	bgt.n	80086e6 <__swbuf_r+0x42>
 80086dc:	4621      	mov	r1, r4
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 ffa2 	bl	8009628 <_fflush_r>
 80086e4:	bb30      	cbnz	r0, 8008734 <__swbuf_r+0x90>
 80086e6:	68a3      	ldr	r3, [r4, #8]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	60a3      	str	r3, [r4, #8]
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	6022      	str	r2, [r4, #0]
 80086f2:	701e      	strb	r6, [r3, #0]
 80086f4:	6963      	ldr	r3, [r4, #20]
 80086f6:	3001      	adds	r0, #1
 80086f8:	4283      	cmp	r3, r0
 80086fa:	d004      	beq.n	8008706 <__swbuf_r+0x62>
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	07db      	lsls	r3, r3, #31
 8008700:	d506      	bpl.n	8008710 <__swbuf_r+0x6c>
 8008702:	2e0a      	cmp	r6, #10
 8008704:	d104      	bne.n	8008710 <__swbuf_r+0x6c>
 8008706:	4621      	mov	r1, r4
 8008708:	4628      	mov	r0, r5
 800870a:	f000 ff8d 	bl	8009628 <_fflush_r>
 800870e:	b988      	cbnz	r0, 8008734 <__swbuf_r+0x90>
 8008710:	4638      	mov	r0, r7
 8008712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008714:	4b0a      	ldr	r3, [pc, #40]	; (8008740 <__swbuf_r+0x9c>)
 8008716:	429c      	cmp	r4, r3
 8008718:	d101      	bne.n	800871e <__swbuf_r+0x7a>
 800871a:	68ac      	ldr	r4, [r5, #8]
 800871c:	e7cf      	b.n	80086be <__swbuf_r+0x1a>
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <__swbuf_r+0xa0>)
 8008720:	429c      	cmp	r4, r3
 8008722:	bf08      	it	eq
 8008724:	68ec      	ldreq	r4, [r5, #12]
 8008726:	e7ca      	b.n	80086be <__swbuf_r+0x1a>
 8008728:	4621      	mov	r1, r4
 800872a:	4628      	mov	r0, r5
 800872c:	f000 f80c 	bl	8008748 <__swsetup_r>
 8008730:	2800      	cmp	r0, #0
 8008732:	d0cb      	beq.n	80086cc <__swbuf_r+0x28>
 8008734:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008738:	e7ea      	b.n	8008710 <__swbuf_r+0x6c>
 800873a:	bf00      	nop
 800873c:	0800b814 	.word	0x0800b814
 8008740:	0800b834 	.word	0x0800b834
 8008744:	0800b7f4 	.word	0x0800b7f4

08008748 <__swsetup_r>:
 8008748:	4b32      	ldr	r3, [pc, #200]	; (8008814 <__swsetup_r+0xcc>)
 800874a:	b570      	push	{r4, r5, r6, lr}
 800874c:	681d      	ldr	r5, [r3, #0]
 800874e:	4606      	mov	r6, r0
 8008750:	460c      	mov	r4, r1
 8008752:	b125      	cbz	r5, 800875e <__swsetup_r+0x16>
 8008754:	69ab      	ldr	r3, [r5, #24]
 8008756:	b913      	cbnz	r3, 800875e <__swsetup_r+0x16>
 8008758:	4628      	mov	r0, r5
 800875a:	f000 fff9 	bl	8009750 <__sinit>
 800875e:	4b2e      	ldr	r3, [pc, #184]	; (8008818 <__swsetup_r+0xd0>)
 8008760:	429c      	cmp	r4, r3
 8008762:	d10f      	bne.n	8008784 <__swsetup_r+0x3c>
 8008764:	686c      	ldr	r4, [r5, #4]
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800876c:	0719      	lsls	r1, r3, #28
 800876e:	d42c      	bmi.n	80087ca <__swsetup_r+0x82>
 8008770:	06dd      	lsls	r5, r3, #27
 8008772:	d411      	bmi.n	8008798 <__swsetup_r+0x50>
 8008774:	2309      	movs	r3, #9
 8008776:	6033      	str	r3, [r6, #0]
 8008778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800877c:	81a3      	strh	r3, [r4, #12]
 800877e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008782:	e03e      	b.n	8008802 <__swsetup_r+0xba>
 8008784:	4b25      	ldr	r3, [pc, #148]	; (800881c <__swsetup_r+0xd4>)
 8008786:	429c      	cmp	r4, r3
 8008788:	d101      	bne.n	800878e <__swsetup_r+0x46>
 800878a:	68ac      	ldr	r4, [r5, #8]
 800878c:	e7eb      	b.n	8008766 <__swsetup_r+0x1e>
 800878e:	4b24      	ldr	r3, [pc, #144]	; (8008820 <__swsetup_r+0xd8>)
 8008790:	429c      	cmp	r4, r3
 8008792:	bf08      	it	eq
 8008794:	68ec      	ldreq	r4, [r5, #12]
 8008796:	e7e6      	b.n	8008766 <__swsetup_r+0x1e>
 8008798:	0758      	lsls	r0, r3, #29
 800879a:	d512      	bpl.n	80087c2 <__swsetup_r+0x7a>
 800879c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800879e:	b141      	cbz	r1, 80087b2 <__swsetup_r+0x6a>
 80087a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087a4:	4299      	cmp	r1, r3
 80087a6:	d002      	beq.n	80087ae <__swsetup_r+0x66>
 80087a8:	4630      	mov	r0, r6
 80087aa:	f7ff f95f 	bl	8007a6c <_free_r>
 80087ae:	2300      	movs	r3, #0
 80087b0:	6363      	str	r3, [r4, #52]	; 0x34
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	2300      	movs	r3, #0
 80087bc:	6063      	str	r3, [r4, #4]
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f043 0308 	orr.w	r3, r3, #8
 80087c8:	81a3      	strh	r3, [r4, #12]
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	b94b      	cbnz	r3, 80087e2 <__swsetup_r+0x9a>
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d8:	d003      	beq.n	80087e2 <__swsetup_r+0x9a>
 80087da:	4621      	mov	r1, r4
 80087dc:	4630      	mov	r0, r6
 80087de:	f001 f881 	bl	80098e4 <__smakebuf_r>
 80087e2:	89a0      	ldrh	r0, [r4, #12]
 80087e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087e8:	f010 0301 	ands.w	r3, r0, #1
 80087ec:	d00a      	beq.n	8008804 <__swsetup_r+0xbc>
 80087ee:	2300      	movs	r3, #0
 80087f0:	60a3      	str	r3, [r4, #8]
 80087f2:	6963      	ldr	r3, [r4, #20]
 80087f4:	425b      	negs	r3, r3
 80087f6:	61a3      	str	r3, [r4, #24]
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	b943      	cbnz	r3, 800880e <__swsetup_r+0xc6>
 80087fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008800:	d1ba      	bne.n	8008778 <__swsetup_r+0x30>
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	0781      	lsls	r1, r0, #30
 8008806:	bf58      	it	pl
 8008808:	6963      	ldrpl	r3, [r4, #20]
 800880a:	60a3      	str	r3, [r4, #8]
 800880c:	e7f4      	b.n	80087f8 <__swsetup_r+0xb0>
 800880e:	2000      	movs	r0, #0
 8008810:	e7f7      	b.n	8008802 <__swsetup_r+0xba>
 8008812:	bf00      	nop
 8008814:	20000024 	.word	0x20000024
 8008818:	0800b814 	.word	0x0800b814
 800881c:	0800b834 	.word	0x0800b834
 8008820:	0800b7f4 	.word	0x0800b7f4

08008824 <quorem>:
 8008824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008828:	6903      	ldr	r3, [r0, #16]
 800882a:	690c      	ldr	r4, [r1, #16]
 800882c:	42a3      	cmp	r3, r4
 800882e:	4607      	mov	r7, r0
 8008830:	f2c0 8081 	blt.w	8008936 <quorem+0x112>
 8008834:	3c01      	subs	r4, #1
 8008836:	f101 0814 	add.w	r8, r1, #20
 800883a:	f100 0514 	add.w	r5, r0, #20
 800883e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800884c:	3301      	adds	r3, #1
 800884e:	429a      	cmp	r2, r3
 8008850:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008854:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008858:	fbb2 f6f3 	udiv	r6, r2, r3
 800885c:	d331      	bcc.n	80088c2 <quorem+0x9e>
 800885e:	f04f 0e00 	mov.w	lr, #0
 8008862:	4640      	mov	r0, r8
 8008864:	46ac      	mov	ip, r5
 8008866:	46f2      	mov	sl, lr
 8008868:	f850 2b04 	ldr.w	r2, [r0], #4
 800886c:	b293      	uxth	r3, r2
 800886e:	fb06 e303 	mla	r3, r6, r3, lr
 8008872:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008876:	b29b      	uxth	r3, r3
 8008878:	ebaa 0303 	sub.w	r3, sl, r3
 800887c:	f8dc a000 	ldr.w	sl, [ip]
 8008880:	0c12      	lsrs	r2, r2, #16
 8008882:	fa13 f38a 	uxtah	r3, r3, sl
 8008886:	fb06 e202 	mla	r2, r6, r2, lr
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	9b00      	ldr	r3, [sp, #0]
 800888e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008892:	b292      	uxth	r2, r2
 8008894:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008898:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800889c:	f8bd 3000 	ldrh.w	r3, [sp]
 80088a0:	4581      	cmp	r9, r0
 80088a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088a6:	f84c 3b04 	str.w	r3, [ip], #4
 80088aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088ae:	d2db      	bcs.n	8008868 <quorem+0x44>
 80088b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80088b4:	b92b      	cbnz	r3, 80088c2 <quorem+0x9e>
 80088b6:	9b01      	ldr	r3, [sp, #4]
 80088b8:	3b04      	subs	r3, #4
 80088ba:	429d      	cmp	r5, r3
 80088bc:	461a      	mov	r2, r3
 80088be:	d32e      	bcc.n	800891e <quorem+0xfa>
 80088c0:	613c      	str	r4, [r7, #16]
 80088c2:	4638      	mov	r0, r7
 80088c4:	f001 faea 	bl	8009e9c <__mcmp>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	db24      	blt.n	8008916 <quorem+0xf2>
 80088cc:	3601      	adds	r6, #1
 80088ce:	4628      	mov	r0, r5
 80088d0:	f04f 0c00 	mov.w	ip, #0
 80088d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80088d8:	f8d0 e000 	ldr.w	lr, [r0]
 80088dc:	b293      	uxth	r3, r2
 80088de:	ebac 0303 	sub.w	r3, ip, r3
 80088e2:	0c12      	lsrs	r2, r2, #16
 80088e4:	fa13 f38e 	uxtah	r3, r3, lr
 80088e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088f6:	45c1      	cmp	r9, r8
 80088f8:	f840 3b04 	str.w	r3, [r0], #4
 80088fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008900:	d2e8      	bcs.n	80088d4 <quorem+0xb0>
 8008902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800890a:	b922      	cbnz	r2, 8008916 <quorem+0xf2>
 800890c:	3b04      	subs	r3, #4
 800890e:	429d      	cmp	r5, r3
 8008910:	461a      	mov	r2, r3
 8008912:	d30a      	bcc.n	800892a <quorem+0x106>
 8008914:	613c      	str	r4, [r7, #16]
 8008916:	4630      	mov	r0, r6
 8008918:	b003      	add	sp, #12
 800891a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891e:	6812      	ldr	r2, [r2, #0]
 8008920:	3b04      	subs	r3, #4
 8008922:	2a00      	cmp	r2, #0
 8008924:	d1cc      	bne.n	80088c0 <quorem+0x9c>
 8008926:	3c01      	subs	r4, #1
 8008928:	e7c7      	b.n	80088ba <quorem+0x96>
 800892a:	6812      	ldr	r2, [r2, #0]
 800892c:	3b04      	subs	r3, #4
 800892e:	2a00      	cmp	r2, #0
 8008930:	d1f0      	bne.n	8008914 <quorem+0xf0>
 8008932:	3c01      	subs	r4, #1
 8008934:	e7eb      	b.n	800890e <quorem+0xea>
 8008936:	2000      	movs	r0, #0
 8008938:	e7ee      	b.n	8008918 <quorem+0xf4>
 800893a:	0000      	movs	r0, r0
 800893c:	0000      	movs	r0, r0
	...

08008940 <_dtoa_r>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	ed2d 8b04 	vpush	{d8-d9}
 8008948:	ec57 6b10 	vmov	r6, r7, d0
 800894c:	b093      	sub	sp, #76	; 0x4c
 800894e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008950:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008954:	9106      	str	r1, [sp, #24]
 8008956:	ee10 aa10 	vmov	sl, s0
 800895a:	4604      	mov	r4, r0
 800895c:	9209      	str	r2, [sp, #36]	; 0x24
 800895e:	930c      	str	r3, [sp, #48]	; 0x30
 8008960:	46bb      	mov	fp, r7
 8008962:	b975      	cbnz	r5, 8008982 <_dtoa_r+0x42>
 8008964:	2010      	movs	r0, #16
 8008966:	f7ff f869 	bl	8007a3c <malloc>
 800896a:	4602      	mov	r2, r0
 800896c:	6260      	str	r0, [r4, #36]	; 0x24
 800896e:	b920      	cbnz	r0, 800897a <_dtoa_r+0x3a>
 8008970:	4ba7      	ldr	r3, [pc, #668]	; (8008c10 <_dtoa_r+0x2d0>)
 8008972:	21ea      	movs	r1, #234	; 0xea
 8008974:	48a7      	ldr	r0, [pc, #668]	; (8008c14 <_dtoa_r+0x2d4>)
 8008976:	f001 feb5 	bl	800a6e4 <__assert_func>
 800897a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800897e:	6005      	str	r5, [r0, #0]
 8008980:	60c5      	str	r5, [r0, #12]
 8008982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008984:	6819      	ldr	r1, [r3, #0]
 8008986:	b151      	cbz	r1, 800899e <_dtoa_r+0x5e>
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	604a      	str	r2, [r1, #4]
 800898c:	2301      	movs	r3, #1
 800898e:	4093      	lsls	r3, r2
 8008990:	608b      	str	r3, [r1, #8]
 8008992:	4620      	mov	r0, r4
 8008994:	f001 f840 	bl	8009a18 <_Bfree>
 8008998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	1e3b      	subs	r3, r7, #0
 80089a0:	bfaa      	itet	ge
 80089a2:	2300      	movge	r3, #0
 80089a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80089a8:	f8c8 3000 	strge.w	r3, [r8]
 80089ac:	4b9a      	ldr	r3, [pc, #616]	; (8008c18 <_dtoa_r+0x2d8>)
 80089ae:	bfbc      	itt	lt
 80089b0:	2201      	movlt	r2, #1
 80089b2:	f8c8 2000 	strlt.w	r2, [r8]
 80089b6:	ea33 030b 	bics.w	r3, r3, fp
 80089ba:	d11b      	bne.n	80089f4 <_dtoa_r+0xb4>
 80089bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089be:	f242 730f 	movw	r3, #9999	; 0x270f
 80089c2:	6013      	str	r3, [r2, #0]
 80089c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089c8:	4333      	orrs	r3, r6
 80089ca:	f000 8592 	beq.w	80094f2 <_dtoa_r+0xbb2>
 80089ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089d0:	b963      	cbnz	r3, 80089ec <_dtoa_r+0xac>
 80089d2:	4b92      	ldr	r3, [pc, #584]	; (8008c1c <_dtoa_r+0x2dc>)
 80089d4:	e022      	b.n	8008a1c <_dtoa_r+0xdc>
 80089d6:	4b92      	ldr	r3, [pc, #584]	; (8008c20 <_dtoa_r+0x2e0>)
 80089d8:	9301      	str	r3, [sp, #4]
 80089da:	3308      	adds	r3, #8
 80089dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	9801      	ldr	r0, [sp, #4]
 80089e2:	b013      	add	sp, #76	; 0x4c
 80089e4:	ecbd 8b04 	vpop	{d8-d9}
 80089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ec:	4b8b      	ldr	r3, [pc, #556]	; (8008c1c <_dtoa_r+0x2dc>)
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	3303      	adds	r3, #3
 80089f2:	e7f3      	b.n	80089dc <_dtoa_r+0x9c>
 80089f4:	2200      	movs	r2, #0
 80089f6:	2300      	movs	r3, #0
 80089f8:	4650      	mov	r0, sl
 80089fa:	4659      	mov	r1, fp
 80089fc:	f7f8 f87c 	bl	8000af8 <__aeabi_dcmpeq>
 8008a00:	ec4b ab19 	vmov	d9, sl, fp
 8008a04:	4680      	mov	r8, r0
 8008a06:	b158      	cbz	r0, 8008a20 <_dtoa_r+0xe0>
 8008a08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 856b 	beq.w	80094ec <_dtoa_r+0xbac>
 8008a16:	4883      	ldr	r0, [pc, #524]	; (8008c24 <_dtoa_r+0x2e4>)
 8008a18:	6018      	str	r0, [r3, #0]
 8008a1a:	1e43      	subs	r3, r0, #1
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	e7df      	b.n	80089e0 <_dtoa_r+0xa0>
 8008a20:	ec4b ab10 	vmov	d0, sl, fp
 8008a24:	aa10      	add	r2, sp, #64	; 0x40
 8008a26:	a911      	add	r1, sp, #68	; 0x44
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f001 fadd 	bl	8009fe8 <__d2b>
 8008a2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008a32:	ee08 0a10 	vmov	s16, r0
 8008a36:	2d00      	cmp	r5, #0
 8008a38:	f000 8084 	beq.w	8008b44 <_dtoa_r+0x204>
 8008a3c:	ee19 3a90 	vmov	r3, s19
 8008a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a48:	4656      	mov	r6, sl
 8008a4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008a56:	4b74      	ldr	r3, [pc, #464]	; (8008c28 <_dtoa_r+0x2e8>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	f7f7 fc2b 	bl	80002b8 <__aeabi_dsub>
 8008a62:	a365      	add	r3, pc, #404	; (adr r3, 8008bf8 <_dtoa_r+0x2b8>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f7 fdde 	bl	8000628 <__aeabi_dmul>
 8008a6c:	a364      	add	r3, pc, #400	; (adr r3, 8008c00 <_dtoa_r+0x2c0>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fc23 	bl	80002bc <__adddf3>
 8008a76:	4606      	mov	r6, r0
 8008a78:	4628      	mov	r0, r5
 8008a7a:	460f      	mov	r7, r1
 8008a7c:	f7f7 fd6a 	bl	8000554 <__aeabi_i2d>
 8008a80:	a361      	add	r3, pc, #388	; (adr r3, 8008c08 <_dtoa_r+0x2c8>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fdcf 	bl	8000628 <__aeabi_dmul>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f7 fc13 	bl	80002bc <__adddf3>
 8008a96:	4606      	mov	r6, r0
 8008a98:	460f      	mov	r7, r1
 8008a9a:	f7f8 f875 	bl	8000b88 <__aeabi_d2iz>
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	9000      	str	r0, [sp, #0]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	f7f8 f830 	bl	8000b0c <__aeabi_dcmplt>
 8008aac:	b150      	cbz	r0, 8008ac4 <_dtoa_r+0x184>
 8008aae:	9800      	ldr	r0, [sp, #0]
 8008ab0:	f7f7 fd50 	bl	8000554 <__aeabi_i2d>
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	f7f8 f81e 	bl	8000af8 <__aeabi_dcmpeq>
 8008abc:	b910      	cbnz	r0, 8008ac4 <_dtoa_r+0x184>
 8008abe:	9b00      	ldr	r3, [sp, #0]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	9b00      	ldr	r3, [sp, #0]
 8008ac6:	2b16      	cmp	r3, #22
 8008ac8:	d85a      	bhi.n	8008b80 <_dtoa_r+0x240>
 8008aca:	9a00      	ldr	r2, [sp, #0]
 8008acc:	4b57      	ldr	r3, [pc, #348]	; (8008c2c <_dtoa_r+0x2ec>)
 8008ace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	ec51 0b19 	vmov	r0, r1, d9
 8008ada:	f7f8 f817 	bl	8000b0c <__aeabi_dcmplt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d050      	beq.n	8008b84 <_dtoa_r+0x244>
 8008ae2:	9b00      	ldr	r3, [sp, #0]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008aee:	1b5d      	subs	r5, r3, r5
 8008af0:	1e6b      	subs	r3, r5, #1
 8008af2:	9305      	str	r3, [sp, #20]
 8008af4:	bf45      	ittet	mi
 8008af6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008afa:	9304      	strmi	r3, [sp, #16]
 8008afc:	2300      	movpl	r3, #0
 8008afe:	2300      	movmi	r3, #0
 8008b00:	bf4c      	ite	mi
 8008b02:	9305      	strmi	r3, [sp, #20]
 8008b04:	9304      	strpl	r3, [sp, #16]
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	db3d      	blt.n	8008b88 <_dtoa_r+0x248>
 8008b0c:	9b05      	ldr	r3, [sp, #20]
 8008b0e:	9a00      	ldr	r2, [sp, #0]
 8008b10:	920a      	str	r2, [sp, #40]	; 0x28
 8008b12:	4413      	add	r3, r2
 8008b14:	9305      	str	r3, [sp, #20]
 8008b16:	2300      	movs	r3, #0
 8008b18:	9307      	str	r3, [sp, #28]
 8008b1a:	9b06      	ldr	r3, [sp, #24]
 8008b1c:	2b09      	cmp	r3, #9
 8008b1e:	f200 8089 	bhi.w	8008c34 <_dtoa_r+0x2f4>
 8008b22:	2b05      	cmp	r3, #5
 8008b24:	bfc4      	itt	gt
 8008b26:	3b04      	subgt	r3, #4
 8008b28:	9306      	strgt	r3, [sp, #24]
 8008b2a:	9b06      	ldr	r3, [sp, #24]
 8008b2c:	f1a3 0302 	sub.w	r3, r3, #2
 8008b30:	bfcc      	ite	gt
 8008b32:	2500      	movgt	r5, #0
 8008b34:	2501      	movle	r5, #1
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	f200 8087 	bhi.w	8008c4a <_dtoa_r+0x30a>
 8008b3c:	e8df f003 	tbb	[pc, r3]
 8008b40:	59383a2d 	.word	0x59383a2d
 8008b44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b48:	441d      	add	r5, r3
 8008b4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	bfc1      	itttt	gt
 8008b52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008b5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b62:	bfda      	itte	le
 8008b64:	f1c3 0320 	rsble	r3, r3, #32
 8008b68:	fa06 f003 	lslle.w	r0, r6, r3
 8008b6c:	4318      	orrgt	r0, r3
 8008b6e:	f7f7 fce1 	bl	8000534 <__aeabi_ui2d>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4606      	mov	r6, r0
 8008b76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b7a:	3d01      	subs	r5, #1
 8008b7c:	930e      	str	r3, [sp, #56]	; 0x38
 8008b7e:	e76a      	b.n	8008a56 <_dtoa_r+0x116>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e7b2      	b.n	8008aea <_dtoa_r+0x1aa>
 8008b84:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b86:	e7b1      	b.n	8008aec <_dtoa_r+0x1ac>
 8008b88:	9b04      	ldr	r3, [sp, #16]
 8008b8a:	9a00      	ldr	r2, [sp, #0]
 8008b8c:	1a9b      	subs	r3, r3, r2
 8008b8e:	9304      	str	r3, [sp, #16]
 8008b90:	4253      	negs	r3, r2
 8008b92:	9307      	str	r3, [sp, #28]
 8008b94:	2300      	movs	r3, #0
 8008b96:	930a      	str	r3, [sp, #40]	; 0x28
 8008b98:	e7bf      	b.n	8008b1a <_dtoa_r+0x1da>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	9308      	str	r3, [sp, #32]
 8008b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	dc55      	bgt.n	8008c50 <_dtoa_r+0x310>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008baa:	461a      	mov	r2, r3
 8008bac:	9209      	str	r2, [sp, #36]	; 0x24
 8008bae:	e00c      	b.n	8008bca <_dtoa_r+0x28a>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e7f3      	b.n	8008b9c <_dtoa_r+0x25c>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb8:	9308      	str	r3, [sp, #32]
 8008bba:	9b00      	ldr	r3, [sp, #0]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	9302      	str	r3, [sp, #8]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	bfb8      	it	lt
 8008bc8:	2301      	movlt	r3, #1
 8008bca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bcc:	2200      	movs	r2, #0
 8008bce:	6042      	str	r2, [r0, #4]
 8008bd0:	2204      	movs	r2, #4
 8008bd2:	f102 0614 	add.w	r6, r2, #20
 8008bd6:	429e      	cmp	r6, r3
 8008bd8:	6841      	ldr	r1, [r0, #4]
 8008bda:	d93d      	bls.n	8008c58 <_dtoa_r+0x318>
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f000 fedb 	bl	8009998 <_Balloc>
 8008be2:	9001      	str	r0, [sp, #4]
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d13b      	bne.n	8008c60 <_dtoa_r+0x320>
 8008be8:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <_dtoa_r+0x2f0>)
 8008bea:	4602      	mov	r2, r0
 8008bec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008bf0:	e6c0      	b.n	8008974 <_dtoa_r+0x34>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e7df      	b.n	8008bb6 <_dtoa_r+0x276>
 8008bf6:	bf00      	nop
 8008bf8:	636f4361 	.word	0x636f4361
 8008bfc:	3fd287a7 	.word	0x3fd287a7
 8008c00:	8b60c8b3 	.word	0x8b60c8b3
 8008c04:	3fc68a28 	.word	0x3fc68a28
 8008c08:	509f79fb 	.word	0x509f79fb
 8008c0c:	3fd34413 	.word	0x3fd34413
 8008c10:	0800b771 	.word	0x0800b771
 8008c14:	0800b788 	.word	0x0800b788
 8008c18:	7ff00000 	.word	0x7ff00000
 8008c1c:	0800b76d 	.word	0x0800b76d
 8008c20:	0800b764 	.word	0x0800b764
 8008c24:	0800b741 	.word	0x0800b741
 8008c28:	3ff80000 	.word	0x3ff80000
 8008c2c:	0800b8d8 	.word	0x0800b8d8
 8008c30:	0800b7e3 	.word	0x0800b7e3
 8008c34:	2501      	movs	r5, #1
 8008c36:	2300      	movs	r3, #0
 8008c38:	9306      	str	r3, [sp, #24]
 8008c3a:	9508      	str	r5, [sp, #32]
 8008c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c44:	2200      	movs	r2, #0
 8008c46:	2312      	movs	r3, #18
 8008c48:	e7b0      	b.n	8008bac <_dtoa_r+0x26c>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	9308      	str	r3, [sp, #32]
 8008c4e:	e7f5      	b.n	8008c3c <_dtoa_r+0x2fc>
 8008c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c56:	e7b8      	b.n	8008bca <_dtoa_r+0x28a>
 8008c58:	3101      	adds	r1, #1
 8008c5a:	6041      	str	r1, [r0, #4]
 8008c5c:	0052      	lsls	r2, r2, #1
 8008c5e:	e7b8      	b.n	8008bd2 <_dtoa_r+0x292>
 8008c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c62:	9a01      	ldr	r2, [sp, #4]
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	2b0e      	cmp	r3, #14
 8008c6a:	f200 809d 	bhi.w	8008da8 <_dtoa_r+0x468>
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	f000 809a 	beq.w	8008da8 <_dtoa_r+0x468>
 8008c74:	9b00      	ldr	r3, [sp, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dd32      	ble.n	8008ce0 <_dtoa_r+0x3a0>
 8008c7a:	4ab7      	ldr	r2, [pc, #732]	; (8008f58 <_dtoa_r+0x618>)
 8008c7c:	f003 030f 	and.w	r3, r3, #15
 8008c80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c88:	9b00      	ldr	r3, [sp, #0]
 8008c8a:	05d8      	lsls	r0, r3, #23
 8008c8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008c90:	d516      	bpl.n	8008cc0 <_dtoa_r+0x380>
 8008c92:	4bb2      	ldr	r3, [pc, #712]	; (8008f5c <_dtoa_r+0x61c>)
 8008c94:	ec51 0b19 	vmov	r0, r1, d9
 8008c98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c9c:	f7f7 fdee 	bl	800087c <__aeabi_ddiv>
 8008ca0:	f007 070f 	and.w	r7, r7, #15
 8008ca4:	4682      	mov	sl, r0
 8008ca6:	468b      	mov	fp, r1
 8008ca8:	2503      	movs	r5, #3
 8008caa:	4eac      	ldr	r6, [pc, #688]	; (8008f5c <_dtoa_r+0x61c>)
 8008cac:	b957      	cbnz	r7, 8008cc4 <_dtoa_r+0x384>
 8008cae:	4642      	mov	r2, r8
 8008cb0:	464b      	mov	r3, r9
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	4659      	mov	r1, fp
 8008cb6:	f7f7 fde1 	bl	800087c <__aeabi_ddiv>
 8008cba:	4682      	mov	sl, r0
 8008cbc:	468b      	mov	fp, r1
 8008cbe:	e028      	b.n	8008d12 <_dtoa_r+0x3d2>
 8008cc0:	2502      	movs	r5, #2
 8008cc2:	e7f2      	b.n	8008caa <_dtoa_r+0x36a>
 8008cc4:	07f9      	lsls	r1, r7, #31
 8008cc6:	d508      	bpl.n	8008cda <_dtoa_r+0x39a>
 8008cc8:	4640      	mov	r0, r8
 8008cca:	4649      	mov	r1, r9
 8008ccc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cd0:	f7f7 fcaa 	bl	8000628 <__aeabi_dmul>
 8008cd4:	3501      	adds	r5, #1
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	4689      	mov	r9, r1
 8008cda:	107f      	asrs	r7, r7, #1
 8008cdc:	3608      	adds	r6, #8
 8008cde:	e7e5      	b.n	8008cac <_dtoa_r+0x36c>
 8008ce0:	f000 809b 	beq.w	8008e1a <_dtoa_r+0x4da>
 8008ce4:	9b00      	ldr	r3, [sp, #0]
 8008ce6:	4f9d      	ldr	r7, [pc, #628]	; (8008f5c <_dtoa_r+0x61c>)
 8008ce8:	425e      	negs	r6, r3
 8008cea:	4b9b      	ldr	r3, [pc, #620]	; (8008f58 <_dtoa_r+0x618>)
 8008cec:	f006 020f 	and.w	r2, r6, #15
 8008cf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	ec51 0b19 	vmov	r0, r1, d9
 8008cfc:	f7f7 fc94 	bl	8000628 <__aeabi_dmul>
 8008d00:	1136      	asrs	r6, r6, #4
 8008d02:	4682      	mov	sl, r0
 8008d04:	468b      	mov	fp, r1
 8008d06:	2300      	movs	r3, #0
 8008d08:	2502      	movs	r5, #2
 8008d0a:	2e00      	cmp	r6, #0
 8008d0c:	d17a      	bne.n	8008e04 <_dtoa_r+0x4c4>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1d3      	bne.n	8008cba <_dtoa_r+0x37a>
 8008d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 8082 	beq.w	8008e1e <_dtoa_r+0x4de>
 8008d1a:	4b91      	ldr	r3, [pc, #580]	; (8008f60 <_dtoa_r+0x620>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4650      	mov	r0, sl
 8008d20:	4659      	mov	r1, fp
 8008d22:	f7f7 fef3 	bl	8000b0c <__aeabi_dcmplt>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d079      	beq.n	8008e1e <_dtoa_r+0x4de>
 8008d2a:	9b03      	ldr	r3, [sp, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d076      	beq.n	8008e1e <_dtoa_r+0x4de>
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	dd36      	ble.n	8008da4 <_dtoa_r+0x464>
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	4650      	mov	r0, sl
 8008d3a:	4659      	mov	r1, fp
 8008d3c:	1e5f      	subs	r7, r3, #1
 8008d3e:	2200      	movs	r2, #0
 8008d40:	4b88      	ldr	r3, [pc, #544]	; (8008f64 <_dtoa_r+0x624>)
 8008d42:	f7f7 fc71 	bl	8000628 <__aeabi_dmul>
 8008d46:	9e02      	ldr	r6, [sp, #8]
 8008d48:	4682      	mov	sl, r0
 8008d4a:	468b      	mov	fp, r1
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f7f7 fc00 	bl	8000554 <__aeabi_i2d>
 8008d54:	4652      	mov	r2, sl
 8008d56:	465b      	mov	r3, fp
 8008d58:	f7f7 fc66 	bl	8000628 <__aeabi_dmul>
 8008d5c:	4b82      	ldr	r3, [pc, #520]	; (8008f68 <_dtoa_r+0x628>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f7f7 faac 	bl	80002bc <__adddf3>
 8008d64:	46d0      	mov	r8, sl
 8008d66:	46d9      	mov	r9, fp
 8008d68:	4682      	mov	sl, r0
 8008d6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008d6e:	2e00      	cmp	r6, #0
 8008d70:	d158      	bne.n	8008e24 <_dtoa_r+0x4e4>
 8008d72:	4b7e      	ldr	r3, [pc, #504]	; (8008f6c <_dtoa_r+0x62c>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	4640      	mov	r0, r8
 8008d78:	4649      	mov	r1, r9
 8008d7a:	f7f7 fa9d 	bl	80002b8 <__aeabi_dsub>
 8008d7e:	4652      	mov	r2, sl
 8008d80:	465b      	mov	r3, fp
 8008d82:	4680      	mov	r8, r0
 8008d84:	4689      	mov	r9, r1
 8008d86:	f7f7 fedf 	bl	8000b48 <__aeabi_dcmpgt>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	f040 8295 	bne.w	80092ba <_dtoa_r+0x97a>
 8008d90:	4652      	mov	r2, sl
 8008d92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d96:	4640      	mov	r0, r8
 8008d98:	4649      	mov	r1, r9
 8008d9a:	f7f7 feb7 	bl	8000b0c <__aeabi_dcmplt>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	f040 8289 	bne.w	80092b6 <_dtoa_r+0x976>
 8008da4:	ec5b ab19 	vmov	sl, fp, d9
 8008da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f2c0 8148 	blt.w	8009040 <_dtoa_r+0x700>
 8008db0:	9a00      	ldr	r2, [sp, #0]
 8008db2:	2a0e      	cmp	r2, #14
 8008db4:	f300 8144 	bgt.w	8009040 <_dtoa_r+0x700>
 8008db8:	4b67      	ldr	r3, [pc, #412]	; (8008f58 <_dtoa_r+0x618>)
 8008dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f280 80d5 	bge.w	8008f74 <_dtoa_r+0x634>
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f300 80d1 	bgt.w	8008f74 <_dtoa_r+0x634>
 8008dd2:	f040 826f 	bne.w	80092b4 <_dtoa_r+0x974>
 8008dd6:	4b65      	ldr	r3, [pc, #404]	; (8008f6c <_dtoa_r+0x62c>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f7f7 fc23 	bl	8000628 <__aeabi_dmul>
 8008de2:	4652      	mov	r2, sl
 8008de4:	465b      	mov	r3, fp
 8008de6:	f7f7 fea5 	bl	8000b34 <__aeabi_dcmpge>
 8008dea:	9e03      	ldr	r6, [sp, #12]
 8008dec:	4637      	mov	r7, r6
 8008dee:	2800      	cmp	r0, #0
 8008df0:	f040 8245 	bne.w	800927e <_dtoa_r+0x93e>
 8008df4:	9d01      	ldr	r5, [sp, #4]
 8008df6:	2331      	movs	r3, #49	; 0x31
 8008df8:	f805 3b01 	strb.w	r3, [r5], #1
 8008dfc:	9b00      	ldr	r3, [sp, #0]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	e240      	b.n	8009286 <_dtoa_r+0x946>
 8008e04:	07f2      	lsls	r2, r6, #31
 8008e06:	d505      	bpl.n	8008e14 <_dtoa_r+0x4d4>
 8008e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e0c:	f7f7 fc0c 	bl	8000628 <__aeabi_dmul>
 8008e10:	3501      	adds	r5, #1
 8008e12:	2301      	movs	r3, #1
 8008e14:	1076      	asrs	r6, r6, #1
 8008e16:	3708      	adds	r7, #8
 8008e18:	e777      	b.n	8008d0a <_dtoa_r+0x3ca>
 8008e1a:	2502      	movs	r5, #2
 8008e1c:	e779      	b.n	8008d12 <_dtoa_r+0x3d2>
 8008e1e:	9f00      	ldr	r7, [sp, #0]
 8008e20:	9e03      	ldr	r6, [sp, #12]
 8008e22:	e794      	b.n	8008d4e <_dtoa_r+0x40e>
 8008e24:	9901      	ldr	r1, [sp, #4]
 8008e26:	4b4c      	ldr	r3, [pc, #304]	; (8008f58 <_dtoa_r+0x618>)
 8008e28:	4431      	add	r1, r6
 8008e2a:	910d      	str	r1, [sp, #52]	; 0x34
 8008e2c:	9908      	ldr	r1, [sp, #32]
 8008e2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e36:	2900      	cmp	r1, #0
 8008e38:	d043      	beq.n	8008ec2 <_dtoa_r+0x582>
 8008e3a:	494d      	ldr	r1, [pc, #308]	; (8008f70 <_dtoa_r+0x630>)
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	f7f7 fd1d 	bl	800087c <__aeabi_ddiv>
 8008e42:	4652      	mov	r2, sl
 8008e44:	465b      	mov	r3, fp
 8008e46:	f7f7 fa37 	bl	80002b8 <__aeabi_dsub>
 8008e4a:	9d01      	ldr	r5, [sp, #4]
 8008e4c:	4682      	mov	sl, r0
 8008e4e:	468b      	mov	fp, r1
 8008e50:	4649      	mov	r1, r9
 8008e52:	4640      	mov	r0, r8
 8008e54:	f7f7 fe98 	bl	8000b88 <__aeabi_d2iz>
 8008e58:	4606      	mov	r6, r0
 8008e5a:	f7f7 fb7b 	bl	8000554 <__aeabi_i2d>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4640      	mov	r0, r8
 8008e64:	4649      	mov	r1, r9
 8008e66:	f7f7 fa27 	bl	80002b8 <__aeabi_dsub>
 8008e6a:	3630      	adds	r6, #48	; 0x30
 8008e6c:	f805 6b01 	strb.w	r6, [r5], #1
 8008e70:	4652      	mov	r2, sl
 8008e72:	465b      	mov	r3, fp
 8008e74:	4680      	mov	r8, r0
 8008e76:	4689      	mov	r9, r1
 8008e78:	f7f7 fe48 	bl	8000b0c <__aeabi_dcmplt>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d163      	bne.n	8008f48 <_dtoa_r+0x608>
 8008e80:	4642      	mov	r2, r8
 8008e82:	464b      	mov	r3, r9
 8008e84:	4936      	ldr	r1, [pc, #216]	; (8008f60 <_dtoa_r+0x620>)
 8008e86:	2000      	movs	r0, #0
 8008e88:	f7f7 fa16 	bl	80002b8 <__aeabi_dsub>
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	465b      	mov	r3, fp
 8008e90:	f7f7 fe3c 	bl	8000b0c <__aeabi_dcmplt>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	f040 80b5 	bne.w	8009004 <_dtoa_r+0x6c4>
 8008e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e9c:	429d      	cmp	r5, r3
 8008e9e:	d081      	beq.n	8008da4 <_dtoa_r+0x464>
 8008ea0:	4b30      	ldr	r3, [pc, #192]	; (8008f64 <_dtoa_r+0x624>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	4659      	mov	r1, fp
 8008ea8:	f7f7 fbbe 	bl	8000628 <__aeabi_dmul>
 8008eac:	4b2d      	ldr	r3, [pc, #180]	; (8008f64 <_dtoa_r+0x624>)
 8008eae:	4682      	mov	sl, r0
 8008eb0:	468b      	mov	fp, r1
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f7f7 fbb6 	bl	8000628 <__aeabi_dmul>
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	4689      	mov	r9, r1
 8008ec0:	e7c6      	b.n	8008e50 <_dtoa_r+0x510>
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	4659      	mov	r1, fp
 8008ec6:	f7f7 fbaf 	bl	8000628 <__aeabi_dmul>
 8008eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ecc:	9d01      	ldr	r5, [sp, #4]
 8008ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ed0:	4682      	mov	sl, r0
 8008ed2:	468b      	mov	fp, r1
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	f7f7 fe56 	bl	8000b88 <__aeabi_d2iz>
 8008edc:	4606      	mov	r6, r0
 8008ede:	f7f7 fb39 	bl	8000554 <__aeabi_i2d>
 8008ee2:	3630      	adds	r6, #48	; 0x30
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4640      	mov	r0, r8
 8008eea:	4649      	mov	r1, r9
 8008eec:	f7f7 f9e4 	bl	80002b8 <__aeabi_dsub>
 8008ef0:	f805 6b01 	strb.w	r6, [r5], #1
 8008ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ef6:	429d      	cmp	r5, r3
 8008ef8:	4680      	mov	r8, r0
 8008efa:	4689      	mov	r9, r1
 8008efc:	f04f 0200 	mov.w	r2, #0
 8008f00:	d124      	bne.n	8008f4c <_dtoa_r+0x60c>
 8008f02:	4b1b      	ldr	r3, [pc, #108]	; (8008f70 <_dtoa_r+0x630>)
 8008f04:	4650      	mov	r0, sl
 8008f06:	4659      	mov	r1, fp
 8008f08:	f7f7 f9d8 	bl	80002bc <__adddf3>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4640      	mov	r0, r8
 8008f12:	4649      	mov	r1, r9
 8008f14:	f7f7 fe18 	bl	8000b48 <__aeabi_dcmpgt>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d173      	bne.n	8009004 <_dtoa_r+0x6c4>
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	465b      	mov	r3, fp
 8008f20:	4913      	ldr	r1, [pc, #76]	; (8008f70 <_dtoa_r+0x630>)
 8008f22:	2000      	movs	r0, #0
 8008f24:	f7f7 f9c8 	bl	80002b8 <__aeabi_dsub>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4640      	mov	r0, r8
 8008f2e:	4649      	mov	r1, r9
 8008f30:	f7f7 fdec 	bl	8000b0c <__aeabi_dcmplt>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	f43f af35 	beq.w	8008da4 <_dtoa_r+0x464>
 8008f3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f3c:	1e6b      	subs	r3, r5, #1
 8008f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f44:	2b30      	cmp	r3, #48	; 0x30
 8008f46:	d0f8      	beq.n	8008f3a <_dtoa_r+0x5fa>
 8008f48:	9700      	str	r7, [sp, #0]
 8008f4a:	e049      	b.n	8008fe0 <_dtoa_r+0x6a0>
 8008f4c:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <_dtoa_r+0x624>)
 8008f4e:	f7f7 fb6b 	bl	8000628 <__aeabi_dmul>
 8008f52:	4680      	mov	r8, r0
 8008f54:	4689      	mov	r9, r1
 8008f56:	e7bd      	b.n	8008ed4 <_dtoa_r+0x594>
 8008f58:	0800b8d8 	.word	0x0800b8d8
 8008f5c:	0800b8b0 	.word	0x0800b8b0
 8008f60:	3ff00000 	.word	0x3ff00000
 8008f64:	40240000 	.word	0x40240000
 8008f68:	401c0000 	.word	0x401c0000
 8008f6c:	40140000 	.word	0x40140000
 8008f70:	3fe00000 	.word	0x3fe00000
 8008f74:	9d01      	ldr	r5, [sp, #4]
 8008f76:	4656      	mov	r6, sl
 8008f78:	465f      	mov	r7, fp
 8008f7a:	4642      	mov	r2, r8
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	4630      	mov	r0, r6
 8008f80:	4639      	mov	r1, r7
 8008f82:	f7f7 fc7b 	bl	800087c <__aeabi_ddiv>
 8008f86:	f7f7 fdff 	bl	8000b88 <__aeabi_d2iz>
 8008f8a:	4682      	mov	sl, r0
 8008f8c:	f7f7 fae2 	bl	8000554 <__aeabi_i2d>
 8008f90:	4642      	mov	r2, r8
 8008f92:	464b      	mov	r3, r9
 8008f94:	f7f7 fb48 	bl	8000628 <__aeabi_dmul>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008fa4:	f7f7 f988 	bl	80002b8 <__aeabi_dsub>
 8008fa8:	f805 6b01 	strb.w	r6, [r5], #1
 8008fac:	9e01      	ldr	r6, [sp, #4]
 8008fae:	9f03      	ldr	r7, [sp, #12]
 8008fb0:	1bae      	subs	r6, r5, r6
 8008fb2:	42b7      	cmp	r7, r6
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	d135      	bne.n	8009026 <_dtoa_r+0x6e6>
 8008fba:	f7f7 f97f 	bl	80002bc <__adddf3>
 8008fbe:	4642      	mov	r2, r8
 8008fc0:	464b      	mov	r3, r9
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	460f      	mov	r7, r1
 8008fc6:	f7f7 fdbf 	bl	8000b48 <__aeabi_dcmpgt>
 8008fca:	b9d0      	cbnz	r0, 8009002 <_dtoa_r+0x6c2>
 8008fcc:	4642      	mov	r2, r8
 8008fce:	464b      	mov	r3, r9
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	f7f7 fd90 	bl	8000af8 <__aeabi_dcmpeq>
 8008fd8:	b110      	cbz	r0, 8008fe0 <_dtoa_r+0x6a0>
 8008fda:	f01a 0f01 	tst.w	sl, #1
 8008fde:	d110      	bne.n	8009002 <_dtoa_r+0x6c2>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	ee18 1a10 	vmov	r1, s16
 8008fe6:	f000 fd17 	bl	8009a18 <_Bfree>
 8008fea:	2300      	movs	r3, #0
 8008fec:	9800      	ldr	r0, [sp, #0]
 8008fee:	702b      	strb	r3, [r5, #0]
 8008ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	6018      	str	r0, [r3, #0]
 8008ff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f43f acf1 	beq.w	80089e0 <_dtoa_r+0xa0>
 8008ffe:	601d      	str	r5, [r3, #0]
 8009000:	e4ee      	b.n	80089e0 <_dtoa_r+0xa0>
 8009002:	9f00      	ldr	r7, [sp, #0]
 8009004:	462b      	mov	r3, r5
 8009006:	461d      	mov	r5, r3
 8009008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800900c:	2a39      	cmp	r2, #57	; 0x39
 800900e:	d106      	bne.n	800901e <_dtoa_r+0x6de>
 8009010:	9a01      	ldr	r2, [sp, #4]
 8009012:	429a      	cmp	r2, r3
 8009014:	d1f7      	bne.n	8009006 <_dtoa_r+0x6c6>
 8009016:	9901      	ldr	r1, [sp, #4]
 8009018:	2230      	movs	r2, #48	; 0x30
 800901a:	3701      	adds	r7, #1
 800901c:	700a      	strb	r2, [r1, #0]
 800901e:	781a      	ldrb	r2, [r3, #0]
 8009020:	3201      	adds	r2, #1
 8009022:	701a      	strb	r2, [r3, #0]
 8009024:	e790      	b.n	8008f48 <_dtoa_r+0x608>
 8009026:	4ba6      	ldr	r3, [pc, #664]	; (80092c0 <_dtoa_r+0x980>)
 8009028:	2200      	movs	r2, #0
 800902a:	f7f7 fafd 	bl	8000628 <__aeabi_dmul>
 800902e:	2200      	movs	r2, #0
 8009030:	2300      	movs	r3, #0
 8009032:	4606      	mov	r6, r0
 8009034:	460f      	mov	r7, r1
 8009036:	f7f7 fd5f 	bl	8000af8 <__aeabi_dcmpeq>
 800903a:	2800      	cmp	r0, #0
 800903c:	d09d      	beq.n	8008f7a <_dtoa_r+0x63a>
 800903e:	e7cf      	b.n	8008fe0 <_dtoa_r+0x6a0>
 8009040:	9a08      	ldr	r2, [sp, #32]
 8009042:	2a00      	cmp	r2, #0
 8009044:	f000 80d7 	beq.w	80091f6 <_dtoa_r+0x8b6>
 8009048:	9a06      	ldr	r2, [sp, #24]
 800904a:	2a01      	cmp	r2, #1
 800904c:	f300 80ba 	bgt.w	80091c4 <_dtoa_r+0x884>
 8009050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009052:	2a00      	cmp	r2, #0
 8009054:	f000 80b2 	beq.w	80091bc <_dtoa_r+0x87c>
 8009058:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800905c:	9e07      	ldr	r6, [sp, #28]
 800905e:	9d04      	ldr	r5, [sp, #16]
 8009060:	9a04      	ldr	r2, [sp, #16]
 8009062:	441a      	add	r2, r3
 8009064:	9204      	str	r2, [sp, #16]
 8009066:	9a05      	ldr	r2, [sp, #20]
 8009068:	2101      	movs	r1, #1
 800906a:	441a      	add	r2, r3
 800906c:	4620      	mov	r0, r4
 800906e:	9205      	str	r2, [sp, #20]
 8009070:	f000 fd8a 	bl	8009b88 <__i2b>
 8009074:	4607      	mov	r7, r0
 8009076:	2d00      	cmp	r5, #0
 8009078:	dd0c      	ble.n	8009094 <_dtoa_r+0x754>
 800907a:	9b05      	ldr	r3, [sp, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	dd09      	ble.n	8009094 <_dtoa_r+0x754>
 8009080:	42ab      	cmp	r3, r5
 8009082:	9a04      	ldr	r2, [sp, #16]
 8009084:	bfa8      	it	ge
 8009086:	462b      	movge	r3, r5
 8009088:	1ad2      	subs	r2, r2, r3
 800908a:	9204      	str	r2, [sp, #16]
 800908c:	9a05      	ldr	r2, [sp, #20]
 800908e:	1aed      	subs	r5, r5, r3
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	9305      	str	r3, [sp, #20]
 8009094:	9b07      	ldr	r3, [sp, #28]
 8009096:	b31b      	cbz	r3, 80090e0 <_dtoa_r+0x7a0>
 8009098:	9b08      	ldr	r3, [sp, #32]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 80af 	beq.w	80091fe <_dtoa_r+0x8be>
 80090a0:	2e00      	cmp	r6, #0
 80090a2:	dd13      	ble.n	80090cc <_dtoa_r+0x78c>
 80090a4:	4639      	mov	r1, r7
 80090a6:	4632      	mov	r2, r6
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 fe2d 	bl	8009d08 <__pow5mult>
 80090ae:	ee18 2a10 	vmov	r2, s16
 80090b2:	4601      	mov	r1, r0
 80090b4:	4607      	mov	r7, r0
 80090b6:	4620      	mov	r0, r4
 80090b8:	f000 fd7c 	bl	8009bb4 <__multiply>
 80090bc:	ee18 1a10 	vmov	r1, s16
 80090c0:	4680      	mov	r8, r0
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 fca8 	bl	8009a18 <_Bfree>
 80090c8:	ee08 8a10 	vmov	s16, r8
 80090cc:	9b07      	ldr	r3, [sp, #28]
 80090ce:	1b9a      	subs	r2, r3, r6
 80090d0:	d006      	beq.n	80090e0 <_dtoa_r+0x7a0>
 80090d2:	ee18 1a10 	vmov	r1, s16
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fe16 	bl	8009d08 <__pow5mult>
 80090dc:	ee08 0a10 	vmov	s16, r0
 80090e0:	2101      	movs	r1, #1
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 fd50 	bl	8009b88 <__i2b>
 80090e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	4606      	mov	r6, r0
 80090ee:	f340 8088 	ble.w	8009202 <_dtoa_r+0x8c2>
 80090f2:	461a      	mov	r2, r3
 80090f4:	4601      	mov	r1, r0
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 fe06 	bl	8009d08 <__pow5mult>
 80090fc:	9b06      	ldr	r3, [sp, #24]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	4606      	mov	r6, r0
 8009102:	f340 8081 	ble.w	8009208 <_dtoa_r+0x8c8>
 8009106:	f04f 0800 	mov.w	r8, #0
 800910a:	6933      	ldr	r3, [r6, #16]
 800910c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009110:	6918      	ldr	r0, [r3, #16]
 8009112:	f000 fce9 	bl	8009ae8 <__hi0bits>
 8009116:	f1c0 0020 	rsb	r0, r0, #32
 800911a:	9b05      	ldr	r3, [sp, #20]
 800911c:	4418      	add	r0, r3
 800911e:	f010 001f 	ands.w	r0, r0, #31
 8009122:	f000 8092 	beq.w	800924a <_dtoa_r+0x90a>
 8009126:	f1c0 0320 	rsb	r3, r0, #32
 800912a:	2b04      	cmp	r3, #4
 800912c:	f340 808a 	ble.w	8009244 <_dtoa_r+0x904>
 8009130:	f1c0 001c 	rsb	r0, r0, #28
 8009134:	9b04      	ldr	r3, [sp, #16]
 8009136:	4403      	add	r3, r0
 8009138:	9304      	str	r3, [sp, #16]
 800913a:	9b05      	ldr	r3, [sp, #20]
 800913c:	4403      	add	r3, r0
 800913e:	4405      	add	r5, r0
 8009140:	9305      	str	r3, [sp, #20]
 8009142:	9b04      	ldr	r3, [sp, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	dd07      	ble.n	8009158 <_dtoa_r+0x818>
 8009148:	ee18 1a10 	vmov	r1, s16
 800914c:	461a      	mov	r2, r3
 800914e:	4620      	mov	r0, r4
 8009150:	f000 fe34 	bl	8009dbc <__lshift>
 8009154:	ee08 0a10 	vmov	s16, r0
 8009158:	9b05      	ldr	r3, [sp, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	dd05      	ble.n	800916a <_dtoa_r+0x82a>
 800915e:	4631      	mov	r1, r6
 8009160:	461a      	mov	r2, r3
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fe2a 	bl	8009dbc <__lshift>
 8009168:	4606      	mov	r6, r0
 800916a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d06e      	beq.n	800924e <_dtoa_r+0x90e>
 8009170:	ee18 0a10 	vmov	r0, s16
 8009174:	4631      	mov	r1, r6
 8009176:	f000 fe91 	bl	8009e9c <__mcmp>
 800917a:	2800      	cmp	r0, #0
 800917c:	da67      	bge.n	800924e <_dtoa_r+0x90e>
 800917e:	9b00      	ldr	r3, [sp, #0]
 8009180:	3b01      	subs	r3, #1
 8009182:	ee18 1a10 	vmov	r1, s16
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	220a      	movs	r2, #10
 800918a:	2300      	movs	r3, #0
 800918c:	4620      	mov	r0, r4
 800918e:	f000 fc65 	bl	8009a5c <__multadd>
 8009192:	9b08      	ldr	r3, [sp, #32]
 8009194:	ee08 0a10 	vmov	s16, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 81b1 	beq.w	8009500 <_dtoa_r+0xbc0>
 800919e:	2300      	movs	r3, #0
 80091a0:	4639      	mov	r1, r7
 80091a2:	220a      	movs	r2, #10
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 fc59 	bl	8009a5c <__multadd>
 80091aa:	9b02      	ldr	r3, [sp, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	4607      	mov	r7, r0
 80091b0:	f300 808e 	bgt.w	80092d0 <_dtoa_r+0x990>
 80091b4:	9b06      	ldr	r3, [sp, #24]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	dc51      	bgt.n	800925e <_dtoa_r+0x91e>
 80091ba:	e089      	b.n	80092d0 <_dtoa_r+0x990>
 80091bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091c2:	e74b      	b.n	800905c <_dtoa_r+0x71c>
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	1e5e      	subs	r6, r3, #1
 80091c8:	9b07      	ldr	r3, [sp, #28]
 80091ca:	42b3      	cmp	r3, r6
 80091cc:	bfbf      	itttt	lt
 80091ce:	9b07      	ldrlt	r3, [sp, #28]
 80091d0:	9607      	strlt	r6, [sp, #28]
 80091d2:	1af2      	sublt	r2, r6, r3
 80091d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80091d6:	bfb6      	itet	lt
 80091d8:	189b      	addlt	r3, r3, r2
 80091da:	1b9e      	subge	r6, r3, r6
 80091dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	bfb8      	it	lt
 80091e2:	2600      	movlt	r6, #0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bfb7      	itett	lt
 80091e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80091ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80091f0:	1a9d      	sublt	r5, r3, r2
 80091f2:	2300      	movlt	r3, #0
 80091f4:	e734      	b.n	8009060 <_dtoa_r+0x720>
 80091f6:	9e07      	ldr	r6, [sp, #28]
 80091f8:	9d04      	ldr	r5, [sp, #16]
 80091fa:	9f08      	ldr	r7, [sp, #32]
 80091fc:	e73b      	b.n	8009076 <_dtoa_r+0x736>
 80091fe:	9a07      	ldr	r2, [sp, #28]
 8009200:	e767      	b.n	80090d2 <_dtoa_r+0x792>
 8009202:	9b06      	ldr	r3, [sp, #24]
 8009204:	2b01      	cmp	r3, #1
 8009206:	dc18      	bgt.n	800923a <_dtoa_r+0x8fa>
 8009208:	f1ba 0f00 	cmp.w	sl, #0
 800920c:	d115      	bne.n	800923a <_dtoa_r+0x8fa>
 800920e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009212:	b993      	cbnz	r3, 800923a <_dtoa_r+0x8fa>
 8009214:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009218:	0d1b      	lsrs	r3, r3, #20
 800921a:	051b      	lsls	r3, r3, #20
 800921c:	b183      	cbz	r3, 8009240 <_dtoa_r+0x900>
 800921e:	9b04      	ldr	r3, [sp, #16]
 8009220:	3301      	adds	r3, #1
 8009222:	9304      	str	r3, [sp, #16]
 8009224:	9b05      	ldr	r3, [sp, #20]
 8009226:	3301      	adds	r3, #1
 8009228:	9305      	str	r3, [sp, #20]
 800922a:	f04f 0801 	mov.w	r8, #1
 800922e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009230:	2b00      	cmp	r3, #0
 8009232:	f47f af6a 	bne.w	800910a <_dtoa_r+0x7ca>
 8009236:	2001      	movs	r0, #1
 8009238:	e76f      	b.n	800911a <_dtoa_r+0x7da>
 800923a:	f04f 0800 	mov.w	r8, #0
 800923e:	e7f6      	b.n	800922e <_dtoa_r+0x8ee>
 8009240:	4698      	mov	r8, r3
 8009242:	e7f4      	b.n	800922e <_dtoa_r+0x8ee>
 8009244:	f43f af7d 	beq.w	8009142 <_dtoa_r+0x802>
 8009248:	4618      	mov	r0, r3
 800924a:	301c      	adds	r0, #28
 800924c:	e772      	b.n	8009134 <_dtoa_r+0x7f4>
 800924e:	9b03      	ldr	r3, [sp, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	dc37      	bgt.n	80092c4 <_dtoa_r+0x984>
 8009254:	9b06      	ldr	r3, [sp, #24]
 8009256:	2b02      	cmp	r3, #2
 8009258:	dd34      	ble.n	80092c4 <_dtoa_r+0x984>
 800925a:	9b03      	ldr	r3, [sp, #12]
 800925c:	9302      	str	r3, [sp, #8]
 800925e:	9b02      	ldr	r3, [sp, #8]
 8009260:	b96b      	cbnz	r3, 800927e <_dtoa_r+0x93e>
 8009262:	4631      	mov	r1, r6
 8009264:	2205      	movs	r2, #5
 8009266:	4620      	mov	r0, r4
 8009268:	f000 fbf8 	bl	8009a5c <__multadd>
 800926c:	4601      	mov	r1, r0
 800926e:	4606      	mov	r6, r0
 8009270:	ee18 0a10 	vmov	r0, s16
 8009274:	f000 fe12 	bl	8009e9c <__mcmp>
 8009278:	2800      	cmp	r0, #0
 800927a:	f73f adbb 	bgt.w	8008df4 <_dtoa_r+0x4b4>
 800927e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009280:	9d01      	ldr	r5, [sp, #4]
 8009282:	43db      	mvns	r3, r3
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	f04f 0800 	mov.w	r8, #0
 800928a:	4631      	mov	r1, r6
 800928c:	4620      	mov	r0, r4
 800928e:	f000 fbc3 	bl	8009a18 <_Bfree>
 8009292:	2f00      	cmp	r7, #0
 8009294:	f43f aea4 	beq.w	8008fe0 <_dtoa_r+0x6a0>
 8009298:	f1b8 0f00 	cmp.w	r8, #0
 800929c:	d005      	beq.n	80092aa <_dtoa_r+0x96a>
 800929e:	45b8      	cmp	r8, r7
 80092a0:	d003      	beq.n	80092aa <_dtoa_r+0x96a>
 80092a2:	4641      	mov	r1, r8
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 fbb7 	bl	8009a18 <_Bfree>
 80092aa:	4639      	mov	r1, r7
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 fbb3 	bl	8009a18 <_Bfree>
 80092b2:	e695      	b.n	8008fe0 <_dtoa_r+0x6a0>
 80092b4:	2600      	movs	r6, #0
 80092b6:	4637      	mov	r7, r6
 80092b8:	e7e1      	b.n	800927e <_dtoa_r+0x93e>
 80092ba:	9700      	str	r7, [sp, #0]
 80092bc:	4637      	mov	r7, r6
 80092be:	e599      	b.n	8008df4 <_dtoa_r+0x4b4>
 80092c0:	40240000 	.word	0x40240000
 80092c4:	9b08      	ldr	r3, [sp, #32]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 80ca 	beq.w	8009460 <_dtoa_r+0xb20>
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	9302      	str	r3, [sp, #8]
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	dd05      	ble.n	80092e0 <_dtoa_r+0x9a0>
 80092d4:	4639      	mov	r1, r7
 80092d6:	462a      	mov	r2, r5
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 fd6f 	bl	8009dbc <__lshift>
 80092de:	4607      	mov	r7, r0
 80092e0:	f1b8 0f00 	cmp.w	r8, #0
 80092e4:	d05b      	beq.n	800939e <_dtoa_r+0xa5e>
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	4620      	mov	r0, r4
 80092ea:	f000 fb55 	bl	8009998 <_Balloc>
 80092ee:	4605      	mov	r5, r0
 80092f0:	b928      	cbnz	r0, 80092fe <_dtoa_r+0x9be>
 80092f2:	4b87      	ldr	r3, [pc, #540]	; (8009510 <_dtoa_r+0xbd0>)
 80092f4:	4602      	mov	r2, r0
 80092f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80092fa:	f7ff bb3b 	b.w	8008974 <_dtoa_r+0x34>
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	3202      	adds	r2, #2
 8009302:	0092      	lsls	r2, r2, #2
 8009304:	f107 010c 	add.w	r1, r7, #12
 8009308:	300c      	adds	r0, #12
 800930a:	f000 fb2b 	bl	8009964 <memcpy>
 800930e:	2201      	movs	r2, #1
 8009310:	4629      	mov	r1, r5
 8009312:	4620      	mov	r0, r4
 8009314:	f000 fd52 	bl	8009dbc <__lshift>
 8009318:	9b01      	ldr	r3, [sp, #4]
 800931a:	f103 0901 	add.w	r9, r3, #1
 800931e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009322:	4413      	add	r3, r2
 8009324:	9305      	str	r3, [sp, #20]
 8009326:	f00a 0301 	and.w	r3, sl, #1
 800932a:	46b8      	mov	r8, r7
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	4607      	mov	r7, r0
 8009330:	4631      	mov	r1, r6
 8009332:	ee18 0a10 	vmov	r0, s16
 8009336:	f7ff fa75 	bl	8008824 <quorem>
 800933a:	4641      	mov	r1, r8
 800933c:	9002      	str	r0, [sp, #8]
 800933e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009342:	ee18 0a10 	vmov	r0, s16
 8009346:	f000 fda9 	bl	8009e9c <__mcmp>
 800934a:	463a      	mov	r2, r7
 800934c:	9003      	str	r0, [sp, #12]
 800934e:	4631      	mov	r1, r6
 8009350:	4620      	mov	r0, r4
 8009352:	f000 fdbf 	bl	8009ed4 <__mdiff>
 8009356:	68c2      	ldr	r2, [r0, #12]
 8009358:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800935c:	4605      	mov	r5, r0
 800935e:	bb02      	cbnz	r2, 80093a2 <_dtoa_r+0xa62>
 8009360:	4601      	mov	r1, r0
 8009362:	ee18 0a10 	vmov	r0, s16
 8009366:	f000 fd99 	bl	8009e9c <__mcmp>
 800936a:	4602      	mov	r2, r0
 800936c:	4629      	mov	r1, r5
 800936e:	4620      	mov	r0, r4
 8009370:	9207      	str	r2, [sp, #28]
 8009372:	f000 fb51 	bl	8009a18 <_Bfree>
 8009376:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800937a:	ea43 0102 	orr.w	r1, r3, r2
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	430b      	orrs	r3, r1
 8009382:	464d      	mov	r5, r9
 8009384:	d10f      	bne.n	80093a6 <_dtoa_r+0xa66>
 8009386:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800938a:	d02a      	beq.n	80093e2 <_dtoa_r+0xaa2>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	dd02      	ble.n	8009398 <_dtoa_r+0xa58>
 8009392:	9b02      	ldr	r3, [sp, #8]
 8009394:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009398:	f88b a000 	strb.w	sl, [fp]
 800939c:	e775      	b.n	800928a <_dtoa_r+0x94a>
 800939e:	4638      	mov	r0, r7
 80093a0:	e7ba      	b.n	8009318 <_dtoa_r+0x9d8>
 80093a2:	2201      	movs	r2, #1
 80093a4:	e7e2      	b.n	800936c <_dtoa_r+0xa2c>
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	db04      	blt.n	80093b6 <_dtoa_r+0xa76>
 80093ac:	9906      	ldr	r1, [sp, #24]
 80093ae:	430b      	orrs	r3, r1
 80093b0:	9904      	ldr	r1, [sp, #16]
 80093b2:	430b      	orrs	r3, r1
 80093b4:	d122      	bne.n	80093fc <_dtoa_r+0xabc>
 80093b6:	2a00      	cmp	r2, #0
 80093b8:	ddee      	ble.n	8009398 <_dtoa_r+0xa58>
 80093ba:	ee18 1a10 	vmov	r1, s16
 80093be:	2201      	movs	r2, #1
 80093c0:	4620      	mov	r0, r4
 80093c2:	f000 fcfb 	bl	8009dbc <__lshift>
 80093c6:	4631      	mov	r1, r6
 80093c8:	ee08 0a10 	vmov	s16, r0
 80093cc:	f000 fd66 	bl	8009e9c <__mcmp>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	dc03      	bgt.n	80093dc <_dtoa_r+0xa9c>
 80093d4:	d1e0      	bne.n	8009398 <_dtoa_r+0xa58>
 80093d6:	f01a 0f01 	tst.w	sl, #1
 80093da:	d0dd      	beq.n	8009398 <_dtoa_r+0xa58>
 80093dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80093e0:	d1d7      	bne.n	8009392 <_dtoa_r+0xa52>
 80093e2:	2339      	movs	r3, #57	; 0x39
 80093e4:	f88b 3000 	strb.w	r3, [fp]
 80093e8:	462b      	mov	r3, r5
 80093ea:	461d      	mov	r5, r3
 80093ec:	3b01      	subs	r3, #1
 80093ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093f2:	2a39      	cmp	r2, #57	; 0x39
 80093f4:	d071      	beq.n	80094da <_dtoa_r+0xb9a>
 80093f6:	3201      	adds	r2, #1
 80093f8:	701a      	strb	r2, [r3, #0]
 80093fa:	e746      	b.n	800928a <_dtoa_r+0x94a>
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	dd07      	ble.n	8009410 <_dtoa_r+0xad0>
 8009400:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009404:	d0ed      	beq.n	80093e2 <_dtoa_r+0xaa2>
 8009406:	f10a 0301 	add.w	r3, sl, #1
 800940a:	f88b 3000 	strb.w	r3, [fp]
 800940e:	e73c      	b.n	800928a <_dtoa_r+0x94a>
 8009410:	9b05      	ldr	r3, [sp, #20]
 8009412:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009416:	4599      	cmp	r9, r3
 8009418:	d047      	beq.n	80094aa <_dtoa_r+0xb6a>
 800941a:	ee18 1a10 	vmov	r1, s16
 800941e:	2300      	movs	r3, #0
 8009420:	220a      	movs	r2, #10
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fb1a 	bl	8009a5c <__multadd>
 8009428:	45b8      	cmp	r8, r7
 800942a:	ee08 0a10 	vmov	s16, r0
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	f04f 020a 	mov.w	r2, #10
 8009436:	4641      	mov	r1, r8
 8009438:	4620      	mov	r0, r4
 800943a:	d106      	bne.n	800944a <_dtoa_r+0xb0a>
 800943c:	f000 fb0e 	bl	8009a5c <__multadd>
 8009440:	4680      	mov	r8, r0
 8009442:	4607      	mov	r7, r0
 8009444:	f109 0901 	add.w	r9, r9, #1
 8009448:	e772      	b.n	8009330 <_dtoa_r+0x9f0>
 800944a:	f000 fb07 	bl	8009a5c <__multadd>
 800944e:	4639      	mov	r1, r7
 8009450:	4680      	mov	r8, r0
 8009452:	2300      	movs	r3, #0
 8009454:	220a      	movs	r2, #10
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fb00 	bl	8009a5c <__multadd>
 800945c:	4607      	mov	r7, r0
 800945e:	e7f1      	b.n	8009444 <_dtoa_r+0xb04>
 8009460:	9b03      	ldr	r3, [sp, #12]
 8009462:	9302      	str	r3, [sp, #8]
 8009464:	9d01      	ldr	r5, [sp, #4]
 8009466:	ee18 0a10 	vmov	r0, s16
 800946a:	4631      	mov	r1, r6
 800946c:	f7ff f9da 	bl	8008824 <quorem>
 8009470:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009474:	9b01      	ldr	r3, [sp, #4]
 8009476:	f805 ab01 	strb.w	sl, [r5], #1
 800947a:	1aea      	subs	r2, r5, r3
 800947c:	9b02      	ldr	r3, [sp, #8]
 800947e:	4293      	cmp	r3, r2
 8009480:	dd09      	ble.n	8009496 <_dtoa_r+0xb56>
 8009482:	ee18 1a10 	vmov	r1, s16
 8009486:	2300      	movs	r3, #0
 8009488:	220a      	movs	r2, #10
 800948a:	4620      	mov	r0, r4
 800948c:	f000 fae6 	bl	8009a5c <__multadd>
 8009490:	ee08 0a10 	vmov	s16, r0
 8009494:	e7e7      	b.n	8009466 <_dtoa_r+0xb26>
 8009496:	9b02      	ldr	r3, [sp, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	bfc8      	it	gt
 800949c:	461d      	movgt	r5, r3
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	bfd8      	it	le
 80094a2:	2501      	movle	r5, #1
 80094a4:	441d      	add	r5, r3
 80094a6:	f04f 0800 	mov.w	r8, #0
 80094aa:	ee18 1a10 	vmov	r1, s16
 80094ae:	2201      	movs	r2, #1
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 fc83 	bl	8009dbc <__lshift>
 80094b6:	4631      	mov	r1, r6
 80094b8:	ee08 0a10 	vmov	s16, r0
 80094bc:	f000 fcee 	bl	8009e9c <__mcmp>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	dc91      	bgt.n	80093e8 <_dtoa_r+0xaa8>
 80094c4:	d102      	bne.n	80094cc <_dtoa_r+0xb8c>
 80094c6:	f01a 0f01 	tst.w	sl, #1
 80094ca:	d18d      	bne.n	80093e8 <_dtoa_r+0xaa8>
 80094cc:	462b      	mov	r3, r5
 80094ce:	461d      	mov	r5, r3
 80094d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094d4:	2a30      	cmp	r2, #48	; 0x30
 80094d6:	d0fa      	beq.n	80094ce <_dtoa_r+0xb8e>
 80094d8:	e6d7      	b.n	800928a <_dtoa_r+0x94a>
 80094da:	9a01      	ldr	r2, [sp, #4]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d184      	bne.n	80093ea <_dtoa_r+0xaaa>
 80094e0:	9b00      	ldr	r3, [sp, #0]
 80094e2:	3301      	adds	r3, #1
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	2331      	movs	r3, #49	; 0x31
 80094e8:	7013      	strb	r3, [r2, #0]
 80094ea:	e6ce      	b.n	800928a <_dtoa_r+0x94a>
 80094ec:	4b09      	ldr	r3, [pc, #36]	; (8009514 <_dtoa_r+0xbd4>)
 80094ee:	f7ff ba95 	b.w	8008a1c <_dtoa_r+0xdc>
 80094f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f47f aa6e 	bne.w	80089d6 <_dtoa_r+0x96>
 80094fa:	4b07      	ldr	r3, [pc, #28]	; (8009518 <_dtoa_r+0xbd8>)
 80094fc:	f7ff ba8e 	b.w	8008a1c <_dtoa_r+0xdc>
 8009500:	9b02      	ldr	r3, [sp, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	dcae      	bgt.n	8009464 <_dtoa_r+0xb24>
 8009506:	9b06      	ldr	r3, [sp, #24]
 8009508:	2b02      	cmp	r3, #2
 800950a:	f73f aea8 	bgt.w	800925e <_dtoa_r+0x91e>
 800950e:	e7a9      	b.n	8009464 <_dtoa_r+0xb24>
 8009510:	0800b7e3 	.word	0x0800b7e3
 8009514:	0800b740 	.word	0x0800b740
 8009518:	0800b764 	.word	0x0800b764

0800951c <__sflush_r>:
 800951c:	898a      	ldrh	r2, [r1, #12]
 800951e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009522:	4605      	mov	r5, r0
 8009524:	0710      	lsls	r0, r2, #28
 8009526:	460c      	mov	r4, r1
 8009528:	d458      	bmi.n	80095dc <__sflush_r+0xc0>
 800952a:	684b      	ldr	r3, [r1, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	dc05      	bgt.n	800953c <__sflush_r+0x20>
 8009530:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009532:	2b00      	cmp	r3, #0
 8009534:	dc02      	bgt.n	800953c <__sflush_r+0x20>
 8009536:	2000      	movs	r0, #0
 8009538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800953c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800953e:	2e00      	cmp	r6, #0
 8009540:	d0f9      	beq.n	8009536 <__sflush_r+0x1a>
 8009542:	2300      	movs	r3, #0
 8009544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009548:	682f      	ldr	r7, [r5, #0]
 800954a:	602b      	str	r3, [r5, #0]
 800954c:	d032      	beq.n	80095b4 <__sflush_r+0x98>
 800954e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	075a      	lsls	r2, r3, #29
 8009554:	d505      	bpl.n	8009562 <__sflush_r+0x46>
 8009556:	6863      	ldr	r3, [r4, #4]
 8009558:	1ac0      	subs	r0, r0, r3
 800955a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800955c:	b10b      	cbz	r3, 8009562 <__sflush_r+0x46>
 800955e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009560:	1ac0      	subs	r0, r0, r3
 8009562:	2300      	movs	r3, #0
 8009564:	4602      	mov	r2, r0
 8009566:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009568:	6a21      	ldr	r1, [r4, #32]
 800956a:	4628      	mov	r0, r5
 800956c:	47b0      	blx	r6
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	d106      	bne.n	8009582 <__sflush_r+0x66>
 8009574:	6829      	ldr	r1, [r5, #0]
 8009576:	291d      	cmp	r1, #29
 8009578:	d82c      	bhi.n	80095d4 <__sflush_r+0xb8>
 800957a:	4a2a      	ldr	r2, [pc, #168]	; (8009624 <__sflush_r+0x108>)
 800957c:	40ca      	lsrs	r2, r1
 800957e:	07d6      	lsls	r6, r2, #31
 8009580:	d528      	bpl.n	80095d4 <__sflush_r+0xb8>
 8009582:	2200      	movs	r2, #0
 8009584:	6062      	str	r2, [r4, #4]
 8009586:	04d9      	lsls	r1, r3, #19
 8009588:	6922      	ldr	r2, [r4, #16]
 800958a:	6022      	str	r2, [r4, #0]
 800958c:	d504      	bpl.n	8009598 <__sflush_r+0x7c>
 800958e:	1c42      	adds	r2, r0, #1
 8009590:	d101      	bne.n	8009596 <__sflush_r+0x7a>
 8009592:	682b      	ldr	r3, [r5, #0]
 8009594:	b903      	cbnz	r3, 8009598 <__sflush_r+0x7c>
 8009596:	6560      	str	r0, [r4, #84]	; 0x54
 8009598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800959a:	602f      	str	r7, [r5, #0]
 800959c:	2900      	cmp	r1, #0
 800959e:	d0ca      	beq.n	8009536 <__sflush_r+0x1a>
 80095a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095a4:	4299      	cmp	r1, r3
 80095a6:	d002      	beq.n	80095ae <__sflush_r+0x92>
 80095a8:	4628      	mov	r0, r5
 80095aa:	f7fe fa5f 	bl	8007a6c <_free_r>
 80095ae:	2000      	movs	r0, #0
 80095b0:	6360      	str	r0, [r4, #52]	; 0x34
 80095b2:	e7c1      	b.n	8009538 <__sflush_r+0x1c>
 80095b4:	6a21      	ldr	r1, [r4, #32]
 80095b6:	2301      	movs	r3, #1
 80095b8:	4628      	mov	r0, r5
 80095ba:	47b0      	blx	r6
 80095bc:	1c41      	adds	r1, r0, #1
 80095be:	d1c7      	bne.n	8009550 <__sflush_r+0x34>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0c4      	beq.n	8009550 <__sflush_r+0x34>
 80095c6:	2b1d      	cmp	r3, #29
 80095c8:	d001      	beq.n	80095ce <__sflush_r+0xb2>
 80095ca:	2b16      	cmp	r3, #22
 80095cc:	d101      	bne.n	80095d2 <__sflush_r+0xb6>
 80095ce:	602f      	str	r7, [r5, #0]
 80095d0:	e7b1      	b.n	8009536 <__sflush_r+0x1a>
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095d8:	81a3      	strh	r3, [r4, #12]
 80095da:	e7ad      	b.n	8009538 <__sflush_r+0x1c>
 80095dc:	690f      	ldr	r7, [r1, #16]
 80095de:	2f00      	cmp	r7, #0
 80095e0:	d0a9      	beq.n	8009536 <__sflush_r+0x1a>
 80095e2:	0793      	lsls	r3, r2, #30
 80095e4:	680e      	ldr	r6, [r1, #0]
 80095e6:	bf08      	it	eq
 80095e8:	694b      	ldreq	r3, [r1, #20]
 80095ea:	600f      	str	r7, [r1, #0]
 80095ec:	bf18      	it	ne
 80095ee:	2300      	movne	r3, #0
 80095f0:	eba6 0807 	sub.w	r8, r6, r7
 80095f4:	608b      	str	r3, [r1, #8]
 80095f6:	f1b8 0f00 	cmp.w	r8, #0
 80095fa:	dd9c      	ble.n	8009536 <__sflush_r+0x1a>
 80095fc:	6a21      	ldr	r1, [r4, #32]
 80095fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009600:	4643      	mov	r3, r8
 8009602:	463a      	mov	r2, r7
 8009604:	4628      	mov	r0, r5
 8009606:	47b0      	blx	r6
 8009608:	2800      	cmp	r0, #0
 800960a:	dc06      	bgt.n	800961a <__sflush_r+0xfe>
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009612:	81a3      	strh	r3, [r4, #12]
 8009614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009618:	e78e      	b.n	8009538 <__sflush_r+0x1c>
 800961a:	4407      	add	r7, r0
 800961c:	eba8 0800 	sub.w	r8, r8, r0
 8009620:	e7e9      	b.n	80095f6 <__sflush_r+0xda>
 8009622:	bf00      	nop
 8009624:	20400001 	.word	0x20400001

08009628 <_fflush_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	690b      	ldr	r3, [r1, #16]
 800962c:	4605      	mov	r5, r0
 800962e:	460c      	mov	r4, r1
 8009630:	b913      	cbnz	r3, 8009638 <_fflush_r+0x10>
 8009632:	2500      	movs	r5, #0
 8009634:	4628      	mov	r0, r5
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	b118      	cbz	r0, 8009642 <_fflush_r+0x1a>
 800963a:	6983      	ldr	r3, [r0, #24]
 800963c:	b90b      	cbnz	r3, 8009642 <_fflush_r+0x1a>
 800963e:	f000 f887 	bl	8009750 <__sinit>
 8009642:	4b14      	ldr	r3, [pc, #80]	; (8009694 <_fflush_r+0x6c>)
 8009644:	429c      	cmp	r4, r3
 8009646:	d11b      	bne.n	8009680 <_fflush_r+0x58>
 8009648:	686c      	ldr	r4, [r5, #4]
 800964a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0ef      	beq.n	8009632 <_fflush_r+0xa>
 8009652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009654:	07d0      	lsls	r0, r2, #31
 8009656:	d404      	bmi.n	8009662 <_fflush_r+0x3a>
 8009658:	0599      	lsls	r1, r3, #22
 800965a:	d402      	bmi.n	8009662 <_fflush_r+0x3a>
 800965c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800965e:	f000 f91a 	bl	8009896 <__retarget_lock_acquire_recursive>
 8009662:	4628      	mov	r0, r5
 8009664:	4621      	mov	r1, r4
 8009666:	f7ff ff59 	bl	800951c <__sflush_r>
 800966a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800966c:	07da      	lsls	r2, r3, #31
 800966e:	4605      	mov	r5, r0
 8009670:	d4e0      	bmi.n	8009634 <_fflush_r+0xc>
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	059b      	lsls	r3, r3, #22
 8009676:	d4dd      	bmi.n	8009634 <_fflush_r+0xc>
 8009678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967a:	f000 f90d 	bl	8009898 <__retarget_lock_release_recursive>
 800967e:	e7d9      	b.n	8009634 <_fflush_r+0xc>
 8009680:	4b05      	ldr	r3, [pc, #20]	; (8009698 <_fflush_r+0x70>)
 8009682:	429c      	cmp	r4, r3
 8009684:	d101      	bne.n	800968a <_fflush_r+0x62>
 8009686:	68ac      	ldr	r4, [r5, #8]
 8009688:	e7df      	b.n	800964a <_fflush_r+0x22>
 800968a:	4b04      	ldr	r3, [pc, #16]	; (800969c <_fflush_r+0x74>)
 800968c:	429c      	cmp	r4, r3
 800968e:	bf08      	it	eq
 8009690:	68ec      	ldreq	r4, [r5, #12]
 8009692:	e7da      	b.n	800964a <_fflush_r+0x22>
 8009694:	0800b814 	.word	0x0800b814
 8009698:	0800b834 	.word	0x0800b834
 800969c:	0800b7f4 	.word	0x0800b7f4

080096a0 <std>:
 80096a0:	2300      	movs	r3, #0
 80096a2:	b510      	push	{r4, lr}
 80096a4:	4604      	mov	r4, r0
 80096a6:	e9c0 3300 	strd	r3, r3, [r0]
 80096aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ae:	6083      	str	r3, [r0, #8]
 80096b0:	8181      	strh	r1, [r0, #12]
 80096b2:	6643      	str	r3, [r0, #100]	; 0x64
 80096b4:	81c2      	strh	r2, [r0, #14]
 80096b6:	6183      	str	r3, [r0, #24]
 80096b8:	4619      	mov	r1, r3
 80096ba:	2208      	movs	r2, #8
 80096bc:	305c      	adds	r0, #92	; 0x5c
 80096be:	f7fe f9cd 	bl	8007a5c <memset>
 80096c2:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <std+0x38>)
 80096c4:	6263      	str	r3, [r4, #36]	; 0x24
 80096c6:	4b05      	ldr	r3, [pc, #20]	; (80096dc <std+0x3c>)
 80096c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80096ca:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <std+0x40>)
 80096cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <std+0x44>)
 80096d0:	6224      	str	r4, [r4, #32]
 80096d2:	6323      	str	r3, [r4, #48]	; 0x30
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	bf00      	nop
 80096d8:	0800a639 	.word	0x0800a639
 80096dc:	0800a65b 	.word	0x0800a65b
 80096e0:	0800a693 	.word	0x0800a693
 80096e4:	0800a6b7 	.word	0x0800a6b7

080096e8 <_cleanup_r>:
 80096e8:	4901      	ldr	r1, [pc, #4]	; (80096f0 <_cleanup_r+0x8>)
 80096ea:	f000 b8af 	b.w	800984c <_fwalk_reent>
 80096ee:	bf00      	nop
 80096f0:	08009629 	.word	0x08009629

080096f4 <__sfmoreglue>:
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	2268      	movs	r2, #104	; 0x68
 80096f8:	1e4d      	subs	r5, r1, #1
 80096fa:	4355      	muls	r5, r2
 80096fc:	460e      	mov	r6, r1
 80096fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009702:	f7fe fa1f 	bl	8007b44 <_malloc_r>
 8009706:	4604      	mov	r4, r0
 8009708:	b140      	cbz	r0, 800971c <__sfmoreglue+0x28>
 800970a:	2100      	movs	r1, #0
 800970c:	e9c0 1600 	strd	r1, r6, [r0]
 8009710:	300c      	adds	r0, #12
 8009712:	60a0      	str	r0, [r4, #8]
 8009714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009718:	f7fe f9a0 	bl	8007a5c <memset>
 800971c:	4620      	mov	r0, r4
 800971e:	bd70      	pop	{r4, r5, r6, pc}

08009720 <__sfp_lock_acquire>:
 8009720:	4801      	ldr	r0, [pc, #4]	; (8009728 <__sfp_lock_acquire+0x8>)
 8009722:	f000 b8b8 	b.w	8009896 <__retarget_lock_acquire_recursive>
 8009726:	bf00      	nop
 8009728:	20002535 	.word	0x20002535

0800972c <__sfp_lock_release>:
 800972c:	4801      	ldr	r0, [pc, #4]	; (8009734 <__sfp_lock_release+0x8>)
 800972e:	f000 b8b3 	b.w	8009898 <__retarget_lock_release_recursive>
 8009732:	bf00      	nop
 8009734:	20002535 	.word	0x20002535

08009738 <__sinit_lock_acquire>:
 8009738:	4801      	ldr	r0, [pc, #4]	; (8009740 <__sinit_lock_acquire+0x8>)
 800973a:	f000 b8ac 	b.w	8009896 <__retarget_lock_acquire_recursive>
 800973e:	bf00      	nop
 8009740:	20002536 	.word	0x20002536

08009744 <__sinit_lock_release>:
 8009744:	4801      	ldr	r0, [pc, #4]	; (800974c <__sinit_lock_release+0x8>)
 8009746:	f000 b8a7 	b.w	8009898 <__retarget_lock_release_recursive>
 800974a:	bf00      	nop
 800974c:	20002536 	.word	0x20002536

08009750 <__sinit>:
 8009750:	b510      	push	{r4, lr}
 8009752:	4604      	mov	r4, r0
 8009754:	f7ff fff0 	bl	8009738 <__sinit_lock_acquire>
 8009758:	69a3      	ldr	r3, [r4, #24]
 800975a:	b11b      	cbz	r3, 8009764 <__sinit+0x14>
 800975c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009760:	f7ff bff0 	b.w	8009744 <__sinit_lock_release>
 8009764:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009768:	6523      	str	r3, [r4, #80]	; 0x50
 800976a:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <__sinit+0x68>)
 800976c:	4a13      	ldr	r2, [pc, #76]	; (80097bc <__sinit+0x6c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	62a2      	str	r2, [r4, #40]	; 0x28
 8009772:	42a3      	cmp	r3, r4
 8009774:	bf04      	itt	eq
 8009776:	2301      	moveq	r3, #1
 8009778:	61a3      	streq	r3, [r4, #24]
 800977a:	4620      	mov	r0, r4
 800977c:	f000 f820 	bl	80097c0 <__sfp>
 8009780:	6060      	str	r0, [r4, #4]
 8009782:	4620      	mov	r0, r4
 8009784:	f000 f81c 	bl	80097c0 <__sfp>
 8009788:	60a0      	str	r0, [r4, #8]
 800978a:	4620      	mov	r0, r4
 800978c:	f000 f818 	bl	80097c0 <__sfp>
 8009790:	2200      	movs	r2, #0
 8009792:	60e0      	str	r0, [r4, #12]
 8009794:	2104      	movs	r1, #4
 8009796:	6860      	ldr	r0, [r4, #4]
 8009798:	f7ff ff82 	bl	80096a0 <std>
 800979c:	68a0      	ldr	r0, [r4, #8]
 800979e:	2201      	movs	r2, #1
 80097a0:	2109      	movs	r1, #9
 80097a2:	f7ff ff7d 	bl	80096a0 <std>
 80097a6:	68e0      	ldr	r0, [r4, #12]
 80097a8:	2202      	movs	r2, #2
 80097aa:	2112      	movs	r1, #18
 80097ac:	f7ff ff78 	bl	80096a0 <std>
 80097b0:	2301      	movs	r3, #1
 80097b2:	61a3      	str	r3, [r4, #24]
 80097b4:	e7d2      	b.n	800975c <__sinit+0xc>
 80097b6:	bf00      	nop
 80097b8:	0800b72c 	.word	0x0800b72c
 80097bc:	080096e9 	.word	0x080096e9

080097c0 <__sfp>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	4607      	mov	r7, r0
 80097c4:	f7ff ffac 	bl	8009720 <__sfp_lock_acquire>
 80097c8:	4b1e      	ldr	r3, [pc, #120]	; (8009844 <__sfp+0x84>)
 80097ca:	681e      	ldr	r6, [r3, #0]
 80097cc:	69b3      	ldr	r3, [r6, #24]
 80097ce:	b913      	cbnz	r3, 80097d6 <__sfp+0x16>
 80097d0:	4630      	mov	r0, r6
 80097d2:	f7ff ffbd 	bl	8009750 <__sinit>
 80097d6:	3648      	adds	r6, #72	; 0x48
 80097d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097dc:	3b01      	subs	r3, #1
 80097de:	d503      	bpl.n	80097e8 <__sfp+0x28>
 80097e0:	6833      	ldr	r3, [r6, #0]
 80097e2:	b30b      	cbz	r3, 8009828 <__sfp+0x68>
 80097e4:	6836      	ldr	r6, [r6, #0]
 80097e6:	e7f7      	b.n	80097d8 <__sfp+0x18>
 80097e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097ec:	b9d5      	cbnz	r5, 8009824 <__sfp+0x64>
 80097ee:	4b16      	ldr	r3, [pc, #88]	; (8009848 <__sfp+0x88>)
 80097f0:	60e3      	str	r3, [r4, #12]
 80097f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097f6:	6665      	str	r5, [r4, #100]	; 0x64
 80097f8:	f000 f84c 	bl	8009894 <__retarget_lock_init_recursive>
 80097fc:	f7ff ff96 	bl	800972c <__sfp_lock_release>
 8009800:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009804:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009808:	6025      	str	r5, [r4, #0]
 800980a:	61a5      	str	r5, [r4, #24]
 800980c:	2208      	movs	r2, #8
 800980e:	4629      	mov	r1, r5
 8009810:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009814:	f7fe f922 	bl	8007a5c <memset>
 8009818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800981c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009820:	4620      	mov	r0, r4
 8009822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009824:	3468      	adds	r4, #104	; 0x68
 8009826:	e7d9      	b.n	80097dc <__sfp+0x1c>
 8009828:	2104      	movs	r1, #4
 800982a:	4638      	mov	r0, r7
 800982c:	f7ff ff62 	bl	80096f4 <__sfmoreglue>
 8009830:	4604      	mov	r4, r0
 8009832:	6030      	str	r0, [r6, #0]
 8009834:	2800      	cmp	r0, #0
 8009836:	d1d5      	bne.n	80097e4 <__sfp+0x24>
 8009838:	f7ff ff78 	bl	800972c <__sfp_lock_release>
 800983c:	230c      	movs	r3, #12
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	e7ee      	b.n	8009820 <__sfp+0x60>
 8009842:	bf00      	nop
 8009844:	0800b72c 	.word	0x0800b72c
 8009848:	ffff0001 	.word	0xffff0001

0800984c <_fwalk_reent>:
 800984c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009850:	4606      	mov	r6, r0
 8009852:	4688      	mov	r8, r1
 8009854:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009858:	2700      	movs	r7, #0
 800985a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800985e:	f1b9 0901 	subs.w	r9, r9, #1
 8009862:	d505      	bpl.n	8009870 <_fwalk_reent+0x24>
 8009864:	6824      	ldr	r4, [r4, #0]
 8009866:	2c00      	cmp	r4, #0
 8009868:	d1f7      	bne.n	800985a <_fwalk_reent+0xe>
 800986a:	4638      	mov	r0, r7
 800986c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009870:	89ab      	ldrh	r3, [r5, #12]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d907      	bls.n	8009886 <_fwalk_reent+0x3a>
 8009876:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800987a:	3301      	adds	r3, #1
 800987c:	d003      	beq.n	8009886 <_fwalk_reent+0x3a>
 800987e:	4629      	mov	r1, r5
 8009880:	4630      	mov	r0, r6
 8009882:	47c0      	blx	r8
 8009884:	4307      	orrs	r7, r0
 8009886:	3568      	adds	r5, #104	; 0x68
 8009888:	e7e9      	b.n	800985e <_fwalk_reent+0x12>
	...

0800988c <_localeconv_r>:
 800988c:	4800      	ldr	r0, [pc, #0]	; (8009890 <_localeconv_r+0x4>)
 800988e:	4770      	bx	lr
 8009890:	20000178 	.word	0x20000178

08009894 <__retarget_lock_init_recursive>:
 8009894:	4770      	bx	lr

08009896 <__retarget_lock_acquire_recursive>:
 8009896:	4770      	bx	lr

08009898 <__retarget_lock_release_recursive>:
 8009898:	4770      	bx	lr

0800989a <__swhatbuf_r>:
 800989a:	b570      	push	{r4, r5, r6, lr}
 800989c:	460e      	mov	r6, r1
 800989e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a2:	2900      	cmp	r1, #0
 80098a4:	b096      	sub	sp, #88	; 0x58
 80098a6:	4614      	mov	r4, r2
 80098a8:	461d      	mov	r5, r3
 80098aa:	da08      	bge.n	80098be <__swhatbuf_r+0x24>
 80098ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	602a      	str	r2, [r5, #0]
 80098b4:	061a      	lsls	r2, r3, #24
 80098b6:	d410      	bmi.n	80098da <__swhatbuf_r+0x40>
 80098b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098bc:	e00e      	b.n	80098dc <__swhatbuf_r+0x42>
 80098be:	466a      	mov	r2, sp
 80098c0:	f000 ff50 	bl	800a764 <_fstat_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	dbf1      	blt.n	80098ac <__swhatbuf_r+0x12>
 80098c8:	9a01      	ldr	r2, [sp, #4]
 80098ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098d2:	425a      	negs	r2, r3
 80098d4:	415a      	adcs	r2, r3
 80098d6:	602a      	str	r2, [r5, #0]
 80098d8:	e7ee      	b.n	80098b8 <__swhatbuf_r+0x1e>
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	2000      	movs	r0, #0
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	b016      	add	sp, #88	; 0x58
 80098e2:	bd70      	pop	{r4, r5, r6, pc}

080098e4 <__smakebuf_r>:
 80098e4:	898b      	ldrh	r3, [r1, #12]
 80098e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098e8:	079d      	lsls	r5, r3, #30
 80098ea:	4606      	mov	r6, r0
 80098ec:	460c      	mov	r4, r1
 80098ee:	d507      	bpl.n	8009900 <__smakebuf_r+0x1c>
 80098f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	2301      	movs	r3, #1
 80098fa:	6163      	str	r3, [r4, #20]
 80098fc:	b002      	add	sp, #8
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	ab01      	add	r3, sp, #4
 8009902:	466a      	mov	r2, sp
 8009904:	f7ff ffc9 	bl	800989a <__swhatbuf_r>
 8009908:	9900      	ldr	r1, [sp, #0]
 800990a:	4605      	mov	r5, r0
 800990c:	4630      	mov	r0, r6
 800990e:	f7fe f919 	bl	8007b44 <_malloc_r>
 8009912:	b948      	cbnz	r0, 8009928 <__smakebuf_r+0x44>
 8009914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009918:	059a      	lsls	r2, r3, #22
 800991a:	d4ef      	bmi.n	80098fc <__smakebuf_r+0x18>
 800991c:	f023 0303 	bic.w	r3, r3, #3
 8009920:	f043 0302 	orr.w	r3, r3, #2
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	e7e3      	b.n	80098f0 <__smakebuf_r+0xc>
 8009928:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <__smakebuf_r+0x7c>)
 800992a:	62b3      	str	r3, [r6, #40]	; 0x28
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	6020      	str	r0, [r4, #0]
 8009930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	9b00      	ldr	r3, [sp, #0]
 8009938:	6163      	str	r3, [r4, #20]
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	6120      	str	r0, [r4, #16]
 800993e:	b15b      	cbz	r3, 8009958 <__smakebuf_r+0x74>
 8009940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009944:	4630      	mov	r0, r6
 8009946:	f000 ff1f 	bl	800a788 <_isatty_r>
 800994a:	b128      	cbz	r0, 8009958 <__smakebuf_r+0x74>
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f023 0303 	bic.w	r3, r3, #3
 8009952:	f043 0301 	orr.w	r3, r3, #1
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	89a0      	ldrh	r0, [r4, #12]
 800995a:	4305      	orrs	r5, r0
 800995c:	81a5      	strh	r5, [r4, #12]
 800995e:	e7cd      	b.n	80098fc <__smakebuf_r+0x18>
 8009960:	080096e9 	.word	0x080096e9

08009964 <memcpy>:
 8009964:	440a      	add	r2, r1
 8009966:	4291      	cmp	r1, r2
 8009968:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800996c:	d100      	bne.n	8009970 <memcpy+0xc>
 800996e:	4770      	bx	lr
 8009970:	b510      	push	{r4, lr}
 8009972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800997a:	4291      	cmp	r1, r2
 800997c:	d1f9      	bne.n	8009972 <memcpy+0xe>
 800997e:	bd10      	pop	{r4, pc}

08009980 <__malloc_lock>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__malloc_lock+0x8>)
 8009982:	f7ff bf88 	b.w	8009896 <__retarget_lock_acquire_recursive>
 8009986:	bf00      	nop
 8009988:	20002534 	.word	0x20002534

0800998c <__malloc_unlock>:
 800998c:	4801      	ldr	r0, [pc, #4]	; (8009994 <__malloc_unlock+0x8>)
 800998e:	f7ff bf83 	b.w	8009898 <__retarget_lock_release_recursive>
 8009992:	bf00      	nop
 8009994:	20002534 	.word	0x20002534

08009998 <_Balloc>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800999c:	4604      	mov	r4, r0
 800999e:	460d      	mov	r5, r1
 80099a0:	b976      	cbnz	r6, 80099c0 <_Balloc+0x28>
 80099a2:	2010      	movs	r0, #16
 80099a4:	f7fe f84a 	bl	8007a3c <malloc>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6260      	str	r0, [r4, #36]	; 0x24
 80099ac:	b920      	cbnz	r0, 80099b8 <_Balloc+0x20>
 80099ae:	4b18      	ldr	r3, [pc, #96]	; (8009a10 <_Balloc+0x78>)
 80099b0:	4818      	ldr	r0, [pc, #96]	; (8009a14 <_Balloc+0x7c>)
 80099b2:	2166      	movs	r1, #102	; 0x66
 80099b4:	f000 fe96 	bl	800a6e4 <__assert_func>
 80099b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099bc:	6006      	str	r6, [r0, #0]
 80099be:	60c6      	str	r6, [r0, #12]
 80099c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099c2:	68f3      	ldr	r3, [r6, #12]
 80099c4:	b183      	cbz	r3, 80099e8 <_Balloc+0x50>
 80099c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099ce:	b9b8      	cbnz	r0, 8009a00 <_Balloc+0x68>
 80099d0:	2101      	movs	r1, #1
 80099d2:	fa01 f605 	lsl.w	r6, r1, r5
 80099d6:	1d72      	adds	r2, r6, #5
 80099d8:	0092      	lsls	r2, r2, #2
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fb60 	bl	800a0a0 <_calloc_r>
 80099e0:	b160      	cbz	r0, 80099fc <_Balloc+0x64>
 80099e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099e6:	e00e      	b.n	8009a06 <_Balloc+0x6e>
 80099e8:	2221      	movs	r2, #33	; 0x21
 80099ea:	2104      	movs	r1, #4
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 fb57 	bl	800a0a0 <_calloc_r>
 80099f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099f4:	60f0      	str	r0, [r6, #12]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e4      	bne.n	80099c6 <_Balloc+0x2e>
 80099fc:	2000      	movs	r0, #0
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	6802      	ldr	r2, [r0, #0]
 8009a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a06:	2300      	movs	r3, #0
 8009a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a0c:	e7f7      	b.n	80099fe <_Balloc+0x66>
 8009a0e:	bf00      	nop
 8009a10:	0800b771 	.word	0x0800b771
 8009a14:	0800b854 	.word	0x0800b854

08009a18 <_Bfree>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	b976      	cbnz	r6, 8009a40 <_Bfree+0x28>
 8009a22:	2010      	movs	r0, #16
 8009a24:	f7fe f80a 	bl	8007a3c <malloc>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	6268      	str	r0, [r5, #36]	; 0x24
 8009a2c:	b920      	cbnz	r0, 8009a38 <_Bfree+0x20>
 8009a2e:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <_Bfree+0x3c>)
 8009a30:	4809      	ldr	r0, [pc, #36]	; (8009a58 <_Bfree+0x40>)
 8009a32:	218a      	movs	r1, #138	; 0x8a
 8009a34:	f000 fe56 	bl	800a6e4 <__assert_func>
 8009a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a3c:	6006      	str	r6, [r0, #0]
 8009a3e:	60c6      	str	r6, [r0, #12]
 8009a40:	b13c      	cbz	r4, 8009a52 <_Bfree+0x3a>
 8009a42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a44:	6862      	ldr	r2, [r4, #4]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a4c:	6021      	str	r1, [r4, #0]
 8009a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a52:	bd70      	pop	{r4, r5, r6, pc}
 8009a54:	0800b771 	.word	0x0800b771
 8009a58:	0800b854 	.word	0x0800b854

08009a5c <__multadd>:
 8009a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a60:	690d      	ldr	r5, [r1, #16]
 8009a62:	4607      	mov	r7, r0
 8009a64:	460c      	mov	r4, r1
 8009a66:	461e      	mov	r6, r3
 8009a68:	f101 0c14 	add.w	ip, r1, #20
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a72:	b299      	uxth	r1, r3
 8009a74:	fb02 6101 	mla	r1, r2, r1, r6
 8009a78:	0c1e      	lsrs	r6, r3, #16
 8009a7a:	0c0b      	lsrs	r3, r1, #16
 8009a7c:	fb02 3306 	mla	r3, r2, r6, r3
 8009a80:	b289      	uxth	r1, r1
 8009a82:	3001      	adds	r0, #1
 8009a84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a88:	4285      	cmp	r5, r0
 8009a8a:	f84c 1b04 	str.w	r1, [ip], #4
 8009a8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a92:	dcec      	bgt.n	8009a6e <__multadd+0x12>
 8009a94:	b30e      	cbz	r6, 8009ada <__multadd+0x7e>
 8009a96:	68a3      	ldr	r3, [r4, #8]
 8009a98:	42ab      	cmp	r3, r5
 8009a9a:	dc19      	bgt.n	8009ad0 <__multadd+0x74>
 8009a9c:	6861      	ldr	r1, [r4, #4]
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	3101      	adds	r1, #1
 8009aa2:	f7ff ff79 	bl	8009998 <_Balloc>
 8009aa6:	4680      	mov	r8, r0
 8009aa8:	b928      	cbnz	r0, 8009ab6 <__multadd+0x5a>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	4b0c      	ldr	r3, [pc, #48]	; (8009ae0 <__multadd+0x84>)
 8009aae:	480d      	ldr	r0, [pc, #52]	; (8009ae4 <__multadd+0x88>)
 8009ab0:	21b5      	movs	r1, #181	; 0xb5
 8009ab2:	f000 fe17 	bl	800a6e4 <__assert_func>
 8009ab6:	6922      	ldr	r2, [r4, #16]
 8009ab8:	3202      	adds	r2, #2
 8009aba:	f104 010c 	add.w	r1, r4, #12
 8009abe:	0092      	lsls	r2, r2, #2
 8009ac0:	300c      	adds	r0, #12
 8009ac2:	f7ff ff4f 	bl	8009964 <memcpy>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f7ff ffa5 	bl	8009a18 <_Bfree>
 8009ace:	4644      	mov	r4, r8
 8009ad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ad4:	3501      	adds	r5, #1
 8009ad6:	615e      	str	r6, [r3, #20]
 8009ad8:	6125      	str	r5, [r4, #16]
 8009ada:	4620      	mov	r0, r4
 8009adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae0:	0800b7e3 	.word	0x0800b7e3
 8009ae4:	0800b854 	.word	0x0800b854

08009ae8 <__hi0bits>:
 8009ae8:	0c03      	lsrs	r3, r0, #16
 8009aea:	041b      	lsls	r3, r3, #16
 8009aec:	b9d3      	cbnz	r3, 8009b24 <__hi0bits+0x3c>
 8009aee:	0400      	lsls	r0, r0, #16
 8009af0:	2310      	movs	r3, #16
 8009af2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009af6:	bf04      	itt	eq
 8009af8:	0200      	lsleq	r0, r0, #8
 8009afa:	3308      	addeq	r3, #8
 8009afc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b00:	bf04      	itt	eq
 8009b02:	0100      	lsleq	r0, r0, #4
 8009b04:	3304      	addeq	r3, #4
 8009b06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b0a:	bf04      	itt	eq
 8009b0c:	0080      	lsleq	r0, r0, #2
 8009b0e:	3302      	addeq	r3, #2
 8009b10:	2800      	cmp	r0, #0
 8009b12:	db05      	blt.n	8009b20 <__hi0bits+0x38>
 8009b14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b18:	f103 0301 	add.w	r3, r3, #1
 8009b1c:	bf08      	it	eq
 8009b1e:	2320      	moveq	r3, #32
 8009b20:	4618      	mov	r0, r3
 8009b22:	4770      	bx	lr
 8009b24:	2300      	movs	r3, #0
 8009b26:	e7e4      	b.n	8009af2 <__hi0bits+0xa>

08009b28 <__lo0bits>:
 8009b28:	6803      	ldr	r3, [r0, #0]
 8009b2a:	f013 0207 	ands.w	r2, r3, #7
 8009b2e:	4601      	mov	r1, r0
 8009b30:	d00b      	beq.n	8009b4a <__lo0bits+0x22>
 8009b32:	07da      	lsls	r2, r3, #31
 8009b34:	d423      	bmi.n	8009b7e <__lo0bits+0x56>
 8009b36:	0798      	lsls	r0, r3, #30
 8009b38:	bf49      	itett	mi
 8009b3a:	085b      	lsrmi	r3, r3, #1
 8009b3c:	089b      	lsrpl	r3, r3, #2
 8009b3e:	2001      	movmi	r0, #1
 8009b40:	600b      	strmi	r3, [r1, #0]
 8009b42:	bf5c      	itt	pl
 8009b44:	600b      	strpl	r3, [r1, #0]
 8009b46:	2002      	movpl	r0, #2
 8009b48:	4770      	bx	lr
 8009b4a:	b298      	uxth	r0, r3
 8009b4c:	b9a8      	cbnz	r0, 8009b7a <__lo0bits+0x52>
 8009b4e:	0c1b      	lsrs	r3, r3, #16
 8009b50:	2010      	movs	r0, #16
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	b90a      	cbnz	r2, 8009b5a <__lo0bits+0x32>
 8009b56:	3008      	adds	r0, #8
 8009b58:	0a1b      	lsrs	r3, r3, #8
 8009b5a:	071a      	lsls	r2, r3, #28
 8009b5c:	bf04      	itt	eq
 8009b5e:	091b      	lsreq	r3, r3, #4
 8009b60:	3004      	addeq	r0, #4
 8009b62:	079a      	lsls	r2, r3, #30
 8009b64:	bf04      	itt	eq
 8009b66:	089b      	lsreq	r3, r3, #2
 8009b68:	3002      	addeq	r0, #2
 8009b6a:	07da      	lsls	r2, r3, #31
 8009b6c:	d403      	bmi.n	8009b76 <__lo0bits+0x4e>
 8009b6e:	085b      	lsrs	r3, r3, #1
 8009b70:	f100 0001 	add.w	r0, r0, #1
 8009b74:	d005      	beq.n	8009b82 <__lo0bits+0x5a>
 8009b76:	600b      	str	r3, [r1, #0]
 8009b78:	4770      	bx	lr
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	e7e9      	b.n	8009b52 <__lo0bits+0x2a>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	4770      	bx	lr
 8009b82:	2020      	movs	r0, #32
 8009b84:	4770      	bx	lr
	...

08009b88 <__i2b>:
 8009b88:	b510      	push	{r4, lr}
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	2101      	movs	r1, #1
 8009b8e:	f7ff ff03 	bl	8009998 <_Balloc>
 8009b92:	4602      	mov	r2, r0
 8009b94:	b928      	cbnz	r0, 8009ba2 <__i2b+0x1a>
 8009b96:	4b05      	ldr	r3, [pc, #20]	; (8009bac <__i2b+0x24>)
 8009b98:	4805      	ldr	r0, [pc, #20]	; (8009bb0 <__i2b+0x28>)
 8009b9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b9e:	f000 fda1 	bl	800a6e4 <__assert_func>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	6144      	str	r4, [r0, #20]
 8009ba6:	6103      	str	r3, [r0, #16]
 8009ba8:	bd10      	pop	{r4, pc}
 8009baa:	bf00      	nop
 8009bac:	0800b7e3 	.word	0x0800b7e3
 8009bb0:	0800b854 	.word	0x0800b854

08009bb4 <__multiply>:
 8009bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb8:	4691      	mov	r9, r2
 8009bba:	690a      	ldr	r2, [r1, #16]
 8009bbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	bfb8      	it	lt
 8009bc4:	460b      	movlt	r3, r1
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	bfbc      	itt	lt
 8009bca:	464c      	movlt	r4, r9
 8009bcc:	4699      	movlt	r9, r3
 8009bce:	6927      	ldr	r7, [r4, #16]
 8009bd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bd4:	68a3      	ldr	r3, [r4, #8]
 8009bd6:	6861      	ldr	r1, [r4, #4]
 8009bd8:	eb07 060a 	add.w	r6, r7, sl
 8009bdc:	42b3      	cmp	r3, r6
 8009bde:	b085      	sub	sp, #20
 8009be0:	bfb8      	it	lt
 8009be2:	3101      	addlt	r1, #1
 8009be4:	f7ff fed8 	bl	8009998 <_Balloc>
 8009be8:	b930      	cbnz	r0, 8009bf8 <__multiply+0x44>
 8009bea:	4602      	mov	r2, r0
 8009bec:	4b44      	ldr	r3, [pc, #272]	; (8009d00 <__multiply+0x14c>)
 8009bee:	4845      	ldr	r0, [pc, #276]	; (8009d04 <__multiply+0x150>)
 8009bf0:	f240 115d 	movw	r1, #349	; 0x15d
 8009bf4:	f000 fd76 	bl	800a6e4 <__assert_func>
 8009bf8:	f100 0514 	add.w	r5, r0, #20
 8009bfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c00:	462b      	mov	r3, r5
 8009c02:	2200      	movs	r2, #0
 8009c04:	4543      	cmp	r3, r8
 8009c06:	d321      	bcc.n	8009c4c <__multiply+0x98>
 8009c08:	f104 0314 	add.w	r3, r4, #20
 8009c0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c10:	f109 0314 	add.w	r3, r9, #20
 8009c14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c18:	9202      	str	r2, [sp, #8]
 8009c1a:	1b3a      	subs	r2, r7, r4
 8009c1c:	3a15      	subs	r2, #21
 8009c1e:	f022 0203 	bic.w	r2, r2, #3
 8009c22:	3204      	adds	r2, #4
 8009c24:	f104 0115 	add.w	r1, r4, #21
 8009c28:	428f      	cmp	r7, r1
 8009c2a:	bf38      	it	cc
 8009c2c:	2204      	movcc	r2, #4
 8009c2e:	9201      	str	r2, [sp, #4]
 8009c30:	9a02      	ldr	r2, [sp, #8]
 8009c32:	9303      	str	r3, [sp, #12]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d80c      	bhi.n	8009c52 <__multiply+0x9e>
 8009c38:	2e00      	cmp	r6, #0
 8009c3a:	dd03      	ble.n	8009c44 <__multiply+0x90>
 8009c3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d05a      	beq.n	8009cfa <__multiply+0x146>
 8009c44:	6106      	str	r6, [r0, #16]
 8009c46:	b005      	add	sp, #20
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4c:	f843 2b04 	str.w	r2, [r3], #4
 8009c50:	e7d8      	b.n	8009c04 <__multiply+0x50>
 8009c52:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c56:	f1ba 0f00 	cmp.w	sl, #0
 8009c5a:	d024      	beq.n	8009ca6 <__multiply+0xf2>
 8009c5c:	f104 0e14 	add.w	lr, r4, #20
 8009c60:	46a9      	mov	r9, r5
 8009c62:	f04f 0c00 	mov.w	ip, #0
 8009c66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c6a:	f8d9 1000 	ldr.w	r1, [r9]
 8009c6e:	fa1f fb82 	uxth.w	fp, r2
 8009c72:	b289      	uxth	r1, r1
 8009c74:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c80:	4461      	add	r1, ip
 8009c82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c86:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c8e:	b289      	uxth	r1, r1
 8009c90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c94:	4577      	cmp	r7, lr
 8009c96:	f849 1b04 	str.w	r1, [r9], #4
 8009c9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c9e:	d8e2      	bhi.n	8009c66 <__multiply+0xb2>
 8009ca0:	9a01      	ldr	r2, [sp, #4]
 8009ca2:	f845 c002 	str.w	ip, [r5, r2]
 8009ca6:	9a03      	ldr	r2, [sp, #12]
 8009ca8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cac:	3304      	adds	r3, #4
 8009cae:	f1b9 0f00 	cmp.w	r9, #0
 8009cb2:	d020      	beq.n	8009cf6 <__multiply+0x142>
 8009cb4:	6829      	ldr	r1, [r5, #0]
 8009cb6:	f104 0c14 	add.w	ip, r4, #20
 8009cba:	46ae      	mov	lr, r5
 8009cbc:	f04f 0a00 	mov.w	sl, #0
 8009cc0:	f8bc b000 	ldrh.w	fp, [ip]
 8009cc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cc8:	fb09 220b 	mla	r2, r9, fp, r2
 8009ccc:	4492      	add	sl, r2
 8009cce:	b289      	uxth	r1, r1
 8009cd0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cd4:	f84e 1b04 	str.w	r1, [lr], #4
 8009cd8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009cdc:	f8be 1000 	ldrh.w	r1, [lr]
 8009ce0:	0c12      	lsrs	r2, r2, #16
 8009ce2:	fb09 1102 	mla	r1, r9, r2, r1
 8009ce6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009cea:	4567      	cmp	r7, ip
 8009cec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009cf0:	d8e6      	bhi.n	8009cc0 <__multiply+0x10c>
 8009cf2:	9a01      	ldr	r2, [sp, #4]
 8009cf4:	50a9      	str	r1, [r5, r2]
 8009cf6:	3504      	adds	r5, #4
 8009cf8:	e79a      	b.n	8009c30 <__multiply+0x7c>
 8009cfa:	3e01      	subs	r6, #1
 8009cfc:	e79c      	b.n	8009c38 <__multiply+0x84>
 8009cfe:	bf00      	nop
 8009d00:	0800b7e3 	.word	0x0800b7e3
 8009d04:	0800b854 	.word	0x0800b854

08009d08 <__pow5mult>:
 8009d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	4615      	mov	r5, r2
 8009d0e:	f012 0203 	ands.w	r2, r2, #3
 8009d12:	4606      	mov	r6, r0
 8009d14:	460f      	mov	r7, r1
 8009d16:	d007      	beq.n	8009d28 <__pow5mult+0x20>
 8009d18:	4c25      	ldr	r4, [pc, #148]	; (8009db0 <__pow5mult+0xa8>)
 8009d1a:	3a01      	subs	r2, #1
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d22:	f7ff fe9b 	bl	8009a5c <__multadd>
 8009d26:	4607      	mov	r7, r0
 8009d28:	10ad      	asrs	r5, r5, #2
 8009d2a:	d03d      	beq.n	8009da8 <__pow5mult+0xa0>
 8009d2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d2e:	b97c      	cbnz	r4, 8009d50 <__pow5mult+0x48>
 8009d30:	2010      	movs	r0, #16
 8009d32:	f7fd fe83 	bl	8007a3c <malloc>
 8009d36:	4602      	mov	r2, r0
 8009d38:	6270      	str	r0, [r6, #36]	; 0x24
 8009d3a:	b928      	cbnz	r0, 8009d48 <__pow5mult+0x40>
 8009d3c:	4b1d      	ldr	r3, [pc, #116]	; (8009db4 <__pow5mult+0xac>)
 8009d3e:	481e      	ldr	r0, [pc, #120]	; (8009db8 <__pow5mult+0xb0>)
 8009d40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d44:	f000 fcce 	bl	800a6e4 <__assert_func>
 8009d48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d4c:	6004      	str	r4, [r0, #0]
 8009d4e:	60c4      	str	r4, [r0, #12]
 8009d50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d58:	b94c      	cbnz	r4, 8009d6e <__pow5mult+0x66>
 8009d5a:	f240 2171 	movw	r1, #625	; 0x271
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7ff ff12 	bl	8009b88 <__i2b>
 8009d64:	2300      	movs	r3, #0
 8009d66:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	6003      	str	r3, [r0, #0]
 8009d6e:	f04f 0900 	mov.w	r9, #0
 8009d72:	07eb      	lsls	r3, r5, #31
 8009d74:	d50a      	bpl.n	8009d8c <__pow5mult+0x84>
 8009d76:	4639      	mov	r1, r7
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7ff ff1a 	bl	8009bb4 <__multiply>
 8009d80:	4639      	mov	r1, r7
 8009d82:	4680      	mov	r8, r0
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff fe47 	bl	8009a18 <_Bfree>
 8009d8a:	4647      	mov	r7, r8
 8009d8c:	106d      	asrs	r5, r5, #1
 8009d8e:	d00b      	beq.n	8009da8 <__pow5mult+0xa0>
 8009d90:	6820      	ldr	r0, [r4, #0]
 8009d92:	b938      	cbnz	r0, 8009da4 <__pow5mult+0x9c>
 8009d94:	4622      	mov	r2, r4
 8009d96:	4621      	mov	r1, r4
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7ff ff0b 	bl	8009bb4 <__multiply>
 8009d9e:	6020      	str	r0, [r4, #0]
 8009da0:	f8c0 9000 	str.w	r9, [r0]
 8009da4:	4604      	mov	r4, r0
 8009da6:	e7e4      	b.n	8009d72 <__pow5mult+0x6a>
 8009da8:	4638      	mov	r0, r7
 8009daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dae:	bf00      	nop
 8009db0:	0800b9a0 	.word	0x0800b9a0
 8009db4:	0800b771 	.word	0x0800b771
 8009db8:	0800b854 	.word	0x0800b854

08009dbc <__lshift>:
 8009dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	6849      	ldr	r1, [r1, #4]
 8009dc4:	6923      	ldr	r3, [r4, #16]
 8009dc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	4607      	mov	r7, r0
 8009dce:	4691      	mov	r9, r2
 8009dd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dd4:	f108 0601 	add.w	r6, r8, #1
 8009dd8:	42b3      	cmp	r3, r6
 8009dda:	db0b      	blt.n	8009df4 <__lshift+0x38>
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f7ff fddb 	bl	8009998 <_Balloc>
 8009de2:	4605      	mov	r5, r0
 8009de4:	b948      	cbnz	r0, 8009dfa <__lshift+0x3e>
 8009de6:	4602      	mov	r2, r0
 8009de8:	4b2a      	ldr	r3, [pc, #168]	; (8009e94 <__lshift+0xd8>)
 8009dea:	482b      	ldr	r0, [pc, #172]	; (8009e98 <__lshift+0xdc>)
 8009dec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009df0:	f000 fc78 	bl	800a6e4 <__assert_func>
 8009df4:	3101      	adds	r1, #1
 8009df6:	005b      	lsls	r3, r3, #1
 8009df8:	e7ee      	b.n	8009dd8 <__lshift+0x1c>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f100 0114 	add.w	r1, r0, #20
 8009e00:	f100 0210 	add.w	r2, r0, #16
 8009e04:	4618      	mov	r0, r3
 8009e06:	4553      	cmp	r3, sl
 8009e08:	db37      	blt.n	8009e7a <__lshift+0xbe>
 8009e0a:	6920      	ldr	r0, [r4, #16]
 8009e0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e10:	f104 0314 	add.w	r3, r4, #20
 8009e14:	f019 091f 	ands.w	r9, r9, #31
 8009e18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e20:	d02f      	beq.n	8009e82 <__lshift+0xc6>
 8009e22:	f1c9 0e20 	rsb	lr, r9, #32
 8009e26:	468a      	mov	sl, r1
 8009e28:	f04f 0c00 	mov.w	ip, #0
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	fa02 f209 	lsl.w	r2, r2, r9
 8009e32:	ea42 020c 	orr.w	r2, r2, ip
 8009e36:	f84a 2b04 	str.w	r2, [sl], #4
 8009e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e3e:	4298      	cmp	r0, r3
 8009e40:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e44:	d8f2      	bhi.n	8009e2c <__lshift+0x70>
 8009e46:	1b03      	subs	r3, r0, r4
 8009e48:	3b15      	subs	r3, #21
 8009e4a:	f023 0303 	bic.w	r3, r3, #3
 8009e4e:	3304      	adds	r3, #4
 8009e50:	f104 0215 	add.w	r2, r4, #21
 8009e54:	4290      	cmp	r0, r2
 8009e56:	bf38      	it	cc
 8009e58:	2304      	movcc	r3, #4
 8009e5a:	f841 c003 	str.w	ip, [r1, r3]
 8009e5e:	f1bc 0f00 	cmp.w	ip, #0
 8009e62:	d001      	beq.n	8009e68 <__lshift+0xac>
 8009e64:	f108 0602 	add.w	r6, r8, #2
 8009e68:	3e01      	subs	r6, #1
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	612e      	str	r6, [r5, #16]
 8009e6e:	4621      	mov	r1, r4
 8009e70:	f7ff fdd2 	bl	8009a18 <_Bfree>
 8009e74:	4628      	mov	r0, r5
 8009e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e7e:	3301      	adds	r3, #1
 8009e80:	e7c1      	b.n	8009e06 <__lshift+0x4a>
 8009e82:	3904      	subs	r1, #4
 8009e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e88:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e8c:	4298      	cmp	r0, r3
 8009e8e:	d8f9      	bhi.n	8009e84 <__lshift+0xc8>
 8009e90:	e7ea      	b.n	8009e68 <__lshift+0xac>
 8009e92:	bf00      	nop
 8009e94:	0800b7e3 	.word	0x0800b7e3
 8009e98:	0800b854 	.word	0x0800b854

08009e9c <__mcmp>:
 8009e9c:	b530      	push	{r4, r5, lr}
 8009e9e:	6902      	ldr	r2, [r0, #16]
 8009ea0:	690c      	ldr	r4, [r1, #16]
 8009ea2:	1b12      	subs	r2, r2, r4
 8009ea4:	d10e      	bne.n	8009ec4 <__mcmp+0x28>
 8009ea6:	f100 0314 	add.w	r3, r0, #20
 8009eaa:	3114      	adds	r1, #20
 8009eac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009eb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009eb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009eb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ebc:	42a5      	cmp	r5, r4
 8009ebe:	d003      	beq.n	8009ec8 <__mcmp+0x2c>
 8009ec0:	d305      	bcc.n	8009ece <__mcmp+0x32>
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	bd30      	pop	{r4, r5, pc}
 8009ec8:	4283      	cmp	r3, r0
 8009eca:	d3f3      	bcc.n	8009eb4 <__mcmp+0x18>
 8009ecc:	e7fa      	b.n	8009ec4 <__mcmp+0x28>
 8009ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ed2:	e7f7      	b.n	8009ec4 <__mcmp+0x28>

08009ed4 <__mdiff>:
 8009ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed8:	460c      	mov	r4, r1
 8009eda:	4606      	mov	r6, r0
 8009edc:	4611      	mov	r1, r2
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4690      	mov	r8, r2
 8009ee2:	f7ff ffdb 	bl	8009e9c <__mcmp>
 8009ee6:	1e05      	subs	r5, r0, #0
 8009ee8:	d110      	bne.n	8009f0c <__mdiff+0x38>
 8009eea:	4629      	mov	r1, r5
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7ff fd53 	bl	8009998 <_Balloc>
 8009ef2:	b930      	cbnz	r0, 8009f02 <__mdiff+0x2e>
 8009ef4:	4b3a      	ldr	r3, [pc, #232]	; (8009fe0 <__mdiff+0x10c>)
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	f240 2132 	movw	r1, #562	; 0x232
 8009efc:	4839      	ldr	r0, [pc, #228]	; (8009fe4 <__mdiff+0x110>)
 8009efe:	f000 fbf1 	bl	800a6e4 <__assert_func>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0c:	bfa4      	itt	ge
 8009f0e:	4643      	movge	r3, r8
 8009f10:	46a0      	movge	r8, r4
 8009f12:	4630      	mov	r0, r6
 8009f14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f18:	bfa6      	itte	ge
 8009f1a:	461c      	movge	r4, r3
 8009f1c:	2500      	movge	r5, #0
 8009f1e:	2501      	movlt	r5, #1
 8009f20:	f7ff fd3a 	bl	8009998 <_Balloc>
 8009f24:	b920      	cbnz	r0, 8009f30 <__mdiff+0x5c>
 8009f26:	4b2e      	ldr	r3, [pc, #184]	; (8009fe0 <__mdiff+0x10c>)
 8009f28:	4602      	mov	r2, r0
 8009f2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f2e:	e7e5      	b.n	8009efc <__mdiff+0x28>
 8009f30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f34:	6926      	ldr	r6, [r4, #16]
 8009f36:	60c5      	str	r5, [r0, #12]
 8009f38:	f104 0914 	add.w	r9, r4, #20
 8009f3c:	f108 0514 	add.w	r5, r8, #20
 8009f40:	f100 0e14 	add.w	lr, r0, #20
 8009f44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f4c:	f108 0210 	add.w	r2, r8, #16
 8009f50:	46f2      	mov	sl, lr
 8009f52:	2100      	movs	r1, #0
 8009f54:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f5c:	fa1f f883 	uxth.w	r8, r3
 8009f60:	fa11 f18b 	uxtah	r1, r1, fp
 8009f64:	0c1b      	lsrs	r3, r3, #16
 8009f66:	eba1 0808 	sub.w	r8, r1, r8
 8009f6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f72:	fa1f f888 	uxth.w	r8, r8
 8009f76:	1419      	asrs	r1, r3, #16
 8009f78:	454e      	cmp	r6, r9
 8009f7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f7e:	f84a 3b04 	str.w	r3, [sl], #4
 8009f82:	d8e7      	bhi.n	8009f54 <__mdiff+0x80>
 8009f84:	1b33      	subs	r3, r6, r4
 8009f86:	3b15      	subs	r3, #21
 8009f88:	f023 0303 	bic.w	r3, r3, #3
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	3415      	adds	r4, #21
 8009f90:	42a6      	cmp	r6, r4
 8009f92:	bf38      	it	cc
 8009f94:	2304      	movcc	r3, #4
 8009f96:	441d      	add	r5, r3
 8009f98:	4473      	add	r3, lr
 8009f9a:	469e      	mov	lr, r3
 8009f9c:	462e      	mov	r6, r5
 8009f9e:	4566      	cmp	r6, ip
 8009fa0:	d30e      	bcc.n	8009fc0 <__mdiff+0xec>
 8009fa2:	f10c 0203 	add.w	r2, ip, #3
 8009fa6:	1b52      	subs	r2, r2, r5
 8009fa8:	f022 0203 	bic.w	r2, r2, #3
 8009fac:	3d03      	subs	r5, #3
 8009fae:	45ac      	cmp	ip, r5
 8009fb0:	bf38      	it	cc
 8009fb2:	2200      	movcc	r2, #0
 8009fb4:	441a      	add	r2, r3
 8009fb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fba:	b17b      	cbz	r3, 8009fdc <__mdiff+0x108>
 8009fbc:	6107      	str	r7, [r0, #16]
 8009fbe:	e7a3      	b.n	8009f08 <__mdiff+0x34>
 8009fc0:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fc4:	fa11 f288 	uxtah	r2, r1, r8
 8009fc8:	1414      	asrs	r4, r2, #16
 8009fca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009fce:	b292      	uxth	r2, r2
 8009fd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009fd4:	f84e 2b04 	str.w	r2, [lr], #4
 8009fd8:	1421      	asrs	r1, r4, #16
 8009fda:	e7e0      	b.n	8009f9e <__mdiff+0xca>
 8009fdc:	3f01      	subs	r7, #1
 8009fde:	e7ea      	b.n	8009fb6 <__mdiff+0xe2>
 8009fe0:	0800b7e3 	.word	0x0800b7e3
 8009fe4:	0800b854 	.word	0x0800b854

08009fe8 <__d2b>:
 8009fe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fec:	4689      	mov	r9, r1
 8009fee:	2101      	movs	r1, #1
 8009ff0:	ec57 6b10 	vmov	r6, r7, d0
 8009ff4:	4690      	mov	r8, r2
 8009ff6:	f7ff fccf 	bl	8009998 <_Balloc>
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	b930      	cbnz	r0, 800a00c <__d2b+0x24>
 8009ffe:	4602      	mov	r2, r0
 800a000:	4b25      	ldr	r3, [pc, #148]	; (800a098 <__d2b+0xb0>)
 800a002:	4826      	ldr	r0, [pc, #152]	; (800a09c <__d2b+0xb4>)
 800a004:	f240 310a 	movw	r1, #778	; 0x30a
 800a008:	f000 fb6c 	bl	800a6e4 <__assert_func>
 800a00c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a010:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a014:	bb35      	cbnz	r5, 800a064 <__d2b+0x7c>
 800a016:	2e00      	cmp	r6, #0
 800a018:	9301      	str	r3, [sp, #4]
 800a01a:	d028      	beq.n	800a06e <__d2b+0x86>
 800a01c:	4668      	mov	r0, sp
 800a01e:	9600      	str	r6, [sp, #0]
 800a020:	f7ff fd82 	bl	8009b28 <__lo0bits>
 800a024:	9900      	ldr	r1, [sp, #0]
 800a026:	b300      	cbz	r0, 800a06a <__d2b+0x82>
 800a028:	9a01      	ldr	r2, [sp, #4]
 800a02a:	f1c0 0320 	rsb	r3, r0, #32
 800a02e:	fa02 f303 	lsl.w	r3, r2, r3
 800a032:	430b      	orrs	r3, r1
 800a034:	40c2      	lsrs	r2, r0
 800a036:	6163      	str	r3, [r4, #20]
 800a038:	9201      	str	r2, [sp, #4]
 800a03a:	9b01      	ldr	r3, [sp, #4]
 800a03c:	61a3      	str	r3, [r4, #24]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bf14      	ite	ne
 800a042:	2202      	movne	r2, #2
 800a044:	2201      	moveq	r2, #1
 800a046:	6122      	str	r2, [r4, #16]
 800a048:	b1d5      	cbz	r5, 800a080 <__d2b+0x98>
 800a04a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a04e:	4405      	add	r5, r0
 800a050:	f8c9 5000 	str.w	r5, [r9]
 800a054:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a058:	f8c8 0000 	str.w	r0, [r8]
 800a05c:	4620      	mov	r0, r4
 800a05e:	b003      	add	sp, #12
 800a060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a068:	e7d5      	b.n	800a016 <__d2b+0x2e>
 800a06a:	6161      	str	r1, [r4, #20]
 800a06c:	e7e5      	b.n	800a03a <__d2b+0x52>
 800a06e:	a801      	add	r0, sp, #4
 800a070:	f7ff fd5a 	bl	8009b28 <__lo0bits>
 800a074:	9b01      	ldr	r3, [sp, #4]
 800a076:	6163      	str	r3, [r4, #20]
 800a078:	2201      	movs	r2, #1
 800a07a:	6122      	str	r2, [r4, #16]
 800a07c:	3020      	adds	r0, #32
 800a07e:	e7e3      	b.n	800a048 <__d2b+0x60>
 800a080:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a084:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a088:	f8c9 0000 	str.w	r0, [r9]
 800a08c:	6918      	ldr	r0, [r3, #16]
 800a08e:	f7ff fd2b 	bl	8009ae8 <__hi0bits>
 800a092:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a096:	e7df      	b.n	800a058 <__d2b+0x70>
 800a098:	0800b7e3 	.word	0x0800b7e3
 800a09c:	0800b854 	.word	0x0800b854

0800a0a0 <_calloc_r>:
 800a0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0a2:	fba1 2402 	umull	r2, r4, r1, r2
 800a0a6:	b94c      	cbnz	r4, 800a0bc <_calloc_r+0x1c>
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	9201      	str	r2, [sp, #4]
 800a0ac:	f7fd fd4a 	bl	8007b44 <_malloc_r>
 800a0b0:	9a01      	ldr	r2, [sp, #4]
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	b930      	cbnz	r0, 800a0c4 <_calloc_r+0x24>
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	b003      	add	sp, #12
 800a0ba:	bd30      	pop	{r4, r5, pc}
 800a0bc:	220c      	movs	r2, #12
 800a0be:	6002      	str	r2, [r0, #0]
 800a0c0:	2500      	movs	r5, #0
 800a0c2:	e7f8      	b.n	800a0b6 <_calloc_r+0x16>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	f7fd fcc9 	bl	8007a5c <memset>
 800a0ca:	e7f4      	b.n	800a0b6 <_calloc_r+0x16>

0800a0cc <__ssputs_r>:
 800a0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d0:	688e      	ldr	r6, [r1, #8]
 800a0d2:	429e      	cmp	r6, r3
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	4690      	mov	r8, r2
 800a0da:	461f      	mov	r7, r3
 800a0dc:	d838      	bhi.n	800a150 <__ssputs_r+0x84>
 800a0de:	898a      	ldrh	r2, [r1, #12]
 800a0e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0e4:	d032      	beq.n	800a14c <__ssputs_r+0x80>
 800a0e6:	6825      	ldr	r5, [r4, #0]
 800a0e8:	6909      	ldr	r1, [r1, #16]
 800a0ea:	eba5 0901 	sub.w	r9, r5, r1
 800a0ee:	6965      	ldr	r5, [r4, #20]
 800a0f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	444b      	add	r3, r9
 800a0fc:	106d      	asrs	r5, r5, #1
 800a0fe:	429d      	cmp	r5, r3
 800a100:	bf38      	it	cc
 800a102:	461d      	movcc	r5, r3
 800a104:	0553      	lsls	r3, r2, #21
 800a106:	d531      	bpl.n	800a16c <__ssputs_r+0xa0>
 800a108:	4629      	mov	r1, r5
 800a10a:	f7fd fd1b 	bl	8007b44 <_malloc_r>
 800a10e:	4606      	mov	r6, r0
 800a110:	b950      	cbnz	r0, 800a128 <__ssputs_r+0x5c>
 800a112:	230c      	movs	r3, #12
 800a114:	f8ca 3000 	str.w	r3, [sl]
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a11e:	81a3      	strh	r3, [r4, #12]
 800a120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a128:	6921      	ldr	r1, [r4, #16]
 800a12a:	464a      	mov	r2, r9
 800a12c:	f7ff fc1a 	bl	8009964 <memcpy>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a13a:	81a3      	strh	r3, [r4, #12]
 800a13c:	6126      	str	r6, [r4, #16]
 800a13e:	6165      	str	r5, [r4, #20]
 800a140:	444e      	add	r6, r9
 800a142:	eba5 0509 	sub.w	r5, r5, r9
 800a146:	6026      	str	r6, [r4, #0]
 800a148:	60a5      	str	r5, [r4, #8]
 800a14a:	463e      	mov	r6, r7
 800a14c:	42be      	cmp	r6, r7
 800a14e:	d900      	bls.n	800a152 <__ssputs_r+0x86>
 800a150:	463e      	mov	r6, r7
 800a152:	6820      	ldr	r0, [r4, #0]
 800a154:	4632      	mov	r2, r6
 800a156:	4641      	mov	r1, r8
 800a158:	f000 fb4a 	bl	800a7f0 <memmove>
 800a15c:	68a3      	ldr	r3, [r4, #8]
 800a15e:	1b9b      	subs	r3, r3, r6
 800a160:	60a3      	str	r3, [r4, #8]
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	4433      	add	r3, r6
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	2000      	movs	r0, #0
 800a16a:	e7db      	b.n	800a124 <__ssputs_r+0x58>
 800a16c:	462a      	mov	r2, r5
 800a16e:	f000 fb59 	bl	800a824 <_realloc_r>
 800a172:	4606      	mov	r6, r0
 800a174:	2800      	cmp	r0, #0
 800a176:	d1e1      	bne.n	800a13c <__ssputs_r+0x70>
 800a178:	6921      	ldr	r1, [r4, #16]
 800a17a:	4650      	mov	r0, sl
 800a17c:	f7fd fc76 	bl	8007a6c <_free_r>
 800a180:	e7c7      	b.n	800a112 <__ssputs_r+0x46>
	...

0800a184 <_svfiprintf_r>:
 800a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	4698      	mov	r8, r3
 800a18a:	898b      	ldrh	r3, [r1, #12]
 800a18c:	061b      	lsls	r3, r3, #24
 800a18e:	b09d      	sub	sp, #116	; 0x74
 800a190:	4607      	mov	r7, r0
 800a192:	460d      	mov	r5, r1
 800a194:	4614      	mov	r4, r2
 800a196:	d50e      	bpl.n	800a1b6 <_svfiprintf_r+0x32>
 800a198:	690b      	ldr	r3, [r1, #16]
 800a19a:	b963      	cbnz	r3, 800a1b6 <_svfiprintf_r+0x32>
 800a19c:	2140      	movs	r1, #64	; 0x40
 800a19e:	f7fd fcd1 	bl	8007b44 <_malloc_r>
 800a1a2:	6028      	str	r0, [r5, #0]
 800a1a4:	6128      	str	r0, [r5, #16]
 800a1a6:	b920      	cbnz	r0, 800a1b2 <_svfiprintf_r+0x2e>
 800a1a8:	230c      	movs	r3, #12
 800a1aa:	603b      	str	r3, [r7, #0]
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1b0:	e0d1      	b.n	800a356 <_svfiprintf_r+0x1d2>
 800a1b2:	2340      	movs	r3, #64	; 0x40
 800a1b4:	616b      	str	r3, [r5, #20]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ba:	2320      	movs	r3, #32
 800a1bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1c4:	2330      	movs	r3, #48	; 0x30
 800a1c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a370 <_svfiprintf_r+0x1ec>
 800a1ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1ce:	f04f 0901 	mov.w	r9, #1
 800a1d2:	4623      	mov	r3, r4
 800a1d4:	469a      	mov	sl, r3
 800a1d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1da:	b10a      	cbz	r2, 800a1e0 <_svfiprintf_r+0x5c>
 800a1dc:	2a25      	cmp	r2, #37	; 0x25
 800a1de:	d1f9      	bne.n	800a1d4 <_svfiprintf_r+0x50>
 800a1e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a1e4:	d00b      	beq.n	800a1fe <_svfiprintf_r+0x7a>
 800a1e6:	465b      	mov	r3, fp
 800a1e8:	4622      	mov	r2, r4
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	f7ff ff6d 	bl	800a0cc <__ssputs_r>
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	f000 80aa 	beq.w	800a34c <_svfiprintf_r+0x1c8>
 800a1f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1fa:	445a      	add	r2, fp
 800a1fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 80a2 	beq.w	800a34c <_svfiprintf_r+0x1c8>
 800a208:	2300      	movs	r3, #0
 800a20a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a20e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a212:	f10a 0a01 	add.w	sl, sl, #1
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	9307      	str	r3, [sp, #28]
 800a21a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a21e:	931a      	str	r3, [sp, #104]	; 0x68
 800a220:	4654      	mov	r4, sl
 800a222:	2205      	movs	r2, #5
 800a224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a228:	4851      	ldr	r0, [pc, #324]	; (800a370 <_svfiprintf_r+0x1ec>)
 800a22a:	f7f5 fff1 	bl	8000210 <memchr>
 800a22e:	9a04      	ldr	r2, [sp, #16]
 800a230:	b9d8      	cbnz	r0, 800a26a <_svfiprintf_r+0xe6>
 800a232:	06d0      	lsls	r0, r2, #27
 800a234:	bf44      	itt	mi
 800a236:	2320      	movmi	r3, #32
 800a238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a23c:	0711      	lsls	r1, r2, #28
 800a23e:	bf44      	itt	mi
 800a240:	232b      	movmi	r3, #43	; 0x2b
 800a242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a246:	f89a 3000 	ldrb.w	r3, [sl]
 800a24a:	2b2a      	cmp	r3, #42	; 0x2a
 800a24c:	d015      	beq.n	800a27a <_svfiprintf_r+0xf6>
 800a24e:	9a07      	ldr	r2, [sp, #28]
 800a250:	4654      	mov	r4, sl
 800a252:	2000      	movs	r0, #0
 800a254:	f04f 0c0a 	mov.w	ip, #10
 800a258:	4621      	mov	r1, r4
 800a25a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a25e:	3b30      	subs	r3, #48	; 0x30
 800a260:	2b09      	cmp	r3, #9
 800a262:	d94e      	bls.n	800a302 <_svfiprintf_r+0x17e>
 800a264:	b1b0      	cbz	r0, 800a294 <_svfiprintf_r+0x110>
 800a266:	9207      	str	r2, [sp, #28]
 800a268:	e014      	b.n	800a294 <_svfiprintf_r+0x110>
 800a26a:	eba0 0308 	sub.w	r3, r0, r8
 800a26e:	fa09 f303 	lsl.w	r3, r9, r3
 800a272:	4313      	orrs	r3, r2
 800a274:	9304      	str	r3, [sp, #16]
 800a276:	46a2      	mov	sl, r4
 800a278:	e7d2      	b.n	800a220 <_svfiprintf_r+0x9c>
 800a27a:	9b03      	ldr	r3, [sp, #12]
 800a27c:	1d19      	adds	r1, r3, #4
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	9103      	str	r1, [sp, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	bfbb      	ittet	lt
 800a286:	425b      	neglt	r3, r3
 800a288:	f042 0202 	orrlt.w	r2, r2, #2
 800a28c:	9307      	strge	r3, [sp, #28]
 800a28e:	9307      	strlt	r3, [sp, #28]
 800a290:	bfb8      	it	lt
 800a292:	9204      	strlt	r2, [sp, #16]
 800a294:	7823      	ldrb	r3, [r4, #0]
 800a296:	2b2e      	cmp	r3, #46	; 0x2e
 800a298:	d10c      	bne.n	800a2b4 <_svfiprintf_r+0x130>
 800a29a:	7863      	ldrb	r3, [r4, #1]
 800a29c:	2b2a      	cmp	r3, #42	; 0x2a
 800a29e:	d135      	bne.n	800a30c <_svfiprintf_r+0x188>
 800a2a0:	9b03      	ldr	r3, [sp, #12]
 800a2a2:	1d1a      	adds	r2, r3, #4
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	9203      	str	r2, [sp, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	bfb8      	it	lt
 800a2ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2b0:	3402      	adds	r4, #2
 800a2b2:	9305      	str	r3, [sp, #20]
 800a2b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a380 <_svfiprintf_r+0x1fc>
 800a2b8:	7821      	ldrb	r1, [r4, #0]
 800a2ba:	2203      	movs	r2, #3
 800a2bc:	4650      	mov	r0, sl
 800a2be:	f7f5 ffa7 	bl	8000210 <memchr>
 800a2c2:	b140      	cbz	r0, 800a2d6 <_svfiprintf_r+0x152>
 800a2c4:	2340      	movs	r3, #64	; 0x40
 800a2c6:	eba0 000a 	sub.w	r0, r0, sl
 800a2ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	4303      	orrs	r3, r0
 800a2d2:	3401      	adds	r4, #1
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2da:	4826      	ldr	r0, [pc, #152]	; (800a374 <_svfiprintf_r+0x1f0>)
 800a2dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2e0:	2206      	movs	r2, #6
 800a2e2:	f7f5 ff95 	bl	8000210 <memchr>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d038      	beq.n	800a35c <_svfiprintf_r+0x1d8>
 800a2ea:	4b23      	ldr	r3, [pc, #140]	; (800a378 <_svfiprintf_r+0x1f4>)
 800a2ec:	bb1b      	cbnz	r3, 800a336 <_svfiprintf_r+0x1b2>
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	3307      	adds	r3, #7
 800a2f2:	f023 0307 	bic.w	r3, r3, #7
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	9303      	str	r3, [sp, #12]
 800a2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fc:	4433      	add	r3, r6
 800a2fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a300:	e767      	b.n	800a1d2 <_svfiprintf_r+0x4e>
 800a302:	fb0c 3202 	mla	r2, ip, r2, r3
 800a306:	460c      	mov	r4, r1
 800a308:	2001      	movs	r0, #1
 800a30a:	e7a5      	b.n	800a258 <_svfiprintf_r+0xd4>
 800a30c:	2300      	movs	r3, #0
 800a30e:	3401      	adds	r4, #1
 800a310:	9305      	str	r3, [sp, #20]
 800a312:	4619      	mov	r1, r3
 800a314:	f04f 0c0a 	mov.w	ip, #10
 800a318:	4620      	mov	r0, r4
 800a31a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a31e:	3a30      	subs	r2, #48	; 0x30
 800a320:	2a09      	cmp	r2, #9
 800a322:	d903      	bls.n	800a32c <_svfiprintf_r+0x1a8>
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0c5      	beq.n	800a2b4 <_svfiprintf_r+0x130>
 800a328:	9105      	str	r1, [sp, #20]
 800a32a:	e7c3      	b.n	800a2b4 <_svfiprintf_r+0x130>
 800a32c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a330:	4604      	mov	r4, r0
 800a332:	2301      	movs	r3, #1
 800a334:	e7f0      	b.n	800a318 <_svfiprintf_r+0x194>
 800a336:	ab03      	add	r3, sp, #12
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	462a      	mov	r2, r5
 800a33c:	4b0f      	ldr	r3, [pc, #60]	; (800a37c <_svfiprintf_r+0x1f8>)
 800a33e:	a904      	add	r1, sp, #16
 800a340:	4638      	mov	r0, r7
 800a342:	f7fd fd13 	bl	8007d6c <_printf_float>
 800a346:	1c42      	adds	r2, r0, #1
 800a348:	4606      	mov	r6, r0
 800a34a:	d1d6      	bne.n	800a2fa <_svfiprintf_r+0x176>
 800a34c:	89ab      	ldrh	r3, [r5, #12]
 800a34e:	065b      	lsls	r3, r3, #25
 800a350:	f53f af2c 	bmi.w	800a1ac <_svfiprintf_r+0x28>
 800a354:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a356:	b01d      	add	sp, #116	; 0x74
 800a358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35c:	ab03      	add	r3, sp, #12
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	462a      	mov	r2, r5
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <_svfiprintf_r+0x1f8>)
 800a364:	a904      	add	r1, sp, #16
 800a366:	4638      	mov	r0, r7
 800a368:	f7fd ffa4 	bl	80082b4 <_printf_i>
 800a36c:	e7eb      	b.n	800a346 <_svfiprintf_r+0x1c2>
 800a36e:	bf00      	nop
 800a370:	0800b9ac 	.word	0x0800b9ac
 800a374:	0800b9b6 	.word	0x0800b9b6
 800a378:	08007d6d 	.word	0x08007d6d
 800a37c:	0800a0cd 	.word	0x0800a0cd
 800a380:	0800b9b2 	.word	0x0800b9b2

0800a384 <__sfputc_r>:
 800a384:	6893      	ldr	r3, [r2, #8]
 800a386:	3b01      	subs	r3, #1
 800a388:	2b00      	cmp	r3, #0
 800a38a:	b410      	push	{r4}
 800a38c:	6093      	str	r3, [r2, #8]
 800a38e:	da08      	bge.n	800a3a2 <__sfputc_r+0x1e>
 800a390:	6994      	ldr	r4, [r2, #24]
 800a392:	42a3      	cmp	r3, r4
 800a394:	db01      	blt.n	800a39a <__sfputc_r+0x16>
 800a396:	290a      	cmp	r1, #10
 800a398:	d103      	bne.n	800a3a2 <__sfputc_r+0x1e>
 800a39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a39e:	f7fe b981 	b.w	80086a4 <__swbuf_r>
 800a3a2:	6813      	ldr	r3, [r2, #0]
 800a3a4:	1c58      	adds	r0, r3, #1
 800a3a6:	6010      	str	r0, [r2, #0]
 800a3a8:	7019      	strb	r1, [r3, #0]
 800a3aa:	4608      	mov	r0, r1
 800a3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <__sfputs_r>:
 800a3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	460f      	mov	r7, r1
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	18d5      	adds	r5, r2, r3
 800a3bc:	42ac      	cmp	r4, r5
 800a3be:	d101      	bne.n	800a3c4 <__sfputs_r+0x12>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e007      	b.n	800a3d4 <__sfputs_r+0x22>
 800a3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c8:	463a      	mov	r2, r7
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff ffda 	bl	800a384 <__sfputc_r>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d1f3      	bne.n	800a3bc <__sfputs_r+0xa>
 800a3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3d8 <_vfiprintf_r>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	460d      	mov	r5, r1
 800a3de:	b09d      	sub	sp, #116	; 0x74
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	4698      	mov	r8, r3
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	b118      	cbz	r0, 800a3f0 <_vfiprintf_r+0x18>
 800a3e8:	6983      	ldr	r3, [r0, #24]
 800a3ea:	b90b      	cbnz	r3, 800a3f0 <_vfiprintf_r+0x18>
 800a3ec:	f7ff f9b0 	bl	8009750 <__sinit>
 800a3f0:	4b89      	ldr	r3, [pc, #548]	; (800a618 <_vfiprintf_r+0x240>)
 800a3f2:	429d      	cmp	r5, r3
 800a3f4:	d11b      	bne.n	800a42e <_vfiprintf_r+0x56>
 800a3f6:	6875      	ldr	r5, [r6, #4]
 800a3f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3fa:	07d9      	lsls	r1, r3, #31
 800a3fc:	d405      	bmi.n	800a40a <_vfiprintf_r+0x32>
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	059a      	lsls	r2, r3, #22
 800a402:	d402      	bmi.n	800a40a <_vfiprintf_r+0x32>
 800a404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a406:	f7ff fa46 	bl	8009896 <__retarget_lock_acquire_recursive>
 800a40a:	89ab      	ldrh	r3, [r5, #12]
 800a40c:	071b      	lsls	r3, r3, #28
 800a40e:	d501      	bpl.n	800a414 <_vfiprintf_r+0x3c>
 800a410:	692b      	ldr	r3, [r5, #16]
 800a412:	b9eb      	cbnz	r3, 800a450 <_vfiprintf_r+0x78>
 800a414:	4629      	mov	r1, r5
 800a416:	4630      	mov	r0, r6
 800a418:	f7fe f996 	bl	8008748 <__swsetup_r>
 800a41c:	b1c0      	cbz	r0, 800a450 <_vfiprintf_r+0x78>
 800a41e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a420:	07dc      	lsls	r4, r3, #31
 800a422:	d50e      	bpl.n	800a442 <_vfiprintf_r+0x6a>
 800a424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a428:	b01d      	add	sp, #116	; 0x74
 800a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42e:	4b7b      	ldr	r3, [pc, #492]	; (800a61c <_vfiprintf_r+0x244>)
 800a430:	429d      	cmp	r5, r3
 800a432:	d101      	bne.n	800a438 <_vfiprintf_r+0x60>
 800a434:	68b5      	ldr	r5, [r6, #8]
 800a436:	e7df      	b.n	800a3f8 <_vfiprintf_r+0x20>
 800a438:	4b79      	ldr	r3, [pc, #484]	; (800a620 <_vfiprintf_r+0x248>)
 800a43a:	429d      	cmp	r5, r3
 800a43c:	bf08      	it	eq
 800a43e:	68f5      	ldreq	r5, [r6, #12]
 800a440:	e7da      	b.n	800a3f8 <_vfiprintf_r+0x20>
 800a442:	89ab      	ldrh	r3, [r5, #12]
 800a444:	0598      	lsls	r0, r3, #22
 800a446:	d4ed      	bmi.n	800a424 <_vfiprintf_r+0x4c>
 800a448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a44a:	f7ff fa25 	bl	8009898 <__retarget_lock_release_recursive>
 800a44e:	e7e9      	b.n	800a424 <_vfiprintf_r+0x4c>
 800a450:	2300      	movs	r3, #0
 800a452:	9309      	str	r3, [sp, #36]	; 0x24
 800a454:	2320      	movs	r3, #32
 800a456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a45e:	2330      	movs	r3, #48	; 0x30
 800a460:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a624 <_vfiprintf_r+0x24c>
 800a464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a468:	f04f 0901 	mov.w	r9, #1
 800a46c:	4623      	mov	r3, r4
 800a46e:	469a      	mov	sl, r3
 800a470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a474:	b10a      	cbz	r2, 800a47a <_vfiprintf_r+0xa2>
 800a476:	2a25      	cmp	r2, #37	; 0x25
 800a478:	d1f9      	bne.n	800a46e <_vfiprintf_r+0x96>
 800a47a:	ebba 0b04 	subs.w	fp, sl, r4
 800a47e:	d00b      	beq.n	800a498 <_vfiprintf_r+0xc0>
 800a480:	465b      	mov	r3, fp
 800a482:	4622      	mov	r2, r4
 800a484:	4629      	mov	r1, r5
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ff93 	bl	800a3b2 <__sfputs_r>
 800a48c:	3001      	adds	r0, #1
 800a48e:	f000 80aa 	beq.w	800a5e6 <_vfiprintf_r+0x20e>
 800a492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a494:	445a      	add	r2, fp
 800a496:	9209      	str	r2, [sp, #36]	; 0x24
 800a498:	f89a 3000 	ldrb.w	r3, [sl]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 80a2 	beq.w	800a5e6 <_vfiprintf_r+0x20e>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ac:	f10a 0a01 	add.w	sl, sl, #1
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	9307      	str	r3, [sp, #28]
 800a4b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ba:	4654      	mov	r4, sl
 800a4bc:	2205      	movs	r2, #5
 800a4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c2:	4858      	ldr	r0, [pc, #352]	; (800a624 <_vfiprintf_r+0x24c>)
 800a4c4:	f7f5 fea4 	bl	8000210 <memchr>
 800a4c8:	9a04      	ldr	r2, [sp, #16]
 800a4ca:	b9d8      	cbnz	r0, 800a504 <_vfiprintf_r+0x12c>
 800a4cc:	06d1      	lsls	r1, r2, #27
 800a4ce:	bf44      	itt	mi
 800a4d0:	2320      	movmi	r3, #32
 800a4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d6:	0713      	lsls	r3, r2, #28
 800a4d8:	bf44      	itt	mi
 800a4da:	232b      	movmi	r3, #43	; 0x2b
 800a4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e6:	d015      	beq.n	800a514 <_vfiprintf_r+0x13c>
 800a4e8:	9a07      	ldr	r2, [sp, #28]
 800a4ea:	4654      	mov	r4, sl
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f04f 0c0a 	mov.w	ip, #10
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f8:	3b30      	subs	r3, #48	; 0x30
 800a4fa:	2b09      	cmp	r3, #9
 800a4fc:	d94e      	bls.n	800a59c <_vfiprintf_r+0x1c4>
 800a4fe:	b1b0      	cbz	r0, 800a52e <_vfiprintf_r+0x156>
 800a500:	9207      	str	r2, [sp, #28]
 800a502:	e014      	b.n	800a52e <_vfiprintf_r+0x156>
 800a504:	eba0 0308 	sub.w	r3, r0, r8
 800a508:	fa09 f303 	lsl.w	r3, r9, r3
 800a50c:	4313      	orrs	r3, r2
 800a50e:	9304      	str	r3, [sp, #16]
 800a510:	46a2      	mov	sl, r4
 800a512:	e7d2      	b.n	800a4ba <_vfiprintf_r+0xe2>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	1d19      	adds	r1, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	9103      	str	r1, [sp, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfbb      	ittet	lt
 800a520:	425b      	neglt	r3, r3
 800a522:	f042 0202 	orrlt.w	r2, r2, #2
 800a526:	9307      	strge	r3, [sp, #28]
 800a528:	9307      	strlt	r3, [sp, #28]
 800a52a:	bfb8      	it	lt
 800a52c:	9204      	strlt	r2, [sp, #16]
 800a52e:	7823      	ldrb	r3, [r4, #0]
 800a530:	2b2e      	cmp	r3, #46	; 0x2e
 800a532:	d10c      	bne.n	800a54e <_vfiprintf_r+0x176>
 800a534:	7863      	ldrb	r3, [r4, #1]
 800a536:	2b2a      	cmp	r3, #42	; 0x2a
 800a538:	d135      	bne.n	800a5a6 <_vfiprintf_r+0x1ce>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	1d1a      	adds	r2, r3, #4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	9203      	str	r2, [sp, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfb8      	it	lt
 800a546:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a54a:	3402      	adds	r4, #2
 800a54c:	9305      	str	r3, [sp, #20]
 800a54e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a634 <_vfiprintf_r+0x25c>
 800a552:	7821      	ldrb	r1, [r4, #0]
 800a554:	2203      	movs	r2, #3
 800a556:	4650      	mov	r0, sl
 800a558:	f7f5 fe5a 	bl	8000210 <memchr>
 800a55c:	b140      	cbz	r0, 800a570 <_vfiprintf_r+0x198>
 800a55e:	2340      	movs	r3, #64	; 0x40
 800a560:	eba0 000a 	sub.w	r0, r0, sl
 800a564:	fa03 f000 	lsl.w	r0, r3, r0
 800a568:	9b04      	ldr	r3, [sp, #16]
 800a56a:	4303      	orrs	r3, r0
 800a56c:	3401      	adds	r4, #1
 800a56e:	9304      	str	r3, [sp, #16]
 800a570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a574:	482c      	ldr	r0, [pc, #176]	; (800a628 <_vfiprintf_r+0x250>)
 800a576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a57a:	2206      	movs	r2, #6
 800a57c:	f7f5 fe48 	bl	8000210 <memchr>
 800a580:	2800      	cmp	r0, #0
 800a582:	d03f      	beq.n	800a604 <_vfiprintf_r+0x22c>
 800a584:	4b29      	ldr	r3, [pc, #164]	; (800a62c <_vfiprintf_r+0x254>)
 800a586:	bb1b      	cbnz	r3, 800a5d0 <_vfiprintf_r+0x1f8>
 800a588:	9b03      	ldr	r3, [sp, #12]
 800a58a:	3307      	adds	r3, #7
 800a58c:	f023 0307 	bic.w	r3, r3, #7
 800a590:	3308      	adds	r3, #8
 800a592:	9303      	str	r3, [sp, #12]
 800a594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a596:	443b      	add	r3, r7
 800a598:	9309      	str	r3, [sp, #36]	; 0x24
 800a59a:	e767      	b.n	800a46c <_vfiprintf_r+0x94>
 800a59c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	e7a5      	b.n	800a4f2 <_vfiprintf_r+0x11a>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	3401      	adds	r4, #1
 800a5aa:	9305      	str	r3, [sp, #20]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	f04f 0c0a 	mov.w	ip, #10
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b8:	3a30      	subs	r2, #48	; 0x30
 800a5ba:	2a09      	cmp	r2, #9
 800a5bc:	d903      	bls.n	800a5c6 <_vfiprintf_r+0x1ee>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0c5      	beq.n	800a54e <_vfiprintf_r+0x176>
 800a5c2:	9105      	str	r1, [sp, #20]
 800a5c4:	e7c3      	b.n	800a54e <_vfiprintf_r+0x176>
 800a5c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e7f0      	b.n	800a5b2 <_vfiprintf_r+0x1da>
 800a5d0:	ab03      	add	r3, sp, #12
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	462a      	mov	r2, r5
 800a5d6:	4b16      	ldr	r3, [pc, #88]	; (800a630 <_vfiprintf_r+0x258>)
 800a5d8:	a904      	add	r1, sp, #16
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7fd fbc6 	bl	8007d6c <_printf_float>
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	1c78      	adds	r0, r7, #1
 800a5e4:	d1d6      	bne.n	800a594 <_vfiprintf_r+0x1bc>
 800a5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5e8:	07d9      	lsls	r1, r3, #31
 800a5ea:	d405      	bmi.n	800a5f8 <_vfiprintf_r+0x220>
 800a5ec:	89ab      	ldrh	r3, [r5, #12]
 800a5ee:	059a      	lsls	r2, r3, #22
 800a5f0:	d402      	bmi.n	800a5f8 <_vfiprintf_r+0x220>
 800a5f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f4:	f7ff f950 	bl	8009898 <__retarget_lock_release_recursive>
 800a5f8:	89ab      	ldrh	r3, [r5, #12]
 800a5fa:	065b      	lsls	r3, r3, #25
 800a5fc:	f53f af12 	bmi.w	800a424 <_vfiprintf_r+0x4c>
 800a600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a602:	e711      	b.n	800a428 <_vfiprintf_r+0x50>
 800a604:	ab03      	add	r3, sp, #12
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	462a      	mov	r2, r5
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <_vfiprintf_r+0x258>)
 800a60c:	a904      	add	r1, sp, #16
 800a60e:	4630      	mov	r0, r6
 800a610:	f7fd fe50 	bl	80082b4 <_printf_i>
 800a614:	e7e4      	b.n	800a5e0 <_vfiprintf_r+0x208>
 800a616:	bf00      	nop
 800a618:	0800b814 	.word	0x0800b814
 800a61c:	0800b834 	.word	0x0800b834
 800a620:	0800b7f4 	.word	0x0800b7f4
 800a624:	0800b9ac 	.word	0x0800b9ac
 800a628:	0800b9b6 	.word	0x0800b9b6
 800a62c:	08007d6d 	.word	0x08007d6d
 800a630:	0800a3b3 	.word	0x0800a3b3
 800a634:	0800b9b2 	.word	0x0800b9b2

0800a638 <__sread>:
 800a638:	b510      	push	{r4, lr}
 800a63a:	460c      	mov	r4, r1
 800a63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a640:	f000 f920 	bl	800a884 <_read_r>
 800a644:	2800      	cmp	r0, #0
 800a646:	bfab      	itete	ge
 800a648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a64a:	89a3      	ldrhlt	r3, [r4, #12]
 800a64c:	181b      	addge	r3, r3, r0
 800a64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a652:	bfac      	ite	ge
 800a654:	6563      	strge	r3, [r4, #84]	; 0x54
 800a656:	81a3      	strhlt	r3, [r4, #12]
 800a658:	bd10      	pop	{r4, pc}

0800a65a <__swrite>:
 800a65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a65e:	461f      	mov	r7, r3
 800a660:	898b      	ldrh	r3, [r1, #12]
 800a662:	05db      	lsls	r3, r3, #23
 800a664:	4605      	mov	r5, r0
 800a666:	460c      	mov	r4, r1
 800a668:	4616      	mov	r6, r2
 800a66a:	d505      	bpl.n	800a678 <__swrite+0x1e>
 800a66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a670:	2302      	movs	r3, #2
 800a672:	2200      	movs	r2, #0
 800a674:	f000 f898 	bl	800a7a8 <_lseek_r>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a67e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a682:	81a3      	strh	r3, [r4, #12]
 800a684:	4632      	mov	r2, r6
 800a686:	463b      	mov	r3, r7
 800a688:	4628      	mov	r0, r5
 800a68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a68e:	f000 b817 	b.w	800a6c0 <_write_r>

0800a692 <__sseek>:
 800a692:	b510      	push	{r4, lr}
 800a694:	460c      	mov	r4, r1
 800a696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a69a:	f000 f885 	bl	800a7a8 <_lseek_r>
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	bf15      	itete	ne
 800a6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6ae:	81a3      	strheq	r3, [r4, #12]
 800a6b0:	bf18      	it	ne
 800a6b2:	81a3      	strhne	r3, [r4, #12]
 800a6b4:	bd10      	pop	{r4, pc}

0800a6b6 <__sclose>:
 800a6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ba:	f000 b831 	b.w	800a720 <_close_r>
	...

0800a6c0 <_write_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4d07      	ldr	r5, [pc, #28]	; (800a6e0 <_write_r+0x20>)
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	602a      	str	r2, [r5, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	f7f8 fc5a 	bl	8002f88 <_write>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	d102      	bne.n	800a6de <_write_r+0x1e>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	b103      	cbz	r3, 800a6de <_write_r+0x1e>
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	bd38      	pop	{r3, r4, r5, pc}
 800a6e0:	20002538 	.word	0x20002538

0800a6e4 <__assert_func>:
 800a6e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6e6:	4614      	mov	r4, r2
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	4b09      	ldr	r3, [pc, #36]	; (800a710 <__assert_func+0x2c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	68d8      	ldr	r0, [r3, #12]
 800a6f2:	b14c      	cbz	r4, 800a708 <__assert_func+0x24>
 800a6f4:	4b07      	ldr	r3, [pc, #28]	; (800a714 <__assert_func+0x30>)
 800a6f6:	9100      	str	r1, [sp, #0]
 800a6f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6fc:	4906      	ldr	r1, [pc, #24]	; (800a718 <__assert_func+0x34>)
 800a6fe:	462b      	mov	r3, r5
 800a700:	f000 f81e 	bl	800a740 <fiprintf>
 800a704:	f000 f8dd 	bl	800a8c2 <abort>
 800a708:	4b04      	ldr	r3, [pc, #16]	; (800a71c <__assert_func+0x38>)
 800a70a:	461c      	mov	r4, r3
 800a70c:	e7f3      	b.n	800a6f6 <__assert_func+0x12>
 800a70e:	bf00      	nop
 800a710:	20000024 	.word	0x20000024
 800a714:	0800b9bd 	.word	0x0800b9bd
 800a718:	0800b9ca 	.word	0x0800b9ca
 800a71c:	0800b9f8 	.word	0x0800b9f8

0800a720 <_close_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4d06      	ldr	r5, [pc, #24]	; (800a73c <_close_r+0x1c>)
 800a724:	2300      	movs	r3, #0
 800a726:	4604      	mov	r4, r0
 800a728:	4608      	mov	r0, r1
 800a72a:	602b      	str	r3, [r5, #0]
 800a72c:	f7f8 fc3a 	bl	8002fa4 <_close>
 800a730:	1c43      	adds	r3, r0, #1
 800a732:	d102      	bne.n	800a73a <_close_r+0x1a>
 800a734:	682b      	ldr	r3, [r5, #0]
 800a736:	b103      	cbz	r3, 800a73a <_close_r+0x1a>
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	20002538 	.word	0x20002538

0800a740 <fiprintf>:
 800a740:	b40e      	push	{r1, r2, r3}
 800a742:	b503      	push	{r0, r1, lr}
 800a744:	4601      	mov	r1, r0
 800a746:	ab03      	add	r3, sp, #12
 800a748:	4805      	ldr	r0, [pc, #20]	; (800a760 <fiprintf+0x20>)
 800a74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a74e:	6800      	ldr	r0, [r0, #0]
 800a750:	9301      	str	r3, [sp, #4]
 800a752:	f7ff fe41 	bl	800a3d8 <_vfiprintf_r>
 800a756:	b002      	add	sp, #8
 800a758:	f85d eb04 	ldr.w	lr, [sp], #4
 800a75c:	b003      	add	sp, #12
 800a75e:	4770      	bx	lr
 800a760:	20000024 	.word	0x20000024

0800a764 <_fstat_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4d07      	ldr	r5, [pc, #28]	; (800a784 <_fstat_r+0x20>)
 800a768:	2300      	movs	r3, #0
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	4611      	mov	r1, r2
 800a770:	602b      	str	r3, [r5, #0]
 800a772:	f7f8 fc1b 	bl	8002fac <_fstat>
 800a776:	1c43      	adds	r3, r0, #1
 800a778:	d102      	bne.n	800a780 <_fstat_r+0x1c>
 800a77a:	682b      	ldr	r3, [r5, #0]
 800a77c:	b103      	cbz	r3, 800a780 <_fstat_r+0x1c>
 800a77e:	6023      	str	r3, [r4, #0]
 800a780:	bd38      	pop	{r3, r4, r5, pc}
 800a782:	bf00      	nop
 800a784:	20002538 	.word	0x20002538

0800a788 <_isatty_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d06      	ldr	r5, [pc, #24]	; (800a7a4 <_isatty_r+0x1c>)
 800a78c:	2300      	movs	r3, #0
 800a78e:	4604      	mov	r4, r0
 800a790:	4608      	mov	r0, r1
 800a792:	602b      	str	r3, [r5, #0]
 800a794:	f7f8 fc10 	bl	8002fb8 <_isatty>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_isatty_r+0x1a>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_isatty_r+0x1a>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20002538 	.word	0x20002538

0800a7a8 <_lseek_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4d07      	ldr	r5, [pc, #28]	; (800a7c8 <_lseek_r+0x20>)
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	4608      	mov	r0, r1
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	602a      	str	r2, [r5, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f7f8 fc00 	bl	8002fbc <_lseek>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_lseek_r+0x1e>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_lseek_r+0x1e>
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	20002538 	.word	0x20002538

0800a7cc <__ascii_mbtowc>:
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	b901      	cbnz	r1, 800a7d2 <__ascii_mbtowc+0x6>
 800a7d0:	a901      	add	r1, sp, #4
 800a7d2:	b142      	cbz	r2, 800a7e6 <__ascii_mbtowc+0x1a>
 800a7d4:	b14b      	cbz	r3, 800a7ea <__ascii_mbtowc+0x1e>
 800a7d6:	7813      	ldrb	r3, [r2, #0]
 800a7d8:	600b      	str	r3, [r1, #0]
 800a7da:	7812      	ldrb	r2, [r2, #0]
 800a7dc:	1e10      	subs	r0, r2, #0
 800a7de:	bf18      	it	ne
 800a7e0:	2001      	movne	r0, #1
 800a7e2:	b002      	add	sp, #8
 800a7e4:	4770      	bx	lr
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	e7fb      	b.n	800a7e2 <__ascii_mbtowc+0x16>
 800a7ea:	f06f 0001 	mvn.w	r0, #1
 800a7ee:	e7f8      	b.n	800a7e2 <__ascii_mbtowc+0x16>

0800a7f0 <memmove>:
 800a7f0:	4288      	cmp	r0, r1
 800a7f2:	b510      	push	{r4, lr}
 800a7f4:	eb01 0402 	add.w	r4, r1, r2
 800a7f8:	d902      	bls.n	800a800 <memmove+0x10>
 800a7fa:	4284      	cmp	r4, r0
 800a7fc:	4623      	mov	r3, r4
 800a7fe:	d807      	bhi.n	800a810 <memmove+0x20>
 800a800:	1e43      	subs	r3, r0, #1
 800a802:	42a1      	cmp	r1, r4
 800a804:	d008      	beq.n	800a818 <memmove+0x28>
 800a806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a80a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a80e:	e7f8      	b.n	800a802 <memmove+0x12>
 800a810:	4402      	add	r2, r0
 800a812:	4601      	mov	r1, r0
 800a814:	428a      	cmp	r2, r1
 800a816:	d100      	bne.n	800a81a <memmove+0x2a>
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a81e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a822:	e7f7      	b.n	800a814 <memmove+0x24>

0800a824 <_realloc_r>:
 800a824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a828:	4680      	mov	r8, r0
 800a82a:	4614      	mov	r4, r2
 800a82c:	460e      	mov	r6, r1
 800a82e:	b921      	cbnz	r1, 800a83a <_realloc_r+0x16>
 800a830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a834:	4611      	mov	r1, r2
 800a836:	f7fd b985 	b.w	8007b44 <_malloc_r>
 800a83a:	b92a      	cbnz	r2, 800a848 <_realloc_r+0x24>
 800a83c:	f7fd f916 	bl	8007a6c <_free_r>
 800a840:	4625      	mov	r5, r4
 800a842:	4628      	mov	r0, r5
 800a844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a848:	f000 f842 	bl	800a8d0 <_malloc_usable_size_r>
 800a84c:	4284      	cmp	r4, r0
 800a84e:	4607      	mov	r7, r0
 800a850:	d802      	bhi.n	800a858 <_realloc_r+0x34>
 800a852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a856:	d812      	bhi.n	800a87e <_realloc_r+0x5a>
 800a858:	4621      	mov	r1, r4
 800a85a:	4640      	mov	r0, r8
 800a85c:	f7fd f972 	bl	8007b44 <_malloc_r>
 800a860:	4605      	mov	r5, r0
 800a862:	2800      	cmp	r0, #0
 800a864:	d0ed      	beq.n	800a842 <_realloc_r+0x1e>
 800a866:	42bc      	cmp	r4, r7
 800a868:	4622      	mov	r2, r4
 800a86a:	4631      	mov	r1, r6
 800a86c:	bf28      	it	cs
 800a86e:	463a      	movcs	r2, r7
 800a870:	f7ff f878 	bl	8009964 <memcpy>
 800a874:	4631      	mov	r1, r6
 800a876:	4640      	mov	r0, r8
 800a878:	f7fd f8f8 	bl	8007a6c <_free_r>
 800a87c:	e7e1      	b.n	800a842 <_realloc_r+0x1e>
 800a87e:	4635      	mov	r5, r6
 800a880:	e7df      	b.n	800a842 <_realloc_r+0x1e>
	...

0800a884 <_read_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4d07      	ldr	r5, [pc, #28]	; (800a8a4 <_read_r+0x20>)
 800a888:	4604      	mov	r4, r0
 800a88a:	4608      	mov	r0, r1
 800a88c:	4611      	mov	r1, r2
 800a88e:	2200      	movs	r2, #0
 800a890:	602a      	str	r2, [r5, #0]
 800a892:	461a      	mov	r2, r3
 800a894:	f7f8 fb6a 	bl	8002f6c <_read>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_read_r+0x1e>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_read_r+0x1e>
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	20002538 	.word	0x20002538

0800a8a8 <__ascii_wctomb>:
 800a8a8:	b149      	cbz	r1, 800a8be <__ascii_wctomb+0x16>
 800a8aa:	2aff      	cmp	r2, #255	; 0xff
 800a8ac:	bf85      	ittet	hi
 800a8ae:	238a      	movhi	r3, #138	; 0x8a
 800a8b0:	6003      	strhi	r3, [r0, #0]
 800a8b2:	700a      	strbls	r2, [r1, #0]
 800a8b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a8b8:	bf98      	it	ls
 800a8ba:	2001      	movls	r0, #1
 800a8bc:	4770      	bx	lr
 800a8be:	4608      	mov	r0, r1
 800a8c0:	4770      	bx	lr

0800a8c2 <abort>:
 800a8c2:	b508      	push	{r3, lr}
 800a8c4:	2006      	movs	r0, #6
 800a8c6:	f000 f833 	bl	800a930 <raise>
 800a8ca:	2001      	movs	r0, #1
 800a8cc:	f7f8 fb48 	bl	8002f60 <_exit>

0800a8d0 <_malloc_usable_size_r>:
 800a8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d4:	1f18      	subs	r0, r3, #4
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bfbc      	itt	lt
 800a8da:	580b      	ldrlt	r3, [r1, r0]
 800a8dc:	18c0      	addlt	r0, r0, r3
 800a8de:	4770      	bx	lr

0800a8e0 <_raise_r>:
 800a8e0:	291f      	cmp	r1, #31
 800a8e2:	b538      	push	{r3, r4, r5, lr}
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	460d      	mov	r5, r1
 800a8e8:	d904      	bls.n	800a8f4 <_raise_r+0x14>
 800a8ea:	2316      	movs	r3, #22
 800a8ec:	6003      	str	r3, [r0, #0]
 800a8ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a8f6:	b112      	cbz	r2, 800a8fe <_raise_r+0x1e>
 800a8f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8fc:	b94b      	cbnz	r3, 800a912 <_raise_r+0x32>
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 f830 	bl	800a964 <_getpid_r>
 800a904:	462a      	mov	r2, r5
 800a906:	4601      	mov	r1, r0
 800a908:	4620      	mov	r0, r4
 800a90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a90e:	f000 b817 	b.w	800a940 <_kill_r>
 800a912:	2b01      	cmp	r3, #1
 800a914:	d00a      	beq.n	800a92c <_raise_r+0x4c>
 800a916:	1c59      	adds	r1, r3, #1
 800a918:	d103      	bne.n	800a922 <_raise_r+0x42>
 800a91a:	2316      	movs	r3, #22
 800a91c:	6003      	str	r3, [r0, #0]
 800a91e:	2001      	movs	r0, #1
 800a920:	e7e7      	b.n	800a8f2 <_raise_r+0x12>
 800a922:	2400      	movs	r4, #0
 800a924:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a928:	4628      	mov	r0, r5
 800a92a:	4798      	blx	r3
 800a92c:	2000      	movs	r0, #0
 800a92e:	e7e0      	b.n	800a8f2 <_raise_r+0x12>

0800a930 <raise>:
 800a930:	4b02      	ldr	r3, [pc, #8]	; (800a93c <raise+0xc>)
 800a932:	4601      	mov	r1, r0
 800a934:	6818      	ldr	r0, [r3, #0]
 800a936:	f7ff bfd3 	b.w	800a8e0 <_raise_r>
 800a93a:	bf00      	nop
 800a93c:	20000024 	.word	0x20000024

0800a940 <_kill_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	; (800a960 <_kill_r+0x20>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	4611      	mov	r1, r2
 800a94c:	602b      	str	r3, [r5, #0]
 800a94e:	f7f8 faff 	bl	8002f50 <_kill>
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	d102      	bne.n	800a95c <_kill_r+0x1c>
 800a956:	682b      	ldr	r3, [r5, #0]
 800a958:	b103      	cbz	r3, 800a95c <_kill_r+0x1c>
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	bf00      	nop
 800a960:	20002538 	.word	0x20002538

0800a964 <_getpid_r>:
 800a964:	f7f8 baf2 	b.w	8002f4c <_getpid>

0800a968 <_init>:
 800a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96a:	bf00      	nop
 800a96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96e:	bc08      	pop	{r3}
 800a970:	469e      	mov	lr, r3
 800a972:	4770      	bx	lr

0800a974 <_fini>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	bf00      	nop
 800a978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97a:	bc08      	pop	{r3}
 800a97c:	469e      	mov	lr, r3
 800a97e:	4770      	bx	lr
