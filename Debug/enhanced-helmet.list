
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000198c  0800d150  0800d150  0001d150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eadc  0800eadc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eadc  0800eadc  0001eadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eae4  0800eae4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eae4  0800eae4  0001eae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eae8  0800eae8  0001eae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800eaec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf8  200001f4  0800ece0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eec  0800ece0  00020eec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d07  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bee  00000000  00000000  00033f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00036b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00037c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a38e  00000000  00000000  00038c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001828d  00000000  00000000  00052f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009870d  00000000  00000000  0006b22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103938  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005768  00000000  00000000  00103988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d134 	.word	0x0800d134

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800d134 	.word	0x0800d134

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <OV5462_write_i2c_reg>:
#include "OV5462.h"

uint8_t OV5462_write_i2c_reg(OV5462_t* ov5462, int addr, int data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	uint8_t buf[4];
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	121b      	asrs	r3, r3, #8
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	743b      	strb	r3, [r7, #16]
	buf[1] = (uint8_t)(addr & 0xFF); // lower addr byte
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	747b      	strb	r3, [r7, #17]
	buf[2] = data;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	74bb      	strb	r3, [r7, #18]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	f107 0210 	add.w	r2, r7, #16
 8000f44:	f04f 33ff 	mov.w	r3, #4294967295
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	2178      	movs	r1, #120	; 0x78
 8000f4e:	f002 fffd 	bl	8003f4c <HAL_I2C_Master_Transmit>
 8000f52:	4603      	mov	r3, r0
 8000f54:	75fb      	strb	r3, [r7, #23]

	if ( ret != HAL_OK ) {
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <OV5462_write_i2c_reg+0x44>
		return 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <OV5462_write_i2c_reg+0x46>
	}

	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <OV5462_write_i2c_regs>:

uint8_t OV5462_write_i2c_regs(OV5462_t* ov5462, const reg_value_pair regs[]) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
	const reg_value_pair* curr = regs;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef ret;

	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000f78:	e015      	b.n	8000fa6 <OV5462_write_i2c_regs+0x3c>
		ret = OV5462_write_i2c_reg(ov5462, curr->addr, curr->value);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	461a      	mov	r2, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffc8 	bl	8000f1c <OV5462_write_i2c_reg>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	72fb      	strb	r3, [r7, #11]
		// do we need a delay here?
		HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f002 f98d 	bl	80032b0 <HAL_Delay>
		++curr;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]

		if ( ret != HAL_OK ) {
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <OV5462_write_i2c_regs+0x3c>
			return 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00a      	b.n	8000fbc <OV5462_write_i2c_regs+0x52>
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d1e3      	bne.n	8000f7a <OV5462_write_i2c_regs+0x10>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	789b      	ldrb	r3, [r3, #2]
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d1df      	bne.n	8000f7a <OV5462_write_i2c_regs+0x10>
		}
	}

	return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <OV5462_read_i2c_reg>:

uint8_t OV5462_read_i2c_reg(OV5462_t* ov5462, int addr) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	uint8_t buf[2];
	buf[0] = (uint8_t)(addr >> 8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	121b      	asrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t)(addr & 0xFF);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 2, HAL_MAX_DELAY);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2302      	movs	r3, #2
 8000fec:	2179      	movs	r1, #121	; 0x79
 8000fee:	f002 ffad 	bl	8003f4c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 1, HAL_MAX_DELAY);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2179      	movs	r1, #121	; 0x79
 8001004:	f003 f8a0 	bl	8004148 <HAL_I2C_Master_Receive>

	return buf[0];
 8001008:	7b3b      	ldrb	r3, [r7, #12]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <OV5462_write_spi_reg>:

void OV5462_write_spi_reg(OV5462_t* ov5462, uint8_t addr, uint8_t data) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	4613      	mov	r3, r2
 8001022:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <OV5462_write_spi_reg+0x5c>)
 800102a:	f002 fe31 	bl	8003c90 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr | 0x80 };
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001034:	b2db      	uxtb	r3, r3
 8001036:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6858      	ldr	r0, [r3, #4]
 800103c:	f107 010c 	add.w	r1, r7, #12
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2201      	movs	r2, #1
 8001044:	f004 faf5 	bl	8005632 <HAL_SPI_Transmit>
	buf[0] = data;
 8001048:	78bb      	ldrb	r3, [r7, #2]
 800104a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6858      	ldr	r0, [r3, #4]
 8001050:	f107 010c 	add.w	r1, r7, #12
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	2201      	movs	r2, #1
 8001058:	f004 faeb 	bl	8005632 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 800105c:	2201      	movs	r2, #1
 800105e:	2110      	movs	r1, #16
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <OV5462_write_spi_reg+0x5c>)
 8001062:	f002 fe15 	bl	8003c90 <HAL_GPIO_WritePin>

//	HAL_Delay(100);
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020800 	.word	0x40020800

08001074 <OV5462_read_spi_reg>:

uint8_t OV5462_read_spi_reg(OV5462_t* ov5462, uint8_t addr) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001080:	2200      	movs	r2, #0
 8001082:	2110      	movs	r1, #16
 8001084:	480f      	ldr	r0, [pc, #60]	; (80010c4 <OV5462_read_spi_reg+0x50>)
 8001086:	f002 fe03 	bl	8003c90 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr };
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6858      	ldr	r0, [r3, #4]
 8001092:	f107 010c 	add.w	r1, r7, #12
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	2201      	movs	r2, #1
 800109a:	f004 faca 	bl	8005632 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6858      	ldr	r0, [r3, #4]
 80010a2:	f107 010c 	add.w	r1, r7, #12
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	2201      	movs	r2, #1
 80010aa:	f004 fbfe 	bl	80058aa <HAL_SPI_Receive>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 80010ae:	2201      	movs	r2, #1
 80010b0:	2110      	movs	r1, #16
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <OV5462_read_spi_reg+0x50>)
 80010b4:	f002 fdec 	bl	8003c90 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	return buf[0];
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020800 	.word	0x40020800

080010c8 <OV5462_init>:


uint8_t OV5462_init(OV5462_t* ov5462) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select is default HIGH
 80010d0:	2201      	movs	r2, #1
 80010d2:	2110      	movs	r1, #16
 80010d4:	482b      	ldr	r0, [pc, #172]	; (8001184 <OV5462_init+0xbc>)
 80010d6:	f002 fddb 	bl	8003c90 <HAL_GPIO_WritePin>

	OV5462_write_i2c_reg(ov5462, 0x3008, 0x80);
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	f243 0108 	movw	r1, #12296	; 0x3008
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff1b 	bl	8000f1c <OV5462_write_i2c_reg>
	OV5462_write_i2c_regs(ov5462, SET_QVGA_MODE); // determine if we need to do this for our application
 80010e6:	4928      	ldr	r1, [pc, #160]	; (8001188 <OV5462_init+0xc0>)
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff3e 	bl	8000f6a <OV5462_write_i2c_regs>

	uint8_t err = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
	// configure camera for JPEG capture
	err |= OV5462_write_i2c_regs(ov5462, CONFIGURE_JPEG_CAPTURE); // use JPEG capture mode
 80010f2:	4926      	ldr	r1, [pc, #152]	; (800118c <OV5462_init+0xc4>)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff38 	bl	8000f6a <OV5462_write_i2c_regs>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4313      	orrs	r3, r2
 8001102:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_regs(ov5462, SET_RESOLUTION_320X240); // set sensor to low resolution
 8001104:	4922      	ldr	r1, [pc, #136]	; (8001190 <OV5462_init+0xc8>)
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff2f 	bl	8000f6a <OV5462_write_i2c_regs>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	4313      	orrs	r3, r2
 8001114:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3818, 0xa8);
 8001116:	22a8      	movs	r2, #168	; 0xa8
 8001118:	f643 0118 	movw	r1, #14360	; 0x3818
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fefd 	bl	8000f1c <OV5462_write_i2c_reg>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	4313      	orrs	r3, r2
 800112a:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3621, 0x10);
 800112c:	2210      	movs	r2, #16
 800112e:	f243 6121 	movw	r1, #13857	; 0x3621
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fef2 	bl	8000f1c <OV5462_write_i2c_reg>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	4313      	orrs	r3, r2
 8001140:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3801, 0xb0);
 8001142:	22b0      	movs	r2, #176	; 0xb0
 8001144:	f643 0101 	movw	r1, #14337	; 0x3801
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fee7 	bl	8000f1c <OV5462_write_i2c_reg>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	4313      	orrs	r3, r2
 8001156:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x4407, 0x04); // 04?
 8001158:	2204      	movs	r2, #4
 800115a:	f244 4107 	movw	r1, #17415	; 0x4407
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fedc 	bl	8000f1c <OV5462_write_i2c_reg>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4313      	orrs	r3, r2
 800116c:	73fb      	strb	r3, [r7, #15]

	OV5462_write_spi_reg(ov5462, OV5462_ARDUCHIP_TIM, OV5462_VSYNC_LEVEL_MASK);
 800116e:	2202      	movs	r2, #2
 8001170:	2103      	movs	r1, #3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4e 	bl	8001014 <OV5462_write_spi_reg>

	return err;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020800 	.word	0x40020800
 8001188:	0800d4a4 	.word	0x0800d4a4
 800118c:	0800ddc4 	.word	0x0800ddc4
 8001190:	0800d438 	.word	0x0800d438

08001194 <OV5462_read_fifo_length>:

uint32_t OV5462_read_fifo_length(OV5462_t* ov5462) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	uint32_t lower, middle, upper;
	lower = OV5462_read_spi_reg(ov5462, FIFO_SIZE_LOWER);
 800119c:	2142      	movs	r1, #66	; 0x42
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff68 	bl	8001074 <OV5462_read_spi_reg>
 80011a4:	4603      	mov	r3, r0
 80011a6:	617b      	str	r3, [r7, #20]
	middle = OV5462_read_spi_reg(ov5462, FIFO_SIZE_MIDDLE);
 80011a8:	2143      	movs	r1, #67	; 0x43
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff62 	bl	8001074 <OV5462_read_spi_reg>
 80011b0:	4603      	mov	r3, r0
 80011b2:	613b      	str	r3, [r7, #16]
	upper = OV5462_read_spi_reg(ov5462, FIFO_SIZE_UPPER);
 80011b4:	2144      	movs	r1, #68	; 0x44
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff5c 	bl	8001074 <OV5462_read_spi_reg>
 80011bc:	4603      	mov	r3, r0
 80011be:	60fb      	str	r3, [r7, #12]

	return ((upper << 16) | (middle << 8) | lower) & 0x07fffff;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	041a      	lsls	r2, r3, #16
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	431a      	orrs	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <SPI_OptimizedReadByte>:

void SPI_OptimizedReadByte(uint8_t* data) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	while (((SPI1->SR)&(1>>7))) {}; // wait for BSY bit to reset
 80011e4:	bf00      	nop
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <SPI_OptimizedReadByte+0x38>)
 80011e8:	689b      	ldr	r3, [r3, #8]
	SPI1->DR = 0; // dummy byte
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <SPI_OptimizedReadByte+0x38>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
	while (!((SPI1->SR) & (1<<0))) {};
 80011f0:	bf00      	nop
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <SPI_OptimizedReadByte+0x38>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f9      	beq.n	80011f2 <SPI_OptimizedReadByte+0x16>
	*data = SPI1->DR;
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SPI_OptimizedReadByte+0x38>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	701a      	strb	r2, [r3, #0]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40013000 	.word	0x40013000

08001218 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2102      	movs	r1, #2
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <SELECT+0x18>)
 8001222:	f002 fd35 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f002 f842 	bl	80032b0 <HAL_Delay>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40020800 	.word	0x40020800

08001234 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2102      	movs	r1, #2
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <DESELECT+0x18>)
 800123e:	f002 fd27 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f002 f834 	bl	80032b0 <HAL_Delay>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40020800 	.word	0x40020800

08001250 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800125a:	bf00      	nop
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <SPI_TxByte+0x30>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b02      	cmp	r3, #2
 8001268:	d1f8      	bne.n	800125c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800126a:	1df9      	adds	r1, r7, #7
 800126c:	2364      	movs	r3, #100	; 0x64
 800126e:	2201      	movs	r2, #1
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <SPI_TxByte+0x30>)
 8001272:	f004 f9de 	bl	8005632 <HAL_SPI_Transmit>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000030c 	.word	0x2000030c

08001284 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001290:	bf00      	nop
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <SPI_TxBuffer+0x30>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b02      	cmp	r3, #2
 800129e:	d1f8      	bne.n	8001292 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80012a0:	887a      	ldrh	r2, [r7, #2]
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <SPI_TxBuffer+0x30>)
 80012a8:	f004 f9c3 	bl	8005632 <HAL_SPI_Transmit>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000030c 	.word	0x2000030c

080012b8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80012be:	23ff      	movs	r3, #255	; 0xff
 80012c0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012c2:	bf00      	nop
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <SPI_RxByte+0x34>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d1f8      	bne.n	80012c4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80012d2:	1dba      	adds	r2, r7, #6
 80012d4:	1df9      	adds	r1, r7, #7
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <SPI_RxByte+0x34>)
 80012de:	f004 fbf5 	bl	8005acc <HAL_SPI_TransmitReceive>

	return data;
 80012e2:	79bb      	ldrb	r3, [r7, #6]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000030c 	.word	0x2000030c

080012f0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80012f8:	f7ff ffde 	bl	80012b8 <SPI_RxByte>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	701a      	strb	r2, [r3, #0]
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <SD_ReadyWait+0x30>)
 8001314:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001318:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800131a:	f7ff ffcd 	bl	80012b8 <SPI_RxByte>
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2bff      	cmp	r3, #255	; 0xff
 8001326:	d003      	beq.n	8001330 <SD_ReadyWait+0x24>
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <SD_ReadyWait+0x30>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f4      	bne.n	800131a <SD_ReadyWait+0xe>

	return res;
 8001330:	79fb      	ldrb	r3, [r7, #7]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000212 	.word	0x20000212

08001340 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001346:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800134a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800134c:	f7ff ff72 	bl	8001234 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	e005      	b.n	8001362 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001356:	20ff      	movs	r0, #255	; 0xff
 8001358:	f7ff ff7a 	bl	8001250 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3301      	adds	r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b09      	cmp	r3, #9
 8001366:	ddf6      	ble.n	8001356 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001368:	f7ff ff56 	bl	8001218 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800136c:	2340      	movs	r3, #64	; 0x40
 800136e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001380:	2395      	movs	r3, #149	; 0x95
 8001382:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001384:	463b      	mov	r3, r7
 8001386:	2106      	movs	r1, #6
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff7b 	bl	8001284 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800138e:	e002      	b.n	8001396 <SD_PowerOn+0x56>
	{
		cnt--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3b01      	subs	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001396:	f7ff ff8f 	bl	80012b8 <SPI_RxByte>
 800139a:	4603      	mov	r3, r0
 800139c:	2b01      	cmp	r3, #1
 800139e:	d002      	beq.n	80013a6 <SD_PowerOn+0x66>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f4      	bne.n	8001390 <SD_PowerOn+0x50>
	}

	DESELECT();
 80013a6:	f7ff ff45 	bl	8001234 <DESELECT>
	SPI_TxByte(0XFF);
 80013aa:	20ff      	movs	r0, #255	; 0xff
 80013ac:	f7ff ff50 	bl	8001250 <SPI_TxByte>

	PowerFlag = 1;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <SD_PowerOn+0x80>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000215 	.word	0x20000215

080013c4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <SD_PowerOff+0x14>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20000215 	.word	0x20000215

080013dc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	return PowerFlag;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <SD_CheckPower+0x14>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000215 	.word	0x20000215

080013f4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <SD_RxDataBlock+0x58>)
 8001400:	22c8      	movs	r2, #200	; 0xc8
 8001402:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001404:	f7ff ff58 	bl	80012b8 <SPI_RxByte>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2bff      	cmp	r3, #255	; 0xff
 8001410:	d103      	bne.n	800141a <SD_RxDataBlock+0x26>
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <SD_RxDataBlock+0x58>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f4      	bne.n	8001404 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	2bfe      	cmp	r3, #254	; 0xfe
 800141e:	d001      	beq.n	8001424 <SD_RxDataBlock+0x30>
 8001420:	2300      	movs	r3, #0
 8001422:	e00f      	b.n	8001444 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff60 	bl	80012f0 <SPI_RxBytePtr>
	} while(len--);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	603a      	str	r2, [r7, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f4      	bne.n	8001424 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800143a:	f7ff ff3d 	bl	80012b8 <SPI_RxByte>
	SPI_RxByte();
 800143e:	f7ff ff3b 	bl	80012b8 <SPI_RxByte>

	return TRUE;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000210 	.word	0x20000210

08001450 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001460:	f7ff ff54 	bl	800130c <SD_ReadyWait>
 8001464:	4603      	mov	r3, r0
 8001466:	2bff      	cmp	r3, #255	; 0xff
 8001468:	d001      	beq.n	800146e <SD_TxDataBlock+0x1e>
 800146a:	2300      	movs	r3, #0
 800146c:	e02f      	b.n	80014ce <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff feed 	bl	8001250 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	2bfd      	cmp	r3, #253	; 0xfd
 800147a:	d020      	beq.n	80014be <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800147c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff feff 	bl	8001284 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001486:	f7ff ff17 	bl	80012b8 <SPI_RxByte>
		SPI_RxByte();
 800148a:	f7ff ff15 	bl	80012b8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800148e:	e00b      	b.n	80014a8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001490:	f7ff ff12 	bl	80012b8 <SPI_RxByte>
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d006      	beq.n	80014b0 <SD_TxDataBlock+0x60>
			i++;
 80014a2:	7bbb      	ldrb	r3, [r7, #14]
 80014a4:	3301      	adds	r3, #1
 80014a6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b40      	cmp	r3, #64	; 0x40
 80014ac:	d9f0      	bls.n	8001490 <SD_TxDataBlock+0x40>
 80014ae:	e000      	b.n	80014b2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80014b0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80014b2:	bf00      	nop
 80014b4:	f7ff ff00 	bl	80012b8 <SPI_RxByte>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0fa      	beq.n	80014b4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d101      	bne.n	80014cc <SD_TxDataBlock+0x7c>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <SD_TxDataBlock+0x7e>

	return FALSE;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	6039      	str	r1, [r7, #0]
 80014e0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80014e2:	f7ff ff13 	bl	800130c <SD_ReadyWait>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2bff      	cmp	r3, #255	; 0xff
 80014ea:	d001      	beq.n	80014f0 <SD_SendCmd+0x1a>
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	e042      	b.n	8001576 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff feac 	bl	8001250 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	0e1b      	lsrs	r3, r3, #24
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fea6 	bl	8001250 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	0c1b      	lsrs	r3, r3, #16
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fea0 	bl	8001250 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fe9a 	bl	8001250 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fe95 	bl	8001250 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b40      	cmp	r3, #64	; 0x40
 800152a:	d102      	bne.n	8001532 <SD_SendCmd+0x5c>
 800152c:	2395      	movs	r3, #149	; 0x95
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e007      	b.n	8001542 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b48      	cmp	r3, #72	; 0x48
 8001536:	d102      	bne.n	800153e <SD_SendCmd+0x68>
 8001538:	2387      	movs	r3, #135	; 0x87
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e001      	b.n	8001542 <SD_SendCmd+0x6c>
	else crc = 1;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fe83 	bl	8001250 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b4c      	cmp	r3, #76	; 0x4c
 800154e:	d101      	bne.n	8001554 <SD_SendCmd+0x7e>
 8001550:	f7ff feb2 	bl	80012b8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001554:	230a      	movs	r3, #10
 8001556:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001558:	f7ff feae 	bl	80012b8 <SPI_RxByte>
 800155c:	4603      	mov	r3, r0
 800155e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001560:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001564:	2b00      	cmp	r3, #0
 8001566:	da05      	bge.n	8001574 <SD_SendCmd+0x9e>
 8001568:	7bbb      	ldrb	r3, [r7, #14]
 800156a:	3b01      	subs	r3, #1
 800156c:	73bb      	strb	r3, [r7, #14]
 800156e:	7bbb      	ldrb	r3, [r7, #14]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f1      	bne.n	8001558 <SD_SendCmd+0x82>

	return res;
 8001574:	7b7b      	ldrb	r3, [r7, #13]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SD_disk_initialize+0x14>
 8001590:	2301      	movs	r3, #1
 8001592:	e0d1      	b.n	8001738 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001594:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <SD_disk_initialize+0x1c0>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <SD_disk_initialize+0x2a>
 80015a2:	4b67      	ldr	r3, [pc, #412]	; (8001740 <SD_disk_initialize+0x1c0>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	e0c6      	b.n	8001738 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80015aa:	f7ff fec9 	bl	8001340 <SD_PowerOn>

	/* slave select */
	SELECT();
 80015ae:	f7ff fe33 	bl	8001218 <SELECT>

	/* check disk type */
	type = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80015b6:	2100      	movs	r1, #0
 80015b8:	2040      	movs	r0, #64	; 0x40
 80015ba:	f7ff ff8c 	bl	80014d6 <SD_SendCmd>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 80a1 	bne.w	8001708 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <SD_disk_initialize+0x1c4>)
 80015c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015cc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80015ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80015d2:	2048      	movs	r0, #72	; 0x48
 80015d4:	f7ff ff7f 	bl	80014d6 <SD_SendCmd>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d155      	bne.n	800168a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	e00c      	b.n	80015fe <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80015e4:	7bfc      	ldrb	r4, [r7, #15]
 80015e6:	f7ff fe67 	bl	80012b8 <SPI_RxByte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	f104 0310 	add.w	r3, r4, #16
 80015f2:	443b      	add	r3, r7
 80015f4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	3301      	adds	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d9ef      	bls.n	80015e4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001604:	7abb      	ldrb	r3, [r7, #10]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d17e      	bne.n	8001708 <SD_disk_initialize+0x188>
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	2baa      	cmp	r3, #170	; 0xaa
 800160e:	d17b      	bne.n	8001708 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001610:	2100      	movs	r1, #0
 8001612:	2077      	movs	r0, #119	; 0x77
 8001614:	f7ff ff5f 	bl	80014d6 <SD_SendCmd>
 8001618:	4603      	mov	r3, r0
 800161a:	2b01      	cmp	r3, #1
 800161c:	d807      	bhi.n	800162e <SD_disk_initialize+0xae>
 800161e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001622:	2069      	movs	r0, #105	; 0x69
 8001624:	f7ff ff57 	bl	80014d6 <SD_SendCmd>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800162e:	4b45      	ldr	r3, [pc, #276]	; (8001744 <SD_disk_initialize+0x1c4>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ec      	bne.n	8001610 <SD_disk_initialize+0x90>
 8001636:	e000      	b.n	800163a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001638:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800163a:	4b42      	ldr	r3, [pc, #264]	; (8001744 <SD_disk_initialize+0x1c4>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d062      	beq.n	8001708 <SD_disk_initialize+0x188>
 8001642:	2100      	movs	r1, #0
 8001644:	207a      	movs	r0, #122	; 0x7a
 8001646:	f7ff ff46 	bl	80014d6 <SD_SendCmd>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d15b      	bne.n	8001708 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	e00c      	b.n	8001670 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001656:	7bfc      	ldrb	r4, [r7, #15]
 8001658:	f7ff fe2e 	bl	80012b8 <SPI_RxByte>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	f104 0310 	add.w	r3, r4, #16
 8001664:	443b      	add	r3, r7
 8001666:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	3301      	adds	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d9ef      	bls.n	8001656 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001676:	7a3b      	ldrb	r3, [r7, #8]
 8001678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SD_disk_initialize+0x104>
 8001680:	230c      	movs	r3, #12
 8001682:	e000      	b.n	8001686 <SD_disk_initialize+0x106>
 8001684:	2304      	movs	r3, #4
 8001686:	73bb      	strb	r3, [r7, #14]
 8001688:	e03e      	b.n	8001708 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800168a:	2100      	movs	r1, #0
 800168c:	2077      	movs	r0, #119	; 0x77
 800168e:	f7ff ff22 	bl	80014d6 <SD_SendCmd>
 8001692:	4603      	mov	r3, r0
 8001694:	2b01      	cmp	r3, #1
 8001696:	d808      	bhi.n	80016aa <SD_disk_initialize+0x12a>
 8001698:	2100      	movs	r1, #0
 800169a:	2069      	movs	r0, #105	; 0x69
 800169c:	f7ff ff1b 	bl	80014d6 <SD_SendCmd>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d801      	bhi.n	80016aa <SD_disk_initialize+0x12a>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e000      	b.n	80016ac <SD_disk_initialize+0x12c>
 80016aa:	2301      	movs	r3, #1
 80016ac:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d10e      	bne.n	80016d2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80016b4:	2100      	movs	r1, #0
 80016b6:	2077      	movs	r0, #119	; 0x77
 80016b8:	f7ff ff0d 	bl	80014d6 <SD_SendCmd>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d80e      	bhi.n	80016e0 <SD_disk_initialize+0x160>
 80016c2:	2100      	movs	r1, #0
 80016c4:	2069      	movs	r0, #105	; 0x69
 80016c6:	f7ff ff06 	bl	80014d6 <SD_SendCmd>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <SD_disk_initialize+0x160>
 80016d0:	e00c      	b.n	80016ec <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016d2:	2100      	movs	r1, #0
 80016d4:	2041      	movs	r0, #65	; 0x41
 80016d6:	f7ff fefe 	bl	80014d6 <SD_SendCmd>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <SD_disk_initialize+0x1c4>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1e2      	bne.n	80016ae <SD_disk_initialize+0x12e>
 80016e8:	e000      	b.n	80016ec <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016ea:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <SD_disk_initialize+0x1c4>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <SD_disk_initialize+0x184>
 80016f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f8:	2050      	movs	r0, #80	; 0x50
 80016fa:	f7ff feec 	bl	80014d6 <SD_SendCmd>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SD_disk_initialize+0x188>
 8001704:	2300      	movs	r3, #0
 8001706:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <SD_disk_initialize+0x1c8>)
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800170e:	f7ff fd91 	bl	8001234 <DESELECT>
	SPI_RxByte();
 8001712:	f7ff fdd1 	bl	80012b8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001716:	7bbb      	ldrb	r3, [r7, #14]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <SD_disk_initialize+0x1c0>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SD_disk_initialize+0x1c0>)
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e001      	b.n	8001732 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800172e:	f7ff fe49 	bl	80013c4 <SD_PowerOff>
	}

	return Stat;
 8001732:	4b03      	ldr	r3, [pc, #12]	; (8001740 <SD_disk_initialize+0x1c0>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000210 	.word	0x20000210
 8001748:	20000214 	.word	0x20000214

0800174c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <SD_disk_status+0x14>
 800175c:	2301      	movs	r3, #1
 800175e:	e002      	b.n	8001766 <SD_disk_status+0x1a>
	return Stat;
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <SD_disk_status+0x28>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000000 	.word	0x20000000

08001778 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <SD_disk_read+0x1c>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <SD_disk_read+0x20>
 8001794:	2304      	movs	r3, #4
 8001796:	e051      	b.n	800183c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <SD_disk_read+0xcc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SD_disk_read+0x32>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e048      	b.n	800183c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <SD_disk_read+0xd0>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <SD_disk_read+0x44>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	607b      	str	r3, [r7, #4]

	SELECT();
 80017bc:	f7ff fd2c 	bl	8001218 <SELECT>

	if (count == 1)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d111      	bne.n	80017ea <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	2051      	movs	r0, #81	; 0x51
 80017ca:	f7ff fe84 	bl	80014d6 <SD_SendCmd>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d129      	bne.n	8001828 <SD_disk_read+0xb0>
 80017d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f7ff fe0b 	bl	80013f4 <SD_RxDataBlock>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d021      	beq.n	8001828 <SD_disk_read+0xb0>
 80017e4:	2300      	movs	r3, #0
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	e01e      	b.n	8001828 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	2052      	movs	r0, #82	; 0x52
 80017ee:	f7ff fe72 	bl	80014d6 <SD_SendCmd>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d117      	bne.n	8001828 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80017f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017fc:	68b8      	ldr	r0, [r7, #8]
 80017fe:	f7ff fdf9 	bl	80013f4 <SD_RxDataBlock>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00a      	beq.n	800181e <SD_disk_read+0xa6>
				buff += 512;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800180e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ed      	bne.n	80017f8 <SD_disk_read+0x80>
 800181c:	e000      	b.n	8001820 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800181e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001820:	2100      	movs	r1, #0
 8001822:	204c      	movs	r0, #76	; 0x4c
 8001824:	f7ff fe57 	bl	80014d6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001828:	f7ff fd04 	bl	8001234 <DESELECT>
	SPI_RxByte();
 800182c:	f7ff fd44 	bl	80012b8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	bf14      	ite	ne
 8001836:	2301      	movne	r3, #1
 8001838:	2300      	moveq	r3, #0
 800183a:	b2db      	uxtb	r3, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	20000214 	.word	0x20000214

0800184c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <SD_disk_write+0x1c>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <SD_disk_write+0x20>
 8001868:	2304      	movs	r3, #4
 800186a:	e06b      	b.n	8001944 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800186c:	4b37      	ldr	r3, [pc, #220]	; (800194c <SD_disk_write+0x100>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SD_disk_write+0x32>
 800187a:	2303      	movs	r3, #3
 800187c:	e062      	b.n	8001944 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800187e:	4b33      	ldr	r3, [pc, #204]	; (800194c <SD_disk_write+0x100>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SD_disk_write+0x44>
 800188c:	2302      	movs	r3, #2
 800188e:	e059      	b.n	8001944 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001890:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <SD_disk_write+0x104>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <SD_disk_write+0x56>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	025b      	lsls	r3, r3, #9
 80018a0:	607b      	str	r3, [r7, #4]

	SELECT();
 80018a2:	f7ff fcb9 	bl	8001218 <SELECT>

	if (count == 1)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d110      	bne.n	80018ce <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	2058      	movs	r0, #88	; 0x58
 80018b0:	f7ff fe11 	bl	80014d6 <SD_SendCmd>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d13a      	bne.n	8001930 <SD_disk_write+0xe4>
 80018ba:	21fe      	movs	r1, #254	; 0xfe
 80018bc:	68b8      	ldr	r0, [r7, #8]
 80018be:	f7ff fdc7 	bl	8001450 <SD_TxDataBlock>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d033      	beq.n	8001930 <SD_disk_write+0xe4>
			count = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	e030      	b.n	8001930 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <SD_disk_write+0x104>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80018da:	2100      	movs	r1, #0
 80018dc:	2077      	movs	r0, #119	; 0x77
 80018de:	f7ff fdfa 	bl	80014d6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	2057      	movs	r0, #87	; 0x57
 80018e6:	f7ff fdf6 	bl	80014d6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	2059      	movs	r0, #89	; 0x59
 80018ee:	f7ff fdf2 	bl	80014d6 <SD_SendCmd>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d11b      	bne.n	8001930 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018f8:	21fc      	movs	r1, #252	; 0xfc
 80018fa:	68b8      	ldr	r0, [r7, #8]
 80018fc:	f7ff fda8 	bl	8001450 <SD_TxDataBlock>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00a      	beq.n	800191c <SD_disk_write+0xd0>
				buff += 512;
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800190c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3b01      	subs	r3, #1
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ee      	bne.n	80018f8 <SD_disk_write+0xac>
 800191a:	e000      	b.n	800191e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800191c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800191e:	21fd      	movs	r1, #253	; 0xfd
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fd95 	bl	8001450 <SD_TxDataBlock>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <SD_disk_write+0xe4>
			{
				count = 1;
 800192c:	2301      	movs	r3, #1
 800192e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001930:	f7ff fc80 	bl	8001234 <DESELECT>
	SPI_RxByte();
 8001934:	f7ff fcc0 	bl	80012b8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2db      	uxtb	r3, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000000 	.word	0x20000000
 8001950:	20000214 	.word	0x20000214

08001954 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	603a      	str	r2, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	460b      	mov	r3, r1
 8001962:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SD_disk_ioctl+0x1e>
 800196e:	2304      	movs	r3, #4
 8001970:	e115      	b.n	8001b9e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d124      	bne.n	80019c8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d012      	beq.n	80019ac <SD_disk_ioctl+0x58>
 8001986:	2b02      	cmp	r3, #2
 8001988:	dc1a      	bgt.n	80019c0 <SD_disk_ioctl+0x6c>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <SD_disk_ioctl+0x40>
 800198e:	2b01      	cmp	r3, #1
 8001990:	d006      	beq.n	80019a0 <SD_disk_ioctl+0x4c>
 8001992:	e015      	b.n	80019c0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001994:	f7ff fd16 	bl	80013c4 <SD_PowerOff>
			res = RES_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800199e:	e0fc      	b.n	8001b9a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80019a0:	f7ff fcce 	bl	8001340 <SD_PowerOn>
			res = RES_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019aa:	e0f6      	b.n	8001b9a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	1c5c      	adds	r4, r3, #1
 80019b0:	f7ff fd14 	bl	80013dc <SD_CheckPower>
 80019b4:	4603      	mov	r3, r0
 80019b6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019be:	e0ec      	b.n	8001b9a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80019c0:	2304      	movs	r3, #4
 80019c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019c6:	e0e8      	b.n	8001b9a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80019c8:	4b77      	ldr	r3, [pc, #476]	; (8001ba8 <SD_disk_ioctl+0x254>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SD_disk_ioctl+0x86>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0e1      	b.n	8001b9e <SD_disk_ioctl+0x24a>

		SELECT();
 80019da:	f7ff fc1d 	bl	8001218 <SELECT>

		switch (ctrl)
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	2b0d      	cmp	r3, #13
 80019e2:	f200 80cb 	bhi.w	8001b7c <SD_disk_ioctl+0x228>
 80019e6:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <SD_disk_ioctl+0x98>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	08001ae7 	.word	0x08001ae7
 80019f0:	08001a25 	.word	0x08001a25
 80019f4:	08001ad7 	.word	0x08001ad7
 80019f8:	08001b7d 	.word	0x08001b7d
 80019fc:	08001b7d 	.word	0x08001b7d
 8001a00:	08001b7d 	.word	0x08001b7d
 8001a04:	08001b7d 	.word	0x08001b7d
 8001a08:	08001b7d 	.word	0x08001b7d
 8001a0c:	08001b7d 	.word	0x08001b7d
 8001a10:	08001b7d 	.word	0x08001b7d
 8001a14:	08001b7d 	.word	0x08001b7d
 8001a18:	08001af9 	.word	0x08001af9
 8001a1c:	08001b1d 	.word	0x08001b1d
 8001a20:	08001b41 	.word	0x08001b41
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a24:	2100      	movs	r1, #0
 8001a26:	2049      	movs	r0, #73	; 0x49
 8001a28:	f7ff fd55 	bl	80014d6 <SD_SendCmd>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 80a8 	bne.w	8001b84 <SD_disk_ioctl+0x230>
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fcda 	bl	80013f4 <SD_RxDataBlock>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 809e 	beq.w	8001b84 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001a48:	7b3b      	ldrb	r3, [r7, #12]
 8001a4a:	099b      	lsrs	r3, r3, #6
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10e      	bne.n	8001a70 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a52:	7d7b      	ldrb	r3, [r7, #21]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	7d3b      	ldrb	r3, [r7, #20]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001a66:	8bfb      	ldrh	r3, [r7, #30]
 8001a68:	029a      	lsls	r2, r3, #10
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e02e      	b.n	8001ace <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a70:	7c7b      	ldrb	r3, [r7, #17]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	7dbb      	ldrb	r3, [r7, #22]
 8001a7a:	09db      	lsrs	r3, r3, #7
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	7d7b      	ldrb	r3, [r7, #21]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f003 0306 	and.w	r3, r3, #6
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	3302      	adds	r3, #2
 8001a94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a98:	7d3b      	ldrb	r3, [r7, #20]
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	7cfb      	ldrb	r3, [r7, #19]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	7cbb      	ldrb	r3, [r7, #18]
 8001aae:	029b      	lsls	r3, r3, #10
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ac0:	8bfa      	ldrh	r2, [r7, #30]
 8001ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ac6:	3b09      	subs	r3, #9
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001ad4:	e056      	b.n	8001b84 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001adc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ae4:	e055      	b.n	8001b92 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001ae6:	f7ff fc11 	bl	800130c <SD_ReadyWait>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2bff      	cmp	r3, #255	; 0xff
 8001aee:	d14b      	bne.n	8001b88 <SD_disk_ioctl+0x234>
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001af6:	e047      	b.n	8001b88 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001af8:	2100      	movs	r1, #0
 8001afa:	2049      	movs	r0, #73	; 0x49
 8001afc:	f7ff fceb 	bl	80014d6 <SD_SendCmd>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d142      	bne.n	8001b8c <SD_disk_ioctl+0x238>
 8001b06:	2110      	movs	r1, #16
 8001b08:	6a38      	ldr	r0, [r7, #32]
 8001b0a:	f7ff fc73 	bl	80013f4 <SD_RxDataBlock>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d03b      	beq.n	8001b8c <SD_disk_ioctl+0x238>
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b1a:	e037      	b.n	8001b8c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	204a      	movs	r0, #74	; 0x4a
 8001b20:	f7ff fcd9 	bl	80014d6 <SD_SendCmd>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d132      	bne.n	8001b90 <SD_disk_ioctl+0x23c>
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	6a38      	ldr	r0, [r7, #32]
 8001b2e:	f7ff fc61 	bl	80013f4 <SD_RxDataBlock>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d02b      	beq.n	8001b90 <SD_disk_ioctl+0x23c>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b3e:	e027      	b.n	8001b90 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001b40:	2100      	movs	r1, #0
 8001b42:	207a      	movs	r0, #122	; 0x7a
 8001b44:	f7ff fcc7 	bl	80014d6 <SD_SendCmd>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d116      	bne.n	8001b7c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b54:	e00b      	b.n	8001b6e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001b56:	6a3c      	ldr	r4, [r7, #32]
 8001b58:	1c63      	adds	r3, r4, #1
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	f7ff fbac 	bl	80012b8 <SPI_RxByte>
 8001b60:	4603      	mov	r3, r0
 8001b62:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001b64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d9ef      	bls.n	8001b56 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b82:	e006      	b.n	8001b92 <SD_disk_ioctl+0x23e>
			break;
 8001b84:	bf00      	nop
 8001b86:	e004      	b.n	8001b92 <SD_disk_ioctl+0x23e>
			break;
 8001b88:	bf00      	nop
 8001b8a:	e002      	b.n	8001b92 <SD_disk_ioctl+0x23e>
			break;
 8001b8c:	bf00      	nop
 8001b8e:	e000      	b.n	8001b92 <SD_disk_ioctl+0x23e>
			break;
 8001b90:	bf00      	nop
		}

		DESELECT();
 8001b92:	f7ff fb4f 	bl	8001234 <DESELECT>
		SPI_RxByte();
 8001b96:	f7ff fb8f 	bl	80012b8 <SPI_RxByte>
	}

	return res;
 8001b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	372c      	adds	r7, #44	; 0x2c
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000

08001bac <testSD>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int testSD() {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
/* Mount SD Card */
	int ret = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
	if(f_mount(&fs, "/", 0) != FR_OK) {
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	495d      	ldr	r1, [pc, #372]	; (8001d30 <testSD+0x184>)
 8001bba:	485e      	ldr	r0, [pc, #376]	; (8001d34 <testSD+0x188>)
 8001bbc:	f007 f9b8 	bl	8008f30 <f_mount>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <testSD+0x26>
		printf("Failed to mount SD Card\r\n");
 8001bc6:	485c      	ldr	r0, [pc, #368]	; (8001d38 <testSD+0x18c>)
 8001bc8:	f009 fa00 	bl	800afcc <puts>
		return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e0a9      	b.n	8001d26 <testSD+0x17a>
	}

	/* Open file to write */
	ret = f_open(&fil, "/TEST.TXT", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001bd2:	2213      	movs	r2, #19
 8001bd4:	4959      	ldr	r1, [pc, #356]	; (8001d3c <testSD+0x190>)
 8001bd6:	485a      	ldr	r0, [pc, #360]	; (8001d40 <testSD+0x194>)
 8001bd8:	f007 f9f0 	bl	8008fbc <f_open>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <testSD+0x48>
		printf("Failed to open file (%i) \r\n", ret);
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	4856      	ldr	r0, [pc, #344]	; (8001d44 <testSD+0x198>)
 8001bea:	f009 f969 	bl	800aec0 <iprintf>
		return -1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e098      	b.n	8001d26 <testSD+0x17a>
	}

	if(f_getfree("", &fre_clust, &pfs) != FR_OK) {
 8001bf4:	4a54      	ldr	r2, [pc, #336]	; (8001d48 <testSD+0x19c>)
 8001bf6:	4955      	ldr	r1, [pc, #340]	; (8001d4c <testSD+0x1a0>)
 8001bf8:	4855      	ldr	r0, [pc, #340]	; (8001d50 <testSD+0x1a4>)
 8001bfa:	f008 f96a 	bl	8009ed2 <f_getfree>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <testSD+0x64>
		printf("Free space check failed\r\n");
 8001c04:	4853      	ldr	r0, [pc, #332]	; (8001d54 <testSD+0x1a8>)
 8001c06:	f009 f9e1 	bl	800afcc <puts>
		return -1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e08a      	b.n	8001d26 <testSD+0x17a>
	}

	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001c10:	4b4d      	ldr	r3, [pc, #308]	; (8001d48 <testSD+0x19c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	3b02      	subs	r3, #2
 8001c18:	4a4b      	ldr	r2, [pc, #300]	; (8001d48 <testSD+0x19c>)
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	8952      	ldrh	r2, [r2, #10]
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc86 	bl	8000534 <__aeabi_ui2d>
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <testSD+0x1ac>)
 8001c2e:	f7fe fcfb 	bl	8000628 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f7fe ffcd 	bl	8000bd8 <__aeabi_d2uiz>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a46      	ldr	r2, [pc, #280]	; (8001d5c <testSD+0x1b0>)
 8001c42:	6013      	str	r3, [r2, #0]
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001c44:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <testSD+0x19c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	895b      	ldrh	r3, [r3, #10]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <testSD+0x1a0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc6d 	bl	8000534 <__aeabi_ui2d>
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <testSD+0x1ac>)
 8001c60:	f7fe fce2 	bl	8000628 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe ffb4 	bl	8000bd8 <__aeabi_d2uiz>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <testSD+0x1b4>)
 8001c74:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if(free_space < 1) {
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <testSD+0x1b4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <testSD+0xde>
		printf("Drive is full\r\n");
 8001c7e:	4839      	ldr	r0, [pc, #228]	; (8001d64 <testSD+0x1b8>)
 8001c80:	f009 f9a4 	bl	800afcc <puts>
		return -1;
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	e04d      	b.n	8001d26 <testSD+0x17a>
	}

//	printf("SD CARD MOUNTED! TESTING R/W...\r\n");

	f_puts("TEST", &fil);
 8001c8a:	492d      	ldr	r1, [pc, #180]	; (8001d40 <testSD+0x194>)
 8001c8c:	4836      	ldr	r0, [pc, #216]	; (8001d68 <testSD+0x1bc>)
 8001c8e:	f008 fb34 	bl	800a2fa <f_puts>

	/* Close file */
	ret = f_close(&fil);
 8001c92:	482b      	ldr	r0, [pc, #172]	; (8001d40 <testSD+0x194>)
 8001c94:	f007 fecf 	bl	8009a36 <f_close>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d006      	beq.n	8001cb0 <testSD+0x104>
		printf("Failed to close file (%i) \r\n", ret);
 8001ca2:	68f9      	ldr	r1, [r7, #12]
 8001ca4:	4831      	ldr	r0, [pc, #196]	; (8001d6c <testSD+0x1c0>)
 8001ca6:	f009 f90b 	bl	800aec0 <iprintf>
		return -1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e03a      	b.n	8001d26 <testSD+0x17a>
	}

	/* Open file to read */
	ret = f_open(&fil, "/TEST.TXT", FA_READ);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4922      	ldr	r1, [pc, #136]	; (8001d3c <testSD+0x190>)
 8001cb4:	4822      	ldr	r0, [pc, #136]	; (8001d40 <testSD+0x194>)
 8001cb6:	f007 f981 	bl	8008fbc <f_open>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <testSD+0x126>
		printf("Failed to open in read mode (%i) \r\n", ret);
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	482a      	ldr	r0, [pc, #168]	; (8001d70 <testSD+0x1c4>)
 8001cc8:	f009 f8fa 	bl	800aec0 <iprintf>
		return -1;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd0:	e029      	b.n	8001d26 <testSD+0x17a>
	}

	char buffer[5];
	f_gets(buffer, sizeof(buffer), &fil);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4a1a      	ldr	r2, [pc, #104]	; (8001d40 <testSD+0x194>)
 8001cd6:	2105      	movs	r1, #5
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f008 fa5a 	bl	800a192 <f_gets>

	if (strcmp(buffer, "TEST")) {
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	4921      	ldr	r1, [pc, #132]	; (8001d68 <testSD+0x1bc>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fa7c 	bl	80001e0 <strcmp>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <testSD+0x14e>
		printf("File contents MISMATCH. FAIL R/W test\r\n");
 8001cee:	4821      	ldr	r0, [pc, #132]	; (8001d74 <testSD+0x1c8>)
 8001cf0:	f009 f96c 	bl	800afcc <puts>
		return -1;
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	e015      	b.n	8001d26 <testSD+0x17a>
	}

//	printf("PASSED: read file contents\r\n");

	/* Close file */
	if(f_close(&fil) != FR_OK) {
 8001cfa:	4811      	ldr	r0, [pc, #68]	; (8001d40 <testSD+0x194>)
 8001cfc:	f007 fe9b 	bl	8009a36 <f_close>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <testSD+0x166>
		printf("Failed to close\r\n");
 8001d06:	481c      	ldr	r0, [pc, #112]	; (8001d78 <testSD+0x1cc>)
 8001d08:	f009 f960 	bl	800afcc <puts>
		return -1;
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	e009      	b.n	8001d26 <testSD+0x17a>
	}

	if(f_unlink("test.txt") != FR_OK) {
 8001d12:	481a      	ldr	r0, [pc, #104]	; (8001d7c <testSD+0x1d0>)
 8001d14:	f008 f992 	bl	800a03c <f_unlink>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <testSD+0x178>
		printf("Failed to delete test file \r\n");
 8001d1e:	4818      	ldr	r0, [pc, #96]	; (8001d80 <testSD+0x1d4>)
 8001d20:	f009 f954 	bl	800afcc <puts>
	}

	return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	0800d150 	.word	0x0800d150
 8001d34:	20000400 	.word	0x20000400
 8001d38:	0800d154 	.word	0x0800d154
 8001d3c:	0800d170 	.word	0x0800d170
 8001d40:	2000083c 	.word	0x2000083c
 8001d44:	0800d17c 	.word	0x0800d17c
 8001d48:	20000838 	.word	0x20000838
 8001d4c:	20000c6c 	.word	0x20000c6c
 8001d50:	0800d198 	.word	0x0800d198
 8001d54:	0800d19c 	.word	0x0800d19c
 8001d58:	3fe00000 	.word	0x3fe00000
 8001d5c:	20000c70 	.word	0x20000c70
 8001d60:	20000c74 	.word	0x20000c74
 8001d64:	0800d1b8 	.word	0x0800d1b8
 8001d68:	0800d1c8 	.word	0x0800d1c8
 8001d6c:	0800d1d0 	.word	0x0800d1d0
 8001d70:	0800d1f0 	.word	0x0800d1f0
 8001d74:	0800d214 	.word	0x0800d214
 8001d78:	0800d23c 	.word	0x0800d23c
 8001d7c:	0800d250 	.word	0x0800d250
 8001d80:	0800d25c 	.word	0x0800d25c

08001d84 <write_quartet>:

void write_quartet(unsigned long i) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	FRESULT fr;

	uint8_t buf[1];
	buf[0] = i % 0x100;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	733b      	strb	r3, [r7, #12]
	fr = f_write(&fil, buf, sizeof(uint8_t), &bw);
 8001d92:	f107 010c 	add.w	r1, r7, #12
 8001d96:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <write_quartet+0xc4>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	482c      	ldr	r0, [pc, #176]	; (8001e4c <write_quartet+0xc8>)
 8001d9c:	f007 fc39 	bl	8009612 <f_write>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
	if (fr) printf("quart %i\r\n", fr);
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <write_quartet+0x30>
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4828      	ldr	r0, [pc, #160]	; (8001e50 <write_quartet+0xcc>)
 8001db0:	f009 f886 	bl	800aec0 <iprintf>
	i = i >> 8;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	607b      	str	r3, [r7, #4]

	buf[0] = i % 0x100;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	733b      	strb	r3, [r7, #12]
	fr = f_write(&fil, buf, sizeof(uint8_t), &bw);
 8001dc0:	f107 010c 	add.w	r1, r7, #12
 8001dc4:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <write_quartet+0xc4>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4820      	ldr	r0, [pc, #128]	; (8001e4c <write_quartet+0xc8>)
 8001dca:	f007 fc22 	bl	8009612 <f_write>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	73fb      	strb	r3, [r7, #15]
	if (fr) printf("quart%i\r\n", fr);
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <write_quartet+0x5e>
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	481d      	ldr	r0, [pc, #116]	; (8001e54 <write_quartet+0xd0>)
 8001dde:	f009 f86f 	bl	800aec0 <iprintf>
	i = i >> 8;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	607b      	str	r3, [r7, #4]

	buf[0] = i % 0x100;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	733b      	strb	r3, [r7, #12]
	fr = f_write(&fil, buf, sizeof(uint8_t), &bw);
 8001dee:	f107 010c 	add.w	r1, r7, #12
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <write_quartet+0xc4>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	4815      	ldr	r0, [pc, #84]	; (8001e4c <write_quartet+0xc8>)
 8001df8:	f007 fc0b 	bl	8009612 <f_write>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]
	if (fr) printf("quart%i\r\n", fr);
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d004      	beq.n	8001e10 <write_quartet+0x8c>
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4812      	ldr	r0, [pc, #72]	; (8001e54 <write_quartet+0xd0>)
 8001e0c:	f009 f858 	bl	800aec0 <iprintf>
	i = i >> 8;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	607b      	str	r3, [r7, #4]

	buf[0] = i % 0x100;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	733b      	strb	r3, [r7, #12]
	fr = f_write(&fil, buf, sizeof(uint8_t), &bw);
 8001e1c:	f107 010c 	add.w	r1, r7, #12
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <write_quartet+0xc4>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	4809      	ldr	r0, [pc, #36]	; (8001e4c <write_quartet+0xc8>)
 8001e26:	f007 fbf4 	bl	8009612 <f_write>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]
	if (fr) printf("quart%i\r\n", fr);
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <write_quartet+0xba>
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	4619      	mov	r1, r3
 8001e38:	4806      	ldr	r0, [pc, #24]	; (8001e54 <write_quartet+0xd0>)
 8001e3a:	f009 f841 	bl	800aec0 <iprintf>
}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000c84 	.word	0x20000c84
 8001e4c:	2000083c 	.word	0x2000083c
 8001e50:	0800d27c 	.word	0x0800d27c
 8001e54:	0800d288 	.word	0x0800d288

08001e58 <read_fifo_and_write_file>:

int read_fifo_and_write_file() {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0cc      	sub	sp, #304	; 0x130
 8001e5c:	af00      	add	r7, sp, #0
	uint8_t temp=0, temp_last=0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
	uint32_t length = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	static int i = 0;
	static int k = 0;
	unsigned long position = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint16_t frame_cnt = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	uint8_t remnant = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	char str[8];
	uint8_t buf[256];
	FRESULT fr;

	length = OV5462_read_fifo_length(&ov5462);
 8001e82:	48b6      	ldr	r0, [pc, #728]	; (800215c <read_fifo_and_write_file+0x304>)
 8001e84:	f7ff f986 	bl	8001194 <OV5462_read_fifo_length>
 8001e88:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
	printf("Buffer length: %u\r\n", length);
 8001e8c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001e90:	48b3      	ldr	r0, [pc, #716]	; (8002160 <read_fifo_and_write_file+0x308>)
 8001e92:	f009 f815 	bl	800aec0 <iprintf>

	if (length >= MAX_FIFO_LENGTH) {
 8001e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e9a:	4ab2      	ldr	r2, [pc, #712]	; (8002164 <read_fifo_and_write_file+0x30c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d905      	bls.n	8001eac <read_fifo_and_write_file+0x54>
		printf("Buffer too large\r\n");
 8001ea0:	48b1      	ldr	r0, [pc, #708]	; (8002168 <read_fifo_and_write_file+0x310>)
 8001ea2:	f009 f893 	bl	800afcc <puts>
		return -1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e297      	b.n	80023dc <read_fifo_and_write_file+0x584>
	}

	if (length == 0) {
 8001eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <read_fifo_and_write_file+0x68>
		printf("Buffer empty\r\n");
 8001eb4:	48ad      	ldr	r0, [pc, #692]	; (800216c <read_fifo_and_write_file+0x314>)
 8001eb6:	f009 f889 	bl	800afcc <puts>
		return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e28d      	b.n	80023dc <read_fifo_and_write_file+0x584>
	}

	movi_size = 0;
 8001ec0:	4bab      	ldr	r3, [pc, #684]	; (8002170 <read_fifo_and_write_file+0x318>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]


	fr = f_open(&fil, "/COOL.AVI", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ec6:	2213      	movs	r2, #19
 8001ec8:	49aa      	ldr	r1, [pc, #680]	; (8002174 <read_fifo_and_write_file+0x31c>)
 8001eca:	48ab      	ldr	r0, [pc, #684]	; (8002178 <read_fifo_and_write_file+0x320>)
 8001ecc:	f007 f876 	bl	8008fbc <f_open>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	if (fr) {
 8001ed6:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <read_fifo_and_write_file+0x98>
		printf("couldn't open file (%i)", fr);
 8001ede:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	48a5      	ldr	r0, [pc, #660]	; (800217c <read_fifo_and_write_file+0x324>)
 8001ee6:	f008 ffeb 	bl	800aec0 <iprintf>
		return -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e275      	b.n	80023dc <read_fifo_and_write_file+0x584>
	}

	for (i = 0; i < AVIOFFSET; ++i) {
 8001ef0:	4ba3      	ldr	r3, [pc, #652]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e011      	b.n	8001f1c <read_fifo_and_write_file+0xc4>
		buf[i] = avi_header[i];
 8001ef8:	4ba1      	ldr	r3, [pc, #644]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4aa1      	ldr	r2, [pc, #644]	; (8002184 <read_fifo_and_write_file+0x32c>)
 8001efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f02:	4b9f      	ldr	r3, [pc, #636]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b2d1      	uxtb	r1, r2
 8001f08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001f0c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001f10:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < AVIOFFSET; ++i) {
 8001f12:	4b9b      	ldr	r3, [pc, #620]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a99      	ldr	r2, [pc, #612]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b98      	ldr	r3, [pc, #608]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2bef      	cmp	r3, #239	; 0xef
 8001f22:	dde9      	ble.n	8001ef8 <read_fifo_and_write_file+0xa0>
	}

	fr = f_write(&fil, buf, sizeof(uint8_t)*(AVIOFFSET), &bw);
 8001f24:	1d39      	adds	r1, r7, #4
 8001f26:	4b98      	ldr	r3, [pc, #608]	; (8002188 <read_fifo_and_write_file+0x330>)
 8001f28:	22f0      	movs	r2, #240	; 0xf0
 8001f2a:	4893      	ldr	r0, [pc, #588]	; (8002178 <read_fifo_and_write_file+0x320>)
 8001f2c:	f007 fb71 	bl	8009612 <f_write>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	if (fr) printf("%i\r\n", fr);
 8001f36:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <read_fifo_and_write_file+0xf2>
 8001f3e:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8001f42:	4619      	mov	r1, r3
 8001f44:	4891      	ldr	r0, [pc, #580]	; (800218c <read_fifo_and_write_file+0x334>)
 8001f46:	f008 ffbb 	bl	800aec0 <iprintf>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	4890      	ldr	r0, [pc, #576]	; (8002190 <read_fifo_and_write_file+0x338>)
 8001f50:	f001 fe9e 	bl	8003c90 <HAL_GPIO_WritePin>
	buf[0] = BURST_FIFO_READ;
 8001f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f5c:	223c      	movs	r2, #60	; 0x3c
 8001f5e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(ov5462.hspi, buf, 1, 100); // send FIFO burst command
 8001f60:	4b7e      	ldr	r3, [pc, #504]	; (800215c <read_fifo_and_write_file+0x304>)
 8001f62:	6858      	ldr	r0, [r3, #4]
 8001f64:	1d39      	adds	r1, r7, #4
 8001f66:	2364      	movs	r3, #100	; 0x64
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f003 fb62 	bl	8005632 <HAL_SPI_Transmit>

	i = 0;
 8001f6e:	4b84      	ldr	r3, [pc, #528]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

	while (length--) {
 8001f74:	e192      	b.n	800229c <read_fifo_and_write_file+0x444>
		temp_last = temp;
 8001f76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f7a:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
		SPI_OptimizedReadByte(&temp);
 8001f7e:	f207 130f 	addw	r3, r7, #271	; 0x10f
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f92a 	bl	80011dc <SPI_OptimizedReadByte>

		if ((temp == 0xD9) && (temp == 0xFF)) { // end of image
 8001f88:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f8c:	2bd9      	cmp	r3, #217	; 0xd9
 8001f8e:	f040 80b9 	bne.w	8002104 <read_fifo_and_write_file+0x2ac>
 8001f92:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f96:	2bff      	cmp	r3, #255	; 0xff
 8001f98:	f040 80b4 	bne.w	8002104 <read_fifo_and_write_file+0x2ac>
			buf[i++] = temp;
 8001f9c:	4b78      	ldr	r3, [pc, #480]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	4977      	ldr	r1, [pc, #476]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001fa4:	600a      	str	r2, [r1, #0]
 8001fa6:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 8001faa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001fae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001fb2:	54d1      	strb	r1, [r2, r3]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	4875      	ldr	r0, [pc, #468]	; (8002190 <read_fifo_and_write_file+0x338>)
 8001fba:	f001 fe69 	bl	8003c90 <HAL_GPIO_WritePin>
			fr = f_write(&fil, buf, sizeof(uint8_t)*i, &bw);
 8001fbe:	4b70      	ldr	r3, [pc, #448]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	1d39      	adds	r1, r7, #4
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <read_fifo_and_write_file+0x330>)
 8001fc8:	486b      	ldr	r0, [pc, #428]	; (8002178 <read_fifo_and_write_file+0x320>)
 8001fca:	f007 fb22 	bl	8009612 <f_write>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			if (fr) return fr;
 8001fd4:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <read_fifo_and_write_file+0x18a>
 8001fdc:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8001fe0:	e1fc      	b.n	80023dc <read_fifo_and_write_file+0x584>
			jpeg_size += i;
 8001fe2:	4b6c      	ldr	r3, [pc, #432]	; (8002194 <read_fifo_and_write_file+0x33c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a66      	ldr	r2, [pc, #408]	; (8002180 <read_fifo_and_write_file+0x328>)
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a69      	ldr	r2, [pc, #420]	; (8002194 <read_fifo_and_write_file+0x33c>)
 8001fee:	6013      	str	r3, [r2, #0]
			remnant =  (4 - (jpeg_size & 0x00000003)) & 0x00000003;
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <read_fifo_and_write_file+0x33c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			jpeg_size = jpeg_size + remnant;
 8002002:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <read_fifo_and_write_file+0x33c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a61      	ldr	r2, [pc, #388]	; (8002194 <read_fifo_and_write_file+0x33c>)
 800200e:	6013      	str	r3, [r2, #0]
			movi_size += jpeg_size;
 8002010:	4b57      	ldr	r3, [pc, #348]	; (8002170 <read_fifo_and_write_file+0x318>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b5f      	ldr	r3, [pc, #380]	; (8002194 <read_fifo_and_write_file+0x33c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4413      	add	r3, r2
 800201a:	4a55      	ldr	r2, [pc, #340]	; (8002170 <read_fifo_and_write_file+0x318>)
 800201c:	6013      	str	r3, [r2, #0]
			if (remnant > 0) {
 800201e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <read_fifo_and_write_file+0x1dc>
				f_write(&fil, zero_buf, sizeof(uint8_t)*remnant, &bw);
 8002026:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 800202a:	4b57      	ldr	r3, [pc, #348]	; (8002188 <read_fifo_and_write_file+0x330>)
 800202c:	495a      	ldr	r1, [pc, #360]	; (8002198 <read_fifo_and_write_file+0x340>)
 800202e:	4852      	ldr	r0, [pc, #328]	; (8002178 <read_fifo_and_write_file+0x320>)
 8002030:	f007 faef 	bl	8009612 <f_write>
			}

			position = f_tell(&fil);
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <read_fifo_and_write_file+0x320>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			fr = f_lseek(&fil, position - 4 - jpeg_size);
 800203c:	4b55      	ldr	r3, [pc, #340]	; (8002194 <read_fifo_and_write_file+0x33c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	3b04      	subs	r3, #4
 8002048:	4619      	mov	r1, r3
 800204a:	484b      	ldr	r0, [pc, #300]	; (8002178 <read_fifo_and_write_file+0x320>)
 800204c:	f007 fd1d 	bl	8009a8a <f_lseek>
 8002050:	4603      	mov	r3, r0
 8002052:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			if (fr) return fr;
 8002056:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <read_fifo_and_write_file+0x20c>
 800205e:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8002062:	e1bb      	b.n	80023dc <read_fifo_and_write_file+0x584>
			write_quartet(jpeg_size);
 8002064:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <read_fifo_and_write_file+0x33c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fe8b 	bl	8001d84 <write_quartet>

			position = f_tell(&fil);
 800206e:	4b42      	ldr	r3, [pc, #264]	; (8002178 <read_fifo_and_write_file+0x320>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			fr = f_lseek(&fil, position + 6);
 8002076:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800207a:	3306      	adds	r3, #6
 800207c:	4619      	mov	r1, r3
 800207e:	483e      	ldr	r0, [pc, #248]	; (8002178 <read_fifo_and_write_file+0x320>)
 8002080:	f007 fd03 	bl	8009a8a <f_lseek>
 8002084:	4603      	mov	r3, r0
 8002086:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			if (fr) return fr;
 800208a:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <read_fifo_and_write_file+0x240>
 8002092:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8002096:	e1a1      	b.n	80023dc <read_fifo_and_write_file+0x584>
			f_puts("AVI1", &fil);
 8002098:	4937      	ldr	r1, [pc, #220]	; (8002178 <read_fifo_and_write_file+0x320>)
 800209a:	4840      	ldr	r0, [pc, #256]	; (800219c <read_fifo_and_write_file+0x344>)
 800209c:	f008 f92d 	bl	800a2fa <f_puts>
			position = f_tell(&fil);
 80020a0:	4b35      	ldr	r3, [pc, #212]	; (8002178 <read_fifo_and_write_file+0x320>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

			fr = f_lseek(&fil, position + jpeg_size - 10);
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <read_fifo_and_write_file+0x33c>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020b0:	4413      	add	r3, r2
 80020b2:	3b0a      	subs	r3, #10
 80020b4:	4619      	mov	r1, r3
 80020b6:	4830      	ldr	r0, [pc, #192]	; (8002178 <read_fifo_and_write_file+0x320>)
 80020b8:	f007 fce7 	bl	8009a8a <f_lseek>
 80020bc:	4603      	mov	r3, r0
 80020be:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			if (fr) return fr;
 80020c2:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <read_fifo_and_write_file+0x278>
 80020ca:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80020ce:	e185      	b.n	80023dc <read_fifo_and_write_file+0x584>
			is_header = 0;
 80020d0:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <read_fifo_and_write_file+0x348>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
			frame_cnt++;
 80020d6:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80020da:	3301      	adds	r3, #1
 80020dc:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2110      	movs	r1, #16
 80020e4:	482a      	ldr	r0, [pc, #168]	; (8002190 <read_fifo_and_write_file+0x338>)
 80020e6:	f001 fdd3 	bl	8003c90 <HAL_GPIO_WritePin>
			buf[0] = BURST_FIFO_READ;
 80020ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020f2:	223c      	movs	r2, #60	; 0x3c
 80020f4:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(ov5462.hspi, buf, 1, 100); // send FIFO burst command
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <read_fifo_and_write_file+0x304>)
 80020f8:	6858      	ldr	r0, [r3, #4]
 80020fa:	1d39      	adds	r1, r7, #4
 80020fc:	2364      	movs	r3, #100	; 0x64
 80020fe:	2201      	movs	r2, #1
 8002100:	f003 fa97 	bl	8005632 <HAL_SPI_Transmit>
		}

		if (is_header) {
 8002104:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <read_fifo_and_write_file+0x348>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d073      	beq.n	80021f4 <read_fifo_and_write_file+0x39c>
			if (i < 256) {
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <read_fifo_and_write_file+0x328>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2bff      	cmp	r3, #255	; 0xff
 8002112:	dc0c      	bgt.n	800212e <read_fifo_and_write_file+0x2d6>
				buf[i++] = temp;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <read_fifo_and_write_file+0x328>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	4919      	ldr	r1, [pc, #100]	; (8002180 <read_fifo_and_write_file+0x328>)
 800211c:	600a      	str	r2, [r1, #0]
 800211e:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 8002122:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002126:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800212a:	54d1      	strb	r1, [r2, r3]
 800212c:	e0b6      	b.n	800229c <read_fifo_and_write_file+0x444>
			} else {
				HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 800212e:	2201      	movs	r2, #1
 8002130:	2110      	movs	r1, #16
 8002132:	4817      	ldr	r0, [pc, #92]	; (8002190 <read_fifo_and_write_file+0x338>)
 8002134:	f001 fdac 	bl	8003c90 <HAL_GPIO_WritePin>
				fr = f_write(&fil, buf, sizeof(uint8_t)*256, &bw);
 8002138:	1d39      	adds	r1, r7, #4
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <read_fifo_and_write_file+0x330>)
 800213c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002140:	480d      	ldr	r0, [pc, #52]	; (8002178 <read_fifo_and_write_file+0x320>)
 8002142:	f007 fa66 	bl	8009612 <f_write>
 8002146:	4603      	mov	r3, r0
 8002148:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
				if (fr) return fr;
 800214c:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8002150:	2b00      	cmp	r3, #0
 8002152:	d027      	beq.n	80021a4 <read_fifo_and_write_file+0x34c>
 8002154:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8002158:	e140      	b.n	80023dc <read_fifo_and_write_file+0x584>
 800215a:	bf00      	nop
 800215c:	20000c78 	.word	0x20000c78
 8002160:	0800d294 	.word	0x0800d294
 8002164:	007ffffe 	.word	0x007ffffe
 8002168:	0800d2a8 	.word	0x0800d2a8
 800216c:	0800d2bc 	.word	0x0800d2bc
 8002170:	20000c88 	.word	0x20000c88
 8002174:	0800d2cc 	.word	0x0800d2cc
 8002178:	2000083c 	.word	0x2000083c
 800217c:	0800d2d8 	.word	0x0800d2d8
 8002180:	20000c90 	.word	0x20000c90
 8002184:	0800dee8 	.word	0x0800dee8
 8002188:	20000c84 	.word	0x20000c84
 800218c:	0800d2f0 	.word	0x0800d2f0
 8002190:	40020800 	.word	0x40020800
 8002194:	20000c8c 	.word	0x20000c8c
 8002198:	0800dee4 	.word	0x0800dee4
 800219c:	0800d2f8 	.word	0x0800d2f8
 80021a0:	20000c80 	.word	0x20000c80
				i = 0;
 80021a4:	4b90      	ldr	r3, [pc, #576]	; (80023e8 <read_fifo_and_write_file+0x590>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
				buf[i++] = temp;
 80021aa:	4b8f      	ldr	r3, [pc, #572]	; (80023e8 <read_fifo_and_write_file+0x590>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	498d      	ldr	r1, [pc, #564]	; (80023e8 <read_fifo_and_write_file+0x590>)
 80021b2:	600a      	str	r2, [r1, #0]
 80021b4:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 80021b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80021bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80021c0:	54d1      	strb	r1, [r2, r3]
				HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2110      	movs	r1, #16
 80021c6:	4889      	ldr	r0, [pc, #548]	; (80023ec <read_fifo_and_write_file+0x594>)
 80021c8:	f001 fd62 	bl	8003c90 <HAL_GPIO_WritePin>
				buf[0] = BURST_FIFO_READ;
 80021cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80021d4:	223c      	movs	r2, #60	; 0x3c
 80021d6:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(ov5462.hspi, buf, 1, 100); // send FIFO burst command
 80021d8:	4b85      	ldr	r3, [pc, #532]	; (80023f0 <read_fifo_and_write_file+0x598>)
 80021da:	6858      	ldr	r0, [r3, #4]
 80021dc:	1d39      	adds	r1, r7, #4
 80021de:	2364      	movs	r3, #100	; 0x64
 80021e0:	2201      	movs	r2, #1
 80021e2:	f003 fa26 	bl	8005632 <HAL_SPI_Transmit>
				jpeg_size += 256;
 80021e6:	4b83      	ldr	r3, [pc, #524]	; (80023f4 <read_fifo_and_write_file+0x59c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80021ee:	4a81      	ldr	r2, [pc, #516]	; (80023f4 <read_fifo_and_write_file+0x59c>)
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e053      	b.n	800229c <read_fifo_and_write_file+0x444>
			}
		} else if ((temp == 0xD8) && (temp_last == 0xFF)) {
 80021f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021f8:	2bd8      	cmp	r3, #216	; 0xd8
 80021fa:	d14f      	bne.n	800229c <read_fifo_and_write_file+0x444>
 80021fc:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8002200:	2bff      	cmp	r3, #255	; 0xff
 8002202:	d14b      	bne.n	800229c <read_fifo_and_write_file+0x444>
			is_header = 1;
 8002204:	4b7c      	ldr	r3, [pc, #496]	; (80023f8 <read_fifo_and_write_file+0x5a0>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	2110      	movs	r1, #16
 800220e:	4877      	ldr	r0, [pc, #476]	; (80023ec <read_fifo_and_write_file+0x594>)
 8002210:	f001 fd3e 	bl	8003c90 <HAL_GPIO_WritePin>
			f_puts("00dc", &fil);
 8002214:	4979      	ldr	r1, [pc, #484]	; (80023fc <read_fifo_and_write_file+0x5a4>)
 8002216:	487a      	ldr	r0, [pc, #488]	; (8002400 <read_fifo_and_write_file+0x5a8>)
 8002218:	f008 f86f 	bl	800a2fa <f_puts>
			fr = f_write(&fil, zero_buf, sizeof(uint8_t)*4, &bw);
 800221c:	4b79      	ldr	r3, [pc, #484]	; (8002404 <read_fifo_and_write_file+0x5ac>)
 800221e:	2204      	movs	r2, #4
 8002220:	4979      	ldr	r1, [pc, #484]	; (8002408 <read_fifo_and_write_file+0x5b0>)
 8002222:	4876      	ldr	r0, [pc, #472]	; (80023fc <read_fifo_and_write_file+0x5a4>)
 8002224:	f007 f9f5 	bl	8009612 <f_write>
 8002228:	4603      	mov	r3, r0
 800222a:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			if (fr) return fr;
 800222e:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <read_fifo_and_write_file+0x3e4>
 8002236:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800223a:	e0cf      	b.n	80023dc <read_fifo_and_write_file+0x584>
			i = 0;
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <read_fifo_and_write_file+0x590>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
			jpeg_size = 0;
 8002242:	4b6c      	ldr	r3, [pc, #432]	; (80023f4 <read_fifo_and_write_file+0x59c>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8002248:	2200      	movs	r2, #0
 800224a:	2110      	movs	r1, #16
 800224c:	4867      	ldr	r0, [pc, #412]	; (80023ec <read_fifo_and_write_file+0x594>)
 800224e:	f001 fd1f 	bl	8003c90 <HAL_GPIO_WritePin>
			buf[0] = BURST_FIFO_READ;
 8002252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800225a:	223c      	movs	r2, #60	; 0x3c
 800225c:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(ov5462.hspi, buf, 1, 100); // send FIFO burst command
 800225e:	4b64      	ldr	r3, [pc, #400]	; (80023f0 <read_fifo_and_write_file+0x598>)
 8002260:	6858      	ldr	r0, [r3, #4]
 8002262:	1d39      	adds	r1, r7, #4
 8002264:	2364      	movs	r3, #100	; 0x64
 8002266:	2201      	movs	r2, #1
 8002268:	f003 f9e3 	bl	8005632 <HAL_SPI_Transmit>
			buf[i++] = temp_last;
 800226c:	4b5e      	ldr	r3, [pc, #376]	; (80023e8 <read_fifo_and_write_file+0x590>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	495d      	ldr	r1, [pc, #372]	; (80023e8 <read_fifo_and_write_file+0x590>)
 8002274:	600a      	str	r2, [r1, #0]
 8002276:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800227a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800227e:	f897 1129 	ldrb.w	r1, [r7, #297]	; 0x129
 8002282:	54d1      	strb	r1, [r2, r3]
			buf[i++] = temp;
 8002284:	4b58      	ldr	r3, [pc, #352]	; (80023e8 <read_fifo_and_write_file+0x590>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	4957      	ldr	r1, [pc, #348]	; (80023e8 <read_fifo_and_write_file+0x590>)
 800228c:	600a      	str	r2, [r1, #0]
 800228e:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 8002292:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002296:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800229a:	54d1      	strb	r1, [r2, r3]
	while (length--) {
 800229c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f47f ae65 	bne.w	8001f76 <read_fifo_and_write_file+0x11e>

		}
	}

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 80022ac:	2201      	movs	r2, #1
 80022ae:	2110      	movs	r1, #16
 80022b0:	484e      	ldr	r0, [pc, #312]	; (80023ec <read_fifo_and_write_file+0x594>)
 80022b2:	f001 fced 	bl	8003c90 <HAL_GPIO_WritePin>
	fr = f_lseek(&fil, 4);
 80022b6:	2104      	movs	r1, #4
 80022b8:	4850      	ldr	r0, [pc, #320]	; (80023fc <read_fifo_and_write_file+0x5a4>)
 80022ba:	f007 fbe6 	bl	8009a8a <f_lseek>
 80022be:	4603      	mov	r3, r0
 80022c0:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	if (fr) return fr;
 80022c4:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <read_fifo_and_write_file+0x47a>
 80022cc:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80022d0:	e084      	b.n	80023dc <read_fifo_and_write_file+0x584>
	write_quartet(movi_size + 12*frame_cnt+4);
 80022d2:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	461a      	mov	r2, r3
 80022e0:	4b4a      	ldr	r3, [pc, #296]	; (800240c <read_fifo_and_write_file+0x5b4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	3304      	adds	r3, #4
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fd4b 	bl	8001d84 <write_quartet>
	unsigned long us_per_frame = 1000000 / rate;
 80022ee:	4b48      	ldr	r3, [pc, #288]	; (8002410 <read_fifo_and_write_file+0x5b8>)
 80022f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	fr = f_lseek(&fil, 0x20);
 80022f4:	2120      	movs	r1, #32
 80022f6:	4841      	ldr	r0, [pc, #260]	; (80023fc <read_fifo_and_write_file+0x5a4>)
 80022f8:	f007 fbc7 	bl	8009a8a <f_lseek>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	if (fr) return fr;
 8002302:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <read_fifo_and_write_file+0x4b8>
 800230a:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800230e:	e065      	b.n	80023dc <read_fifo_and_write_file+0x584>
	write_quartet(us_per_frame);
 8002310:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002314:	f7ff fd36 	bl	8001d84 <write_quartet>
	unsigned long max_bytes_per_sec = movi_size * rate/ frame_cnt;
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <read_fifo_and_write_file+0x5b4>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	461a      	mov	r2, r3
 8002326:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	fr = f_lseek(&fil, 0x24);
 8002332:	2124      	movs	r1, #36	; 0x24
 8002334:	4831      	ldr	r0, [pc, #196]	; (80023fc <read_fifo_and_write_file+0x5a4>)
 8002336:	f007 fba8 	bl	8009a8a <f_lseek>
 800233a:	4603      	mov	r3, r0
 800233c:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	if (fr) return fr;
 8002340:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <read_fifo_and_write_file+0x4f6>
 8002348:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800234c:	e046      	b.n	80023dc <read_fifo_and_write_file+0x584>
	write_quartet(max_bytes_per_sec);
 800234e:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8002352:	f7ff fd17 	bl	8001d84 <write_quartet>
	unsigned long tot_frames = frame_cnt;
 8002356:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800235a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	fr = f_lseek(&fil, 0x30);
 800235e:	2130      	movs	r1, #48	; 0x30
 8002360:	4826      	ldr	r0, [pc, #152]	; (80023fc <read_fifo_and_write_file+0x5a4>)
 8002362:	f007 fb92 	bl	8009a8a <f_lseek>
 8002366:	4603      	mov	r3, r0
 8002368:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	if (fr) return fr;
 800236c:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <read_fifo_and_write_file+0x522>
 8002374:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8002378:	e030      	b.n	80023dc <read_fifo_and_write_file+0x584>
	write_quartet(tot_frames);
 800237a:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800237e:	f7ff fd01 	bl	8001d84 <write_quartet>

	unsigned long frames = frame_cnt;
 8002382:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002386:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	fr = f_lseek(&fil, 0xe0);
 800238a:	21e0      	movs	r1, #224	; 0xe0
 800238c:	481b      	ldr	r0, [pc, #108]	; (80023fc <read_fifo_and_write_file+0x5a4>)
 800238e:	f007 fb7c 	bl	8009a8a <f_lseek>
 8002392:	4603      	mov	r3, r0
 8002394:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	if (fr) return fr;
 8002398:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <read_fifo_and_write_file+0x54e>
 80023a0:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80023a4:	e01a      	b.n	80023dc <read_fifo_and_write_file+0x584>
	write_quartet(frames);
 80023a6:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80023aa:	f7ff fceb 	bl	8001d84 <write_quartet>
	fr = f_lseek(&fil, 0xe8);
 80023ae:	21e8      	movs	r1, #232	; 0xe8
 80023b0:	4812      	ldr	r0, [pc, #72]	; (80023fc <read_fifo_and_write_file+0x5a4>)
 80023b2:	f007 fb6a 	bl	8009a8a <f_lseek>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	if (fr) return fr;
 80023bc:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <read_fifo_and_write_file+0x572>
 80023c4:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80023c8:	e008      	b.n	80023dc <read_fifo_and_write_file+0x584>
	write_quartet(movi_size);
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <read_fifo_and_write_file+0x5b4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fcd8 	bl	8001d84 <write_quartet>
	is_header = 0;
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <read_fifo_and_write_file+0x5a0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]

	return 0;
 80023da:	2300      	movs	r3, #0



}
 80023dc:	4618      	mov	r0, r3
 80023de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000c90 	.word	0x20000c90
 80023ec:	40020800 	.word	0x40020800
 80023f0:	20000c78 	.word	0x20000c78
 80023f4:	20000c8c 	.word	0x20000c8c
 80023f8:	20000c80 	.word	0x20000c80
 80023fc:	2000083c 	.word	0x2000083c
 8002400:	0800d300 	.word	0x0800d300
 8002404:	20000c84 	.word	0x20000c84
 8002408:	0800dee4 	.word	0x0800dee4
 800240c:	20000c88 	.word	0x20000c88
 8002410:	000186a0 	.word	0x000186a0

08002414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241a:	f000 fed7 	bl	80031cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800241e:	f000 f931 	bl	8002684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002422:	f000 fae9 	bl	80029f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002426:	f000 f9eb 	bl	8002800 <MX_I2C1_Init>
  MX_SPI2_Init();
 800242a:	f000 fa4d 	bl	80028c8 <MX_SPI2_Init>
  MX_SPI3_Init();
 800242e:	f000 fa81 	bl	8002934 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8002432:	f000 fab7 	bl	80029a4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002436:	f004 f9dd 	bl	80067f4 <MX_FATFS_Init>
  MX_ADC1_Init();
 800243a:	f000 f98f 	bl	800275c <MX_ADC1_Init>
  MX_SPI1_Init();
 800243e:	f000 fa0d 	bl	800285c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002442:	2201      	movs	r2, #1
 8002444:	2110      	movs	r1, #16
 8002446:	487b      	ldr	r0, [pc, #492]	; (8002634 <main+0x220>)
 8002448:	f001 fc22 	bl	8003c90 <HAL_GPIO_WritePin>
  	uint8_t buf[1] = { 0x00 }; // dummy write
 800244c:	2300      	movs	r3, #0
 800244e:	703b      	strb	r3, [r7, #0]
  	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8002450:	4639      	mov	r1, r7
 8002452:	2364      	movs	r3, #100	; 0x64
 8002454:	2201      	movs	r2, #1
 8002456:	4878      	ldr	r0, [pc, #480]	; (8002638 <main+0x224>)
 8002458:	f003 f8eb 	bl	8005632 <HAL_SPI_Transmit>

  	ov5462.hi2c = &hi2c1;
 800245c:	4b77      	ldr	r3, [pc, #476]	; (800263c <main+0x228>)
 800245e:	4a78      	ldr	r2, [pc, #480]	; (8002640 <main+0x22c>)
 8002460:	601a      	str	r2, [r3, #0]
	ov5462.hspi = &hspi1;
 8002462:	4b76      	ldr	r3, [pc, #472]	; (800263c <main+0x228>)
 8002464:	4a74      	ldr	r2, [pc, #464]	; (8002638 <main+0x224>)
 8002466:	605a      	str	r2, [r3, #4]

	FRESULT fr;

  	HAL_Delay(1000);
 8002468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800246c:	f000 ff20 	bl	80032b0 <HAL_Delay>

  	if(testSD()) {
 8002470:	f7ff fb9c 	bl	8001bac <testSD>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <main+0x70>
  		printf("SD test FAIL! Aborting...\r\n");
 800247a:	4872      	ldr	r0, [pc, #456]	; (8002644 <main+0x230>)
 800247c:	f008 fda6 	bl	800afcc <puts>
  		return 0;
 8002480:	2300      	movs	r3, #0
 8002482:	e0d2      	b.n	800262a <main+0x216>
  	} else {
  		printf("SD test PASS!\r\n");
 8002484:	4870      	ldr	r0, [pc, #448]	; (8002648 <main+0x234>)
 8002486:	f008 fda1 	bl	800afcc <puts>
  	}

  	while (1) {
  		OV5462_write_spi_reg(&ov5462, 0x00, 0x25);
 800248a:	2225      	movs	r2, #37	; 0x25
 800248c:	2100      	movs	r1, #0
 800248e:	486b      	ldr	r0, [pc, #428]	; (800263c <main+0x228>)
 8002490:	f7fe fdc0 	bl	8001014 <OV5462_write_spi_reg>
  		uint8_t tmp = OV5462_read_spi_reg(&ov5462, 0x00);
 8002494:	2100      	movs	r1, #0
 8002496:	4869      	ldr	r0, [pc, #420]	; (800263c <main+0x228>)
 8002498:	f7fe fdec 	bl	8001074 <OV5462_read_spi_reg>
 800249c:	4603      	mov	r3, r0
 800249e:	75bb      	strb	r3, [r7, #22]

  		if (tmp == 0x25) {
 80024a0:	7dbb      	ldrb	r3, [r7, #22]
 80024a2:	2b25      	cmp	r3, #37	; 0x25
 80024a4:	d103      	bne.n	80024ae <main+0x9a>
  		printf("SPI Test PASS!\r\n");
 80024a6:	4869      	ldr	r0, [pc, #420]	; (800264c <main+0x238>)
 80024a8:	f008 fd90 	bl	800afcc <puts>
  		break; // continue to program
 80024ac:	e007      	b.n	80024be <main+0xaa>
  		} else {
  		printf("SPI Test FAIL!\r\n");
 80024ae:	4868      	ldr	r0, [pc, #416]	; (8002650 <main+0x23c>)
 80024b0:	f008 fd8c 	bl	800afcc <puts>
  		HAL_Delay(1000);
 80024b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024b8:	f000 fefa 	bl	80032b0 <HAL_Delay>
  	while (1) {
 80024bc:	e7e5      	b.n	800248a <main+0x76>
  		}
  	}

  	while (1) {
  		uint8_t upper = OV5462_read_i2c_reg(&ov5462, CHIPID_UPPER);
 80024be:	f243 010a 	movw	r1, #12298	; 0x300a
 80024c2:	485e      	ldr	r0, [pc, #376]	; (800263c <main+0x228>)
 80024c4:	f7fe fd7e 	bl	8000fc4 <OV5462_read_i2c_reg>
 80024c8:	4603      	mov	r3, r0
 80024ca:	757b      	strb	r3, [r7, #21]
  		uint8_t lower = OV5462_read_i2c_reg(&ov5462, CHIPID_LOWER);
 80024cc:	f243 010b 	movw	r1, #12299	; 0x300b
 80024d0:	485a      	ldr	r0, [pc, #360]	; (800263c <main+0x228>)
 80024d2:	f7fe fd77 	bl	8000fc4 <OV5462_read_i2c_reg>
 80024d6:	4603      	mov	r3, r0
 80024d8:	753b      	strb	r3, [r7, #20]

  		if (upper == 0x56 && lower == 0x42) {
 80024da:	7d7b      	ldrb	r3, [r7, #21]
 80024dc:	2b56      	cmp	r3, #86	; 0x56
 80024de:	d10d      	bne.n	80024fc <main+0xe8>
 80024e0:	7d3b      	ldrb	r3, [r7, #20]
 80024e2:	2b42      	cmp	r3, #66	; 0x42
 80024e4:	d10a      	bne.n	80024fc <main+0xe8>
  			printf("I2C Test PASS!\r\n");
 80024e6:	485b      	ldr	r0, [pc, #364]	; (8002654 <main+0x240>)
 80024e8:	f008 fd70 	bl	800afcc <puts>
  			break; // continue to program
 80024ec:	bf00      	nop
  			HAL_Delay(1000);
  		}
  	}

  	// camera init (sets to JPEG mode)
  	if (OV5462_init(&ov5462)) {
 80024ee:	4853      	ldr	r0, [pc, #332]	; (800263c <main+0x228>)
 80024f0:	f7fe fdea 	bl	80010c8 <OV5462_init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <main+0xfe>
 80024fa:	e007      	b.n	800250c <main+0xf8>
  			printf("I2C Test FAIL!\r\n");
 80024fc:	4856      	ldr	r0, [pc, #344]	; (8002658 <main+0x244>)
 80024fe:	f008 fd65 	bl	800afcc <puts>
  			HAL_Delay(1000);
 8002502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002506:	f000 fed3 	bl	80032b0 <HAL_Delay>
  	while (1) {
 800250a:	e7d8      	b.n	80024be <main+0xaa>
  		printf("Init fail!\r\n");
 800250c:	4853      	ldr	r0, [pc, #332]	; (800265c <main+0x248>)
 800250e:	f008 fd5d 	bl	800afcc <puts>
  	}

  	// clear fifo
  	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8002512:	2201      	movs	r2, #1
 8002514:	2104      	movs	r1, #4
 8002516:	4849      	ldr	r0, [pc, #292]	; (800263c <main+0x228>)
 8002518:	f7fe fd7c 	bl	8001014 <OV5462_write_spi_reg>

  	uint8_t camera_version = OV5462_read_spi_reg(&ov5462, 0x40);
 800251c:	2140      	movs	r1, #64	; 0x40
 800251e:	4847      	ldr	r0, [pc, #284]	; (800263c <main+0x228>)
 8002520:	f7fe fda8 	bl	8001074 <OV5462_read_spi_reg>
 8002524:	4603      	mov	r3, r0
 8002526:	74fb      	strb	r3, [r7, #19]
  	printf("Camera version: %u\r\n", camera_version);
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	4619      	mov	r1, r3
 800252c:	484c      	ldr	r0, [pc, #304]	; (8002660 <main+0x24c>)
 800252e:	f008 fcc7 	bl	800aec0 <iprintf>
  	uint8_t frames;

  	// set continuous capture (depends on version)
  	if (camera_version && 0x70) {
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <main+0x12a>
  		frames = 0xFF;
 8002538:	23ff      	movs	r3, #255	; 0xff
 800253a:	75fb      	strb	r3, [r7, #23]
 800253c:	e001      	b.n	8002542 <main+0x12e>
  	} else {
  		frames = 0x07;
 800253e:	2307      	movs	r3, #7
 8002540:	75fb      	strb	r3, [r7, #23]
  	}

  	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FRAMES, frames);
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	461a      	mov	r2, r3
 8002546:	2101      	movs	r1, #1
 8002548:	483c      	ldr	r0, [pc, #240]	; (800263c <main+0x228>)
 800254a:	f7fe fd63 	bl	8001014 <OV5462_write_spi_reg>

  	int is_capture_flag = 1;
 800254e:	2301      	movs	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]

	if (is_capture_flag) {
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05c      	beq.n	8002612 <main+0x1fe>
	  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // flush
 8002558:	2201      	movs	r2, #1
 800255a:	2104      	movs	r1, #4
 800255c:	4837      	ldr	r0, [pc, #220]	; (800263c <main+0x228>)
 800255e:	f7fe fd59 	bl	8001014 <OV5462_write_spi_reg>
	  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 8002562:	2201      	movs	r2, #1
 8002564:	2104      	movs	r1, #4
 8002566:	4835      	ldr	r0, [pc, #212]	; (800263c <main+0x228>)
 8002568:	f7fe fd54 	bl	8001014 <OV5462_write_spi_reg>

	  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 800256c:	2202      	movs	r2, #2
 800256e:	2104      	movs	r1, #4
 8002570:	4832      	ldr	r0, [pc, #200]	; (800263c <main+0x228>)
 8002572:	f7fe fd4f 	bl	8001014 <OV5462_write_spi_reg>

	  while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {};
 8002576:	bf00      	nop
 8002578:	2141      	movs	r1, #65	; 0x41
 800257a:	4830      	ldr	r0, [pc, #192]	; (800263c <main+0x228>)
 800257c:	f7fe fd7a 	bl	8001074 <OV5462_read_spi_reg>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f6      	beq.n	8002578 <main+0x164>
	  int length = (int) OV5462_read_fifo_length(&ov5462);
 800258a:	482c      	ldr	r0, [pc, #176]	; (800263c <main+0x228>)
 800258c:	f7fe fe02 	bl	8001194 <OV5462_read_fifo_length>
 8002590:	4603      	mov	r3, r0
 8002592:	60bb      	str	r3, [r7, #8]

	  if (length < 0x3FFFFF) {
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4a33      	ldr	r2, [pc, #204]	; (8002664 <main+0x250>)
 8002598:	4293      	cmp	r3, r2
 800259a:	dc1c      	bgt.n	80025d6 <main+0x1c2>
		  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // flush
 800259c:	2201      	movs	r2, #1
 800259e:	2104      	movs	r1, #4
 80025a0:	4826      	ldr	r0, [pc, #152]	; (800263c <main+0x228>)
 80025a2:	f7fe fd37 	bl	8001014 <OV5462_write_spi_reg>
		  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 80025a6:	2201      	movs	r2, #1
 80025a8:	2104      	movs	r1, #4
 80025aa:	4824      	ldr	r0, [pc, #144]	; (800263c <main+0x228>)
 80025ac:	f7fe fd32 	bl	8001014 <OV5462_write_spi_reg>

		  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 80025b0:	2202      	movs	r2, #2
 80025b2:	2104      	movs	r1, #4
 80025b4:	4821      	ldr	r0, [pc, #132]	; (800263c <main+0x228>)
 80025b6:	f7fe fd2d 	bl	8001014 <OV5462_write_spi_reg>
		  while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {};
 80025ba:	bf00      	nop
 80025bc:	2141      	movs	r1, #65	; 0x41
 80025be:	481f      	ldr	r0, [pc, #124]	; (800263c <main+0x228>)
 80025c0:	f7fe fd58 	bl	8001074 <OV5462_read_spi_reg>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f6      	beq.n	80025bc <main+0x1a8>
		  printf("Capture done\r\n");
 80025ce:	4826      	ldr	r0, [pc, #152]	; (8002668 <main+0x254>)
 80025d0:	f008 fcfc 	bl	800afcc <puts>
 80025d4:	e002      	b.n	80025dc <main+0x1c8>
	  } else {
		  printf("Capture done\r\n");
 80025d6:	4824      	ldr	r0, [pc, #144]	; (8002668 <main+0x254>)
 80025d8:	f008 fcf8 	bl	800afcc <puts>
	  }

	  int why = read_fifo_and_write_file();
 80025dc:	f7ff fc3c 	bl	8001e58 <read_fifo_and_write_file>
 80025e0:	6078      	str	r0, [r7, #4]
	  if (why) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <main+0x1de>
		  printf("movie save failed (%i) \r\n", why);
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4820      	ldr	r0, [pc, #128]	; (800266c <main+0x258>)
 80025ec:	f008 fc68 	bl	800aec0 <iprintf>
 80025f0:	e002      	b.n	80025f8 <main+0x1e4>
	  } else {
		  printf("movie save success \r\n");
 80025f2:	481f      	ldr	r0, [pc, #124]	; (8002670 <main+0x25c>)
 80025f4:	f008 fcea 	bl	800afcc <puts>
	  }

	  fr = f_close(&fil);
 80025f8:	481e      	ldr	r0, [pc, #120]	; (8002674 <main+0x260>)
 80025fa:	f007 fa1c 	bl	8009a36 <f_close>
 80025fe:	4603      	mov	r3, r0
 8002600:	70fb      	strb	r3, [r7, #3]
	  if (fr) printf("%i\r\n", fr);
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <main+0x1fe>
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	4619      	mov	r1, r3
 800260c:	481a      	ldr	r0, [pc, #104]	; (8002678 <main+0x264>)
 800260e:	f008 fc57 	bl	800aec0 <iprintf>
	 }

  	if(f_mount(NULL, "", 1) != FR_OK)
 8002612:	2201      	movs	r2, #1
 8002614:	4919      	ldr	r1, [pc, #100]	; (800267c <main+0x268>)
 8002616:	2000      	movs	r0, #0
 8002618:	f006 fc8a 	bl	8008f30 <f_mount>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <main+0x214>
  		printf("Failed to unmount\r\n");
 8002622:	4817      	ldr	r0, [pc, #92]	; (8002680 <main+0x26c>)
 8002624:	f008 fcd2 	bl	800afcc <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002628:	e7fe      	b.n	8002628 <main+0x214>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40020800 	.word	0x40020800
 8002638:	200002b4 	.word	0x200002b4
 800263c:	20000c78 	.word	0x20000c78
 8002640:	20000260 	.word	0x20000260
 8002644:	0800d308 	.word	0x0800d308
 8002648:	0800d324 	.word	0x0800d324
 800264c:	0800d334 	.word	0x0800d334
 8002650:	0800d344 	.word	0x0800d344
 8002654:	0800d354 	.word	0x0800d354
 8002658:	0800d364 	.word	0x0800d364
 800265c:	0800d374 	.word	0x0800d374
 8002660:	0800d380 	.word	0x0800d380
 8002664:	003ffffe 	.word	0x003ffffe
 8002668:	0800d398 	.word	0x0800d398
 800266c:	0800d3a8 	.word	0x0800d3a8
 8002670:	0800d3c4 	.word	0x0800d3c4
 8002674:	2000083c 	.word	0x2000083c
 8002678:	0800d2f0 	.word	0x0800d2f0
 800267c:	0800d198 	.word	0x0800d198
 8002680:	0800d3dc 	.word	0x0800d3dc

08002684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b094      	sub	sp, #80	; 0x50
 8002688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268a:	f107 0320 	add.w	r3, r7, #32
 800268e:	2230      	movs	r2, #48	; 0x30
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f007 ffa2 	bl	800a5dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	4b29      	ldr	r3, [pc, #164]	; (8002754 <SystemClock_Config+0xd0>)
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	4a28      	ldr	r2, [pc, #160]	; (8002754 <SystemClock_Config+0xd0>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6413      	str	r3, [r2, #64]	; 0x40
 80026b8:	4b26      	ldr	r3, [pc, #152]	; (8002754 <SystemClock_Config+0xd0>)
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80026c4:	2300      	movs	r3, #0
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <SystemClock_Config+0xd4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <SystemClock_Config+0xd4>)
 80026d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <SystemClock_Config+0xd4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026e4:	2302      	movs	r3, #2
 80026e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026e8:	2301      	movs	r3, #1
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026ec:	2310      	movs	r3, #16
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f0:	2302      	movs	r3, #2
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80026f8:	2310      	movs	r3, #16
 80026fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80026fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002702:	2304      	movs	r3, #4
 8002704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002706:	2307      	movs	r3, #7
 8002708:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800270a:	f107 0320 	add.w	r3, r7, #32
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fa6e 	bl	8004bf0 <HAL_RCC_OscConfig>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800271a:	f000 fa01 	bl	8002b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800271e:	230f      	movs	r3, #15
 8002720:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002722:	2302      	movs	r3, #2
 8002724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800272a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002734:	f107 030c 	add.w	r3, r7, #12
 8002738:	2102      	movs	r1, #2
 800273a:	4618      	mov	r0, r3
 800273c:	f002 fcd0 	bl	80050e0 <HAL_RCC_ClockConfig>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002746:	f000 f9eb 	bl	8002b20 <Error_Handler>
  }
}
 800274a:	bf00      	nop
 800274c:	3750      	adds	r7, #80	; 0x50
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40007000 	.word	0x40007000

0800275c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002762:	463b      	mov	r3, r7
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800276e:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <MX_ADC1_Init+0x98>)
 8002770:	4a21      	ldr	r2, [pc, #132]	; (80027f8 <MX_ADC1_Init+0x9c>)
 8002772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <MX_ADC1_Init+0x98>)
 8002776:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800277a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <MX_ADC1_Init+0x98>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <MX_ADC1_Init+0x98>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <MX_ADC1_Init+0x98>)
 800278a:	2200      	movs	r2, #0
 800278c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <MX_ADC1_Init+0x98>)
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <MX_ADC1_Init+0x98>)
 8002798:	2200      	movs	r2, #0
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <MX_ADC1_Init+0x98>)
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <MX_ADC1_Init+0xa0>)
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027bc:	480d      	ldr	r0, [pc, #52]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027be:	f000 fd9b 	bl	80032f8 <HAL_ADC_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80027c8:	f000 f9aa 	bl	8002b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80027cc:	2308      	movs	r3, #8
 80027ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027d0:	2301      	movs	r3, #1
 80027d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d8:	463b      	mov	r3, r7
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027de:	f000 fdcf 	bl	8003380 <HAL_ADC_ConfigChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80027e8:	f000 f99a 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000218 	.word	0x20000218
 80027f8:	40012000 	.word	0x40012000
 80027fc:	0f000001 	.word	0x0f000001

08002800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <MX_I2C1_Init+0x50>)
 8002806:	4a13      	ldr	r2, [pc, #76]	; (8002854 <MX_I2C1_Init+0x54>)
 8002808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <MX_I2C1_Init+0x50>)
 800280c:	4a12      	ldr	r2, [pc, #72]	; (8002858 <MX_I2C1_Init+0x58>)
 800280e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <MX_I2C1_Init+0x50>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <MX_I2C1_Init+0x50>)
 8002818:	2200      	movs	r2, #0
 800281a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <MX_I2C1_Init+0x50>)
 800281e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <MX_I2C1_Init+0x50>)
 8002826:	2200      	movs	r2, #0
 8002828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <MX_I2C1_Init+0x50>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <MX_I2C1_Init+0x50>)
 8002832:	2200      	movs	r2, #0
 8002834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MX_I2C1_Init+0x50>)
 8002838:	2200      	movs	r2, #0
 800283a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800283c:	4804      	ldr	r0, [pc, #16]	; (8002850 <MX_I2C1_Init+0x50>)
 800283e:	f001 fa41 	bl	8003cc4 <HAL_I2C_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002848:	f000 f96a 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000260 	.word	0x20000260
 8002854:	40005400 	.word	0x40005400
 8002858:	000186a0 	.word	0x000186a0

0800285c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <MX_SPI1_Init+0x64>)
 8002862:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <MX_SPI1_Init+0x68>)
 8002864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <MX_SPI1_Init+0x64>)
 8002868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800286c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <MX_SPI1_Init+0x64>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <MX_SPI1_Init+0x64>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <MX_SPI1_Init+0x64>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <MX_SPI1_Init+0x64>)
 8002882:	2200      	movs	r2, #0
 8002884:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_SPI1_Init+0x64>)
 8002888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_SPI1_Init+0x64>)
 8002890:	2218      	movs	r2, #24
 8002892:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <MX_SPI1_Init+0x64>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_SPI1_Init+0x64>)
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <MX_SPI1_Init+0x64>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_SPI1_Init+0x64>)
 80028a8:	220a      	movs	r2, #10
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028ac:	4804      	ldr	r0, [pc, #16]	; (80028c0 <MX_SPI1_Init+0x64>)
 80028ae:	f002 fe37 	bl	8005520 <HAL_SPI_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028b8:	f000 f932 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	200002b4 	.word	0x200002b4
 80028c4:	40013000 	.word	0x40013000

080028c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <MX_SPI2_Init+0x64>)
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <MX_SPI2_Init+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <MX_SPI2_Init+0x64>)
 80028d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028da:	4b14      	ldr	r3, [pc, #80]	; (800292c <MX_SPI2_Init+0x64>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <MX_SPI2_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <MX_SPI2_Init+0x64>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <MX_SPI2_Init+0x64>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <MX_SPI2_Init+0x64>)
 80028f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <MX_SPI2_Init+0x64>)
 80028fc:	2218      	movs	r2, #24
 80028fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <MX_SPI2_Init+0x64>)
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <MX_SPI2_Init+0x64>)
 8002908:	2200      	movs	r2, #0
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800290c:	4b07      	ldr	r3, [pc, #28]	; (800292c <MX_SPI2_Init+0x64>)
 800290e:	2200      	movs	r2, #0
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <MX_SPI2_Init+0x64>)
 8002914:	220a      	movs	r2, #10
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002918:	4804      	ldr	r0, [pc, #16]	; (800292c <MX_SPI2_Init+0x64>)
 800291a:	f002 fe01 	bl	8005520 <HAL_SPI_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002924:	f000 f8fc 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	2000030c 	.word	0x2000030c
 8002930:	40003800 	.word	0x40003800

08002934 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <MX_SPI3_Init+0x68>)
 800293a:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <MX_SPI3_Init+0x6c>)
 800293c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_SPI3_Init+0x68>)
 8002940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002944:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <MX_SPI3_Init+0x68>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <MX_SPI3_Init+0x68>)
 800294e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002952:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <MX_SPI3_Init+0x68>)
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <MX_SPI3_Init+0x68>)
 800295c:	2200      	movs	r2, #0
 800295e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <MX_SPI3_Init+0x68>)
 8002962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002966:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_SPI3_Init+0x68>)
 800296a:	2218      	movs	r2, #24
 800296c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <MX_SPI3_Init+0x68>)
 8002970:	2200      	movs	r2, #0
 8002972:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_SPI3_Init+0x68>)
 8002976:	2200      	movs	r2, #0
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <MX_SPI3_Init+0x68>)
 800297c:	2200      	movs	r2, #0
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_SPI3_Init+0x68>)
 8002982:	220a      	movs	r2, #10
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002986:	4805      	ldr	r0, [pc, #20]	; (800299c <MX_SPI3_Init+0x68>)
 8002988:	f002 fdca 	bl	8005520 <HAL_SPI_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8002992:	f000 f8c5 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000364 	.word	0x20000364
 80029a0:	40003c00 	.word	0x40003c00

080029a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029aa:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <MX_USART2_UART_Init+0x50>)
 80029ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029ca:	220c      	movs	r2, #12
 80029cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029da:	4805      	ldr	r0, [pc, #20]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029dc:	f003 fb48 	bl	8006070 <HAL_UART_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029e6:	f000 f89b 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200003bc 	.word	0x200003bc
 80029f4:	40004400 	.word	0x40004400

080029f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a36      	ldr	r2, [pc, #216]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a2f      	ldr	r2, [pc, #188]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <MX_GPIO_Init+0xf8>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2112      	movs	r1, #18
 8002a82:	481c      	ldr	r0, [pc, #112]	; (8002af4 <MX_GPIO_Init+0xfc>)
 8002a84:	f001 f904 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	481a      	ldr	r0, [pc, #104]	; (8002af8 <MX_GPIO_Init+0x100>)
 8002a8e:	f001 f8ff 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a98:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4812      	ldr	r0, [pc, #72]	; (8002af4 <MX_GPIO_Init+0xfc>)
 8002aaa:	f000 ff6d 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SPI2_CS_Pin CAM_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin;
 8002aae:	2312      	movs	r3, #18
 8002ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480b      	ldr	r0, [pc, #44]	; (8002af4 <MX_GPIO_Init+0xfc>)
 8002ac6:	f000 ff5f 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_SPI2_CS_Pin */
  GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 8002aca:	2304      	movs	r3, #4
 8002acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4805      	ldr	r0, [pc, #20]	; (8002af8 <MX_GPIO_Init+0x100>)
 8002ae2:	f000 ff51 	bl	8003988 <HAL_GPIO_Init>

}
 8002ae6:	bf00      	nop
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020400 	.word	0x40020400

08002afc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002b04:	1d39      	adds	r1, r7, #4
 8002b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4803      	ldr	r0, [pc, #12]	; (8002b1c <__io_putchar+0x20>)
 8002b0e:	f003 fafc 	bl	800610a <HAL_UART_Transmit>
  return ch;
 8002b12:	687b      	ldr	r3, [r7, #4]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	200003bc 	.word	0x200003bc

08002b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b24:	b672      	cpsid	i
}
 8002b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <Error_Handler+0x8>
	...

08002b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_MspInit+0x4c>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <HAL_MspInit+0x4c>)
 8002b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b40:	6453      	str	r3, [r2, #68]	; 0x44
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_MspInit+0x4c>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_MspInit+0x4c>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <HAL_MspInit+0x4c>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_MspInit+0x4c>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b6a:	2007      	movs	r0, #7
 8002b6c:	f000 fed8 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a24      	ldr	r2, [pc, #144]	; (8002c2c <HAL_ADC_MspInit+0xb0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d141      	bne.n	8002c22 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <HAL_ADC_MspInit+0xb4>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	4a22      	ldr	r2, [pc, #136]	; (8002c30 <HAL_ADC_MspInit+0xb4>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bac:	6453      	str	r3, [r2, #68]	; 0x44
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_ADC_MspInit+0xb4>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <HAL_ADC_MspInit+0xb4>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_ADC_MspInit+0xb4>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_ADC_MspInit+0xb4>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <HAL_ADC_MspInit+0xb4>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <HAL_ADC_MspInit+0xb4>)
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_ADC_MspInit+0xb4>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4619      	mov	r1, r3
 8002c04:	480b      	ldr	r0, [pc, #44]	; (8002c34 <HAL_ADC_MspInit+0xb8>)
 8002c06:	f000 febf 	bl	8003988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4806      	ldr	r0, [pc, #24]	; (8002c38 <HAL_ADC_MspInit+0xbc>)
 8002c1e:	f000 feb3 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c22:	bf00      	nop
 8002c24:	3728      	adds	r7, #40	; 0x28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40012000 	.word	0x40012000
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40020800 	.word	0x40020800
 8002c38:	40020400 	.word	0x40020400

08002c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <HAL_I2C_MspInit+0x84>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12b      	bne.n	8002cb6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <HAL_I2C_MspInit+0x88>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <HAL_I2C_MspInit+0x88>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_I2C_MspInit+0x88>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8002c7a:	23c0      	movs	r3, #192	; 0xc0
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c7e:	2312      	movs	r3, #18
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <HAL_I2C_MspInit+0x8c>)
 8002c96:	f000 fe77 	bl	8003988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_I2C_MspInit+0x88>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <HAL_I2C_MspInit+0x88>)
 8002ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_I2C_MspInit+0x88>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cb6:	bf00      	nop
 8002cb8:	3728      	adds	r7, #40	; 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40005400 	.word	0x40005400
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40020400 	.word	0x40020400

08002ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08e      	sub	sp, #56	; 0x38
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a5b      	ldr	r2, [pc, #364]	; (8002e58 <HAL_SPI_MspInit+0x18c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d12c      	bne.n	8002d48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	4b5a      	ldr	r3, [pc, #360]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	4a59      	ldr	r2, [pc, #356]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002cf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CAM_SPI1_SCK_Pin|CAM_SPI1_MISO_Pin|CAM_SPI1_MOSI_Pin;
 8002d26:	23e0      	movs	r3, #224	; 0xe0
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d32:	2303      	movs	r3, #3
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d36:	2305      	movs	r3, #5
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4847      	ldr	r0, [pc, #284]	; (8002e60 <HAL_SPI_MspInit+0x194>)
 8002d42:	f000 fe21 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d46:	e082      	b.n	8002e4e <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a45      	ldr	r2, [pc, #276]	; (8002e64 <HAL_SPI_MspInit+0x198>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d14b      	bne.n	8002dea <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a39      	ldr	r2, [pc, #228]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a32      	ldr	r2, [pc, #200]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 8002da6:	230c      	movs	r3, #12
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002db6:	2305      	movs	r3, #5
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4829      	ldr	r0, [pc, #164]	; (8002e68 <HAL_SPI_MspInit+0x19c>)
 8002dc2:	f000 fde1 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8002dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dd8:	2305      	movs	r3, #5
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de0:	4619      	mov	r1, r3
 8002de2:	4822      	ldr	r0, [pc, #136]	; (8002e6c <HAL_SPI_MspInit+0x1a0>)
 8002de4:	f000 fdd0 	bl	8003988 <HAL_GPIO_Init>
}
 8002de8:	e031      	b.n	8002e4e <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <HAL_SPI_MspInit+0x1a4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d12c      	bne.n	8002e4e <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e02:	6413      	str	r3, [r2, #64]	; 0x40
 8002e04:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002e1a:	f043 0304 	orr.w	r3, r3, #4
 8002e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_SPI_MspInit+0x190>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DAC_SPI3_SCK_Pin|DAC_SPI3_MOSI_Pin;
 8002e2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e3e:	2306      	movs	r3, #6
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e46:	4619      	mov	r1, r3
 8002e48:	4807      	ldr	r0, [pc, #28]	; (8002e68 <HAL_SPI_MspInit+0x19c>)
 8002e4a:	f000 fd9d 	bl	8003988 <HAL_GPIO_Init>
}
 8002e4e:	bf00      	nop
 8002e50:	3738      	adds	r7, #56	; 0x38
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40013000 	.word	0x40013000
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40003800 	.word	0x40003800
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40003c00 	.word	0x40003c00

08002e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7c:	f107 0314 	add.w	r3, r7, #20
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <HAL_UART_MspInit+0x84>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d12b      	bne.n	8002eee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <HAL_UART_MspInit+0x88>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a17      	ldr	r2, [pc, #92]	; (8002efc <HAL_UART_MspInit+0x88>)
 8002ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_UART_MspInit+0x88>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_UART_MspInit+0x88>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_UART_MspInit+0x88>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <HAL_UART_MspInit+0x88>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002ece:	230c      	movs	r3, #12
 8002ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ede:	2307      	movs	r3, #7
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	; (8002f00 <HAL_UART_MspInit+0x8c>)
 8002eea:	f000 fd4d 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eee:	bf00      	nop
 8002ef0:	3728      	adds	r7, #40	; 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40004400 	.word	0x40004400
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020000 	.word	0x40020000

08002f04 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile extern uint8_t Timer1, Timer2;

void SDTimer_Handler() {
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0

	if (Timer1 > 0) {
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <SDTimer_Handler+0x40>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <SDTimer_Handler+0x1c>
		--Timer1;
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <SDTimer_Handler+0x40>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <SDTimer_Handler+0x40>)
 8002f1e:	701a      	strb	r2, [r3, #0]
	}

	if (Timer2 > 0) {
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <SDTimer_Handler+0x44>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <SDTimer_Handler+0x34>
		--Timer2;
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <SDTimer_Handler+0x44>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <SDTimer_Handler+0x44>)
 8002f36:	701a      	strb	r2, [r3, #0]
	}
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000210 	.word	0x20000210
 8002f48:	20000212 	.word	0x20000212

08002f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <NMI_Handler+0x4>

08002f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f56:	e7fe      	b.n	8002f56 <HardFault_Handler+0x4>

08002f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f5c:	e7fe      	b.n	8002f5c <MemManage_Handler+0x4>

08002f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f62:	e7fe      	b.n	8002f62 <BusFault_Handler+0x4>

08002f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <UsageFault_Handler+0x4>

08002f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <SysTick_Handler+0x30>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <SysTick_Handler+0x30>)
 8002fa4:	701a      	strb	r2, [r3, #0]

	if (FatFsCnt >= 10) {
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <SysTick_Handler+0x30>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b09      	cmp	r3, #9
 8002fae:	d904      	bls.n	8002fba <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SysTick_Handler+0x30>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002fb6:	f7ff ffa5 	bl	8002f04 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fba:	f000 f959 	bl	8003270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000c94 	.word	0x20000c94

08002fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
	return 1;
 8002fcc:	2301      	movs	r3, #1
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <_kill>:

int _kill(int pid, int sig)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fe2:	f007 fad1 	bl	800a588 <__errno>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2216      	movs	r2, #22
 8002fea:	601a      	str	r2, [r3, #0]
	return -1;
 8002fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_exit>:

void _exit (int status)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003000:	f04f 31ff 	mov.w	r1, #4294967295
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ffe7 	bl	8002fd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800300a:	e7fe      	b.n	800300a <_exit+0x12>

0800300c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	e00a      	b.n	8003034 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800301e:	f3af 8000 	nop.w
 8003022:	4601      	mov	r1, r0
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	60ba      	str	r2, [r7, #8]
 800302a:	b2ca      	uxtb	r2, r1
 800302c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3301      	adds	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	dbf0      	blt.n	800301e <_read+0x12>
	}

return len;
 800303c:	687b      	ldr	r3, [r7, #4]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e009      	b.n	800306c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	60ba      	str	r2, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fd4b 	bl	8002afc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	3301      	adds	r3, #1
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	dbf1      	blt.n	8003058 <_write+0x12>
	}
	return len;
 8003074:	687b      	ldr	r3, [r7, #4]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <_close>:

int _close(int file)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	return -1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030a6:	605a      	str	r2, [r3, #4]
	return 0;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <_isatty>:

int _isatty(int file)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
	return 1;
 80030be:	2301      	movs	r3, #1
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
	return 0;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <_sbrk+0x5c>)
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <_sbrk+0x60>)
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <_sbrk+0x64>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <_sbrk+0x64>)
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <_sbrk+0x68>)
 8003108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d207      	bcs.n	8003128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003118:	f007 fa36 	bl	800a588 <__errno>
 800311c:	4603      	mov	r3, r0
 800311e:	220c      	movs	r2, #12
 8003120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	e009      	b.n	800313c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <_sbrk+0x64>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800312e:	4b07      	ldr	r3, [pc, #28]	; (800314c <_sbrk+0x64>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	4a05      	ldr	r2, [pc, #20]	; (800314c <_sbrk+0x64>)
 8003138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20018000 	.word	0x20018000
 8003148:	00000400 	.word	0x00000400
 800314c:	20000c98 	.word	0x20000c98
 8003150:	20000ef0 	.word	0x20000ef0

08003154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <SystemInit+0x20>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	4a05      	ldr	r2, [pc, #20]	; (8003174 <SystemInit+0x20>)
 8003160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800317c:	480d      	ldr	r0, [pc, #52]	; (80031b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800317e:	490e      	ldr	r1, [pc, #56]	; (80031b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003180:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003184:	e002      	b.n	800318c <LoopCopyDataInit>

08003186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800318a:	3304      	adds	r3, #4

0800318c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800318c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800318e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003190:	d3f9      	bcc.n	8003186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003194:	4c0b      	ldr	r4, [pc, #44]	; (80031c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003198:	e001      	b.n	800319e <LoopFillZerobss>

0800319a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800319a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800319c:	3204      	adds	r2, #4

0800319e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800319e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031a0:	d3fb      	bcc.n	800319a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031a2:	f7ff ffd7 	bl	8003154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031a6:	f007 f9f5 	bl	800a594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031aa:	f7ff f933 	bl	8002414 <main>
  bx  lr    
 80031ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80031b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031b8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80031bc:	0800eaec 	.word	0x0800eaec
  ldr r2, =_sbss
 80031c0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80031c4:	20000eec 	.word	0x20000eec

080031c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c8:	e7fe      	b.n	80031c8 <ADC_IRQHandler>
	...

080031cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031d0:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_Init+0x40>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <HAL_Init+0x40>)
 80031d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_Init+0x40>)
 80031e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_Init+0x40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <HAL_Init+0x40>)
 80031ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f4:	2003      	movs	r0, #3
 80031f6:	f000 fb93 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031fa:	2000      	movs	r0, #0
 80031fc:	f000 f808 	bl	8003210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003200:	f7ff fc94 	bl	8002b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00

08003210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_InitTick+0x54>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_InitTick+0x58>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	4619      	mov	r1, r3
 8003222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003226:	fbb3 f3f1 	udiv	r3, r3, r1
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fb9d 	bl	800396e <HAL_SYSTICK_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e00e      	b.n	800325c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b0f      	cmp	r3, #15
 8003242:	d80a      	bhi.n	800325a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003244:	2200      	movs	r2, #0
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	f000 fb73 	bl	8003936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003250:	4a06      	ldr	r2, [pc, #24]	; (800326c <HAL_InitTick+0x5c>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e000      	b.n	800325c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000004 	.word	0x20000004
 8003268:	2000000c 	.word	0x2000000c
 800326c:	20000008 	.word	0x20000008

08003270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_IncTick+0x20>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_IncTick+0x24>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4413      	add	r3, r2
 8003280:	4a04      	ldr	r2, [pc, #16]	; (8003294 <HAL_IncTick+0x24>)
 8003282:	6013      	str	r3, [r2, #0]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	2000000c 	.word	0x2000000c
 8003294:	20000c9c 	.word	0x20000c9c

08003298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return uwTick;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_GetTick+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000c9c 	.word	0x20000c9c

080032b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b8:	f7ff ffee 	bl	8003298 <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d005      	beq.n	80032d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_Delay+0x44>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032d6:	bf00      	nop
 80032d8:	f7ff ffde 	bl	8003298 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d8f7      	bhi.n	80032d8 <HAL_Delay+0x28>
  {
  }
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	2000000c 	.word	0x2000000c

080032f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e033      	b.n	8003376 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff fc30 	bl	8002b7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800333e:	f023 0302 	bic.w	r3, r3, #2
 8003342:	f043 0202 	orr.w	r2, r3, #2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f93a 	bl	80035c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
 8003366:	e001      	b.n	800336c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_ADC_ConfigChannel+0x1c>
 8003398:	2302      	movs	r3, #2
 800339a:	e105      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x228>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b09      	cmp	r3, #9
 80033aa:	d925      	bls.n	80033f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68d9      	ldr	r1, [r3, #12]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	3b1e      	subs	r3, #30
 80033c2:	2207      	movs	r2, #7
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43da      	mvns	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	400a      	ands	r2, r1
 80033d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68d9      	ldr	r1, [r3, #12]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	4603      	mov	r3, r0
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4403      	add	r3, r0
 80033ea:	3b1e      	subs	r3, #30
 80033ec:	409a      	lsls	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	e022      	b.n	800343e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6919      	ldr	r1, [r3, #16]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	2207      	movs	r2, #7
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43da      	mvns	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	400a      	ands	r2, r1
 800341a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6919      	ldr	r1, [r3, #16]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	4618      	mov	r0, r3
 800342e:	4603      	mov	r3, r0
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4403      	add	r3, r0
 8003434:	409a      	lsls	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b06      	cmp	r3, #6
 8003444:	d824      	bhi.n	8003490 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	3b05      	subs	r3, #5
 8003458:	221f      	movs	r2, #31
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	400a      	ands	r2, r1
 8003466:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4618      	mov	r0, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	3b05      	subs	r3, #5
 8003482:	fa00 f203 	lsl.w	r2, r0, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	635a      	str	r2, [r3, #52]	; 0x34
 800348e:	e04c      	b.n	800352a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d824      	bhi.n	80034e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	3b23      	subs	r3, #35	; 0x23
 80034aa:	221f      	movs	r2, #31
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43da      	mvns	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	400a      	ands	r2, r1
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	4618      	mov	r0, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	3b23      	subs	r3, #35	; 0x23
 80034d4:	fa00 f203 	lsl.w	r2, r0, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
 80034e0:	e023      	b.n	800352a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3b41      	subs	r3, #65	; 0x41
 80034f4:	221f      	movs	r2, #31
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43da      	mvns	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	400a      	ands	r2, r1
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	b29b      	uxth	r3, r3
 8003510:	4618      	mov	r0, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	3b41      	subs	r3, #65	; 0x41
 800351e:	fa00 f203 	lsl.w	r2, r0, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <HAL_ADC_ConfigChannel+0x234>)
 800352c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a21      	ldr	r2, [pc, #132]	; (80035b8 <HAL_ADC_ConfigChannel+0x238>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d109      	bne.n	800354c <HAL_ADC_ConfigChannel+0x1cc>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b12      	cmp	r3, #18
 800353e:	d105      	bne.n	800354c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <HAL_ADC_ConfigChannel+0x238>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d123      	bne.n	800359e <HAL_ADC_ConfigChannel+0x21e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b10      	cmp	r3, #16
 800355c:	d003      	beq.n	8003566 <HAL_ADC_ConfigChannel+0x1e6>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b11      	cmp	r3, #17
 8003564:	d11b      	bne.n	800359e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b10      	cmp	r3, #16
 8003578:	d111      	bne.n	800359e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_ADC_ConfigChannel+0x23c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a10      	ldr	r2, [pc, #64]	; (80035c0 <HAL_ADC_ConfigChannel+0x240>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	0c9a      	lsrs	r2, r3, #18
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003590:	e002      	b.n	8003598 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3b01      	subs	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f9      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40012300 	.word	0x40012300
 80035b8:	40012000 	.word	0x40012000
 80035bc:	20000004 	.word	0x20000004
 80035c0:	431bde83 	.word	0x431bde83

080035c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035cc:	4b79      	ldr	r3, [pc, #484]	; (80037b4 <ADC_Init+0x1f0>)
 80035ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	021a      	lsls	r2, r3, #8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800361c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6899      	ldr	r1, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <ADC_Init+0x1f4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800366a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800368c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	e00f      	b.n	80036c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0202 	bic.w	r2, r2, #2
 80036d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6899      	ldr	r1, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7e1b      	ldrb	r3, [r3, #24]
 80036dc:	005a      	lsls	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01b      	beq.n	8003728 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800370e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	3b01      	subs	r3, #1
 800371c:	035a      	lsls	r2, r3, #13
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	e007      	b.n	8003738 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003736:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	3b01      	subs	r3, #1
 8003754:	051a      	lsls	r2, r3, #20
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800376c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6899      	ldr	r1, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800377a:	025a      	lsls	r2, r3, #9
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	029a      	lsls	r2, r3, #10
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40012300 	.word	0x40012300
 80037b8:	0f000001 	.word	0x0f000001

080037bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d8:	4013      	ands	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	60d3      	str	r3, [r2, #12]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <__NVIC_GetPriorityGrouping+0x18>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 0307 	and.w	r3, r3, #7
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	2b00      	cmp	r3, #0
 8003832:	db0a      	blt.n	800384a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	490c      	ldr	r1, [pc, #48]	; (800386c <__NVIC_SetPriority+0x4c>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	440b      	add	r3, r1
 8003844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003848:	e00a      	b.n	8003860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4908      	ldr	r1, [pc, #32]	; (8003870 <__NVIC_SetPriority+0x50>)
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	3b04      	subs	r3, #4
 8003858:	0112      	lsls	r2, r2, #4
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	440b      	add	r3, r1
 800385e:	761a      	strb	r2, [r3, #24]
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000e100 	.word	0xe000e100
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f1c3 0307 	rsb	r3, r3, #7
 800388e:	2b04      	cmp	r3, #4
 8003890:	bf28      	it	cs
 8003892:	2304      	movcs	r3, #4
 8003894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3304      	adds	r3, #4
 800389a:	2b06      	cmp	r3, #6
 800389c:	d902      	bls.n	80038a4 <NVIC_EncodePriority+0x30>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3b03      	subs	r3, #3
 80038a2:	e000      	b.n	80038a6 <NVIC_EncodePriority+0x32>
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	401a      	ands	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038bc:	f04f 31ff 	mov.w	r1, #4294967295
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	43d9      	mvns	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	4313      	orrs	r3, r2
         );
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3724      	adds	r7, #36	; 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ec:	d301      	bcc.n	80038f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <SysTick_Config+0x40>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fa:	210f      	movs	r1, #15
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f7ff ff8e 	bl	8003820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <SysTick_Config+0x40>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390a:	4b04      	ldr	r3, [pc, #16]	; (800391c <SysTick_Config+0x40>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	e000e010 	.word	0xe000e010

08003920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff47 	bl	80037bc <__NVIC_SetPriorityGrouping>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003948:	f7ff ff5c 	bl	8003804 <__NVIC_GetPriorityGrouping>
 800394c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f7ff ff8e 	bl	8003874 <NVIC_EncodePriority>
 8003958:	4602      	mov	r2, r0
 800395a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff5d 	bl	8003820 <__NVIC_SetPriority>
}
 8003966:	bf00      	nop
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffb0 	bl	80038dc <SysTick_Config>
 800397c:	4603      	mov	r3, r0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e159      	b.n	8003c58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a4:	2201      	movs	r2, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	429a      	cmp	r2, r3
 80039be:	f040 8148 	bne.w	8003c52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d005      	beq.n	80039da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d130      	bne.n	8003a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	2203      	movs	r2, #3
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a10:	2201      	movs	r2, #1
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 0201 	and.w	r2, r3, #1
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d017      	beq.n	8003a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d123      	bne.n	8003acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	08da      	lsrs	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3208      	adds	r2, #8
 8003a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	08da      	lsrs	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3208      	adds	r2, #8
 8003ac6:	69b9      	ldr	r1, [r7, #24]
 8003ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0203 	and.w	r2, r3, #3
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80a2 	beq.w	8003c52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	4b57      	ldr	r3, [pc, #348]	; (8003c70 <HAL_GPIO_Init+0x2e8>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	4a56      	ldr	r2, [pc, #344]	; (8003c70 <HAL_GPIO_Init+0x2e8>)
 8003b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1e:	4b54      	ldr	r3, [pc, #336]	; (8003c70 <HAL_GPIO_Init+0x2e8>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2a:	4a52      	ldr	r2, [pc, #328]	; (8003c74 <HAL_GPIO_Init+0x2ec>)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	3302      	adds	r3, #2
 8003b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	220f      	movs	r2, #15
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a49      	ldr	r2, [pc, #292]	; (8003c78 <HAL_GPIO_Init+0x2f0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d019      	beq.n	8003b8a <HAL_GPIO_Init+0x202>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a48      	ldr	r2, [pc, #288]	; (8003c7c <HAL_GPIO_Init+0x2f4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_GPIO_Init+0x1fe>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a47      	ldr	r2, [pc, #284]	; (8003c80 <HAL_GPIO_Init+0x2f8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00d      	beq.n	8003b82 <HAL_GPIO_Init+0x1fa>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a46      	ldr	r2, [pc, #280]	; (8003c84 <HAL_GPIO_Init+0x2fc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d007      	beq.n	8003b7e <HAL_GPIO_Init+0x1f6>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a45      	ldr	r2, [pc, #276]	; (8003c88 <HAL_GPIO_Init+0x300>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d101      	bne.n	8003b7a <HAL_GPIO_Init+0x1f2>
 8003b76:	2304      	movs	r3, #4
 8003b78:	e008      	b.n	8003b8c <HAL_GPIO_Init+0x204>
 8003b7a:	2307      	movs	r3, #7
 8003b7c:	e006      	b.n	8003b8c <HAL_GPIO_Init+0x204>
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e004      	b.n	8003b8c <HAL_GPIO_Init+0x204>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e002      	b.n	8003b8c <HAL_GPIO_Init+0x204>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_GPIO_Init+0x204>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	f002 0203 	and.w	r2, r2, #3
 8003b92:	0092      	lsls	r2, r2, #2
 8003b94:	4093      	lsls	r3, r2
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b9c:	4935      	ldr	r1, [pc, #212]	; (8003c74 <HAL_GPIO_Init+0x2ec>)
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003baa:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bce:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd4:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bf8:	4a24      	ldr	r2, [pc, #144]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c22:	4a1a      	ldr	r2, [pc, #104]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c28:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c4c:	4a0f      	ldr	r2, [pc, #60]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3301      	adds	r3, #1
 8003c56:	61fb      	str	r3, [r7, #28]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	2b0f      	cmp	r3, #15
 8003c5c:	f67f aea2 	bls.w	80039a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3724      	adds	r7, #36	; 0x24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40013800 	.word	0x40013800
 8003c78:	40020000 	.word	0x40020000
 8003c7c:	40020400 	.word	0x40020400
 8003c80:	40020800 	.word	0x40020800
 8003c84:	40020c00 	.word	0x40020c00
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40013c00 	.word	0x40013c00

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cac:	e003      	b.n	8003cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	041a      	lsls	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	619a      	str	r2, [r3, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e12b      	b.n	8003f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fe ffa6 	bl	8002c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d28:	f001 fbd2 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4a81      	ldr	r2, [pc, #516]	; (8003f38 <HAL_I2C_Init+0x274>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d807      	bhi.n	8003d48 <HAL_I2C_Init+0x84>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a80      	ldr	r2, [pc, #512]	; (8003f3c <HAL_I2C_Init+0x278>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	bf94      	ite	ls
 8003d40:	2301      	movls	r3, #1
 8003d42:	2300      	movhi	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e006      	b.n	8003d56 <HAL_I2C_Init+0x92>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a7d      	ldr	r2, [pc, #500]	; (8003f40 <HAL_I2C_Init+0x27c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bf94      	ite	ls
 8003d50:	2301      	movls	r3, #1
 8003d52:	2300      	movhi	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0e7      	b.n	8003f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a78      	ldr	r2, [pc, #480]	; (8003f44 <HAL_I2C_Init+0x280>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0c9b      	lsrs	r3, r3, #18
 8003d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a6a      	ldr	r2, [pc, #424]	; (8003f38 <HAL_I2C_Init+0x274>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d802      	bhi.n	8003d98 <HAL_I2C_Init+0xd4>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3301      	adds	r3, #1
 8003d96:	e009      	b.n	8003dac <HAL_I2C_Init+0xe8>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	4a69      	ldr	r2, [pc, #420]	; (8003f48 <HAL_I2C_Init+0x284>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	3301      	adds	r3, #1
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	495c      	ldr	r1, [pc, #368]	; (8003f38 <HAL_I2C_Init+0x274>)
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	d819      	bhi.n	8003e00 <HAL_I2C_Init+0x13c>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1e59      	subs	r1, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003de0:	400b      	ands	r3, r1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_I2C_Init+0x138>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1e59      	subs	r1, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfa:	e051      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	e04f      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d111      	bne.n	8003e2c <HAL_I2C_Init+0x168>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1e58      	subs	r0, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	440b      	add	r3, r1
 8003e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e012      	b.n	8003e52 <HAL_I2C_Init+0x18e>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1e58      	subs	r0, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	0099      	lsls	r1, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Init+0x196>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e022      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10e      	bne.n	8003e80 <HAL_I2C_Init+0x1bc>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1e58      	subs	r0, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	440b      	add	r3, r1
 8003e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e74:	3301      	adds	r3, #1
 8003e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7e:	e00f      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1e58      	subs	r0, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	0099      	lsls	r1, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	6809      	ldr	r1, [r1, #0]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6911      	ldr	r1, [r2, #16]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68d2      	ldr	r2, [r2, #12]
 8003eda:	4311      	orrs	r1, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	000186a0 	.word	0x000186a0
 8003f3c:	001e847f 	.word	0x001e847f
 8003f40:	003d08ff 	.word	0x003d08ff
 8003f44:	431bde83 	.word	0x431bde83
 8003f48:	10624dd3 	.word	0x10624dd3

08003f4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	461a      	mov	r2, r3
 8003f58:	460b      	mov	r3, r1
 8003f5a:	817b      	strh	r3, [r7, #10]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f60:	f7ff f99a 	bl	8003298 <HAL_GetTick>
 8003f64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	f040 80e0 	bne.w	8004134 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2319      	movs	r3, #25
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4970      	ldr	r1, [pc, #448]	; (8004140 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fc58 	bl	8004834 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0d3      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_I2C_Master_Transmit+0x50>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e0cc      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d007      	beq.n	8003fc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2221      	movs	r2, #33	; 0x21
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2210      	movs	r2, #16
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	893a      	ldrh	r2, [r7, #8]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4a50      	ldr	r2, [pc, #320]	; (8004144 <HAL_I2C_Master_Transmit+0x1f8>)
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004004:	8979      	ldrh	r1, [r7, #10]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fac2 	bl	8004594 <I2C_MasterRequestWrite>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e08d      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004030:	e066      	b.n	8004100 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	6a39      	ldr	r1, [r7, #32]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fcd2 	bl	80049e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00d      	beq.n	800405e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	2b04      	cmp	r3, #4
 8004048:	d107      	bne.n	800405a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004058:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e06b      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d11b      	bne.n	80040d4 <HAL_I2C_Master_Transmit+0x188>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d017      	beq.n	80040d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	6a39      	ldr	r1, [r7, #32]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fcc2 	bl	8004a62 <I2C_WaitOnBTFFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d107      	bne.n	80040fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e01a      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d194      	bne.n	8004032 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	00100002 	.word	0x00100002
 8004144:	ffff0000 	.word	0xffff0000

08004148 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08c      	sub	sp, #48	; 0x30
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	461a      	mov	r2, r3
 8004154:	460b      	mov	r3, r1
 8004156:	817b      	strh	r3, [r7, #10]
 8004158:	4613      	mov	r3, r2
 800415a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800415c:	f7ff f89c 	bl	8003298 <HAL_GetTick>
 8004160:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	f040 820b 	bne.w	8004586 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2319      	movs	r3, #25
 8004176:	2201      	movs	r2, #1
 8004178:	497c      	ldr	r1, [pc, #496]	; (800436c <HAL_I2C_Master_Receive+0x224>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fb5a 	bl	8004834 <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
 8004188:	e1fe      	b.n	8004588 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_I2C_Master_Receive+0x50>
 8004194:	2302      	movs	r3, #2
 8004196:	e1f7      	b.n	8004588 <HAL_I2C_Master_Receive+0x440>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d007      	beq.n	80041be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2222      	movs	r2, #34	; 0x22
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2210      	movs	r2, #16
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	893a      	ldrh	r2, [r7, #8]
 80041ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a5c      	ldr	r2, [pc, #368]	; (8004370 <HAL_I2C_Master_Receive+0x228>)
 80041fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004200:	8979      	ldrh	r1, [r7, #10]
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fa46 	bl	8004698 <I2C_MasterRequestRead>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e1b8      	b.n	8004588 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	2b00      	cmp	r3, #0
 800421c:	d113      	bne.n	8004246 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	623b      	str	r3, [r7, #32]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	623b      	str	r3, [r7, #32]
 8004232:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e18c      	b.n	8004560 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	2b01      	cmp	r3, #1
 800424c:	d11b      	bne.n	8004286 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	e16c      	b.n	8004560 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	2b02      	cmp	r3, #2
 800428c:	d11b      	bne.n	80042c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ae:	2300      	movs	r3, #0
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	e14c      	b.n	8004560 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042ec:	e138      	b.n	8004560 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	f200 80f1 	bhi.w	80044da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d123      	bne.n	8004348 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fbed 	bl	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e139      	b.n	8004588 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004346:	e10b      	b.n	8004560 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	2b02      	cmp	r3, #2
 800434e:	d14e      	bne.n	80043ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2200      	movs	r2, #0
 8004358:	4906      	ldr	r1, [pc, #24]	; (8004374 <HAL_I2C_Master_Receive+0x22c>)
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fa6a 	bl	8004834 <I2C_WaitOnFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e10e      	b.n	8004588 <HAL_I2C_Master_Receive+0x440>
 800436a:	bf00      	nop
 800436c:	00100002 	.word	0x00100002
 8004370:	ffff0000 	.word	0xffff0000
 8004374:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043ec:	e0b8      	b.n	8004560 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	2200      	movs	r2, #0
 80043f6:	4966      	ldr	r1, [pc, #408]	; (8004590 <HAL_I2C_Master_Receive+0x448>)
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fa1b 	bl	8004834 <I2C_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0bf      	b.n	8004588 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	2200      	movs	r2, #0
 8004452:	494f      	ldr	r1, [pc, #316]	; (8004590 <HAL_I2C_Master_Receive+0x448>)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f9ed 	bl	8004834 <I2C_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e091      	b.n	8004588 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044d8:	e042      	b.n	8004560 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fb00 	bl	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e04c      	b.n	8004588 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d118      	bne.n	8004560 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	2b00      	cmp	r3, #0
 8004566:	f47f aec2 	bne.w	80042ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3728      	adds	r7, #40	; 0x28
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	00010004 	.word	0x00010004

08004594 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	460b      	mov	r3, r1
 80045a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d006      	beq.n	80045be <I2C_MasterRequestWrite+0x2a>
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d003      	beq.n	80045be <I2C_MasterRequestWrite+0x2a>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045bc:	d108      	bne.n	80045d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e00b      	b.n	80045e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	2b12      	cmp	r3, #18
 80045d6:	d107      	bne.n	80045e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f91d 	bl	8004834 <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00d      	beq.n	800461c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460e:	d103      	bne.n	8004618 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e035      	b.n	8004688 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004624:	d108      	bne.n	8004638 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004626:	897b      	ldrh	r3, [r7, #10]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004634:	611a      	str	r2, [r3, #16]
 8004636:	e01b      	b.n	8004670 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004638:	897b      	ldrh	r3, [r7, #10]
 800463a:	11db      	asrs	r3, r3, #7
 800463c:	b2db      	uxtb	r3, r3
 800463e:	f003 0306 	and.w	r3, r3, #6
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f063 030f 	orn	r3, r3, #15
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	490e      	ldr	r1, [pc, #56]	; (8004690 <I2C_MasterRequestWrite+0xfc>)
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f943 	bl	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e010      	b.n	8004688 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004666:	897b      	ldrh	r3, [r7, #10]
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4907      	ldr	r1, [pc, #28]	; (8004694 <I2C_MasterRequestWrite+0x100>)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f933 	bl	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	00010008 	.word	0x00010008
 8004694:	00010002 	.word	0x00010002

08004698 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af02      	add	r7, sp, #8
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	460b      	mov	r3, r1
 80046a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d006      	beq.n	80046d2 <I2C_MasterRequestRead+0x3a>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d003      	beq.n	80046d2 <I2C_MasterRequestRead+0x3a>
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d0:	d108      	bne.n	80046e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e00b      	b.n	80046fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	2b11      	cmp	r3, #17
 80046ea:	d107      	bne.n	80046fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f893 	bl	8004834 <I2C_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00d      	beq.n	8004730 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004722:	d103      	bne.n	800472c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800472a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e079      	b.n	8004824 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004738:	d108      	bne.n	800474c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800473a:	897b      	ldrh	r3, [r7, #10]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	b2da      	uxtb	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	611a      	str	r2, [r3, #16]
 800474a:	e05f      	b.n	800480c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800474c:	897b      	ldrh	r3, [r7, #10]
 800474e:	11db      	asrs	r3, r3, #7
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0306 	and.w	r3, r3, #6
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f063 030f 	orn	r3, r3, #15
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4930      	ldr	r1, [pc, #192]	; (800482c <I2C_MasterRequestRead+0x194>)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f8b9 	bl	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e054      	b.n	8004824 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800477a:	897b      	ldrh	r3, [r7, #10]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	4929      	ldr	r1, [pc, #164]	; (8004830 <I2C_MasterRequestRead+0x198>)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f8a9 	bl	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e044      	b.n	8004824 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f831 	bl	8004834 <I2C_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00d      	beq.n	80047f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e6:	d103      	bne.n	80047f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e017      	b.n	8004824 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80047f4:	897b      	ldrh	r3, [r7, #10]
 80047f6:	11db      	asrs	r3, r3, #7
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f003 0306 	and.w	r3, r3, #6
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f063 030e 	orn	r3, r3, #14
 8004804:	b2da      	uxtb	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4907      	ldr	r1, [pc, #28]	; (8004830 <I2C_MasterRequestRead+0x198>)
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f865 	bl	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	00010008 	.word	0x00010008
 8004830:	00010002 	.word	0x00010002

08004834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004844:	e025      	b.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d021      	beq.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484e:	f7fe fd23 	bl	8003298 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d116      	bne.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e023      	b.n	80048da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d10d      	bne.n	80048b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	43da      	mvns	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4013      	ands	r3, r2
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	e00c      	b.n	80048d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	43da      	mvns	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d0b6      	beq.n	8004846 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048f0:	e051      	b.n	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004900:	d123      	bne.n	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004910:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800491a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f043 0204 	orr.w	r2, r3, #4
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e046      	b.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d021      	beq.n	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004952:	f7fe fca1 	bl	8003298 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	429a      	cmp	r2, r3
 8004960:	d302      	bcc.n	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d116      	bne.n	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f043 0220 	orr.w	r2, r3, #32
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e020      	b.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10c      	bne.n	80049ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	43da      	mvns	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4013      	ands	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e00b      	b.n	80049d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	43da      	mvns	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4013      	ands	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d18d      	bne.n	80048f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049ec:	e02d      	b.n	8004a4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f8ce 	bl	8004b90 <I2C_IsAcknowledgeFailed>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e02d      	b.n	8004a5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d021      	beq.n	8004a4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7fe fc47 	bl	8003298 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d116      	bne.n	8004a4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f043 0220 	orr.w	r2, r3, #32
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e007      	b.n	8004a5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a54:	2b80      	cmp	r3, #128	; 0x80
 8004a56:	d1ca      	bne.n	80049ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a6e:	e02d      	b.n	8004acc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f88d 	bl	8004b90 <I2C_IsAcknowledgeFailed>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e02d      	b.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a86:	d021      	beq.n	8004acc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a88:	f7fe fc06 	bl	8003298 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d116      	bne.n	8004acc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f043 0220 	orr.w	r2, r3, #32
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e007      	b.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d1ca      	bne.n	8004a70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004af0:	e042      	b.n	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d119      	bne.n	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0210 	mvn.w	r2, #16
 8004b08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e029      	b.n	8004b88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b34:	f7fe fbb0 	bl	8003298 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d116      	bne.n	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e007      	b.n	8004b88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b40      	cmp	r3, #64	; 0x40
 8004b84:	d1b5      	bne.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba6:	d11b      	bne.n	8004be0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f043 0204 	orr.w	r2, r3, #4
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e267      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d075      	beq.n	8004cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c0e:	4b88      	ldr	r3, [pc, #544]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d00c      	beq.n	8004c34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1a:	4b85      	ldr	r3, [pc, #532]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d112      	bne.n	8004c4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c26:	4b82      	ldr	r3, [pc, #520]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c32:	d10b      	bne.n	8004c4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c34:	4b7e      	ldr	r3, [pc, #504]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d05b      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x108>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d157      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e242      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c54:	d106      	bne.n	8004c64 <HAL_RCC_OscConfig+0x74>
 8004c56:	4b76      	ldr	r3, [pc, #472]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a75      	ldr	r2, [pc, #468]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e01d      	b.n	8004ca0 <HAL_RCC_OscConfig+0xb0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c6c:	d10c      	bne.n	8004c88 <HAL_RCC_OscConfig+0x98>
 8004c6e:	4b70      	ldr	r3, [pc, #448]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a6f      	ldr	r2, [pc, #444]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	4b6d      	ldr	r3, [pc, #436]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a6c      	ldr	r2, [pc, #432]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e00b      	b.n	8004ca0 <HAL_RCC_OscConfig+0xb0>
 8004c88:	4b69      	ldr	r3, [pc, #420]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a68      	ldr	r2, [pc, #416]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	4b66      	ldr	r3, [pc, #408]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a65      	ldr	r2, [pc, #404]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d013      	beq.n	8004cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca8:	f7fe faf6 	bl	8003298 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb0:	f7fe faf2 	bl	8003298 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b64      	cmp	r3, #100	; 0x64
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e207      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	4b5b      	ldr	r3, [pc, #364]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0xc0>
 8004cce:	e014      	b.n	8004cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fae2 	bl	8003298 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd8:	f7fe fade 	bl	8003298 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	; 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e1f3      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	4b51      	ldr	r3, [pc, #324]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0xe8>
 8004cf6:	e000      	b.n	8004cfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d063      	beq.n	8004dce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d06:	4b4a      	ldr	r3, [pc, #296]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00b      	beq.n	8004d2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d12:	4b47      	ldr	r3, [pc, #284]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d11c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1e:	4b44      	ldr	r3, [pc, #272]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d116      	bne.n	8004d58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2a:	4b41      	ldr	r3, [pc, #260]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_RCC_OscConfig+0x152>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d001      	beq.n	8004d42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e1c7      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d42:	4b3b      	ldr	r3, [pc, #236]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4937      	ldr	r1, [pc, #220]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d56:	e03a      	b.n	8004dce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d020      	beq.n	8004da2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d60:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <HAL_RCC_OscConfig+0x244>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fe fa97 	bl	8003298 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6e:	f7fe fa93 	bl	8003298 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e1a8      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	4b2b      	ldr	r3, [pc, #172]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8c:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	4925      	ldr	r1, [pc, #148]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	600b      	str	r3, [r1, #0]
 8004da0:	e015      	b.n	8004dce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da2:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <HAL_RCC_OscConfig+0x244>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da8:	f7fe fa76 	bl	8003298 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db0:	f7fe fa72 	bl	8003298 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e187      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d036      	beq.n	8004e48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d016      	beq.n	8004e10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de2:	4b15      	ldr	r3, [pc, #84]	; (8004e38 <HAL_RCC_OscConfig+0x248>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fe fa56 	bl	8003298 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df0:	f7fe fa52 	bl	8003298 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e167      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_RCC_OscConfig+0x240>)
 8004e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x200>
 8004e0e:	e01b      	b.n	8004e48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCC_OscConfig+0x248>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e16:	f7fe fa3f 	bl	8003298 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e1c:	e00e      	b.n	8004e3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e1e:	f7fe fa3b 	bl	8003298 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d907      	bls.n	8004e3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e150      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
 8004e30:	40023800 	.word	0x40023800
 8004e34:	42470000 	.word	0x42470000
 8004e38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3c:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ea      	bne.n	8004e1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8097 	beq.w	8004f84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5a:	4b81      	ldr	r3, [pc, #516]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10f      	bne.n	8004e86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	4b7d      	ldr	r3, [pc, #500]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	4a7c      	ldr	r2, [pc, #496]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6413      	str	r3, [r2, #64]	; 0x40
 8004e76:	4b7a      	ldr	r3, [pc, #488]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e86:	4b77      	ldr	r3, [pc, #476]	; (8005064 <HAL_RCC_OscConfig+0x474>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d118      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e92:	4b74      	ldr	r3, [pc, #464]	; (8005064 <HAL_RCC_OscConfig+0x474>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a73      	ldr	r2, [pc, #460]	; (8005064 <HAL_RCC_OscConfig+0x474>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9e:	f7fe f9fb 	bl	8003298 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea6:	f7fe f9f7 	bl	8003298 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e10c      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb8:	4b6a      	ldr	r3, [pc, #424]	; (8005064 <HAL_RCC_OscConfig+0x474>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d106      	bne.n	8004eda <HAL_RCC_OscConfig+0x2ea>
 8004ecc:	4b64      	ldr	r3, [pc, #400]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	4a63      	ldr	r2, [pc, #396]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed8:	e01c      	b.n	8004f14 <HAL_RCC_OscConfig+0x324>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCC_OscConfig+0x30c>
 8004ee2:	4b5f      	ldr	r3, [pc, #380]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee6:	4a5e      	ldr	r2, [pc, #376]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	f043 0304 	orr.w	r3, r3, #4
 8004eec:	6713      	str	r3, [r2, #112]	; 0x70
 8004eee:	4b5c      	ldr	r3, [pc, #368]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	4a5b      	ldr	r2, [pc, #364]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8004efa:	e00b      	b.n	8004f14 <HAL_RCC_OscConfig+0x324>
 8004efc:	4b58      	ldr	r3, [pc, #352]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4a57      	ldr	r2, [pc, #348]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	6713      	str	r3, [r2, #112]	; 0x70
 8004f08:	4b55      	ldr	r3, [pc, #340]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	4a54      	ldr	r2, [pc, #336]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	f023 0304 	bic.w	r3, r3, #4
 8004f12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1c:	f7fe f9bc 	bl	8003298 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fe f9b8 	bl	8003298 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e0cb      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3a:	4b49      	ldr	r3, [pc, #292]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0ee      	beq.n	8004f24 <HAL_RCC_OscConfig+0x334>
 8004f46:	e014      	b.n	8004f72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f48:	f7fe f9a6 	bl	8003298 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f50:	f7fe f9a2 	bl	8003298 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0b5      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f66:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1ee      	bne.n	8004f50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d105      	bne.n	8004f84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f78:	4b39      	ldr	r3, [pc, #228]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	4a38      	ldr	r2, [pc, #224]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80a1 	beq.w	80050d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f8e:	4b34      	ldr	r3, [pc, #208]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d05c      	beq.n	8005054 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d141      	bne.n	8005026 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa2:	4b31      	ldr	r3, [pc, #196]	; (8005068 <HAL_RCC_OscConfig+0x478>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa8:	f7fe f976 	bl	8003298 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fe f972 	bl	8003298 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e087      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	4b27      	ldr	r3, [pc, #156]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69da      	ldr	r2, [r3, #28]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	061b      	lsls	r3, r3, #24
 8004ff2:	491b      	ldr	r1, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCC_OscConfig+0x478>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffe:	f7fe f94b 	bl	8003298 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005006:	f7fe f947 	bl	8003298 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e05c      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005018:	4b11      	ldr	r3, [pc, #68]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x416>
 8005024:	e054      	b.n	80050d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <HAL_RCC_OscConfig+0x478>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502c:	f7fe f934 	bl	8003298 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005034:	f7fe f930 	bl	8003298 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e045      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_RCC_OscConfig+0x470>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0x444>
 8005052:	e03d      	b.n	80050d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e038      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
 8005060:	40023800 	.word	0x40023800
 8005064:	40007000 	.word	0x40007000
 8005068:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_RCC_OscConfig+0x4ec>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d028      	beq.n	80050cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d121      	bne.n	80050cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d11a      	bne.n	80050cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800509c:	4013      	ands	r3, r2
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d111      	bne.n	80050cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	3b01      	subs	r3, #1
 80050b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d107      	bne.n	80050cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800

080050e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0cc      	b.n	800528e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050f4:	4b68      	ldr	r3, [pc, #416]	; (8005298 <HAL_RCC_ClockConfig+0x1b8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d90c      	bls.n	800511c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b65      	ldr	r3, [pc, #404]	; (8005298 <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b63      	ldr	r3, [pc, #396]	; (8005298 <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0b8      	b.n	800528e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d020      	beq.n	800516a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005134:	4b59      	ldr	r3, [pc, #356]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	4a58      	ldr	r2, [pc, #352]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800513e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800514c:	4b53      	ldr	r3, [pc, #332]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	4a52      	ldr	r2, [pc, #328]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005158:	4b50      	ldr	r3, [pc, #320]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	494d      	ldr	r1, [pc, #308]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	4313      	orrs	r3, r2
 8005168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d044      	beq.n	8005200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d107      	bne.n	800518e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517e:	4b47      	ldr	r3, [pc, #284]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d119      	bne.n	80051be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e07f      	b.n	800528e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d003      	beq.n	800519e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800519a:	2b03      	cmp	r3, #3
 800519c:	d107      	bne.n	80051ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519e:	4b3f      	ldr	r3, [pc, #252]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e06f      	b.n	800528e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ae:	4b3b      	ldr	r3, [pc, #236]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e067      	b.n	800528e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051be:	4b37      	ldr	r3, [pc, #220]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f023 0203 	bic.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4934      	ldr	r1, [pc, #208]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051d0:	f7fe f862 	bl	8003298 <HAL_GetTick>
 80051d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d8:	f7fe f85e 	bl	8003298 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e04f      	b.n	800528e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ee:	4b2b      	ldr	r3, [pc, #172]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 020c 	and.w	r2, r3, #12
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d1eb      	bne.n	80051d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005200:	4b25      	ldr	r3, [pc, #148]	; (8005298 <HAL_RCC_ClockConfig+0x1b8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d20c      	bcs.n	8005228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520e:	4b22      	ldr	r3, [pc, #136]	; (8005298 <HAL_RCC_ClockConfig+0x1b8>)
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005216:	4b20      	ldr	r3, [pc, #128]	; (8005298 <HAL_RCC_ClockConfig+0x1b8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d001      	beq.n	8005228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e032      	b.n	800528e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005234:	4b19      	ldr	r3, [pc, #100]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	4916      	ldr	r1, [pc, #88]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	4313      	orrs	r3, r2
 8005244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	490e      	ldr	r1, [pc, #56]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	4313      	orrs	r3, r2
 8005264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005266:	f000 f821 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 800526a:	4602      	mov	r2, r0
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	091b      	lsrs	r3, r3, #4
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	490a      	ldr	r1, [pc, #40]	; (80052a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005278:	5ccb      	ldrb	r3, [r1, r3]
 800527a:	fa22 f303 	lsr.w	r3, r2, r3
 800527e:	4a09      	ldr	r2, [pc, #36]	; (80052a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fd ffc2 	bl	8003210 <HAL_InitTick>

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40023c00 	.word	0x40023c00
 800529c:	40023800 	.word	0x40023800
 80052a0:	0800e2a8 	.word	0x0800e2a8
 80052a4:	20000004 	.word	0x20000004
 80052a8:	20000008 	.word	0x20000008

080052ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b0:	b094      	sub	sp, #80	; 0x50
 80052b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	647b      	str	r3, [r7, #68]	; 0x44
 80052b8:	2300      	movs	r3, #0
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052bc:	2300      	movs	r3, #0
 80052be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052c4:	4b79      	ldr	r3, [pc, #484]	; (80054ac <HAL_RCC_GetSysClockFreq+0x200>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 030c 	and.w	r3, r3, #12
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d00d      	beq.n	80052ec <HAL_RCC_GetSysClockFreq+0x40>
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	f200 80e1 	bhi.w	8005498 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_RCC_GetSysClockFreq+0x34>
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d003      	beq.n	80052e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80052de:	e0db      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052e0:	4b73      	ldr	r3, [pc, #460]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80052e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052e4:	e0db      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052e6:	4b73      	ldr	r3, [pc, #460]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80052e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052ea:	e0d8      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052ec:	4b6f      	ldr	r3, [pc, #444]	; (80054ac <HAL_RCC_GetSysClockFreq+0x200>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052f6:	4b6d      	ldr	r3, [pc, #436]	; (80054ac <HAL_RCC_GetSysClockFreq+0x200>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d063      	beq.n	80053ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005302:	4b6a      	ldr	r3, [pc, #424]	; (80054ac <HAL_RCC_GetSysClockFreq+0x200>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	099b      	lsrs	r3, r3, #6
 8005308:	2200      	movs	r2, #0
 800530a:	63bb      	str	r3, [r7, #56]	; 0x38
 800530c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005314:	633b      	str	r3, [r7, #48]	; 0x30
 8005316:	2300      	movs	r3, #0
 8005318:	637b      	str	r3, [r7, #52]	; 0x34
 800531a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800531e:	4622      	mov	r2, r4
 8005320:	462b      	mov	r3, r5
 8005322:	f04f 0000 	mov.w	r0, #0
 8005326:	f04f 0100 	mov.w	r1, #0
 800532a:	0159      	lsls	r1, r3, #5
 800532c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005330:	0150      	lsls	r0, r2, #5
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4621      	mov	r1, r4
 8005338:	1a51      	subs	r1, r2, r1
 800533a:	6139      	str	r1, [r7, #16]
 800533c:	4629      	mov	r1, r5
 800533e:	eb63 0301 	sbc.w	r3, r3, r1
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005350:	4659      	mov	r1, fp
 8005352:	018b      	lsls	r3, r1, #6
 8005354:	4651      	mov	r1, sl
 8005356:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800535a:	4651      	mov	r1, sl
 800535c:	018a      	lsls	r2, r1, #6
 800535e:	4651      	mov	r1, sl
 8005360:	ebb2 0801 	subs.w	r8, r2, r1
 8005364:	4659      	mov	r1, fp
 8005366:	eb63 0901 	sbc.w	r9, r3, r1
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800537a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800537e:	4690      	mov	r8, r2
 8005380:	4699      	mov	r9, r3
 8005382:	4623      	mov	r3, r4
 8005384:	eb18 0303 	adds.w	r3, r8, r3
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	462b      	mov	r3, r5
 800538c:	eb49 0303 	adc.w	r3, r9, r3
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800539e:	4629      	mov	r1, r5
 80053a0:	024b      	lsls	r3, r1, #9
 80053a2:	4621      	mov	r1, r4
 80053a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053a8:	4621      	mov	r1, r4
 80053aa:	024a      	lsls	r2, r1, #9
 80053ac:	4610      	mov	r0, r2
 80053ae:	4619      	mov	r1, r3
 80053b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b2:	2200      	movs	r2, #0
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053bc:	f7fb fc2c 	bl	8000c18 <__aeabi_uldivmod>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4613      	mov	r3, r2
 80053c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c8:	e058      	b.n	800547c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ca:	4b38      	ldr	r3, [pc, #224]	; (80054ac <HAL_RCC_GetSysClockFreq+0x200>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	099b      	lsrs	r3, r3, #6
 80053d0:	2200      	movs	r2, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	4611      	mov	r1, r2
 80053d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053da:	623b      	str	r3, [r7, #32]
 80053dc:	2300      	movs	r3, #0
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
 80053e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053e4:	4642      	mov	r2, r8
 80053e6:	464b      	mov	r3, r9
 80053e8:	f04f 0000 	mov.w	r0, #0
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	0159      	lsls	r1, r3, #5
 80053f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053f6:	0150      	lsls	r0, r2, #5
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4641      	mov	r1, r8
 80053fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005402:	4649      	mov	r1, r9
 8005404:	eb63 0b01 	sbc.w	fp, r3, r1
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005414:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005418:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800541c:	ebb2 040a 	subs.w	r4, r2, sl
 8005420:	eb63 050b 	sbc.w	r5, r3, fp
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	00eb      	lsls	r3, r5, #3
 800542e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005432:	00e2      	lsls	r2, r4, #3
 8005434:	4614      	mov	r4, r2
 8005436:	461d      	mov	r5, r3
 8005438:	4643      	mov	r3, r8
 800543a:	18e3      	adds	r3, r4, r3
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	464b      	mov	r3, r9
 8005440:	eb45 0303 	adc.w	r3, r5, r3
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005452:	4629      	mov	r1, r5
 8005454:	028b      	lsls	r3, r1, #10
 8005456:	4621      	mov	r1, r4
 8005458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800545c:	4621      	mov	r1, r4
 800545e:	028a      	lsls	r2, r1, #10
 8005460:	4610      	mov	r0, r2
 8005462:	4619      	mov	r1, r3
 8005464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005466:	2200      	movs	r2, #0
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	61fa      	str	r2, [r7, #28]
 800546c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005470:	f7fb fbd2 	bl	8000c18 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4613      	mov	r3, r2
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_RCC_GetSysClockFreq+0x200>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	3301      	adds	r3, #1
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800548c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800548e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005490:	fbb2 f3f3 	udiv	r3, r2, r3
 8005494:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005496:	e002      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800549c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800549e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3750      	adds	r7, #80	; 0x50
 80054a4:	46bd      	mov	sp, r7
 80054a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054aa:	bf00      	nop
 80054ac:	40023800 	.word	0x40023800
 80054b0:	00f42400 	.word	0x00f42400
 80054b4:	007a1200 	.word	0x007a1200

080054b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <HAL_RCC_GetHCLKFreq+0x14>)
 80054be:	681b      	ldr	r3, [r3, #0]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20000004 	.word	0x20000004

080054d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054d4:	f7ff fff0 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	0a9b      	lsrs	r3, r3, #10
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4903      	ldr	r1, [pc, #12]	; (80054f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40023800 	.word	0x40023800
 80054f4:	0800e2b8 	.word	0x0800e2b8

080054f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054fc:	f7ff ffdc 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0b5b      	lsrs	r3, r3, #13
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4903      	ldr	r1, [pc, #12]	; (800551c <HAL_RCC_GetPCLK2Freq+0x24>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40023800 	.word	0x40023800
 800551c:	0800e2b8 	.word	0x0800e2b8

08005520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e07b      	b.n	800562a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	d108      	bne.n	800554c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005542:	d009      	beq.n	8005558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	61da      	str	r2, [r3, #28]
 800554a:	e005      	b.n	8005558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fd fbaa 	bl	8002ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	ea42 0103 	orr.w	r1, r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	0c1b      	lsrs	r3, r3, #16
 80055f6:	f003 0104 	and.w	r1, r3, #4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0210 	and.w	r2, r3, #16
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005618:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b088      	sub	sp, #32
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_SPI_Transmit+0x22>
 8005650:	2302      	movs	r3, #2
 8005652:	e126      	b.n	80058a2 <HAL_SPI_Transmit+0x270>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800565c:	f7fd fe1c 	bl	8003298 <HAL_GetTick>
 8005660:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b01      	cmp	r3, #1
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005672:	2302      	movs	r3, #2
 8005674:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005676:	e10b      	b.n	8005890 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_SPI_Transmit+0x52>
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005688:	e102      	b.n	8005890 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2203      	movs	r2, #3
 800568e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	88fa      	ldrh	r2, [r7, #6]
 80056a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d0:	d10f      	bne.n	80056f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d007      	beq.n	8005710 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800570e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005718:	d14b      	bne.n	80057b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_SPI_Transmit+0xf6>
 8005722:	8afb      	ldrh	r3, [r7, #22]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d13e      	bne.n	80057a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	881a      	ldrh	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	1c9a      	adds	r2, r3, #2
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800574c:	e02b      	b.n	80057a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b02      	cmp	r3, #2
 800575a:	d112      	bne.n	8005782 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	881a      	ldrh	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	1c9a      	adds	r2, r3, #2
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005780:	e011      	b.n	80057a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005782:	f7fd fd89 	bl	8003298 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d803      	bhi.n	800579a <HAL_SPI_Transmit+0x168>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d102      	bne.n	80057a0 <HAL_SPI_Transmit+0x16e>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057a4:	e074      	b.n	8005890 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1ce      	bne.n	800574e <HAL_SPI_Transmit+0x11c>
 80057b0:	e04c      	b.n	800584c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_SPI_Transmit+0x18e>
 80057ba:	8afb      	ldrh	r3, [r7, #22]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d140      	bne.n	8005842 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	7812      	ldrb	r2, [r2, #0]
 80057cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057e6:	e02c      	b.n	8005842 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d113      	bne.n	800581e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	7812      	ldrb	r2, [r2, #0]
 8005802:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	86da      	strh	r2, [r3, #54]	; 0x36
 800581c:	e011      	b.n	8005842 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581e:	f7fd fd3b 	bl	8003298 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d803      	bhi.n	8005836 <HAL_SPI_Transmit+0x204>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d102      	bne.n	800583c <HAL_SPI_Transmit+0x20a>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005840:	e026      	b.n	8005890 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1cd      	bne.n	80057e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fbcb 	bl	8005fec <SPI_EndRxTxTransaction>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800586a:	2300      	movs	r3, #0
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e000      	b.n	8005890 <HAL_SPI_Transmit+0x25e>
  }

error:
 800588e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b088      	sub	sp, #32
 80058ae:	af02      	add	r7, sp, #8
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c6:	d112      	bne.n	80058ee <HAL_SPI_Receive+0x44>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10e      	bne.n	80058ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2204      	movs	r2, #4
 80058d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058d8:	88fa      	ldrh	r2, [r7, #6]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	4613      	mov	r3, r2
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f8f1 	bl	8005acc <HAL_SPI_TransmitReceive>
 80058ea:	4603      	mov	r3, r0
 80058ec:	e0ea      	b.n	8005ac4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_SPI_Receive+0x52>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e0e3      	b.n	8005ac4 <HAL_SPI_Receive+0x21a>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005904:	f7fd fcc8 	bl	8003298 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	d002      	beq.n	800591c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005916:	2302      	movs	r3, #2
 8005918:	75fb      	strb	r3, [r7, #23]
    goto error;
 800591a:	e0ca      	b.n	8005ab2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_SPI_Receive+0x7e>
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800592c:	e0c1      	b.n	8005ab2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2204      	movs	r2, #4
 8005932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	88fa      	ldrh	r2, [r7, #6]
 8005946:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005974:	d10f      	bne.n	8005996 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005984:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005994:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	2b40      	cmp	r3, #64	; 0x40
 80059a2:	d007      	beq.n	80059b4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d162      	bne.n	8005a82 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059bc:	e02e      	b.n	8005a1c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d115      	bne.n	80059f8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f103 020c 	add.w	r2, r3, #12
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059f6:	e011      	b.n	8005a1c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f8:	f7fd fc4e 	bl	8003298 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d803      	bhi.n	8005a10 <HAL_SPI_Receive+0x166>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d102      	bne.n	8005a16 <HAL_SPI_Receive+0x16c>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a1a:	e04a      	b.n	8005ab2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1cb      	bne.n	80059be <HAL_SPI_Receive+0x114>
 8005a26:	e031      	b.n	8005a8c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d113      	bne.n	8005a5e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	b292      	uxth	r2, r2
 8005a42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	1c9a      	adds	r2, r3, #2
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a5c:	e011      	b.n	8005a82 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5e:	f7fd fc1b 	bl	8003298 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d803      	bhi.n	8005a76 <HAL_SPI_Receive+0x1cc>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d102      	bne.n	8005a7c <HAL_SPI_Receive+0x1d2>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a80:	e017      	b.n	8005ab2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1cd      	bne.n	8005a28 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fa45 	bl	8005f20 <SPI_EndRxTransaction>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	75fb      	strb	r3, [r7, #23]
 8005aae:	e000      	b.n	8005ab2 <HAL_SPI_Receive+0x208>
  }

error :
 8005ab0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08c      	sub	sp, #48	; 0x30
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ada:	2301      	movs	r3, #1
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_SPI_TransmitReceive+0x26>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e18a      	b.n	8005e08 <HAL_SPI_TransmitReceive+0x33c>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005afa:	f7fd fbcd 	bl	8003298 <HAL_GetTick>
 8005afe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b10:	887b      	ldrh	r3, [r7, #2]
 8005b12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d00f      	beq.n	8005b3c <HAL_SPI_TransmitReceive+0x70>
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b22:	d107      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x68>
 8005b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d003      	beq.n	8005b3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
 8005b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b3a:	e15b      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0x82>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0x82>
 8005b48:	887b      	ldrh	r3, [r7, #2]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b54:	e14e      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d003      	beq.n	8005b6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2205      	movs	r2, #5
 8005b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	887a      	ldrh	r2, [r7, #2]
 8005b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	887a      	ldrh	r2, [r7, #2]
 8005b80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	887a      	ldrh	r2, [r7, #2]
 8005b8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	887a      	ldrh	r2, [r7, #2]
 8005b92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d007      	beq.n	8005bbe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc6:	d178      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_SPI_TransmitReceive+0x10a>
 8005bd0:	8b7b      	ldrh	r3, [r7, #26]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d166      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	881a      	ldrh	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bfa:	e053      	b.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d11b      	bne.n	8005c42 <HAL_SPI_TransmitReceive+0x176>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d016      	beq.n	8005c42 <HAL_SPI_TransmitReceive+0x176>
 8005c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d113      	bne.n	8005c42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	881a      	ldrh	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	1c9a      	adds	r2, r3, #2
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d119      	bne.n	8005c84 <HAL_SPI_TransmitReceive+0x1b8>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d014      	beq.n	8005c84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	b292      	uxth	r2, r2
 8005c66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	1c9a      	adds	r2, r3, #2
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c80:	2301      	movs	r3, #1
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c84:	f7fd fb08 	bl	8003298 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d807      	bhi.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d8>
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d003      	beq.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ca2:	e0a7      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1a6      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x130>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1a1      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x130>
 8005cb8:	e07c      	b.n	8005db4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_SPI_TransmitReceive+0x1fc>
 8005cc2:	8b7b      	ldrh	r3, [r7, #26]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d16b      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cee:	e057      	b.n	8005da0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d11c      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x26c>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d017      	beq.n	8005d38 <HAL_SPI_TransmitReceive+0x26c>
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d114      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	330c      	adds	r3, #12
 8005d18:	7812      	ldrb	r2, [r2, #0]
 8005d1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d119      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x2ae>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d014      	beq.n	8005d7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d76:	2301      	movs	r3, #1
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d7a:	f7fd fa8d 	bl	8003298 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d803      	bhi.n	8005d92 <HAL_SPI_TransmitReceive+0x2c6>
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d102      	bne.n	8005d98 <HAL_SPI_TransmitReceive+0x2cc>
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d103      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d9e:	e029      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1a2      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x224>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d19d      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f917 	bl	8005fec <SPI_EndRxTxTransaction>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d006      	beq.n	8005dd2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005dd0:	e010      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	e000      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005df2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3730      	adds	r7, #48	; 0x30
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e20:	f7fd fa3a 	bl	8003298 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	1a9b      	subs	r3, r3, r2
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e30:	f7fd fa32 	bl	8003298 <HAL_GetTick>
 8005e34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e36:	4b39      	ldr	r3, [pc, #228]	; (8005f1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	015b      	lsls	r3, r3, #5
 8005e3c:	0d1b      	lsrs	r3, r3, #20
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e46:	e054      	b.n	8005ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d050      	beq.n	8005ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e50:	f7fd fa22 	bl	8003298 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d902      	bls.n	8005e66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d13d      	bne.n	8005ee2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e7e:	d111      	bne.n	8005ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e88:	d004      	beq.n	8005e94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e92:	d107      	bne.n	8005ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eac:	d10f      	bne.n	8005ece <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e017      	b.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4013      	ands	r3, r2
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	bf0c      	ite	eq
 8005f02:	2301      	moveq	r3, #1
 8005f04:	2300      	movne	r3, #0
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d19b      	bne.n	8005e48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000004 	.word	0x20000004

08005f20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f34:	d111      	bne.n	8005f5a <SPI_EndRxTransaction+0x3a>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f3e:	d004      	beq.n	8005f4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f48:	d107      	bne.n	8005f5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f58:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f62:	d12a      	bne.n	8005fba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6c:	d012      	beq.n	8005f94 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	2180      	movs	r1, #128	; 0x80
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7ff ff49 	bl	8005e10 <SPI_WaitFlagStateUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d02d      	beq.n	8005fe0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	f043 0220 	orr.w	r2, r3, #32
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e026      	b.n	8005fe2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f7ff ff36 	bl	8005e10 <SPI_WaitFlagStateUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01a      	beq.n	8005fe0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e013      	b.n	8005fe2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff ff23 	bl	8005e10 <SPI_WaitFlagStateUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	f043 0220 	orr.w	r2, r3, #32
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e000      	b.n	8005fe2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ff8:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <SPI_EndRxTxTransaction+0x7c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1b      	ldr	r2, [pc, #108]	; (800606c <SPI_EndRxTxTransaction+0x80>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	0d5b      	lsrs	r3, r3, #21
 8006004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006008:	fb02 f303 	mul.w	r3, r2, r3
 800600c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006016:	d112      	bne.n	800603e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2200      	movs	r2, #0
 8006020:	2180      	movs	r1, #128	; 0x80
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff fef4 	bl	8005e10 <SPI_WaitFlagStateUntilTimeout>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d016      	beq.n	800605c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006032:	f043 0220 	orr.w	r2, r3, #32
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e00f      	b.n	800605e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	3b01      	subs	r3, #1
 8006048:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	d0f2      	beq.n	800603e <SPI_EndRxTxTransaction+0x52>
 8006058:	e000      	b.n	800605c <SPI_EndRxTxTransaction+0x70>
        break;
 800605a:	bf00      	nop
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000004 	.word	0x20000004
 800606c:	165e9f81 	.word	0x165e9f81

08006070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e03f      	b.n	8006102 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fc feec 	bl	8002e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	; 0x24
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f929 	bl	800630c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b08a      	sub	sp, #40	; 0x28
 800610e:	af02      	add	r7, sp, #8
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b20      	cmp	r3, #32
 8006128:	d17c      	bne.n	8006224 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_UART_Transmit+0x2c>
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e075      	b.n	8006226 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_UART_Transmit+0x3e>
 8006144:	2302      	movs	r3, #2
 8006146:	e06e      	b.n	8006226 <HAL_UART_Transmit+0x11c>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2221      	movs	r2, #33	; 0x21
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800615e:	f7fd f89b 	bl	8003298 <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	88fa      	ldrh	r2, [r7, #6]
 800616e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006178:	d108      	bne.n	800618c <HAL_UART_Transmit+0x82>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d104      	bne.n	800618c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	e003      	b.n	8006194 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800619c:	e02a      	b.n	80061f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2200      	movs	r2, #0
 80061a6:	2180      	movs	r1, #128	; 0x80
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f840 	bl	800622e <UART_WaitOnFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e036      	b.n	8006226 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	3302      	adds	r3, #2
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	e007      	b.n	80061e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	781a      	ldrb	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	3301      	adds	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1cf      	bne.n	800619e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2200      	movs	r2, #0
 8006206:	2140      	movs	r1, #64	; 0x40
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f810 	bl	800622e <UART_WaitOnFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e006      	b.n	8006226 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	e000      	b.n	8006226 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006224:	2302      	movs	r3, #2
  }
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b090      	sub	sp, #64	; 0x40
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623e:	e050      	b.n	80062e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d04c      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800624a:	2b00      	cmp	r3, #0
 800624c:	d007      	beq.n	800625e <UART_WaitOnFlagUntilTimeout+0x30>
 800624e:	f7fd f823 	bl	8003298 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800625a:	429a      	cmp	r2, r3
 800625c:	d241      	bcs.n	80062e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800627e:	637a      	str	r2, [r7, #52]	; 0x34
 8006280:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3314      	adds	r3, #20
 8006298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	613b      	str	r3, [r7, #16]
   return(result);
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3314      	adds	r3, #20
 80062b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b2:	623a      	str	r2, [r7, #32]
 80062b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	69f9      	ldr	r1, [r7, #28]
 80062b8:	6a3a      	ldr	r2, [r7, #32]
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	61bb      	str	r3, [r7, #24]
   return(result);
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e00f      	b.n	8006302 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4013      	ands	r3, r2
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	bf0c      	ite	eq
 80062f2:	2301      	moveq	r3, #1
 80062f4:	2300      	movne	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d09f      	beq.n	8006240 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3740      	adds	r7, #64	; 0x40
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800630c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006310:	b0c0      	sub	sp, #256	; 0x100
 8006312:	af00      	add	r7, sp, #0
 8006314:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006328:	68d9      	ldr	r1, [r3, #12]
 800632a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	ea40 0301 	orr.w	r3, r0, r1
 8006334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	431a      	orrs	r2, r3
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	431a      	orrs	r2, r3
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006364:	f021 010c 	bic.w	r1, r1, #12
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006372:	430b      	orrs	r3, r1
 8006374:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006386:	6999      	ldr	r1, [r3, #24]
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	ea40 0301 	orr.w	r3, r0, r1
 8006392:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4b8f      	ldr	r3, [pc, #572]	; (80065d8 <UART_SetConfig+0x2cc>)
 800639c:	429a      	cmp	r2, r3
 800639e:	d005      	beq.n	80063ac <UART_SetConfig+0xa0>
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b8d      	ldr	r3, [pc, #564]	; (80065dc <UART_SetConfig+0x2d0>)
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d104      	bne.n	80063b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063ac:	f7ff f8a4 	bl	80054f8 <HAL_RCC_GetPCLK2Freq>
 80063b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80063b4:	e003      	b.n	80063be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063b6:	f7ff f88b 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 80063ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c8:	f040 810c 	bne.w	80065e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063de:	4622      	mov	r2, r4
 80063e0:	462b      	mov	r3, r5
 80063e2:	1891      	adds	r1, r2, r2
 80063e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80063e6:	415b      	adcs	r3, r3
 80063e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063ee:	4621      	mov	r1, r4
 80063f0:	eb12 0801 	adds.w	r8, r2, r1
 80063f4:	4629      	mov	r1, r5
 80063f6:	eb43 0901 	adc.w	r9, r3, r1
 80063fa:	f04f 0200 	mov.w	r2, #0
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800640a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800640e:	4690      	mov	r8, r2
 8006410:	4699      	mov	r9, r3
 8006412:	4623      	mov	r3, r4
 8006414:	eb18 0303 	adds.w	r3, r8, r3
 8006418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800641c:	462b      	mov	r3, r5
 800641e:	eb49 0303 	adc.w	r3, r9, r3
 8006422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006432:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006436:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800643a:	460b      	mov	r3, r1
 800643c:	18db      	adds	r3, r3, r3
 800643e:	653b      	str	r3, [r7, #80]	; 0x50
 8006440:	4613      	mov	r3, r2
 8006442:	eb42 0303 	adc.w	r3, r2, r3
 8006446:	657b      	str	r3, [r7, #84]	; 0x54
 8006448:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800644c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006450:	f7fa fbe2 	bl	8000c18 <__aeabi_uldivmod>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4b61      	ldr	r3, [pc, #388]	; (80065e0 <UART_SetConfig+0x2d4>)
 800645a:	fba3 2302 	umull	r2, r3, r3, r2
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	011c      	lsls	r4, r3, #4
 8006462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006466:	2200      	movs	r2, #0
 8006468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800646c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006470:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	1891      	adds	r1, r2, r2
 800647a:	64b9      	str	r1, [r7, #72]	; 0x48
 800647c:	415b      	adcs	r3, r3
 800647e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006480:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006484:	4641      	mov	r1, r8
 8006486:	eb12 0a01 	adds.w	sl, r2, r1
 800648a:	4649      	mov	r1, r9
 800648c:	eb43 0b01 	adc.w	fp, r3, r1
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800649c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064a4:	4692      	mov	sl, r2
 80064a6:	469b      	mov	fp, r3
 80064a8:	4643      	mov	r3, r8
 80064aa:	eb1a 0303 	adds.w	r3, sl, r3
 80064ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064b2:	464b      	mov	r3, r9
 80064b4:	eb4b 0303 	adc.w	r3, fp, r3
 80064b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064d0:	460b      	mov	r3, r1
 80064d2:	18db      	adds	r3, r3, r3
 80064d4:	643b      	str	r3, [r7, #64]	; 0x40
 80064d6:	4613      	mov	r3, r2
 80064d8:	eb42 0303 	adc.w	r3, r2, r3
 80064dc:	647b      	str	r3, [r7, #68]	; 0x44
 80064de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064e6:	f7fa fb97 	bl	8000c18 <__aeabi_uldivmod>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4611      	mov	r1, r2
 80064f0:	4b3b      	ldr	r3, [pc, #236]	; (80065e0 <UART_SetConfig+0x2d4>)
 80064f2:	fba3 2301 	umull	r2, r3, r3, r1
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	2264      	movs	r2, #100	; 0x64
 80064fa:	fb02 f303 	mul.w	r3, r2, r3
 80064fe:	1acb      	subs	r3, r1, r3
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006506:	4b36      	ldr	r3, [pc, #216]	; (80065e0 <UART_SetConfig+0x2d4>)
 8006508:	fba3 2302 	umull	r2, r3, r3, r2
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006514:	441c      	add	r4, r3
 8006516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800651a:	2200      	movs	r2, #0
 800651c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006520:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006524:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	1891      	adds	r1, r2, r2
 800652e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006530:	415b      	adcs	r3, r3
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006538:	4641      	mov	r1, r8
 800653a:	1851      	adds	r1, r2, r1
 800653c:	6339      	str	r1, [r7, #48]	; 0x30
 800653e:	4649      	mov	r1, r9
 8006540:	414b      	adcs	r3, r1
 8006542:	637b      	str	r3, [r7, #52]	; 0x34
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006550:	4659      	mov	r1, fp
 8006552:	00cb      	lsls	r3, r1, #3
 8006554:	4651      	mov	r1, sl
 8006556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800655a:	4651      	mov	r1, sl
 800655c:	00ca      	lsls	r2, r1, #3
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	4603      	mov	r3, r0
 8006564:	4642      	mov	r2, r8
 8006566:	189b      	adds	r3, r3, r2
 8006568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800656c:	464b      	mov	r3, r9
 800656e:	460a      	mov	r2, r1
 8006570:	eb42 0303 	adc.w	r3, r2, r3
 8006574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006584:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800658c:	460b      	mov	r3, r1
 800658e:	18db      	adds	r3, r3, r3
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28
 8006592:	4613      	mov	r3, r2
 8006594:	eb42 0303 	adc.w	r3, r2, r3
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800659a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800659e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80065a2:	f7fa fb39 	bl	8000c18 <__aeabi_uldivmod>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <UART_SetConfig+0x2d4>)
 80065ac:	fba3 1302 	umull	r1, r3, r3, r2
 80065b0:	095b      	lsrs	r3, r3, #5
 80065b2:	2164      	movs	r1, #100	; 0x64
 80065b4:	fb01 f303 	mul.w	r3, r1, r3
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	3332      	adds	r3, #50	; 0x32
 80065be:	4a08      	ldr	r2, [pc, #32]	; (80065e0 <UART_SetConfig+0x2d4>)
 80065c0:	fba2 2303 	umull	r2, r3, r2, r3
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	f003 0207 	and.w	r2, r3, #7
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4422      	add	r2, r4
 80065d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065d4:	e105      	b.n	80067e2 <UART_SetConfig+0x4d6>
 80065d6:	bf00      	nop
 80065d8:	40011000 	.word	0x40011000
 80065dc:	40011400 	.word	0x40011400
 80065e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065f6:	4642      	mov	r2, r8
 80065f8:	464b      	mov	r3, r9
 80065fa:	1891      	adds	r1, r2, r2
 80065fc:	6239      	str	r1, [r7, #32]
 80065fe:	415b      	adcs	r3, r3
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
 8006602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006606:	4641      	mov	r1, r8
 8006608:	1854      	adds	r4, r2, r1
 800660a:	4649      	mov	r1, r9
 800660c:	eb43 0501 	adc.w	r5, r3, r1
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	00eb      	lsls	r3, r5, #3
 800661a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800661e:	00e2      	lsls	r2, r4, #3
 8006620:	4614      	mov	r4, r2
 8006622:	461d      	mov	r5, r3
 8006624:	4643      	mov	r3, r8
 8006626:	18e3      	adds	r3, r4, r3
 8006628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800662c:	464b      	mov	r3, r9
 800662e:	eb45 0303 	adc.w	r3, r5, r3
 8006632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006642:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006652:	4629      	mov	r1, r5
 8006654:	008b      	lsls	r3, r1, #2
 8006656:	4621      	mov	r1, r4
 8006658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800665c:	4621      	mov	r1, r4
 800665e:	008a      	lsls	r2, r1, #2
 8006660:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006664:	f7fa fad8 	bl	8000c18 <__aeabi_uldivmod>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4b60      	ldr	r3, [pc, #384]	; (80067f0 <UART_SetConfig+0x4e4>)
 800666e:	fba3 2302 	umull	r2, r3, r3, r2
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	011c      	lsls	r4, r3, #4
 8006676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800667a:	2200      	movs	r2, #0
 800667c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006680:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006684:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	1891      	adds	r1, r2, r2
 800668e:	61b9      	str	r1, [r7, #24]
 8006690:	415b      	adcs	r3, r3
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006698:	4641      	mov	r1, r8
 800669a:	1851      	adds	r1, r2, r1
 800669c:	6139      	str	r1, [r7, #16]
 800669e:	4649      	mov	r1, r9
 80066a0:	414b      	adcs	r3, r1
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066b0:	4659      	mov	r1, fp
 80066b2:	00cb      	lsls	r3, r1, #3
 80066b4:	4651      	mov	r1, sl
 80066b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ba:	4651      	mov	r1, sl
 80066bc:	00ca      	lsls	r2, r1, #3
 80066be:	4610      	mov	r0, r2
 80066c0:	4619      	mov	r1, r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	4642      	mov	r2, r8
 80066c6:	189b      	adds	r3, r3, r2
 80066c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066cc:	464b      	mov	r3, r9
 80066ce:	460a      	mov	r2, r1
 80066d0:	eb42 0303 	adc.w	r3, r2, r3
 80066d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80066e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066f0:	4649      	mov	r1, r9
 80066f2:	008b      	lsls	r3, r1, #2
 80066f4:	4641      	mov	r1, r8
 80066f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066fa:	4641      	mov	r1, r8
 80066fc:	008a      	lsls	r2, r1, #2
 80066fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006702:	f7fa fa89 	bl	8000c18 <__aeabi_uldivmod>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4b39      	ldr	r3, [pc, #228]	; (80067f0 <UART_SetConfig+0x4e4>)
 800670c:	fba3 1302 	umull	r1, r3, r3, r2
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	2164      	movs	r1, #100	; 0x64
 8006714:	fb01 f303 	mul.w	r3, r1, r3
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	3332      	adds	r3, #50	; 0x32
 800671e:	4a34      	ldr	r2, [pc, #208]	; (80067f0 <UART_SetConfig+0x4e4>)
 8006720:	fba2 2303 	umull	r2, r3, r2, r3
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800672a:	441c      	add	r4, r3
 800672c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006730:	2200      	movs	r2, #0
 8006732:	673b      	str	r3, [r7, #112]	; 0x70
 8006734:	677a      	str	r2, [r7, #116]	; 0x74
 8006736:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800673a:	4642      	mov	r2, r8
 800673c:	464b      	mov	r3, r9
 800673e:	1891      	adds	r1, r2, r2
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	415b      	adcs	r3, r3
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800674a:	4641      	mov	r1, r8
 800674c:	1851      	adds	r1, r2, r1
 800674e:	6039      	str	r1, [r7, #0]
 8006750:	4649      	mov	r1, r9
 8006752:	414b      	adcs	r3, r1
 8006754:	607b      	str	r3, [r7, #4]
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006762:	4659      	mov	r1, fp
 8006764:	00cb      	lsls	r3, r1, #3
 8006766:	4651      	mov	r1, sl
 8006768:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800676c:	4651      	mov	r1, sl
 800676e:	00ca      	lsls	r2, r1, #3
 8006770:	4610      	mov	r0, r2
 8006772:	4619      	mov	r1, r3
 8006774:	4603      	mov	r3, r0
 8006776:	4642      	mov	r2, r8
 8006778:	189b      	adds	r3, r3, r2
 800677a:	66bb      	str	r3, [r7, #104]	; 0x68
 800677c:	464b      	mov	r3, r9
 800677e:	460a      	mov	r2, r1
 8006780:	eb42 0303 	adc.w	r3, r2, r3
 8006784:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	663b      	str	r3, [r7, #96]	; 0x60
 8006790:	667a      	str	r2, [r7, #100]	; 0x64
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800679e:	4649      	mov	r1, r9
 80067a0:	008b      	lsls	r3, r1, #2
 80067a2:	4641      	mov	r1, r8
 80067a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067a8:	4641      	mov	r1, r8
 80067aa:	008a      	lsls	r2, r1, #2
 80067ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80067b0:	f7fa fa32 	bl	8000c18 <__aeabi_uldivmod>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <UART_SetConfig+0x4e4>)
 80067ba:	fba3 1302 	umull	r1, r3, r3, r2
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	2164      	movs	r1, #100	; 0x64
 80067c2:	fb01 f303 	mul.w	r3, r1, r3
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	3332      	adds	r3, #50	; 0x32
 80067cc:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <UART_SetConfig+0x4e4>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	f003 020f 	and.w	r2, r3, #15
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4422      	add	r2, r4
 80067e0:	609a      	str	r2, [r3, #8]
}
 80067e2:	bf00      	nop
 80067e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067e8:	46bd      	mov	sp, r7
 80067ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ee:	bf00      	nop
 80067f0:	51eb851f 	.word	0x51eb851f

080067f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80067f8:	4904      	ldr	r1, [pc, #16]	; (800680c <MX_FATFS_Init+0x18>)
 80067fa:	4805      	ldr	r0, [pc, #20]	; (8006810 <MX_FATFS_Init+0x1c>)
 80067fc:	f003 fdee 	bl	800a3dc <FATFS_LinkDriver>
 8006800:	4603      	mov	r3, r0
 8006802:	461a      	mov	r2, r3
 8006804:	4b03      	ldr	r3, [pc, #12]	; (8006814 <MX_FATFS_Init+0x20>)
 8006806:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006808:	bf00      	nop
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000ca4 	.word	0x20000ca4
 8006810:	20000010 	.word	0x20000010
 8006814:	20000ca0 	.word	0x20000ca0

08006818 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800681c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800681e:	4618      	mov	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	4618      	mov	r0, r3
 8006836:	f7fa fea3 	bl	8001580 <SD_disk_initialize>
 800683a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	4618      	mov	r0, r3
 8006852:	f7fa ff7b 	bl	800174c <SD_disk_status>
 8006856:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006858:	4618      	mov	r0, r3
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	607a      	str	r2, [r7, #4]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006870:	7bf8      	ldrb	r0, [r7, #15]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	f7fa ff7e 	bl	8001778 <SD_disk_read>
 800687c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	4603      	mov	r3, r0
 8006894:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006896:	7bf8      	ldrb	r0, [r7, #15]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	f7fa ffd5 	bl	800184c <SD_disk_write>
 80068a2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	603a      	str	r2, [r7, #0]
 80068b6:	71fb      	strb	r3, [r7, #7]
 80068b8:	460b      	mov	r3, r1
 80068ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80068bc:	79b9      	ldrb	r1, [r7, #6]
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fb f846 	bl	8001954 <SD_disk_ioctl>
 80068c8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	4603      	mov	r3, r0
 80068dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	4a08      	ldr	r2, [pc, #32]	; (8006904 <disk_status+0x30>)
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	79fa      	ldrb	r2, [r7, #7]
 80068ec:	4905      	ldr	r1, [pc, #20]	; (8006904 <disk_status+0x30>)
 80068ee:	440a      	add	r2, r1
 80068f0:	7a12      	ldrb	r2, [r2, #8]
 80068f2:	4610      	mov	r0, r2
 80068f4:	4798      	blx	r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000ed0 	.word	0x20000ed0

08006908 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	4a0d      	ldr	r2, [pc, #52]	; (8006950 <disk_initialize+0x48>)
 800691a:	5cd3      	ldrb	r3, [r2, r3]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d111      	bne.n	8006944 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	4a0b      	ldr	r2, [pc, #44]	; (8006950 <disk_initialize+0x48>)
 8006924:	2101      	movs	r1, #1
 8006926:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	4a09      	ldr	r2, [pc, #36]	; (8006950 <disk_initialize+0x48>)
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	79fa      	ldrb	r2, [r7, #7]
 8006936:	4906      	ldr	r1, [pc, #24]	; (8006950 <disk_initialize+0x48>)
 8006938:	440a      	add	r2, r1
 800693a:	7a12      	ldrb	r2, [r2, #8]
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000ed0 	.word	0x20000ed0

08006954 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006954:	b590      	push	{r4, r7, lr}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	4a0a      	ldr	r2, [pc, #40]	; (8006990 <disk_read+0x3c>)
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	689c      	ldr	r4, [r3, #8]
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	4a07      	ldr	r2, [pc, #28]	; (8006990 <disk_read+0x3c>)
 8006974:	4413      	add	r3, r2
 8006976:	7a18      	ldrb	r0, [r3, #8]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	47a0      	blx	r4
 8006980:	4603      	mov	r3, r0
 8006982:	75fb      	strb	r3, [r7, #23]
  return res;
 8006984:	7dfb      	ldrb	r3, [r7, #23]
}
 8006986:	4618      	mov	r0, r3
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	bd90      	pop	{r4, r7, pc}
 800698e:	bf00      	nop
 8006990:	20000ed0 	.word	0x20000ed0

08006994 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	4a0a      	ldr	r2, [pc, #40]	; (80069d0 <disk_write+0x3c>)
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	68dc      	ldr	r4, [r3, #12]
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	4a07      	ldr	r2, [pc, #28]	; (80069d0 <disk_write+0x3c>)
 80069b4:	4413      	add	r3, r2
 80069b6:	7a18      	ldrb	r0, [r3, #8]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	47a0      	blx	r4
 80069c0:	4603      	mov	r3, r0
 80069c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd90      	pop	{r4, r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20000ed0 	.word	0x20000ed0

080069d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	603a      	str	r2, [r7, #0]
 80069de:	71fb      	strb	r3, [r7, #7]
 80069e0:	460b      	mov	r3, r1
 80069e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <disk_ioctl+0x38>)
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	79fa      	ldrb	r2, [r7, #7]
 80069f2:	4906      	ldr	r1, [pc, #24]	; (8006a0c <disk_ioctl+0x38>)
 80069f4:	440a      	add	r2, r1
 80069f6:	7a10      	ldrb	r0, [r2, #8]
 80069f8:	79b9      	ldrb	r1, [r7, #6]
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	4798      	blx	r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	73fb      	strb	r3, [r7, #15]
  return res;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20000ed0 	.word	0x20000ed0

08006a10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006a20:	89fb      	ldrh	r3, [r7, #14]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	b21a      	sxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	b21b      	sxth	r3, r3
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	b21b      	sxth	r3, r3
 8006a30:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006a32:	89fb      	ldrh	r3, [r7, #14]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3303      	adds	r3, #3
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	3202      	adds	r2, #2
 8006a58:	7812      	ldrb	r2, [r2, #0]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	3201      	adds	r2, #1
 8006a66:	7812      	ldrb	r2, [r2, #0]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	021b      	lsls	r3, r3, #8
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	7812      	ldrb	r2, [r2, #0]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
	return rv;
 8006a78:	68fb      	ldr	r3, [r7, #12]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	887a      	ldrh	r2, [r7, #2]
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	887b      	ldrh	r3, [r7, #2]
 8006aa0:	0a1b      	lsrs	r3, r3, #8
 8006aa2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	887a      	ldrh	r2, [r7, #2]
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	0a1b      	lsrs	r3, r3, #8
 8006ad6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	607a      	str	r2, [r7, #4]
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	0a1b      	lsrs	r3, r3, #8
 8006afa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	607a      	str	r2, [r7, #4]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00d      	beq.n	8006b4a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	1c53      	adds	r3, r2, #1
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	1c59      	adds	r1, r3, #1
 8006b38:	6179      	str	r1, [r7, #20]
 8006b3a:	7812      	ldrb	r2, [r2, #0]
 8006b3c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f1      	bne.n	8006b2e <mem_cpy+0x1a>
	}
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006b56:	b480      	push	{r7}
 8006b58:	b087      	sub	sp, #28
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	617a      	str	r2, [r7, #20]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3b01      	subs	r3, #1
 8006b76:	607b      	str	r3, [r7, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1f3      	bne.n	8006b66 <mem_set+0x10>
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006b8c:	b480      	push	{r7}
 8006b8e:	b089      	sub	sp, #36	; 0x24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	61fa      	str	r2, [r7, #28]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	4619      	mov	r1, r3
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	61ba      	str	r2, [r7, #24]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	1acb      	subs	r3, r1, r3
 8006bb8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	607b      	str	r3, [r7, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <mem_cmp+0x40>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0eb      	beq.n	8006ba4 <mem_cmp+0x18>

	return r;
 8006bcc:	697b      	ldr	r3, [r7, #20]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3724      	adds	r7, #36	; 0x24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006be4:	e002      	b.n	8006bec <chk_chr+0x12>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3301      	adds	r3, #1
 8006bea:	607b      	str	r3, [r7, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <chk_chr+0x26>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d1f2      	bne.n	8006be6 <chk_chr+0xc>
	return *str;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	781b      	ldrb	r3, [r3, #0]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	e029      	b.n	8006c78 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006c24:	4a27      	ldr	r2, [pc, #156]	; (8006cc4 <chk_lock+0xb4>)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	4413      	add	r3, r2
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01d      	beq.n	8006c6e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c32:	4a24      	ldr	r2, [pc, #144]	; (8006cc4 <chk_lock+0xb4>)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	4413      	add	r3, r2
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d116      	bne.n	8006c72 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006c44:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <chk_lock+0xb4>)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d10c      	bne.n	8006c72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c58:	4a1a      	ldr	r2, [pc, #104]	; (8006cc4 <chk_lock+0xb4>)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	4413      	add	r3, r2
 8006c60:	3308      	adds	r3, #8
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d102      	bne.n	8006c72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c6c:	e007      	b.n	8006c7e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3301      	adds	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d9d2      	bls.n	8006c24 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d109      	bne.n	8006c98 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <chk_lock+0x80>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d101      	bne.n	8006c94 <chk_lock+0x84>
 8006c90:	2300      	movs	r3, #0
 8006c92:	e010      	b.n	8006cb6 <chk_lock+0xa6>
 8006c94:	2312      	movs	r3, #18
 8006c96:	e00e      	b.n	8006cb6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d108      	bne.n	8006cb0 <chk_lock+0xa0>
 8006c9e:	4a09      	ldr	r2, [pc, #36]	; (8006cc4 <chk_lock+0xb4>)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	4413      	add	r3, r2
 8006ca6:	330c      	adds	r3, #12
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cae:	d101      	bne.n	8006cb4 <chk_lock+0xa4>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	e000      	b.n	8006cb6 <chk_lock+0xa6>
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	20000cb0 	.word	0x20000cb0

08006cc8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	607b      	str	r3, [r7, #4]
 8006cd2:	e002      	b.n	8006cda <enq_lock+0x12>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	607b      	str	r3, [r7, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d806      	bhi.n	8006cee <enq_lock+0x26>
 8006ce0:	4a09      	ldr	r2, [pc, #36]	; (8006d08 <enq_lock+0x40>)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	4413      	add	r3, r2
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f2      	bne.n	8006cd4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	bf14      	ite	ne
 8006cf4:	2301      	movne	r3, #1
 8006cf6:	2300      	moveq	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000cb0 	.word	0x20000cb0

08006d0c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	e01f      	b.n	8006d5c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006d1c:	4a41      	ldr	r2, [pc, #260]	; (8006e24 <inc_lock+0x118>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	4413      	add	r3, r2
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d113      	bne.n	8006d56 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006d2e:	4a3d      	ldr	r2, [pc, #244]	; (8006e24 <inc_lock+0x118>)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	4413      	add	r3, r2
 8006d36:	3304      	adds	r3, #4
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d109      	bne.n	8006d56 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006d42:	4a38      	ldr	r2, [pc, #224]	; (8006e24 <inc_lock+0x118>)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	4413      	add	r3, r2
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d006      	beq.n	8006d64 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d9dc      	bls.n	8006d1c <inc_lock+0x10>
 8006d62:	e000      	b.n	8006d66 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006d64:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d132      	bne.n	8006dd2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e002      	b.n	8006d78 <inc_lock+0x6c>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d806      	bhi.n	8006d8c <inc_lock+0x80>
 8006d7e:	4a29      	ldr	r2, [pc, #164]	; (8006e24 <inc_lock+0x118>)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	4413      	add	r3, r2
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1f2      	bne.n	8006d72 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d101      	bne.n	8006d96 <inc_lock+0x8a>
 8006d92:	2300      	movs	r3, #0
 8006d94:	e040      	b.n	8006e18 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4922      	ldr	r1, [pc, #136]	; (8006e24 <inc_lock+0x118>)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	440b      	add	r3, r1
 8006da2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	491e      	ldr	r1, [pc, #120]	; (8006e24 <inc_lock+0x118>)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	440b      	add	r3, r1
 8006db0:	3304      	adds	r3, #4
 8006db2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	695a      	ldr	r2, [r3, #20]
 8006db8:	491a      	ldr	r1, [pc, #104]	; (8006e24 <inc_lock+0x118>)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006dc4:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <inc_lock+0x118>)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	4413      	add	r3, r2
 8006dcc:	330c      	adds	r3, #12
 8006dce:	2200      	movs	r2, #0
 8006dd0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d009      	beq.n	8006dec <inc_lock+0xe0>
 8006dd8:	4a12      	ldr	r2, [pc, #72]	; (8006e24 <inc_lock+0x118>)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	4413      	add	r3, r2
 8006de0:	330c      	adds	r3, #12
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <inc_lock+0xe0>
 8006de8:	2300      	movs	r3, #0
 8006dea:	e015      	b.n	8006e18 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d108      	bne.n	8006e04 <inc_lock+0xf8>
 8006df2:	4a0c      	ldr	r2, [pc, #48]	; (8006e24 <inc_lock+0x118>)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	4413      	add	r3, r2
 8006dfa:	330c      	adds	r3, #12
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	e001      	b.n	8006e08 <inc_lock+0xfc>
 8006e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e08:	4906      	ldr	r1, [pc, #24]	; (8006e24 <inc_lock+0x118>)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	440b      	add	r3, r1
 8006e10:	330c      	adds	r3, #12
 8006e12:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	20000cb0 	.word	0x20000cb0

08006e28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d825      	bhi.n	8006e88 <dec_lock+0x60>
		n = Files[i].ctr;
 8006e3c:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <dec_lock+0x74>)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	4413      	add	r3, r2
 8006e44:	330c      	adds	r3, #12
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006e4a:	89fb      	ldrh	r3, [r7, #14]
 8006e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e50:	d101      	bne.n	8006e56 <dec_lock+0x2e>
 8006e52:	2300      	movs	r3, #0
 8006e54:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006e56:	89fb      	ldrh	r3, [r7, #14]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <dec_lock+0x3a>
 8006e5c:	89fb      	ldrh	r3, [r7, #14]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006e62:	4a0e      	ldr	r2, [pc, #56]	; (8006e9c <dec_lock+0x74>)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	4413      	add	r3, r2
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	89fa      	ldrh	r2, [r7, #14]
 8006e6e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006e70:	89fb      	ldrh	r3, [r7, #14]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d105      	bne.n	8006e82 <dec_lock+0x5a>
 8006e76:	4a09      	ldr	r2, [pc, #36]	; (8006e9c <dec_lock+0x74>)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	4413      	add	r3, r2
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	737b      	strb	r3, [r7, #13]
 8006e86:	e001      	b.n	8006e8c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006e88:	2302      	movs	r3, #2
 8006e8a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006e8c:	7b7b      	ldrb	r3, [r7, #13]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000cb0 	.word	0x20000cb0

08006ea0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	e010      	b.n	8006ed0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006eae:	4a0d      	ldr	r2, [pc, #52]	; (8006ee4 <clear_lock+0x44>)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	4413      	add	r3, r2
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d105      	bne.n	8006eca <clear_lock+0x2a>
 8006ebe:	4a09      	ldr	r2, [pc, #36]	; (8006ee4 <clear_lock+0x44>)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	4413      	add	r3, r2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d9eb      	bls.n	8006eae <clear_lock+0xe>
	}
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	20000cb0 	.word	0x20000cb0

08006ee8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	78db      	ldrb	r3, [r3, #3]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d034      	beq.n	8006f66 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7858      	ldrb	r0, [r3, #1]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	f7ff fd40 	bl	8006994 <disk_write>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]
 8006f1e:	e022      	b.n	8006f66 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	1ad2      	subs	r2, r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d217      	bcs.n	8006f66 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	789b      	ldrb	r3, [r3, #2]
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	e010      	b.n	8006f60 <sync_window+0x78>
					wsect += fs->fsize;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4413      	add	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7858      	ldrb	r0, [r3, #1]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f52:	2301      	movs	r3, #1
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	f7ff fd1d 	bl	8006994 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d8eb      	bhi.n	8006f3e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d01b      	beq.n	8006fc0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff ffad 	bl	8006ee8 <sync_window>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d113      	bne.n	8006fc0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	7858      	ldrb	r0, [r3, #1]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	f7ff fcd5 	bl	8006954 <disk_read>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ff87 	bl	8006ee8 <sync_window>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d159      	bne.n	8007098 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d149      	bne.n	8007080 <sync_fs+0xb4>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	791b      	ldrb	r3, [r3, #4]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d145      	bne.n	8007080 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	899b      	ldrh	r3, [r3, #12]
 8006ffe:	461a      	mov	r2, r3
 8007000:	2100      	movs	r1, #0
 8007002:	f7ff fda8 	bl	8006b56 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3338      	adds	r3, #56	; 0x38
 800700a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800700e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff fd37 	bl	8006a86 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3338      	adds	r3, #56	; 0x38
 800701c:	4921      	ldr	r1, [pc, #132]	; (80070a4 <sync_fs+0xd8>)
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff fd4c 	bl	8006abc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3338      	adds	r3, #56	; 0x38
 8007028:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800702c:	491e      	ldr	r1, [pc, #120]	; (80070a8 <sync_fs+0xdc>)
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff fd44 	bl	8006abc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3338      	adds	r3, #56	; 0x38
 8007038:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f7ff fd3a 	bl	8006abc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3338      	adds	r3, #56	; 0x38
 800704c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	4619      	mov	r1, r3
 8007056:	4610      	mov	r0, r2
 8007058:	f7ff fd30 	bl	8006abc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7858      	ldrb	r0, [r3, #1]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007074:	2301      	movs	r3, #1
 8007076:	f7ff fc8d 	bl	8006994 <disk_write>
			fs->fsi_flag = 0;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	2200      	movs	r2, #0
 8007086:	2100      	movs	r1, #0
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fca3 	bl	80069d4 <disk_ioctl>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <sync_fs+0xcc>
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	41615252 	.word	0x41615252
 80070a8:	61417272 	.word	0x61417272

080070ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	3b02      	subs	r3, #2
 80070ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	3b02      	subs	r3, #2
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d301      	bcc.n	80070cc <clust2sect+0x20>
 80070c8:	2300      	movs	r3, #0
 80070ca:	e008      	b.n	80070de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	895b      	ldrh	r3, [r3, #10]
 80070d0:	461a      	mov	r2, r3
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	fb03 f202 	mul.w	r2, r3, r2
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	4413      	add	r3, r2
}
 80070de:	4618      	mov	r0, r3
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b086      	sub	sp, #24
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d904      	bls.n	800710a <get_fat+0x20>
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d302      	bcc.n	8007110 <get_fat+0x26>
		val = 1;	/* Internal error */
 800710a:	2301      	movs	r3, #1
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	e0bb      	b.n	8007288 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007110:	f04f 33ff 	mov.w	r3, #4294967295
 8007114:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b03      	cmp	r3, #3
 800711c:	f000 8083 	beq.w	8007226 <get_fat+0x13c>
 8007120:	2b03      	cmp	r3, #3
 8007122:	f300 80a7 	bgt.w	8007274 <get_fat+0x18a>
 8007126:	2b01      	cmp	r3, #1
 8007128:	d002      	beq.n	8007130 <get_fat+0x46>
 800712a:	2b02      	cmp	r3, #2
 800712c:	d056      	beq.n	80071dc <get_fat+0xf2>
 800712e:	e0a1      	b.n	8007274 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	085b      	lsrs	r3, r3, #1
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	899b      	ldrh	r3, [r3, #12]
 8007146:	4619      	mov	r1, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	fbb3 f3f1 	udiv	r3, r3, r1
 800714e:	4413      	add	r3, r2
 8007150:	4619      	mov	r1, r3
 8007152:	6938      	ldr	r0, [r7, #16]
 8007154:	f7ff ff0c 	bl	8006f70 <move_window>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	f040 808d 	bne.w	800727a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	60fa      	str	r2, [r7, #12]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	8992      	ldrh	r2, [r2, #12]
 800716a:	fbb3 f1f2 	udiv	r1, r3, r2
 800716e:	fb01 f202 	mul.w	r2, r1, r2
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4413      	add	r3, r2
 8007178:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800717c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	899b      	ldrh	r3, [r3, #12]
 8007186:	4619      	mov	r1, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	fbb3 f3f1 	udiv	r3, r3, r1
 800718e:	4413      	add	r3, r2
 8007190:	4619      	mov	r1, r3
 8007192:	6938      	ldr	r0, [r7, #16]
 8007194:	f7ff feec 	bl	8006f70 <move_window>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d16f      	bne.n	800727e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	899b      	ldrh	r3, [r3, #12]
 80071a2:	461a      	mov	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80071aa:	fb01 f202 	mul.w	r2, r1, r2
 80071ae:	1a9b      	subs	r3, r3, r2
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4413      	add	r3, r2
 80071b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	461a      	mov	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <get_fat+0xe8>
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	091b      	lsrs	r3, r3, #4
 80071d0:	e002      	b.n	80071d8 <get_fat+0xee>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071d8:	617b      	str	r3, [r7, #20]
			break;
 80071da:	e055      	b.n	8007288 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	899b      	ldrh	r3, [r3, #12]
 80071e4:	085b      	lsrs	r3, r3, #1
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	4619      	mov	r1, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80071f0:	4413      	add	r3, r2
 80071f2:	4619      	mov	r1, r3
 80071f4:	6938      	ldr	r0, [r7, #16]
 80071f6:	f7ff febb 	bl	8006f70 <move_window>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d140      	bne.n	8007282 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	8992      	ldrh	r2, [r2, #12]
 800720e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007212:	fb00 f202 	mul.w	r2, r0, r2
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	440b      	add	r3, r1
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fbf8 	bl	8006a10 <ld_word>
 8007220:	4603      	mov	r3, r0
 8007222:	617b      	str	r3, [r7, #20]
			break;
 8007224:	e030      	b.n	8007288 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	899b      	ldrh	r3, [r3, #12]
 800722e:	089b      	lsrs	r3, r3, #2
 8007230:	b29b      	uxth	r3, r3
 8007232:	4619      	mov	r1, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	fbb3 f3f1 	udiv	r3, r3, r1
 800723a:	4413      	add	r3, r2
 800723c:	4619      	mov	r1, r3
 800723e:	6938      	ldr	r0, [r7, #16]
 8007240:	f7ff fe96 	bl	8006f70 <move_window>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d11d      	bne.n	8007286 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	8992      	ldrh	r2, [r2, #12]
 8007258:	fbb3 f0f2 	udiv	r0, r3, r2
 800725c:	fb00 f202 	mul.w	r2, r0, r2
 8007260:	1a9b      	subs	r3, r3, r2
 8007262:	440b      	add	r3, r1
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff fbeb 	bl	8006a40 <ld_dword>
 800726a:	4603      	mov	r3, r0
 800726c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007270:	617b      	str	r3, [r7, #20]
			break;
 8007272:	e009      	b.n	8007288 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007274:	2301      	movs	r3, #1
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e006      	b.n	8007288 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800727a:	bf00      	nop
 800727c:	e004      	b.n	8007288 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800727e:	bf00      	nop
 8007280:	e002      	b.n	8007288 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007282:	bf00      	nop
 8007284:	e000      	b.n	8007288 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007286:	bf00      	nop
		}
	}

	return val;
 8007288:	697b      	ldr	r3, [r7, #20]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007292:	b590      	push	{r4, r7, lr}
 8007294:	b089      	sub	sp, #36	; 0x24
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800729e:	2302      	movs	r3, #2
 80072a0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	f240 8102 	bls.w	80074ae <put_fat+0x21c>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	f080 80fc 	bcs.w	80074ae <put_fat+0x21c>
		switch (fs->fs_type) {
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	f000 80b6 	beq.w	800742c <put_fat+0x19a>
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	f300 80fd 	bgt.w	80074c0 <put_fat+0x22e>
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d003      	beq.n	80072d2 <put_fat+0x40>
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	f000 8083 	beq.w	80073d6 <put_fat+0x144>
 80072d0:	e0f6      	b.n	80074c0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	61bb      	str	r3, [r7, #24]
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	085b      	lsrs	r3, r3, #1
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	4413      	add	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	899b      	ldrh	r3, [r3, #12]
 80072e8:	4619      	mov	r1, r3
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80072f0:	4413      	add	r3, r2
 80072f2:	4619      	mov	r1, r3
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7ff fe3b 	bl	8006f70 <move_window>
 80072fa:	4603      	mov	r3, r0
 80072fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072fe:	7ffb      	ldrb	r3, [r7, #31]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 80d6 	bne.w	80074b2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	61ba      	str	r2, [r7, #24]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	8992      	ldrh	r2, [r2, #12]
 8007316:	fbb3 f0f2 	udiv	r0, r3, r2
 800731a:	fb00 f202 	mul.w	r2, r0, r2
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	440b      	add	r3, r1
 8007322:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <put_fat+0xb8>
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	b25b      	sxtb	r3, r3
 8007334:	f003 030f 	and.w	r3, r3, #15
 8007338:	b25a      	sxtb	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	b25b      	sxtb	r3, r3
 8007342:	4313      	orrs	r3, r2
 8007344:	b25b      	sxtb	r3, r3
 8007346:	b2db      	uxtb	r3, r3
 8007348:	e001      	b.n	800734e <put_fat+0xbc>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	899b      	ldrh	r3, [r3, #12]
 8007360:	4619      	mov	r1, r3
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	fbb3 f3f1 	udiv	r3, r3, r1
 8007368:	4413      	add	r3, r2
 800736a:	4619      	mov	r1, r3
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff fdff 	bl	8006f70 <move_window>
 8007372:	4603      	mov	r3, r0
 8007374:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007376:	7ffb      	ldrb	r3, [r7, #31]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f040 809c 	bne.w	80074b6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	899b      	ldrh	r3, [r3, #12]
 8007388:	461a      	mov	r2, r3
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007390:	fb00 f202 	mul.w	r2, r0, r2
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	440b      	add	r3, r1
 8007398:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <put_fat+0x11a>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	091b      	lsrs	r3, r3, #4
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	e00e      	b.n	80073ca <put_fat+0x138>
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	b25b      	sxtb	r3, r3
 80073b2:	f023 030f 	bic.w	r3, r3, #15
 80073b6:	b25a      	sxtb	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	b25b      	sxtb	r3, r3
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	b25b      	sxtb	r3, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	b25b      	sxtb	r3, r3
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	70da      	strb	r2, [r3, #3]
			break;
 80073d4:	e074      	b.n	80074c0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	899b      	ldrh	r3, [r3, #12]
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	4619      	mov	r1, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80073ea:	4413      	add	r3, r2
 80073ec:	4619      	mov	r1, r3
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff fdbe 	bl	8006f70 <move_window>
 80073f4:	4603      	mov	r3, r0
 80073f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073f8:	7ffb      	ldrb	r3, [r7, #31]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d15d      	bne.n	80074ba <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	8992      	ldrh	r2, [r2, #12]
 800740c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007410:	fb00 f202 	mul.w	r2, r0, r2
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	440b      	add	r3, r1
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	b292      	uxth	r2, r2
 800741c:	4611      	mov	r1, r2
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff fb31 	bl	8006a86 <st_word>
			fs->wflag = 1;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	70da      	strb	r2, [r3, #3]
			break;
 800742a:	e049      	b.n	80074c0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	899b      	ldrh	r3, [r3, #12]
 8007434:	089b      	lsrs	r3, r3, #2
 8007436:	b29b      	uxth	r3, r3
 8007438:	4619      	mov	r1, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007440:	4413      	add	r3, r2
 8007442:	4619      	mov	r1, r3
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff fd93 	bl	8006f70 <move_window>
 800744a:	4603      	mov	r3, r0
 800744c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800744e:	7ffb      	ldrb	r3, [r7, #31]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d134      	bne.n	80074be <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	8992      	ldrh	r2, [r2, #12]
 8007468:	fbb3 f0f2 	udiv	r0, r3, r2
 800746c:	fb00 f202 	mul.w	r2, r0, r2
 8007470:	1a9b      	subs	r3, r3, r2
 8007472:	440b      	add	r3, r1
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fae3 	bl	8006a40 <ld_dword>
 800747a:	4603      	mov	r3, r0
 800747c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007480:	4323      	orrs	r3, r4
 8007482:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	8992      	ldrh	r2, [r2, #12]
 8007492:	fbb3 f0f2 	udiv	r0, r3, r2
 8007496:	fb00 f202 	mul.w	r2, r0, r2
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	440b      	add	r3, r1
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff fb0b 	bl	8006abc <st_dword>
			fs->wflag = 1;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2201      	movs	r2, #1
 80074aa:	70da      	strb	r2, [r3, #3]
			break;
 80074ac:	e008      	b.n	80074c0 <put_fat+0x22e>
		}
	}
 80074ae:	bf00      	nop
 80074b0:	e006      	b.n	80074c0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80074b2:	bf00      	nop
 80074b4:	e004      	b.n	80074c0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80074b6:	bf00      	nop
 80074b8:	e002      	b.n	80074c0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80074ba:	bf00      	nop
 80074bc:	e000      	b.n	80074c0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80074be:	bf00      	nop
	return res;
 80074c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3724      	adds	r7, #36	; 0x24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd90      	pop	{r4, r7, pc}

080074ca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b088      	sub	sp, #32
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d904      	bls.n	80074f0 <remove_chain+0x26>
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d301      	bcc.n	80074f4 <remove_chain+0x2a>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e04b      	b.n	800758c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00c      	beq.n	8007514 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80074fa:	f04f 32ff 	mov.w	r2, #4294967295
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	69b8      	ldr	r0, [r7, #24]
 8007502:	f7ff fec6 	bl	8007292 <put_fat>
 8007506:	4603      	mov	r3, r0
 8007508:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800750a:	7ffb      	ldrb	r3, [r7, #31]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <remove_chain+0x4a>
 8007510:	7ffb      	ldrb	r3, [r7, #31]
 8007512:	e03b      	b.n	800758c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fde7 	bl	80070ea <get_fat>
 800751c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d031      	beq.n	8007588 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <remove_chain+0x64>
 800752a:	2302      	movs	r3, #2
 800752c:	e02e      	b.n	800758c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d101      	bne.n	800753a <remove_chain+0x70>
 8007536:	2301      	movs	r3, #1
 8007538:	e028      	b.n	800758c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800753a:	2200      	movs	r2, #0
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	69b8      	ldr	r0, [r7, #24]
 8007540:	f7ff fea7 	bl	8007292 <put_fat>
 8007544:	4603      	mov	r3, r0
 8007546:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007548:	7ffb      	ldrb	r3, [r7, #31]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <remove_chain+0x88>
 800754e:	7ffb      	ldrb	r3, [r7, #31]
 8007550:	e01c      	b.n	800758c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	699a      	ldr	r2, [r3, #24]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	3b02      	subs	r3, #2
 800755c:	429a      	cmp	r2, r3
 800755e:	d20b      	bcs.n	8007578 <remove_chain+0xae>
			fs->free_clst++;
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	791b      	ldrb	r3, [r3, #4]
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	b2da      	uxtb	r2, r3
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	429a      	cmp	r2, r3
 8007584:	d3c6      	bcc.n	8007514 <remove_chain+0x4a>
 8007586:	e000      	b.n	800758a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007588:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3720      	adds	r7, #32
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b088      	sub	sp, #32
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10d      	bne.n	80075c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <create_chain+0x2c>
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d31b      	bcc.n	80075f8 <create_chain+0x64>
 80075c0:	2301      	movs	r3, #1
 80075c2:	61bb      	str	r3, [r7, #24]
 80075c4:	e018      	b.n	80075f8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fd8e 	bl	80070ea <get_fat>
 80075ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d801      	bhi.n	80075da <create_chain+0x46>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e070      	b.n	80076bc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e0:	d101      	bne.n	80075e6 <create_chain+0x52>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	e06a      	b.n	80076bc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d201      	bcs.n	80075f4 <create_chain+0x60>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	e063      	b.n	80076bc <create_chain+0x128>
		scl = clst;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	3301      	adds	r3, #1
 8007600:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	429a      	cmp	r2, r3
 800760a:	d307      	bcc.n	800761c <create_chain+0x88>
				ncl = 2;
 800760c:	2302      	movs	r3, #2
 800760e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007610:	69fa      	ldr	r2, [r7, #28]
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	429a      	cmp	r2, r3
 8007616:	d901      	bls.n	800761c <create_chain+0x88>
 8007618:	2300      	movs	r3, #0
 800761a:	e04f      	b.n	80076bc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800761c:	69f9      	ldr	r1, [r7, #28]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff fd63 	bl	80070ea <get_fat>
 8007624:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00e      	beq.n	800764a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d003      	beq.n	800763a <create_chain+0xa6>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d101      	bne.n	800763e <create_chain+0xaa>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	e03e      	b.n	80076bc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	429a      	cmp	r2, r3
 8007644:	d1da      	bne.n	80075fc <create_chain+0x68>
 8007646:	2300      	movs	r3, #0
 8007648:	e038      	b.n	80076bc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800764a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	69f9      	ldr	r1, [r7, #28]
 8007652:	6938      	ldr	r0, [r7, #16]
 8007654:	f7ff fe1d 	bl	8007292 <put_fat>
 8007658:	4603      	mov	r3, r0
 800765a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d109      	bne.n	8007676 <create_chain+0xe2>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d006      	beq.n	8007676 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6938      	ldr	r0, [r7, #16]
 800766e:	f7ff fe10 	bl	8007292 <put_fat>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d116      	bne.n	80076aa <create_chain+0x116>
		fs->last_clst = ncl;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	3b02      	subs	r3, #2
 800768c:	429a      	cmp	r2, r3
 800768e:	d804      	bhi.n	800769a <create_chain+0x106>
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	1e5a      	subs	r2, r3, #1
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	791b      	ldrb	r3, [r3, #4]
 800769e:	f043 0301 	orr.w	r3, r3, #1
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	711a      	strb	r2, [r3, #4]
 80076a8:	e007      	b.n	80076ba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d102      	bne.n	80076b6 <create_chain+0x122>
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295
 80076b4:	e000      	b.n	80076b8 <create_chain+0x124>
 80076b6:	2301      	movs	r3, #1
 80076b8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80076ba:	69fb      	ldr	r3, [r7, #28]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	3304      	adds	r3, #4
 80076da:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	899b      	ldrh	r3, [r3, #12]
 80076e0:	461a      	mov	r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	8952      	ldrh	r2, [r2, #10]
 80076ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80076f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1d1a      	adds	r2, r3, #4
 80076f6:	613a      	str	r2, [r7, #16]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <clmt_clust+0x42>
 8007702:	2300      	movs	r3, #0
 8007704:	e010      	b.n	8007728 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	429a      	cmp	r2, r3
 800770c:	d307      	bcc.n	800771e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	3304      	adds	r3, #4
 800771a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800771c:	e7e9      	b.n	80076f2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800771e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	4413      	add	r3, r2
}
 8007728:	4618      	mov	r0, r3
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800774a:	d204      	bcs.n	8007756 <dir_sdi+0x22>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	f003 031f 	and.w	r3, r3, #31
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007756:	2302      	movs	r3, #2
 8007758:	e071      	b.n	800783e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d106      	bne.n	800777a <dir_sdi+0x46>
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b02      	cmp	r3, #2
 8007772:	d902      	bls.n	800777a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10c      	bne.n	800779a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	8912      	ldrh	r2, [r2, #8]
 8007788:	4293      	cmp	r3, r2
 800778a:	d301      	bcc.n	8007790 <dir_sdi+0x5c>
 800778c:	2302      	movs	r3, #2
 800778e:	e056      	b.n	800783e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	61da      	str	r2, [r3, #28]
 8007798:	e02d      	b.n	80077f6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	895b      	ldrh	r3, [r3, #10]
 800779e:	461a      	mov	r2, r3
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	899b      	ldrh	r3, [r3, #12]
 80077a4:	fb02 f303 	mul.w	r3, r2, r3
 80077a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80077aa:	e019      	b.n	80077e0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6979      	ldr	r1, [r7, #20]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fc9a 	bl	80070ea <get_fat>
 80077b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077be:	d101      	bne.n	80077c4 <dir_sdi+0x90>
 80077c0:	2301      	movs	r3, #1
 80077c2:	e03c      	b.n	800783e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d904      	bls.n	80077d4 <dir_sdi+0xa0>
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d301      	bcc.n	80077d8 <dir_sdi+0xa4>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e032      	b.n	800783e <dir_sdi+0x10a>
			ofs -= csz;
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d2e1      	bcs.n	80077ac <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80077e8:	6979      	ldr	r1, [r7, #20]
 80077ea:	6938      	ldr	r0, [r7, #16]
 80077ec:	f7ff fc5e 	bl	80070ac <clust2sect>
 80077f0:	4602      	mov	r2, r0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <dir_sdi+0xd4>
 8007804:	2302      	movs	r3, #2
 8007806:	e01a      	b.n	800783e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	899b      	ldrh	r3, [r3, #12]
 8007810:	4619      	mov	r1, r3
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	fbb3 f3f1 	udiv	r3, r3, r1
 8007818:	441a      	add	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	899b      	ldrh	r3, [r3, #12]
 8007828:	461a      	mov	r2, r3
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007830:	fb00 f202 	mul.w	r2, r0, r2
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	18ca      	adds	r2, r1, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	3320      	adds	r3, #32
 800785c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <dir_next+0x28>
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800786c:	d301      	bcc.n	8007872 <dir_next+0x2c>
 800786e:	2304      	movs	r3, #4
 8007870:	e0bb      	b.n	80079ea <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	899b      	ldrh	r3, [r3, #12]
 8007876:	461a      	mov	r2, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	fbb3 f1f2 	udiv	r1, r3, r2
 800787e:	fb01 f202 	mul.w	r2, r1, r2
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 809d 	bne.w	80079c4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	8912      	ldrh	r2, [r2, #8]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	f0c0 808d 	bcc.w	80079c4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	61da      	str	r2, [r3, #28]
 80078b0:	2304      	movs	r3, #4
 80078b2:	e09a      	b.n	80079ea <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	899b      	ldrh	r3, [r3, #12]
 80078b8:	461a      	mov	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	8952      	ldrh	r2, [r2, #10]
 80078c4:	3a01      	subs	r2, #1
 80078c6:	4013      	ands	r3, r2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d17b      	bne.n	80079c4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	4619      	mov	r1, r3
 80078d4:	4610      	mov	r0, r2
 80078d6:	f7ff fc08 	bl	80070ea <get_fat>
 80078da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d801      	bhi.n	80078e6 <dir_next+0xa0>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e081      	b.n	80079ea <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ec:	d101      	bne.n	80078f2 <dir_next+0xac>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e07b      	b.n	80079ea <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d359      	bcc.n	80079b0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	61da      	str	r2, [r3, #28]
 8007908:	2304      	movs	r3, #4
 800790a:	e06e      	b.n	80079ea <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f7ff fe3d 	bl	8007594 <create_chain>
 800791a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <dir_next+0xe0>
 8007922:	2307      	movs	r3, #7
 8007924:	e061      	b.n	80079ea <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <dir_next+0xea>
 800792c:	2302      	movs	r3, #2
 800792e:	e05c      	b.n	80079ea <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007936:	d101      	bne.n	800793c <dir_next+0xf6>
 8007938:	2301      	movs	r3, #1
 800793a:	e056      	b.n	80079ea <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff fad3 	bl	8006ee8 <sync_window>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <dir_next+0x106>
 8007948:	2301      	movs	r3, #1
 800794a:	e04e      	b.n	80079ea <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	899b      	ldrh	r3, [r3, #12]
 8007956:	461a      	mov	r2, r3
 8007958:	2100      	movs	r1, #0
 800795a:	f7ff f8fc 	bl	8006b56 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800795e:	2300      	movs	r3, #0
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	6979      	ldr	r1, [r7, #20]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7ff fba1 	bl	80070ac <clust2sect>
 800796a:	4602      	mov	r2, r0
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	635a      	str	r2, [r3, #52]	; 0x34
 8007970:	e012      	b.n	8007998 <dir_next+0x152>
						fs->wflag = 1;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff fab5 	bl	8006ee8 <sync_window>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <dir_next+0x142>
 8007984:	2301      	movs	r3, #1
 8007986:	e030      	b.n	80079ea <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	3301      	adds	r3, #1
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	635a      	str	r2, [r3, #52]	; 0x34
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	895b      	ldrh	r3, [r3, #10]
 800799c:	461a      	mov	r2, r3
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d3e6      	bcc.n	8007972 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1ad2      	subs	r2, r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80079b6:	6979      	ldr	r1, [r7, #20]
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7ff fb77 	bl	80070ac <clust2sect>
 80079be:	4602      	mov	r2, r0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	899b      	ldrh	r3, [r3, #12]
 80079d4:	461a      	mov	r2, r3
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80079dc:	fb00 f202 	mul.w	r2, r0, r2
 80079e0:	1a9b      	subs	r3, r3, r2
 80079e2:	18ca      	adds	r2, r1, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b086      	sub	sp, #24
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007a02:	2100      	movs	r1, #0
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fe95 	bl	8007734 <dir_sdi>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d12b      	bne.n	8007a6c <dir_alloc+0x7a>
		n = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff faa6 	bl	8006f70 <move_window>
 8007a24:	4603      	mov	r3, r0
 8007a26:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d11d      	bne.n	8007a6a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2be5      	cmp	r3, #229	; 0xe5
 8007a36:	d004      	beq.n	8007a42 <dir_alloc+0x50>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d107      	bne.n	8007a52 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	3301      	adds	r3, #1
 8007a46:	613b      	str	r3, [r7, #16]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d102      	bne.n	8007a56 <dir_alloc+0x64>
 8007a50:	e00c      	b.n	8007a6c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007a52:	2300      	movs	r3, #0
 8007a54:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007a56:	2101      	movs	r1, #1
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff fef4 	bl	8007846 <dir_next>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0d7      	beq.n	8007a18 <dir_alloc+0x26>
 8007a68:	e000      	b.n	8007a6c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007a6a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d101      	bne.n	8007a76 <dir_alloc+0x84>
 8007a72:	2307      	movs	r3, #7
 8007a74:	75fb      	strb	r3, [r7, #23]
	return res;
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	331a      	adds	r3, #26
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe ffbe 	bl	8006a10 <ld_word>
 8007a94:	4603      	mov	r3, r0
 8007a96:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d109      	bne.n	8007ab4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	3314      	adds	r3, #20
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fe ffb3 	bl	8006a10 <ld_word>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	041b      	lsls	r3, r3, #16
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	331a      	adds	r3, #26
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	b292      	uxth	r2, r2
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fe ffd6 	bl	8006a86 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d109      	bne.n	8007af6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f103 0214 	add.w	r2, r3, #20
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	0c1b      	lsrs	r3, r3, #16
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	4619      	mov	r1, r3
 8007af0:	4610      	mov	r0, r2
 8007af2:	f7fe ffc8 	bl	8006a86 <st_word>
	}
}
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007b00:	b590      	push	{r4, r7, lr}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	331a      	adds	r3, #26
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe ff7e 	bl	8006a10 <ld_word>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <cmp_lfn+0x1e>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e059      	b.n	8007bd2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b26:	1e5a      	subs	r2, r3, #1
 8007b28:	4613      	mov	r3, r2
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007b34:	2301      	movs	r3, #1
 8007b36:	81fb      	strh	r3, [r7, #14]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	e033      	b.n	8007ba6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007b3e:	4a27      	ldr	r2, [pc, #156]	; (8007bdc <cmp_lfn+0xdc>)
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	4413      	add	r3, r2
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe ff5f 	bl	8006a10 <ld_word>
 8007b52:	4603      	mov	r3, r0
 8007b54:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007b56:	89fb      	ldrh	r3, [r7, #14]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01a      	beq.n	8007b92 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2bfe      	cmp	r3, #254	; 0xfe
 8007b60:	d812      	bhi.n	8007b88 <cmp_lfn+0x88>
 8007b62:	89bb      	ldrh	r3, [r7, #12]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f002 fc85 	bl	800a474 <ff_wtoupper>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	461c      	mov	r4, r3
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	617a      	str	r2, [r7, #20]
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	4413      	add	r3, r2
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f002 fc79 	bl	800a474 <ff_wtoupper>
 8007b82:	4603      	mov	r3, r0
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d001      	beq.n	8007b8c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e022      	b.n	8007bd2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007b8c:	89bb      	ldrh	r3, [r7, #12]
 8007b8e:	81fb      	strh	r3, [r7, #14]
 8007b90:	e006      	b.n	8007ba0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007b92:	89bb      	ldrh	r3, [r7, #12]
 8007b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d001      	beq.n	8007ba0 <cmp_lfn+0xa0>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e018      	b.n	8007bd2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	613b      	str	r3, [r7, #16]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	2b0c      	cmp	r3, #12
 8007baa:	d9c8      	bls.n	8007b3e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00b      	beq.n	8007bd0 <cmp_lfn+0xd0>
 8007bb8:	89fb      	ldrh	r3, [r7, #14]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d008      	beq.n	8007bd0 <cmp_lfn+0xd0>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <cmp_lfn+0xd0>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	e000      	b.n	8007bd2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007bd0:	2301      	movs	r3, #1
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	371c      	adds	r7, #28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd90      	pop	{r4, r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	0800e340 	.word	0x0800e340

08007be0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	331a      	adds	r3, #26
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe ff0e 	bl	8006a10 <ld_word>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <pick_lfn+0x1e>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e04d      	b.n	8007c9a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c06:	1e5a      	subs	r2, r3, #1
 8007c08:	4613      	mov	r3, r2
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007c14:	2301      	movs	r3, #1
 8007c16:	81fb      	strh	r3, [r7, #14]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	613b      	str	r3, [r7, #16]
 8007c1c:	e028      	b.n	8007c70 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007c1e:	4a21      	ldr	r2, [pc, #132]	; (8007ca4 <pick_lfn+0xc4>)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	4413      	add	r3, r2
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe feef 	bl	8006a10 <ld_word>
 8007c32:	4603      	mov	r3, r0
 8007c34:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007c36:	89fb      	ldrh	r3, [r7, #14]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00f      	beq.n	8007c5c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2bfe      	cmp	r3, #254	; 0xfe
 8007c40:	d901      	bls.n	8007c46 <pick_lfn+0x66>
 8007c42:	2300      	movs	r3, #0
 8007c44:	e029      	b.n	8007c9a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007c46:	89bb      	ldrh	r3, [r7, #12]
 8007c48:	81fb      	strh	r3, [r7, #14]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	617a      	str	r2, [r7, #20]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	89fa      	ldrh	r2, [r7, #14]
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	e006      	b.n	8007c6a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007c5c:	89bb      	ldrh	r3, [r7, #12]
 8007c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d001      	beq.n	8007c6a <pick_lfn+0x8a>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e017      	b.n	8007c9a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	613b      	str	r3, [r7, #16]
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2b0c      	cmp	r3, #12
 8007c74:	d9d3      	bls.n	8007c1e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2bfe      	cmp	r3, #254	; 0xfe
 8007c86:	d901      	bls.n	8007c8c <pick_lfn+0xac>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	e006      	b.n	8007c9a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4413      	add	r3, r2
 8007c94:	2200      	movs	r2, #0
 8007c96:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007c98:	2301      	movs	r3, #1
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	0800e340 	.word	0x0800e340

08007ca8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	71fb      	strb	r3, [r7, #7]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	330d      	adds	r3, #13
 8007cc2:	79ba      	ldrb	r2, [r7, #6]
 8007cc4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	330b      	adds	r3, #11
 8007cca:	220f      	movs	r2, #15
 8007ccc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	331a      	adds	r3, #26
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe fed2 	bl	8006a86 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	1e5a      	subs	r2, r3, #1
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	82fb      	strh	r3, [r7, #22]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007cfa:	8afb      	ldrh	r3, [r7, #22]
 8007cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d007      	beq.n	8007d14 <put_lfn+0x6c>
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	61fa      	str	r2, [r7, #28]
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007d14:	4a17      	ldr	r2, [pc, #92]	; (8007d74 <put_lfn+0xcc>)
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	4413      	add	r3, r2
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	4413      	add	r3, r2
 8007d22:	8afa      	ldrh	r2, [r7, #22]
 8007d24:	4611      	mov	r1, r2
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fead 	bl	8006a86 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007d2c:	8afb      	ldrh	r3, [r7, #22]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d102      	bne.n	8007d38 <put_lfn+0x90>
 8007d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d36:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b0c      	cmp	r3, #12
 8007d42:	d9da      	bls.n	8007cfa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007d44:	8afb      	ldrh	r3, [r7, #22]
 8007d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d006      	beq.n	8007d5c <put_lfn+0xb4>
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <put_lfn+0xbc>
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d62:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	79fa      	ldrb	r2, [r7, #7]
 8007d68:	701a      	strb	r2, [r3, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	3720      	adds	r7, #32
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	0800e340 	.word	0x0800e340

08007d78 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08c      	sub	sp, #48	; 0x30
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007d86:	220b      	movs	r2, #11
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7fe fec2 	bl	8006b14 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	d92b      	bls.n	8007dee <gen_numname+0x76>
		sr = seq;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007d9a:	e022      	b.n	8007de2 <gen_numname+0x6a>
			wc = *lfn++;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	1c9a      	adds	r2, r3, #2
 8007da0:	607a      	str	r2, [r7, #4]
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007da6:	2300      	movs	r3, #0
 8007da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007daa:	e017      	b.n	8007ddc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	005a      	lsls	r2, r3, #1
 8007db0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	4413      	add	r3, r2
 8007db8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007dba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dbc:	085b      	lsrs	r3, r3, #1
 8007dbe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <gen_numname+0x5e>
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007dd0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007dd4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd8:	3301      	adds	r3, #1
 8007dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	2b0f      	cmp	r3, #15
 8007de0:	d9e4      	bls.n	8007dac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1d8      	bne.n	8007d9c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007dee:	2307      	movs	r3, #7
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	f003 030f 	and.w	r3, r3, #15
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	3330      	adds	r3, #48	; 0x30
 8007dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e06:	2b39      	cmp	r3, #57	; 0x39
 8007e08:	d904      	bls.n	8007e14 <gen_numname+0x9c>
 8007e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e0e:	3307      	adds	r3, #7
 8007e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	1e5a      	subs	r2, r3, #1
 8007e18:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e1a:	3330      	adds	r3, #48	; 0x30
 8007e1c:	443b      	add	r3, r7
 8007e1e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007e22:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	091b      	lsrs	r3, r3, #4
 8007e2a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1df      	bne.n	8007df2 <gen_numname+0x7a>
	ns[i] = '~';
 8007e32:	f107 0214 	add.w	r2, r7, #20
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	4413      	add	r3, r2
 8007e3a:	227e      	movs	r2, #126	; 0x7e
 8007e3c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007e3e:	2300      	movs	r3, #0
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
 8007e42:	e002      	b.n	8007e4a <gen_numname+0xd2>
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	3301      	adds	r3, #1
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
 8007e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d205      	bcs.n	8007e5e <gen_numname+0xe6>
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	4413      	add	r3, r2
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	d1f2      	bne.n	8007e44 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	2b07      	cmp	r3, #7
 8007e62:	d807      	bhi.n	8007e74 <gen_numname+0xfc>
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e6a:	3330      	adds	r3, #48	; 0x30
 8007e6c:	443b      	add	r3, r7
 8007e6e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007e72:	e000      	b.n	8007e76 <gen_numname+0xfe>
 8007e74:	2120      	movs	r1, #32
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	627a      	str	r2, [r7, #36]	; 0x24
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	460a      	mov	r2, r1
 8007e82:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	2b07      	cmp	r3, #7
 8007e88:	d9e9      	bls.n	8007e5e <gen_numname+0xe6>
}
 8007e8a:	bf00      	nop
 8007e8c:	bf00      	nop
 8007e8e:	3730      	adds	r7, #48	; 0x30
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007ea0:	230b      	movs	r3, #11
 8007ea2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	0852      	lsrs	r2, r2, #1
 8007eaa:	01db      	lsls	r3, r3, #7
 8007eac:	4313      	orrs	r3, r2
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	1c59      	adds	r1, r3, #1
 8007eb4:	6079      	str	r1, [r7, #4]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	4413      	add	r3, r2
 8007eba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	60bb      	str	r3, [r7, #8]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1ed      	bne.n	8007ea4 <sum_sfn+0x10>
	return sum;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b086      	sub	sp, #24
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8007eea:	23ff      	movs	r3, #255	; 0xff
 8007eec:	757b      	strb	r3, [r7, #21]
 8007eee:	23ff      	movs	r3, #255	; 0xff
 8007ef0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007ef2:	e081      	b.n	8007ff8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6938      	ldr	r0, [r7, #16]
 8007efc:	f7ff f838 	bl	8006f70 <move_window>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d17c      	bne.n	8008004 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007f12:	7dbb      	ldrb	r3, [r7, #22]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d102      	bne.n	8007f1e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007f18:	2304      	movs	r3, #4
 8007f1a:	75fb      	strb	r3, [r7, #23]
 8007f1c:	e077      	b.n	800800e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	330b      	adds	r3, #11
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f2a:	73fb      	strb	r3, [r7, #15]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	7bfa      	ldrb	r2, [r7, #15]
 8007f30:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007f32:	7dbb      	ldrb	r3, [r7, #22]
 8007f34:	2be5      	cmp	r3, #229	; 0xe5
 8007f36:	d00e      	beq.n	8007f56 <dir_read+0x80>
 8007f38:	7dbb      	ldrb	r3, [r7, #22]
 8007f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f3c:	d00b      	beq.n	8007f56 <dir_read+0x80>
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	f023 0320 	bic.w	r3, r3, #32
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	bf0c      	ite	eq
 8007f48:	2301      	moveq	r3, #1
 8007f4a:	2300      	movne	r3, #0
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	461a      	mov	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d002      	beq.n	8007f5c <dir_read+0x86>
				ord = 0xFF;
 8007f56:	23ff      	movs	r3, #255	; 0xff
 8007f58:	757b      	strb	r3, [r7, #21]
 8007f5a:	e044      	b.n	8007fe6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	d12f      	bne.n	8007fc2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007f62:	7dbb      	ldrb	r3, [r7, #22]
 8007f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00d      	beq.n	8007f88 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	7b5b      	ldrb	r3, [r3, #13]
 8007f72:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007f74:	7dbb      	ldrb	r3, [r7, #22]
 8007f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7a:	75bb      	strb	r3, [r7, #22]
 8007f7c:	7dbb      	ldrb	r3, [r7, #22]
 8007f7e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	695a      	ldr	r2, [r3, #20]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007f88:	7dba      	ldrb	r2, [r7, #22]
 8007f8a:	7d7b      	ldrb	r3, [r7, #21]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d115      	bne.n	8007fbc <dir_read+0xe6>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	330d      	adds	r3, #13
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	7d3a      	ldrb	r2, [r7, #20]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d10e      	bne.n	8007fbc <dir_read+0xe6>
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	691a      	ldr	r2, [r3, #16]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	4610      	mov	r0, r2
 8007faa:	f7ff fe19 	bl	8007be0 <pick_lfn>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <dir_read+0xe6>
 8007fb4:	7d7b      	ldrb	r3, [r7, #21]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	e000      	b.n	8007fbe <dir_read+0xe8>
 8007fbc:	23ff      	movs	r3, #255	; 0xff
 8007fbe:	757b      	strb	r3, [r7, #21]
 8007fc0:	e011      	b.n	8007fe6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007fc2:	7d7b      	ldrb	r3, [r7, #21]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d109      	bne.n	8007fdc <dir_read+0x106>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff ff61 	bl	8007e94 <sum_sfn>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	7d3b      	ldrb	r3, [r7, #20]
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d015      	beq.n	8008008 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8007fe4:	e010      	b.n	8008008 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff fc2c 	bl	8007846 <dir_next>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d109      	bne.n	800800c <dir_read+0x136>
	while (dp->sect) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f47f af79 	bne.w	8007ef4 <dir_read+0x1e>
 8008002:	e004      	b.n	800800e <dir_read+0x138>
		if (res != FR_OK) break;
 8008004:	bf00      	nop
 8008006:	e002      	b.n	800800e <dir_read+0x138>
					break;
 8008008:	bf00      	nop
 800800a:	e000      	b.n	800800e <dir_read+0x138>
		if (res != FR_OK) break;
 800800c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <dir_read+0x144>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	61da      	str	r2, [r3, #28]
	return res;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008032:	2100      	movs	r1, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff fb7d 	bl	8007734 <dir_sdi>
 800803a:	4603      	mov	r3, r0
 800803c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <dir_find+0x24>
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	e0a9      	b.n	800819c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008048:	23ff      	movs	r3, #255	; 0xff
 800804a:	753b      	strb	r3, [r7, #20]
 800804c:	7d3b      	ldrb	r3, [r7, #20]
 800804e:	757b      	strb	r3, [r7, #21]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f04f 32ff 	mov.w	r2, #4294967295
 8008056:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	4619      	mov	r1, r3
 800805e:	6938      	ldr	r0, [r7, #16]
 8008060:	f7fe ff86 	bl	8006f70 <move_window>
 8008064:	4603      	mov	r3, r0
 8008066:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	2b00      	cmp	r3, #0
 800806c:	f040 8090 	bne.w	8008190 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008078:	7dbb      	ldrb	r3, [r7, #22]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <dir_find+0x60>
 800807e:	2304      	movs	r3, #4
 8008080:	75fb      	strb	r3, [r7, #23]
 8008082:	e08a      	b.n	800819a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	330b      	adds	r3, #11
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008090:	73fb      	strb	r3, [r7, #15]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	7bfa      	ldrb	r2, [r7, #15]
 8008096:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008098:	7dbb      	ldrb	r3, [r7, #22]
 800809a:	2be5      	cmp	r3, #229	; 0xe5
 800809c:	d007      	beq.n	80080ae <dir_find+0x8a>
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d009      	beq.n	80080bc <dir_find+0x98>
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	2b0f      	cmp	r3, #15
 80080ac:	d006      	beq.n	80080bc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80080ae:	23ff      	movs	r3, #255	; 0xff
 80080b0:	757b      	strb	r3, [r7, #21]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f04f 32ff 	mov.w	r2, #4294967295
 80080b8:	631a      	str	r2, [r3, #48]	; 0x30
 80080ba:	e05e      	b.n	800817a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	2b0f      	cmp	r3, #15
 80080c0:	d136      	bne.n	8008130 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d154      	bne.n	800817a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80080d0:	7dbb      	ldrb	r3, [r7, #22]
 80080d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00d      	beq.n	80080f6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	7b5b      	ldrb	r3, [r3, #13]
 80080e0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80080e2:	7dbb      	ldrb	r3, [r7, #22]
 80080e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080e8:	75bb      	strb	r3, [r7, #22]
 80080ea:	7dbb      	ldrb	r3, [r7, #22]
 80080ec:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695a      	ldr	r2, [r3, #20]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80080f6:	7dba      	ldrb	r2, [r7, #22]
 80080f8:	7d7b      	ldrb	r3, [r7, #21]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d115      	bne.n	800812a <dir_find+0x106>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	330d      	adds	r3, #13
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	7d3a      	ldrb	r2, [r7, #20]
 8008108:	429a      	cmp	r2, r3
 800810a:	d10e      	bne.n	800812a <dir_find+0x106>
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	4619      	mov	r1, r3
 8008116:	4610      	mov	r0, r2
 8008118:	f7ff fcf2 	bl	8007b00 <cmp_lfn>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <dir_find+0x106>
 8008122:	7d7b      	ldrb	r3, [r7, #21]
 8008124:	3b01      	subs	r3, #1
 8008126:	b2db      	uxtb	r3, r3
 8008128:	e000      	b.n	800812c <dir_find+0x108>
 800812a:	23ff      	movs	r3, #255	; 0xff
 800812c:	757b      	strb	r3, [r7, #21]
 800812e:	e024      	b.n	800817a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008130:	7d7b      	ldrb	r3, [r7, #21]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d109      	bne.n	800814a <dir_find+0x126>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff feaa 	bl	8007e94 <sum_sfn>
 8008140:	4603      	mov	r3, r0
 8008142:	461a      	mov	r2, r3
 8008144:	7d3b      	ldrb	r3, [r7, #20]
 8008146:	4293      	cmp	r3, r2
 8008148:	d024      	beq.n	8008194 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10a      	bne.n	800816e <dir_find+0x14a>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a18      	ldr	r0, [r3, #32]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3324      	adds	r3, #36	; 0x24
 8008160:	220b      	movs	r2, #11
 8008162:	4619      	mov	r1, r3
 8008164:	f7fe fd12 	bl	8006b8c <mem_cmp>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d014      	beq.n	8008198 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800816e:	23ff      	movs	r3, #255	; 0xff
 8008170:	757b      	strb	r3, [r7, #21]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f04f 32ff 	mov.w	r2, #4294967295
 8008178:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800817a:	2100      	movs	r1, #0
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff fb62 	bl	8007846 <dir_next>
 8008182:	4603      	mov	r3, r0
 8008184:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f43f af65 	beq.w	8008058 <dir_find+0x34>
 800818e:	e004      	b.n	800819a <dir_find+0x176>
		if (res != FR_OK) break;
 8008190:	bf00      	nop
 8008192:	e002      	b.n	800819a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008194:	bf00      	nop
 8008196:	e000      	b.n	800819a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008198:	bf00      	nop

	return res;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08c      	sub	sp, #48	; 0x30
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80081b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <dir_register+0x20>
 80081c0:	2306      	movs	r3, #6
 80081c2:	e0e0      	b.n	8008386 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80081c4:	2300      	movs	r3, #0
 80081c6:	627b      	str	r3, [r7, #36]	; 0x24
 80081c8:	e002      	b.n	80081d0 <dir_register+0x2c>
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	3301      	adds	r3, #1
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	691a      	ldr	r2, [r3, #16]
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	4413      	add	r3, r2
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1f4      	bne.n	80081ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80081e6:	f107 030c 	add.w	r3, r7, #12
 80081ea:	220c      	movs	r2, #12
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fc91 	bl	8006b14 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d032      	beq.n	8008262 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2240      	movs	r2, #64	; 0x40
 8008200:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008204:	2301      	movs	r3, #1
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28
 8008208:	e016      	b.n	8008238 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	f107 010c 	add.w	r1, r7, #12
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	f7ff fdad 	bl	8007d78 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff ff00 	bl	8008024 <dir_find>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800822a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	3301      	adds	r3, #1
 8008236:	62bb      	str	r3, [r7, #40]	; 0x28
 8008238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823a:	2b63      	cmp	r3, #99	; 0x63
 800823c:	d9e5      	bls.n	800820a <dir_register+0x66>
 800823e:	e000      	b.n	8008242 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008240:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	2b64      	cmp	r3, #100	; 0x64
 8008246:	d101      	bne.n	800824c <dir_register+0xa8>
 8008248:	2307      	movs	r3, #7
 800824a:	e09c      	b.n	8008386 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800824c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008250:	2b04      	cmp	r3, #4
 8008252:	d002      	beq.n	800825a <dir_register+0xb6>
 8008254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008258:	e095      	b.n	8008386 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800825a:	7dfa      	ldrb	r2, [r7, #23]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008262:	7dfb      	ldrb	r3, [r7, #23]
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <dir_register+0xd8>
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	330c      	adds	r3, #12
 8008270:	4a47      	ldr	r2, [pc, #284]	; (8008390 <dir_register+0x1ec>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	089b      	lsrs	r3, r3, #2
 8008278:	3301      	adds	r3, #1
 800827a:	e000      	b.n	800827e <dir_register+0xda>
 800827c:	2301      	movs	r3, #1
 800827e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008280:	6a39      	ldr	r1, [r7, #32]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fbb5 	bl	80079f2 <dir_alloc>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800828e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008292:	2b00      	cmp	r3, #0
 8008294:	d148      	bne.n	8008328 <dir_register+0x184>
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	3b01      	subs	r3, #1
 800829a:	623b      	str	r3, [r7, #32]
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d042      	beq.n	8008328 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695a      	ldr	r2, [r3, #20]
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	015b      	lsls	r3, r3, #5
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fa40 	bl	8007734 <dir_sdi>
 80082b4:	4603      	mov	r3, r0
 80082b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80082ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d132      	bne.n	8008328 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3324      	adds	r3, #36	; 0x24
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff fde4 	bl	8007e94 <sum_sfn>
 80082cc:	4603      	mov	r3, r0
 80082ce:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	4619      	mov	r1, r3
 80082d6:	69f8      	ldr	r0, [r7, #28]
 80082d8:	f7fe fe4a 	bl	8006f70 <move_window>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80082e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d11d      	bne.n	8008326 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	6918      	ldr	r0, [r3, #16]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a19      	ldr	r1, [r3, #32]
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	7efb      	ldrb	r3, [r7, #27]
 80082f8:	f7ff fcd6 	bl	8007ca8 <put_lfn>
				fs->wflag = 1;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	2201      	movs	r2, #1
 8008300:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008302:	2100      	movs	r1, #0
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff fa9e 	bl	8007846 <dir_next>
 800830a:	4603      	mov	r3, r0
 800830c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008314:	2b00      	cmp	r3, #0
 8008316:	d107      	bne.n	8008328 <dir_register+0x184>
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	3b01      	subs	r3, #1
 800831c:	623b      	str	r3, [r7, #32]
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1d5      	bne.n	80082d0 <dir_register+0x12c>
 8008324:	e000      	b.n	8008328 <dir_register+0x184>
				if (res != FR_OK) break;
 8008326:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800832c:	2b00      	cmp	r3, #0
 800832e:	d128      	bne.n	8008382 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	4619      	mov	r1, r3
 8008336:	69f8      	ldr	r0, [r7, #28]
 8008338:	f7fe fe1a 	bl	8006f70 <move_window>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008346:	2b00      	cmp	r3, #0
 8008348:	d11b      	bne.n	8008382 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	2220      	movs	r2, #32
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fbff 	bl	8006b56 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a18      	ldr	r0, [r3, #32]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3324      	adds	r3, #36	; 0x24
 8008360:	220b      	movs	r2, #11
 8008362:	4619      	mov	r1, r3
 8008364:	f7fe fbd6 	bl	8006b14 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	330c      	adds	r3, #12
 8008374:	f002 0218 	and.w	r2, r2, #24
 8008378:	b2d2      	uxtb	r2, r2
 800837a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	2201      	movs	r2, #1
 8008380:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008386:	4618      	mov	r0, r3
 8008388:	3730      	adds	r7, #48	; 0x30
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	4ec4ec4f 	.word	0x4ec4ec4f

08008394 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b0:	d007      	beq.n	80083c2 <dir_remove+0x2e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff f9bb 	bl	8007734 <dir_sdi>
 80083be:	4603      	mov	r3, r0
 80083c0:	e000      	b.n	80083c4 <dir_remove+0x30>
 80083c2:	2300      	movs	r3, #0
 80083c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d128      	bne.n	800841e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	4619      	mov	r1, r3
 80083d2:	6938      	ldr	r0, [r7, #16]
 80083d4:	f7fe fdcc 	bl	8006f70 <move_window>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d115      	bne.n	800840e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	22e5      	movs	r2, #229	; 0xe5
 80083e8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2201      	movs	r2, #1
 80083ee:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d90b      	bls.n	8008412 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80083fa:	2100      	movs	r1, #0
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7ff fa22 	bl	8007846 <dir_next>
 8008402:	4603      	mov	r3, r0
 8008404:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0df      	beq.n	80083cc <dir_remove+0x38>
 800840c:	e002      	b.n	8008414 <dir_remove+0x80>
			if (res != FR_OK) break;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008412:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	2b04      	cmp	r3, #4
 8008418:	d101      	bne.n	800841e <dir_remove+0x8a>
 800841a:	2302      	movs	r3, #2
 800841c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800841e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08a      	sub	sp, #40	; 0x28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	613b      	str	r3, [r7, #16]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	2300      	movs	r3, #0
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	61ba      	str	r2, [r7, #24]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4413      	add	r3, r2
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008458:	2b1f      	cmp	r3, #31
 800845a:	d940      	bls.n	80084de <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800845c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800845e:	2b2f      	cmp	r3, #47	; 0x2f
 8008460:	d006      	beq.n	8008470 <create_name+0x48>
 8008462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008464:	2b5c      	cmp	r3, #92	; 0x5c
 8008466:	d110      	bne.n	800848a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008468:	e002      	b.n	8008470 <create_name+0x48>
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	3301      	adds	r3, #1
 800846e:	61bb      	str	r3, [r7, #24]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	4413      	add	r3, r2
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b2f      	cmp	r3, #47	; 0x2f
 800847a:	d0f6      	beq.n	800846a <create_name+0x42>
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	4413      	add	r3, r2
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b5c      	cmp	r3, #92	; 0x5c
 8008486:	d0f0      	beq.n	800846a <create_name+0x42>
			break;
 8008488:	e02a      	b.n	80084e0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2bfe      	cmp	r3, #254	; 0xfe
 800848e:	d901      	bls.n	8008494 <create_name+0x6c>
 8008490:	2306      	movs	r3, #6
 8008492:	e17d      	b.n	8008790 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008496:	b2db      	uxtb	r3, r3
 8008498:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800849a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800849c:	2101      	movs	r1, #1
 800849e:	4618      	mov	r0, r3
 80084a0:	f001 ffac 	bl	800a3fc <ff_convert>
 80084a4:	4603      	mov	r3, r0
 80084a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80084a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <create_name+0x8a>
 80084ae:	2306      	movs	r3, #6
 80084b0:	e16e      	b.n	8008790 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80084b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084b4:	2b7f      	cmp	r3, #127	; 0x7f
 80084b6:	d809      	bhi.n	80084cc <create_name+0xa4>
 80084b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084ba:	4619      	mov	r1, r3
 80084bc:	488d      	ldr	r0, [pc, #564]	; (80086f4 <create_name+0x2cc>)
 80084be:	f7fe fb8c 	bl	8006bda <chk_chr>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <create_name+0xa4>
 80084c8:	2306      	movs	r3, #6
 80084ca:	e161      	b.n	8008790 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	617a      	str	r2, [r7, #20]
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4413      	add	r3, r2
 80084d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084da:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80084dc:	e7b4      	b.n	8008448 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80084de:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	441a      	add	r2, r3
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80084ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084ec:	2b1f      	cmp	r3, #31
 80084ee:	d801      	bhi.n	80084f4 <create_name+0xcc>
 80084f0:	2304      	movs	r3, #4
 80084f2:	e000      	b.n	80084f6 <create_name+0xce>
 80084f4:	2300      	movs	r3, #0
 80084f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80084fa:	e011      	b.n	8008520 <create_name+0xf8>
		w = lfn[di - 1];
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008502:	3b01      	subs	r3, #1
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4413      	add	r3, r2
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800850e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008510:	2b20      	cmp	r3, #32
 8008512:	d002      	beq.n	800851a <create_name+0xf2>
 8008514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008516:	2b2e      	cmp	r3, #46	; 0x2e
 8008518:	d106      	bne.n	8008528 <create_name+0x100>
		di--;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	3b01      	subs	r3, #1
 800851e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1ea      	bne.n	80084fc <create_name+0xd4>
 8008526:	e000      	b.n	800852a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008528:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4413      	add	r3, r2
 8008532:	2200      	movs	r2, #0
 8008534:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <create_name+0x118>
 800853c:	2306      	movs	r3, #6
 800853e:	e127      	b.n	8008790 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3324      	adds	r3, #36	; 0x24
 8008544:	220b      	movs	r2, #11
 8008546:	2120      	movs	r1, #32
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fb04 	bl	8006b56 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800854e:	2300      	movs	r3, #0
 8008550:	61bb      	str	r3, [r7, #24]
 8008552:	e002      	b.n	800855a <create_name+0x132>
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	3301      	adds	r3, #1
 8008558:	61bb      	str	r3, [r7, #24]
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	2b20      	cmp	r3, #32
 8008566:	d0f5      	beq.n	8008554 <create_name+0x12c>
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	005b      	lsls	r3, r3, #1
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	2b2e      	cmp	r3, #46	; 0x2e
 8008574:	d0ee      	beq.n	8008554 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d009      	beq.n	8008590 <create_name+0x168>
 800857c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008580:	f043 0303 	orr.w	r3, r3, #3
 8008584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008588:	e002      	b.n	8008590 <create_name+0x168>
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	3b01      	subs	r3, #1
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d009      	beq.n	80085aa <create_name+0x182>
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800859c:	3b01      	subs	r3, #1
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	2b2e      	cmp	r3, #46	; 0x2e
 80085a8:	d1ef      	bne.n	800858a <create_name+0x162>

	i = b = 0; ni = 8;
 80085aa:	2300      	movs	r3, #0
 80085ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80085b0:	2300      	movs	r3, #0
 80085b2:	623b      	str	r3, [r7, #32]
 80085b4:	2308      	movs	r3, #8
 80085b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	61ba      	str	r2, [r7, #24]
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80085c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 8090 	beq.w	80086f0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80085d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	d006      	beq.n	80085e4 <create_name+0x1bc>
 80085d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085d8:	2b2e      	cmp	r3, #46	; 0x2e
 80085da:	d10a      	bne.n	80085f2 <create_name+0x1ca>
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d006      	beq.n	80085f2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80085e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085e8:	f043 0303 	orr.w	r3, r3, #3
 80085ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085f0:	e07d      	b.n	80086ee <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80085f2:	6a3a      	ldr	r2, [r7, #32]
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d203      	bcs.n	8008602 <create_name+0x1da>
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d123      	bne.n	800864a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	2b0b      	cmp	r3, #11
 8008606:	d106      	bne.n	8008616 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800860c:	f043 0303 	orr.w	r3, r3, #3
 8008610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008614:	e075      	b.n	8008702 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	429a      	cmp	r2, r3
 800861c:	d005      	beq.n	800862a <create_name+0x202>
 800861e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008622:	f043 0303 	orr.w	r3, r3, #3
 8008626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	429a      	cmp	r2, r3
 8008630:	d866      	bhi.n	8008700 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	2308      	movs	r3, #8
 8008638:	623b      	str	r3, [r7, #32]
 800863a:	230b      	movs	r3, #11
 800863c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800863e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008648:	e051      	b.n	80086ee <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800864a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800864c:	2b7f      	cmp	r3, #127	; 0x7f
 800864e:	d914      	bls.n	800867a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008652:	2100      	movs	r1, #0
 8008654:	4618      	mov	r0, r3
 8008656:	f001 fed1 	bl	800a3fc <ff_convert>
 800865a:	4603      	mov	r3, r0
 800865c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800865e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <create_name+0x246>
 8008664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008666:	3b80      	subs	r3, #128	; 0x80
 8008668:	4a23      	ldr	r2, [pc, #140]	; (80086f8 <create_name+0x2d0>)
 800866a:	5cd3      	ldrb	r3, [r2, r3]
 800866c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800866e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008672:	f043 0302 	orr.w	r3, r3, #2
 8008676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800867a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <create_name+0x268>
 8008680:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008682:	4619      	mov	r1, r3
 8008684:	481d      	ldr	r0, [pc, #116]	; (80086fc <create_name+0x2d4>)
 8008686:	f7fe faa8 	bl	8006bda <chk_chr>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d008      	beq.n	80086a2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008690:	235f      	movs	r3, #95	; 0x5f
 8008692:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008698:	f043 0303 	orr.w	r3, r3, #3
 800869c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086a0:	e01b      	b.n	80086da <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80086a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086a4:	2b40      	cmp	r3, #64	; 0x40
 80086a6:	d909      	bls.n	80086bc <create_name+0x294>
 80086a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086aa:	2b5a      	cmp	r3, #90	; 0x5a
 80086ac:	d806      	bhi.n	80086bc <create_name+0x294>
					b |= 2;
 80086ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086b2:	f043 0302 	orr.w	r3, r3, #2
 80086b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80086ba:	e00e      	b.n	80086da <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80086bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086be:	2b60      	cmp	r3, #96	; 0x60
 80086c0:	d90b      	bls.n	80086da <create_name+0x2b2>
 80086c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086c4:	2b7a      	cmp	r3, #122	; 0x7a
 80086c6:	d808      	bhi.n	80086da <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80086c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80086d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086d6:	3b20      	subs	r3, #32
 80086d8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	623a      	str	r2, [r7, #32]
 80086e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086e2:	b2d1      	uxtb	r1, r2
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	460a      	mov	r2, r1
 80086ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80086ee:	e763      	b.n	80085b8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80086f0:	bf00      	nop
 80086f2:	e006      	b.n	8008702 <create_name+0x2da>
 80086f4:	0800d3f0 	.word	0x0800d3f0
 80086f8:	0800e2c0 	.word	0x0800e2c0
 80086fc:	0800d3fc 	.word	0x0800d3fc
			if (si > di) break;			/* No extension */
 8008700:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008708:	2be5      	cmp	r3, #229	; 0xe5
 800870a:	d103      	bne.n	8008714 <create_name+0x2ec>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2205      	movs	r2, #5
 8008710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	2b08      	cmp	r3, #8
 8008718:	d104      	bne.n	8008724 <create_name+0x2fc>
 800871a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008724:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008728:	f003 030c 	and.w	r3, r3, #12
 800872c:	2b0c      	cmp	r3, #12
 800872e:	d005      	beq.n	800873c <create_name+0x314>
 8008730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	2b03      	cmp	r3, #3
 800873a:	d105      	bne.n	8008748 <create_name+0x320>
 800873c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008740:	f043 0302 	orr.w	r3, r3, #2
 8008744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b00      	cmp	r3, #0
 8008752:	d117      	bne.n	8008784 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008754:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008758:	f003 0303 	and.w	r3, r3, #3
 800875c:	2b01      	cmp	r3, #1
 800875e:	d105      	bne.n	800876c <create_name+0x344>
 8008760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008764:	f043 0310 	orr.w	r3, r3, #16
 8008768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800876c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008770:	f003 030c 	and.w	r3, r3, #12
 8008774:	2b04      	cmp	r3, #4
 8008776:	d105      	bne.n	8008784 <create_name+0x35c>
 8008778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800877c:	f043 0308 	orr.w	r3, r3, #8
 8008780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800878a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800878e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008790:	4618      	mov	r0, r3
 8008792:	3728      	adds	r7, #40	; 0x28
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80087ac:	e002      	b.n	80087b4 <follow_path+0x1c>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	3301      	adds	r3, #1
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b2f      	cmp	r3, #47	; 0x2f
 80087ba:	d0f8      	beq.n	80087ae <follow_path+0x16>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	2b5c      	cmp	r3, #92	; 0x5c
 80087c2:	d0f4      	beq.n	80087ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	2200      	movs	r2, #0
 80087c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b1f      	cmp	r3, #31
 80087d0:	d80a      	bhi.n	80087e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2280      	movs	r2, #128	; 0x80
 80087d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80087da:	2100      	movs	r1, #0
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7fe ffa9 	bl	8007734 <dir_sdi>
 80087e2:	4603      	mov	r3, r0
 80087e4:	75fb      	strb	r3, [r7, #23]
 80087e6:	e048      	b.n	800887a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80087e8:	463b      	mov	r3, r7
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff fe1b 	bl	8008428 <create_name>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d139      	bne.n	8008870 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff fc11 	bl	8008024 <dir_find>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800880c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00a      	beq.n	800882a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	2b04      	cmp	r3, #4
 8008818:	d12c      	bne.n	8008874 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800881a:	7afb      	ldrb	r3, [r7, #11]
 800881c:	f003 0304 	and.w	r3, r3, #4
 8008820:	2b00      	cmp	r3, #0
 8008822:	d127      	bne.n	8008874 <follow_path+0xdc>
 8008824:	2305      	movs	r3, #5
 8008826:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008828:	e024      	b.n	8008874 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800882a:	7afb      	ldrb	r3, [r7, #11]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d121      	bne.n	8008878 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	799b      	ldrb	r3, [r3, #6]
 8008838:	f003 0310 	and.w	r3, r3, #16
 800883c:	2b00      	cmp	r3, #0
 800883e:	d102      	bne.n	8008846 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008840:	2305      	movs	r3, #5
 8008842:	75fb      	strb	r3, [r7, #23]
 8008844:	e019      	b.n	800887a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	8992      	ldrh	r2, [r2, #12]
 8008854:	fbb3 f0f2 	udiv	r0, r3, r2
 8008858:	fb00 f202 	mul.w	r2, r0, r2
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	440b      	add	r3, r1
 8008860:	4619      	mov	r1, r3
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7ff f90c 	bl	8007a80 <ld_clust>
 8008868:	4602      	mov	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800886e:	e7bb      	b.n	80087e8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008870:	bf00      	nop
 8008872:	e002      	b.n	800887a <follow_path+0xe2>
				break;
 8008874:	bf00      	nop
 8008876:	e000      	b.n	800887a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008878:	bf00      	nop
			}
		}
	}

	return res;
 800887a:	7dfb      	ldrb	r3, [r7, #23]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3718      	adds	r7, #24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800888c:	f04f 33ff 	mov.w	r3, #4294967295
 8008890:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d031      	beq.n	80088fe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e002      	b.n	80088a8 <get_ldnumber+0x24>
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	3301      	adds	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b1f      	cmp	r3, #31
 80088ae:	d903      	bls.n	80088b8 <get_ldnumber+0x34>
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b3a      	cmp	r3, #58	; 0x3a
 80088b6:	d1f4      	bne.n	80088a2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b3a      	cmp	r3, #58	; 0x3a
 80088be:	d11c      	bne.n	80088fa <get_ldnumber+0x76>
			tp = *path;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	60fa      	str	r2, [r7, #12]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	3b30      	subs	r3, #48	; 0x30
 80088d0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b09      	cmp	r3, #9
 80088d6:	d80e      	bhi.n	80088f6 <get_ldnumber+0x72>
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d10a      	bne.n	80088f6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d107      	bne.n	80088f6 <get_ldnumber+0x72>
					vol = (int)i;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	3301      	adds	r3, #1
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	e002      	b.n	8008900 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80088fa:	2300      	movs	r3, #0
 80088fc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80088fe:	693b      	ldr	r3, [r7, #16]
}
 8008900:	4618      	mov	r0, r3
 8008902:	371c      	adds	r7, #28
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	70da      	strb	r2, [r3, #3]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f04f 32ff 	mov.w	r2, #4294967295
 8008922:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7fe fb22 	bl	8006f70 <move_window>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <check_fs+0x2a>
 8008932:	2304      	movs	r3, #4
 8008934:	e038      	b.n	80089a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3338      	adds	r3, #56	; 0x38
 800893a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe f866 	bl	8006a10 <ld_word>
 8008944:	4603      	mov	r3, r0
 8008946:	461a      	mov	r2, r3
 8008948:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800894c:	429a      	cmp	r2, r3
 800894e:	d001      	beq.n	8008954 <check_fs+0x48>
 8008950:	2303      	movs	r3, #3
 8008952:	e029      	b.n	80089a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800895a:	2be9      	cmp	r3, #233	; 0xe9
 800895c:	d009      	beq.n	8008972 <check_fs+0x66>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008964:	2beb      	cmp	r3, #235	; 0xeb
 8008966:	d11e      	bne.n	80089a6 <check_fs+0x9a>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800896e:	2b90      	cmp	r3, #144	; 0x90
 8008970:	d119      	bne.n	80089a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3338      	adds	r3, #56	; 0x38
 8008976:	3336      	adds	r3, #54	; 0x36
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe f861 	bl	8006a40 <ld_dword>
 800897e:	4603      	mov	r3, r0
 8008980:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008984:	4a0a      	ldr	r2, [pc, #40]	; (80089b0 <check_fs+0xa4>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d101      	bne.n	800898e <check_fs+0x82>
 800898a:	2300      	movs	r3, #0
 800898c:	e00c      	b.n	80089a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3338      	adds	r3, #56	; 0x38
 8008992:	3352      	adds	r3, #82	; 0x52
 8008994:	4618      	mov	r0, r3
 8008996:	f7fe f853 	bl	8006a40 <ld_dword>
 800899a:	4603      	mov	r3, r0
 800899c:	4a05      	ldr	r2, [pc, #20]	; (80089b4 <check_fs+0xa8>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d101      	bne.n	80089a6 <check_fs+0x9a>
 80089a2:	2300      	movs	r3, #0
 80089a4:	e000      	b.n	80089a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80089a6:	2302      	movs	r3, #2
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	00544146 	.word	0x00544146
 80089b4:	33544146 	.word	0x33544146

080089b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b096      	sub	sp, #88	; 0x58
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f7ff ff59 	bl	8008884 <get_ldnumber>
 80089d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80089d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da01      	bge.n	80089de <find_volume+0x26>
 80089da:	230b      	movs	r3, #11
 80089dc:	e265      	b.n	8008eaa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80089de:	4a9f      	ldr	r2, [pc, #636]	; (8008c5c <find_volume+0x2a4>)
 80089e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <find_volume+0x3a>
 80089ee:	230c      	movs	r3, #12
 80089f0:	e25b      	b.n	8008eaa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	f023 0301 	bic.w	r3, r3, #1
 80089fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01a      	beq.n	8008a3e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fd ff61 	bl	80068d4 <disk_status>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10c      	bne.n	8008a3e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008a24:	79fb      	ldrb	r3, [r7, #7]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d007      	beq.n	8008a3a <find_volume+0x82>
 8008a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008a36:	230a      	movs	r3, #10
 8008a38:	e237      	b.n	8008eaa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e235      	b.n	8008eaa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4e:	785b      	ldrb	r3, [r3, #1]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fd ff59 	bl	8006908 <disk_initialize>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008a5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e21e      	b.n	8008eaa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d007      	beq.n	8008a82 <find_volume+0xca>
 8008a72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008a7e:	230a      	movs	r3, #10
 8008a80:	e213      	b.n	8008eaa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	7858      	ldrb	r0, [r3, #1]
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	330c      	adds	r3, #12
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	2102      	movs	r1, #2
 8008a8e:	f7fd ffa1 	bl	80069d4 <disk_ioctl>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <find_volume+0xe4>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e206      	b.n	8008eaa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	899b      	ldrh	r3, [r3, #12]
 8008aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa4:	d80d      	bhi.n	8008ac2 <find_volume+0x10a>
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	899b      	ldrh	r3, [r3, #12]
 8008aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aae:	d308      	bcc.n	8008ac2 <find_volume+0x10a>
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	899b      	ldrh	r3, [r3, #12]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	899b      	ldrh	r3, [r3, #12]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	4013      	ands	r3, r2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <find_volume+0x10e>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e1f1      	b.n	8008eaa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008aca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008acc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ace:	f7ff ff1d 	bl	800890c <check_fs>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d149      	bne.n	8008b74 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ae4:	e01e      	b.n	8008b24 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008af4:	4413      	add	r3, r2
 8008af6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	3304      	adds	r3, #4
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d006      	beq.n	8008b10 <find_volume+0x158>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	3308      	adds	r3, #8
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fd ff9a 	bl	8006a40 <ld_dword>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	e000      	b.n	8008b12 <find_volume+0x15a>
 8008b10:	2200      	movs	r2, #0
 8008b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	3358      	adds	r3, #88	; 0x58
 8008b18:	443b      	add	r3, r7
 8008b1a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b20:	3301      	adds	r3, #1
 8008b22:	643b      	str	r3, [r7, #64]	; 0x40
 8008b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d9dd      	bls.n	8008ae6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <find_volume+0x182>
 8008b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b36:	3b01      	subs	r3, #1
 8008b38:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	3358      	adds	r3, #88	; 0x58
 8008b40:	443b      	add	r3, r7
 8008b42:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008b46:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d005      	beq.n	8008b5a <find_volume+0x1a2>
 8008b4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b52:	f7ff fedb 	bl	800890c <check_fs>
 8008b56:	4603      	mov	r3, r0
 8008b58:	e000      	b.n	8008b5c <find_volume+0x1a4>
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d905      	bls.n	8008b74 <find_volume+0x1bc>
 8008b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d9e2      	bls.n	8008b3a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d101      	bne.n	8008b80 <find_volume+0x1c8>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e194      	b.n	8008eaa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d901      	bls.n	8008b8c <find_volume+0x1d4>
 8008b88:	230d      	movs	r3, #13
 8008b8a:	e18e      	b.n	8008eaa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8e:	3338      	adds	r3, #56	; 0x38
 8008b90:	330b      	adds	r3, #11
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fd ff3c 	bl	8006a10 <ld_word>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	899b      	ldrh	r3, [r3, #12]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d001      	beq.n	8008ba8 <find_volume+0x1f0>
 8008ba4:	230d      	movs	r3, #13
 8008ba6:	e180      	b.n	8008eaa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	3338      	adds	r3, #56	; 0x38
 8008bac:	3316      	adds	r3, #22
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fd ff2e 	bl	8006a10 <ld_word>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d106      	bne.n	8008bcc <find_volume+0x214>
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	3338      	adds	r3, #56	; 0x38
 8008bc2:	3324      	adds	r3, #36	; 0x24
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fd ff3b 	bl	8006a40 <ld_dword>
 8008bca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bd0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	789b      	ldrb	r3, [r3, #2]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d005      	beq.n	8008bf0 <find_volume+0x238>
 8008be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be6:	789b      	ldrb	r3, [r3, #2]
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d001      	beq.n	8008bf0 <find_volume+0x238>
 8008bec:	230d      	movs	r3, #13
 8008bee:	e15c      	b.n	8008eaa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	789b      	ldrb	r3, [r3, #2]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf8:	fb02 f303 	mul.w	r3, r2, r3
 8008bfc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	895b      	ldrh	r3, [r3, #10]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d008      	beq.n	8008c24 <find_volume+0x26c>
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	895b      	ldrh	r3, [r3, #10]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	895b      	ldrh	r3, [r3, #10]
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	4013      	ands	r3, r2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <find_volume+0x270>
 8008c24:	230d      	movs	r3, #13
 8008c26:	e140      	b.n	8008eaa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	3338      	adds	r3, #56	; 0x38
 8008c2c:	3311      	adds	r3, #17
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fd feee 	bl	8006a10 <ld_word>
 8008c34:	4603      	mov	r3, r0
 8008c36:	461a      	mov	r2, r3
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	891b      	ldrh	r3, [r3, #8]
 8008c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c42:	8992      	ldrh	r2, [r2, #12]
 8008c44:	0952      	lsrs	r2, r2, #5
 8008c46:	b292      	uxth	r2, r2
 8008c48:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c4c:	fb01 f202 	mul.w	r2, r1, r2
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <find_volume+0x2a8>
 8008c58:	230d      	movs	r3, #13
 8008c5a:	e126      	b.n	8008eaa <find_volume+0x4f2>
 8008c5c:	20000ca8 	.word	0x20000ca8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c62:	3338      	adds	r3, #56	; 0x38
 8008c64:	3313      	adds	r3, #19
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fd fed2 	bl	8006a10 <ld_word>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d106      	bne.n	8008c84 <find_volume+0x2cc>
 8008c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c78:	3338      	adds	r3, #56	; 0x38
 8008c7a:	3320      	adds	r3, #32
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fd fedf 	bl	8006a40 <ld_dword>
 8008c82:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c86:	3338      	adds	r3, #56	; 0x38
 8008c88:	330e      	adds	r3, #14
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fd fec0 	bl	8006a10 <ld_word>
 8008c90:	4603      	mov	r3, r0
 8008c92:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <find_volume+0x2e6>
 8008c9a:	230d      	movs	r3, #13
 8008c9c:	e105      	b.n	8008eaa <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c9e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca2:	4413      	add	r3, r2
 8008ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ca6:	8911      	ldrh	r1, [r2, #8]
 8008ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008caa:	8992      	ldrh	r2, [r2, #12]
 8008cac:	0952      	lsrs	r2, r2, #5
 8008cae:	b292      	uxth	r2, r2
 8008cb0:	fbb1 f2f2 	udiv	r2, r1, r2
 8008cb4:	b292      	uxth	r2, r2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d201      	bcs.n	8008cc6 <find_volume+0x30e>
 8008cc2:	230d      	movs	r3, #13
 8008cc4:	e0f1      	b.n	8008eaa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cce:	8952      	ldrh	r2, [r2, #10]
 8008cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cd4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <find_volume+0x328>
 8008cdc:	230d      	movs	r3, #13
 8008cde:	e0e4      	b.n	8008eaa <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d802      	bhi.n	8008cf6 <find_volume+0x33e>
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d802      	bhi.n	8008d06 <find_volume+0x34e>
 8008d00:	2301      	movs	r3, #1
 8008d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	1c9a      	adds	r2, r3, #2
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d12:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008d14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d18:	441a      	add	r2, r3
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008d1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	441a      	add	r2, r3
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d11e      	bne.n	8008d6e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d32:	3338      	adds	r3, #56	; 0x38
 8008d34:	332a      	adds	r3, #42	; 0x2a
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fd fe6a 	bl	8006a10 <ld_word>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <find_volume+0x38e>
 8008d42:	230d      	movs	r3, #13
 8008d44:	e0b1      	b.n	8008eaa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	891b      	ldrh	r3, [r3, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <find_volume+0x39a>
 8008d4e:	230d      	movs	r3, #13
 8008d50:	e0ab      	b.n	8008eaa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	3338      	adds	r3, #56	; 0x38
 8008d56:	332c      	adds	r3, #44	; 0x2c
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fd fe71 	bl	8006a40 <ld_dword>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d62:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d6c:	e01f      	b.n	8008dae <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	891b      	ldrh	r3, [r3, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <find_volume+0x3c2>
 8008d76:	230d      	movs	r3, #13
 8008d78:	e097      	b.n	8008eaa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d80:	441a      	add	r2, r3
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d103      	bne.n	8008d96 <find_volume+0x3de>
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	e00a      	b.n	8008dac <find_volume+0x3f4>
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	69da      	ldr	r2, [r3, #28]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	4413      	add	r3, r2
 8008da0:	085a      	lsrs	r2, r3, #1
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008dac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	6a1a      	ldr	r2, [r3, #32]
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db4:	899b      	ldrh	r3, [r3, #12]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dba:	440b      	add	r3, r1
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dc0:	8989      	ldrh	r1, [r1, #12]
 8008dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d201      	bcs.n	8008dce <find_volume+0x416>
 8008dca:	230d      	movs	r3, #13
 8008dcc:	e06d      	b.n	8008eaa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd4:	619a      	str	r2, [r3, #24]
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	2280      	movs	r2, #128	; 0x80
 8008de2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d149      	bne.n	8008e80 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	3338      	adds	r3, #56	; 0x38
 8008df0:	3330      	adds	r3, #48	; 0x30
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fd fe0c 	bl	8006a10 <ld_word>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d140      	bne.n	8008e80 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e00:	3301      	adds	r3, #1
 8008e02:	4619      	mov	r1, r3
 8008e04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e06:	f7fe f8b3 	bl	8006f70 <move_window>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d137      	bne.n	8008e80 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	2200      	movs	r2, #0
 8008e14:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e18:	3338      	adds	r3, #56	; 0x38
 8008e1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fd fdf6 	bl	8006a10 <ld_word>
 8008e24:	4603      	mov	r3, r0
 8008e26:	461a      	mov	r2, r3
 8008e28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d127      	bne.n	8008e80 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	3338      	adds	r3, #56	; 0x38
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fd fe03 	bl	8006a40 <ld_dword>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	4a1d      	ldr	r2, [pc, #116]	; (8008eb4 <find_volume+0x4fc>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d11e      	bne.n	8008e80 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	3338      	adds	r3, #56	; 0x38
 8008e46:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fd fdf8 	bl	8006a40 <ld_dword>
 8008e50:	4603      	mov	r3, r0
 8008e52:	4a19      	ldr	r2, [pc, #100]	; (8008eb8 <find_volume+0x500>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d113      	bne.n	8008e80 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	3338      	adds	r3, #56	; 0x38
 8008e5c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fd fded 	bl	8006a40 <ld_dword>
 8008e66:	4602      	mov	r2, r0
 8008e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6e:	3338      	adds	r3, #56	; 0x38
 8008e70:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fd fde3 	bl	8006a40 <ld_dword>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008e86:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008e88:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <find_volume+0x504>)
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <find_volume+0x504>)
 8008e92:	801a      	strh	r2, [r3, #0]
 8008e94:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <find_volume+0x504>)
 8008e96:	881a      	ldrh	r2, [r3, #0]
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	4a08      	ldr	r2, [pc, #32]	; (8008ec0 <find_volume+0x508>)
 8008ea0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ea2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ea4:	f7fd fffc 	bl	8006ea0 <clear_lock>
#endif
	return FR_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3758      	adds	r7, #88	; 0x58
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	41615252 	.word	0x41615252
 8008eb8:	61417272 	.word	0x61417272
 8008ebc:	20000cac 	.word	0x20000cac
 8008ec0:	20000cd0 	.word	0x20000cd0

08008ec4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008ece:	2309      	movs	r3, #9
 8008ed0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d01c      	beq.n	8008f12 <validate+0x4e>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d018      	beq.n	8008f12 <validate+0x4e>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d013      	beq.n	8008f12 <validate+0x4e>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	889a      	ldrh	r2, [r3, #4]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	88db      	ldrh	r3, [r3, #6]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d10c      	bne.n	8008f12 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fd fce8 	bl	80068d4 <disk_status>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <validate+0x4e>
			res = FR_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d102      	bne.n	8008f1e <validate+0x5a>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	e000      	b.n	8008f20 <validate+0x5c>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	6013      	str	r3, [r2, #0]
	return res;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008f42:	f107 0310 	add.w	r3, r7, #16
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff fc9c 	bl	8008884 <get_ldnumber>
 8008f4c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	da01      	bge.n	8008f58 <f_mount+0x28>
 8008f54:	230b      	movs	r3, #11
 8008f56:	e02b      	b.n	8008fb0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008f58:	4a17      	ldr	r2, [pc, #92]	; (8008fb8 <f_mount+0x88>)
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f60:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008f68:	69b8      	ldr	r0, [r7, #24]
 8008f6a:	f7fd ff99 	bl	8006ea0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	2200      	movs	r2, #0
 8008f72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	490d      	ldr	r1, [pc, #52]	; (8008fb8 <f_mount+0x88>)
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <f_mount+0x66>
 8008f90:	79fb      	ldrb	r3, [r7, #7]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d001      	beq.n	8008f9a <f_mount+0x6a>
 8008f96:	2300      	movs	r3, #0
 8008f98:	e00a      	b.n	8008fb0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008f9a:	f107 010c 	add.w	r1, r7, #12
 8008f9e:	f107 0308 	add.w	r3, r7, #8
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff fd07 	bl	80089b8 <find_volume>
 8008faa:	4603      	mov	r3, r0
 8008fac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3720      	adds	r7, #32
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20000ca8 	.word	0x20000ca8

08008fbc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b09a      	sub	sp, #104	; 0x68
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <f_open+0x18>
 8008fd0:	2309      	movs	r3, #9
 8008fd2:	e1bb      	b.n	800934c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fda:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008fdc:	79fa      	ldrb	r2, [r7, #7]
 8008fde:	f107 0114 	add.w	r1, r7, #20
 8008fe2:	f107 0308 	add.w	r3, r7, #8
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff fce6 	bl	80089b8 <find_volume>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008ff2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f040 819f 	bne.w	800933a <f_open+0x37e>
		dj.obj.fs = fs;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	f107 0318 	add.w	r3, r7, #24
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff fbc5 	bl	8008798 <follow_path>
 800900e:	4603      	mov	r3, r0
 8009010:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009014:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009018:	2b00      	cmp	r3, #0
 800901a:	d11a      	bne.n	8009052 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800901c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009020:	b25b      	sxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	da03      	bge.n	800902e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009026:	2306      	movs	r3, #6
 8009028:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800902c:	e011      	b.n	8009052 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800902e:	79fb      	ldrb	r3, [r7, #7]
 8009030:	f023 0301 	bic.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	bf14      	ite	ne
 8009038:	2301      	movne	r3, #1
 800903a:	2300      	moveq	r3, #0
 800903c:	b2db      	uxtb	r3, r3
 800903e:	461a      	mov	r2, r3
 8009040:	f107 0318 	add.w	r3, r7, #24
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f7fd fde2 	bl	8006c10 <chk_lock>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009052:	79fb      	ldrb	r3, [r7, #7]
 8009054:	f003 031c 	and.w	r3, r3, #28
 8009058:	2b00      	cmp	r3, #0
 800905a:	d07f      	beq.n	800915c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800905c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009060:	2b00      	cmp	r3, #0
 8009062:	d017      	beq.n	8009094 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009064:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009068:	2b04      	cmp	r3, #4
 800906a:	d10e      	bne.n	800908a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800906c:	f7fd fe2c 	bl	8006cc8 <enq_lock>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d006      	beq.n	8009084 <f_open+0xc8>
 8009076:	f107 0318 	add.w	r3, r7, #24
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff f892 	bl	80081a4 <dir_register>
 8009080:	4603      	mov	r3, r0
 8009082:	e000      	b.n	8009086 <f_open+0xca>
 8009084:	2312      	movs	r3, #18
 8009086:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800908a:	79fb      	ldrb	r3, [r7, #7]
 800908c:	f043 0308 	orr.w	r3, r3, #8
 8009090:	71fb      	strb	r3, [r7, #7]
 8009092:	e010      	b.n	80090b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009094:	7fbb      	ldrb	r3, [r7, #30]
 8009096:	f003 0311 	and.w	r3, r3, #17
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <f_open+0xea>
					res = FR_DENIED;
 800909e:	2307      	movs	r3, #7
 80090a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80090a4:	e007      	b.n	80090b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <f_open+0xfa>
 80090b0:	2308      	movs	r3, #8
 80090b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80090b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d168      	bne.n	8009190 <f_open+0x1d4>
 80090be:	79fb      	ldrb	r3, [r7, #7]
 80090c0:	f003 0308 	and.w	r3, r3, #8
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d063      	beq.n	8009190 <f_open+0x1d4>
				dw = GET_FATTIME();
 80090c8:	f7fd fba6 	bl	8006818 <get_fattime>
 80090cc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80090ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d0:	330e      	adds	r3, #14
 80090d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fd fcf1 	bl	8006abc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80090da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090dc:	3316      	adds	r3, #22
 80090de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fd fceb 	bl	8006abc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	330b      	adds	r3, #11
 80090ea:	2220      	movs	r2, #32
 80090ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090f2:	4611      	mov	r1, r2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe fcc3 	bl	8007a80 <ld_clust>
 80090fa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009100:	2200      	movs	r2, #0
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe fcdb 	bl	8007abe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910a:	331c      	adds	r3, #28
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f7fd fcd4 	bl	8006abc <st_dword>
					fs->wflag = 1;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2201      	movs	r2, #1
 8009118:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800911a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800911c:	2b00      	cmp	r3, #0
 800911e:	d037      	beq.n	8009190 <f_open+0x1d4>
						dw = fs->winsect;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009124:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009126:	f107 0318 	add.w	r3, r7, #24
 800912a:	2200      	movs	r2, #0
 800912c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800912e:	4618      	mov	r0, r3
 8009130:	f7fe f9cb 	bl	80074ca <remove_chain>
 8009134:	4603      	mov	r3, r0
 8009136:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800913a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800913e:	2b00      	cmp	r3, #0
 8009140:	d126      	bne.n	8009190 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009146:	4618      	mov	r0, r3
 8009148:	f7fd ff12 	bl	8006f70 <move_window>
 800914c:	4603      	mov	r3, r0
 800914e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009156:	3a01      	subs	r2, #1
 8009158:	615a      	str	r2, [r3, #20]
 800915a:	e019      	b.n	8009190 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800915c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009160:	2b00      	cmp	r3, #0
 8009162:	d115      	bne.n	8009190 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009164:	7fbb      	ldrb	r3, [r7, #30]
 8009166:	f003 0310 	and.w	r3, r3, #16
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <f_open+0x1ba>
					res = FR_NO_FILE;
 800916e:	2304      	movs	r3, #4
 8009170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009174:	e00c      	b.n	8009190 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d007      	beq.n	8009190 <f_open+0x1d4>
 8009180:	7fbb      	ldrb	r3, [r7, #30]
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <f_open+0x1d4>
						res = FR_DENIED;
 800918a:	2307      	movs	r3, #7
 800918c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009190:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009194:	2b00      	cmp	r3, #0
 8009196:	d128      	bne.n	80091ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009198:	79fb      	ldrb	r3, [r7, #7]
 800919a:	f003 0308 	and.w	r3, r3, #8
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d003      	beq.n	80091aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80091b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	f023 0301 	bic.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	bf14      	ite	ne
 80091c2:	2301      	movne	r3, #1
 80091c4:	2300      	moveq	r3, #0
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	461a      	mov	r2, r3
 80091ca:	f107 0318 	add.w	r3, r7, #24
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fd fd9b 	bl	8006d0c <inc_lock>
 80091d6:	4602      	mov	r2, r0
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d102      	bne.n	80091ea <f_open+0x22e>
 80091e4:	2302      	movs	r3, #2
 80091e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80091ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f040 80a3 	bne.w	800933a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fc40 	bl	8007a80 <ld_clust>
 8009200:	4602      	mov	r2, r0
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	331c      	adds	r3, #28
 800920a:	4618      	mov	r0, r3
 800920c:	f7fd fc18 	bl	8006a40 <ld_dword>
 8009210:	4602      	mov	r2, r0
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	88da      	ldrh	r2, [r3, #6]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	79fa      	ldrb	r2, [r7, #7]
 800922e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3330      	adds	r3, #48	; 0x30
 8009246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800924a:	2100      	movs	r1, #0
 800924c:	4618      	mov	r0, r3
 800924e:	f7fd fc82 	bl	8006b56 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	d06e      	beq.n	800933a <f_open+0x37e>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d06a      	beq.n	800933a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	895b      	ldrh	r3, [r3, #10]
 8009270:	461a      	mov	r2, r3
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	899b      	ldrh	r3, [r3, #12]
 8009276:	fb02 f303 	mul.w	r3, r2, r3
 800927a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009288:	e016      	b.n	80092b8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800928e:	4618      	mov	r0, r3
 8009290:	f7fd ff2b 	bl	80070ea <get_fat>
 8009294:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009298:	2b01      	cmp	r3, #1
 800929a:	d802      	bhi.n	80092a2 <f_open+0x2e6>
 800929c:	2302      	movs	r3, #2
 800929e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80092a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a8:	d102      	bne.n	80092b0 <f_open+0x2f4>
 80092aa:	2301      	movs	r3, #1
 80092ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80092b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d103      	bne.n	80092c8 <f_open+0x30c>
 80092c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d8e0      	bhi.n	800928a <f_open+0x2ce>
				}
				fp->clust = clst;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80092ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d131      	bne.n	800933a <f_open+0x37e>
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	899b      	ldrh	r3, [r3, #12]
 80092da:	461a      	mov	r2, r3
 80092dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092de:	fbb3 f1f2 	udiv	r1, r3, r2
 80092e2:	fb01 f202 	mul.w	r2, r1, r2
 80092e6:	1a9b      	subs	r3, r3, r2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d026      	beq.n	800933a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fd fedb 	bl	80070ac <clust2sect>
 80092f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80092f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <f_open+0x34a>
						res = FR_INT_ERR;
 80092fe:	2302      	movs	r3, #2
 8009300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009304:	e019      	b.n	800933a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	899b      	ldrh	r3, [r3, #12]
 800930a:	461a      	mov	r2, r3
 800930c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800930e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009314:	441a      	add	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	7858      	ldrb	r0, [r3, #1]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6a1a      	ldr	r2, [r3, #32]
 8009328:	2301      	movs	r3, #1
 800932a:	f7fd fb13 	bl	8006954 <disk_read>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <f_open+0x37e>
 8009334:	2301      	movs	r3, #1
 8009336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800933a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <f_open+0x38c>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009348:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800934c:	4618      	mov	r0, r3
 800934e:	3768      	adds	r7, #104	; 0x68
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08e      	sub	sp, #56	; 0x38
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f107 0214 	add.w	r2, r7, #20
 8009372:	4611      	mov	r1, r2
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff fda5 	bl	8008ec4 <validate>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009380:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009384:	2b00      	cmp	r3, #0
 8009386:	d107      	bne.n	8009398 <f_read+0x44>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	7d5b      	ldrb	r3, [r3, #21]
 800938c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <f_read+0x4a>
 8009398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800939c:	e135      	b.n	800960a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	7d1b      	ldrb	r3, [r3, #20]
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <f_read+0x5a>
 80093aa:	2307      	movs	r3, #7
 80093ac:	e12d      	b.n	800960a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	429a      	cmp	r2, r3
 80093c0:	f240 811e 	bls.w	8009600 <f_read+0x2ac>
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80093c8:	e11a      	b.n	8009600 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	8992      	ldrh	r2, [r2, #12]
 80093d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80093d6:	fb01 f202 	mul.w	r2, r1, r2
 80093da:	1a9b      	subs	r3, r3, r2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f040 80d5 	bne.w	800958c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	8992      	ldrh	r2, [r2, #12]
 80093ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	8952      	ldrh	r2, [r2, #10]
 80093f2:	3a01      	subs	r2, #1
 80093f4:	4013      	ands	r3, r2
 80093f6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d12f      	bne.n	800945e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d103      	bne.n	800940e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	633b      	str	r3, [r7, #48]	; 0x30
 800940c:	e013      	b.n	8009436 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	2b00      	cmp	r3, #0
 8009414:	d007      	beq.n	8009426 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	4619      	mov	r1, r3
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7fe f951 	bl	80076c4 <clmt_clust>
 8009422:	6338      	str	r0, [r7, #48]	; 0x30
 8009424:	e007      	b.n	8009436 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	4619      	mov	r1, r3
 800942e:	4610      	mov	r0, r2
 8009430:	f7fd fe5b 	bl	80070ea <get_fat>
 8009434:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	2b01      	cmp	r3, #1
 800943a:	d804      	bhi.n	8009446 <f_read+0xf2>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2202      	movs	r2, #2
 8009440:	755a      	strb	r2, [r3, #21]
 8009442:	2302      	movs	r3, #2
 8009444:	e0e1      	b.n	800960a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944c:	d104      	bne.n	8009458 <f_read+0x104>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2201      	movs	r2, #1
 8009452:	755a      	strb	r2, [r3, #21]
 8009454:	2301      	movs	r3, #1
 8009456:	e0d8      	b.n	800960a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800945c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7fd fe20 	bl	80070ac <clust2sect>
 800946c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d104      	bne.n	800947e <f_read+0x12a>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2202      	movs	r2, #2
 8009478:	755a      	strb	r2, [r3, #21]
 800947a:	2302      	movs	r3, #2
 800947c:	e0c5      	b.n	800960a <f_read+0x2b6>
			sect += csect;
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	4413      	add	r3, r2
 8009484:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	899b      	ldrh	r3, [r3, #12]
 800948a:	461a      	mov	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009492:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	2b00      	cmp	r3, #0
 8009498:	d041      	beq.n	800951e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800949a:	69fa      	ldr	r2, [r7, #28]
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	4413      	add	r3, r2
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	8952      	ldrh	r2, [r2, #10]
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d905      	bls.n	80094b4 <f_read+0x160>
					cc = fs->csize - csect;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	895b      	ldrh	r3, [r3, #10]
 80094ac:	461a      	mov	r2, r3
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	7858      	ldrb	r0, [r3, #1]
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094be:	f7fd fa49 	bl	8006954 <disk_read>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d004      	beq.n	80094d2 <f_read+0x17e>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2201      	movs	r2, #1
 80094cc:	755a      	strb	r2, [r3, #21]
 80094ce:	2301      	movs	r3, #1
 80094d0:	e09b      	b.n	800960a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	7d1b      	ldrb	r3, [r3, #20]
 80094d6:	b25b      	sxtb	r3, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	da18      	bge.n	800950e <f_read+0x1ba>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a1a      	ldr	r2, [r3, #32]
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d911      	bls.n	800950e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a1a      	ldr	r2, [r3, #32]
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	8992      	ldrh	r2, [r2, #12]
 80094f6:	fb02 f303 	mul.w	r3, r2, r3
 80094fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fc:	18d0      	adds	r0, r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	899b      	ldrh	r3, [r3, #12]
 8009508:	461a      	mov	r2, r3
 800950a:	f7fd fb03 	bl	8006b14 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	899b      	ldrh	r3, [r3, #12]
 8009512:	461a      	mov	r2, r3
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	fb02 f303 	mul.w	r3, r2, r3
 800951a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800951c:	e05c      	b.n	80095d8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	429a      	cmp	r2, r3
 8009526:	d02e      	beq.n	8009586 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	7d1b      	ldrb	r3, [r3, #20]
 800952c:	b25b      	sxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	da18      	bge.n	8009564 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	7858      	ldrb	r0, [r3, #1]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	2301      	movs	r3, #1
 8009542:	f7fd fa27 	bl	8006994 <disk_write>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d004      	beq.n	8009556 <f_read+0x202>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2201      	movs	r2, #1
 8009550:	755a      	strb	r2, [r3, #21]
 8009552:	2301      	movs	r3, #1
 8009554:	e059      	b.n	800960a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	7d1b      	ldrb	r3, [r3, #20]
 800955a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800955e:	b2da      	uxtb	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	7858      	ldrb	r0, [r3, #1]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800956e:	2301      	movs	r3, #1
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	f7fd f9ef 	bl	8006954 <disk_read>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d004      	beq.n	8009586 <f_read+0x232>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2201      	movs	r2, #1
 8009580:	755a      	strb	r2, [r3, #21]
 8009582:	2301      	movs	r3, #1
 8009584:	e041      	b.n	800960a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	899b      	ldrh	r3, [r3, #12]
 8009590:	4618      	mov	r0, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	8992      	ldrh	r2, [r2, #12]
 800959a:	fbb3 f1f2 	udiv	r1, r3, r2
 800959e:	fb01 f202 	mul.w	r2, r1, r2
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	1ac3      	subs	r3, r0, r3
 80095a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80095a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d901      	bls.n	80095b4 <f_read+0x260>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	8992      	ldrh	r2, [r2, #12]
 80095c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80095c6:	fb00 f202 	mul.w	r2, r0, r2
 80095ca:	1a9b      	subs	r3, r3, r2
 80095cc:	440b      	add	r3, r1
 80095ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095d0:	4619      	mov	r1, r3
 80095d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095d4:	f7fd fa9e 	bl	8006b14 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80095d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095dc:	4413      	add	r3, r2
 80095de:	627b      	str	r3, [r7, #36]	; 0x24
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	699a      	ldr	r2, [r3, #24]
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	441a      	add	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	619a      	str	r2, [r3, #24]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f2:	441a      	add	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f47f aee1 	bne.w	80093ca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3738      	adds	r7, #56	; 0x38
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b08c      	sub	sp, #48	; 0x30
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
 800961e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f107 0210 	add.w	r2, r7, #16
 8009630:	4611      	mov	r1, r2
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff fc46 	bl	8008ec4 <validate>
 8009638:	4603      	mov	r3, r0
 800963a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800963e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009642:	2b00      	cmp	r3, #0
 8009644:	d107      	bne.n	8009656 <f_write+0x44>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	7d5b      	ldrb	r3, [r3, #21]
 800964a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800964e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <f_write+0x4a>
 8009656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800965a:	e16a      	b.n	8009932 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	7d1b      	ldrb	r3, [r3, #20]
 8009660:	f003 0302 	and.w	r3, r3, #2
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <f_write+0x5a>
 8009668:	2307      	movs	r3, #7
 800966a:	e162      	b.n	8009932 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	699a      	ldr	r2, [r3, #24]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	441a      	add	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	429a      	cmp	r2, r3
 800967a:	f080 814c 	bcs.w	8009916 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	43db      	mvns	r3, r3
 8009684:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009686:	e146      	b.n	8009916 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	8992      	ldrh	r2, [r2, #12]
 8009690:	fbb3 f1f2 	udiv	r1, r3, r2
 8009694:	fb01 f202 	mul.w	r2, r1, r2
 8009698:	1a9b      	subs	r3, r3, r2
 800969a:	2b00      	cmp	r3, #0
 800969c:	f040 80f1 	bne.w	8009882 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	8992      	ldrh	r2, [r2, #12]
 80096a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	8952      	ldrh	r2, [r2, #10]
 80096b0:	3a01      	subs	r2, #1
 80096b2:	4013      	ands	r3, r2
 80096b4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d143      	bne.n	8009744 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10c      	bne.n	80096de <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80096ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d11a      	bne.n	8009706 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2100      	movs	r1, #0
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fd ff5d 	bl	8007594 <create_chain>
 80096da:	62b8      	str	r0, [r7, #40]	; 0x28
 80096dc:	e013      	b.n	8009706 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d007      	beq.n	80096f6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	4619      	mov	r1, r3
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f7fd ffe9 	bl	80076c4 <clmt_clust>
 80096f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80096f4:	e007      	b.n	8009706 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	4619      	mov	r1, r3
 80096fe:	4610      	mov	r0, r2
 8009700:	f7fd ff48 	bl	8007594 <create_chain>
 8009704:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 8109 	beq.w	8009920 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	2b01      	cmp	r3, #1
 8009712:	d104      	bne.n	800971e <f_write+0x10c>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2202      	movs	r2, #2
 8009718:	755a      	strb	r2, [r3, #21]
 800971a:	2302      	movs	r3, #2
 800971c:	e109      	b.n	8009932 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009724:	d104      	bne.n	8009730 <f_write+0x11e>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2201      	movs	r2, #1
 800972a:	755a      	strb	r2, [r3, #21]
 800972c:	2301      	movs	r3, #1
 800972e:	e100      	b.n	8009932 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009734:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d102      	bne.n	8009744 <f_write+0x132>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009742:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	7d1b      	ldrb	r3, [r3, #20]
 8009748:	b25b      	sxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	da18      	bge.n	8009780 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	7858      	ldrb	r0, [r3, #1]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a1a      	ldr	r2, [r3, #32]
 800975c:	2301      	movs	r3, #1
 800975e:	f7fd f919 	bl	8006994 <disk_write>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d004      	beq.n	8009772 <f_write+0x160>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2201      	movs	r2, #1
 800976c:	755a      	strb	r2, [r3, #21]
 800976e:	2301      	movs	r3, #1
 8009770:	e0df      	b.n	8009932 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	7d1b      	ldrb	r3, [r3, #20]
 8009776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800977a:	b2da      	uxtb	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f7fd fc8f 	bl	80070ac <clust2sect>
 800978e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d104      	bne.n	80097a0 <f_write+0x18e>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2202      	movs	r2, #2
 800979a:	755a      	strb	r2, [r3, #21]
 800979c:	2302      	movs	r3, #2
 800979e:	e0c8      	b.n	8009932 <f_write+0x320>
			sect += csect;
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	4413      	add	r3, r2
 80097a6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	899b      	ldrh	r3, [r3, #12]
 80097ac:	461a      	mov	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80097b4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d043      	beq.n	8009844 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	4413      	add	r3, r2
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	8952      	ldrh	r2, [r2, #10]
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d905      	bls.n	80097d6 <f_write+0x1c4>
					cc = fs->csize - csect;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	895b      	ldrh	r3, [r3, #10]
 80097ce:	461a      	mov	r2, r3
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	7858      	ldrb	r0, [r3, #1]
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	69f9      	ldr	r1, [r7, #28]
 80097e0:	f7fd f8d8 	bl	8006994 <disk_write>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <f_write+0x1e2>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2201      	movs	r2, #1
 80097ee:	755a      	strb	r2, [r3, #21]
 80097f0:	2301      	movs	r3, #1
 80097f2:	e09e      	b.n	8009932 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a1a      	ldr	r2, [r3, #32]
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	6a3a      	ldr	r2, [r7, #32]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d918      	bls.n	8009834 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a1a      	ldr	r2, [r3, #32]
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	8992      	ldrh	r2, [r2, #12]
 8009814:	fb02 f303 	mul.w	r3, r2, r3
 8009818:	69fa      	ldr	r2, [r7, #28]
 800981a:	18d1      	adds	r1, r2, r3
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	899b      	ldrh	r3, [r3, #12]
 8009820:	461a      	mov	r2, r3
 8009822:	f7fd f977 	bl	8006b14 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	7d1b      	ldrb	r3, [r3, #20]
 800982a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982e:	b2da      	uxtb	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	899b      	ldrh	r3, [r3, #12]
 8009838:	461a      	mov	r2, r3
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	fb02 f303 	mul.w	r3, r2, r3
 8009840:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009842:	e04b      	b.n	80098dc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	429a      	cmp	r2, r3
 800984c:	d016      	beq.n	800987c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	699a      	ldr	r2, [r3, #24]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009856:	429a      	cmp	r2, r3
 8009858:	d210      	bcs.n	800987c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	7858      	ldrb	r0, [r3, #1]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009864:	2301      	movs	r3, #1
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	f7fd f874 	bl	8006954 <disk_read>
 800986c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800986e:	2b00      	cmp	r3, #0
 8009870:	d004      	beq.n	800987c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2201      	movs	r2, #1
 8009876:	755a      	strb	r2, [r3, #21]
 8009878:	2301      	movs	r3, #1
 800987a:	e05a      	b.n	8009932 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	899b      	ldrh	r3, [r3, #12]
 8009886:	4618      	mov	r0, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	8992      	ldrh	r2, [r2, #12]
 8009890:	fbb3 f1f2 	udiv	r1, r3, r2
 8009894:	fb01 f202 	mul.w	r2, r1, r2
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	1ac3      	subs	r3, r0, r3
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800989e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d901      	bls.n	80098aa <f_write+0x298>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	8992      	ldrh	r2, [r2, #12]
 80098b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80098bc:	fb00 f202 	mul.w	r2, r0, r2
 80098c0:	1a9b      	subs	r3, r3, r2
 80098c2:	440b      	add	r3, r1
 80098c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c6:	69f9      	ldr	r1, [r7, #28]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fd f923 	bl	8006b14 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	7d1b      	ldrb	r3, [r3, #20]
 80098d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80098dc:	69fa      	ldr	r2, [r7, #28]
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	4413      	add	r3, r2
 80098e2:	61fb      	str	r3, [r7, #28]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	699a      	ldr	r2, [r3, #24]
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	441a      	add	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	619a      	str	r2, [r3, #24]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68da      	ldr	r2, [r3, #12]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	bf38      	it	cc
 80098fc:	461a      	movcc	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	60da      	str	r2, [r3, #12]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	441a      	add	r2, r3
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f47f aeb5 	bne.w	8009688 <f_write+0x76>
 800991e:	e000      	b.n	8009922 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009920:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	7d1b      	ldrb	r3, [r3, #20]
 8009926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992a:	b2da      	uxtb	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3730      	adds	r7, #48	; 0x30
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b086      	sub	sp, #24
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f107 0208 	add.w	r2, r7, #8
 8009948:	4611      	mov	r1, r2
 800994a:	4618      	mov	r0, r3
 800994c:	f7ff faba 	bl	8008ec4 <validate>
 8009950:	4603      	mov	r3, r0
 8009952:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d168      	bne.n	8009a2c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	7d1b      	ldrb	r3, [r3, #20]
 800995e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009962:	2b00      	cmp	r3, #0
 8009964:	d062      	beq.n	8009a2c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7d1b      	ldrb	r3, [r3, #20]
 800996a:	b25b      	sxtb	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	da15      	bge.n	800999c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	7858      	ldrb	r0, [r3, #1]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1a      	ldr	r2, [r3, #32]
 800997e:	2301      	movs	r3, #1
 8009980:	f7fd f808 	bl	8006994 <disk_write>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <f_sync+0x54>
 800998a:	2301      	movs	r3, #1
 800998c:	e04f      	b.n	8009a2e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	7d1b      	ldrb	r3, [r3, #20]
 8009992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009996:	b2da      	uxtb	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800999c:	f7fc ff3c 	bl	8006818 <get_fattime>
 80099a0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	4619      	mov	r1, r3
 80099aa:	4610      	mov	r0, r2
 80099ac:	f7fd fae0 	bl	8006f70 <move_window>
 80099b0:	4603      	mov	r3, r0
 80099b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d138      	bne.n	8009a2c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	330b      	adds	r3, #11
 80099c4:	781a      	ldrb	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	330b      	adds	r3, #11
 80099ca:	f042 0220 	orr.w	r2, r2, #32
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	461a      	mov	r2, r3
 80099dc:	68f9      	ldr	r1, [r7, #12]
 80099de:	f7fe f86e 	bl	8007abe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f103 021c 	add.w	r2, r3, #28
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	4619      	mov	r1, r3
 80099ee:	4610      	mov	r0, r2
 80099f0:	f7fd f864 	bl	8006abc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3316      	adds	r3, #22
 80099f8:	6939      	ldr	r1, [r7, #16]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fd f85e 	bl	8006abc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3312      	adds	r3, #18
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fd f83d 	bl	8006a86 <st_word>
					fs->wflag = 1;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fd fad9 	bl	8006fcc <sync_fs>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	7d1b      	ldrb	r3, [r3, #20]
 8009a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7ff ff7b 	bl	800993a <f_sync>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d118      	bne.n	8009a80 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f107 0208 	add.w	r2, r7, #8
 8009a54:	4611      	mov	r1, r2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff fa34 	bl	8008ec4 <validate>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10c      	bne.n	8009a80 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fd f9dc 	bl	8006e28 <dec_lock>
 8009a70:	4603      	mov	r3, r0
 8009a72:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d102      	bne.n	8009a80 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b090      	sub	sp, #64	; 0x40
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f107 0208 	add.w	r2, r7, #8
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7ff fa11 	bl	8008ec4 <validate>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d103      	bne.n	8009ab8 <f_lseek+0x2e>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	7d5b      	ldrb	r3, [r3, #21]
 8009ab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <f_lseek+0x3c>
 8009ac0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ac4:	e201      	b.n	8009eca <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f000 80d9 	beq.w	8009c82 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad6:	d15a      	bne.n	8009b8e <f_lseek+0x104>
			tbl = fp->cltbl;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	1d1a      	adds	r2, r3, #4
 8009ae2:	627a      	str	r2, [r7, #36]	; 0x24
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	617b      	str	r3, [r7, #20]
 8009ae8:	2302      	movs	r3, #2
 8009aea:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d03a      	beq.n	8009b6e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	613b      	str	r3, [r7, #16]
 8009afc:	2300      	movs	r3, #0
 8009afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	3302      	adds	r3, #2
 8009b04:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	60fb      	str	r3, [r7, #12]
 8009b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fd fae8 	bl	80070ea <get_fat>
 8009b1a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d804      	bhi.n	8009b2c <f_lseek+0xa2>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2202      	movs	r2, #2
 8009b26:	755a      	strb	r2, [r3, #21]
 8009b28:	2302      	movs	r3, #2
 8009b2a:	e1ce      	b.n	8009eca <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b32:	d104      	bne.n	8009b3e <f_lseek+0xb4>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	755a      	strb	r2, [r3, #21]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e1c5      	b.n	8009eca <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3301      	adds	r3, #1
 8009b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d0de      	beq.n	8009b06 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d809      	bhi.n	8009b64 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	1d1a      	adds	r2, r3, #4
 8009b54:	627a      	str	r2, [r7, #36]	; 0x24
 8009b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	1d1a      	adds	r2, r3, #4
 8009b5e:	627a      	str	r2, [r7, #36]	; 0x24
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d3c4      	bcc.n	8009af8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b74:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d803      	bhi.n	8009b86 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	e19f      	b.n	8009ec6 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009b86:	2311      	movs	r3, #17
 8009b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009b8c:	e19b      	b.n	8009ec6 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d902      	bls.n	8009b9e <f_lseek+0x114>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f000 818d 	beq.w	8009ec6 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7fd fd86 	bl	80076c4 <clmt_clust>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f7fd fa70 	bl	80070ac <clust2sect>
 8009bcc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d104      	bne.n	8009bde <f_lseek+0x154>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	755a      	strb	r2, [r3, #21]
 8009bda:	2302      	movs	r3, #2
 8009bdc:	e175      	b.n	8009eca <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	8992      	ldrh	r2, [r2, #12]
 8009be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	8952      	ldrh	r2, [r2, #10]
 8009bee:	3a01      	subs	r2, #1
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	69ba      	ldr	r2, [r7, #24]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	8992      	ldrh	r2, [r2, #12]
 8009c00:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c04:	fb01 f202 	mul.w	r2, r1, r2
 8009c08:	1a9b      	subs	r3, r3, r2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 815b 	beq.w	8009ec6 <f_lseek+0x43c>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a1b      	ldr	r3, [r3, #32]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	f000 8155 	beq.w	8009ec6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7d1b      	ldrb	r3, [r3, #20]
 8009c20:	b25b      	sxtb	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da18      	bge.n	8009c58 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	7858      	ldrb	r0, [r3, #1]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a1a      	ldr	r2, [r3, #32]
 8009c34:	2301      	movs	r3, #1
 8009c36:	f7fc fead 	bl	8006994 <disk_write>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d004      	beq.n	8009c4a <f_lseek+0x1c0>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	755a      	strb	r2, [r3, #21]
 8009c46:	2301      	movs	r3, #1
 8009c48:	e13f      	b.n	8009eca <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	7d1b      	ldrb	r3, [r3, #20]
 8009c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	7858      	ldrb	r0, [r3, #1]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c62:	2301      	movs	r3, #1
 8009c64:	69ba      	ldr	r2, [r7, #24]
 8009c66:	f7fc fe75 	bl	8006954 <disk_read>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d004      	beq.n	8009c7a <f_lseek+0x1f0>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	755a      	strb	r2, [r3, #21]
 8009c76:	2301      	movs	r3, #1
 8009c78:	e127      	b.n	8009eca <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	69ba      	ldr	r2, [r7, #24]
 8009c7e:	621a      	str	r2, [r3, #32]
 8009c80:	e121      	b.n	8009ec6 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d908      	bls.n	8009c9e <f_lseek+0x214>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	7d1b      	ldrb	r3, [r3, #20]
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cac:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f000 80b5 	beq.w	8009e20 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	895b      	ldrh	r3, [r3, #10]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	899b      	ldrh	r3, [r3, #12]
 8009cc0:	fb02 f303 	mul.w	r3, r2, r3
 8009cc4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01b      	beq.n	8009d04 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	1e5a      	subs	r2, r3, #1
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	1e59      	subs	r1, r3, #1
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d30f      	bcc.n	8009d04 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	1e5a      	subs	r2, r3, #1
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	425b      	negs	r3, r3
 8009cec:	401a      	ands	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d02:	e022      	b.n	8009d4a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d119      	bne.n	8009d44 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2100      	movs	r1, #0
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fd fc3d 	bl	8007594 <create_chain>
 8009d1a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d104      	bne.n	8009d2c <f_lseek+0x2a2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2202      	movs	r2, #2
 8009d26:	755a      	strb	r2, [r3, #21]
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e0ce      	b.n	8009eca <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d32:	d104      	bne.n	8009d3e <f_lseek+0x2b4>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	755a      	strb	r2, [r3, #21]
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e0c5      	b.n	8009eca <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d42:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d48:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d067      	beq.n	8009e20 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009d50:	e03a      	b.n	8009dc8 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	603b      	str	r3, [r7, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	699a      	ldr	r2, [r3, #24]
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	441a      	add	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	7d1b      	ldrb	r3, [r3, #20]
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00b      	beq.n	8009d8a <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fd fc0c 	bl	8007594 <create_chain>
 8009d7c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d108      	bne.n	8009d96 <f_lseek+0x30c>
							ofs = 0; break;
 8009d84:	2300      	movs	r3, #0
 8009d86:	603b      	str	r3, [r7, #0]
 8009d88:	e022      	b.n	8009dd0 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fd f9ab 	bl	80070ea <get_fat>
 8009d94:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9c:	d104      	bne.n	8009da8 <f_lseek+0x31e>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	755a      	strb	r2, [r3, #21]
 8009da4:	2301      	movs	r3, #1
 8009da6:	e090      	b.n	8009eca <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d904      	bls.n	8009db8 <f_lseek+0x32e>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d304      	bcc.n	8009dc2 <f_lseek+0x338>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	755a      	strb	r2, [r3, #21]
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e083      	b.n	8009eca <f_lseek+0x440>
					fp->clust = clst;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dc6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d8c0      	bhi.n	8009d52 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	699a      	ldr	r2, [r3, #24]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	441a      	add	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	899b      	ldrh	r3, [r3, #12]
 8009de0:	461a      	mov	r2, r3
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009de8:	fb01 f202 	mul.w	r2, r1, r2
 8009dec:	1a9b      	subs	r3, r3, r2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d016      	beq.n	8009e20 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fd f958 	bl	80070ac <clust2sect>
 8009dfc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d104      	bne.n	8009e0e <f_lseek+0x384>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	755a      	strb	r2, [r3, #21]
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	e05d      	b.n	8009eca <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	899b      	ldrh	r3, [r3, #12]
 8009e12:	461a      	mov	r2, r3
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e1c:	4413      	add	r3, r2
 8009e1e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	699a      	ldr	r2, [r3, #24]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d90a      	bls.n	8009e42 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	699a      	ldr	r2, [r3, #24]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	7d1b      	ldrb	r3, [r3, #20]
 8009e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	8992      	ldrh	r2, [r2, #12]
 8009e4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e4e:	fb01 f202 	mul.w	r2, r1, r2
 8009e52:	1a9b      	subs	r3, r3, r2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d036      	beq.n	8009ec6 <f_lseek+0x43c>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d031      	beq.n	8009ec6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	7d1b      	ldrb	r3, [r3, #20]
 8009e66:	b25b      	sxtb	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	da18      	bge.n	8009e9e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	7858      	ldrb	r0, [r3, #1]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a1a      	ldr	r2, [r3, #32]
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	f7fc fd8a 	bl	8006994 <disk_write>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d004      	beq.n	8009e90 <f_lseek+0x406>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	755a      	strb	r2, [r3, #21]
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e01c      	b.n	8009eca <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
 8009e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	7858      	ldrb	r0, [r3, #1]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eac:	f7fc fd52 	bl	8006954 <disk_read>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d004      	beq.n	8009ec0 <f_lseek+0x436>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	755a      	strb	r2, [r3, #21]
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e004      	b.n	8009eca <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ec4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009ec6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3740      	adds	r7, #64	; 0x40
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b092      	sub	sp, #72	; 0x48
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	60f8      	str	r0, [r7, #12]
 8009eda:	60b9      	str	r1, [r7, #8]
 8009edc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009ede:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009ee2:	f107 030c 	add.w	r3, r7, #12
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fe fd65 	bl	80089b8 <find_volume>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009ef4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f040 8099 	bne.w	800a030 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	699a      	ldr	r2, [r3, #24]
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	3b02      	subs	r3, #2
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d804      	bhi.n	8009f1c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	699a      	ldr	r2, [r3, #24]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	601a      	str	r2, [r3, #0]
 8009f1a:	e089      	b.n	800a030 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d128      	bne.n	8009f7a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009f28:	2302      	movs	r3, #2
 8009f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009f30:	f107 0314 	add.w	r3, r7, #20
 8009f34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fd f8d7 	bl	80070ea <get_fat>
 8009f3c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f44:	d103      	bne.n	8009f4e <f_getfree+0x7c>
 8009f46:	2301      	movs	r3, #1
 8009f48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f4c:	e063      	b.n	800a016 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d103      	bne.n	8009f5c <f_getfree+0x8a>
 8009f54:	2302      	movs	r3, #2
 8009f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f5a:	e05c      	b.n	800a016 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d102      	bne.n	8009f68 <f_getfree+0x96>
 8009f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f64:	3301      	adds	r3, #1
 8009f66:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d3db      	bcc.n	8009f30 <f_getfree+0x5e>
 8009f78:	e04d      	b.n	800a016 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f84:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	637b      	str	r3, [r7, #52]	; 0x34
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d113      	bne.n	8009fbc <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	63ba      	str	r2, [r7, #56]	; 0x38
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	f7fc ffe7 	bl	8006f70 <move_window>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009fa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d131      	bne.n	800a014 <f_getfree+0x142>
							p = fs->win;
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	3338      	adds	r3, #56	; 0x38
 8009fb4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	899b      	ldrh	r3, [r3, #12]
 8009fba:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d10f      	bne.n	8009fe4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fc6:	f7fc fd23 	bl	8006a10 <ld_word>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d102      	bne.n	8009fd6 <f_getfree+0x104>
 8009fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	3302      	adds	r3, #2
 8009fda:	633b      	str	r3, [r7, #48]	; 0x30
 8009fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fde:	3b02      	subs	r3, #2
 8009fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8009fe2:	e010      	b.n	800a006 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fe6:	f7fc fd2b 	bl	8006a40 <ld_dword>
 8009fea:	4603      	mov	r3, r0
 8009fec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d102      	bne.n	8009ffa <f_getfree+0x128>
 8009ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	633b      	str	r3, [r7, #48]	; 0x30
 800a000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a002:	3b04      	subs	r3, #4
 800a004:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a008:	3b01      	subs	r3, #1
 800a00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1bd      	bne.n	8009f8e <f_getfree+0xbc>
 800a012:	e000      	b.n	800a016 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a014:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a01a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a020:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	791a      	ldrb	r2, [r3, #4]
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	f042 0201 	orr.w	r2, r2, #1
 800a02c:	b2d2      	uxtb	r2, r2
 800a02e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a030:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a034:	4618      	mov	r0, r3
 800a036:	3748      	adds	r7, #72	; 0x48
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b0a0      	sub	sp, #128	; 0x80
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a048:	f107 010c 	add.w	r1, r7, #12
 800a04c:	1d3b      	adds	r3, r7, #4
 800a04e:	2202      	movs	r2, #2
 800a050:	4618      	mov	r0, r3
 800a052:	f7fe fcb1 	bl	80089b8 <find_volume>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800a060:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a064:	2b00      	cmp	r3, #0
 800a066:	f040 808e 	bne.w	800a186 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fb90 	bl	8008798 <follow_path>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a07e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a082:	2b00      	cmp	r3, #0
 800a084:	d108      	bne.n	800a098 <f_unlink+0x5c>
 800a086:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a08a:	2102      	movs	r1, #2
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fc fdbf 	bl	8006c10 <chk_lock>
 800a092:	4603      	mov	r3, r0
 800a094:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a098:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d172      	bne.n	800a186 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a0a0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800a0a4:	b25b      	sxtb	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	da03      	bge.n	800a0b2 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a0aa:	2306      	movs	r3, #6
 800a0ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a0b0:	e008      	b.n	800a0c4 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a0b2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a0be:	2307      	movs	r3, #7
 800a0c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800a0c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d134      	bne.n	800a136 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fd fcd4 	bl	8007a80 <ld_clust>
 800a0d8:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a0da:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a0de:	f003 0310 	and.w	r3, r3, #16
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d027      	beq.n	800a136 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800a0ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ec:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a0ee:	f107 0310 	add.w	r3, r7, #16
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fd fb1d 	bl	8007734 <dir_sdi>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800a100:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a104:	2b00      	cmp	r3, #0
 800a106:	d116      	bne.n	800a136 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800a108:	f107 0310 	add.w	r3, r7, #16
 800a10c:	2100      	movs	r1, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fd fee1 	bl	8007ed6 <dir_read>
 800a114:	4603      	mov	r3, r0
 800a116:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800a11a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d102      	bne.n	800a128 <f_unlink+0xec>
 800a122:	2307      	movs	r3, #7
 800a124:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800a128:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d102      	bne.n	800a136 <f_unlink+0xfa>
 800a130:	2300      	movs	r3, #0
 800a132:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800a136:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d123      	bne.n	800a186 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a13e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe f926 	bl	8008394 <dir_remove>
 800a148:	4603      	mov	r3, r0
 800a14a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a14e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10c      	bne.n	800a170 <f_unlink+0x134>
 800a156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a15c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a160:	2200      	movs	r2, #0
 800a162:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a164:	4618      	mov	r0, r3
 800a166:	f7fd f9b0 	bl	80074ca <remove_chain>
 800a16a:	4603      	mov	r3, r0
 800a16c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a170:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a174:	2b00      	cmp	r3, #0
 800a176:	d106      	bne.n	800a186 <f_unlink+0x14a>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fc ff26 	bl	8006fcc <sync_fs>
 800a180:	4603      	mov	r3, r0
 800a182:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a186:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3780      	adds	r7, #128	; 0x80
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b088      	sub	sp, #32
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a1a6:	e01b      	b.n	800a1e0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a1a8:	f107 0310 	add.w	r3, r7, #16
 800a1ac:	f107 0114 	add.w	r1, r7, #20
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7ff f8ce 	bl	8009354 <f_read>
		if (rc != 1) break;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d116      	bne.n	800a1ec <f_gets+0x5a>
		c = s[0];
 800a1be:	7d3b      	ldrb	r3, [r7, #20]
 800a1c0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
 800a1c4:	2b0d      	cmp	r3, #13
 800a1c6:	d100      	bne.n	800a1ca <f_gets+0x38>
 800a1c8:	e00a      	b.n	800a1e0 <f_gets+0x4e>
		*p++ = c;
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	1c5a      	adds	r2, r3, #1
 800a1ce:	61ba      	str	r2, [r7, #24]
 800a1d0:	7dfa      	ldrb	r2, [r7, #23]
 800a1d2:	701a      	strb	r2, [r3, #0]
		n++;
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a1da:	7dfb      	ldrb	r3, [r7, #23]
 800a1dc:	2b0a      	cmp	r3, #10
 800a1de:	d007      	beq.n	800a1f0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	69fa      	ldr	r2, [r7, #28]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	dbde      	blt.n	800a1a8 <f_gets+0x16>
 800a1ea:	e002      	b.n	800a1f2 <f_gets+0x60>
		if (rc != 1) break;
 800a1ec:	bf00      	nop
 800a1ee:	e000      	b.n	800a1f2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a1f0:	bf00      	nop
	}
	*p = 0;
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <f_gets+0x70>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	e000      	b.n	800a204 <f_gets+0x72>
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3720      	adds	r7, #32
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	2b0a      	cmp	r3, #10
 800a21c:	d103      	bne.n	800a226 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a21e:	210d      	movs	r1, #13
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff fff3 	bl	800a20c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	db25      	blt.n	800a27e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	60fa      	str	r2, [r7, #12]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	4413      	add	r3, r2
 800a23c:	78fa      	ldrb	r2, [r7, #3]
 800a23e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b3c      	cmp	r3, #60	; 0x3c
 800a244:	dd12      	ble.n	800a26c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f103 010c 	add.w	r1, r3, #12
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	f107 0308 	add.w	r3, r7, #8
 800a256:	f7ff f9dc 	bl	8009612 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d101      	bne.n	800a266 <putc_bfd+0x5a>
 800a262:	2300      	movs	r3, #0
 800a264:	e001      	b.n	800a26a <putc_bfd+0x5e>
 800a266:	f04f 33ff 	mov.w	r3, #4294967295
 800a26a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	1c5a      	adds	r2, r3, #1
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	609a      	str	r2, [r3, #8]
 800a27c:	e000      	b.n	800a280 <putc_bfd+0x74>
	if (i < 0) return;
 800a27e:	bf00      	nop
}
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	db16      	blt.n	800a2c4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6818      	ldr	r0, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f103 010c 	add.w	r1, r3, #12
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	f107 030c 	add.w	r3, r7, #12
 800a2aa:	f7ff f9b2 	bl	8009612 <f_write>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d107      	bne.n	800a2c4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d102      	bne.n	800a2c4 <putc_flush+0x3e>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	e001      	b.n	800a2c8 <putc_flush+0x42>
	return EOF;
 800a2c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	605a      	str	r2, [r3, #4]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	609a      	str	r2, [r3, #8]
}
 800a2ee:	bf00      	nop
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b096      	sub	sp, #88	; 0x58
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a304:	f107 030c 	add.w	r3, r7, #12
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff ffe0 	bl	800a2d0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a310:	e009      	b.n	800a326 <f_puts+0x2c>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	f107 030c 	add.w	r3, r7, #12
 800a31e:	4611      	mov	r1, r2
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff ff73 	bl	800a20c <putc_bfd>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1f1      	bne.n	800a312 <f_puts+0x18>
	return putc_flush(&pb);
 800a32e:	f107 030c 	add.w	r3, r7, #12
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff ffa7 	bl	800a286 <putc_flush>
 800a338:	4603      	mov	r3, r0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3758      	adds	r7, #88	; 0x58
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	4613      	mov	r3, r2
 800a350:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a352:	2301      	movs	r3, #1
 800a354:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a35a:	4b1f      	ldr	r3, [pc, #124]	; (800a3d8 <FATFS_LinkDriverEx+0x94>)
 800a35c:	7a5b      	ldrb	r3, [r3, #9]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b00      	cmp	r3, #0
 800a362:	d131      	bne.n	800a3c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a364:	4b1c      	ldr	r3, [pc, #112]	; (800a3d8 <FATFS_LinkDriverEx+0x94>)
 800a366:	7a5b      	ldrb	r3, [r3, #9]
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	461a      	mov	r2, r3
 800a36c:	4b1a      	ldr	r3, [pc, #104]	; (800a3d8 <FATFS_LinkDriverEx+0x94>)
 800a36e:	2100      	movs	r1, #0
 800a370:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a372:	4b19      	ldr	r3, [pc, #100]	; (800a3d8 <FATFS_LinkDriverEx+0x94>)
 800a374:	7a5b      	ldrb	r3, [r3, #9]
 800a376:	b2db      	uxtb	r3, r3
 800a378:	4a17      	ldr	r2, [pc, #92]	; (800a3d8 <FATFS_LinkDriverEx+0x94>)
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a382:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <FATFS_LinkDriverEx+0x94>)
 800a384:	7a5b      	ldrb	r3, [r3, #9]
 800a386:	b2db      	uxtb	r3, r3
 800a388:	461a      	mov	r2, r3
 800a38a:	4b13      	ldr	r3, [pc, #76]	; (800a3d8 <FATFS_LinkDriverEx+0x94>)
 800a38c:	4413      	add	r3, r2
 800a38e:	79fa      	ldrb	r2, [r7, #7]
 800a390:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a392:	4b11      	ldr	r3, [pc, #68]	; (800a3d8 <FATFS_LinkDriverEx+0x94>)
 800a394:	7a5b      	ldrb	r3, [r3, #9]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	b2d1      	uxtb	r1, r2
 800a39c:	4a0e      	ldr	r2, [pc, #56]	; (800a3d8 <FATFS_LinkDriverEx+0x94>)
 800a39e:	7251      	strb	r1, [r2, #9]
 800a3a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3a2:	7dbb      	ldrb	r3, [r7, #22]
 800a3a4:	3330      	adds	r3, #48	; 0x30
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	223a      	movs	r2, #58	; 0x3a
 800a3b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	222f      	movs	r2, #47	; 0x2f
 800a3ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	3303      	adds	r3, #3
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a3c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	20000ed0 	.word	0x20000ed0

0800a3dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7ff ffaa 	bl	800a344 <FATFS_LinkDriverEx>
 800a3f0:	4603      	mov	r3, r0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a408:	88fb      	ldrh	r3, [r7, #6]
 800a40a:	2b7f      	cmp	r3, #127	; 0x7f
 800a40c:	d802      	bhi.n	800a414 <ff_convert+0x18>
		c = chr;
 800a40e:	88fb      	ldrh	r3, [r7, #6]
 800a410:	81fb      	strh	r3, [r7, #14]
 800a412:	e025      	b.n	800a460 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a41a:	88fb      	ldrh	r3, [r7, #6]
 800a41c:	2bff      	cmp	r3, #255	; 0xff
 800a41e:	d805      	bhi.n	800a42c <ff_convert+0x30>
 800a420:	88fb      	ldrh	r3, [r7, #6]
 800a422:	3b80      	subs	r3, #128	; 0x80
 800a424:	4a12      	ldr	r2, [pc, #72]	; (800a470 <ff_convert+0x74>)
 800a426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a42a:	e000      	b.n	800a42e <ff_convert+0x32>
 800a42c:	2300      	movs	r3, #0
 800a42e:	81fb      	strh	r3, [r7, #14]
 800a430:	e016      	b.n	800a460 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a432:	2300      	movs	r3, #0
 800a434:	81fb      	strh	r3, [r7, #14]
 800a436:	e009      	b.n	800a44c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a438:	89fb      	ldrh	r3, [r7, #14]
 800a43a:	4a0d      	ldr	r2, [pc, #52]	; (800a470 <ff_convert+0x74>)
 800a43c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a440:	88fa      	ldrh	r2, [r7, #6]
 800a442:	429a      	cmp	r2, r3
 800a444:	d006      	beq.n	800a454 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a446:	89fb      	ldrh	r3, [r7, #14]
 800a448:	3301      	adds	r3, #1
 800a44a:	81fb      	strh	r3, [r7, #14]
 800a44c:	89fb      	ldrh	r3, [r7, #14]
 800a44e:	2b7f      	cmp	r3, #127	; 0x7f
 800a450:	d9f2      	bls.n	800a438 <ff_convert+0x3c>
 800a452:	e000      	b.n	800a456 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a454:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a456:	89fb      	ldrh	r3, [r7, #14]
 800a458:	3380      	adds	r3, #128	; 0x80
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a460:	89fb      	ldrh	r3, [r7, #14]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	0800e350 	.word	0x0800e350

0800a474 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a474:	b480      	push	{r7}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a47e:	88fb      	ldrh	r3, [r7, #6]
 800a480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a484:	d201      	bcs.n	800a48a <ff_wtoupper+0x16>
 800a486:	4b3e      	ldr	r3, [pc, #248]	; (800a580 <ff_wtoupper+0x10c>)
 800a488:	e000      	b.n	800a48c <ff_wtoupper+0x18>
 800a48a:	4b3e      	ldr	r3, [pc, #248]	; (800a584 <ff_wtoupper+0x110>)
 800a48c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	1c9a      	adds	r2, r3, #2
 800a492:	617a      	str	r2, [r7, #20]
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a498:	8a7b      	ldrh	r3, [r7, #18]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d068      	beq.n	800a570 <ff_wtoupper+0xfc>
 800a49e:	88fa      	ldrh	r2, [r7, #6]
 800a4a0:	8a7b      	ldrh	r3, [r7, #18]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d364      	bcc.n	800a570 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	1c9a      	adds	r2, r3, #2
 800a4aa:	617a      	str	r2, [r7, #20]
 800a4ac:	881b      	ldrh	r3, [r3, #0]
 800a4ae:	823b      	strh	r3, [r7, #16]
 800a4b0:	8a3b      	ldrh	r3, [r7, #16]
 800a4b2:	0a1b      	lsrs	r3, r3, #8
 800a4b4:	81fb      	strh	r3, [r7, #14]
 800a4b6:	8a3b      	ldrh	r3, [r7, #16]
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a4bc:	88fa      	ldrh	r2, [r7, #6]
 800a4be:	8a79      	ldrh	r1, [r7, #18]
 800a4c0:	8a3b      	ldrh	r3, [r7, #16]
 800a4c2:	440b      	add	r3, r1
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	da49      	bge.n	800a55c <ff_wtoupper+0xe8>
			switch (cmd) {
 800a4c8:	89fb      	ldrh	r3, [r7, #14]
 800a4ca:	2b08      	cmp	r3, #8
 800a4cc:	d84f      	bhi.n	800a56e <ff_wtoupper+0xfa>
 800a4ce:	a201      	add	r2, pc, #4	; (adr r2, 800a4d4 <ff_wtoupper+0x60>)
 800a4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d4:	0800a4f9 	.word	0x0800a4f9
 800a4d8:	0800a50b 	.word	0x0800a50b
 800a4dc:	0800a521 	.word	0x0800a521
 800a4e0:	0800a529 	.word	0x0800a529
 800a4e4:	0800a531 	.word	0x0800a531
 800a4e8:	0800a539 	.word	0x0800a539
 800a4ec:	0800a541 	.word	0x0800a541
 800a4f0:	0800a549 	.word	0x0800a549
 800a4f4:	0800a551 	.word	0x0800a551
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a4f8:	88fa      	ldrh	r2, [r7, #6]
 800a4fa:	8a7b      	ldrh	r3, [r7, #18]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	005b      	lsls	r3, r3, #1
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	4413      	add	r3, r2
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	80fb      	strh	r3, [r7, #6]
 800a508:	e027      	b.n	800a55a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a50a:	88fa      	ldrh	r2, [r7, #6]
 800a50c:	8a7b      	ldrh	r3, [r7, #18]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	b29b      	uxth	r3, r3
 800a512:	f003 0301 	and.w	r3, r3, #1
 800a516:	b29b      	uxth	r3, r3
 800a518:	88fa      	ldrh	r2, [r7, #6]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	80fb      	strh	r3, [r7, #6]
 800a51e:	e01c      	b.n	800a55a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a520:	88fb      	ldrh	r3, [r7, #6]
 800a522:	3b10      	subs	r3, #16
 800a524:	80fb      	strh	r3, [r7, #6]
 800a526:	e018      	b.n	800a55a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a528:	88fb      	ldrh	r3, [r7, #6]
 800a52a:	3b20      	subs	r3, #32
 800a52c:	80fb      	strh	r3, [r7, #6]
 800a52e:	e014      	b.n	800a55a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a530:	88fb      	ldrh	r3, [r7, #6]
 800a532:	3b30      	subs	r3, #48	; 0x30
 800a534:	80fb      	strh	r3, [r7, #6]
 800a536:	e010      	b.n	800a55a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a538:	88fb      	ldrh	r3, [r7, #6]
 800a53a:	3b1a      	subs	r3, #26
 800a53c:	80fb      	strh	r3, [r7, #6]
 800a53e:	e00c      	b.n	800a55a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a540:	88fb      	ldrh	r3, [r7, #6]
 800a542:	3308      	adds	r3, #8
 800a544:	80fb      	strh	r3, [r7, #6]
 800a546:	e008      	b.n	800a55a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a548:	88fb      	ldrh	r3, [r7, #6]
 800a54a:	3b50      	subs	r3, #80	; 0x50
 800a54c:	80fb      	strh	r3, [r7, #6]
 800a54e:	e004      	b.n	800a55a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a550:	88fb      	ldrh	r3, [r7, #6]
 800a552:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a556:	80fb      	strh	r3, [r7, #6]
 800a558:	bf00      	nop
			}
			break;
 800a55a:	e008      	b.n	800a56e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a55c:	89fb      	ldrh	r3, [r7, #14]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d195      	bne.n	800a48e <ff_wtoupper+0x1a>
 800a562:	8a3b      	ldrh	r3, [r7, #16]
 800a564:	005b      	lsls	r3, r3, #1
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	4413      	add	r3, r2
 800a56a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a56c:	e78f      	b.n	800a48e <ff_wtoupper+0x1a>
			break;
 800a56e:	bf00      	nop
	}

	return chr;
 800a570:	88fb      	ldrh	r3, [r7, #6]
}
 800a572:	4618      	mov	r0, r3
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	0800e450 	.word	0x0800e450
 800a584:	0800e644 	.word	0x0800e644

0800a588 <__errno>:
 800a588:	4b01      	ldr	r3, [pc, #4]	; (800a590 <__errno+0x8>)
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	20000024 	.word	0x20000024

0800a594 <__libc_init_array>:
 800a594:	b570      	push	{r4, r5, r6, lr}
 800a596:	4d0d      	ldr	r5, [pc, #52]	; (800a5cc <__libc_init_array+0x38>)
 800a598:	4c0d      	ldr	r4, [pc, #52]	; (800a5d0 <__libc_init_array+0x3c>)
 800a59a:	1b64      	subs	r4, r4, r5
 800a59c:	10a4      	asrs	r4, r4, #2
 800a59e:	2600      	movs	r6, #0
 800a5a0:	42a6      	cmp	r6, r4
 800a5a2:	d109      	bne.n	800a5b8 <__libc_init_array+0x24>
 800a5a4:	4d0b      	ldr	r5, [pc, #44]	; (800a5d4 <__libc_init_array+0x40>)
 800a5a6:	4c0c      	ldr	r4, [pc, #48]	; (800a5d8 <__libc_init_array+0x44>)
 800a5a8:	f002 fdc4 	bl	800d134 <_init>
 800a5ac:	1b64      	subs	r4, r4, r5
 800a5ae:	10a4      	asrs	r4, r4, #2
 800a5b0:	2600      	movs	r6, #0
 800a5b2:	42a6      	cmp	r6, r4
 800a5b4:	d105      	bne.n	800a5c2 <__libc_init_array+0x2e>
 800a5b6:	bd70      	pop	{r4, r5, r6, pc}
 800a5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5bc:	4798      	blx	r3
 800a5be:	3601      	adds	r6, #1
 800a5c0:	e7ee      	b.n	800a5a0 <__libc_init_array+0xc>
 800a5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c6:	4798      	blx	r3
 800a5c8:	3601      	adds	r6, #1
 800a5ca:	e7f2      	b.n	800a5b2 <__libc_init_array+0x1e>
 800a5cc:	0800eae4 	.word	0x0800eae4
 800a5d0:	0800eae4 	.word	0x0800eae4
 800a5d4:	0800eae4 	.word	0x0800eae4
 800a5d8:	0800eae8 	.word	0x0800eae8

0800a5dc <memset>:
 800a5dc:	4402      	add	r2, r0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d100      	bne.n	800a5e6 <memset+0xa>
 800a5e4:	4770      	bx	lr
 800a5e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ea:	e7f9      	b.n	800a5e0 <memset+0x4>

0800a5ec <__cvt>:
 800a5ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f0:	ec55 4b10 	vmov	r4, r5, d0
 800a5f4:	2d00      	cmp	r5, #0
 800a5f6:	460e      	mov	r6, r1
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	462b      	mov	r3, r5
 800a5fc:	bfbb      	ittet	lt
 800a5fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a602:	461d      	movlt	r5, r3
 800a604:	2300      	movge	r3, #0
 800a606:	232d      	movlt	r3, #45	; 0x2d
 800a608:	700b      	strb	r3, [r1, #0]
 800a60a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a60c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a610:	4691      	mov	r9, r2
 800a612:	f023 0820 	bic.w	r8, r3, #32
 800a616:	bfbc      	itt	lt
 800a618:	4622      	movlt	r2, r4
 800a61a:	4614      	movlt	r4, r2
 800a61c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a620:	d005      	beq.n	800a62e <__cvt+0x42>
 800a622:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a626:	d100      	bne.n	800a62a <__cvt+0x3e>
 800a628:	3601      	adds	r6, #1
 800a62a:	2102      	movs	r1, #2
 800a62c:	e000      	b.n	800a630 <__cvt+0x44>
 800a62e:	2103      	movs	r1, #3
 800a630:	ab03      	add	r3, sp, #12
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	ab02      	add	r3, sp, #8
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	ec45 4b10 	vmov	d0, r4, r5
 800a63c:	4653      	mov	r3, sl
 800a63e:	4632      	mov	r2, r6
 800a640:	f000 fe1a 	bl	800b278 <_dtoa_r>
 800a644:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a648:	4607      	mov	r7, r0
 800a64a:	d102      	bne.n	800a652 <__cvt+0x66>
 800a64c:	f019 0f01 	tst.w	r9, #1
 800a650:	d022      	beq.n	800a698 <__cvt+0xac>
 800a652:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a656:	eb07 0906 	add.w	r9, r7, r6
 800a65a:	d110      	bne.n	800a67e <__cvt+0x92>
 800a65c:	783b      	ldrb	r3, [r7, #0]
 800a65e:	2b30      	cmp	r3, #48	; 0x30
 800a660:	d10a      	bne.n	800a678 <__cvt+0x8c>
 800a662:	2200      	movs	r2, #0
 800a664:	2300      	movs	r3, #0
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f6 fa45 	bl	8000af8 <__aeabi_dcmpeq>
 800a66e:	b918      	cbnz	r0, 800a678 <__cvt+0x8c>
 800a670:	f1c6 0601 	rsb	r6, r6, #1
 800a674:	f8ca 6000 	str.w	r6, [sl]
 800a678:	f8da 3000 	ldr.w	r3, [sl]
 800a67c:	4499      	add	r9, r3
 800a67e:	2200      	movs	r2, #0
 800a680:	2300      	movs	r3, #0
 800a682:	4620      	mov	r0, r4
 800a684:	4629      	mov	r1, r5
 800a686:	f7f6 fa37 	bl	8000af8 <__aeabi_dcmpeq>
 800a68a:	b108      	cbz	r0, 800a690 <__cvt+0xa4>
 800a68c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a690:	2230      	movs	r2, #48	; 0x30
 800a692:	9b03      	ldr	r3, [sp, #12]
 800a694:	454b      	cmp	r3, r9
 800a696:	d307      	bcc.n	800a6a8 <__cvt+0xbc>
 800a698:	9b03      	ldr	r3, [sp, #12]
 800a69a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a69c:	1bdb      	subs	r3, r3, r7
 800a69e:	4638      	mov	r0, r7
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	b004      	add	sp, #16
 800a6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a8:	1c59      	adds	r1, r3, #1
 800a6aa:	9103      	str	r1, [sp, #12]
 800a6ac:	701a      	strb	r2, [r3, #0]
 800a6ae:	e7f0      	b.n	800a692 <__cvt+0xa6>

0800a6b0 <__exponent>:
 800a6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2900      	cmp	r1, #0
 800a6b6:	bfb8      	it	lt
 800a6b8:	4249      	neglt	r1, r1
 800a6ba:	f803 2b02 	strb.w	r2, [r3], #2
 800a6be:	bfb4      	ite	lt
 800a6c0:	222d      	movlt	r2, #45	; 0x2d
 800a6c2:	222b      	movge	r2, #43	; 0x2b
 800a6c4:	2909      	cmp	r1, #9
 800a6c6:	7042      	strb	r2, [r0, #1]
 800a6c8:	dd2a      	ble.n	800a720 <__exponent+0x70>
 800a6ca:	f10d 0407 	add.w	r4, sp, #7
 800a6ce:	46a4      	mov	ip, r4
 800a6d0:	270a      	movs	r7, #10
 800a6d2:	46a6      	mov	lr, r4
 800a6d4:	460a      	mov	r2, r1
 800a6d6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a6da:	fb07 1516 	mls	r5, r7, r6, r1
 800a6de:	3530      	adds	r5, #48	; 0x30
 800a6e0:	2a63      	cmp	r2, #99	; 0x63
 800a6e2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a6e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	dcf1      	bgt.n	800a6d2 <__exponent+0x22>
 800a6ee:	3130      	adds	r1, #48	; 0x30
 800a6f0:	f1ae 0502 	sub.w	r5, lr, #2
 800a6f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a6f8:	1c44      	adds	r4, r0, #1
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	4561      	cmp	r1, ip
 800a6fe:	d30a      	bcc.n	800a716 <__exponent+0x66>
 800a700:	f10d 0209 	add.w	r2, sp, #9
 800a704:	eba2 020e 	sub.w	r2, r2, lr
 800a708:	4565      	cmp	r5, ip
 800a70a:	bf88      	it	hi
 800a70c:	2200      	movhi	r2, #0
 800a70e:	4413      	add	r3, r2
 800a710:	1a18      	subs	r0, r3, r0
 800a712:	b003      	add	sp, #12
 800a714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a71a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a71e:	e7ed      	b.n	800a6fc <__exponent+0x4c>
 800a720:	2330      	movs	r3, #48	; 0x30
 800a722:	3130      	adds	r1, #48	; 0x30
 800a724:	7083      	strb	r3, [r0, #2]
 800a726:	70c1      	strb	r1, [r0, #3]
 800a728:	1d03      	adds	r3, r0, #4
 800a72a:	e7f1      	b.n	800a710 <__exponent+0x60>

0800a72c <_printf_float>:
 800a72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a730:	ed2d 8b02 	vpush	{d8}
 800a734:	b08d      	sub	sp, #52	; 0x34
 800a736:	460c      	mov	r4, r1
 800a738:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a73c:	4616      	mov	r6, r2
 800a73e:	461f      	mov	r7, r3
 800a740:	4605      	mov	r5, r0
 800a742:	f001 fd3f 	bl	800c1c4 <_localeconv_r>
 800a746:	f8d0 a000 	ldr.w	sl, [r0]
 800a74a:	4650      	mov	r0, sl
 800a74c:	f7f5 fd52 	bl	80001f4 <strlen>
 800a750:	2300      	movs	r3, #0
 800a752:	930a      	str	r3, [sp, #40]	; 0x28
 800a754:	6823      	ldr	r3, [r4, #0]
 800a756:	9305      	str	r3, [sp, #20]
 800a758:	f8d8 3000 	ldr.w	r3, [r8]
 800a75c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a760:	3307      	adds	r3, #7
 800a762:	f023 0307 	bic.w	r3, r3, #7
 800a766:	f103 0208 	add.w	r2, r3, #8
 800a76a:	f8c8 2000 	str.w	r2, [r8]
 800a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a772:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a776:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a77a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a77e:	9307      	str	r3, [sp, #28]
 800a780:	f8cd 8018 	str.w	r8, [sp, #24]
 800a784:	ee08 0a10 	vmov	s16, r0
 800a788:	4b9f      	ldr	r3, [pc, #636]	; (800aa08 <_printf_float+0x2dc>)
 800a78a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a78e:	f04f 32ff 	mov.w	r2, #4294967295
 800a792:	f7f6 f9e3 	bl	8000b5c <__aeabi_dcmpun>
 800a796:	bb88      	cbnz	r0, 800a7fc <_printf_float+0xd0>
 800a798:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a79c:	4b9a      	ldr	r3, [pc, #616]	; (800aa08 <_printf_float+0x2dc>)
 800a79e:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a2:	f7f6 f9bd 	bl	8000b20 <__aeabi_dcmple>
 800a7a6:	bb48      	cbnz	r0, 800a7fc <_printf_float+0xd0>
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	f7f6 f9ac 	bl	8000b0c <__aeabi_dcmplt>
 800a7b4:	b110      	cbz	r0, 800a7bc <_printf_float+0x90>
 800a7b6:	232d      	movs	r3, #45	; 0x2d
 800a7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7bc:	4b93      	ldr	r3, [pc, #588]	; (800aa0c <_printf_float+0x2e0>)
 800a7be:	4894      	ldr	r0, [pc, #592]	; (800aa10 <_printf_float+0x2e4>)
 800a7c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a7c4:	bf94      	ite	ls
 800a7c6:	4698      	movls	r8, r3
 800a7c8:	4680      	movhi	r8, r0
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	6123      	str	r3, [r4, #16]
 800a7ce:	9b05      	ldr	r3, [sp, #20]
 800a7d0:	f023 0204 	bic.w	r2, r3, #4
 800a7d4:	6022      	str	r2, [r4, #0]
 800a7d6:	f04f 0900 	mov.w	r9, #0
 800a7da:	9700      	str	r7, [sp, #0]
 800a7dc:	4633      	mov	r3, r6
 800a7de:	aa0b      	add	r2, sp, #44	; 0x2c
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f000 f9d8 	bl	800ab98 <_printf_common>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	f040 8090 	bne.w	800a90e <_printf_float+0x1e2>
 800a7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f2:	b00d      	add	sp, #52	; 0x34
 800a7f4:	ecbd 8b02 	vpop	{d8}
 800a7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7fc:	4642      	mov	r2, r8
 800a7fe:	464b      	mov	r3, r9
 800a800:	4640      	mov	r0, r8
 800a802:	4649      	mov	r1, r9
 800a804:	f7f6 f9aa 	bl	8000b5c <__aeabi_dcmpun>
 800a808:	b140      	cbz	r0, 800a81c <_printf_float+0xf0>
 800a80a:	464b      	mov	r3, r9
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	bfbc      	itt	lt
 800a810:	232d      	movlt	r3, #45	; 0x2d
 800a812:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a816:	487f      	ldr	r0, [pc, #508]	; (800aa14 <_printf_float+0x2e8>)
 800a818:	4b7f      	ldr	r3, [pc, #508]	; (800aa18 <_printf_float+0x2ec>)
 800a81a:	e7d1      	b.n	800a7c0 <_printf_float+0x94>
 800a81c:	6863      	ldr	r3, [r4, #4]
 800a81e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a822:	9206      	str	r2, [sp, #24]
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	d13f      	bne.n	800a8a8 <_printf_float+0x17c>
 800a828:	2306      	movs	r3, #6
 800a82a:	6063      	str	r3, [r4, #4]
 800a82c:	9b05      	ldr	r3, [sp, #20]
 800a82e:	6861      	ldr	r1, [r4, #4]
 800a830:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a834:	2300      	movs	r3, #0
 800a836:	9303      	str	r3, [sp, #12]
 800a838:	ab0a      	add	r3, sp, #40	; 0x28
 800a83a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a83e:	ab09      	add	r3, sp, #36	; 0x24
 800a840:	ec49 8b10 	vmov	d0, r8, r9
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	6022      	str	r2, [r4, #0]
 800a848:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a84c:	4628      	mov	r0, r5
 800a84e:	f7ff fecd 	bl	800a5ec <__cvt>
 800a852:	9b06      	ldr	r3, [sp, #24]
 800a854:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a856:	2b47      	cmp	r3, #71	; 0x47
 800a858:	4680      	mov	r8, r0
 800a85a:	d108      	bne.n	800a86e <_printf_float+0x142>
 800a85c:	1cc8      	adds	r0, r1, #3
 800a85e:	db02      	blt.n	800a866 <_printf_float+0x13a>
 800a860:	6863      	ldr	r3, [r4, #4]
 800a862:	4299      	cmp	r1, r3
 800a864:	dd41      	ble.n	800a8ea <_printf_float+0x1be>
 800a866:	f1ab 0b02 	sub.w	fp, fp, #2
 800a86a:	fa5f fb8b 	uxtb.w	fp, fp
 800a86e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a872:	d820      	bhi.n	800a8b6 <_printf_float+0x18a>
 800a874:	3901      	subs	r1, #1
 800a876:	465a      	mov	r2, fp
 800a878:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a87c:	9109      	str	r1, [sp, #36]	; 0x24
 800a87e:	f7ff ff17 	bl	800a6b0 <__exponent>
 800a882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a884:	1813      	adds	r3, r2, r0
 800a886:	2a01      	cmp	r2, #1
 800a888:	4681      	mov	r9, r0
 800a88a:	6123      	str	r3, [r4, #16]
 800a88c:	dc02      	bgt.n	800a894 <_printf_float+0x168>
 800a88e:	6822      	ldr	r2, [r4, #0]
 800a890:	07d2      	lsls	r2, r2, #31
 800a892:	d501      	bpl.n	800a898 <_printf_float+0x16c>
 800a894:	3301      	adds	r3, #1
 800a896:	6123      	str	r3, [r4, #16]
 800a898:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d09c      	beq.n	800a7da <_printf_float+0xae>
 800a8a0:	232d      	movs	r3, #45	; 0x2d
 800a8a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8a6:	e798      	b.n	800a7da <_printf_float+0xae>
 800a8a8:	9a06      	ldr	r2, [sp, #24]
 800a8aa:	2a47      	cmp	r2, #71	; 0x47
 800a8ac:	d1be      	bne.n	800a82c <_printf_float+0x100>
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1bc      	bne.n	800a82c <_printf_float+0x100>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e7b9      	b.n	800a82a <_printf_float+0xfe>
 800a8b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a8ba:	d118      	bne.n	800a8ee <_printf_float+0x1c2>
 800a8bc:	2900      	cmp	r1, #0
 800a8be:	6863      	ldr	r3, [r4, #4]
 800a8c0:	dd0b      	ble.n	800a8da <_printf_float+0x1ae>
 800a8c2:	6121      	str	r1, [r4, #16]
 800a8c4:	b913      	cbnz	r3, 800a8cc <_printf_float+0x1a0>
 800a8c6:	6822      	ldr	r2, [r4, #0]
 800a8c8:	07d0      	lsls	r0, r2, #31
 800a8ca:	d502      	bpl.n	800a8d2 <_printf_float+0x1a6>
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	440b      	add	r3, r1
 800a8d0:	6123      	str	r3, [r4, #16]
 800a8d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a8d4:	f04f 0900 	mov.w	r9, #0
 800a8d8:	e7de      	b.n	800a898 <_printf_float+0x16c>
 800a8da:	b913      	cbnz	r3, 800a8e2 <_printf_float+0x1b6>
 800a8dc:	6822      	ldr	r2, [r4, #0]
 800a8de:	07d2      	lsls	r2, r2, #31
 800a8e0:	d501      	bpl.n	800a8e6 <_printf_float+0x1ba>
 800a8e2:	3302      	adds	r3, #2
 800a8e4:	e7f4      	b.n	800a8d0 <_printf_float+0x1a4>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e7f2      	b.n	800a8d0 <_printf_float+0x1a4>
 800a8ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f0:	4299      	cmp	r1, r3
 800a8f2:	db05      	blt.n	800a900 <_printf_float+0x1d4>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	6121      	str	r1, [r4, #16]
 800a8f8:	07d8      	lsls	r0, r3, #31
 800a8fa:	d5ea      	bpl.n	800a8d2 <_printf_float+0x1a6>
 800a8fc:	1c4b      	adds	r3, r1, #1
 800a8fe:	e7e7      	b.n	800a8d0 <_printf_float+0x1a4>
 800a900:	2900      	cmp	r1, #0
 800a902:	bfd4      	ite	le
 800a904:	f1c1 0202 	rsble	r2, r1, #2
 800a908:	2201      	movgt	r2, #1
 800a90a:	4413      	add	r3, r2
 800a90c:	e7e0      	b.n	800a8d0 <_printf_float+0x1a4>
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	055a      	lsls	r2, r3, #21
 800a912:	d407      	bmi.n	800a924 <_printf_float+0x1f8>
 800a914:	6923      	ldr	r3, [r4, #16]
 800a916:	4642      	mov	r2, r8
 800a918:	4631      	mov	r1, r6
 800a91a:	4628      	mov	r0, r5
 800a91c:	47b8      	blx	r7
 800a91e:	3001      	adds	r0, #1
 800a920:	d12c      	bne.n	800a97c <_printf_float+0x250>
 800a922:	e764      	b.n	800a7ee <_printf_float+0xc2>
 800a924:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a928:	f240 80e0 	bls.w	800aaec <_printf_float+0x3c0>
 800a92c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a930:	2200      	movs	r2, #0
 800a932:	2300      	movs	r3, #0
 800a934:	f7f6 f8e0 	bl	8000af8 <__aeabi_dcmpeq>
 800a938:	2800      	cmp	r0, #0
 800a93a:	d034      	beq.n	800a9a6 <_printf_float+0x27a>
 800a93c:	4a37      	ldr	r2, [pc, #220]	; (800aa1c <_printf_float+0x2f0>)
 800a93e:	2301      	movs	r3, #1
 800a940:	4631      	mov	r1, r6
 800a942:	4628      	mov	r0, r5
 800a944:	47b8      	blx	r7
 800a946:	3001      	adds	r0, #1
 800a948:	f43f af51 	beq.w	800a7ee <_printf_float+0xc2>
 800a94c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a950:	429a      	cmp	r2, r3
 800a952:	db02      	blt.n	800a95a <_printf_float+0x22e>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	07d8      	lsls	r0, r3, #31
 800a958:	d510      	bpl.n	800a97c <_printf_float+0x250>
 800a95a:	ee18 3a10 	vmov	r3, s16
 800a95e:	4652      	mov	r2, sl
 800a960:	4631      	mov	r1, r6
 800a962:	4628      	mov	r0, r5
 800a964:	47b8      	blx	r7
 800a966:	3001      	adds	r0, #1
 800a968:	f43f af41 	beq.w	800a7ee <_printf_float+0xc2>
 800a96c:	f04f 0800 	mov.w	r8, #0
 800a970:	f104 091a 	add.w	r9, r4, #26
 800a974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a976:	3b01      	subs	r3, #1
 800a978:	4543      	cmp	r3, r8
 800a97a:	dc09      	bgt.n	800a990 <_printf_float+0x264>
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	079b      	lsls	r3, r3, #30
 800a980:	f100 8105 	bmi.w	800ab8e <_printf_float+0x462>
 800a984:	68e0      	ldr	r0, [r4, #12]
 800a986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a988:	4298      	cmp	r0, r3
 800a98a:	bfb8      	it	lt
 800a98c:	4618      	movlt	r0, r3
 800a98e:	e730      	b.n	800a7f2 <_printf_float+0xc6>
 800a990:	2301      	movs	r3, #1
 800a992:	464a      	mov	r2, r9
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	47b8      	blx	r7
 800a99a:	3001      	adds	r0, #1
 800a99c:	f43f af27 	beq.w	800a7ee <_printf_float+0xc2>
 800a9a0:	f108 0801 	add.w	r8, r8, #1
 800a9a4:	e7e6      	b.n	800a974 <_printf_float+0x248>
 800a9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	dc39      	bgt.n	800aa20 <_printf_float+0x2f4>
 800a9ac:	4a1b      	ldr	r2, [pc, #108]	; (800aa1c <_printf_float+0x2f0>)
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	47b8      	blx	r7
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	f43f af19 	beq.w	800a7ee <_printf_float+0xc2>
 800a9bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	d102      	bne.n	800a9ca <_printf_float+0x29e>
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	07d9      	lsls	r1, r3, #31
 800a9c8:	d5d8      	bpl.n	800a97c <_printf_float+0x250>
 800a9ca:	ee18 3a10 	vmov	r3, s16
 800a9ce:	4652      	mov	r2, sl
 800a9d0:	4631      	mov	r1, r6
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	47b8      	blx	r7
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	f43f af09 	beq.w	800a7ee <_printf_float+0xc2>
 800a9dc:	f04f 0900 	mov.w	r9, #0
 800a9e0:	f104 0a1a 	add.w	sl, r4, #26
 800a9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e6:	425b      	negs	r3, r3
 800a9e8:	454b      	cmp	r3, r9
 800a9ea:	dc01      	bgt.n	800a9f0 <_printf_float+0x2c4>
 800a9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ee:	e792      	b.n	800a916 <_printf_float+0x1ea>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4652      	mov	r2, sl
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	47b8      	blx	r7
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	f43f aef7 	beq.w	800a7ee <_printf_float+0xc2>
 800aa00:	f109 0901 	add.w	r9, r9, #1
 800aa04:	e7ee      	b.n	800a9e4 <_printf_float+0x2b8>
 800aa06:	bf00      	nop
 800aa08:	7fefffff 	.word	0x7fefffff
 800aa0c:	0800e704 	.word	0x0800e704
 800aa10:	0800e708 	.word	0x0800e708
 800aa14:	0800e710 	.word	0x0800e710
 800aa18:	0800e70c 	.word	0x0800e70c
 800aa1c:	0800e714 	.word	0x0800e714
 800aa20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa24:	429a      	cmp	r2, r3
 800aa26:	bfa8      	it	ge
 800aa28:	461a      	movge	r2, r3
 800aa2a:	2a00      	cmp	r2, #0
 800aa2c:	4691      	mov	r9, r2
 800aa2e:	dc37      	bgt.n	800aaa0 <_printf_float+0x374>
 800aa30:	f04f 0b00 	mov.w	fp, #0
 800aa34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa38:	f104 021a 	add.w	r2, r4, #26
 800aa3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa3e:	9305      	str	r3, [sp, #20]
 800aa40:	eba3 0309 	sub.w	r3, r3, r9
 800aa44:	455b      	cmp	r3, fp
 800aa46:	dc33      	bgt.n	800aab0 <_printf_float+0x384>
 800aa48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	db3b      	blt.n	800aac8 <_printf_float+0x39c>
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	07da      	lsls	r2, r3, #31
 800aa54:	d438      	bmi.n	800aac8 <_printf_float+0x39c>
 800aa56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa58:	9a05      	ldr	r2, [sp, #20]
 800aa5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa5c:	1a9a      	subs	r2, r3, r2
 800aa5e:	eba3 0901 	sub.w	r9, r3, r1
 800aa62:	4591      	cmp	r9, r2
 800aa64:	bfa8      	it	ge
 800aa66:	4691      	movge	r9, r2
 800aa68:	f1b9 0f00 	cmp.w	r9, #0
 800aa6c:	dc35      	bgt.n	800aada <_printf_float+0x3ae>
 800aa6e:	f04f 0800 	mov.w	r8, #0
 800aa72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa76:	f104 0a1a 	add.w	sl, r4, #26
 800aa7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa7e:	1a9b      	subs	r3, r3, r2
 800aa80:	eba3 0309 	sub.w	r3, r3, r9
 800aa84:	4543      	cmp	r3, r8
 800aa86:	f77f af79 	ble.w	800a97c <_printf_float+0x250>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	4652      	mov	r2, sl
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	f43f aeaa 	beq.w	800a7ee <_printf_float+0xc2>
 800aa9a:	f108 0801 	add.w	r8, r8, #1
 800aa9e:	e7ec      	b.n	800aa7a <_printf_float+0x34e>
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	4642      	mov	r2, r8
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b8      	blx	r7
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d1c0      	bne.n	800aa30 <_printf_float+0x304>
 800aaae:	e69e      	b.n	800a7ee <_printf_float+0xc2>
 800aab0:	2301      	movs	r3, #1
 800aab2:	4631      	mov	r1, r6
 800aab4:	4628      	mov	r0, r5
 800aab6:	9205      	str	r2, [sp, #20]
 800aab8:	47b8      	blx	r7
 800aaba:	3001      	adds	r0, #1
 800aabc:	f43f ae97 	beq.w	800a7ee <_printf_float+0xc2>
 800aac0:	9a05      	ldr	r2, [sp, #20]
 800aac2:	f10b 0b01 	add.w	fp, fp, #1
 800aac6:	e7b9      	b.n	800aa3c <_printf_float+0x310>
 800aac8:	ee18 3a10 	vmov	r3, s16
 800aacc:	4652      	mov	r2, sl
 800aace:	4631      	mov	r1, r6
 800aad0:	4628      	mov	r0, r5
 800aad2:	47b8      	blx	r7
 800aad4:	3001      	adds	r0, #1
 800aad6:	d1be      	bne.n	800aa56 <_printf_float+0x32a>
 800aad8:	e689      	b.n	800a7ee <_printf_float+0xc2>
 800aada:	9a05      	ldr	r2, [sp, #20]
 800aadc:	464b      	mov	r3, r9
 800aade:	4442      	add	r2, r8
 800aae0:	4631      	mov	r1, r6
 800aae2:	4628      	mov	r0, r5
 800aae4:	47b8      	blx	r7
 800aae6:	3001      	adds	r0, #1
 800aae8:	d1c1      	bne.n	800aa6e <_printf_float+0x342>
 800aaea:	e680      	b.n	800a7ee <_printf_float+0xc2>
 800aaec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaee:	2a01      	cmp	r2, #1
 800aaf0:	dc01      	bgt.n	800aaf6 <_printf_float+0x3ca>
 800aaf2:	07db      	lsls	r3, r3, #31
 800aaf4:	d538      	bpl.n	800ab68 <_printf_float+0x43c>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	4642      	mov	r2, r8
 800aafa:	4631      	mov	r1, r6
 800aafc:	4628      	mov	r0, r5
 800aafe:	47b8      	blx	r7
 800ab00:	3001      	adds	r0, #1
 800ab02:	f43f ae74 	beq.w	800a7ee <_printf_float+0xc2>
 800ab06:	ee18 3a10 	vmov	r3, s16
 800ab0a:	4652      	mov	r2, sl
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4628      	mov	r0, r5
 800ab10:	47b8      	blx	r7
 800ab12:	3001      	adds	r0, #1
 800ab14:	f43f ae6b 	beq.w	800a7ee <_printf_float+0xc2>
 800ab18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f7f5 ffea 	bl	8000af8 <__aeabi_dcmpeq>
 800ab24:	b9d8      	cbnz	r0, 800ab5e <_printf_float+0x432>
 800ab26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab28:	f108 0201 	add.w	r2, r8, #1
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	4631      	mov	r1, r6
 800ab30:	4628      	mov	r0, r5
 800ab32:	47b8      	blx	r7
 800ab34:	3001      	adds	r0, #1
 800ab36:	d10e      	bne.n	800ab56 <_printf_float+0x42a>
 800ab38:	e659      	b.n	800a7ee <_printf_float+0xc2>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	4652      	mov	r2, sl
 800ab3e:	4631      	mov	r1, r6
 800ab40:	4628      	mov	r0, r5
 800ab42:	47b8      	blx	r7
 800ab44:	3001      	adds	r0, #1
 800ab46:	f43f ae52 	beq.w	800a7ee <_printf_float+0xc2>
 800ab4a:	f108 0801 	add.w	r8, r8, #1
 800ab4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab50:	3b01      	subs	r3, #1
 800ab52:	4543      	cmp	r3, r8
 800ab54:	dcf1      	bgt.n	800ab3a <_printf_float+0x40e>
 800ab56:	464b      	mov	r3, r9
 800ab58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab5c:	e6dc      	b.n	800a918 <_printf_float+0x1ec>
 800ab5e:	f04f 0800 	mov.w	r8, #0
 800ab62:	f104 0a1a 	add.w	sl, r4, #26
 800ab66:	e7f2      	b.n	800ab4e <_printf_float+0x422>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	4642      	mov	r2, r8
 800ab6c:	e7df      	b.n	800ab2e <_printf_float+0x402>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	464a      	mov	r2, r9
 800ab72:	4631      	mov	r1, r6
 800ab74:	4628      	mov	r0, r5
 800ab76:	47b8      	blx	r7
 800ab78:	3001      	adds	r0, #1
 800ab7a:	f43f ae38 	beq.w	800a7ee <_printf_float+0xc2>
 800ab7e:	f108 0801 	add.w	r8, r8, #1
 800ab82:	68e3      	ldr	r3, [r4, #12]
 800ab84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab86:	1a5b      	subs	r3, r3, r1
 800ab88:	4543      	cmp	r3, r8
 800ab8a:	dcf0      	bgt.n	800ab6e <_printf_float+0x442>
 800ab8c:	e6fa      	b.n	800a984 <_printf_float+0x258>
 800ab8e:	f04f 0800 	mov.w	r8, #0
 800ab92:	f104 0919 	add.w	r9, r4, #25
 800ab96:	e7f4      	b.n	800ab82 <_printf_float+0x456>

0800ab98 <_printf_common>:
 800ab98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	4699      	mov	r9, r3
 800aba0:	688a      	ldr	r2, [r1, #8]
 800aba2:	690b      	ldr	r3, [r1, #16]
 800aba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aba8:	4293      	cmp	r3, r2
 800abaa:	bfb8      	it	lt
 800abac:	4613      	movlt	r3, r2
 800abae:	6033      	str	r3, [r6, #0]
 800abb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abb4:	4607      	mov	r7, r0
 800abb6:	460c      	mov	r4, r1
 800abb8:	b10a      	cbz	r2, 800abbe <_printf_common+0x26>
 800abba:	3301      	adds	r3, #1
 800abbc:	6033      	str	r3, [r6, #0]
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	0699      	lsls	r1, r3, #26
 800abc2:	bf42      	ittt	mi
 800abc4:	6833      	ldrmi	r3, [r6, #0]
 800abc6:	3302      	addmi	r3, #2
 800abc8:	6033      	strmi	r3, [r6, #0]
 800abca:	6825      	ldr	r5, [r4, #0]
 800abcc:	f015 0506 	ands.w	r5, r5, #6
 800abd0:	d106      	bne.n	800abe0 <_printf_common+0x48>
 800abd2:	f104 0a19 	add.w	sl, r4, #25
 800abd6:	68e3      	ldr	r3, [r4, #12]
 800abd8:	6832      	ldr	r2, [r6, #0]
 800abda:	1a9b      	subs	r3, r3, r2
 800abdc:	42ab      	cmp	r3, r5
 800abde:	dc26      	bgt.n	800ac2e <_printf_common+0x96>
 800abe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abe4:	1e13      	subs	r3, r2, #0
 800abe6:	6822      	ldr	r2, [r4, #0]
 800abe8:	bf18      	it	ne
 800abea:	2301      	movne	r3, #1
 800abec:	0692      	lsls	r2, r2, #26
 800abee:	d42b      	bmi.n	800ac48 <_printf_common+0xb0>
 800abf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abf4:	4649      	mov	r1, r9
 800abf6:	4638      	mov	r0, r7
 800abf8:	47c0      	blx	r8
 800abfa:	3001      	adds	r0, #1
 800abfc:	d01e      	beq.n	800ac3c <_printf_common+0xa4>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	68e5      	ldr	r5, [r4, #12]
 800ac02:	6832      	ldr	r2, [r6, #0]
 800ac04:	f003 0306 	and.w	r3, r3, #6
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	bf08      	it	eq
 800ac0c:	1aad      	subeq	r5, r5, r2
 800ac0e:	68a3      	ldr	r3, [r4, #8]
 800ac10:	6922      	ldr	r2, [r4, #16]
 800ac12:	bf0c      	ite	eq
 800ac14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac18:	2500      	movne	r5, #0
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	bfc4      	itt	gt
 800ac1e:	1a9b      	subgt	r3, r3, r2
 800ac20:	18ed      	addgt	r5, r5, r3
 800ac22:	2600      	movs	r6, #0
 800ac24:	341a      	adds	r4, #26
 800ac26:	42b5      	cmp	r5, r6
 800ac28:	d11a      	bne.n	800ac60 <_printf_common+0xc8>
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	e008      	b.n	800ac40 <_printf_common+0xa8>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	4652      	mov	r2, sl
 800ac32:	4649      	mov	r1, r9
 800ac34:	4638      	mov	r0, r7
 800ac36:	47c0      	blx	r8
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d103      	bne.n	800ac44 <_printf_common+0xac>
 800ac3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac44:	3501      	adds	r5, #1
 800ac46:	e7c6      	b.n	800abd6 <_printf_common+0x3e>
 800ac48:	18e1      	adds	r1, r4, r3
 800ac4a:	1c5a      	adds	r2, r3, #1
 800ac4c:	2030      	movs	r0, #48	; 0x30
 800ac4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac52:	4422      	add	r2, r4
 800ac54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac5c:	3302      	adds	r3, #2
 800ac5e:	e7c7      	b.n	800abf0 <_printf_common+0x58>
 800ac60:	2301      	movs	r3, #1
 800ac62:	4622      	mov	r2, r4
 800ac64:	4649      	mov	r1, r9
 800ac66:	4638      	mov	r0, r7
 800ac68:	47c0      	blx	r8
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	d0e6      	beq.n	800ac3c <_printf_common+0xa4>
 800ac6e:	3601      	adds	r6, #1
 800ac70:	e7d9      	b.n	800ac26 <_printf_common+0x8e>
	...

0800ac74 <_printf_i>:
 800ac74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac78:	7e0f      	ldrb	r7, [r1, #24]
 800ac7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac7c:	2f78      	cmp	r7, #120	; 0x78
 800ac7e:	4691      	mov	r9, r2
 800ac80:	4680      	mov	r8, r0
 800ac82:	460c      	mov	r4, r1
 800ac84:	469a      	mov	sl, r3
 800ac86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac8a:	d807      	bhi.n	800ac9c <_printf_i+0x28>
 800ac8c:	2f62      	cmp	r7, #98	; 0x62
 800ac8e:	d80a      	bhi.n	800aca6 <_printf_i+0x32>
 800ac90:	2f00      	cmp	r7, #0
 800ac92:	f000 80d8 	beq.w	800ae46 <_printf_i+0x1d2>
 800ac96:	2f58      	cmp	r7, #88	; 0x58
 800ac98:	f000 80a3 	beq.w	800ade2 <_printf_i+0x16e>
 800ac9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aca4:	e03a      	b.n	800ad1c <_printf_i+0xa8>
 800aca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acaa:	2b15      	cmp	r3, #21
 800acac:	d8f6      	bhi.n	800ac9c <_printf_i+0x28>
 800acae:	a101      	add	r1, pc, #4	; (adr r1, 800acb4 <_printf_i+0x40>)
 800acb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acb4:	0800ad0d 	.word	0x0800ad0d
 800acb8:	0800ad21 	.word	0x0800ad21
 800acbc:	0800ac9d 	.word	0x0800ac9d
 800acc0:	0800ac9d 	.word	0x0800ac9d
 800acc4:	0800ac9d 	.word	0x0800ac9d
 800acc8:	0800ac9d 	.word	0x0800ac9d
 800accc:	0800ad21 	.word	0x0800ad21
 800acd0:	0800ac9d 	.word	0x0800ac9d
 800acd4:	0800ac9d 	.word	0x0800ac9d
 800acd8:	0800ac9d 	.word	0x0800ac9d
 800acdc:	0800ac9d 	.word	0x0800ac9d
 800ace0:	0800ae2d 	.word	0x0800ae2d
 800ace4:	0800ad51 	.word	0x0800ad51
 800ace8:	0800ae0f 	.word	0x0800ae0f
 800acec:	0800ac9d 	.word	0x0800ac9d
 800acf0:	0800ac9d 	.word	0x0800ac9d
 800acf4:	0800ae4f 	.word	0x0800ae4f
 800acf8:	0800ac9d 	.word	0x0800ac9d
 800acfc:	0800ad51 	.word	0x0800ad51
 800ad00:	0800ac9d 	.word	0x0800ac9d
 800ad04:	0800ac9d 	.word	0x0800ac9d
 800ad08:	0800ae17 	.word	0x0800ae17
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	1d1a      	adds	r2, r3, #4
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	602a      	str	r2, [r5, #0]
 800ad14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e0a3      	b.n	800ae68 <_printf_i+0x1f4>
 800ad20:	6820      	ldr	r0, [r4, #0]
 800ad22:	6829      	ldr	r1, [r5, #0]
 800ad24:	0606      	lsls	r6, r0, #24
 800ad26:	f101 0304 	add.w	r3, r1, #4
 800ad2a:	d50a      	bpl.n	800ad42 <_printf_i+0xce>
 800ad2c:	680e      	ldr	r6, [r1, #0]
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	2e00      	cmp	r6, #0
 800ad32:	da03      	bge.n	800ad3c <_printf_i+0xc8>
 800ad34:	232d      	movs	r3, #45	; 0x2d
 800ad36:	4276      	negs	r6, r6
 800ad38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad3c:	485e      	ldr	r0, [pc, #376]	; (800aeb8 <_printf_i+0x244>)
 800ad3e:	230a      	movs	r3, #10
 800ad40:	e019      	b.n	800ad76 <_printf_i+0x102>
 800ad42:	680e      	ldr	r6, [r1, #0]
 800ad44:	602b      	str	r3, [r5, #0]
 800ad46:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad4a:	bf18      	it	ne
 800ad4c:	b236      	sxthne	r6, r6
 800ad4e:	e7ef      	b.n	800ad30 <_printf_i+0xbc>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	6820      	ldr	r0, [r4, #0]
 800ad54:	1d19      	adds	r1, r3, #4
 800ad56:	6029      	str	r1, [r5, #0]
 800ad58:	0601      	lsls	r1, r0, #24
 800ad5a:	d501      	bpl.n	800ad60 <_printf_i+0xec>
 800ad5c:	681e      	ldr	r6, [r3, #0]
 800ad5e:	e002      	b.n	800ad66 <_printf_i+0xf2>
 800ad60:	0646      	lsls	r6, r0, #25
 800ad62:	d5fb      	bpl.n	800ad5c <_printf_i+0xe8>
 800ad64:	881e      	ldrh	r6, [r3, #0]
 800ad66:	4854      	ldr	r0, [pc, #336]	; (800aeb8 <_printf_i+0x244>)
 800ad68:	2f6f      	cmp	r7, #111	; 0x6f
 800ad6a:	bf0c      	ite	eq
 800ad6c:	2308      	moveq	r3, #8
 800ad6e:	230a      	movne	r3, #10
 800ad70:	2100      	movs	r1, #0
 800ad72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad76:	6865      	ldr	r5, [r4, #4]
 800ad78:	60a5      	str	r5, [r4, #8]
 800ad7a:	2d00      	cmp	r5, #0
 800ad7c:	bfa2      	ittt	ge
 800ad7e:	6821      	ldrge	r1, [r4, #0]
 800ad80:	f021 0104 	bicge.w	r1, r1, #4
 800ad84:	6021      	strge	r1, [r4, #0]
 800ad86:	b90e      	cbnz	r6, 800ad8c <_printf_i+0x118>
 800ad88:	2d00      	cmp	r5, #0
 800ad8a:	d04d      	beq.n	800ae28 <_printf_i+0x1b4>
 800ad8c:	4615      	mov	r5, r2
 800ad8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad92:	fb03 6711 	mls	r7, r3, r1, r6
 800ad96:	5dc7      	ldrb	r7, [r0, r7]
 800ad98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad9c:	4637      	mov	r7, r6
 800ad9e:	42bb      	cmp	r3, r7
 800ada0:	460e      	mov	r6, r1
 800ada2:	d9f4      	bls.n	800ad8e <_printf_i+0x11a>
 800ada4:	2b08      	cmp	r3, #8
 800ada6:	d10b      	bne.n	800adc0 <_printf_i+0x14c>
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	07de      	lsls	r6, r3, #31
 800adac:	d508      	bpl.n	800adc0 <_printf_i+0x14c>
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	6861      	ldr	r1, [r4, #4]
 800adb2:	4299      	cmp	r1, r3
 800adb4:	bfde      	ittt	le
 800adb6:	2330      	movle	r3, #48	; 0x30
 800adb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adc0:	1b52      	subs	r2, r2, r5
 800adc2:	6122      	str	r2, [r4, #16]
 800adc4:	f8cd a000 	str.w	sl, [sp]
 800adc8:	464b      	mov	r3, r9
 800adca:	aa03      	add	r2, sp, #12
 800adcc:	4621      	mov	r1, r4
 800adce:	4640      	mov	r0, r8
 800add0:	f7ff fee2 	bl	800ab98 <_printf_common>
 800add4:	3001      	adds	r0, #1
 800add6:	d14c      	bne.n	800ae72 <_printf_i+0x1fe>
 800add8:	f04f 30ff 	mov.w	r0, #4294967295
 800addc:	b004      	add	sp, #16
 800adde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade2:	4835      	ldr	r0, [pc, #212]	; (800aeb8 <_printf_i+0x244>)
 800ade4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ade8:	6829      	ldr	r1, [r5, #0]
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	f851 6b04 	ldr.w	r6, [r1], #4
 800adf0:	6029      	str	r1, [r5, #0]
 800adf2:	061d      	lsls	r5, r3, #24
 800adf4:	d514      	bpl.n	800ae20 <_printf_i+0x1ac>
 800adf6:	07df      	lsls	r7, r3, #31
 800adf8:	bf44      	itt	mi
 800adfa:	f043 0320 	orrmi.w	r3, r3, #32
 800adfe:	6023      	strmi	r3, [r4, #0]
 800ae00:	b91e      	cbnz	r6, 800ae0a <_printf_i+0x196>
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	f023 0320 	bic.w	r3, r3, #32
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	2310      	movs	r3, #16
 800ae0c:	e7b0      	b.n	800ad70 <_printf_i+0xfc>
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	f043 0320 	orr.w	r3, r3, #32
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	2378      	movs	r3, #120	; 0x78
 800ae18:	4828      	ldr	r0, [pc, #160]	; (800aebc <_printf_i+0x248>)
 800ae1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae1e:	e7e3      	b.n	800ade8 <_printf_i+0x174>
 800ae20:	0659      	lsls	r1, r3, #25
 800ae22:	bf48      	it	mi
 800ae24:	b2b6      	uxthmi	r6, r6
 800ae26:	e7e6      	b.n	800adf6 <_printf_i+0x182>
 800ae28:	4615      	mov	r5, r2
 800ae2a:	e7bb      	b.n	800ada4 <_printf_i+0x130>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	6826      	ldr	r6, [r4, #0]
 800ae30:	6961      	ldr	r1, [r4, #20]
 800ae32:	1d18      	adds	r0, r3, #4
 800ae34:	6028      	str	r0, [r5, #0]
 800ae36:	0635      	lsls	r5, r6, #24
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	d501      	bpl.n	800ae40 <_printf_i+0x1cc>
 800ae3c:	6019      	str	r1, [r3, #0]
 800ae3e:	e002      	b.n	800ae46 <_printf_i+0x1d2>
 800ae40:	0670      	lsls	r0, r6, #25
 800ae42:	d5fb      	bpl.n	800ae3c <_printf_i+0x1c8>
 800ae44:	8019      	strh	r1, [r3, #0]
 800ae46:	2300      	movs	r3, #0
 800ae48:	6123      	str	r3, [r4, #16]
 800ae4a:	4615      	mov	r5, r2
 800ae4c:	e7ba      	b.n	800adc4 <_printf_i+0x150>
 800ae4e:	682b      	ldr	r3, [r5, #0]
 800ae50:	1d1a      	adds	r2, r3, #4
 800ae52:	602a      	str	r2, [r5, #0]
 800ae54:	681d      	ldr	r5, [r3, #0]
 800ae56:	6862      	ldr	r2, [r4, #4]
 800ae58:	2100      	movs	r1, #0
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f7f5 f9d8 	bl	8000210 <memchr>
 800ae60:	b108      	cbz	r0, 800ae66 <_printf_i+0x1f2>
 800ae62:	1b40      	subs	r0, r0, r5
 800ae64:	6060      	str	r0, [r4, #4]
 800ae66:	6863      	ldr	r3, [r4, #4]
 800ae68:	6123      	str	r3, [r4, #16]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae70:	e7a8      	b.n	800adc4 <_printf_i+0x150>
 800ae72:	6923      	ldr	r3, [r4, #16]
 800ae74:	462a      	mov	r2, r5
 800ae76:	4649      	mov	r1, r9
 800ae78:	4640      	mov	r0, r8
 800ae7a:	47d0      	blx	sl
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	d0ab      	beq.n	800add8 <_printf_i+0x164>
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	079b      	lsls	r3, r3, #30
 800ae84:	d413      	bmi.n	800aeae <_printf_i+0x23a>
 800ae86:	68e0      	ldr	r0, [r4, #12]
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	4298      	cmp	r0, r3
 800ae8c:	bfb8      	it	lt
 800ae8e:	4618      	movlt	r0, r3
 800ae90:	e7a4      	b.n	800addc <_printf_i+0x168>
 800ae92:	2301      	movs	r3, #1
 800ae94:	4632      	mov	r2, r6
 800ae96:	4649      	mov	r1, r9
 800ae98:	4640      	mov	r0, r8
 800ae9a:	47d0      	blx	sl
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	d09b      	beq.n	800add8 <_printf_i+0x164>
 800aea0:	3501      	adds	r5, #1
 800aea2:	68e3      	ldr	r3, [r4, #12]
 800aea4:	9903      	ldr	r1, [sp, #12]
 800aea6:	1a5b      	subs	r3, r3, r1
 800aea8:	42ab      	cmp	r3, r5
 800aeaa:	dcf2      	bgt.n	800ae92 <_printf_i+0x21e>
 800aeac:	e7eb      	b.n	800ae86 <_printf_i+0x212>
 800aeae:	2500      	movs	r5, #0
 800aeb0:	f104 0619 	add.w	r6, r4, #25
 800aeb4:	e7f5      	b.n	800aea2 <_printf_i+0x22e>
 800aeb6:	bf00      	nop
 800aeb8:	0800e716 	.word	0x0800e716
 800aebc:	0800e727 	.word	0x0800e727

0800aec0 <iprintf>:
 800aec0:	b40f      	push	{r0, r1, r2, r3}
 800aec2:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <iprintf+0x2c>)
 800aec4:	b513      	push	{r0, r1, r4, lr}
 800aec6:	681c      	ldr	r4, [r3, #0]
 800aec8:	b124      	cbz	r4, 800aed4 <iprintf+0x14>
 800aeca:	69a3      	ldr	r3, [r4, #24]
 800aecc:	b913      	cbnz	r3, 800aed4 <iprintf+0x14>
 800aece:	4620      	mov	r0, r4
 800aed0:	f001 f8da 	bl	800c088 <__sinit>
 800aed4:	ab05      	add	r3, sp, #20
 800aed6:	9a04      	ldr	r2, [sp, #16]
 800aed8:	68a1      	ldr	r1, [r4, #8]
 800aeda:	9301      	str	r3, [sp, #4]
 800aedc:	4620      	mov	r0, r4
 800aede:	f001 fe97 	bl	800cc10 <_vfiprintf_r>
 800aee2:	b002      	add	sp, #8
 800aee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aee8:	b004      	add	sp, #16
 800aeea:	4770      	bx	lr
 800aeec:	20000024 	.word	0x20000024

0800aef0 <_puts_r>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	460e      	mov	r6, r1
 800aef4:	4605      	mov	r5, r0
 800aef6:	b118      	cbz	r0, 800af00 <_puts_r+0x10>
 800aef8:	6983      	ldr	r3, [r0, #24]
 800aefa:	b90b      	cbnz	r3, 800af00 <_puts_r+0x10>
 800aefc:	f001 f8c4 	bl	800c088 <__sinit>
 800af00:	69ab      	ldr	r3, [r5, #24]
 800af02:	68ac      	ldr	r4, [r5, #8]
 800af04:	b913      	cbnz	r3, 800af0c <_puts_r+0x1c>
 800af06:	4628      	mov	r0, r5
 800af08:	f001 f8be 	bl	800c088 <__sinit>
 800af0c:	4b2c      	ldr	r3, [pc, #176]	; (800afc0 <_puts_r+0xd0>)
 800af0e:	429c      	cmp	r4, r3
 800af10:	d120      	bne.n	800af54 <_puts_r+0x64>
 800af12:	686c      	ldr	r4, [r5, #4]
 800af14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af16:	07db      	lsls	r3, r3, #31
 800af18:	d405      	bmi.n	800af26 <_puts_r+0x36>
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	0598      	lsls	r0, r3, #22
 800af1e:	d402      	bmi.n	800af26 <_puts_r+0x36>
 800af20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af22:	f001 f954 	bl	800c1ce <__retarget_lock_acquire_recursive>
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	0719      	lsls	r1, r3, #28
 800af2a:	d51d      	bpl.n	800af68 <_puts_r+0x78>
 800af2c:	6923      	ldr	r3, [r4, #16]
 800af2e:	b1db      	cbz	r3, 800af68 <_puts_r+0x78>
 800af30:	3e01      	subs	r6, #1
 800af32:	68a3      	ldr	r3, [r4, #8]
 800af34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af38:	3b01      	subs	r3, #1
 800af3a:	60a3      	str	r3, [r4, #8]
 800af3c:	bb39      	cbnz	r1, 800af8e <_puts_r+0x9e>
 800af3e:	2b00      	cmp	r3, #0
 800af40:	da38      	bge.n	800afb4 <_puts_r+0xc4>
 800af42:	4622      	mov	r2, r4
 800af44:	210a      	movs	r1, #10
 800af46:	4628      	mov	r0, r5
 800af48:	f000 f848 	bl	800afdc <__swbuf_r>
 800af4c:	3001      	adds	r0, #1
 800af4e:	d011      	beq.n	800af74 <_puts_r+0x84>
 800af50:	250a      	movs	r5, #10
 800af52:	e011      	b.n	800af78 <_puts_r+0x88>
 800af54:	4b1b      	ldr	r3, [pc, #108]	; (800afc4 <_puts_r+0xd4>)
 800af56:	429c      	cmp	r4, r3
 800af58:	d101      	bne.n	800af5e <_puts_r+0x6e>
 800af5a:	68ac      	ldr	r4, [r5, #8]
 800af5c:	e7da      	b.n	800af14 <_puts_r+0x24>
 800af5e:	4b1a      	ldr	r3, [pc, #104]	; (800afc8 <_puts_r+0xd8>)
 800af60:	429c      	cmp	r4, r3
 800af62:	bf08      	it	eq
 800af64:	68ec      	ldreq	r4, [r5, #12]
 800af66:	e7d5      	b.n	800af14 <_puts_r+0x24>
 800af68:	4621      	mov	r1, r4
 800af6a:	4628      	mov	r0, r5
 800af6c:	f000 f888 	bl	800b080 <__swsetup_r>
 800af70:	2800      	cmp	r0, #0
 800af72:	d0dd      	beq.n	800af30 <_puts_r+0x40>
 800af74:	f04f 35ff 	mov.w	r5, #4294967295
 800af78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af7a:	07da      	lsls	r2, r3, #31
 800af7c:	d405      	bmi.n	800af8a <_puts_r+0x9a>
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	059b      	lsls	r3, r3, #22
 800af82:	d402      	bmi.n	800af8a <_puts_r+0x9a>
 800af84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af86:	f001 f923 	bl	800c1d0 <__retarget_lock_release_recursive>
 800af8a:	4628      	mov	r0, r5
 800af8c:	bd70      	pop	{r4, r5, r6, pc}
 800af8e:	2b00      	cmp	r3, #0
 800af90:	da04      	bge.n	800af9c <_puts_r+0xac>
 800af92:	69a2      	ldr	r2, [r4, #24]
 800af94:	429a      	cmp	r2, r3
 800af96:	dc06      	bgt.n	800afa6 <_puts_r+0xb6>
 800af98:	290a      	cmp	r1, #10
 800af9a:	d004      	beq.n	800afa6 <_puts_r+0xb6>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	6022      	str	r2, [r4, #0]
 800afa2:	7019      	strb	r1, [r3, #0]
 800afa4:	e7c5      	b.n	800af32 <_puts_r+0x42>
 800afa6:	4622      	mov	r2, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	f000 f817 	bl	800afdc <__swbuf_r>
 800afae:	3001      	adds	r0, #1
 800afb0:	d1bf      	bne.n	800af32 <_puts_r+0x42>
 800afb2:	e7df      	b.n	800af74 <_puts_r+0x84>
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	250a      	movs	r5, #10
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	6022      	str	r2, [r4, #0]
 800afbc:	701d      	strb	r5, [r3, #0]
 800afbe:	e7db      	b.n	800af78 <_puts_r+0x88>
 800afc0:	0800e7e8 	.word	0x0800e7e8
 800afc4:	0800e808 	.word	0x0800e808
 800afc8:	0800e7c8 	.word	0x0800e7c8

0800afcc <puts>:
 800afcc:	4b02      	ldr	r3, [pc, #8]	; (800afd8 <puts+0xc>)
 800afce:	4601      	mov	r1, r0
 800afd0:	6818      	ldr	r0, [r3, #0]
 800afd2:	f7ff bf8d 	b.w	800aef0 <_puts_r>
 800afd6:	bf00      	nop
 800afd8:	20000024 	.word	0x20000024

0800afdc <__swbuf_r>:
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afde:	460e      	mov	r6, r1
 800afe0:	4614      	mov	r4, r2
 800afe2:	4605      	mov	r5, r0
 800afe4:	b118      	cbz	r0, 800afee <__swbuf_r+0x12>
 800afe6:	6983      	ldr	r3, [r0, #24]
 800afe8:	b90b      	cbnz	r3, 800afee <__swbuf_r+0x12>
 800afea:	f001 f84d 	bl	800c088 <__sinit>
 800afee:	4b21      	ldr	r3, [pc, #132]	; (800b074 <__swbuf_r+0x98>)
 800aff0:	429c      	cmp	r4, r3
 800aff2:	d12b      	bne.n	800b04c <__swbuf_r+0x70>
 800aff4:	686c      	ldr	r4, [r5, #4]
 800aff6:	69a3      	ldr	r3, [r4, #24]
 800aff8:	60a3      	str	r3, [r4, #8]
 800affa:	89a3      	ldrh	r3, [r4, #12]
 800affc:	071a      	lsls	r2, r3, #28
 800affe:	d52f      	bpl.n	800b060 <__swbuf_r+0x84>
 800b000:	6923      	ldr	r3, [r4, #16]
 800b002:	b36b      	cbz	r3, 800b060 <__swbuf_r+0x84>
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	6820      	ldr	r0, [r4, #0]
 800b008:	1ac0      	subs	r0, r0, r3
 800b00a:	6963      	ldr	r3, [r4, #20]
 800b00c:	b2f6      	uxtb	r6, r6
 800b00e:	4283      	cmp	r3, r0
 800b010:	4637      	mov	r7, r6
 800b012:	dc04      	bgt.n	800b01e <__swbuf_r+0x42>
 800b014:	4621      	mov	r1, r4
 800b016:	4628      	mov	r0, r5
 800b018:	f000 ffa2 	bl	800bf60 <_fflush_r>
 800b01c:	bb30      	cbnz	r0, 800b06c <__swbuf_r+0x90>
 800b01e:	68a3      	ldr	r3, [r4, #8]
 800b020:	3b01      	subs	r3, #1
 800b022:	60a3      	str	r3, [r4, #8]
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	6022      	str	r2, [r4, #0]
 800b02a:	701e      	strb	r6, [r3, #0]
 800b02c:	6963      	ldr	r3, [r4, #20]
 800b02e:	3001      	adds	r0, #1
 800b030:	4283      	cmp	r3, r0
 800b032:	d004      	beq.n	800b03e <__swbuf_r+0x62>
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	07db      	lsls	r3, r3, #31
 800b038:	d506      	bpl.n	800b048 <__swbuf_r+0x6c>
 800b03a:	2e0a      	cmp	r6, #10
 800b03c:	d104      	bne.n	800b048 <__swbuf_r+0x6c>
 800b03e:	4621      	mov	r1, r4
 800b040:	4628      	mov	r0, r5
 800b042:	f000 ff8d 	bl	800bf60 <_fflush_r>
 800b046:	b988      	cbnz	r0, 800b06c <__swbuf_r+0x90>
 800b048:	4638      	mov	r0, r7
 800b04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b04c:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <__swbuf_r+0x9c>)
 800b04e:	429c      	cmp	r4, r3
 800b050:	d101      	bne.n	800b056 <__swbuf_r+0x7a>
 800b052:	68ac      	ldr	r4, [r5, #8]
 800b054:	e7cf      	b.n	800aff6 <__swbuf_r+0x1a>
 800b056:	4b09      	ldr	r3, [pc, #36]	; (800b07c <__swbuf_r+0xa0>)
 800b058:	429c      	cmp	r4, r3
 800b05a:	bf08      	it	eq
 800b05c:	68ec      	ldreq	r4, [r5, #12]
 800b05e:	e7ca      	b.n	800aff6 <__swbuf_r+0x1a>
 800b060:	4621      	mov	r1, r4
 800b062:	4628      	mov	r0, r5
 800b064:	f000 f80c 	bl	800b080 <__swsetup_r>
 800b068:	2800      	cmp	r0, #0
 800b06a:	d0cb      	beq.n	800b004 <__swbuf_r+0x28>
 800b06c:	f04f 37ff 	mov.w	r7, #4294967295
 800b070:	e7ea      	b.n	800b048 <__swbuf_r+0x6c>
 800b072:	bf00      	nop
 800b074:	0800e7e8 	.word	0x0800e7e8
 800b078:	0800e808 	.word	0x0800e808
 800b07c:	0800e7c8 	.word	0x0800e7c8

0800b080 <__swsetup_r>:
 800b080:	4b32      	ldr	r3, [pc, #200]	; (800b14c <__swsetup_r+0xcc>)
 800b082:	b570      	push	{r4, r5, r6, lr}
 800b084:	681d      	ldr	r5, [r3, #0]
 800b086:	4606      	mov	r6, r0
 800b088:	460c      	mov	r4, r1
 800b08a:	b125      	cbz	r5, 800b096 <__swsetup_r+0x16>
 800b08c:	69ab      	ldr	r3, [r5, #24]
 800b08e:	b913      	cbnz	r3, 800b096 <__swsetup_r+0x16>
 800b090:	4628      	mov	r0, r5
 800b092:	f000 fff9 	bl	800c088 <__sinit>
 800b096:	4b2e      	ldr	r3, [pc, #184]	; (800b150 <__swsetup_r+0xd0>)
 800b098:	429c      	cmp	r4, r3
 800b09a:	d10f      	bne.n	800b0bc <__swsetup_r+0x3c>
 800b09c:	686c      	ldr	r4, [r5, #4]
 800b09e:	89a3      	ldrh	r3, [r4, #12]
 800b0a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0a4:	0719      	lsls	r1, r3, #28
 800b0a6:	d42c      	bmi.n	800b102 <__swsetup_r+0x82>
 800b0a8:	06dd      	lsls	r5, r3, #27
 800b0aa:	d411      	bmi.n	800b0d0 <__swsetup_r+0x50>
 800b0ac:	2309      	movs	r3, #9
 800b0ae:	6033      	str	r3, [r6, #0]
 800b0b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0b4:	81a3      	strh	r3, [r4, #12]
 800b0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ba:	e03e      	b.n	800b13a <__swsetup_r+0xba>
 800b0bc:	4b25      	ldr	r3, [pc, #148]	; (800b154 <__swsetup_r+0xd4>)
 800b0be:	429c      	cmp	r4, r3
 800b0c0:	d101      	bne.n	800b0c6 <__swsetup_r+0x46>
 800b0c2:	68ac      	ldr	r4, [r5, #8]
 800b0c4:	e7eb      	b.n	800b09e <__swsetup_r+0x1e>
 800b0c6:	4b24      	ldr	r3, [pc, #144]	; (800b158 <__swsetup_r+0xd8>)
 800b0c8:	429c      	cmp	r4, r3
 800b0ca:	bf08      	it	eq
 800b0cc:	68ec      	ldreq	r4, [r5, #12]
 800b0ce:	e7e6      	b.n	800b09e <__swsetup_r+0x1e>
 800b0d0:	0758      	lsls	r0, r3, #29
 800b0d2:	d512      	bpl.n	800b0fa <__swsetup_r+0x7a>
 800b0d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0d6:	b141      	cbz	r1, 800b0ea <__swsetup_r+0x6a>
 800b0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0dc:	4299      	cmp	r1, r3
 800b0de:	d002      	beq.n	800b0e6 <__swsetup_r+0x66>
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f001 fc8b 	bl	800c9fc <_free_r>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	6363      	str	r3, [r4, #52]	; 0x34
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0f0:	81a3      	strh	r3, [r4, #12]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	6063      	str	r3, [r4, #4]
 800b0f6:	6923      	ldr	r3, [r4, #16]
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	89a3      	ldrh	r3, [r4, #12]
 800b0fc:	f043 0308 	orr.w	r3, r3, #8
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	6923      	ldr	r3, [r4, #16]
 800b104:	b94b      	cbnz	r3, 800b11a <__swsetup_r+0x9a>
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b10c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b110:	d003      	beq.n	800b11a <__swsetup_r+0x9a>
 800b112:	4621      	mov	r1, r4
 800b114:	4630      	mov	r0, r6
 800b116:	f001 f881 	bl	800c21c <__smakebuf_r>
 800b11a:	89a0      	ldrh	r0, [r4, #12]
 800b11c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b120:	f010 0301 	ands.w	r3, r0, #1
 800b124:	d00a      	beq.n	800b13c <__swsetup_r+0xbc>
 800b126:	2300      	movs	r3, #0
 800b128:	60a3      	str	r3, [r4, #8]
 800b12a:	6963      	ldr	r3, [r4, #20]
 800b12c:	425b      	negs	r3, r3
 800b12e:	61a3      	str	r3, [r4, #24]
 800b130:	6923      	ldr	r3, [r4, #16]
 800b132:	b943      	cbnz	r3, 800b146 <__swsetup_r+0xc6>
 800b134:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b138:	d1ba      	bne.n	800b0b0 <__swsetup_r+0x30>
 800b13a:	bd70      	pop	{r4, r5, r6, pc}
 800b13c:	0781      	lsls	r1, r0, #30
 800b13e:	bf58      	it	pl
 800b140:	6963      	ldrpl	r3, [r4, #20]
 800b142:	60a3      	str	r3, [r4, #8]
 800b144:	e7f4      	b.n	800b130 <__swsetup_r+0xb0>
 800b146:	2000      	movs	r0, #0
 800b148:	e7f7      	b.n	800b13a <__swsetup_r+0xba>
 800b14a:	bf00      	nop
 800b14c:	20000024 	.word	0x20000024
 800b150:	0800e7e8 	.word	0x0800e7e8
 800b154:	0800e808 	.word	0x0800e808
 800b158:	0800e7c8 	.word	0x0800e7c8

0800b15c <quorem>:
 800b15c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b160:	6903      	ldr	r3, [r0, #16]
 800b162:	690c      	ldr	r4, [r1, #16]
 800b164:	42a3      	cmp	r3, r4
 800b166:	4607      	mov	r7, r0
 800b168:	f2c0 8081 	blt.w	800b26e <quorem+0x112>
 800b16c:	3c01      	subs	r4, #1
 800b16e:	f101 0814 	add.w	r8, r1, #20
 800b172:	f100 0514 	add.w	r5, r0, #20
 800b176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b17a:	9301      	str	r3, [sp, #4]
 800b17c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b180:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b184:	3301      	adds	r3, #1
 800b186:	429a      	cmp	r2, r3
 800b188:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b18c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b190:	fbb2 f6f3 	udiv	r6, r2, r3
 800b194:	d331      	bcc.n	800b1fa <quorem+0x9e>
 800b196:	f04f 0e00 	mov.w	lr, #0
 800b19a:	4640      	mov	r0, r8
 800b19c:	46ac      	mov	ip, r5
 800b19e:	46f2      	mov	sl, lr
 800b1a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b1a4:	b293      	uxth	r3, r2
 800b1a6:	fb06 e303 	mla	r3, r6, r3, lr
 800b1aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	ebaa 0303 	sub.w	r3, sl, r3
 800b1b4:	f8dc a000 	ldr.w	sl, [ip]
 800b1b8:	0c12      	lsrs	r2, r2, #16
 800b1ba:	fa13 f38a 	uxtah	r3, r3, sl
 800b1be:	fb06 e202 	mla	r2, r6, r2, lr
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	9b00      	ldr	r3, [sp, #0]
 800b1c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b1ca:	b292      	uxth	r2, r2
 800b1cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b1d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800b1d8:	4581      	cmp	r9, r0
 800b1da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1de:	f84c 3b04 	str.w	r3, [ip], #4
 800b1e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1e6:	d2db      	bcs.n	800b1a0 <quorem+0x44>
 800b1e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800b1ec:	b92b      	cbnz	r3, 800b1fa <quorem+0x9e>
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	3b04      	subs	r3, #4
 800b1f2:	429d      	cmp	r5, r3
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	d32e      	bcc.n	800b256 <quorem+0xfa>
 800b1f8:	613c      	str	r4, [r7, #16]
 800b1fa:	4638      	mov	r0, r7
 800b1fc:	f001 fae6 	bl	800c7cc <__mcmp>
 800b200:	2800      	cmp	r0, #0
 800b202:	db24      	blt.n	800b24e <quorem+0xf2>
 800b204:	3601      	adds	r6, #1
 800b206:	4628      	mov	r0, r5
 800b208:	f04f 0c00 	mov.w	ip, #0
 800b20c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b210:	f8d0 e000 	ldr.w	lr, [r0]
 800b214:	b293      	uxth	r3, r2
 800b216:	ebac 0303 	sub.w	r3, ip, r3
 800b21a:	0c12      	lsrs	r2, r2, #16
 800b21c:	fa13 f38e 	uxtah	r3, r3, lr
 800b220:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b228:	b29b      	uxth	r3, r3
 800b22a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b22e:	45c1      	cmp	r9, r8
 800b230:	f840 3b04 	str.w	r3, [r0], #4
 800b234:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b238:	d2e8      	bcs.n	800b20c <quorem+0xb0>
 800b23a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b23e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b242:	b922      	cbnz	r2, 800b24e <quorem+0xf2>
 800b244:	3b04      	subs	r3, #4
 800b246:	429d      	cmp	r5, r3
 800b248:	461a      	mov	r2, r3
 800b24a:	d30a      	bcc.n	800b262 <quorem+0x106>
 800b24c:	613c      	str	r4, [r7, #16]
 800b24e:	4630      	mov	r0, r6
 800b250:	b003      	add	sp, #12
 800b252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b256:	6812      	ldr	r2, [r2, #0]
 800b258:	3b04      	subs	r3, #4
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	d1cc      	bne.n	800b1f8 <quorem+0x9c>
 800b25e:	3c01      	subs	r4, #1
 800b260:	e7c7      	b.n	800b1f2 <quorem+0x96>
 800b262:	6812      	ldr	r2, [r2, #0]
 800b264:	3b04      	subs	r3, #4
 800b266:	2a00      	cmp	r2, #0
 800b268:	d1f0      	bne.n	800b24c <quorem+0xf0>
 800b26a:	3c01      	subs	r4, #1
 800b26c:	e7eb      	b.n	800b246 <quorem+0xea>
 800b26e:	2000      	movs	r0, #0
 800b270:	e7ee      	b.n	800b250 <quorem+0xf4>
 800b272:	0000      	movs	r0, r0
 800b274:	0000      	movs	r0, r0
	...

0800b278 <_dtoa_r>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	ed2d 8b04 	vpush	{d8-d9}
 800b280:	ec57 6b10 	vmov	r6, r7, d0
 800b284:	b093      	sub	sp, #76	; 0x4c
 800b286:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b288:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b28c:	9106      	str	r1, [sp, #24]
 800b28e:	ee10 aa10 	vmov	sl, s0
 800b292:	4604      	mov	r4, r0
 800b294:	9209      	str	r2, [sp, #36]	; 0x24
 800b296:	930c      	str	r3, [sp, #48]	; 0x30
 800b298:	46bb      	mov	fp, r7
 800b29a:	b975      	cbnz	r5, 800b2ba <_dtoa_r+0x42>
 800b29c:	2010      	movs	r0, #16
 800b29e:	f000 fffd 	bl	800c29c <malloc>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	6260      	str	r0, [r4, #36]	; 0x24
 800b2a6:	b920      	cbnz	r0, 800b2b2 <_dtoa_r+0x3a>
 800b2a8:	4ba7      	ldr	r3, [pc, #668]	; (800b548 <_dtoa_r+0x2d0>)
 800b2aa:	21ea      	movs	r1, #234	; 0xea
 800b2ac:	48a7      	ldr	r0, [pc, #668]	; (800b54c <_dtoa_r+0x2d4>)
 800b2ae:	f001 fe45 	bl	800cf3c <__assert_func>
 800b2b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b2b6:	6005      	str	r5, [r0, #0]
 800b2b8:	60c5      	str	r5, [r0, #12]
 800b2ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2bc:	6819      	ldr	r1, [r3, #0]
 800b2be:	b151      	cbz	r1, 800b2d6 <_dtoa_r+0x5e>
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	604a      	str	r2, [r1, #4]
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	4093      	lsls	r3, r2
 800b2c8:	608b      	str	r3, [r1, #8]
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f001 f83c 	bl	800c348 <_Bfree>
 800b2d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	1e3b      	subs	r3, r7, #0
 800b2d8:	bfaa      	itet	ge
 800b2da:	2300      	movge	r3, #0
 800b2dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b2e0:	f8c8 3000 	strge.w	r3, [r8]
 800b2e4:	4b9a      	ldr	r3, [pc, #616]	; (800b550 <_dtoa_r+0x2d8>)
 800b2e6:	bfbc      	itt	lt
 800b2e8:	2201      	movlt	r2, #1
 800b2ea:	f8c8 2000 	strlt.w	r2, [r8]
 800b2ee:	ea33 030b 	bics.w	r3, r3, fp
 800b2f2:	d11b      	bne.n	800b32c <_dtoa_r+0xb4>
 800b2f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b300:	4333      	orrs	r3, r6
 800b302:	f000 8592 	beq.w	800be2a <_dtoa_r+0xbb2>
 800b306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b308:	b963      	cbnz	r3, 800b324 <_dtoa_r+0xac>
 800b30a:	4b92      	ldr	r3, [pc, #584]	; (800b554 <_dtoa_r+0x2dc>)
 800b30c:	e022      	b.n	800b354 <_dtoa_r+0xdc>
 800b30e:	4b92      	ldr	r3, [pc, #584]	; (800b558 <_dtoa_r+0x2e0>)
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	3308      	adds	r3, #8
 800b314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	9801      	ldr	r0, [sp, #4]
 800b31a:	b013      	add	sp, #76	; 0x4c
 800b31c:	ecbd 8b04 	vpop	{d8-d9}
 800b320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b324:	4b8b      	ldr	r3, [pc, #556]	; (800b554 <_dtoa_r+0x2dc>)
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	3303      	adds	r3, #3
 800b32a:	e7f3      	b.n	800b314 <_dtoa_r+0x9c>
 800b32c:	2200      	movs	r2, #0
 800b32e:	2300      	movs	r3, #0
 800b330:	4650      	mov	r0, sl
 800b332:	4659      	mov	r1, fp
 800b334:	f7f5 fbe0 	bl	8000af8 <__aeabi_dcmpeq>
 800b338:	ec4b ab19 	vmov	d9, sl, fp
 800b33c:	4680      	mov	r8, r0
 800b33e:	b158      	cbz	r0, 800b358 <_dtoa_r+0xe0>
 800b340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b342:	2301      	movs	r3, #1
 800b344:	6013      	str	r3, [r2, #0]
 800b346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f000 856b 	beq.w	800be24 <_dtoa_r+0xbac>
 800b34e:	4883      	ldr	r0, [pc, #524]	; (800b55c <_dtoa_r+0x2e4>)
 800b350:	6018      	str	r0, [r3, #0]
 800b352:	1e43      	subs	r3, r0, #1
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	e7df      	b.n	800b318 <_dtoa_r+0xa0>
 800b358:	ec4b ab10 	vmov	d0, sl, fp
 800b35c:	aa10      	add	r2, sp, #64	; 0x40
 800b35e:	a911      	add	r1, sp, #68	; 0x44
 800b360:	4620      	mov	r0, r4
 800b362:	f001 fad9 	bl	800c918 <__d2b>
 800b366:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b36a:	ee08 0a10 	vmov	s16, r0
 800b36e:	2d00      	cmp	r5, #0
 800b370:	f000 8084 	beq.w	800b47c <_dtoa_r+0x204>
 800b374:	ee19 3a90 	vmov	r3, s19
 800b378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b37c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b380:	4656      	mov	r6, sl
 800b382:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b38a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b38e:	4b74      	ldr	r3, [pc, #464]	; (800b560 <_dtoa_r+0x2e8>)
 800b390:	2200      	movs	r2, #0
 800b392:	4630      	mov	r0, r6
 800b394:	4639      	mov	r1, r7
 800b396:	f7f4 ff8f 	bl	80002b8 <__aeabi_dsub>
 800b39a:	a365      	add	r3, pc, #404	; (adr r3, 800b530 <_dtoa_r+0x2b8>)
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	f7f5 f942 	bl	8000628 <__aeabi_dmul>
 800b3a4:	a364      	add	r3, pc, #400	; (adr r3, 800b538 <_dtoa_r+0x2c0>)
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f7f4 ff87 	bl	80002bc <__adddf3>
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	460f      	mov	r7, r1
 800b3b4:	f7f5 f8ce 	bl	8000554 <__aeabi_i2d>
 800b3b8:	a361      	add	r3, pc, #388	; (adr r3, 800b540 <_dtoa_r+0x2c8>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	f7f5 f933 	bl	8000628 <__aeabi_dmul>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	4639      	mov	r1, r7
 800b3ca:	f7f4 ff77 	bl	80002bc <__adddf3>
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	460f      	mov	r7, r1
 800b3d2:	f7f5 fbd9 	bl	8000b88 <__aeabi_d2iz>
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	9000      	str	r0, [sp, #0]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	4630      	mov	r0, r6
 800b3de:	4639      	mov	r1, r7
 800b3e0:	f7f5 fb94 	bl	8000b0c <__aeabi_dcmplt>
 800b3e4:	b150      	cbz	r0, 800b3fc <_dtoa_r+0x184>
 800b3e6:	9800      	ldr	r0, [sp, #0]
 800b3e8:	f7f5 f8b4 	bl	8000554 <__aeabi_i2d>
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	463b      	mov	r3, r7
 800b3f0:	f7f5 fb82 	bl	8000af8 <__aeabi_dcmpeq>
 800b3f4:	b910      	cbnz	r0, 800b3fc <_dtoa_r+0x184>
 800b3f6:	9b00      	ldr	r3, [sp, #0]
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	9b00      	ldr	r3, [sp, #0]
 800b3fe:	2b16      	cmp	r3, #22
 800b400:	d85a      	bhi.n	800b4b8 <_dtoa_r+0x240>
 800b402:	9a00      	ldr	r2, [sp, #0]
 800b404:	4b57      	ldr	r3, [pc, #348]	; (800b564 <_dtoa_r+0x2ec>)
 800b406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	ec51 0b19 	vmov	r0, r1, d9
 800b412:	f7f5 fb7b 	bl	8000b0c <__aeabi_dcmplt>
 800b416:	2800      	cmp	r0, #0
 800b418:	d050      	beq.n	800b4bc <_dtoa_r+0x244>
 800b41a:	9b00      	ldr	r3, [sp, #0]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	2300      	movs	r3, #0
 800b422:	930b      	str	r3, [sp, #44]	; 0x2c
 800b424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b426:	1b5d      	subs	r5, r3, r5
 800b428:	1e6b      	subs	r3, r5, #1
 800b42a:	9305      	str	r3, [sp, #20]
 800b42c:	bf45      	ittet	mi
 800b42e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b432:	9304      	strmi	r3, [sp, #16]
 800b434:	2300      	movpl	r3, #0
 800b436:	2300      	movmi	r3, #0
 800b438:	bf4c      	ite	mi
 800b43a:	9305      	strmi	r3, [sp, #20]
 800b43c:	9304      	strpl	r3, [sp, #16]
 800b43e:	9b00      	ldr	r3, [sp, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	db3d      	blt.n	800b4c0 <_dtoa_r+0x248>
 800b444:	9b05      	ldr	r3, [sp, #20]
 800b446:	9a00      	ldr	r2, [sp, #0]
 800b448:	920a      	str	r2, [sp, #40]	; 0x28
 800b44a:	4413      	add	r3, r2
 800b44c:	9305      	str	r3, [sp, #20]
 800b44e:	2300      	movs	r3, #0
 800b450:	9307      	str	r3, [sp, #28]
 800b452:	9b06      	ldr	r3, [sp, #24]
 800b454:	2b09      	cmp	r3, #9
 800b456:	f200 8089 	bhi.w	800b56c <_dtoa_r+0x2f4>
 800b45a:	2b05      	cmp	r3, #5
 800b45c:	bfc4      	itt	gt
 800b45e:	3b04      	subgt	r3, #4
 800b460:	9306      	strgt	r3, [sp, #24]
 800b462:	9b06      	ldr	r3, [sp, #24]
 800b464:	f1a3 0302 	sub.w	r3, r3, #2
 800b468:	bfcc      	ite	gt
 800b46a:	2500      	movgt	r5, #0
 800b46c:	2501      	movle	r5, #1
 800b46e:	2b03      	cmp	r3, #3
 800b470:	f200 8087 	bhi.w	800b582 <_dtoa_r+0x30a>
 800b474:	e8df f003 	tbb	[pc, r3]
 800b478:	59383a2d 	.word	0x59383a2d
 800b47c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b480:	441d      	add	r5, r3
 800b482:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b486:	2b20      	cmp	r3, #32
 800b488:	bfc1      	itttt	gt
 800b48a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b48e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b492:	fa0b f303 	lslgt.w	r3, fp, r3
 800b496:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b49a:	bfda      	itte	le
 800b49c:	f1c3 0320 	rsble	r3, r3, #32
 800b4a0:	fa06 f003 	lslle.w	r0, r6, r3
 800b4a4:	4318      	orrgt	r0, r3
 800b4a6:	f7f5 f845 	bl	8000534 <__aeabi_ui2d>
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b4b2:	3d01      	subs	r5, #1
 800b4b4:	930e      	str	r3, [sp, #56]	; 0x38
 800b4b6:	e76a      	b.n	800b38e <_dtoa_r+0x116>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e7b2      	b.n	800b422 <_dtoa_r+0x1aa>
 800b4bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b4be:	e7b1      	b.n	800b424 <_dtoa_r+0x1ac>
 800b4c0:	9b04      	ldr	r3, [sp, #16]
 800b4c2:	9a00      	ldr	r2, [sp, #0]
 800b4c4:	1a9b      	subs	r3, r3, r2
 800b4c6:	9304      	str	r3, [sp, #16]
 800b4c8:	4253      	negs	r3, r2
 800b4ca:	9307      	str	r3, [sp, #28]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b4d0:	e7bf      	b.n	800b452 <_dtoa_r+0x1da>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9308      	str	r3, [sp, #32]
 800b4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dc55      	bgt.n	800b588 <_dtoa_r+0x310>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4e6:	e00c      	b.n	800b502 <_dtoa_r+0x28a>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e7f3      	b.n	800b4d4 <_dtoa_r+0x25c>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4f0:	9308      	str	r3, [sp, #32]
 800b4f2:	9b00      	ldr	r3, [sp, #0]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	9302      	str	r3, [sp, #8]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	9303      	str	r3, [sp, #12]
 800b4fe:	bfb8      	it	lt
 800b500:	2301      	movlt	r3, #1
 800b502:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b504:	2200      	movs	r2, #0
 800b506:	6042      	str	r2, [r0, #4]
 800b508:	2204      	movs	r2, #4
 800b50a:	f102 0614 	add.w	r6, r2, #20
 800b50e:	429e      	cmp	r6, r3
 800b510:	6841      	ldr	r1, [r0, #4]
 800b512:	d93d      	bls.n	800b590 <_dtoa_r+0x318>
 800b514:	4620      	mov	r0, r4
 800b516:	f000 fed7 	bl	800c2c8 <_Balloc>
 800b51a:	9001      	str	r0, [sp, #4]
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d13b      	bne.n	800b598 <_dtoa_r+0x320>
 800b520:	4b11      	ldr	r3, [pc, #68]	; (800b568 <_dtoa_r+0x2f0>)
 800b522:	4602      	mov	r2, r0
 800b524:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b528:	e6c0      	b.n	800b2ac <_dtoa_r+0x34>
 800b52a:	2301      	movs	r3, #1
 800b52c:	e7df      	b.n	800b4ee <_dtoa_r+0x276>
 800b52e:	bf00      	nop
 800b530:	636f4361 	.word	0x636f4361
 800b534:	3fd287a7 	.word	0x3fd287a7
 800b538:	8b60c8b3 	.word	0x8b60c8b3
 800b53c:	3fc68a28 	.word	0x3fc68a28
 800b540:	509f79fb 	.word	0x509f79fb
 800b544:	3fd34413 	.word	0x3fd34413
 800b548:	0800e745 	.word	0x0800e745
 800b54c:	0800e75c 	.word	0x0800e75c
 800b550:	7ff00000 	.word	0x7ff00000
 800b554:	0800e741 	.word	0x0800e741
 800b558:	0800e738 	.word	0x0800e738
 800b55c:	0800e715 	.word	0x0800e715
 800b560:	3ff80000 	.word	0x3ff80000
 800b564:	0800e8b0 	.word	0x0800e8b0
 800b568:	0800e7b7 	.word	0x0800e7b7
 800b56c:	2501      	movs	r5, #1
 800b56e:	2300      	movs	r3, #0
 800b570:	9306      	str	r3, [sp, #24]
 800b572:	9508      	str	r5, [sp, #32]
 800b574:	f04f 33ff 	mov.w	r3, #4294967295
 800b578:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b57c:	2200      	movs	r2, #0
 800b57e:	2312      	movs	r3, #18
 800b580:	e7b0      	b.n	800b4e4 <_dtoa_r+0x26c>
 800b582:	2301      	movs	r3, #1
 800b584:	9308      	str	r3, [sp, #32]
 800b586:	e7f5      	b.n	800b574 <_dtoa_r+0x2fc>
 800b588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b58e:	e7b8      	b.n	800b502 <_dtoa_r+0x28a>
 800b590:	3101      	adds	r1, #1
 800b592:	6041      	str	r1, [r0, #4]
 800b594:	0052      	lsls	r2, r2, #1
 800b596:	e7b8      	b.n	800b50a <_dtoa_r+0x292>
 800b598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b59a:	9a01      	ldr	r2, [sp, #4]
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	9b03      	ldr	r3, [sp, #12]
 800b5a0:	2b0e      	cmp	r3, #14
 800b5a2:	f200 809d 	bhi.w	800b6e0 <_dtoa_r+0x468>
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	f000 809a 	beq.w	800b6e0 <_dtoa_r+0x468>
 800b5ac:	9b00      	ldr	r3, [sp, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	dd32      	ble.n	800b618 <_dtoa_r+0x3a0>
 800b5b2:	4ab7      	ldr	r2, [pc, #732]	; (800b890 <_dtoa_r+0x618>)
 800b5b4:	f003 030f 	and.w	r3, r3, #15
 800b5b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5c0:	9b00      	ldr	r3, [sp, #0]
 800b5c2:	05d8      	lsls	r0, r3, #23
 800b5c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b5c8:	d516      	bpl.n	800b5f8 <_dtoa_r+0x380>
 800b5ca:	4bb2      	ldr	r3, [pc, #712]	; (800b894 <_dtoa_r+0x61c>)
 800b5cc:	ec51 0b19 	vmov	r0, r1, d9
 800b5d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5d4:	f7f5 f952 	bl	800087c <__aeabi_ddiv>
 800b5d8:	f007 070f 	and.w	r7, r7, #15
 800b5dc:	4682      	mov	sl, r0
 800b5de:	468b      	mov	fp, r1
 800b5e0:	2503      	movs	r5, #3
 800b5e2:	4eac      	ldr	r6, [pc, #688]	; (800b894 <_dtoa_r+0x61c>)
 800b5e4:	b957      	cbnz	r7, 800b5fc <_dtoa_r+0x384>
 800b5e6:	4642      	mov	r2, r8
 800b5e8:	464b      	mov	r3, r9
 800b5ea:	4650      	mov	r0, sl
 800b5ec:	4659      	mov	r1, fp
 800b5ee:	f7f5 f945 	bl	800087c <__aeabi_ddiv>
 800b5f2:	4682      	mov	sl, r0
 800b5f4:	468b      	mov	fp, r1
 800b5f6:	e028      	b.n	800b64a <_dtoa_r+0x3d2>
 800b5f8:	2502      	movs	r5, #2
 800b5fa:	e7f2      	b.n	800b5e2 <_dtoa_r+0x36a>
 800b5fc:	07f9      	lsls	r1, r7, #31
 800b5fe:	d508      	bpl.n	800b612 <_dtoa_r+0x39a>
 800b600:	4640      	mov	r0, r8
 800b602:	4649      	mov	r1, r9
 800b604:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b608:	f7f5 f80e 	bl	8000628 <__aeabi_dmul>
 800b60c:	3501      	adds	r5, #1
 800b60e:	4680      	mov	r8, r0
 800b610:	4689      	mov	r9, r1
 800b612:	107f      	asrs	r7, r7, #1
 800b614:	3608      	adds	r6, #8
 800b616:	e7e5      	b.n	800b5e4 <_dtoa_r+0x36c>
 800b618:	f000 809b 	beq.w	800b752 <_dtoa_r+0x4da>
 800b61c:	9b00      	ldr	r3, [sp, #0]
 800b61e:	4f9d      	ldr	r7, [pc, #628]	; (800b894 <_dtoa_r+0x61c>)
 800b620:	425e      	negs	r6, r3
 800b622:	4b9b      	ldr	r3, [pc, #620]	; (800b890 <_dtoa_r+0x618>)
 800b624:	f006 020f 	and.w	r2, r6, #15
 800b628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	ec51 0b19 	vmov	r0, r1, d9
 800b634:	f7f4 fff8 	bl	8000628 <__aeabi_dmul>
 800b638:	1136      	asrs	r6, r6, #4
 800b63a:	4682      	mov	sl, r0
 800b63c:	468b      	mov	fp, r1
 800b63e:	2300      	movs	r3, #0
 800b640:	2502      	movs	r5, #2
 800b642:	2e00      	cmp	r6, #0
 800b644:	d17a      	bne.n	800b73c <_dtoa_r+0x4c4>
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1d3      	bne.n	800b5f2 <_dtoa_r+0x37a>
 800b64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 8082 	beq.w	800b756 <_dtoa_r+0x4de>
 800b652:	4b91      	ldr	r3, [pc, #580]	; (800b898 <_dtoa_r+0x620>)
 800b654:	2200      	movs	r2, #0
 800b656:	4650      	mov	r0, sl
 800b658:	4659      	mov	r1, fp
 800b65a:	f7f5 fa57 	bl	8000b0c <__aeabi_dcmplt>
 800b65e:	2800      	cmp	r0, #0
 800b660:	d079      	beq.n	800b756 <_dtoa_r+0x4de>
 800b662:	9b03      	ldr	r3, [sp, #12]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d076      	beq.n	800b756 <_dtoa_r+0x4de>
 800b668:	9b02      	ldr	r3, [sp, #8]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	dd36      	ble.n	800b6dc <_dtoa_r+0x464>
 800b66e:	9b00      	ldr	r3, [sp, #0]
 800b670:	4650      	mov	r0, sl
 800b672:	4659      	mov	r1, fp
 800b674:	1e5f      	subs	r7, r3, #1
 800b676:	2200      	movs	r2, #0
 800b678:	4b88      	ldr	r3, [pc, #544]	; (800b89c <_dtoa_r+0x624>)
 800b67a:	f7f4 ffd5 	bl	8000628 <__aeabi_dmul>
 800b67e:	9e02      	ldr	r6, [sp, #8]
 800b680:	4682      	mov	sl, r0
 800b682:	468b      	mov	fp, r1
 800b684:	3501      	adds	r5, #1
 800b686:	4628      	mov	r0, r5
 800b688:	f7f4 ff64 	bl	8000554 <__aeabi_i2d>
 800b68c:	4652      	mov	r2, sl
 800b68e:	465b      	mov	r3, fp
 800b690:	f7f4 ffca 	bl	8000628 <__aeabi_dmul>
 800b694:	4b82      	ldr	r3, [pc, #520]	; (800b8a0 <_dtoa_r+0x628>)
 800b696:	2200      	movs	r2, #0
 800b698:	f7f4 fe10 	bl	80002bc <__adddf3>
 800b69c:	46d0      	mov	r8, sl
 800b69e:	46d9      	mov	r9, fp
 800b6a0:	4682      	mov	sl, r0
 800b6a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b6a6:	2e00      	cmp	r6, #0
 800b6a8:	d158      	bne.n	800b75c <_dtoa_r+0x4e4>
 800b6aa:	4b7e      	ldr	r3, [pc, #504]	; (800b8a4 <_dtoa_r+0x62c>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	f7f4 fe01 	bl	80002b8 <__aeabi_dsub>
 800b6b6:	4652      	mov	r2, sl
 800b6b8:	465b      	mov	r3, fp
 800b6ba:	4680      	mov	r8, r0
 800b6bc:	4689      	mov	r9, r1
 800b6be:	f7f5 fa43 	bl	8000b48 <__aeabi_dcmpgt>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	f040 8295 	bne.w	800bbf2 <_dtoa_r+0x97a>
 800b6c8:	4652      	mov	r2, sl
 800b6ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6ce:	4640      	mov	r0, r8
 800b6d0:	4649      	mov	r1, r9
 800b6d2:	f7f5 fa1b 	bl	8000b0c <__aeabi_dcmplt>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	f040 8289 	bne.w	800bbee <_dtoa_r+0x976>
 800b6dc:	ec5b ab19 	vmov	sl, fp, d9
 800b6e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f2c0 8148 	blt.w	800b978 <_dtoa_r+0x700>
 800b6e8:	9a00      	ldr	r2, [sp, #0]
 800b6ea:	2a0e      	cmp	r2, #14
 800b6ec:	f300 8144 	bgt.w	800b978 <_dtoa_r+0x700>
 800b6f0:	4b67      	ldr	r3, [pc, #412]	; (800b890 <_dtoa_r+0x618>)
 800b6f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f280 80d5 	bge.w	800b8ac <_dtoa_r+0x634>
 800b702:	9b03      	ldr	r3, [sp, #12]
 800b704:	2b00      	cmp	r3, #0
 800b706:	f300 80d1 	bgt.w	800b8ac <_dtoa_r+0x634>
 800b70a:	f040 826f 	bne.w	800bbec <_dtoa_r+0x974>
 800b70e:	4b65      	ldr	r3, [pc, #404]	; (800b8a4 <_dtoa_r+0x62c>)
 800b710:	2200      	movs	r2, #0
 800b712:	4640      	mov	r0, r8
 800b714:	4649      	mov	r1, r9
 800b716:	f7f4 ff87 	bl	8000628 <__aeabi_dmul>
 800b71a:	4652      	mov	r2, sl
 800b71c:	465b      	mov	r3, fp
 800b71e:	f7f5 fa09 	bl	8000b34 <__aeabi_dcmpge>
 800b722:	9e03      	ldr	r6, [sp, #12]
 800b724:	4637      	mov	r7, r6
 800b726:	2800      	cmp	r0, #0
 800b728:	f040 8245 	bne.w	800bbb6 <_dtoa_r+0x93e>
 800b72c:	9d01      	ldr	r5, [sp, #4]
 800b72e:	2331      	movs	r3, #49	; 0x31
 800b730:	f805 3b01 	strb.w	r3, [r5], #1
 800b734:	9b00      	ldr	r3, [sp, #0]
 800b736:	3301      	adds	r3, #1
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	e240      	b.n	800bbbe <_dtoa_r+0x946>
 800b73c:	07f2      	lsls	r2, r6, #31
 800b73e:	d505      	bpl.n	800b74c <_dtoa_r+0x4d4>
 800b740:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b744:	f7f4 ff70 	bl	8000628 <__aeabi_dmul>
 800b748:	3501      	adds	r5, #1
 800b74a:	2301      	movs	r3, #1
 800b74c:	1076      	asrs	r6, r6, #1
 800b74e:	3708      	adds	r7, #8
 800b750:	e777      	b.n	800b642 <_dtoa_r+0x3ca>
 800b752:	2502      	movs	r5, #2
 800b754:	e779      	b.n	800b64a <_dtoa_r+0x3d2>
 800b756:	9f00      	ldr	r7, [sp, #0]
 800b758:	9e03      	ldr	r6, [sp, #12]
 800b75a:	e794      	b.n	800b686 <_dtoa_r+0x40e>
 800b75c:	9901      	ldr	r1, [sp, #4]
 800b75e:	4b4c      	ldr	r3, [pc, #304]	; (800b890 <_dtoa_r+0x618>)
 800b760:	4431      	add	r1, r6
 800b762:	910d      	str	r1, [sp, #52]	; 0x34
 800b764:	9908      	ldr	r1, [sp, #32]
 800b766:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b76a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b76e:	2900      	cmp	r1, #0
 800b770:	d043      	beq.n	800b7fa <_dtoa_r+0x582>
 800b772:	494d      	ldr	r1, [pc, #308]	; (800b8a8 <_dtoa_r+0x630>)
 800b774:	2000      	movs	r0, #0
 800b776:	f7f5 f881 	bl	800087c <__aeabi_ddiv>
 800b77a:	4652      	mov	r2, sl
 800b77c:	465b      	mov	r3, fp
 800b77e:	f7f4 fd9b 	bl	80002b8 <__aeabi_dsub>
 800b782:	9d01      	ldr	r5, [sp, #4]
 800b784:	4682      	mov	sl, r0
 800b786:	468b      	mov	fp, r1
 800b788:	4649      	mov	r1, r9
 800b78a:	4640      	mov	r0, r8
 800b78c:	f7f5 f9fc 	bl	8000b88 <__aeabi_d2iz>
 800b790:	4606      	mov	r6, r0
 800b792:	f7f4 fedf 	bl	8000554 <__aeabi_i2d>
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	4640      	mov	r0, r8
 800b79c:	4649      	mov	r1, r9
 800b79e:	f7f4 fd8b 	bl	80002b8 <__aeabi_dsub>
 800b7a2:	3630      	adds	r6, #48	; 0x30
 800b7a4:	f805 6b01 	strb.w	r6, [r5], #1
 800b7a8:	4652      	mov	r2, sl
 800b7aa:	465b      	mov	r3, fp
 800b7ac:	4680      	mov	r8, r0
 800b7ae:	4689      	mov	r9, r1
 800b7b0:	f7f5 f9ac 	bl	8000b0c <__aeabi_dcmplt>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d163      	bne.n	800b880 <_dtoa_r+0x608>
 800b7b8:	4642      	mov	r2, r8
 800b7ba:	464b      	mov	r3, r9
 800b7bc:	4936      	ldr	r1, [pc, #216]	; (800b898 <_dtoa_r+0x620>)
 800b7be:	2000      	movs	r0, #0
 800b7c0:	f7f4 fd7a 	bl	80002b8 <__aeabi_dsub>
 800b7c4:	4652      	mov	r2, sl
 800b7c6:	465b      	mov	r3, fp
 800b7c8:	f7f5 f9a0 	bl	8000b0c <__aeabi_dcmplt>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	f040 80b5 	bne.w	800b93c <_dtoa_r+0x6c4>
 800b7d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7d4:	429d      	cmp	r5, r3
 800b7d6:	d081      	beq.n	800b6dc <_dtoa_r+0x464>
 800b7d8:	4b30      	ldr	r3, [pc, #192]	; (800b89c <_dtoa_r+0x624>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	4650      	mov	r0, sl
 800b7de:	4659      	mov	r1, fp
 800b7e0:	f7f4 ff22 	bl	8000628 <__aeabi_dmul>
 800b7e4:	4b2d      	ldr	r3, [pc, #180]	; (800b89c <_dtoa_r+0x624>)
 800b7e6:	4682      	mov	sl, r0
 800b7e8:	468b      	mov	fp, r1
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f7f4 ff1a 	bl	8000628 <__aeabi_dmul>
 800b7f4:	4680      	mov	r8, r0
 800b7f6:	4689      	mov	r9, r1
 800b7f8:	e7c6      	b.n	800b788 <_dtoa_r+0x510>
 800b7fa:	4650      	mov	r0, sl
 800b7fc:	4659      	mov	r1, fp
 800b7fe:	f7f4 ff13 	bl	8000628 <__aeabi_dmul>
 800b802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b804:	9d01      	ldr	r5, [sp, #4]
 800b806:	930f      	str	r3, [sp, #60]	; 0x3c
 800b808:	4682      	mov	sl, r0
 800b80a:	468b      	mov	fp, r1
 800b80c:	4649      	mov	r1, r9
 800b80e:	4640      	mov	r0, r8
 800b810:	f7f5 f9ba 	bl	8000b88 <__aeabi_d2iz>
 800b814:	4606      	mov	r6, r0
 800b816:	f7f4 fe9d 	bl	8000554 <__aeabi_i2d>
 800b81a:	3630      	adds	r6, #48	; 0x30
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4640      	mov	r0, r8
 800b822:	4649      	mov	r1, r9
 800b824:	f7f4 fd48 	bl	80002b8 <__aeabi_dsub>
 800b828:	f805 6b01 	strb.w	r6, [r5], #1
 800b82c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b82e:	429d      	cmp	r5, r3
 800b830:	4680      	mov	r8, r0
 800b832:	4689      	mov	r9, r1
 800b834:	f04f 0200 	mov.w	r2, #0
 800b838:	d124      	bne.n	800b884 <_dtoa_r+0x60c>
 800b83a:	4b1b      	ldr	r3, [pc, #108]	; (800b8a8 <_dtoa_r+0x630>)
 800b83c:	4650      	mov	r0, sl
 800b83e:	4659      	mov	r1, fp
 800b840:	f7f4 fd3c 	bl	80002bc <__adddf3>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4640      	mov	r0, r8
 800b84a:	4649      	mov	r1, r9
 800b84c:	f7f5 f97c 	bl	8000b48 <__aeabi_dcmpgt>
 800b850:	2800      	cmp	r0, #0
 800b852:	d173      	bne.n	800b93c <_dtoa_r+0x6c4>
 800b854:	4652      	mov	r2, sl
 800b856:	465b      	mov	r3, fp
 800b858:	4913      	ldr	r1, [pc, #76]	; (800b8a8 <_dtoa_r+0x630>)
 800b85a:	2000      	movs	r0, #0
 800b85c:	f7f4 fd2c 	bl	80002b8 <__aeabi_dsub>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	4640      	mov	r0, r8
 800b866:	4649      	mov	r1, r9
 800b868:	f7f5 f950 	bl	8000b0c <__aeabi_dcmplt>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	f43f af35 	beq.w	800b6dc <_dtoa_r+0x464>
 800b872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b874:	1e6b      	subs	r3, r5, #1
 800b876:	930f      	str	r3, [sp, #60]	; 0x3c
 800b878:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b87c:	2b30      	cmp	r3, #48	; 0x30
 800b87e:	d0f8      	beq.n	800b872 <_dtoa_r+0x5fa>
 800b880:	9700      	str	r7, [sp, #0]
 800b882:	e049      	b.n	800b918 <_dtoa_r+0x6a0>
 800b884:	4b05      	ldr	r3, [pc, #20]	; (800b89c <_dtoa_r+0x624>)
 800b886:	f7f4 fecf 	bl	8000628 <__aeabi_dmul>
 800b88a:	4680      	mov	r8, r0
 800b88c:	4689      	mov	r9, r1
 800b88e:	e7bd      	b.n	800b80c <_dtoa_r+0x594>
 800b890:	0800e8b0 	.word	0x0800e8b0
 800b894:	0800e888 	.word	0x0800e888
 800b898:	3ff00000 	.word	0x3ff00000
 800b89c:	40240000 	.word	0x40240000
 800b8a0:	401c0000 	.word	0x401c0000
 800b8a4:	40140000 	.word	0x40140000
 800b8a8:	3fe00000 	.word	0x3fe00000
 800b8ac:	9d01      	ldr	r5, [sp, #4]
 800b8ae:	4656      	mov	r6, sl
 800b8b0:	465f      	mov	r7, fp
 800b8b2:	4642      	mov	r2, r8
 800b8b4:	464b      	mov	r3, r9
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	f7f4 ffdf 	bl	800087c <__aeabi_ddiv>
 800b8be:	f7f5 f963 	bl	8000b88 <__aeabi_d2iz>
 800b8c2:	4682      	mov	sl, r0
 800b8c4:	f7f4 fe46 	bl	8000554 <__aeabi_i2d>
 800b8c8:	4642      	mov	r2, r8
 800b8ca:	464b      	mov	r3, r9
 800b8cc:	f7f4 feac 	bl	8000628 <__aeabi_dmul>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b8dc:	f7f4 fcec 	bl	80002b8 <__aeabi_dsub>
 800b8e0:	f805 6b01 	strb.w	r6, [r5], #1
 800b8e4:	9e01      	ldr	r6, [sp, #4]
 800b8e6:	9f03      	ldr	r7, [sp, #12]
 800b8e8:	1bae      	subs	r6, r5, r6
 800b8ea:	42b7      	cmp	r7, r6
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	d135      	bne.n	800b95e <_dtoa_r+0x6e6>
 800b8f2:	f7f4 fce3 	bl	80002bc <__adddf3>
 800b8f6:	4642      	mov	r2, r8
 800b8f8:	464b      	mov	r3, r9
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460f      	mov	r7, r1
 800b8fe:	f7f5 f923 	bl	8000b48 <__aeabi_dcmpgt>
 800b902:	b9d0      	cbnz	r0, 800b93a <_dtoa_r+0x6c2>
 800b904:	4642      	mov	r2, r8
 800b906:	464b      	mov	r3, r9
 800b908:	4630      	mov	r0, r6
 800b90a:	4639      	mov	r1, r7
 800b90c:	f7f5 f8f4 	bl	8000af8 <__aeabi_dcmpeq>
 800b910:	b110      	cbz	r0, 800b918 <_dtoa_r+0x6a0>
 800b912:	f01a 0f01 	tst.w	sl, #1
 800b916:	d110      	bne.n	800b93a <_dtoa_r+0x6c2>
 800b918:	4620      	mov	r0, r4
 800b91a:	ee18 1a10 	vmov	r1, s16
 800b91e:	f000 fd13 	bl	800c348 <_Bfree>
 800b922:	2300      	movs	r3, #0
 800b924:	9800      	ldr	r0, [sp, #0]
 800b926:	702b      	strb	r3, [r5, #0]
 800b928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b92a:	3001      	adds	r0, #1
 800b92c:	6018      	str	r0, [r3, #0]
 800b92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b930:	2b00      	cmp	r3, #0
 800b932:	f43f acf1 	beq.w	800b318 <_dtoa_r+0xa0>
 800b936:	601d      	str	r5, [r3, #0]
 800b938:	e4ee      	b.n	800b318 <_dtoa_r+0xa0>
 800b93a:	9f00      	ldr	r7, [sp, #0]
 800b93c:	462b      	mov	r3, r5
 800b93e:	461d      	mov	r5, r3
 800b940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b944:	2a39      	cmp	r2, #57	; 0x39
 800b946:	d106      	bne.n	800b956 <_dtoa_r+0x6de>
 800b948:	9a01      	ldr	r2, [sp, #4]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d1f7      	bne.n	800b93e <_dtoa_r+0x6c6>
 800b94e:	9901      	ldr	r1, [sp, #4]
 800b950:	2230      	movs	r2, #48	; 0x30
 800b952:	3701      	adds	r7, #1
 800b954:	700a      	strb	r2, [r1, #0]
 800b956:	781a      	ldrb	r2, [r3, #0]
 800b958:	3201      	adds	r2, #1
 800b95a:	701a      	strb	r2, [r3, #0]
 800b95c:	e790      	b.n	800b880 <_dtoa_r+0x608>
 800b95e:	4ba6      	ldr	r3, [pc, #664]	; (800bbf8 <_dtoa_r+0x980>)
 800b960:	2200      	movs	r2, #0
 800b962:	f7f4 fe61 	bl	8000628 <__aeabi_dmul>
 800b966:	2200      	movs	r2, #0
 800b968:	2300      	movs	r3, #0
 800b96a:	4606      	mov	r6, r0
 800b96c:	460f      	mov	r7, r1
 800b96e:	f7f5 f8c3 	bl	8000af8 <__aeabi_dcmpeq>
 800b972:	2800      	cmp	r0, #0
 800b974:	d09d      	beq.n	800b8b2 <_dtoa_r+0x63a>
 800b976:	e7cf      	b.n	800b918 <_dtoa_r+0x6a0>
 800b978:	9a08      	ldr	r2, [sp, #32]
 800b97a:	2a00      	cmp	r2, #0
 800b97c:	f000 80d7 	beq.w	800bb2e <_dtoa_r+0x8b6>
 800b980:	9a06      	ldr	r2, [sp, #24]
 800b982:	2a01      	cmp	r2, #1
 800b984:	f300 80ba 	bgt.w	800bafc <_dtoa_r+0x884>
 800b988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b98a:	2a00      	cmp	r2, #0
 800b98c:	f000 80b2 	beq.w	800baf4 <_dtoa_r+0x87c>
 800b990:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b994:	9e07      	ldr	r6, [sp, #28]
 800b996:	9d04      	ldr	r5, [sp, #16]
 800b998:	9a04      	ldr	r2, [sp, #16]
 800b99a:	441a      	add	r2, r3
 800b99c:	9204      	str	r2, [sp, #16]
 800b99e:	9a05      	ldr	r2, [sp, #20]
 800b9a0:	2101      	movs	r1, #1
 800b9a2:	441a      	add	r2, r3
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	9205      	str	r2, [sp, #20]
 800b9a8:	f000 fd86 	bl	800c4b8 <__i2b>
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	2d00      	cmp	r5, #0
 800b9b0:	dd0c      	ble.n	800b9cc <_dtoa_r+0x754>
 800b9b2:	9b05      	ldr	r3, [sp, #20]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	dd09      	ble.n	800b9cc <_dtoa_r+0x754>
 800b9b8:	42ab      	cmp	r3, r5
 800b9ba:	9a04      	ldr	r2, [sp, #16]
 800b9bc:	bfa8      	it	ge
 800b9be:	462b      	movge	r3, r5
 800b9c0:	1ad2      	subs	r2, r2, r3
 800b9c2:	9204      	str	r2, [sp, #16]
 800b9c4:	9a05      	ldr	r2, [sp, #20]
 800b9c6:	1aed      	subs	r5, r5, r3
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	9305      	str	r3, [sp, #20]
 800b9cc:	9b07      	ldr	r3, [sp, #28]
 800b9ce:	b31b      	cbz	r3, 800ba18 <_dtoa_r+0x7a0>
 800b9d0:	9b08      	ldr	r3, [sp, #32]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f000 80af 	beq.w	800bb36 <_dtoa_r+0x8be>
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	dd13      	ble.n	800ba04 <_dtoa_r+0x78c>
 800b9dc:	4639      	mov	r1, r7
 800b9de:	4632      	mov	r2, r6
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f000 fe29 	bl	800c638 <__pow5mult>
 800b9e6:	ee18 2a10 	vmov	r2, s16
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	4607      	mov	r7, r0
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 fd78 	bl	800c4e4 <__multiply>
 800b9f4:	ee18 1a10 	vmov	r1, s16
 800b9f8:	4680      	mov	r8, r0
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 fca4 	bl	800c348 <_Bfree>
 800ba00:	ee08 8a10 	vmov	s16, r8
 800ba04:	9b07      	ldr	r3, [sp, #28]
 800ba06:	1b9a      	subs	r2, r3, r6
 800ba08:	d006      	beq.n	800ba18 <_dtoa_r+0x7a0>
 800ba0a:	ee18 1a10 	vmov	r1, s16
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f000 fe12 	bl	800c638 <__pow5mult>
 800ba14:	ee08 0a10 	vmov	s16, r0
 800ba18:	2101      	movs	r1, #1
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f000 fd4c 	bl	800c4b8 <__i2b>
 800ba20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	4606      	mov	r6, r0
 800ba26:	f340 8088 	ble.w	800bb3a <_dtoa_r+0x8c2>
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	4601      	mov	r1, r0
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 fe02 	bl	800c638 <__pow5mult>
 800ba34:	9b06      	ldr	r3, [sp, #24]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	4606      	mov	r6, r0
 800ba3a:	f340 8081 	ble.w	800bb40 <_dtoa_r+0x8c8>
 800ba3e:	f04f 0800 	mov.w	r8, #0
 800ba42:	6933      	ldr	r3, [r6, #16]
 800ba44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba48:	6918      	ldr	r0, [r3, #16]
 800ba4a:	f000 fce5 	bl	800c418 <__hi0bits>
 800ba4e:	f1c0 0020 	rsb	r0, r0, #32
 800ba52:	9b05      	ldr	r3, [sp, #20]
 800ba54:	4418      	add	r0, r3
 800ba56:	f010 001f 	ands.w	r0, r0, #31
 800ba5a:	f000 8092 	beq.w	800bb82 <_dtoa_r+0x90a>
 800ba5e:	f1c0 0320 	rsb	r3, r0, #32
 800ba62:	2b04      	cmp	r3, #4
 800ba64:	f340 808a 	ble.w	800bb7c <_dtoa_r+0x904>
 800ba68:	f1c0 001c 	rsb	r0, r0, #28
 800ba6c:	9b04      	ldr	r3, [sp, #16]
 800ba6e:	4403      	add	r3, r0
 800ba70:	9304      	str	r3, [sp, #16]
 800ba72:	9b05      	ldr	r3, [sp, #20]
 800ba74:	4403      	add	r3, r0
 800ba76:	4405      	add	r5, r0
 800ba78:	9305      	str	r3, [sp, #20]
 800ba7a:	9b04      	ldr	r3, [sp, #16]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	dd07      	ble.n	800ba90 <_dtoa_r+0x818>
 800ba80:	ee18 1a10 	vmov	r1, s16
 800ba84:	461a      	mov	r2, r3
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 fe30 	bl	800c6ec <__lshift>
 800ba8c:	ee08 0a10 	vmov	s16, r0
 800ba90:	9b05      	ldr	r3, [sp, #20]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dd05      	ble.n	800baa2 <_dtoa_r+0x82a>
 800ba96:	4631      	mov	r1, r6
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 fe26 	bl	800c6ec <__lshift>
 800baa0:	4606      	mov	r6, r0
 800baa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d06e      	beq.n	800bb86 <_dtoa_r+0x90e>
 800baa8:	ee18 0a10 	vmov	r0, s16
 800baac:	4631      	mov	r1, r6
 800baae:	f000 fe8d 	bl	800c7cc <__mcmp>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	da67      	bge.n	800bb86 <_dtoa_r+0x90e>
 800bab6:	9b00      	ldr	r3, [sp, #0]
 800bab8:	3b01      	subs	r3, #1
 800baba:	ee18 1a10 	vmov	r1, s16
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	220a      	movs	r2, #10
 800bac2:	2300      	movs	r3, #0
 800bac4:	4620      	mov	r0, r4
 800bac6:	f000 fc61 	bl	800c38c <__multadd>
 800baca:	9b08      	ldr	r3, [sp, #32]
 800bacc:	ee08 0a10 	vmov	s16, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f000 81b1 	beq.w	800be38 <_dtoa_r+0xbc0>
 800bad6:	2300      	movs	r3, #0
 800bad8:	4639      	mov	r1, r7
 800bada:	220a      	movs	r2, #10
 800badc:	4620      	mov	r0, r4
 800bade:	f000 fc55 	bl	800c38c <__multadd>
 800bae2:	9b02      	ldr	r3, [sp, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	4607      	mov	r7, r0
 800bae8:	f300 808e 	bgt.w	800bc08 <_dtoa_r+0x990>
 800baec:	9b06      	ldr	r3, [sp, #24]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	dc51      	bgt.n	800bb96 <_dtoa_r+0x91e>
 800baf2:	e089      	b.n	800bc08 <_dtoa_r+0x990>
 800baf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800baf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bafa:	e74b      	b.n	800b994 <_dtoa_r+0x71c>
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	1e5e      	subs	r6, r3, #1
 800bb00:	9b07      	ldr	r3, [sp, #28]
 800bb02:	42b3      	cmp	r3, r6
 800bb04:	bfbf      	itttt	lt
 800bb06:	9b07      	ldrlt	r3, [sp, #28]
 800bb08:	9607      	strlt	r6, [sp, #28]
 800bb0a:	1af2      	sublt	r2, r6, r3
 800bb0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb0e:	bfb6      	itet	lt
 800bb10:	189b      	addlt	r3, r3, r2
 800bb12:	1b9e      	subge	r6, r3, r6
 800bb14:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	bfb8      	it	lt
 800bb1a:	2600      	movlt	r6, #0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	bfb7      	itett	lt
 800bb20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bb24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bb28:	1a9d      	sublt	r5, r3, r2
 800bb2a:	2300      	movlt	r3, #0
 800bb2c:	e734      	b.n	800b998 <_dtoa_r+0x720>
 800bb2e:	9e07      	ldr	r6, [sp, #28]
 800bb30:	9d04      	ldr	r5, [sp, #16]
 800bb32:	9f08      	ldr	r7, [sp, #32]
 800bb34:	e73b      	b.n	800b9ae <_dtoa_r+0x736>
 800bb36:	9a07      	ldr	r2, [sp, #28]
 800bb38:	e767      	b.n	800ba0a <_dtoa_r+0x792>
 800bb3a:	9b06      	ldr	r3, [sp, #24]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	dc18      	bgt.n	800bb72 <_dtoa_r+0x8fa>
 800bb40:	f1ba 0f00 	cmp.w	sl, #0
 800bb44:	d115      	bne.n	800bb72 <_dtoa_r+0x8fa>
 800bb46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb4a:	b993      	cbnz	r3, 800bb72 <_dtoa_r+0x8fa>
 800bb4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb50:	0d1b      	lsrs	r3, r3, #20
 800bb52:	051b      	lsls	r3, r3, #20
 800bb54:	b183      	cbz	r3, 800bb78 <_dtoa_r+0x900>
 800bb56:	9b04      	ldr	r3, [sp, #16]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	9304      	str	r3, [sp, #16]
 800bb5c:	9b05      	ldr	r3, [sp, #20]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	9305      	str	r3, [sp, #20]
 800bb62:	f04f 0801 	mov.w	r8, #1
 800bb66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f47f af6a 	bne.w	800ba42 <_dtoa_r+0x7ca>
 800bb6e:	2001      	movs	r0, #1
 800bb70:	e76f      	b.n	800ba52 <_dtoa_r+0x7da>
 800bb72:	f04f 0800 	mov.w	r8, #0
 800bb76:	e7f6      	b.n	800bb66 <_dtoa_r+0x8ee>
 800bb78:	4698      	mov	r8, r3
 800bb7a:	e7f4      	b.n	800bb66 <_dtoa_r+0x8ee>
 800bb7c:	f43f af7d 	beq.w	800ba7a <_dtoa_r+0x802>
 800bb80:	4618      	mov	r0, r3
 800bb82:	301c      	adds	r0, #28
 800bb84:	e772      	b.n	800ba6c <_dtoa_r+0x7f4>
 800bb86:	9b03      	ldr	r3, [sp, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	dc37      	bgt.n	800bbfc <_dtoa_r+0x984>
 800bb8c:	9b06      	ldr	r3, [sp, #24]
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	dd34      	ble.n	800bbfc <_dtoa_r+0x984>
 800bb92:	9b03      	ldr	r3, [sp, #12]
 800bb94:	9302      	str	r3, [sp, #8]
 800bb96:	9b02      	ldr	r3, [sp, #8]
 800bb98:	b96b      	cbnz	r3, 800bbb6 <_dtoa_r+0x93e>
 800bb9a:	4631      	mov	r1, r6
 800bb9c:	2205      	movs	r2, #5
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 fbf4 	bl	800c38c <__multadd>
 800bba4:	4601      	mov	r1, r0
 800bba6:	4606      	mov	r6, r0
 800bba8:	ee18 0a10 	vmov	r0, s16
 800bbac:	f000 fe0e 	bl	800c7cc <__mcmp>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	f73f adbb 	bgt.w	800b72c <_dtoa_r+0x4b4>
 800bbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb8:	9d01      	ldr	r5, [sp, #4]
 800bbba:	43db      	mvns	r3, r3
 800bbbc:	9300      	str	r3, [sp, #0]
 800bbbe:	f04f 0800 	mov.w	r8, #0
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f000 fbbf 	bl	800c348 <_Bfree>
 800bbca:	2f00      	cmp	r7, #0
 800bbcc:	f43f aea4 	beq.w	800b918 <_dtoa_r+0x6a0>
 800bbd0:	f1b8 0f00 	cmp.w	r8, #0
 800bbd4:	d005      	beq.n	800bbe2 <_dtoa_r+0x96a>
 800bbd6:	45b8      	cmp	r8, r7
 800bbd8:	d003      	beq.n	800bbe2 <_dtoa_r+0x96a>
 800bbda:	4641      	mov	r1, r8
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f000 fbb3 	bl	800c348 <_Bfree>
 800bbe2:	4639      	mov	r1, r7
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f000 fbaf 	bl	800c348 <_Bfree>
 800bbea:	e695      	b.n	800b918 <_dtoa_r+0x6a0>
 800bbec:	2600      	movs	r6, #0
 800bbee:	4637      	mov	r7, r6
 800bbf0:	e7e1      	b.n	800bbb6 <_dtoa_r+0x93e>
 800bbf2:	9700      	str	r7, [sp, #0]
 800bbf4:	4637      	mov	r7, r6
 800bbf6:	e599      	b.n	800b72c <_dtoa_r+0x4b4>
 800bbf8:	40240000 	.word	0x40240000
 800bbfc:	9b08      	ldr	r3, [sp, #32]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f000 80ca 	beq.w	800bd98 <_dtoa_r+0xb20>
 800bc04:	9b03      	ldr	r3, [sp, #12]
 800bc06:	9302      	str	r3, [sp, #8]
 800bc08:	2d00      	cmp	r5, #0
 800bc0a:	dd05      	ble.n	800bc18 <_dtoa_r+0x9a0>
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	462a      	mov	r2, r5
 800bc10:	4620      	mov	r0, r4
 800bc12:	f000 fd6b 	bl	800c6ec <__lshift>
 800bc16:	4607      	mov	r7, r0
 800bc18:	f1b8 0f00 	cmp.w	r8, #0
 800bc1c:	d05b      	beq.n	800bcd6 <_dtoa_r+0xa5e>
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	4620      	mov	r0, r4
 800bc22:	f000 fb51 	bl	800c2c8 <_Balloc>
 800bc26:	4605      	mov	r5, r0
 800bc28:	b928      	cbnz	r0, 800bc36 <_dtoa_r+0x9be>
 800bc2a:	4b87      	ldr	r3, [pc, #540]	; (800be48 <_dtoa_r+0xbd0>)
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc32:	f7ff bb3b 	b.w	800b2ac <_dtoa_r+0x34>
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	3202      	adds	r2, #2
 800bc3a:	0092      	lsls	r2, r2, #2
 800bc3c:	f107 010c 	add.w	r1, r7, #12
 800bc40:	300c      	adds	r0, #12
 800bc42:	f000 fb33 	bl	800c2ac <memcpy>
 800bc46:	2201      	movs	r2, #1
 800bc48:	4629      	mov	r1, r5
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f000 fd4e 	bl	800c6ec <__lshift>
 800bc50:	9b01      	ldr	r3, [sp, #4]
 800bc52:	f103 0901 	add.w	r9, r3, #1
 800bc56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	9305      	str	r3, [sp, #20]
 800bc5e:	f00a 0301 	and.w	r3, sl, #1
 800bc62:	46b8      	mov	r8, r7
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	4607      	mov	r7, r0
 800bc68:	4631      	mov	r1, r6
 800bc6a:	ee18 0a10 	vmov	r0, s16
 800bc6e:	f7ff fa75 	bl	800b15c <quorem>
 800bc72:	4641      	mov	r1, r8
 800bc74:	9002      	str	r0, [sp, #8]
 800bc76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc7a:	ee18 0a10 	vmov	r0, s16
 800bc7e:	f000 fda5 	bl	800c7cc <__mcmp>
 800bc82:	463a      	mov	r2, r7
 800bc84:	9003      	str	r0, [sp, #12]
 800bc86:	4631      	mov	r1, r6
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f000 fdbb 	bl	800c804 <__mdiff>
 800bc8e:	68c2      	ldr	r2, [r0, #12]
 800bc90:	f109 3bff 	add.w	fp, r9, #4294967295
 800bc94:	4605      	mov	r5, r0
 800bc96:	bb02      	cbnz	r2, 800bcda <_dtoa_r+0xa62>
 800bc98:	4601      	mov	r1, r0
 800bc9a:	ee18 0a10 	vmov	r0, s16
 800bc9e:	f000 fd95 	bl	800c7cc <__mcmp>
 800bca2:	4602      	mov	r2, r0
 800bca4:	4629      	mov	r1, r5
 800bca6:	4620      	mov	r0, r4
 800bca8:	9207      	str	r2, [sp, #28]
 800bcaa:	f000 fb4d 	bl	800c348 <_Bfree>
 800bcae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bcb2:	ea43 0102 	orr.w	r1, r3, r2
 800bcb6:	9b04      	ldr	r3, [sp, #16]
 800bcb8:	430b      	orrs	r3, r1
 800bcba:	464d      	mov	r5, r9
 800bcbc:	d10f      	bne.n	800bcde <_dtoa_r+0xa66>
 800bcbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcc2:	d02a      	beq.n	800bd1a <_dtoa_r+0xaa2>
 800bcc4:	9b03      	ldr	r3, [sp, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	dd02      	ble.n	800bcd0 <_dtoa_r+0xa58>
 800bcca:	9b02      	ldr	r3, [sp, #8]
 800bccc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bcd0:	f88b a000 	strb.w	sl, [fp]
 800bcd4:	e775      	b.n	800bbc2 <_dtoa_r+0x94a>
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	e7ba      	b.n	800bc50 <_dtoa_r+0x9d8>
 800bcda:	2201      	movs	r2, #1
 800bcdc:	e7e2      	b.n	800bca4 <_dtoa_r+0xa2c>
 800bcde:	9b03      	ldr	r3, [sp, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	db04      	blt.n	800bcee <_dtoa_r+0xa76>
 800bce4:	9906      	ldr	r1, [sp, #24]
 800bce6:	430b      	orrs	r3, r1
 800bce8:	9904      	ldr	r1, [sp, #16]
 800bcea:	430b      	orrs	r3, r1
 800bcec:	d122      	bne.n	800bd34 <_dtoa_r+0xabc>
 800bcee:	2a00      	cmp	r2, #0
 800bcf0:	ddee      	ble.n	800bcd0 <_dtoa_r+0xa58>
 800bcf2:	ee18 1a10 	vmov	r1, s16
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 fcf7 	bl	800c6ec <__lshift>
 800bcfe:	4631      	mov	r1, r6
 800bd00:	ee08 0a10 	vmov	s16, r0
 800bd04:	f000 fd62 	bl	800c7cc <__mcmp>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	dc03      	bgt.n	800bd14 <_dtoa_r+0xa9c>
 800bd0c:	d1e0      	bne.n	800bcd0 <_dtoa_r+0xa58>
 800bd0e:	f01a 0f01 	tst.w	sl, #1
 800bd12:	d0dd      	beq.n	800bcd0 <_dtoa_r+0xa58>
 800bd14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd18:	d1d7      	bne.n	800bcca <_dtoa_r+0xa52>
 800bd1a:	2339      	movs	r3, #57	; 0x39
 800bd1c:	f88b 3000 	strb.w	r3, [fp]
 800bd20:	462b      	mov	r3, r5
 800bd22:	461d      	mov	r5, r3
 800bd24:	3b01      	subs	r3, #1
 800bd26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd2a:	2a39      	cmp	r2, #57	; 0x39
 800bd2c:	d071      	beq.n	800be12 <_dtoa_r+0xb9a>
 800bd2e:	3201      	adds	r2, #1
 800bd30:	701a      	strb	r2, [r3, #0]
 800bd32:	e746      	b.n	800bbc2 <_dtoa_r+0x94a>
 800bd34:	2a00      	cmp	r2, #0
 800bd36:	dd07      	ble.n	800bd48 <_dtoa_r+0xad0>
 800bd38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd3c:	d0ed      	beq.n	800bd1a <_dtoa_r+0xaa2>
 800bd3e:	f10a 0301 	add.w	r3, sl, #1
 800bd42:	f88b 3000 	strb.w	r3, [fp]
 800bd46:	e73c      	b.n	800bbc2 <_dtoa_r+0x94a>
 800bd48:	9b05      	ldr	r3, [sp, #20]
 800bd4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bd4e:	4599      	cmp	r9, r3
 800bd50:	d047      	beq.n	800bde2 <_dtoa_r+0xb6a>
 800bd52:	ee18 1a10 	vmov	r1, s16
 800bd56:	2300      	movs	r3, #0
 800bd58:	220a      	movs	r2, #10
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f000 fb16 	bl	800c38c <__multadd>
 800bd60:	45b8      	cmp	r8, r7
 800bd62:	ee08 0a10 	vmov	s16, r0
 800bd66:	f04f 0300 	mov.w	r3, #0
 800bd6a:	f04f 020a 	mov.w	r2, #10
 800bd6e:	4641      	mov	r1, r8
 800bd70:	4620      	mov	r0, r4
 800bd72:	d106      	bne.n	800bd82 <_dtoa_r+0xb0a>
 800bd74:	f000 fb0a 	bl	800c38c <__multadd>
 800bd78:	4680      	mov	r8, r0
 800bd7a:	4607      	mov	r7, r0
 800bd7c:	f109 0901 	add.w	r9, r9, #1
 800bd80:	e772      	b.n	800bc68 <_dtoa_r+0x9f0>
 800bd82:	f000 fb03 	bl	800c38c <__multadd>
 800bd86:	4639      	mov	r1, r7
 800bd88:	4680      	mov	r8, r0
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	220a      	movs	r2, #10
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 fafc 	bl	800c38c <__multadd>
 800bd94:	4607      	mov	r7, r0
 800bd96:	e7f1      	b.n	800bd7c <_dtoa_r+0xb04>
 800bd98:	9b03      	ldr	r3, [sp, #12]
 800bd9a:	9302      	str	r3, [sp, #8]
 800bd9c:	9d01      	ldr	r5, [sp, #4]
 800bd9e:	ee18 0a10 	vmov	r0, s16
 800bda2:	4631      	mov	r1, r6
 800bda4:	f7ff f9da 	bl	800b15c <quorem>
 800bda8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bdac:	9b01      	ldr	r3, [sp, #4]
 800bdae:	f805 ab01 	strb.w	sl, [r5], #1
 800bdb2:	1aea      	subs	r2, r5, r3
 800bdb4:	9b02      	ldr	r3, [sp, #8]
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	dd09      	ble.n	800bdce <_dtoa_r+0xb56>
 800bdba:	ee18 1a10 	vmov	r1, s16
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	220a      	movs	r2, #10
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 fae2 	bl	800c38c <__multadd>
 800bdc8:	ee08 0a10 	vmov	s16, r0
 800bdcc:	e7e7      	b.n	800bd9e <_dtoa_r+0xb26>
 800bdce:	9b02      	ldr	r3, [sp, #8]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	bfc8      	it	gt
 800bdd4:	461d      	movgt	r5, r3
 800bdd6:	9b01      	ldr	r3, [sp, #4]
 800bdd8:	bfd8      	it	le
 800bdda:	2501      	movle	r5, #1
 800bddc:	441d      	add	r5, r3
 800bdde:	f04f 0800 	mov.w	r8, #0
 800bde2:	ee18 1a10 	vmov	r1, s16
 800bde6:	2201      	movs	r2, #1
 800bde8:	4620      	mov	r0, r4
 800bdea:	f000 fc7f 	bl	800c6ec <__lshift>
 800bdee:	4631      	mov	r1, r6
 800bdf0:	ee08 0a10 	vmov	s16, r0
 800bdf4:	f000 fcea 	bl	800c7cc <__mcmp>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	dc91      	bgt.n	800bd20 <_dtoa_r+0xaa8>
 800bdfc:	d102      	bne.n	800be04 <_dtoa_r+0xb8c>
 800bdfe:	f01a 0f01 	tst.w	sl, #1
 800be02:	d18d      	bne.n	800bd20 <_dtoa_r+0xaa8>
 800be04:	462b      	mov	r3, r5
 800be06:	461d      	mov	r5, r3
 800be08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be0c:	2a30      	cmp	r2, #48	; 0x30
 800be0e:	d0fa      	beq.n	800be06 <_dtoa_r+0xb8e>
 800be10:	e6d7      	b.n	800bbc2 <_dtoa_r+0x94a>
 800be12:	9a01      	ldr	r2, [sp, #4]
 800be14:	429a      	cmp	r2, r3
 800be16:	d184      	bne.n	800bd22 <_dtoa_r+0xaaa>
 800be18:	9b00      	ldr	r3, [sp, #0]
 800be1a:	3301      	adds	r3, #1
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	2331      	movs	r3, #49	; 0x31
 800be20:	7013      	strb	r3, [r2, #0]
 800be22:	e6ce      	b.n	800bbc2 <_dtoa_r+0x94a>
 800be24:	4b09      	ldr	r3, [pc, #36]	; (800be4c <_dtoa_r+0xbd4>)
 800be26:	f7ff ba95 	b.w	800b354 <_dtoa_r+0xdc>
 800be2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f47f aa6e 	bne.w	800b30e <_dtoa_r+0x96>
 800be32:	4b07      	ldr	r3, [pc, #28]	; (800be50 <_dtoa_r+0xbd8>)
 800be34:	f7ff ba8e 	b.w	800b354 <_dtoa_r+0xdc>
 800be38:	9b02      	ldr	r3, [sp, #8]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	dcae      	bgt.n	800bd9c <_dtoa_r+0xb24>
 800be3e:	9b06      	ldr	r3, [sp, #24]
 800be40:	2b02      	cmp	r3, #2
 800be42:	f73f aea8 	bgt.w	800bb96 <_dtoa_r+0x91e>
 800be46:	e7a9      	b.n	800bd9c <_dtoa_r+0xb24>
 800be48:	0800e7b7 	.word	0x0800e7b7
 800be4c:	0800e714 	.word	0x0800e714
 800be50:	0800e738 	.word	0x0800e738

0800be54 <__sflush_r>:
 800be54:	898a      	ldrh	r2, [r1, #12]
 800be56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5a:	4605      	mov	r5, r0
 800be5c:	0710      	lsls	r0, r2, #28
 800be5e:	460c      	mov	r4, r1
 800be60:	d458      	bmi.n	800bf14 <__sflush_r+0xc0>
 800be62:	684b      	ldr	r3, [r1, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	dc05      	bgt.n	800be74 <__sflush_r+0x20>
 800be68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	dc02      	bgt.n	800be74 <__sflush_r+0x20>
 800be6e:	2000      	movs	r0, #0
 800be70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be76:	2e00      	cmp	r6, #0
 800be78:	d0f9      	beq.n	800be6e <__sflush_r+0x1a>
 800be7a:	2300      	movs	r3, #0
 800be7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be80:	682f      	ldr	r7, [r5, #0]
 800be82:	602b      	str	r3, [r5, #0]
 800be84:	d032      	beq.n	800beec <__sflush_r+0x98>
 800be86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be88:	89a3      	ldrh	r3, [r4, #12]
 800be8a:	075a      	lsls	r2, r3, #29
 800be8c:	d505      	bpl.n	800be9a <__sflush_r+0x46>
 800be8e:	6863      	ldr	r3, [r4, #4]
 800be90:	1ac0      	subs	r0, r0, r3
 800be92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be94:	b10b      	cbz	r3, 800be9a <__sflush_r+0x46>
 800be96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be98:	1ac0      	subs	r0, r0, r3
 800be9a:	2300      	movs	r3, #0
 800be9c:	4602      	mov	r2, r0
 800be9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bea0:	6a21      	ldr	r1, [r4, #32]
 800bea2:	4628      	mov	r0, r5
 800bea4:	47b0      	blx	r6
 800bea6:	1c43      	adds	r3, r0, #1
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	d106      	bne.n	800beba <__sflush_r+0x66>
 800beac:	6829      	ldr	r1, [r5, #0]
 800beae:	291d      	cmp	r1, #29
 800beb0:	d82c      	bhi.n	800bf0c <__sflush_r+0xb8>
 800beb2:	4a2a      	ldr	r2, [pc, #168]	; (800bf5c <__sflush_r+0x108>)
 800beb4:	40ca      	lsrs	r2, r1
 800beb6:	07d6      	lsls	r6, r2, #31
 800beb8:	d528      	bpl.n	800bf0c <__sflush_r+0xb8>
 800beba:	2200      	movs	r2, #0
 800bebc:	6062      	str	r2, [r4, #4]
 800bebe:	04d9      	lsls	r1, r3, #19
 800bec0:	6922      	ldr	r2, [r4, #16]
 800bec2:	6022      	str	r2, [r4, #0]
 800bec4:	d504      	bpl.n	800bed0 <__sflush_r+0x7c>
 800bec6:	1c42      	adds	r2, r0, #1
 800bec8:	d101      	bne.n	800bece <__sflush_r+0x7a>
 800beca:	682b      	ldr	r3, [r5, #0]
 800becc:	b903      	cbnz	r3, 800bed0 <__sflush_r+0x7c>
 800bece:	6560      	str	r0, [r4, #84]	; 0x54
 800bed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bed2:	602f      	str	r7, [r5, #0]
 800bed4:	2900      	cmp	r1, #0
 800bed6:	d0ca      	beq.n	800be6e <__sflush_r+0x1a>
 800bed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bedc:	4299      	cmp	r1, r3
 800bede:	d002      	beq.n	800bee6 <__sflush_r+0x92>
 800bee0:	4628      	mov	r0, r5
 800bee2:	f000 fd8b 	bl	800c9fc <_free_r>
 800bee6:	2000      	movs	r0, #0
 800bee8:	6360      	str	r0, [r4, #52]	; 0x34
 800beea:	e7c1      	b.n	800be70 <__sflush_r+0x1c>
 800beec:	6a21      	ldr	r1, [r4, #32]
 800beee:	2301      	movs	r3, #1
 800bef0:	4628      	mov	r0, r5
 800bef2:	47b0      	blx	r6
 800bef4:	1c41      	adds	r1, r0, #1
 800bef6:	d1c7      	bne.n	800be88 <__sflush_r+0x34>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d0c4      	beq.n	800be88 <__sflush_r+0x34>
 800befe:	2b1d      	cmp	r3, #29
 800bf00:	d001      	beq.n	800bf06 <__sflush_r+0xb2>
 800bf02:	2b16      	cmp	r3, #22
 800bf04:	d101      	bne.n	800bf0a <__sflush_r+0xb6>
 800bf06:	602f      	str	r7, [r5, #0]
 800bf08:	e7b1      	b.n	800be6e <__sflush_r+0x1a>
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf10:	81a3      	strh	r3, [r4, #12]
 800bf12:	e7ad      	b.n	800be70 <__sflush_r+0x1c>
 800bf14:	690f      	ldr	r7, [r1, #16]
 800bf16:	2f00      	cmp	r7, #0
 800bf18:	d0a9      	beq.n	800be6e <__sflush_r+0x1a>
 800bf1a:	0793      	lsls	r3, r2, #30
 800bf1c:	680e      	ldr	r6, [r1, #0]
 800bf1e:	bf08      	it	eq
 800bf20:	694b      	ldreq	r3, [r1, #20]
 800bf22:	600f      	str	r7, [r1, #0]
 800bf24:	bf18      	it	ne
 800bf26:	2300      	movne	r3, #0
 800bf28:	eba6 0807 	sub.w	r8, r6, r7
 800bf2c:	608b      	str	r3, [r1, #8]
 800bf2e:	f1b8 0f00 	cmp.w	r8, #0
 800bf32:	dd9c      	ble.n	800be6e <__sflush_r+0x1a>
 800bf34:	6a21      	ldr	r1, [r4, #32]
 800bf36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf38:	4643      	mov	r3, r8
 800bf3a:	463a      	mov	r2, r7
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	47b0      	blx	r6
 800bf40:	2800      	cmp	r0, #0
 800bf42:	dc06      	bgt.n	800bf52 <__sflush_r+0xfe>
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e78e      	b.n	800be70 <__sflush_r+0x1c>
 800bf52:	4407      	add	r7, r0
 800bf54:	eba8 0800 	sub.w	r8, r8, r0
 800bf58:	e7e9      	b.n	800bf2e <__sflush_r+0xda>
 800bf5a:	bf00      	nop
 800bf5c:	20400001 	.word	0x20400001

0800bf60 <_fflush_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	690b      	ldr	r3, [r1, #16]
 800bf64:	4605      	mov	r5, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	b913      	cbnz	r3, 800bf70 <_fflush_r+0x10>
 800bf6a:	2500      	movs	r5, #0
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	b118      	cbz	r0, 800bf7a <_fflush_r+0x1a>
 800bf72:	6983      	ldr	r3, [r0, #24]
 800bf74:	b90b      	cbnz	r3, 800bf7a <_fflush_r+0x1a>
 800bf76:	f000 f887 	bl	800c088 <__sinit>
 800bf7a:	4b14      	ldr	r3, [pc, #80]	; (800bfcc <_fflush_r+0x6c>)
 800bf7c:	429c      	cmp	r4, r3
 800bf7e:	d11b      	bne.n	800bfb8 <_fflush_r+0x58>
 800bf80:	686c      	ldr	r4, [r5, #4]
 800bf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d0ef      	beq.n	800bf6a <_fflush_r+0xa>
 800bf8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf8c:	07d0      	lsls	r0, r2, #31
 800bf8e:	d404      	bmi.n	800bf9a <_fflush_r+0x3a>
 800bf90:	0599      	lsls	r1, r3, #22
 800bf92:	d402      	bmi.n	800bf9a <_fflush_r+0x3a>
 800bf94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf96:	f000 f91a 	bl	800c1ce <__retarget_lock_acquire_recursive>
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	f7ff ff59 	bl	800be54 <__sflush_r>
 800bfa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfa4:	07da      	lsls	r2, r3, #31
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	d4e0      	bmi.n	800bf6c <_fflush_r+0xc>
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	059b      	lsls	r3, r3, #22
 800bfae:	d4dd      	bmi.n	800bf6c <_fflush_r+0xc>
 800bfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfb2:	f000 f90d 	bl	800c1d0 <__retarget_lock_release_recursive>
 800bfb6:	e7d9      	b.n	800bf6c <_fflush_r+0xc>
 800bfb8:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <_fflush_r+0x70>)
 800bfba:	429c      	cmp	r4, r3
 800bfbc:	d101      	bne.n	800bfc2 <_fflush_r+0x62>
 800bfbe:	68ac      	ldr	r4, [r5, #8]
 800bfc0:	e7df      	b.n	800bf82 <_fflush_r+0x22>
 800bfc2:	4b04      	ldr	r3, [pc, #16]	; (800bfd4 <_fflush_r+0x74>)
 800bfc4:	429c      	cmp	r4, r3
 800bfc6:	bf08      	it	eq
 800bfc8:	68ec      	ldreq	r4, [r5, #12]
 800bfca:	e7da      	b.n	800bf82 <_fflush_r+0x22>
 800bfcc:	0800e7e8 	.word	0x0800e7e8
 800bfd0:	0800e808 	.word	0x0800e808
 800bfd4:	0800e7c8 	.word	0x0800e7c8

0800bfd8 <std>:
 800bfd8:	2300      	movs	r3, #0
 800bfda:	b510      	push	{r4, lr}
 800bfdc:	4604      	mov	r4, r0
 800bfde:	e9c0 3300 	strd	r3, r3, [r0]
 800bfe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfe6:	6083      	str	r3, [r0, #8]
 800bfe8:	8181      	strh	r1, [r0, #12]
 800bfea:	6643      	str	r3, [r0, #100]	; 0x64
 800bfec:	81c2      	strh	r2, [r0, #14]
 800bfee:	6183      	str	r3, [r0, #24]
 800bff0:	4619      	mov	r1, r3
 800bff2:	2208      	movs	r2, #8
 800bff4:	305c      	adds	r0, #92	; 0x5c
 800bff6:	f7fe faf1 	bl	800a5dc <memset>
 800bffa:	4b05      	ldr	r3, [pc, #20]	; (800c010 <std+0x38>)
 800bffc:	6263      	str	r3, [r4, #36]	; 0x24
 800bffe:	4b05      	ldr	r3, [pc, #20]	; (800c014 <std+0x3c>)
 800c000:	62a3      	str	r3, [r4, #40]	; 0x28
 800c002:	4b05      	ldr	r3, [pc, #20]	; (800c018 <std+0x40>)
 800c004:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c006:	4b05      	ldr	r3, [pc, #20]	; (800c01c <std+0x44>)
 800c008:	6224      	str	r4, [r4, #32]
 800c00a:	6323      	str	r3, [r4, #48]	; 0x30
 800c00c:	bd10      	pop	{r4, pc}
 800c00e:	bf00      	nop
 800c010:	0800ce91 	.word	0x0800ce91
 800c014:	0800ceb3 	.word	0x0800ceb3
 800c018:	0800ceeb 	.word	0x0800ceeb
 800c01c:	0800cf0f 	.word	0x0800cf0f

0800c020 <_cleanup_r>:
 800c020:	4901      	ldr	r1, [pc, #4]	; (800c028 <_cleanup_r+0x8>)
 800c022:	f000 b8af 	b.w	800c184 <_fwalk_reent>
 800c026:	bf00      	nop
 800c028:	0800bf61 	.word	0x0800bf61

0800c02c <__sfmoreglue>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	2268      	movs	r2, #104	; 0x68
 800c030:	1e4d      	subs	r5, r1, #1
 800c032:	4355      	muls	r5, r2
 800c034:	460e      	mov	r6, r1
 800c036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c03a:	f000 fd4b 	bl	800cad4 <_malloc_r>
 800c03e:	4604      	mov	r4, r0
 800c040:	b140      	cbz	r0, 800c054 <__sfmoreglue+0x28>
 800c042:	2100      	movs	r1, #0
 800c044:	e9c0 1600 	strd	r1, r6, [r0]
 800c048:	300c      	adds	r0, #12
 800c04a:	60a0      	str	r0, [r4, #8]
 800c04c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c050:	f7fe fac4 	bl	800a5dc <memset>
 800c054:	4620      	mov	r0, r4
 800c056:	bd70      	pop	{r4, r5, r6, pc}

0800c058 <__sfp_lock_acquire>:
 800c058:	4801      	ldr	r0, [pc, #4]	; (800c060 <__sfp_lock_acquire+0x8>)
 800c05a:	f000 b8b8 	b.w	800c1ce <__retarget_lock_acquire_recursive>
 800c05e:	bf00      	nop
 800c060:	20000edd 	.word	0x20000edd

0800c064 <__sfp_lock_release>:
 800c064:	4801      	ldr	r0, [pc, #4]	; (800c06c <__sfp_lock_release+0x8>)
 800c066:	f000 b8b3 	b.w	800c1d0 <__retarget_lock_release_recursive>
 800c06a:	bf00      	nop
 800c06c:	20000edd 	.word	0x20000edd

0800c070 <__sinit_lock_acquire>:
 800c070:	4801      	ldr	r0, [pc, #4]	; (800c078 <__sinit_lock_acquire+0x8>)
 800c072:	f000 b8ac 	b.w	800c1ce <__retarget_lock_acquire_recursive>
 800c076:	bf00      	nop
 800c078:	20000ede 	.word	0x20000ede

0800c07c <__sinit_lock_release>:
 800c07c:	4801      	ldr	r0, [pc, #4]	; (800c084 <__sinit_lock_release+0x8>)
 800c07e:	f000 b8a7 	b.w	800c1d0 <__retarget_lock_release_recursive>
 800c082:	bf00      	nop
 800c084:	20000ede 	.word	0x20000ede

0800c088 <__sinit>:
 800c088:	b510      	push	{r4, lr}
 800c08a:	4604      	mov	r4, r0
 800c08c:	f7ff fff0 	bl	800c070 <__sinit_lock_acquire>
 800c090:	69a3      	ldr	r3, [r4, #24]
 800c092:	b11b      	cbz	r3, 800c09c <__sinit+0x14>
 800c094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c098:	f7ff bff0 	b.w	800c07c <__sinit_lock_release>
 800c09c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c0a0:	6523      	str	r3, [r4, #80]	; 0x50
 800c0a2:	4b13      	ldr	r3, [pc, #76]	; (800c0f0 <__sinit+0x68>)
 800c0a4:	4a13      	ldr	r2, [pc, #76]	; (800c0f4 <__sinit+0x6c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c0aa:	42a3      	cmp	r3, r4
 800c0ac:	bf04      	itt	eq
 800c0ae:	2301      	moveq	r3, #1
 800c0b0:	61a3      	streq	r3, [r4, #24]
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f000 f820 	bl	800c0f8 <__sfp>
 800c0b8:	6060      	str	r0, [r4, #4]
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f000 f81c 	bl	800c0f8 <__sfp>
 800c0c0:	60a0      	str	r0, [r4, #8]
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f000 f818 	bl	800c0f8 <__sfp>
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	60e0      	str	r0, [r4, #12]
 800c0cc:	2104      	movs	r1, #4
 800c0ce:	6860      	ldr	r0, [r4, #4]
 800c0d0:	f7ff ff82 	bl	800bfd8 <std>
 800c0d4:	68a0      	ldr	r0, [r4, #8]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	2109      	movs	r1, #9
 800c0da:	f7ff ff7d 	bl	800bfd8 <std>
 800c0de:	68e0      	ldr	r0, [r4, #12]
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	2112      	movs	r1, #18
 800c0e4:	f7ff ff78 	bl	800bfd8 <std>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	61a3      	str	r3, [r4, #24]
 800c0ec:	e7d2      	b.n	800c094 <__sinit+0xc>
 800c0ee:	bf00      	nop
 800c0f0:	0800e700 	.word	0x0800e700
 800c0f4:	0800c021 	.word	0x0800c021

0800c0f8 <__sfp>:
 800c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fa:	4607      	mov	r7, r0
 800c0fc:	f7ff ffac 	bl	800c058 <__sfp_lock_acquire>
 800c100:	4b1e      	ldr	r3, [pc, #120]	; (800c17c <__sfp+0x84>)
 800c102:	681e      	ldr	r6, [r3, #0]
 800c104:	69b3      	ldr	r3, [r6, #24]
 800c106:	b913      	cbnz	r3, 800c10e <__sfp+0x16>
 800c108:	4630      	mov	r0, r6
 800c10a:	f7ff ffbd 	bl	800c088 <__sinit>
 800c10e:	3648      	adds	r6, #72	; 0x48
 800c110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c114:	3b01      	subs	r3, #1
 800c116:	d503      	bpl.n	800c120 <__sfp+0x28>
 800c118:	6833      	ldr	r3, [r6, #0]
 800c11a:	b30b      	cbz	r3, 800c160 <__sfp+0x68>
 800c11c:	6836      	ldr	r6, [r6, #0]
 800c11e:	e7f7      	b.n	800c110 <__sfp+0x18>
 800c120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c124:	b9d5      	cbnz	r5, 800c15c <__sfp+0x64>
 800c126:	4b16      	ldr	r3, [pc, #88]	; (800c180 <__sfp+0x88>)
 800c128:	60e3      	str	r3, [r4, #12]
 800c12a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c12e:	6665      	str	r5, [r4, #100]	; 0x64
 800c130:	f000 f84c 	bl	800c1cc <__retarget_lock_init_recursive>
 800c134:	f7ff ff96 	bl	800c064 <__sfp_lock_release>
 800c138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c13c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c140:	6025      	str	r5, [r4, #0]
 800c142:	61a5      	str	r5, [r4, #24]
 800c144:	2208      	movs	r2, #8
 800c146:	4629      	mov	r1, r5
 800c148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c14c:	f7fe fa46 	bl	800a5dc <memset>
 800c150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c158:	4620      	mov	r0, r4
 800c15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c15c:	3468      	adds	r4, #104	; 0x68
 800c15e:	e7d9      	b.n	800c114 <__sfp+0x1c>
 800c160:	2104      	movs	r1, #4
 800c162:	4638      	mov	r0, r7
 800c164:	f7ff ff62 	bl	800c02c <__sfmoreglue>
 800c168:	4604      	mov	r4, r0
 800c16a:	6030      	str	r0, [r6, #0]
 800c16c:	2800      	cmp	r0, #0
 800c16e:	d1d5      	bne.n	800c11c <__sfp+0x24>
 800c170:	f7ff ff78 	bl	800c064 <__sfp_lock_release>
 800c174:	230c      	movs	r3, #12
 800c176:	603b      	str	r3, [r7, #0]
 800c178:	e7ee      	b.n	800c158 <__sfp+0x60>
 800c17a:	bf00      	nop
 800c17c:	0800e700 	.word	0x0800e700
 800c180:	ffff0001 	.word	0xffff0001

0800c184 <_fwalk_reent>:
 800c184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c188:	4606      	mov	r6, r0
 800c18a:	4688      	mov	r8, r1
 800c18c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c190:	2700      	movs	r7, #0
 800c192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c196:	f1b9 0901 	subs.w	r9, r9, #1
 800c19a:	d505      	bpl.n	800c1a8 <_fwalk_reent+0x24>
 800c19c:	6824      	ldr	r4, [r4, #0]
 800c19e:	2c00      	cmp	r4, #0
 800c1a0:	d1f7      	bne.n	800c192 <_fwalk_reent+0xe>
 800c1a2:	4638      	mov	r0, r7
 800c1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1a8:	89ab      	ldrh	r3, [r5, #12]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d907      	bls.n	800c1be <_fwalk_reent+0x3a>
 800c1ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	d003      	beq.n	800c1be <_fwalk_reent+0x3a>
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	47c0      	blx	r8
 800c1bc:	4307      	orrs	r7, r0
 800c1be:	3568      	adds	r5, #104	; 0x68
 800c1c0:	e7e9      	b.n	800c196 <_fwalk_reent+0x12>
	...

0800c1c4 <_localeconv_r>:
 800c1c4:	4800      	ldr	r0, [pc, #0]	; (800c1c8 <_localeconv_r+0x4>)
 800c1c6:	4770      	bx	lr
 800c1c8:	20000178 	.word	0x20000178

0800c1cc <__retarget_lock_init_recursive>:
 800c1cc:	4770      	bx	lr

0800c1ce <__retarget_lock_acquire_recursive>:
 800c1ce:	4770      	bx	lr

0800c1d0 <__retarget_lock_release_recursive>:
 800c1d0:	4770      	bx	lr

0800c1d2 <__swhatbuf_r>:
 800c1d2:	b570      	push	{r4, r5, r6, lr}
 800c1d4:	460e      	mov	r6, r1
 800c1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1da:	2900      	cmp	r1, #0
 800c1dc:	b096      	sub	sp, #88	; 0x58
 800c1de:	4614      	mov	r4, r2
 800c1e0:	461d      	mov	r5, r3
 800c1e2:	da08      	bge.n	800c1f6 <__swhatbuf_r+0x24>
 800c1e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	602a      	str	r2, [r5, #0]
 800c1ec:	061a      	lsls	r2, r3, #24
 800c1ee:	d410      	bmi.n	800c212 <__swhatbuf_r+0x40>
 800c1f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1f4:	e00e      	b.n	800c214 <__swhatbuf_r+0x42>
 800c1f6:	466a      	mov	r2, sp
 800c1f8:	f000 fee0 	bl	800cfbc <_fstat_r>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	dbf1      	blt.n	800c1e4 <__swhatbuf_r+0x12>
 800c200:	9a01      	ldr	r2, [sp, #4]
 800c202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c20a:	425a      	negs	r2, r3
 800c20c:	415a      	adcs	r2, r3
 800c20e:	602a      	str	r2, [r5, #0]
 800c210:	e7ee      	b.n	800c1f0 <__swhatbuf_r+0x1e>
 800c212:	2340      	movs	r3, #64	; 0x40
 800c214:	2000      	movs	r0, #0
 800c216:	6023      	str	r3, [r4, #0]
 800c218:	b016      	add	sp, #88	; 0x58
 800c21a:	bd70      	pop	{r4, r5, r6, pc}

0800c21c <__smakebuf_r>:
 800c21c:	898b      	ldrh	r3, [r1, #12]
 800c21e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c220:	079d      	lsls	r5, r3, #30
 800c222:	4606      	mov	r6, r0
 800c224:	460c      	mov	r4, r1
 800c226:	d507      	bpl.n	800c238 <__smakebuf_r+0x1c>
 800c228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	6123      	str	r3, [r4, #16]
 800c230:	2301      	movs	r3, #1
 800c232:	6163      	str	r3, [r4, #20]
 800c234:	b002      	add	sp, #8
 800c236:	bd70      	pop	{r4, r5, r6, pc}
 800c238:	ab01      	add	r3, sp, #4
 800c23a:	466a      	mov	r2, sp
 800c23c:	f7ff ffc9 	bl	800c1d2 <__swhatbuf_r>
 800c240:	9900      	ldr	r1, [sp, #0]
 800c242:	4605      	mov	r5, r0
 800c244:	4630      	mov	r0, r6
 800c246:	f000 fc45 	bl	800cad4 <_malloc_r>
 800c24a:	b948      	cbnz	r0, 800c260 <__smakebuf_r+0x44>
 800c24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c250:	059a      	lsls	r2, r3, #22
 800c252:	d4ef      	bmi.n	800c234 <__smakebuf_r+0x18>
 800c254:	f023 0303 	bic.w	r3, r3, #3
 800c258:	f043 0302 	orr.w	r3, r3, #2
 800c25c:	81a3      	strh	r3, [r4, #12]
 800c25e:	e7e3      	b.n	800c228 <__smakebuf_r+0xc>
 800c260:	4b0d      	ldr	r3, [pc, #52]	; (800c298 <__smakebuf_r+0x7c>)
 800c262:	62b3      	str	r3, [r6, #40]	; 0x28
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	6020      	str	r0, [r4, #0]
 800c268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c26c:	81a3      	strh	r3, [r4, #12]
 800c26e:	9b00      	ldr	r3, [sp, #0]
 800c270:	6163      	str	r3, [r4, #20]
 800c272:	9b01      	ldr	r3, [sp, #4]
 800c274:	6120      	str	r0, [r4, #16]
 800c276:	b15b      	cbz	r3, 800c290 <__smakebuf_r+0x74>
 800c278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c27c:	4630      	mov	r0, r6
 800c27e:	f000 feaf 	bl	800cfe0 <_isatty_r>
 800c282:	b128      	cbz	r0, 800c290 <__smakebuf_r+0x74>
 800c284:	89a3      	ldrh	r3, [r4, #12]
 800c286:	f023 0303 	bic.w	r3, r3, #3
 800c28a:	f043 0301 	orr.w	r3, r3, #1
 800c28e:	81a3      	strh	r3, [r4, #12]
 800c290:	89a0      	ldrh	r0, [r4, #12]
 800c292:	4305      	orrs	r5, r0
 800c294:	81a5      	strh	r5, [r4, #12]
 800c296:	e7cd      	b.n	800c234 <__smakebuf_r+0x18>
 800c298:	0800c021 	.word	0x0800c021

0800c29c <malloc>:
 800c29c:	4b02      	ldr	r3, [pc, #8]	; (800c2a8 <malloc+0xc>)
 800c29e:	4601      	mov	r1, r0
 800c2a0:	6818      	ldr	r0, [r3, #0]
 800c2a2:	f000 bc17 	b.w	800cad4 <_malloc_r>
 800c2a6:	bf00      	nop
 800c2a8:	20000024 	.word	0x20000024

0800c2ac <memcpy>:
 800c2ac:	440a      	add	r2, r1
 800c2ae:	4291      	cmp	r1, r2
 800c2b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2b4:	d100      	bne.n	800c2b8 <memcpy+0xc>
 800c2b6:	4770      	bx	lr
 800c2b8:	b510      	push	{r4, lr}
 800c2ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2c2:	4291      	cmp	r1, r2
 800c2c4:	d1f9      	bne.n	800c2ba <memcpy+0xe>
 800c2c6:	bd10      	pop	{r4, pc}

0800c2c8 <_Balloc>:
 800c2c8:	b570      	push	{r4, r5, r6, lr}
 800c2ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	460d      	mov	r5, r1
 800c2d0:	b976      	cbnz	r6, 800c2f0 <_Balloc+0x28>
 800c2d2:	2010      	movs	r0, #16
 800c2d4:	f7ff ffe2 	bl	800c29c <malloc>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	6260      	str	r0, [r4, #36]	; 0x24
 800c2dc:	b920      	cbnz	r0, 800c2e8 <_Balloc+0x20>
 800c2de:	4b18      	ldr	r3, [pc, #96]	; (800c340 <_Balloc+0x78>)
 800c2e0:	4818      	ldr	r0, [pc, #96]	; (800c344 <_Balloc+0x7c>)
 800c2e2:	2166      	movs	r1, #102	; 0x66
 800c2e4:	f000 fe2a 	bl	800cf3c <__assert_func>
 800c2e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2ec:	6006      	str	r6, [r0, #0]
 800c2ee:	60c6      	str	r6, [r0, #12]
 800c2f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2f2:	68f3      	ldr	r3, [r6, #12]
 800c2f4:	b183      	cbz	r3, 800c318 <_Balloc+0x50>
 800c2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2fe:	b9b8      	cbnz	r0, 800c330 <_Balloc+0x68>
 800c300:	2101      	movs	r1, #1
 800c302:	fa01 f605 	lsl.w	r6, r1, r5
 800c306:	1d72      	adds	r2, r6, #5
 800c308:	0092      	lsls	r2, r2, #2
 800c30a:	4620      	mov	r0, r4
 800c30c:	f000 fb60 	bl	800c9d0 <_calloc_r>
 800c310:	b160      	cbz	r0, 800c32c <_Balloc+0x64>
 800c312:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c316:	e00e      	b.n	800c336 <_Balloc+0x6e>
 800c318:	2221      	movs	r2, #33	; 0x21
 800c31a:	2104      	movs	r1, #4
 800c31c:	4620      	mov	r0, r4
 800c31e:	f000 fb57 	bl	800c9d0 <_calloc_r>
 800c322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c324:	60f0      	str	r0, [r6, #12]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1e4      	bne.n	800c2f6 <_Balloc+0x2e>
 800c32c:	2000      	movs	r0, #0
 800c32e:	bd70      	pop	{r4, r5, r6, pc}
 800c330:	6802      	ldr	r2, [r0, #0]
 800c332:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c336:	2300      	movs	r3, #0
 800c338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c33c:	e7f7      	b.n	800c32e <_Balloc+0x66>
 800c33e:	bf00      	nop
 800c340:	0800e745 	.word	0x0800e745
 800c344:	0800e828 	.word	0x0800e828

0800c348 <_Bfree>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c34c:	4605      	mov	r5, r0
 800c34e:	460c      	mov	r4, r1
 800c350:	b976      	cbnz	r6, 800c370 <_Bfree+0x28>
 800c352:	2010      	movs	r0, #16
 800c354:	f7ff ffa2 	bl	800c29c <malloc>
 800c358:	4602      	mov	r2, r0
 800c35a:	6268      	str	r0, [r5, #36]	; 0x24
 800c35c:	b920      	cbnz	r0, 800c368 <_Bfree+0x20>
 800c35e:	4b09      	ldr	r3, [pc, #36]	; (800c384 <_Bfree+0x3c>)
 800c360:	4809      	ldr	r0, [pc, #36]	; (800c388 <_Bfree+0x40>)
 800c362:	218a      	movs	r1, #138	; 0x8a
 800c364:	f000 fdea 	bl	800cf3c <__assert_func>
 800c368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c36c:	6006      	str	r6, [r0, #0]
 800c36e:	60c6      	str	r6, [r0, #12]
 800c370:	b13c      	cbz	r4, 800c382 <_Bfree+0x3a>
 800c372:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c374:	6862      	ldr	r2, [r4, #4]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c37c:	6021      	str	r1, [r4, #0]
 800c37e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c382:	bd70      	pop	{r4, r5, r6, pc}
 800c384:	0800e745 	.word	0x0800e745
 800c388:	0800e828 	.word	0x0800e828

0800c38c <__multadd>:
 800c38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c390:	690d      	ldr	r5, [r1, #16]
 800c392:	4607      	mov	r7, r0
 800c394:	460c      	mov	r4, r1
 800c396:	461e      	mov	r6, r3
 800c398:	f101 0c14 	add.w	ip, r1, #20
 800c39c:	2000      	movs	r0, #0
 800c39e:	f8dc 3000 	ldr.w	r3, [ip]
 800c3a2:	b299      	uxth	r1, r3
 800c3a4:	fb02 6101 	mla	r1, r2, r1, r6
 800c3a8:	0c1e      	lsrs	r6, r3, #16
 800c3aa:	0c0b      	lsrs	r3, r1, #16
 800c3ac:	fb02 3306 	mla	r3, r2, r6, r3
 800c3b0:	b289      	uxth	r1, r1
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3b8:	4285      	cmp	r5, r0
 800c3ba:	f84c 1b04 	str.w	r1, [ip], #4
 800c3be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3c2:	dcec      	bgt.n	800c39e <__multadd+0x12>
 800c3c4:	b30e      	cbz	r6, 800c40a <__multadd+0x7e>
 800c3c6:	68a3      	ldr	r3, [r4, #8]
 800c3c8:	42ab      	cmp	r3, r5
 800c3ca:	dc19      	bgt.n	800c400 <__multadd+0x74>
 800c3cc:	6861      	ldr	r1, [r4, #4]
 800c3ce:	4638      	mov	r0, r7
 800c3d0:	3101      	adds	r1, #1
 800c3d2:	f7ff ff79 	bl	800c2c8 <_Balloc>
 800c3d6:	4680      	mov	r8, r0
 800c3d8:	b928      	cbnz	r0, 800c3e6 <__multadd+0x5a>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	4b0c      	ldr	r3, [pc, #48]	; (800c410 <__multadd+0x84>)
 800c3de:	480d      	ldr	r0, [pc, #52]	; (800c414 <__multadd+0x88>)
 800c3e0:	21b5      	movs	r1, #181	; 0xb5
 800c3e2:	f000 fdab 	bl	800cf3c <__assert_func>
 800c3e6:	6922      	ldr	r2, [r4, #16]
 800c3e8:	3202      	adds	r2, #2
 800c3ea:	f104 010c 	add.w	r1, r4, #12
 800c3ee:	0092      	lsls	r2, r2, #2
 800c3f0:	300c      	adds	r0, #12
 800c3f2:	f7ff ff5b 	bl	800c2ac <memcpy>
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	4638      	mov	r0, r7
 800c3fa:	f7ff ffa5 	bl	800c348 <_Bfree>
 800c3fe:	4644      	mov	r4, r8
 800c400:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c404:	3501      	adds	r5, #1
 800c406:	615e      	str	r6, [r3, #20]
 800c408:	6125      	str	r5, [r4, #16]
 800c40a:	4620      	mov	r0, r4
 800c40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c410:	0800e7b7 	.word	0x0800e7b7
 800c414:	0800e828 	.word	0x0800e828

0800c418 <__hi0bits>:
 800c418:	0c03      	lsrs	r3, r0, #16
 800c41a:	041b      	lsls	r3, r3, #16
 800c41c:	b9d3      	cbnz	r3, 800c454 <__hi0bits+0x3c>
 800c41e:	0400      	lsls	r0, r0, #16
 800c420:	2310      	movs	r3, #16
 800c422:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c426:	bf04      	itt	eq
 800c428:	0200      	lsleq	r0, r0, #8
 800c42a:	3308      	addeq	r3, #8
 800c42c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c430:	bf04      	itt	eq
 800c432:	0100      	lsleq	r0, r0, #4
 800c434:	3304      	addeq	r3, #4
 800c436:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c43a:	bf04      	itt	eq
 800c43c:	0080      	lsleq	r0, r0, #2
 800c43e:	3302      	addeq	r3, #2
 800c440:	2800      	cmp	r0, #0
 800c442:	db05      	blt.n	800c450 <__hi0bits+0x38>
 800c444:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c448:	f103 0301 	add.w	r3, r3, #1
 800c44c:	bf08      	it	eq
 800c44e:	2320      	moveq	r3, #32
 800c450:	4618      	mov	r0, r3
 800c452:	4770      	bx	lr
 800c454:	2300      	movs	r3, #0
 800c456:	e7e4      	b.n	800c422 <__hi0bits+0xa>

0800c458 <__lo0bits>:
 800c458:	6803      	ldr	r3, [r0, #0]
 800c45a:	f013 0207 	ands.w	r2, r3, #7
 800c45e:	4601      	mov	r1, r0
 800c460:	d00b      	beq.n	800c47a <__lo0bits+0x22>
 800c462:	07da      	lsls	r2, r3, #31
 800c464:	d423      	bmi.n	800c4ae <__lo0bits+0x56>
 800c466:	0798      	lsls	r0, r3, #30
 800c468:	bf49      	itett	mi
 800c46a:	085b      	lsrmi	r3, r3, #1
 800c46c:	089b      	lsrpl	r3, r3, #2
 800c46e:	2001      	movmi	r0, #1
 800c470:	600b      	strmi	r3, [r1, #0]
 800c472:	bf5c      	itt	pl
 800c474:	600b      	strpl	r3, [r1, #0]
 800c476:	2002      	movpl	r0, #2
 800c478:	4770      	bx	lr
 800c47a:	b298      	uxth	r0, r3
 800c47c:	b9a8      	cbnz	r0, 800c4aa <__lo0bits+0x52>
 800c47e:	0c1b      	lsrs	r3, r3, #16
 800c480:	2010      	movs	r0, #16
 800c482:	b2da      	uxtb	r2, r3
 800c484:	b90a      	cbnz	r2, 800c48a <__lo0bits+0x32>
 800c486:	3008      	adds	r0, #8
 800c488:	0a1b      	lsrs	r3, r3, #8
 800c48a:	071a      	lsls	r2, r3, #28
 800c48c:	bf04      	itt	eq
 800c48e:	091b      	lsreq	r3, r3, #4
 800c490:	3004      	addeq	r0, #4
 800c492:	079a      	lsls	r2, r3, #30
 800c494:	bf04      	itt	eq
 800c496:	089b      	lsreq	r3, r3, #2
 800c498:	3002      	addeq	r0, #2
 800c49a:	07da      	lsls	r2, r3, #31
 800c49c:	d403      	bmi.n	800c4a6 <__lo0bits+0x4e>
 800c49e:	085b      	lsrs	r3, r3, #1
 800c4a0:	f100 0001 	add.w	r0, r0, #1
 800c4a4:	d005      	beq.n	800c4b2 <__lo0bits+0x5a>
 800c4a6:	600b      	str	r3, [r1, #0]
 800c4a8:	4770      	bx	lr
 800c4aa:	4610      	mov	r0, r2
 800c4ac:	e7e9      	b.n	800c482 <__lo0bits+0x2a>
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	4770      	bx	lr
 800c4b2:	2020      	movs	r0, #32
 800c4b4:	4770      	bx	lr
	...

0800c4b8 <__i2b>:
 800c4b8:	b510      	push	{r4, lr}
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	2101      	movs	r1, #1
 800c4be:	f7ff ff03 	bl	800c2c8 <_Balloc>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	b928      	cbnz	r0, 800c4d2 <__i2b+0x1a>
 800c4c6:	4b05      	ldr	r3, [pc, #20]	; (800c4dc <__i2b+0x24>)
 800c4c8:	4805      	ldr	r0, [pc, #20]	; (800c4e0 <__i2b+0x28>)
 800c4ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c4ce:	f000 fd35 	bl	800cf3c <__assert_func>
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	6144      	str	r4, [r0, #20]
 800c4d6:	6103      	str	r3, [r0, #16]
 800c4d8:	bd10      	pop	{r4, pc}
 800c4da:	bf00      	nop
 800c4dc:	0800e7b7 	.word	0x0800e7b7
 800c4e0:	0800e828 	.word	0x0800e828

0800c4e4 <__multiply>:
 800c4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e8:	4691      	mov	r9, r2
 800c4ea:	690a      	ldr	r2, [r1, #16]
 800c4ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	bfb8      	it	lt
 800c4f4:	460b      	movlt	r3, r1
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	bfbc      	itt	lt
 800c4fa:	464c      	movlt	r4, r9
 800c4fc:	4699      	movlt	r9, r3
 800c4fe:	6927      	ldr	r7, [r4, #16]
 800c500:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c504:	68a3      	ldr	r3, [r4, #8]
 800c506:	6861      	ldr	r1, [r4, #4]
 800c508:	eb07 060a 	add.w	r6, r7, sl
 800c50c:	42b3      	cmp	r3, r6
 800c50e:	b085      	sub	sp, #20
 800c510:	bfb8      	it	lt
 800c512:	3101      	addlt	r1, #1
 800c514:	f7ff fed8 	bl	800c2c8 <_Balloc>
 800c518:	b930      	cbnz	r0, 800c528 <__multiply+0x44>
 800c51a:	4602      	mov	r2, r0
 800c51c:	4b44      	ldr	r3, [pc, #272]	; (800c630 <__multiply+0x14c>)
 800c51e:	4845      	ldr	r0, [pc, #276]	; (800c634 <__multiply+0x150>)
 800c520:	f240 115d 	movw	r1, #349	; 0x15d
 800c524:	f000 fd0a 	bl	800cf3c <__assert_func>
 800c528:	f100 0514 	add.w	r5, r0, #20
 800c52c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c530:	462b      	mov	r3, r5
 800c532:	2200      	movs	r2, #0
 800c534:	4543      	cmp	r3, r8
 800c536:	d321      	bcc.n	800c57c <__multiply+0x98>
 800c538:	f104 0314 	add.w	r3, r4, #20
 800c53c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c540:	f109 0314 	add.w	r3, r9, #20
 800c544:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c548:	9202      	str	r2, [sp, #8]
 800c54a:	1b3a      	subs	r2, r7, r4
 800c54c:	3a15      	subs	r2, #21
 800c54e:	f022 0203 	bic.w	r2, r2, #3
 800c552:	3204      	adds	r2, #4
 800c554:	f104 0115 	add.w	r1, r4, #21
 800c558:	428f      	cmp	r7, r1
 800c55a:	bf38      	it	cc
 800c55c:	2204      	movcc	r2, #4
 800c55e:	9201      	str	r2, [sp, #4]
 800c560:	9a02      	ldr	r2, [sp, #8]
 800c562:	9303      	str	r3, [sp, #12]
 800c564:	429a      	cmp	r2, r3
 800c566:	d80c      	bhi.n	800c582 <__multiply+0x9e>
 800c568:	2e00      	cmp	r6, #0
 800c56a:	dd03      	ble.n	800c574 <__multiply+0x90>
 800c56c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c570:	2b00      	cmp	r3, #0
 800c572:	d05a      	beq.n	800c62a <__multiply+0x146>
 800c574:	6106      	str	r6, [r0, #16]
 800c576:	b005      	add	sp, #20
 800c578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57c:	f843 2b04 	str.w	r2, [r3], #4
 800c580:	e7d8      	b.n	800c534 <__multiply+0x50>
 800c582:	f8b3 a000 	ldrh.w	sl, [r3]
 800c586:	f1ba 0f00 	cmp.w	sl, #0
 800c58a:	d024      	beq.n	800c5d6 <__multiply+0xf2>
 800c58c:	f104 0e14 	add.w	lr, r4, #20
 800c590:	46a9      	mov	r9, r5
 800c592:	f04f 0c00 	mov.w	ip, #0
 800c596:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c59a:	f8d9 1000 	ldr.w	r1, [r9]
 800c59e:	fa1f fb82 	uxth.w	fp, r2
 800c5a2:	b289      	uxth	r1, r1
 800c5a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c5a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c5ac:	f8d9 2000 	ldr.w	r2, [r9]
 800c5b0:	4461      	add	r1, ip
 800c5b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c5ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c5be:	b289      	uxth	r1, r1
 800c5c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5c4:	4577      	cmp	r7, lr
 800c5c6:	f849 1b04 	str.w	r1, [r9], #4
 800c5ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5ce:	d8e2      	bhi.n	800c596 <__multiply+0xb2>
 800c5d0:	9a01      	ldr	r2, [sp, #4]
 800c5d2:	f845 c002 	str.w	ip, [r5, r2]
 800c5d6:	9a03      	ldr	r2, [sp, #12]
 800c5d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5dc:	3304      	adds	r3, #4
 800c5de:	f1b9 0f00 	cmp.w	r9, #0
 800c5e2:	d020      	beq.n	800c626 <__multiply+0x142>
 800c5e4:	6829      	ldr	r1, [r5, #0]
 800c5e6:	f104 0c14 	add.w	ip, r4, #20
 800c5ea:	46ae      	mov	lr, r5
 800c5ec:	f04f 0a00 	mov.w	sl, #0
 800c5f0:	f8bc b000 	ldrh.w	fp, [ip]
 800c5f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5f8:	fb09 220b 	mla	r2, r9, fp, r2
 800c5fc:	4492      	add	sl, r2
 800c5fe:	b289      	uxth	r1, r1
 800c600:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c604:	f84e 1b04 	str.w	r1, [lr], #4
 800c608:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c60c:	f8be 1000 	ldrh.w	r1, [lr]
 800c610:	0c12      	lsrs	r2, r2, #16
 800c612:	fb09 1102 	mla	r1, r9, r2, r1
 800c616:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c61a:	4567      	cmp	r7, ip
 800c61c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c620:	d8e6      	bhi.n	800c5f0 <__multiply+0x10c>
 800c622:	9a01      	ldr	r2, [sp, #4]
 800c624:	50a9      	str	r1, [r5, r2]
 800c626:	3504      	adds	r5, #4
 800c628:	e79a      	b.n	800c560 <__multiply+0x7c>
 800c62a:	3e01      	subs	r6, #1
 800c62c:	e79c      	b.n	800c568 <__multiply+0x84>
 800c62e:	bf00      	nop
 800c630:	0800e7b7 	.word	0x0800e7b7
 800c634:	0800e828 	.word	0x0800e828

0800c638 <__pow5mult>:
 800c638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c63c:	4615      	mov	r5, r2
 800c63e:	f012 0203 	ands.w	r2, r2, #3
 800c642:	4606      	mov	r6, r0
 800c644:	460f      	mov	r7, r1
 800c646:	d007      	beq.n	800c658 <__pow5mult+0x20>
 800c648:	4c25      	ldr	r4, [pc, #148]	; (800c6e0 <__pow5mult+0xa8>)
 800c64a:	3a01      	subs	r2, #1
 800c64c:	2300      	movs	r3, #0
 800c64e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c652:	f7ff fe9b 	bl	800c38c <__multadd>
 800c656:	4607      	mov	r7, r0
 800c658:	10ad      	asrs	r5, r5, #2
 800c65a:	d03d      	beq.n	800c6d8 <__pow5mult+0xa0>
 800c65c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c65e:	b97c      	cbnz	r4, 800c680 <__pow5mult+0x48>
 800c660:	2010      	movs	r0, #16
 800c662:	f7ff fe1b 	bl	800c29c <malloc>
 800c666:	4602      	mov	r2, r0
 800c668:	6270      	str	r0, [r6, #36]	; 0x24
 800c66a:	b928      	cbnz	r0, 800c678 <__pow5mult+0x40>
 800c66c:	4b1d      	ldr	r3, [pc, #116]	; (800c6e4 <__pow5mult+0xac>)
 800c66e:	481e      	ldr	r0, [pc, #120]	; (800c6e8 <__pow5mult+0xb0>)
 800c670:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c674:	f000 fc62 	bl	800cf3c <__assert_func>
 800c678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c67c:	6004      	str	r4, [r0, #0]
 800c67e:	60c4      	str	r4, [r0, #12]
 800c680:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c688:	b94c      	cbnz	r4, 800c69e <__pow5mult+0x66>
 800c68a:	f240 2171 	movw	r1, #625	; 0x271
 800c68e:	4630      	mov	r0, r6
 800c690:	f7ff ff12 	bl	800c4b8 <__i2b>
 800c694:	2300      	movs	r3, #0
 800c696:	f8c8 0008 	str.w	r0, [r8, #8]
 800c69a:	4604      	mov	r4, r0
 800c69c:	6003      	str	r3, [r0, #0]
 800c69e:	f04f 0900 	mov.w	r9, #0
 800c6a2:	07eb      	lsls	r3, r5, #31
 800c6a4:	d50a      	bpl.n	800c6bc <__pow5mult+0x84>
 800c6a6:	4639      	mov	r1, r7
 800c6a8:	4622      	mov	r2, r4
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f7ff ff1a 	bl	800c4e4 <__multiply>
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	4680      	mov	r8, r0
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f7ff fe47 	bl	800c348 <_Bfree>
 800c6ba:	4647      	mov	r7, r8
 800c6bc:	106d      	asrs	r5, r5, #1
 800c6be:	d00b      	beq.n	800c6d8 <__pow5mult+0xa0>
 800c6c0:	6820      	ldr	r0, [r4, #0]
 800c6c2:	b938      	cbnz	r0, 800c6d4 <__pow5mult+0x9c>
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	4621      	mov	r1, r4
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	f7ff ff0b 	bl	800c4e4 <__multiply>
 800c6ce:	6020      	str	r0, [r4, #0]
 800c6d0:	f8c0 9000 	str.w	r9, [r0]
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	e7e4      	b.n	800c6a2 <__pow5mult+0x6a>
 800c6d8:	4638      	mov	r0, r7
 800c6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6de:	bf00      	nop
 800c6e0:	0800e978 	.word	0x0800e978
 800c6e4:	0800e745 	.word	0x0800e745
 800c6e8:	0800e828 	.word	0x0800e828

0800c6ec <__lshift>:
 800c6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f0:	460c      	mov	r4, r1
 800c6f2:	6849      	ldr	r1, [r1, #4]
 800c6f4:	6923      	ldr	r3, [r4, #16]
 800c6f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6fa:	68a3      	ldr	r3, [r4, #8]
 800c6fc:	4607      	mov	r7, r0
 800c6fe:	4691      	mov	r9, r2
 800c700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c704:	f108 0601 	add.w	r6, r8, #1
 800c708:	42b3      	cmp	r3, r6
 800c70a:	db0b      	blt.n	800c724 <__lshift+0x38>
 800c70c:	4638      	mov	r0, r7
 800c70e:	f7ff fddb 	bl	800c2c8 <_Balloc>
 800c712:	4605      	mov	r5, r0
 800c714:	b948      	cbnz	r0, 800c72a <__lshift+0x3e>
 800c716:	4602      	mov	r2, r0
 800c718:	4b2a      	ldr	r3, [pc, #168]	; (800c7c4 <__lshift+0xd8>)
 800c71a:	482b      	ldr	r0, [pc, #172]	; (800c7c8 <__lshift+0xdc>)
 800c71c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c720:	f000 fc0c 	bl	800cf3c <__assert_func>
 800c724:	3101      	adds	r1, #1
 800c726:	005b      	lsls	r3, r3, #1
 800c728:	e7ee      	b.n	800c708 <__lshift+0x1c>
 800c72a:	2300      	movs	r3, #0
 800c72c:	f100 0114 	add.w	r1, r0, #20
 800c730:	f100 0210 	add.w	r2, r0, #16
 800c734:	4618      	mov	r0, r3
 800c736:	4553      	cmp	r3, sl
 800c738:	db37      	blt.n	800c7aa <__lshift+0xbe>
 800c73a:	6920      	ldr	r0, [r4, #16]
 800c73c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c740:	f104 0314 	add.w	r3, r4, #20
 800c744:	f019 091f 	ands.w	r9, r9, #31
 800c748:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c74c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c750:	d02f      	beq.n	800c7b2 <__lshift+0xc6>
 800c752:	f1c9 0e20 	rsb	lr, r9, #32
 800c756:	468a      	mov	sl, r1
 800c758:	f04f 0c00 	mov.w	ip, #0
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	fa02 f209 	lsl.w	r2, r2, r9
 800c762:	ea42 020c 	orr.w	r2, r2, ip
 800c766:	f84a 2b04 	str.w	r2, [sl], #4
 800c76a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c76e:	4298      	cmp	r0, r3
 800c770:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c774:	d8f2      	bhi.n	800c75c <__lshift+0x70>
 800c776:	1b03      	subs	r3, r0, r4
 800c778:	3b15      	subs	r3, #21
 800c77a:	f023 0303 	bic.w	r3, r3, #3
 800c77e:	3304      	adds	r3, #4
 800c780:	f104 0215 	add.w	r2, r4, #21
 800c784:	4290      	cmp	r0, r2
 800c786:	bf38      	it	cc
 800c788:	2304      	movcc	r3, #4
 800c78a:	f841 c003 	str.w	ip, [r1, r3]
 800c78e:	f1bc 0f00 	cmp.w	ip, #0
 800c792:	d001      	beq.n	800c798 <__lshift+0xac>
 800c794:	f108 0602 	add.w	r6, r8, #2
 800c798:	3e01      	subs	r6, #1
 800c79a:	4638      	mov	r0, r7
 800c79c:	612e      	str	r6, [r5, #16]
 800c79e:	4621      	mov	r1, r4
 800c7a0:	f7ff fdd2 	bl	800c348 <_Bfree>
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	e7c1      	b.n	800c736 <__lshift+0x4a>
 800c7b2:	3904      	subs	r1, #4
 800c7b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7bc:	4298      	cmp	r0, r3
 800c7be:	d8f9      	bhi.n	800c7b4 <__lshift+0xc8>
 800c7c0:	e7ea      	b.n	800c798 <__lshift+0xac>
 800c7c2:	bf00      	nop
 800c7c4:	0800e7b7 	.word	0x0800e7b7
 800c7c8:	0800e828 	.word	0x0800e828

0800c7cc <__mcmp>:
 800c7cc:	b530      	push	{r4, r5, lr}
 800c7ce:	6902      	ldr	r2, [r0, #16]
 800c7d0:	690c      	ldr	r4, [r1, #16]
 800c7d2:	1b12      	subs	r2, r2, r4
 800c7d4:	d10e      	bne.n	800c7f4 <__mcmp+0x28>
 800c7d6:	f100 0314 	add.w	r3, r0, #20
 800c7da:	3114      	adds	r1, #20
 800c7dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c7e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c7e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c7e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c7ec:	42a5      	cmp	r5, r4
 800c7ee:	d003      	beq.n	800c7f8 <__mcmp+0x2c>
 800c7f0:	d305      	bcc.n	800c7fe <__mcmp+0x32>
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	4610      	mov	r0, r2
 800c7f6:	bd30      	pop	{r4, r5, pc}
 800c7f8:	4283      	cmp	r3, r0
 800c7fa:	d3f3      	bcc.n	800c7e4 <__mcmp+0x18>
 800c7fc:	e7fa      	b.n	800c7f4 <__mcmp+0x28>
 800c7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c802:	e7f7      	b.n	800c7f4 <__mcmp+0x28>

0800c804 <__mdiff>:
 800c804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	460c      	mov	r4, r1
 800c80a:	4606      	mov	r6, r0
 800c80c:	4611      	mov	r1, r2
 800c80e:	4620      	mov	r0, r4
 800c810:	4690      	mov	r8, r2
 800c812:	f7ff ffdb 	bl	800c7cc <__mcmp>
 800c816:	1e05      	subs	r5, r0, #0
 800c818:	d110      	bne.n	800c83c <__mdiff+0x38>
 800c81a:	4629      	mov	r1, r5
 800c81c:	4630      	mov	r0, r6
 800c81e:	f7ff fd53 	bl	800c2c8 <_Balloc>
 800c822:	b930      	cbnz	r0, 800c832 <__mdiff+0x2e>
 800c824:	4b3a      	ldr	r3, [pc, #232]	; (800c910 <__mdiff+0x10c>)
 800c826:	4602      	mov	r2, r0
 800c828:	f240 2132 	movw	r1, #562	; 0x232
 800c82c:	4839      	ldr	r0, [pc, #228]	; (800c914 <__mdiff+0x110>)
 800c82e:	f000 fb85 	bl	800cf3c <__assert_func>
 800c832:	2301      	movs	r3, #1
 800c834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83c:	bfa4      	itt	ge
 800c83e:	4643      	movge	r3, r8
 800c840:	46a0      	movge	r8, r4
 800c842:	4630      	mov	r0, r6
 800c844:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c848:	bfa6      	itte	ge
 800c84a:	461c      	movge	r4, r3
 800c84c:	2500      	movge	r5, #0
 800c84e:	2501      	movlt	r5, #1
 800c850:	f7ff fd3a 	bl	800c2c8 <_Balloc>
 800c854:	b920      	cbnz	r0, 800c860 <__mdiff+0x5c>
 800c856:	4b2e      	ldr	r3, [pc, #184]	; (800c910 <__mdiff+0x10c>)
 800c858:	4602      	mov	r2, r0
 800c85a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c85e:	e7e5      	b.n	800c82c <__mdiff+0x28>
 800c860:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c864:	6926      	ldr	r6, [r4, #16]
 800c866:	60c5      	str	r5, [r0, #12]
 800c868:	f104 0914 	add.w	r9, r4, #20
 800c86c:	f108 0514 	add.w	r5, r8, #20
 800c870:	f100 0e14 	add.w	lr, r0, #20
 800c874:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c878:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c87c:	f108 0210 	add.w	r2, r8, #16
 800c880:	46f2      	mov	sl, lr
 800c882:	2100      	movs	r1, #0
 800c884:	f859 3b04 	ldr.w	r3, [r9], #4
 800c888:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c88c:	fa1f f883 	uxth.w	r8, r3
 800c890:	fa11 f18b 	uxtah	r1, r1, fp
 800c894:	0c1b      	lsrs	r3, r3, #16
 800c896:	eba1 0808 	sub.w	r8, r1, r8
 800c89a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c89e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c8a2:	fa1f f888 	uxth.w	r8, r8
 800c8a6:	1419      	asrs	r1, r3, #16
 800c8a8:	454e      	cmp	r6, r9
 800c8aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c8ae:	f84a 3b04 	str.w	r3, [sl], #4
 800c8b2:	d8e7      	bhi.n	800c884 <__mdiff+0x80>
 800c8b4:	1b33      	subs	r3, r6, r4
 800c8b6:	3b15      	subs	r3, #21
 800c8b8:	f023 0303 	bic.w	r3, r3, #3
 800c8bc:	3304      	adds	r3, #4
 800c8be:	3415      	adds	r4, #21
 800c8c0:	42a6      	cmp	r6, r4
 800c8c2:	bf38      	it	cc
 800c8c4:	2304      	movcc	r3, #4
 800c8c6:	441d      	add	r5, r3
 800c8c8:	4473      	add	r3, lr
 800c8ca:	469e      	mov	lr, r3
 800c8cc:	462e      	mov	r6, r5
 800c8ce:	4566      	cmp	r6, ip
 800c8d0:	d30e      	bcc.n	800c8f0 <__mdiff+0xec>
 800c8d2:	f10c 0203 	add.w	r2, ip, #3
 800c8d6:	1b52      	subs	r2, r2, r5
 800c8d8:	f022 0203 	bic.w	r2, r2, #3
 800c8dc:	3d03      	subs	r5, #3
 800c8de:	45ac      	cmp	ip, r5
 800c8e0:	bf38      	it	cc
 800c8e2:	2200      	movcc	r2, #0
 800c8e4:	441a      	add	r2, r3
 800c8e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c8ea:	b17b      	cbz	r3, 800c90c <__mdiff+0x108>
 800c8ec:	6107      	str	r7, [r0, #16]
 800c8ee:	e7a3      	b.n	800c838 <__mdiff+0x34>
 800c8f0:	f856 8b04 	ldr.w	r8, [r6], #4
 800c8f4:	fa11 f288 	uxtah	r2, r1, r8
 800c8f8:	1414      	asrs	r4, r2, #16
 800c8fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8fe:	b292      	uxth	r2, r2
 800c900:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c904:	f84e 2b04 	str.w	r2, [lr], #4
 800c908:	1421      	asrs	r1, r4, #16
 800c90a:	e7e0      	b.n	800c8ce <__mdiff+0xca>
 800c90c:	3f01      	subs	r7, #1
 800c90e:	e7ea      	b.n	800c8e6 <__mdiff+0xe2>
 800c910:	0800e7b7 	.word	0x0800e7b7
 800c914:	0800e828 	.word	0x0800e828

0800c918 <__d2b>:
 800c918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c91c:	4689      	mov	r9, r1
 800c91e:	2101      	movs	r1, #1
 800c920:	ec57 6b10 	vmov	r6, r7, d0
 800c924:	4690      	mov	r8, r2
 800c926:	f7ff fccf 	bl	800c2c8 <_Balloc>
 800c92a:	4604      	mov	r4, r0
 800c92c:	b930      	cbnz	r0, 800c93c <__d2b+0x24>
 800c92e:	4602      	mov	r2, r0
 800c930:	4b25      	ldr	r3, [pc, #148]	; (800c9c8 <__d2b+0xb0>)
 800c932:	4826      	ldr	r0, [pc, #152]	; (800c9cc <__d2b+0xb4>)
 800c934:	f240 310a 	movw	r1, #778	; 0x30a
 800c938:	f000 fb00 	bl	800cf3c <__assert_func>
 800c93c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c944:	bb35      	cbnz	r5, 800c994 <__d2b+0x7c>
 800c946:	2e00      	cmp	r6, #0
 800c948:	9301      	str	r3, [sp, #4]
 800c94a:	d028      	beq.n	800c99e <__d2b+0x86>
 800c94c:	4668      	mov	r0, sp
 800c94e:	9600      	str	r6, [sp, #0]
 800c950:	f7ff fd82 	bl	800c458 <__lo0bits>
 800c954:	9900      	ldr	r1, [sp, #0]
 800c956:	b300      	cbz	r0, 800c99a <__d2b+0x82>
 800c958:	9a01      	ldr	r2, [sp, #4]
 800c95a:	f1c0 0320 	rsb	r3, r0, #32
 800c95e:	fa02 f303 	lsl.w	r3, r2, r3
 800c962:	430b      	orrs	r3, r1
 800c964:	40c2      	lsrs	r2, r0
 800c966:	6163      	str	r3, [r4, #20]
 800c968:	9201      	str	r2, [sp, #4]
 800c96a:	9b01      	ldr	r3, [sp, #4]
 800c96c:	61a3      	str	r3, [r4, #24]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	bf14      	ite	ne
 800c972:	2202      	movne	r2, #2
 800c974:	2201      	moveq	r2, #1
 800c976:	6122      	str	r2, [r4, #16]
 800c978:	b1d5      	cbz	r5, 800c9b0 <__d2b+0x98>
 800c97a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c97e:	4405      	add	r5, r0
 800c980:	f8c9 5000 	str.w	r5, [r9]
 800c984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c988:	f8c8 0000 	str.w	r0, [r8]
 800c98c:	4620      	mov	r0, r4
 800c98e:	b003      	add	sp, #12
 800c990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c998:	e7d5      	b.n	800c946 <__d2b+0x2e>
 800c99a:	6161      	str	r1, [r4, #20]
 800c99c:	e7e5      	b.n	800c96a <__d2b+0x52>
 800c99e:	a801      	add	r0, sp, #4
 800c9a0:	f7ff fd5a 	bl	800c458 <__lo0bits>
 800c9a4:	9b01      	ldr	r3, [sp, #4]
 800c9a6:	6163      	str	r3, [r4, #20]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	6122      	str	r2, [r4, #16]
 800c9ac:	3020      	adds	r0, #32
 800c9ae:	e7e3      	b.n	800c978 <__d2b+0x60>
 800c9b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c9b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9b8:	f8c9 0000 	str.w	r0, [r9]
 800c9bc:	6918      	ldr	r0, [r3, #16]
 800c9be:	f7ff fd2b 	bl	800c418 <__hi0bits>
 800c9c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c9c6:	e7df      	b.n	800c988 <__d2b+0x70>
 800c9c8:	0800e7b7 	.word	0x0800e7b7
 800c9cc:	0800e828 	.word	0x0800e828

0800c9d0 <_calloc_r>:
 800c9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9d2:	fba1 2402 	umull	r2, r4, r1, r2
 800c9d6:	b94c      	cbnz	r4, 800c9ec <_calloc_r+0x1c>
 800c9d8:	4611      	mov	r1, r2
 800c9da:	9201      	str	r2, [sp, #4]
 800c9dc:	f000 f87a 	bl	800cad4 <_malloc_r>
 800c9e0:	9a01      	ldr	r2, [sp, #4]
 800c9e2:	4605      	mov	r5, r0
 800c9e4:	b930      	cbnz	r0, 800c9f4 <_calloc_r+0x24>
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	b003      	add	sp, #12
 800c9ea:	bd30      	pop	{r4, r5, pc}
 800c9ec:	220c      	movs	r2, #12
 800c9ee:	6002      	str	r2, [r0, #0]
 800c9f0:	2500      	movs	r5, #0
 800c9f2:	e7f8      	b.n	800c9e6 <_calloc_r+0x16>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	f7fd fdf1 	bl	800a5dc <memset>
 800c9fa:	e7f4      	b.n	800c9e6 <_calloc_r+0x16>

0800c9fc <_free_r>:
 800c9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9fe:	2900      	cmp	r1, #0
 800ca00:	d044      	beq.n	800ca8c <_free_r+0x90>
 800ca02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca06:	9001      	str	r0, [sp, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f1a1 0404 	sub.w	r4, r1, #4
 800ca0e:	bfb8      	it	lt
 800ca10:	18e4      	addlt	r4, r4, r3
 800ca12:	f000 fb19 	bl	800d048 <__malloc_lock>
 800ca16:	4a1e      	ldr	r2, [pc, #120]	; (800ca90 <_free_r+0x94>)
 800ca18:	9801      	ldr	r0, [sp, #4]
 800ca1a:	6813      	ldr	r3, [r2, #0]
 800ca1c:	b933      	cbnz	r3, 800ca2c <_free_r+0x30>
 800ca1e:	6063      	str	r3, [r4, #4]
 800ca20:	6014      	str	r4, [r2, #0]
 800ca22:	b003      	add	sp, #12
 800ca24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca28:	f000 bb14 	b.w	800d054 <__malloc_unlock>
 800ca2c:	42a3      	cmp	r3, r4
 800ca2e:	d908      	bls.n	800ca42 <_free_r+0x46>
 800ca30:	6825      	ldr	r5, [r4, #0]
 800ca32:	1961      	adds	r1, r4, r5
 800ca34:	428b      	cmp	r3, r1
 800ca36:	bf01      	itttt	eq
 800ca38:	6819      	ldreq	r1, [r3, #0]
 800ca3a:	685b      	ldreq	r3, [r3, #4]
 800ca3c:	1949      	addeq	r1, r1, r5
 800ca3e:	6021      	streq	r1, [r4, #0]
 800ca40:	e7ed      	b.n	800ca1e <_free_r+0x22>
 800ca42:	461a      	mov	r2, r3
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	b10b      	cbz	r3, 800ca4c <_free_r+0x50>
 800ca48:	42a3      	cmp	r3, r4
 800ca4a:	d9fa      	bls.n	800ca42 <_free_r+0x46>
 800ca4c:	6811      	ldr	r1, [r2, #0]
 800ca4e:	1855      	adds	r5, r2, r1
 800ca50:	42a5      	cmp	r5, r4
 800ca52:	d10b      	bne.n	800ca6c <_free_r+0x70>
 800ca54:	6824      	ldr	r4, [r4, #0]
 800ca56:	4421      	add	r1, r4
 800ca58:	1854      	adds	r4, r2, r1
 800ca5a:	42a3      	cmp	r3, r4
 800ca5c:	6011      	str	r1, [r2, #0]
 800ca5e:	d1e0      	bne.n	800ca22 <_free_r+0x26>
 800ca60:	681c      	ldr	r4, [r3, #0]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	6053      	str	r3, [r2, #4]
 800ca66:	4421      	add	r1, r4
 800ca68:	6011      	str	r1, [r2, #0]
 800ca6a:	e7da      	b.n	800ca22 <_free_r+0x26>
 800ca6c:	d902      	bls.n	800ca74 <_free_r+0x78>
 800ca6e:	230c      	movs	r3, #12
 800ca70:	6003      	str	r3, [r0, #0]
 800ca72:	e7d6      	b.n	800ca22 <_free_r+0x26>
 800ca74:	6825      	ldr	r5, [r4, #0]
 800ca76:	1961      	adds	r1, r4, r5
 800ca78:	428b      	cmp	r3, r1
 800ca7a:	bf04      	itt	eq
 800ca7c:	6819      	ldreq	r1, [r3, #0]
 800ca7e:	685b      	ldreq	r3, [r3, #4]
 800ca80:	6063      	str	r3, [r4, #4]
 800ca82:	bf04      	itt	eq
 800ca84:	1949      	addeq	r1, r1, r5
 800ca86:	6021      	streq	r1, [r4, #0]
 800ca88:	6054      	str	r4, [r2, #4]
 800ca8a:	e7ca      	b.n	800ca22 <_free_r+0x26>
 800ca8c:	b003      	add	sp, #12
 800ca8e:	bd30      	pop	{r4, r5, pc}
 800ca90:	20000ee0 	.word	0x20000ee0

0800ca94 <sbrk_aligned>:
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	4e0e      	ldr	r6, [pc, #56]	; (800cad0 <sbrk_aligned+0x3c>)
 800ca98:	460c      	mov	r4, r1
 800ca9a:	6831      	ldr	r1, [r6, #0]
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	b911      	cbnz	r1, 800caa6 <sbrk_aligned+0x12>
 800caa0:	f000 f9e6 	bl	800ce70 <_sbrk_r>
 800caa4:	6030      	str	r0, [r6, #0]
 800caa6:	4621      	mov	r1, r4
 800caa8:	4628      	mov	r0, r5
 800caaa:	f000 f9e1 	bl	800ce70 <_sbrk_r>
 800caae:	1c43      	adds	r3, r0, #1
 800cab0:	d00a      	beq.n	800cac8 <sbrk_aligned+0x34>
 800cab2:	1cc4      	adds	r4, r0, #3
 800cab4:	f024 0403 	bic.w	r4, r4, #3
 800cab8:	42a0      	cmp	r0, r4
 800caba:	d007      	beq.n	800cacc <sbrk_aligned+0x38>
 800cabc:	1a21      	subs	r1, r4, r0
 800cabe:	4628      	mov	r0, r5
 800cac0:	f000 f9d6 	bl	800ce70 <_sbrk_r>
 800cac4:	3001      	adds	r0, #1
 800cac6:	d101      	bne.n	800cacc <sbrk_aligned+0x38>
 800cac8:	f04f 34ff 	mov.w	r4, #4294967295
 800cacc:	4620      	mov	r0, r4
 800cace:	bd70      	pop	{r4, r5, r6, pc}
 800cad0:	20000ee4 	.word	0x20000ee4

0800cad4 <_malloc_r>:
 800cad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad8:	1ccd      	adds	r5, r1, #3
 800cada:	f025 0503 	bic.w	r5, r5, #3
 800cade:	3508      	adds	r5, #8
 800cae0:	2d0c      	cmp	r5, #12
 800cae2:	bf38      	it	cc
 800cae4:	250c      	movcc	r5, #12
 800cae6:	2d00      	cmp	r5, #0
 800cae8:	4607      	mov	r7, r0
 800caea:	db01      	blt.n	800caf0 <_malloc_r+0x1c>
 800caec:	42a9      	cmp	r1, r5
 800caee:	d905      	bls.n	800cafc <_malloc_r+0x28>
 800caf0:	230c      	movs	r3, #12
 800caf2:	603b      	str	r3, [r7, #0]
 800caf4:	2600      	movs	r6, #0
 800caf6:	4630      	mov	r0, r6
 800caf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cafc:	4e2e      	ldr	r6, [pc, #184]	; (800cbb8 <_malloc_r+0xe4>)
 800cafe:	f000 faa3 	bl	800d048 <__malloc_lock>
 800cb02:	6833      	ldr	r3, [r6, #0]
 800cb04:	461c      	mov	r4, r3
 800cb06:	bb34      	cbnz	r4, 800cb56 <_malloc_r+0x82>
 800cb08:	4629      	mov	r1, r5
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	f7ff ffc2 	bl	800ca94 <sbrk_aligned>
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	4604      	mov	r4, r0
 800cb14:	d14d      	bne.n	800cbb2 <_malloc_r+0xde>
 800cb16:	6834      	ldr	r4, [r6, #0]
 800cb18:	4626      	mov	r6, r4
 800cb1a:	2e00      	cmp	r6, #0
 800cb1c:	d140      	bne.n	800cba0 <_malloc_r+0xcc>
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	4631      	mov	r1, r6
 800cb22:	4638      	mov	r0, r7
 800cb24:	eb04 0803 	add.w	r8, r4, r3
 800cb28:	f000 f9a2 	bl	800ce70 <_sbrk_r>
 800cb2c:	4580      	cmp	r8, r0
 800cb2e:	d13a      	bne.n	800cba6 <_malloc_r+0xd2>
 800cb30:	6821      	ldr	r1, [r4, #0]
 800cb32:	3503      	adds	r5, #3
 800cb34:	1a6d      	subs	r5, r5, r1
 800cb36:	f025 0503 	bic.w	r5, r5, #3
 800cb3a:	3508      	adds	r5, #8
 800cb3c:	2d0c      	cmp	r5, #12
 800cb3e:	bf38      	it	cc
 800cb40:	250c      	movcc	r5, #12
 800cb42:	4629      	mov	r1, r5
 800cb44:	4638      	mov	r0, r7
 800cb46:	f7ff ffa5 	bl	800ca94 <sbrk_aligned>
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	d02b      	beq.n	800cba6 <_malloc_r+0xd2>
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	442b      	add	r3, r5
 800cb52:	6023      	str	r3, [r4, #0]
 800cb54:	e00e      	b.n	800cb74 <_malloc_r+0xa0>
 800cb56:	6822      	ldr	r2, [r4, #0]
 800cb58:	1b52      	subs	r2, r2, r5
 800cb5a:	d41e      	bmi.n	800cb9a <_malloc_r+0xc6>
 800cb5c:	2a0b      	cmp	r2, #11
 800cb5e:	d916      	bls.n	800cb8e <_malloc_r+0xba>
 800cb60:	1961      	adds	r1, r4, r5
 800cb62:	42a3      	cmp	r3, r4
 800cb64:	6025      	str	r5, [r4, #0]
 800cb66:	bf18      	it	ne
 800cb68:	6059      	strne	r1, [r3, #4]
 800cb6a:	6863      	ldr	r3, [r4, #4]
 800cb6c:	bf08      	it	eq
 800cb6e:	6031      	streq	r1, [r6, #0]
 800cb70:	5162      	str	r2, [r4, r5]
 800cb72:	604b      	str	r3, [r1, #4]
 800cb74:	4638      	mov	r0, r7
 800cb76:	f104 060b 	add.w	r6, r4, #11
 800cb7a:	f000 fa6b 	bl	800d054 <__malloc_unlock>
 800cb7e:	f026 0607 	bic.w	r6, r6, #7
 800cb82:	1d23      	adds	r3, r4, #4
 800cb84:	1af2      	subs	r2, r6, r3
 800cb86:	d0b6      	beq.n	800caf6 <_malloc_r+0x22>
 800cb88:	1b9b      	subs	r3, r3, r6
 800cb8a:	50a3      	str	r3, [r4, r2]
 800cb8c:	e7b3      	b.n	800caf6 <_malloc_r+0x22>
 800cb8e:	6862      	ldr	r2, [r4, #4]
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	bf0c      	ite	eq
 800cb94:	6032      	streq	r2, [r6, #0]
 800cb96:	605a      	strne	r2, [r3, #4]
 800cb98:	e7ec      	b.n	800cb74 <_malloc_r+0xa0>
 800cb9a:	4623      	mov	r3, r4
 800cb9c:	6864      	ldr	r4, [r4, #4]
 800cb9e:	e7b2      	b.n	800cb06 <_malloc_r+0x32>
 800cba0:	4634      	mov	r4, r6
 800cba2:	6876      	ldr	r6, [r6, #4]
 800cba4:	e7b9      	b.n	800cb1a <_malloc_r+0x46>
 800cba6:	230c      	movs	r3, #12
 800cba8:	603b      	str	r3, [r7, #0]
 800cbaa:	4638      	mov	r0, r7
 800cbac:	f000 fa52 	bl	800d054 <__malloc_unlock>
 800cbb0:	e7a1      	b.n	800caf6 <_malloc_r+0x22>
 800cbb2:	6025      	str	r5, [r4, #0]
 800cbb4:	e7de      	b.n	800cb74 <_malloc_r+0xa0>
 800cbb6:	bf00      	nop
 800cbb8:	20000ee0 	.word	0x20000ee0

0800cbbc <__sfputc_r>:
 800cbbc:	6893      	ldr	r3, [r2, #8]
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	b410      	push	{r4}
 800cbc4:	6093      	str	r3, [r2, #8]
 800cbc6:	da08      	bge.n	800cbda <__sfputc_r+0x1e>
 800cbc8:	6994      	ldr	r4, [r2, #24]
 800cbca:	42a3      	cmp	r3, r4
 800cbcc:	db01      	blt.n	800cbd2 <__sfputc_r+0x16>
 800cbce:	290a      	cmp	r1, #10
 800cbd0:	d103      	bne.n	800cbda <__sfputc_r+0x1e>
 800cbd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbd6:	f7fe ba01 	b.w	800afdc <__swbuf_r>
 800cbda:	6813      	ldr	r3, [r2, #0]
 800cbdc:	1c58      	adds	r0, r3, #1
 800cbde:	6010      	str	r0, [r2, #0]
 800cbe0:	7019      	strb	r1, [r3, #0]
 800cbe2:	4608      	mov	r0, r1
 800cbe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <__sfputs_r>:
 800cbea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbec:	4606      	mov	r6, r0
 800cbee:	460f      	mov	r7, r1
 800cbf0:	4614      	mov	r4, r2
 800cbf2:	18d5      	adds	r5, r2, r3
 800cbf4:	42ac      	cmp	r4, r5
 800cbf6:	d101      	bne.n	800cbfc <__sfputs_r+0x12>
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	e007      	b.n	800cc0c <__sfputs_r+0x22>
 800cbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc00:	463a      	mov	r2, r7
 800cc02:	4630      	mov	r0, r6
 800cc04:	f7ff ffda 	bl	800cbbc <__sfputc_r>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	d1f3      	bne.n	800cbf4 <__sfputs_r+0xa>
 800cc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc10 <_vfiprintf_r>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	460d      	mov	r5, r1
 800cc16:	b09d      	sub	sp, #116	; 0x74
 800cc18:	4614      	mov	r4, r2
 800cc1a:	4698      	mov	r8, r3
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	b118      	cbz	r0, 800cc28 <_vfiprintf_r+0x18>
 800cc20:	6983      	ldr	r3, [r0, #24]
 800cc22:	b90b      	cbnz	r3, 800cc28 <_vfiprintf_r+0x18>
 800cc24:	f7ff fa30 	bl	800c088 <__sinit>
 800cc28:	4b89      	ldr	r3, [pc, #548]	; (800ce50 <_vfiprintf_r+0x240>)
 800cc2a:	429d      	cmp	r5, r3
 800cc2c:	d11b      	bne.n	800cc66 <_vfiprintf_r+0x56>
 800cc2e:	6875      	ldr	r5, [r6, #4]
 800cc30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc32:	07d9      	lsls	r1, r3, #31
 800cc34:	d405      	bmi.n	800cc42 <_vfiprintf_r+0x32>
 800cc36:	89ab      	ldrh	r3, [r5, #12]
 800cc38:	059a      	lsls	r2, r3, #22
 800cc3a:	d402      	bmi.n	800cc42 <_vfiprintf_r+0x32>
 800cc3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc3e:	f7ff fac6 	bl	800c1ce <__retarget_lock_acquire_recursive>
 800cc42:	89ab      	ldrh	r3, [r5, #12]
 800cc44:	071b      	lsls	r3, r3, #28
 800cc46:	d501      	bpl.n	800cc4c <_vfiprintf_r+0x3c>
 800cc48:	692b      	ldr	r3, [r5, #16]
 800cc4a:	b9eb      	cbnz	r3, 800cc88 <_vfiprintf_r+0x78>
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f7fe fa16 	bl	800b080 <__swsetup_r>
 800cc54:	b1c0      	cbz	r0, 800cc88 <_vfiprintf_r+0x78>
 800cc56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc58:	07dc      	lsls	r4, r3, #31
 800cc5a:	d50e      	bpl.n	800cc7a <_vfiprintf_r+0x6a>
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc60:	b01d      	add	sp, #116	; 0x74
 800cc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc66:	4b7b      	ldr	r3, [pc, #492]	; (800ce54 <_vfiprintf_r+0x244>)
 800cc68:	429d      	cmp	r5, r3
 800cc6a:	d101      	bne.n	800cc70 <_vfiprintf_r+0x60>
 800cc6c:	68b5      	ldr	r5, [r6, #8]
 800cc6e:	e7df      	b.n	800cc30 <_vfiprintf_r+0x20>
 800cc70:	4b79      	ldr	r3, [pc, #484]	; (800ce58 <_vfiprintf_r+0x248>)
 800cc72:	429d      	cmp	r5, r3
 800cc74:	bf08      	it	eq
 800cc76:	68f5      	ldreq	r5, [r6, #12]
 800cc78:	e7da      	b.n	800cc30 <_vfiprintf_r+0x20>
 800cc7a:	89ab      	ldrh	r3, [r5, #12]
 800cc7c:	0598      	lsls	r0, r3, #22
 800cc7e:	d4ed      	bmi.n	800cc5c <_vfiprintf_r+0x4c>
 800cc80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc82:	f7ff faa5 	bl	800c1d0 <__retarget_lock_release_recursive>
 800cc86:	e7e9      	b.n	800cc5c <_vfiprintf_r+0x4c>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc8c:	2320      	movs	r3, #32
 800cc8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc92:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc96:	2330      	movs	r3, #48	; 0x30
 800cc98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce5c <_vfiprintf_r+0x24c>
 800cc9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cca0:	f04f 0901 	mov.w	r9, #1
 800cca4:	4623      	mov	r3, r4
 800cca6:	469a      	mov	sl, r3
 800cca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccac:	b10a      	cbz	r2, 800ccb2 <_vfiprintf_r+0xa2>
 800ccae:	2a25      	cmp	r2, #37	; 0x25
 800ccb0:	d1f9      	bne.n	800cca6 <_vfiprintf_r+0x96>
 800ccb2:	ebba 0b04 	subs.w	fp, sl, r4
 800ccb6:	d00b      	beq.n	800ccd0 <_vfiprintf_r+0xc0>
 800ccb8:	465b      	mov	r3, fp
 800ccba:	4622      	mov	r2, r4
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f7ff ff93 	bl	800cbea <__sfputs_r>
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	f000 80aa 	beq.w	800ce1e <_vfiprintf_r+0x20e>
 800ccca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cccc:	445a      	add	r2, fp
 800ccce:	9209      	str	r2, [sp, #36]	; 0x24
 800ccd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f000 80a2 	beq.w	800ce1e <_vfiprintf_r+0x20e>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cce4:	f10a 0a01 	add.w	sl, sl, #1
 800cce8:	9304      	str	r3, [sp, #16]
 800ccea:	9307      	str	r3, [sp, #28]
 800ccec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccf0:	931a      	str	r3, [sp, #104]	; 0x68
 800ccf2:	4654      	mov	r4, sl
 800ccf4:	2205      	movs	r2, #5
 800ccf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfa:	4858      	ldr	r0, [pc, #352]	; (800ce5c <_vfiprintf_r+0x24c>)
 800ccfc:	f7f3 fa88 	bl	8000210 <memchr>
 800cd00:	9a04      	ldr	r2, [sp, #16]
 800cd02:	b9d8      	cbnz	r0, 800cd3c <_vfiprintf_r+0x12c>
 800cd04:	06d1      	lsls	r1, r2, #27
 800cd06:	bf44      	itt	mi
 800cd08:	2320      	movmi	r3, #32
 800cd0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd0e:	0713      	lsls	r3, r2, #28
 800cd10:	bf44      	itt	mi
 800cd12:	232b      	movmi	r3, #43	; 0x2b
 800cd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd18:	f89a 3000 	ldrb.w	r3, [sl]
 800cd1c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd1e:	d015      	beq.n	800cd4c <_vfiprintf_r+0x13c>
 800cd20:	9a07      	ldr	r2, [sp, #28]
 800cd22:	4654      	mov	r4, sl
 800cd24:	2000      	movs	r0, #0
 800cd26:	f04f 0c0a 	mov.w	ip, #10
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd30:	3b30      	subs	r3, #48	; 0x30
 800cd32:	2b09      	cmp	r3, #9
 800cd34:	d94e      	bls.n	800cdd4 <_vfiprintf_r+0x1c4>
 800cd36:	b1b0      	cbz	r0, 800cd66 <_vfiprintf_r+0x156>
 800cd38:	9207      	str	r2, [sp, #28]
 800cd3a:	e014      	b.n	800cd66 <_vfiprintf_r+0x156>
 800cd3c:	eba0 0308 	sub.w	r3, r0, r8
 800cd40:	fa09 f303 	lsl.w	r3, r9, r3
 800cd44:	4313      	orrs	r3, r2
 800cd46:	9304      	str	r3, [sp, #16]
 800cd48:	46a2      	mov	sl, r4
 800cd4a:	e7d2      	b.n	800ccf2 <_vfiprintf_r+0xe2>
 800cd4c:	9b03      	ldr	r3, [sp, #12]
 800cd4e:	1d19      	adds	r1, r3, #4
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	9103      	str	r1, [sp, #12]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	bfbb      	ittet	lt
 800cd58:	425b      	neglt	r3, r3
 800cd5a:	f042 0202 	orrlt.w	r2, r2, #2
 800cd5e:	9307      	strge	r3, [sp, #28]
 800cd60:	9307      	strlt	r3, [sp, #28]
 800cd62:	bfb8      	it	lt
 800cd64:	9204      	strlt	r2, [sp, #16]
 800cd66:	7823      	ldrb	r3, [r4, #0]
 800cd68:	2b2e      	cmp	r3, #46	; 0x2e
 800cd6a:	d10c      	bne.n	800cd86 <_vfiprintf_r+0x176>
 800cd6c:	7863      	ldrb	r3, [r4, #1]
 800cd6e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd70:	d135      	bne.n	800cdde <_vfiprintf_r+0x1ce>
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	1d1a      	adds	r2, r3, #4
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	9203      	str	r2, [sp, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	bfb8      	it	lt
 800cd7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd82:	3402      	adds	r4, #2
 800cd84:	9305      	str	r3, [sp, #20]
 800cd86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce6c <_vfiprintf_r+0x25c>
 800cd8a:	7821      	ldrb	r1, [r4, #0]
 800cd8c:	2203      	movs	r2, #3
 800cd8e:	4650      	mov	r0, sl
 800cd90:	f7f3 fa3e 	bl	8000210 <memchr>
 800cd94:	b140      	cbz	r0, 800cda8 <_vfiprintf_r+0x198>
 800cd96:	2340      	movs	r3, #64	; 0x40
 800cd98:	eba0 000a 	sub.w	r0, r0, sl
 800cd9c:	fa03 f000 	lsl.w	r0, r3, r0
 800cda0:	9b04      	ldr	r3, [sp, #16]
 800cda2:	4303      	orrs	r3, r0
 800cda4:	3401      	adds	r4, #1
 800cda6:	9304      	str	r3, [sp, #16]
 800cda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdac:	482c      	ldr	r0, [pc, #176]	; (800ce60 <_vfiprintf_r+0x250>)
 800cdae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdb2:	2206      	movs	r2, #6
 800cdb4:	f7f3 fa2c 	bl	8000210 <memchr>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d03f      	beq.n	800ce3c <_vfiprintf_r+0x22c>
 800cdbc:	4b29      	ldr	r3, [pc, #164]	; (800ce64 <_vfiprintf_r+0x254>)
 800cdbe:	bb1b      	cbnz	r3, 800ce08 <_vfiprintf_r+0x1f8>
 800cdc0:	9b03      	ldr	r3, [sp, #12]
 800cdc2:	3307      	adds	r3, #7
 800cdc4:	f023 0307 	bic.w	r3, r3, #7
 800cdc8:	3308      	adds	r3, #8
 800cdca:	9303      	str	r3, [sp, #12]
 800cdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdce:	443b      	add	r3, r7
 800cdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd2:	e767      	b.n	800cca4 <_vfiprintf_r+0x94>
 800cdd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdd8:	460c      	mov	r4, r1
 800cdda:	2001      	movs	r0, #1
 800cddc:	e7a5      	b.n	800cd2a <_vfiprintf_r+0x11a>
 800cdde:	2300      	movs	r3, #0
 800cde0:	3401      	adds	r4, #1
 800cde2:	9305      	str	r3, [sp, #20]
 800cde4:	4619      	mov	r1, r3
 800cde6:	f04f 0c0a 	mov.w	ip, #10
 800cdea:	4620      	mov	r0, r4
 800cdec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdf0:	3a30      	subs	r2, #48	; 0x30
 800cdf2:	2a09      	cmp	r2, #9
 800cdf4:	d903      	bls.n	800cdfe <_vfiprintf_r+0x1ee>
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d0c5      	beq.n	800cd86 <_vfiprintf_r+0x176>
 800cdfa:	9105      	str	r1, [sp, #20]
 800cdfc:	e7c3      	b.n	800cd86 <_vfiprintf_r+0x176>
 800cdfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce02:	4604      	mov	r4, r0
 800ce04:	2301      	movs	r3, #1
 800ce06:	e7f0      	b.n	800cdea <_vfiprintf_r+0x1da>
 800ce08:	ab03      	add	r3, sp, #12
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	462a      	mov	r2, r5
 800ce0e:	4b16      	ldr	r3, [pc, #88]	; (800ce68 <_vfiprintf_r+0x258>)
 800ce10:	a904      	add	r1, sp, #16
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7fd fc8a 	bl	800a72c <_printf_float>
 800ce18:	4607      	mov	r7, r0
 800ce1a:	1c78      	adds	r0, r7, #1
 800ce1c:	d1d6      	bne.n	800cdcc <_vfiprintf_r+0x1bc>
 800ce1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce20:	07d9      	lsls	r1, r3, #31
 800ce22:	d405      	bmi.n	800ce30 <_vfiprintf_r+0x220>
 800ce24:	89ab      	ldrh	r3, [r5, #12]
 800ce26:	059a      	lsls	r2, r3, #22
 800ce28:	d402      	bmi.n	800ce30 <_vfiprintf_r+0x220>
 800ce2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce2c:	f7ff f9d0 	bl	800c1d0 <__retarget_lock_release_recursive>
 800ce30:	89ab      	ldrh	r3, [r5, #12]
 800ce32:	065b      	lsls	r3, r3, #25
 800ce34:	f53f af12 	bmi.w	800cc5c <_vfiprintf_r+0x4c>
 800ce38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce3a:	e711      	b.n	800cc60 <_vfiprintf_r+0x50>
 800ce3c:	ab03      	add	r3, sp, #12
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	462a      	mov	r2, r5
 800ce42:	4b09      	ldr	r3, [pc, #36]	; (800ce68 <_vfiprintf_r+0x258>)
 800ce44:	a904      	add	r1, sp, #16
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7fd ff14 	bl	800ac74 <_printf_i>
 800ce4c:	e7e4      	b.n	800ce18 <_vfiprintf_r+0x208>
 800ce4e:	bf00      	nop
 800ce50:	0800e7e8 	.word	0x0800e7e8
 800ce54:	0800e808 	.word	0x0800e808
 800ce58:	0800e7c8 	.word	0x0800e7c8
 800ce5c:	0800e984 	.word	0x0800e984
 800ce60:	0800e98e 	.word	0x0800e98e
 800ce64:	0800a72d 	.word	0x0800a72d
 800ce68:	0800cbeb 	.word	0x0800cbeb
 800ce6c:	0800e98a 	.word	0x0800e98a

0800ce70 <_sbrk_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4d06      	ldr	r5, [pc, #24]	; (800ce8c <_sbrk_r+0x1c>)
 800ce74:	2300      	movs	r3, #0
 800ce76:	4604      	mov	r4, r0
 800ce78:	4608      	mov	r0, r1
 800ce7a:	602b      	str	r3, [r5, #0]
 800ce7c:	f7f6 f934 	bl	80030e8 <_sbrk>
 800ce80:	1c43      	adds	r3, r0, #1
 800ce82:	d102      	bne.n	800ce8a <_sbrk_r+0x1a>
 800ce84:	682b      	ldr	r3, [r5, #0]
 800ce86:	b103      	cbz	r3, 800ce8a <_sbrk_r+0x1a>
 800ce88:	6023      	str	r3, [r4, #0]
 800ce8a:	bd38      	pop	{r3, r4, r5, pc}
 800ce8c:	20000ee8 	.word	0x20000ee8

0800ce90 <__sread>:
 800ce90:	b510      	push	{r4, lr}
 800ce92:	460c      	mov	r4, r1
 800ce94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce98:	f000 f8e2 	bl	800d060 <_read_r>
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	bfab      	itete	ge
 800cea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cea2:	89a3      	ldrhlt	r3, [r4, #12]
 800cea4:	181b      	addge	r3, r3, r0
 800cea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ceaa:	bfac      	ite	ge
 800ceac:	6563      	strge	r3, [r4, #84]	; 0x54
 800ceae:	81a3      	strhlt	r3, [r4, #12]
 800ceb0:	bd10      	pop	{r4, pc}

0800ceb2 <__swrite>:
 800ceb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb6:	461f      	mov	r7, r3
 800ceb8:	898b      	ldrh	r3, [r1, #12]
 800ceba:	05db      	lsls	r3, r3, #23
 800cebc:	4605      	mov	r5, r0
 800cebe:	460c      	mov	r4, r1
 800cec0:	4616      	mov	r6, r2
 800cec2:	d505      	bpl.n	800ced0 <__swrite+0x1e>
 800cec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec8:	2302      	movs	r3, #2
 800ceca:	2200      	movs	r2, #0
 800cecc:	f000 f898 	bl	800d000 <_lseek_r>
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ced6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ceda:	81a3      	strh	r3, [r4, #12]
 800cedc:	4632      	mov	r2, r6
 800cede:	463b      	mov	r3, r7
 800cee0:	4628      	mov	r0, r5
 800cee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cee6:	f000 b817 	b.w	800cf18 <_write_r>

0800ceea <__sseek>:
 800ceea:	b510      	push	{r4, lr}
 800ceec:	460c      	mov	r4, r1
 800ceee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef2:	f000 f885 	bl	800d000 <_lseek_r>
 800cef6:	1c43      	adds	r3, r0, #1
 800cef8:	89a3      	ldrh	r3, [r4, #12]
 800cefa:	bf15      	itete	ne
 800cefc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cefe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf06:	81a3      	strheq	r3, [r4, #12]
 800cf08:	bf18      	it	ne
 800cf0a:	81a3      	strhne	r3, [r4, #12]
 800cf0c:	bd10      	pop	{r4, pc}

0800cf0e <__sclose>:
 800cf0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf12:	f000 b831 	b.w	800cf78 <_close_r>
	...

0800cf18 <_write_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4d07      	ldr	r5, [pc, #28]	; (800cf38 <_write_r+0x20>)
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	4608      	mov	r0, r1
 800cf20:	4611      	mov	r1, r2
 800cf22:	2200      	movs	r2, #0
 800cf24:	602a      	str	r2, [r5, #0]
 800cf26:	461a      	mov	r2, r3
 800cf28:	f7f6 f88d 	bl	8003046 <_write>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d102      	bne.n	800cf36 <_write_r+0x1e>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	b103      	cbz	r3, 800cf36 <_write_r+0x1e>
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	20000ee8 	.word	0x20000ee8

0800cf3c <__assert_func>:
 800cf3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf3e:	4614      	mov	r4, r2
 800cf40:	461a      	mov	r2, r3
 800cf42:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <__assert_func+0x2c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4605      	mov	r5, r0
 800cf48:	68d8      	ldr	r0, [r3, #12]
 800cf4a:	b14c      	cbz	r4, 800cf60 <__assert_func+0x24>
 800cf4c:	4b07      	ldr	r3, [pc, #28]	; (800cf6c <__assert_func+0x30>)
 800cf4e:	9100      	str	r1, [sp, #0]
 800cf50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf54:	4906      	ldr	r1, [pc, #24]	; (800cf70 <__assert_func+0x34>)
 800cf56:	462b      	mov	r3, r5
 800cf58:	f000 f81e 	bl	800cf98 <fiprintf>
 800cf5c:	f000 f89f 	bl	800d09e <abort>
 800cf60:	4b04      	ldr	r3, [pc, #16]	; (800cf74 <__assert_func+0x38>)
 800cf62:	461c      	mov	r4, r3
 800cf64:	e7f3      	b.n	800cf4e <__assert_func+0x12>
 800cf66:	bf00      	nop
 800cf68:	20000024 	.word	0x20000024
 800cf6c:	0800e995 	.word	0x0800e995
 800cf70:	0800e9a2 	.word	0x0800e9a2
 800cf74:	0800e9d0 	.word	0x0800e9d0

0800cf78 <_close_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d06      	ldr	r5, [pc, #24]	; (800cf94 <_close_r+0x1c>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	602b      	str	r3, [r5, #0]
 800cf84:	f7f6 f87b 	bl	800307e <_close>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	d102      	bne.n	800cf92 <_close_r+0x1a>
 800cf8c:	682b      	ldr	r3, [r5, #0]
 800cf8e:	b103      	cbz	r3, 800cf92 <_close_r+0x1a>
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	20000ee8 	.word	0x20000ee8

0800cf98 <fiprintf>:
 800cf98:	b40e      	push	{r1, r2, r3}
 800cf9a:	b503      	push	{r0, r1, lr}
 800cf9c:	4601      	mov	r1, r0
 800cf9e:	ab03      	add	r3, sp, #12
 800cfa0:	4805      	ldr	r0, [pc, #20]	; (800cfb8 <fiprintf+0x20>)
 800cfa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfa6:	6800      	ldr	r0, [r0, #0]
 800cfa8:	9301      	str	r3, [sp, #4]
 800cfaa:	f7ff fe31 	bl	800cc10 <_vfiprintf_r>
 800cfae:	b002      	add	sp, #8
 800cfb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfb4:	b003      	add	sp, #12
 800cfb6:	4770      	bx	lr
 800cfb8:	20000024 	.word	0x20000024

0800cfbc <_fstat_r>:
 800cfbc:	b538      	push	{r3, r4, r5, lr}
 800cfbe:	4d07      	ldr	r5, [pc, #28]	; (800cfdc <_fstat_r+0x20>)
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	4608      	mov	r0, r1
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	602b      	str	r3, [r5, #0]
 800cfca:	f7f6 f864 	bl	8003096 <_fstat>
 800cfce:	1c43      	adds	r3, r0, #1
 800cfd0:	d102      	bne.n	800cfd8 <_fstat_r+0x1c>
 800cfd2:	682b      	ldr	r3, [r5, #0]
 800cfd4:	b103      	cbz	r3, 800cfd8 <_fstat_r+0x1c>
 800cfd6:	6023      	str	r3, [r4, #0]
 800cfd8:	bd38      	pop	{r3, r4, r5, pc}
 800cfda:	bf00      	nop
 800cfdc:	20000ee8 	.word	0x20000ee8

0800cfe0 <_isatty_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4d06      	ldr	r5, [pc, #24]	; (800cffc <_isatty_r+0x1c>)
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	4608      	mov	r0, r1
 800cfea:	602b      	str	r3, [r5, #0]
 800cfec:	f7f6 f863 	bl	80030b6 <_isatty>
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d102      	bne.n	800cffa <_isatty_r+0x1a>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	b103      	cbz	r3, 800cffa <_isatty_r+0x1a>
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	bd38      	pop	{r3, r4, r5, pc}
 800cffc:	20000ee8 	.word	0x20000ee8

0800d000 <_lseek_r>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	4d07      	ldr	r5, [pc, #28]	; (800d020 <_lseek_r+0x20>)
 800d004:	4604      	mov	r4, r0
 800d006:	4608      	mov	r0, r1
 800d008:	4611      	mov	r1, r2
 800d00a:	2200      	movs	r2, #0
 800d00c:	602a      	str	r2, [r5, #0]
 800d00e:	461a      	mov	r2, r3
 800d010:	f7f6 f85c 	bl	80030cc <_lseek>
 800d014:	1c43      	adds	r3, r0, #1
 800d016:	d102      	bne.n	800d01e <_lseek_r+0x1e>
 800d018:	682b      	ldr	r3, [r5, #0]
 800d01a:	b103      	cbz	r3, 800d01e <_lseek_r+0x1e>
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	20000ee8 	.word	0x20000ee8

0800d024 <__ascii_mbtowc>:
 800d024:	b082      	sub	sp, #8
 800d026:	b901      	cbnz	r1, 800d02a <__ascii_mbtowc+0x6>
 800d028:	a901      	add	r1, sp, #4
 800d02a:	b142      	cbz	r2, 800d03e <__ascii_mbtowc+0x1a>
 800d02c:	b14b      	cbz	r3, 800d042 <__ascii_mbtowc+0x1e>
 800d02e:	7813      	ldrb	r3, [r2, #0]
 800d030:	600b      	str	r3, [r1, #0]
 800d032:	7812      	ldrb	r2, [r2, #0]
 800d034:	1e10      	subs	r0, r2, #0
 800d036:	bf18      	it	ne
 800d038:	2001      	movne	r0, #1
 800d03a:	b002      	add	sp, #8
 800d03c:	4770      	bx	lr
 800d03e:	4610      	mov	r0, r2
 800d040:	e7fb      	b.n	800d03a <__ascii_mbtowc+0x16>
 800d042:	f06f 0001 	mvn.w	r0, #1
 800d046:	e7f8      	b.n	800d03a <__ascii_mbtowc+0x16>

0800d048 <__malloc_lock>:
 800d048:	4801      	ldr	r0, [pc, #4]	; (800d050 <__malloc_lock+0x8>)
 800d04a:	f7ff b8c0 	b.w	800c1ce <__retarget_lock_acquire_recursive>
 800d04e:	bf00      	nop
 800d050:	20000edc 	.word	0x20000edc

0800d054 <__malloc_unlock>:
 800d054:	4801      	ldr	r0, [pc, #4]	; (800d05c <__malloc_unlock+0x8>)
 800d056:	f7ff b8bb 	b.w	800c1d0 <__retarget_lock_release_recursive>
 800d05a:	bf00      	nop
 800d05c:	20000edc 	.word	0x20000edc

0800d060 <_read_r>:
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	4d07      	ldr	r5, [pc, #28]	; (800d080 <_read_r+0x20>)
 800d064:	4604      	mov	r4, r0
 800d066:	4608      	mov	r0, r1
 800d068:	4611      	mov	r1, r2
 800d06a:	2200      	movs	r2, #0
 800d06c:	602a      	str	r2, [r5, #0]
 800d06e:	461a      	mov	r2, r3
 800d070:	f7f5 ffcc 	bl	800300c <_read>
 800d074:	1c43      	adds	r3, r0, #1
 800d076:	d102      	bne.n	800d07e <_read_r+0x1e>
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	b103      	cbz	r3, 800d07e <_read_r+0x1e>
 800d07c:	6023      	str	r3, [r4, #0]
 800d07e:	bd38      	pop	{r3, r4, r5, pc}
 800d080:	20000ee8 	.word	0x20000ee8

0800d084 <__ascii_wctomb>:
 800d084:	b149      	cbz	r1, 800d09a <__ascii_wctomb+0x16>
 800d086:	2aff      	cmp	r2, #255	; 0xff
 800d088:	bf85      	ittet	hi
 800d08a:	238a      	movhi	r3, #138	; 0x8a
 800d08c:	6003      	strhi	r3, [r0, #0]
 800d08e:	700a      	strbls	r2, [r1, #0]
 800d090:	f04f 30ff 	movhi.w	r0, #4294967295
 800d094:	bf98      	it	ls
 800d096:	2001      	movls	r0, #1
 800d098:	4770      	bx	lr
 800d09a:	4608      	mov	r0, r1
 800d09c:	4770      	bx	lr

0800d09e <abort>:
 800d09e:	b508      	push	{r3, lr}
 800d0a0:	2006      	movs	r0, #6
 800d0a2:	f000 f82b 	bl	800d0fc <raise>
 800d0a6:	2001      	movs	r0, #1
 800d0a8:	f7f5 ffa6 	bl	8002ff8 <_exit>

0800d0ac <_raise_r>:
 800d0ac:	291f      	cmp	r1, #31
 800d0ae:	b538      	push	{r3, r4, r5, lr}
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	460d      	mov	r5, r1
 800d0b4:	d904      	bls.n	800d0c0 <_raise_r+0x14>
 800d0b6:	2316      	movs	r3, #22
 800d0b8:	6003      	str	r3, [r0, #0]
 800d0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d0be:	bd38      	pop	{r3, r4, r5, pc}
 800d0c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0c2:	b112      	cbz	r2, 800d0ca <_raise_r+0x1e>
 800d0c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0c8:	b94b      	cbnz	r3, 800d0de <_raise_r+0x32>
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f000 f830 	bl	800d130 <_getpid_r>
 800d0d0:	462a      	mov	r2, r5
 800d0d2:	4601      	mov	r1, r0
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0da:	f000 b817 	b.w	800d10c <_kill_r>
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d00a      	beq.n	800d0f8 <_raise_r+0x4c>
 800d0e2:	1c59      	adds	r1, r3, #1
 800d0e4:	d103      	bne.n	800d0ee <_raise_r+0x42>
 800d0e6:	2316      	movs	r3, #22
 800d0e8:	6003      	str	r3, [r0, #0]
 800d0ea:	2001      	movs	r0, #1
 800d0ec:	e7e7      	b.n	800d0be <_raise_r+0x12>
 800d0ee:	2400      	movs	r4, #0
 800d0f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	4798      	blx	r3
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	e7e0      	b.n	800d0be <_raise_r+0x12>

0800d0fc <raise>:
 800d0fc:	4b02      	ldr	r3, [pc, #8]	; (800d108 <raise+0xc>)
 800d0fe:	4601      	mov	r1, r0
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	f7ff bfd3 	b.w	800d0ac <_raise_r>
 800d106:	bf00      	nop
 800d108:	20000024 	.word	0x20000024

0800d10c <_kill_r>:
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	4d07      	ldr	r5, [pc, #28]	; (800d12c <_kill_r+0x20>)
 800d110:	2300      	movs	r3, #0
 800d112:	4604      	mov	r4, r0
 800d114:	4608      	mov	r0, r1
 800d116:	4611      	mov	r1, r2
 800d118:	602b      	str	r3, [r5, #0]
 800d11a:	f7f5 ff5d 	bl	8002fd8 <_kill>
 800d11e:	1c43      	adds	r3, r0, #1
 800d120:	d102      	bne.n	800d128 <_kill_r+0x1c>
 800d122:	682b      	ldr	r3, [r5, #0]
 800d124:	b103      	cbz	r3, 800d128 <_kill_r+0x1c>
 800d126:	6023      	str	r3, [r4, #0]
 800d128:	bd38      	pop	{r3, r4, r5, pc}
 800d12a:	bf00      	nop
 800d12c:	20000ee8 	.word	0x20000ee8

0800d130 <_getpid_r>:
 800d130:	f7f5 bf4a 	b.w	8002fc8 <_getpid>

0800d134 <_init>:
 800d134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d136:	bf00      	nop
 800d138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13a:	bc08      	pop	{r3}
 800d13c:	469e      	mov	lr, r3
 800d13e:	4770      	bx	lr

0800d140 <_fini>:
 800d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d142:	bf00      	nop
 800d144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d146:	bc08      	pop	{r3}
 800d148:	469e      	mov	lr, r3
 800d14a:	4770      	bx	lr
