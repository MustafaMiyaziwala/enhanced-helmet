
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fe4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  0800a188  0800a188  0001a188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acf0  0800acf0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800acf0  0800acf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acf8  0800acf8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf8  0800acf8  0001acf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acfc  0800acfc  0001acfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ad00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a0c  200001f4  0800aef4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c00  0800aef4  00023c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217e8  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b1  00000000  00000000  00041a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001c084  00000000  00000000  000451bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  00061248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001560  00000000  00000000  00062898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b30c  00000000  00000000  00063df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000277d1  00000000  00000000  0007f104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1554  00000000  00000000  000a68d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147e29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005478  00000000  00000000  00147e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a16c 	.word	0x0800a16c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800a16c 	.word	0x0800a16c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <shutdown_dac>:
 */
static inline uint16_t val_to_dac(uint8_t val) {
	return (0b111 << 12) | val << 4;
}

void shutdown_dac(Ext_DAC_t* ext_dac) {
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	4604      	mov	r4, r0
	uint16_t cmd = SHUTDOWN_CMD;
 8000f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f26:	f8ad 3006 	strh.w	r3, [sp, #6]
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	8901      	ldrh	r1, [r0, #8]
 8000f2e:	6840      	ldr	r0, [r0, #4]
 8000f30:	f001 fed4 	bl	8002cdc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(ext_dac->hspi, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f10d 0106 	add.w	r1, sp, #6
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	f002 fbe9 	bl	8003716 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}
 8000f44:	6820      	ldr	r0, [r4, #0]
 8000f46:	f002 fdde 	bl	8003b06 <HAL_SPI_GetState>
 8000f4a:	2801      	cmp	r0, #1
 8000f4c:	d1fa      	bne.n	8000f44 <shutdown_dac+0x28>

	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	8921      	ldrh	r1, [r4, #8]
 8000f52:	6860      	ldr	r0, [r4, #4]
 8000f54:	f001 fec2 	bl	8002cdc <HAL_GPIO_WritePin>
}
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd10      	pop	{r4, pc}

08000f5c <write_to_dac>:

void write_to_dac(Ext_DAC_t* ext_dac, uint16_t val) {
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	4604      	mov	r4, r0
 8000f62:	f8ad 1006 	strh.w	r1, [sp, #6]

	//printf("%d\n\r", val);
	//uint16_t cmd = val_to_dac(val);
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	8901      	ldrh	r1, [r0, #8]
 8000f6a:	6840      	ldr	r0, [r0, #4]
 8000f6c:	f001 feb6 	bl	8002cdc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(ext_dac->hspi, (uint8_t*)&val, 1, HAL_MAX_DELAY);
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	2201      	movs	r2, #1
 8000f76:	f10d 0106 	add.w	r1, sp, #6
 8000f7a:	6820      	ldr	r0, [r4, #0]
 8000f7c:	f002 fbcb 	bl	8003716 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}
 8000f80:	6820      	ldr	r0, [r4, #0]
 8000f82:	f002 fdc0 	bl	8003b06 <HAL_SPI_GetState>
 8000f86:	2801      	cmp	r0, #1
 8000f88:	d1fa      	bne.n	8000f80 <write_to_dac+0x24>

	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	8921      	ldrh	r1, [r4, #8]
 8000f8e:	6860      	ldr	r0, [r4, #4]
 8000f90:	f001 fea4 	bl	8002cdc <HAL_GPIO_WritePin>

}
 8000f94:	b002      	add	sp, #8
 8000f96:	bd10      	pop	{r4, pc}

08000f98 <SD_PowerOff>:
}

/* power off */
static void SD_PowerOff(void)
{
	PowerFlag = 0;
 8000f98:	4b01      	ldr	r3, [pc, #4]	; (8000fa0 <SD_PowerOff+0x8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000211 	.word	0x20000211

08000fa4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
	return PowerFlag;
}
 8000fa4:	4b01      	ldr	r3, [pc, #4]	; (8000fac <SD_CheckPower+0x8>)
 8000fa6:	7818      	ldrb	r0, [r3, #0]
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000211 	.word	0x20000211

08000fb0 <SPI_TxBuffer>:
{
 8000fb0:	b508      	push	{r3, lr}
 8000fb2:	460a      	mov	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SPI_TxBuffer+0x1c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f013 0f02 	tst.w	r3, #2
 8000fbe:	d0f9      	beq.n	8000fb4 <SPI_TxBuffer+0x4>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	4801      	ldr	r0, [pc, #4]	; (8000fcc <SPI_TxBuffer+0x1c>)
 8000fc6:	f002 fba6 	bl	8003716 <HAL_SPI_Transmit>
}
 8000fca:	bd08      	pop	{r3, pc}
 8000fcc:	20003864 	.word	0x20003864

08000fd0 <SPI_TxByte>:
{
 8000fd0:	b500      	push	{lr}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <SPI_TxByte+0x28>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f013 0f02 	tst.w	r3, #2
 8000fe2:	d0f9      	beq.n	8000fd8 <SPI_TxByte+0x8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f10d 0107 	add.w	r1, sp, #7
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <SPI_TxByte+0x28>)
 8000fee:	f002 fb92 	bl	8003716 <HAL_SPI_Transmit>
}
 8000ff2:	b003      	add	sp, #12
 8000ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ff8:	20003864 	.word	0x20003864

08000ffc <SELECT>:
{
 8000ffc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2102      	movs	r1, #2
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <SELECT+0x14>)
 8001004:	f001 fe6a 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f001 f9b7 	bl	800237c <HAL_Delay>
}
 800100e:	bd08      	pop	{r3, pc}
 8001010:	40020800 	.word	0x40020800

08001014 <DESELECT>:
{
 8001014:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2102      	movs	r1, #2
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <DESELECT+0x14>)
 800101c:	f001 fe5e 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f001 f9ab 	bl	800237c <HAL_Delay>
}
 8001026:	bd08      	pop	{r3, pc}
 8001028:	40020800 	.word	0x40020800

0800102c <SPI_RxByte>:
{
 800102c:	b500      	push	{lr}
 800102e:	b085      	sub	sp, #20
	dummy = 0xFF;
 8001030:	23ff      	movs	r3, #255	; 0xff
 8001032:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <SPI_RxByte+0x34>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f013 0f02 	tst.w	r3, #2
 8001040:	d0f9      	beq.n	8001036 <SPI_RxByte+0xa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001042:	2364      	movs	r3, #100	; 0x64
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	f10d 020e 	add.w	r2, sp, #14
 800104c:	f10d 010f 	add.w	r1, sp, #15
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <SPI_RxByte+0x34>)
 8001052:	f002 fc3c 	bl	80038ce <HAL_SPI_TransmitReceive>
}
 8001056:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800105a:	b005      	add	sp, #20
 800105c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001060:	20003864 	.word	0x20003864

08001064 <SD_PowerOn>:
{
 8001064:	b510      	push	{r4, lr}
 8001066:	b082      	sub	sp, #8
	DESELECT();
 8001068:	f7ff ffd4 	bl	8001014 <DESELECT>
	for(int i = 0; i < 10; i++)
 800106c:	2400      	movs	r4, #0
 800106e:	e003      	b.n	8001078 <SD_PowerOn+0x14>
		SPI_TxByte(0xFF);
 8001070:	20ff      	movs	r0, #255	; 0xff
 8001072:	f7ff ffad 	bl	8000fd0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001076:	3401      	adds	r4, #1
 8001078:	2c09      	cmp	r4, #9
 800107a:	ddf9      	ble.n	8001070 <SD_PowerOn+0xc>
	SELECT();
 800107c:	f7ff ffbe 	bl	8000ffc <SELECT>
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001080:	2340      	movs	r3, #64	; 0x40
 8001082:	f88d 3000 	strb.w	r3, [sp]
	args[1] = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	f88d 3001 	strb.w	r3, [sp, #1]
	args[2] = 0;
 800108c:	f88d 3002 	strb.w	r3, [sp, #2]
	args[3] = 0;
 8001090:	f88d 3003 	strb.w	r3, [sp, #3]
	args[4] = 0;
 8001094:	f88d 3004 	strb.w	r3, [sp, #4]
	args[5] = 0x95;		/* CRC */
 8001098:	2395      	movs	r3, #149	; 0x95
 800109a:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxBuffer(args, sizeof(args));
 800109e:	2106      	movs	r1, #6
 80010a0:	4668      	mov	r0, sp
 80010a2:	f7ff ff85 	bl	8000fb0 <SPI_TxBuffer>
	uint32_t cnt = 0x1FFF;
 80010a6:	f641 74ff 	movw	r4, #8191	; 0x1fff
	while ((SPI_RxByte() != 0x01) && cnt)
 80010aa:	f7ff ffbf 	bl	800102c <SPI_RxByte>
 80010ae:	2801      	cmp	r0, #1
 80010b0:	d002      	beq.n	80010b8 <SD_PowerOn+0x54>
 80010b2:	b10c      	cbz	r4, 80010b8 <SD_PowerOn+0x54>
		cnt--;
 80010b4:	3c01      	subs	r4, #1
 80010b6:	e7f8      	b.n	80010aa <SD_PowerOn+0x46>
	DESELECT();
 80010b8:	f7ff ffac 	bl	8001014 <DESELECT>
	SPI_TxByte(0XFF);
 80010bc:	20ff      	movs	r0, #255	; 0xff
 80010be:	f7ff ff87 	bl	8000fd0 <SPI_TxByte>
	PowerFlag = 1;
 80010c2:	4b02      	ldr	r3, [pc, #8]	; (80010cc <SD_PowerOn+0x68>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
}
 80010c8:	b002      	add	sp, #8
 80010ca:	bd10      	pop	{r4, pc}
 80010cc:	20000211 	.word	0x20000211

080010d0 <SD_ReadyWait>:
{
 80010d0:	b508      	push	{r3, lr}
	Timer2 = 500;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SD_ReadyWait+0x1c>)
 80010d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010d8:	801a      	strh	r2, [r3, #0]
		res = SPI_RxByte();
 80010da:	f7ff ffa7 	bl	800102c <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 80010de:	28ff      	cmp	r0, #255	; 0xff
 80010e0:	d003      	beq.n	80010ea <SD_ReadyWait+0x1a>
 80010e2:	4b02      	ldr	r3, [pc, #8]	; (80010ec <SD_ReadyWait+0x1c>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f7      	bne.n	80010da <SD_ReadyWait+0xa>
}
 80010ea:	bd08      	pop	{r3, pc}
 80010ec:	20000214 	.word	0x20000214

080010f0 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80010f0:	b538      	push	{r3, r4, r5, lr}
 80010f2:	4605      	mov	r5, r0
 80010f4:	460c      	mov	r4, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80010f6:	f7ff ffeb 	bl	80010d0 <SD_ReadyWait>
 80010fa:	28ff      	cmp	r0, #255	; 0xff
 80010fc:	d001      	beq.n	8001102 <SD_SendCmd+0x12>
 80010fe:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 8001100:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(cmd); 					/* Command */
 8001102:	4628      	mov	r0, r5
 8001104:	f7ff ff64 	bl	8000fd0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001108:	0e20      	lsrs	r0, r4, #24
 800110a:	f7ff ff61 	bl	8000fd0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800110e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001112:	f7ff ff5d 	bl	8000fd0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001116:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800111a:	f7ff ff59 	bl	8000fd0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800111e:	b2e0      	uxtb	r0, r4
 8001120:	f7ff ff56 	bl	8000fd0 <SPI_TxByte>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001124:	2d40      	cmp	r5, #64	; 0x40
 8001126:	d013      	beq.n	8001150 <SD_SendCmd+0x60>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001128:	2d48      	cmp	r5, #72	; 0x48
 800112a:	d00f      	beq.n	800114c <SD_SendCmd+0x5c>
	else crc = 1;
 800112c:	2001      	movs	r0, #1
	SPI_TxByte(crc);
 800112e:	f7ff ff4f 	bl	8000fd0 <SPI_TxByte>
	if (cmd == CMD12) SPI_RxByte();
 8001132:	2d4c      	cmp	r5, #76	; 0x4c
 8001134:	d00e      	beq.n	8001154 <SD_SendCmd+0x64>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001136:	240a      	movs	r4, #10
		res = SPI_RxByte();
 8001138:	f7ff ff78 	bl	800102c <SPI_RxByte>
	} while ((res & 0x80) && --n);
 800113c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001140:	d0de      	beq.n	8001100 <SD_SendCmd+0x10>
 8001142:	1e63      	subs	r3, r4, #1
 8001144:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001148:	d1f6      	bne.n	8001138 <SD_SendCmd+0x48>
 800114a:	e7d9      	b.n	8001100 <SD_SendCmd+0x10>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800114c:	2087      	movs	r0, #135	; 0x87
 800114e:	e7ee      	b.n	800112e <SD_SendCmd+0x3e>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001150:	2095      	movs	r0, #149	; 0x95
 8001152:	e7ec      	b.n	800112e <SD_SendCmd+0x3e>
	if (cmd == CMD12) SPI_RxByte();
 8001154:	f7ff ff6a 	bl	800102c <SPI_RxByte>
 8001158:	e7ed      	b.n	8001136 <SD_SendCmd+0x46>

0800115a <SPI_RxBytePtr>:
{
 800115a:	b510      	push	{r4, lr}
 800115c:	4604      	mov	r4, r0
	*buff = SPI_RxByte();
 800115e:	f7ff ff65 	bl	800102c <SPI_RxByte>
 8001162:	7020      	strb	r0, [r4, #0]
}
 8001164:	bd10      	pop	{r4, pc}
	...

08001168 <SD_RxDataBlock>:
{
 8001168:	b538      	push	{r3, r4, r5, lr}
 800116a:	4604      	mov	r4, r0
 800116c:	460d      	mov	r5, r1
	Timer1 = 200;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <SD_RxDataBlock+0x40>)
 8001170:	22c8      	movs	r2, #200	; 0xc8
 8001172:	801a      	strh	r2, [r3, #0]
		token = SPI_RxByte();
 8001174:	f7ff ff5a 	bl	800102c <SPI_RxByte>
	} while((token == 0xFF) && Timer1);
 8001178:	28ff      	cmp	r0, #255	; 0xff
 800117a:	d103      	bne.n	8001184 <SD_RxDataBlock+0x1c>
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <SD_RxDataBlock+0x40>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f7      	bne.n	8001174 <SD_RxDataBlock+0xc>
	if(token != 0xFE) return FALSE;
 8001184:	28fe      	cmp	r0, #254	; 0xfe
 8001186:	d10d      	bne.n	80011a4 <SD_RxDataBlock+0x3c>
		SPI_RxBytePtr(buff++);
 8001188:	4620      	mov	r0, r4
 800118a:	3401      	adds	r4, #1
 800118c:	f7ff ffe5 	bl	800115a <SPI_RxBytePtr>
	} while(len--);
 8001190:	462b      	mov	r3, r5
 8001192:	3d01      	subs	r5, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f7      	bne.n	8001188 <SD_RxDataBlock+0x20>
	SPI_RxByte();
 8001198:	f7ff ff48 	bl	800102c <SPI_RxByte>
	SPI_RxByte();
 800119c:	f7ff ff46 	bl	800102c <SPI_RxByte>
	return TRUE;
 80011a0:	2001      	movs	r0, #1
}
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
	if(token != 0xFE) return FALSE;
 80011a4:	2000      	movs	r0, #0
 80011a6:	e7fc      	b.n	80011a2 <SD_RxDataBlock+0x3a>
 80011a8:	20000212 	.word	0x20000212

080011ac <SD_TxDataBlock>:
{
 80011ac:	b570      	push	{r4, r5, r6, lr}
 80011ae:	4606      	mov	r6, r0
 80011b0:	460d      	mov	r5, r1
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80011b2:	f7ff ff8d 	bl	80010d0 <SD_ReadyWait>
 80011b6:	28ff      	cmp	r0, #255	; 0xff
 80011b8:	d001      	beq.n	80011be <SD_TxDataBlock+0x12>
 80011ba:	2000      	movs	r0, #0
}
 80011bc:	bd70      	pop	{r4, r5, r6, pc}
 80011be:	2400      	movs	r4, #0
	SPI_TxByte(token);
 80011c0:	4628      	mov	r0, r5
 80011c2:	f7ff ff05 	bl	8000fd0 <SPI_TxByte>
	if (token != 0xFD)
 80011c6:	2dfd      	cmp	r5, #253	; 0xfd
 80011c8:	d105      	bne.n	80011d6 <SD_TxDataBlock+0x2a>
	if ((resp & 0x1F) == 0x05) return TRUE;
 80011ca:	f004 041f 	and.w	r4, r4, #31
 80011ce:	2c05      	cmp	r4, #5
 80011d0:	d01c      	beq.n	800120c <SD_TxDataBlock+0x60>
	return FALSE;
 80011d2:	2000      	movs	r0, #0
 80011d4:	e7f2      	b.n	80011bc <SD_TxDataBlock+0x10>
		SPI_TxBuffer((uint8_t*)buff, 512);
 80011d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011da:	4630      	mov	r0, r6
 80011dc:	f7ff fee8 	bl	8000fb0 <SPI_TxBuffer>
		SPI_RxByte();
 80011e0:	f7ff ff24 	bl	800102c <SPI_RxByte>
		SPI_RxByte();
 80011e4:	f7ff ff22 	bl	800102c <SPI_RxByte>
	uint8_t i = 0;
 80011e8:	4625      	mov	r5, r4
		while (i <= 64)
 80011ea:	e001      	b.n	80011f0 <SD_TxDataBlock+0x44>
			i++;
 80011ec:	3501      	adds	r5, #1
 80011ee:	b2ed      	uxtb	r5, r5
		while (i <= 64)
 80011f0:	2d40      	cmp	r5, #64	; 0x40
 80011f2:	d806      	bhi.n	8001202 <SD_TxDataBlock+0x56>
			resp = SPI_RxByte();
 80011f4:	f7ff ff1a 	bl	800102c <SPI_RxByte>
 80011f8:	4604      	mov	r4, r0
			if ((resp & 0x1F) == 0x05) break;
 80011fa:	f000 031f 	and.w	r3, r0, #31
 80011fe:	2b05      	cmp	r3, #5
 8001200:	d1f4      	bne.n	80011ec <SD_TxDataBlock+0x40>
		while (SPI_RxByte() == 0);
 8001202:	f7ff ff13 	bl	800102c <SPI_RxByte>
 8001206:	2800      	cmp	r0, #0
 8001208:	d0fb      	beq.n	8001202 <SD_TxDataBlock+0x56>
 800120a:	e7de      	b.n	80011ca <SD_TxDataBlock+0x1e>
	if ((resp & 0x1F) == 0x05) return TRUE;
 800120c:	2001      	movs	r0, #1
 800120e:	e7d5      	b.n	80011bc <SD_TxDataBlock+0x10>

08001210 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001210:	2800      	cmp	r0, #0
 8001212:	f040 80b2 	bne.w	800137a <SD_disk_initialize+0x16a>
{
 8001216:	b530      	push	{r4, r5, lr}
 8001218:	b083      	sub	sp, #12

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800121a:	4b59      	ldr	r3, [pc, #356]	; (8001380 <SD_disk_initialize+0x170>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	f013 0402 	ands.w	r4, r3, #2
 8001222:	d004      	beq.n	800122e <SD_disk_initialize+0x1e>
 8001224:	4b56      	ldr	r3, [pc, #344]	; (8001380 <SD_disk_initialize+0x170>)
 8001226:	7818      	ldrb	r0, [r3, #0]
 8001228:	b2c0      	uxtb	r0, r0
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
}
 800122a:	b003      	add	sp, #12
 800122c:	bd30      	pop	{r4, r5, pc}
	SD_PowerOn();
 800122e:	f7ff ff19 	bl	8001064 <SD_PowerOn>
	SELECT();
 8001232:	f7ff fee3 	bl	8000ffc <SELECT>
	if (SD_SendCmd(CMD0, 0) == 1)
 8001236:	2100      	movs	r1, #0
 8001238:	2040      	movs	r0, #64	; 0x40
 800123a:	f7ff ff59 	bl	80010f0 <SD_SendCmd>
 800123e:	4605      	mov	r5, r0
 8001240:	2801      	cmp	r0, #1
 8001242:	d011      	beq.n	8001268 <SD_disk_initialize+0x58>
	CardType = type;
 8001244:	4b4f      	ldr	r3, [pc, #316]	; (8001384 <SD_disk_initialize+0x174>)
 8001246:	701c      	strb	r4, [r3, #0]
	DESELECT();
 8001248:	f7ff fee4 	bl	8001014 <DESELECT>
	SPI_RxByte();
 800124c:	f7ff feee 	bl	800102c <SPI_RxByte>
	if (type)
 8001250:	2c00      	cmp	r4, #0
 8001252:	f000 808f 	beq.w	8001374 <SD_disk_initialize+0x164>
		Stat &= ~STA_NOINIT;
 8001256:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <SD_disk_initialize+0x170>)
 8001258:	7813      	ldrb	r3, [r2, #0]
 800125a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800125e:	7013      	strb	r3, [r2, #0]
	return Stat;
 8001260:	4b47      	ldr	r3, [pc, #284]	; (8001380 <SD_disk_initialize+0x170>)
 8001262:	7818      	ldrb	r0, [r3, #0]
 8001264:	b2c0      	uxtb	r0, r0
 8001266:	e7e0      	b.n	800122a <SD_disk_initialize+0x1a>
		Timer1 = 1000;
 8001268:	4b47      	ldr	r3, [pc, #284]	; (8001388 <SD_disk_initialize+0x178>)
 800126a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800126e:	801a      	strh	r2, [r3, #0]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001270:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001274:	2048      	movs	r0, #72	; 0x48
 8001276:	f7ff ff3b 	bl	80010f0 <SD_SendCmd>
 800127a:	2801      	cmp	r0, #1
 800127c:	d143      	bne.n	8001306 <SD_disk_initialize+0xf6>
			for (n = 0; n < 4; n++)
 800127e:	4625      	mov	r5, r4
 8001280:	e008      	b.n	8001294 <SD_disk_initialize+0x84>
				ocr[n] = SPI_RxByte();
 8001282:	f7ff fed3 	bl	800102c <SPI_RxByte>
 8001286:	f105 0308 	add.w	r3, r5, #8
 800128a:	446b      	add	r3, sp
 800128c:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++)
 8001290:	3501      	adds	r5, #1
 8001292:	b2ed      	uxtb	r5, r5
 8001294:	2d03      	cmp	r5, #3
 8001296:	d9f4      	bls.n	8001282 <SD_disk_initialize+0x72>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001298:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d1d1      	bne.n	8001244 <SD_disk_initialize+0x34>
 80012a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012a4:	2baa      	cmp	r3, #170	; 0xaa
 80012a6:	d1cd      	bne.n	8001244 <SD_disk_initialize+0x34>
 80012a8:	e002      	b.n	80012b0 <SD_disk_initialize+0xa0>
				} while (Timer1);
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <SD_disk_initialize+0x178>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b163      	cbz	r3, 80012ca <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012b0:	2100      	movs	r1, #0
 80012b2:	2077      	movs	r0, #119	; 0x77
 80012b4:	f7ff ff1c 	bl	80010f0 <SD_SendCmd>
 80012b8:	2801      	cmp	r0, #1
 80012ba:	d8f6      	bhi.n	80012aa <SD_disk_initialize+0x9a>
 80012bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012c0:	2069      	movs	r0, #105	; 0x69
 80012c2:	f7ff ff15 	bl	80010f0 <SD_SendCmd>
 80012c6:	2800      	cmp	r0, #0
 80012c8:	d1ef      	bne.n	80012aa <SD_disk_initialize+0x9a>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <SD_disk_initialize+0x178>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0b8      	beq.n	8001244 <SD_disk_initialize+0x34>
 80012d2:	2100      	movs	r1, #0
 80012d4:	207a      	movs	r0, #122	; 0x7a
 80012d6:	f7ff ff0b 	bl	80010f0 <SD_SendCmd>
 80012da:	4605      	mov	r5, r0
 80012dc:	2800      	cmp	r0, #0
 80012de:	d1b1      	bne.n	8001244 <SD_disk_initialize+0x34>
					for (n = 0; n < 4; n++)
 80012e0:	2d03      	cmp	r5, #3
 80012e2:	d809      	bhi.n	80012f8 <SD_disk_initialize+0xe8>
						ocr[n] = SPI_RxByte();
 80012e4:	f7ff fea2 	bl	800102c <SPI_RxByte>
 80012e8:	f105 0308 	add.w	r3, r5, #8
 80012ec:	446b      	add	r3, sp
 80012ee:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)
 80012f2:	3501      	adds	r5, #1
 80012f4:	b2ed      	uxtb	r5, r5
 80012f6:	e7f3      	b.n	80012e0 <SD_disk_initialize+0xd0>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80012f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80012fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001300:	d036      	beq.n	8001370 <SD_disk_initialize+0x160>
 8001302:	240c      	movs	r4, #12
 8001304:	e79e      	b.n	8001244 <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001306:	2100      	movs	r1, #0
 8001308:	2077      	movs	r0, #119	; 0x77
 800130a:	f7ff fef1 	bl	80010f0 <SD_SendCmd>
 800130e:	2801      	cmp	r0, #1
 8001310:	d810      	bhi.n	8001334 <SD_disk_initialize+0x124>
 8001312:	2100      	movs	r1, #0
 8001314:	2069      	movs	r0, #105	; 0x69
 8001316:	f7ff feeb 	bl	80010f0 <SD_SendCmd>
 800131a:	2801      	cmp	r0, #1
 800131c:	d80a      	bhi.n	8001334 <SD_disk_initialize+0x124>
 800131e:	2502      	movs	r5, #2
 8001320:	e008      	b.n	8001334 <SD_disk_initialize+0x124>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001322:	2100      	movs	r1, #0
 8001324:	2077      	movs	r0, #119	; 0x77
 8001326:	f7ff fee3 	bl	80010f0 <SD_SendCmd>
 800132a:	2801      	cmp	r0, #1
 800132c:	d919      	bls.n	8001362 <SD_disk_initialize+0x152>
			} while (Timer1);
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <SD_disk_initialize+0x178>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b13b      	cbz	r3, 8001344 <SD_disk_initialize+0x134>
				if (type == CT_SD1)
 8001334:	2d02      	cmp	r5, #2
 8001336:	d0f4      	beq.n	8001322 <SD_disk_initialize+0x112>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001338:	2100      	movs	r1, #0
 800133a:	2041      	movs	r0, #65	; 0x41
 800133c:	f7ff fed8 	bl	80010f0 <SD_SendCmd>
 8001340:	2800      	cmp	r0, #0
 8001342:	d1f4      	bne.n	800132e <SD_disk_initialize+0x11e>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <SD_disk_initialize+0x178>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f43f af7b 	beq.w	8001244 <SD_disk_initialize+0x34>
 800134e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001352:	2050      	movs	r0, #80	; 0x50
 8001354:	f7ff fecc 	bl	80010f0 <SD_SendCmd>
 8001358:	2800      	cmp	r0, #0
 800135a:	f47f af73 	bne.w	8001244 <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800135e:	462c      	mov	r4, r5
 8001360:	e770      	b.n	8001244 <SD_disk_initialize+0x34>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001362:	2100      	movs	r1, #0
 8001364:	2069      	movs	r0, #105	; 0x69
 8001366:	f7ff fec3 	bl	80010f0 <SD_SendCmd>
 800136a:	2800      	cmp	r0, #0
 800136c:	d1df      	bne.n	800132e <SD_disk_initialize+0x11e>
 800136e:	e7e9      	b.n	8001344 <SD_disk_initialize+0x134>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001370:	2404      	movs	r4, #4
 8001372:	e767      	b.n	8001244 <SD_disk_initialize+0x34>
		SD_PowerOff();
 8001374:	f7ff fe10 	bl	8000f98 <SD_PowerOff>
 8001378:	e772      	b.n	8001260 <SD_disk_initialize+0x50>
	if(drv) return STA_NOINIT;
 800137a:	2001      	movs	r0, #1
}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000
 8001384:	20000210 	.word	0x20000210
 8001388:	20000212 	.word	0x20000212

0800138c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
	if (drv) return STA_NOINIT;
 800138c:	b918      	cbnz	r0, 8001396 <SD_disk_status+0xa>
	return Stat;
 800138e:	4b03      	ldr	r3, [pc, #12]	; (800139c <SD_disk_status+0x10>)
 8001390:	7818      	ldrb	r0, [r3, #0]
 8001392:	b2c0      	uxtb	r0, r0
 8001394:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8001396:	2001      	movs	r0, #1
}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000000 	.word	0x20000000

080013a0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d13e      	bne.n	8001422 <SD_disk_read+0x82>
{
 80013a4:	b570      	push	{r4, r5, r6, lr}
 80013a6:	460d      	mov	r5, r1
 80013a8:	4616      	mov	r6, r2
 80013aa:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d03a      	beq.n	8001426 <SD_disk_read+0x86>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <SD_disk_read+0x90>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	f013 0f01 	tst.w	r3, #1
 80013b8:	d137      	bne.n	800142a <SD_disk_read+0x8a>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <SD_disk_read+0x94>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	f013 0f04 	tst.w	r3, #4
 80013c2:	d100      	bne.n	80013c6 <SD_disk_read+0x26>
 80013c4:	0256      	lsls	r6, r2, #9

	SELECT();
 80013c6:	f7ff fe19 	bl	8000ffc <SELECT>

	if (count == 1)
 80013ca:	2c01      	cmp	r4, #1
 80013cc:	d01a      	beq.n	8001404 <SD_disk_read+0x64>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80013ce:	4631      	mov	r1, r6
 80013d0:	2052      	movs	r0, #82	; 0x52
 80013d2:	f7ff fe8d 	bl	80010f0 <SD_SendCmd>
 80013d6:	b968      	cbnz	r0, 80013f4 <SD_disk_read+0x54>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80013d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013dc:	4628      	mov	r0, r5
 80013de:	f7ff fec3 	bl	8001168 <SD_RxDataBlock>
 80013e2:	b118      	cbz	r0, 80013ec <SD_disk_read+0x4c>
				buff += 512;
 80013e4:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80013e8:	3c01      	subs	r4, #1
 80013ea:	d1f5      	bne.n	80013d8 <SD_disk_read+0x38>

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80013ec:	2100      	movs	r1, #0
 80013ee:	204c      	movs	r0, #76	; 0x4c
 80013f0:	f7ff fe7e 	bl	80010f0 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80013f4:	f7ff fe0e 	bl	8001014 <DESELECT>
	SPI_RxByte();
 80013f8:	f7ff fe18 	bl	800102c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80013fc:	1e20      	subs	r0, r4, #0
 80013fe:	bf18      	it	ne
 8001400:	2001      	movne	r0, #1
}
 8001402:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001404:	4631      	mov	r1, r6
 8001406:	2051      	movs	r0, #81	; 0x51
 8001408:	f7ff fe72 	bl	80010f0 <SD_SendCmd>
 800140c:	2800      	cmp	r0, #0
 800140e:	d1f1      	bne.n	80013f4 <SD_disk_read+0x54>
 8001410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001414:	4628      	mov	r0, r5
 8001416:	f7ff fea7 	bl	8001168 <SD_RxDataBlock>
 800141a:	2800      	cmp	r0, #0
 800141c:	d0ea      	beq.n	80013f4 <SD_disk_read+0x54>
 800141e:	2400      	movs	r4, #0
 8001420:	e7e8      	b.n	80013f4 <SD_disk_read+0x54>
	if (pdrv || !count) return RES_PARERR;
 8001422:	2004      	movs	r0, #4
}
 8001424:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8001426:	2004      	movs	r0, #4
 8001428:	e7eb      	b.n	8001402 <SD_disk_read+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800142a:	2003      	movs	r0, #3
 800142c:	e7e9      	b.n	8001402 <SD_disk_read+0x62>
 800142e:	bf00      	nop
 8001430:	20000000 	.word	0x20000000
 8001434:	20000210 	.word	0x20000210

08001438 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001438:	2800      	cmp	r0, #0
 800143a:	d152      	bne.n	80014e2 <SD_disk_write+0xaa>
{
 800143c:	b570      	push	{r4, r5, r6, lr}
 800143e:	460d      	mov	r5, r1
 8001440:	4616      	mov	r6, r2
 8001442:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8001444:	2b00      	cmp	r3, #0
 8001446:	d04e      	beq.n	80014e6 <SD_disk_write+0xae>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <SD_disk_write+0xbc>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	f013 0f01 	tst.w	r3, #1
 8001450:	d14b      	bne.n	80014ea <SD_disk_write+0xb2>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <SD_disk_write+0xbc>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	f013 0f04 	tst.w	r3, #4
 800145a:	d148      	bne.n	80014ee <SD_disk_write+0xb6>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <SD_disk_write+0xc0>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f013 0f04 	tst.w	r3, #4
 8001464:	d100      	bne.n	8001468 <SD_disk_write+0x30>
 8001466:	0256      	lsls	r6, r2, #9

	SELECT();
 8001468:	f7ff fdc8 	bl	8000ffc <SELECT>

	if (count == 1)
 800146c:	2c01      	cmp	r4, #1
 800146e:	d01f      	beq.n	80014b0 <SD_disk_write+0x78>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <SD_disk_write+0xc0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	f013 0f02 	tst.w	r3, #2
 8001478:	d128      	bne.n	80014cc <SD_disk_write+0x94>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800147a:	4631      	mov	r1, r6
 800147c:	2059      	movs	r0, #89	; 0x59
 800147e:	f7ff fe37 	bl	80010f0 <SD_SendCmd>
 8001482:	b968      	cbnz	r0, 80014a0 <SD_disk_write+0x68>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001484:	21fc      	movs	r1, #252	; 0xfc
 8001486:	4628      	mov	r0, r5
 8001488:	f7ff fe90 	bl	80011ac <SD_TxDataBlock>
 800148c:	b118      	cbz	r0, 8001496 <SD_disk_write+0x5e>
				buff += 512;
 800148e:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8001492:	3c01      	subs	r4, #1
 8001494:	d1f6      	bne.n	8001484 <SD_disk_write+0x4c>

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001496:	21fd      	movs	r1, #253	; 0xfd
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff fe87 	bl	80011ac <SD_TxDataBlock>
 800149e:	b1f0      	cbz	r0, 80014de <SD_disk_write+0xa6>
			}
		}
	}

	/* Idle */
	DESELECT();
 80014a0:	f7ff fdb8 	bl	8001014 <DESELECT>
	SPI_RxByte();
 80014a4:	f7ff fdc2 	bl	800102c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014a8:	1e20      	subs	r0, r4, #0
 80014aa:	bf18      	it	ne
 80014ac:	2001      	movne	r0, #1
}
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80014b0:	4631      	mov	r1, r6
 80014b2:	2058      	movs	r0, #88	; 0x58
 80014b4:	f7ff fe1c 	bl	80010f0 <SD_SendCmd>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d1f1      	bne.n	80014a0 <SD_disk_write+0x68>
 80014bc:	21fe      	movs	r1, #254	; 0xfe
 80014be:	4628      	mov	r0, r5
 80014c0:	f7ff fe74 	bl	80011ac <SD_TxDataBlock>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d0eb      	beq.n	80014a0 <SD_disk_write+0x68>
			count = 0;
 80014c8:	2400      	movs	r4, #0
 80014ca:	e7e9      	b.n	80014a0 <SD_disk_write+0x68>
			SD_SendCmd(CMD55, 0);
 80014cc:	2100      	movs	r1, #0
 80014ce:	2077      	movs	r0, #119	; 0x77
 80014d0:	f7ff fe0e 	bl	80010f0 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80014d4:	4621      	mov	r1, r4
 80014d6:	2057      	movs	r0, #87	; 0x57
 80014d8:	f7ff fe0a 	bl	80010f0 <SD_SendCmd>
 80014dc:	e7cd      	b.n	800147a <SD_disk_write+0x42>
				count = 1;
 80014de:	2401      	movs	r4, #1
 80014e0:	e7de      	b.n	80014a0 <SD_disk_write+0x68>
	if (pdrv || !count) return RES_PARERR;
 80014e2:	2004      	movs	r0, #4
}
 80014e4:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 80014e6:	2004      	movs	r0, #4
 80014e8:	e7e1      	b.n	80014ae <SD_disk_write+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014ea:	2003      	movs	r0, #3
 80014ec:	e7df      	b.n	80014ae <SD_disk_write+0x76>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80014ee:	2002      	movs	r0, #2
 80014f0:	e7dd      	b.n	80014ae <SD_disk_write+0x76>
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000210 	.word	0x20000210

080014fc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	b085      	sub	sp, #20
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001500:	2800      	cmp	r0, #0
 8001502:	f040 80b2 	bne.w	800166a <SD_disk_ioctl+0x16e>
 8001506:	460d      	mov	r5, r1
 8001508:	4616      	mov	r6, r2
 800150a:	4607      	mov	r7, r0
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 800150c:	2905      	cmp	r1, #5
 800150e:	d013      	beq.n	8001538 <SD_disk_ioctl+0x3c>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001510:	4b58      	ldr	r3, [pc, #352]	; (8001674 <SD_disk_ioctl+0x178>)
 8001512:	781c      	ldrb	r4, [r3, #0]
 8001514:	f014 0401 	ands.w	r4, r4, #1
 8001518:	f040 80a9 	bne.w	800166e <SD_disk_ioctl+0x172>

		SELECT();
 800151c:	f7ff fd6e 	bl	8000ffc <SELECT>

		switch (ctrl)
 8001520:	2d0d      	cmp	r5, #13
 8001522:	f200 8096 	bhi.w	8001652 <SD_disk_ioctl+0x156>
 8001526:	e8df f005 	tbb	[pc, r5]
 800152a:	1b5e      	.short	0x1b5e
 800152c:	9494945a 	.word	0x9494945a
 8001530:	94949494 	.word	0x94949494
 8001534:	82736494 	.word	0x82736494
		switch (*ptr)
 8001538:	7814      	ldrb	r4, [r2, #0]
 800153a:	2c01      	cmp	r4, #1
 800153c:	d007      	beq.n	800154e <SD_disk_ioctl+0x52>
 800153e:	2c02      	cmp	r4, #2
 8001540:	d009      	beq.n	8001556 <SD_disk_ioctl+0x5a>
 8001542:	b10c      	cbz	r4, 8001548 <SD_disk_ioctl+0x4c>
 8001544:	2404      	movs	r4, #4
 8001546:	e089      	b.n	800165c <SD_disk_ioctl+0x160>
			SD_PowerOff();		/* Power Off */
 8001548:	f7ff fd26 	bl	8000f98 <SD_PowerOff>
			break;
 800154c:	e086      	b.n	800165c <SD_disk_ioctl+0x160>
			SD_PowerOn();		/* Power On */
 800154e:	f7ff fd89 	bl	8001064 <SD_PowerOn>
			res = RES_OK;
 8001552:	463c      	mov	r4, r7
			break;
 8001554:	e082      	b.n	800165c <SD_disk_ioctl+0x160>
			*(ptr + 1) = SD_CheckPower();
 8001556:	f7ff fd25 	bl	8000fa4 <SD_CheckPower>
 800155a:	7070      	strb	r0, [r6, #1]
			res = RES_OK;		/* Power Check */
 800155c:	463c      	mov	r4, r7
			break;
 800155e:	e07d      	b.n	800165c <SD_disk_ioctl+0x160>
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001560:	2100      	movs	r1, #0
 8001562:	2049      	movs	r0, #73	; 0x49
 8001564:	f7ff fdc4 	bl	80010f0 <SD_SendCmd>
 8001568:	4604      	mov	r4, r0
 800156a:	b108      	cbz	r0, 8001570 <SD_disk_ioctl+0x74>
	res = RES_ERROR;
 800156c:	462c      	mov	r4, r5
 800156e:	e071      	b.n	8001654 <SD_disk_ioctl+0x158>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001570:	2110      	movs	r1, #16
 8001572:	4668      	mov	r0, sp
 8001574:	f7ff fdf8 	bl	8001168 <SD_RxDataBlock>
 8001578:	2800      	cmp	r0, #0
 800157a:	d072      	beq.n	8001662 <SD_disk_ioctl+0x166>
			{
				if ((csd[0] >> 6) == 1)
 800157c:	f89d 3000 	ldrb.w	r3, [sp]
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	2b01      	cmp	r3, #1
 8001584:	d01f      	beq.n	80015c6 <SD_disk_ioctl+0xca>
					*(DWORD*) buff = (DWORD) csize << 10;
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001586:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800158a:	f002 020f 	and.w	r2, r2, #15
 800158e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001592:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 8001596:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	f003 0306 	and.w	r3, r3, #6
 80015a0:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80015a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80015aa:	099b      	lsrs	r3, r3, #6
 80015ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80015b0:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80015b4:	0289      	lsls	r1, r1, #10
 80015b6:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80015ba:	440b      	add	r3, r1
 80015bc:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80015be:	3a07      	subs	r2, #7
 80015c0:	4093      	lsls	r3, r2
 80015c2:	6033      	str	r3, [r6, #0]
 80015c4:	e046      	b.n	8001654 <SD_disk_ioctl+0x158>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80015c6:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80015ca:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80015ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3301      	adds	r3, #1
 80015d6:	b29b      	uxth	r3, r3
					*(DWORD*) buff = (DWORD) csize << 10;
 80015d8:	029b      	lsls	r3, r3, #10
 80015da:	6033      	str	r3, [r6, #0]
 80015dc:	e03a      	b.n	8001654 <SD_disk_ioctl+0x158>
				}
				res = RES_OK;
			}
			break;
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80015de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e2:	8033      	strh	r3, [r6, #0]
			res = RES_OK;
			break;
 80015e4:	e036      	b.n	8001654 <SD_disk_ioctl+0x158>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80015e6:	f7ff fd73 	bl	80010d0 <SD_ReadyWait>
 80015ea:	28ff      	cmp	r0, #255	; 0xff
 80015ec:	d03b      	beq.n	8001666 <SD_disk_ioctl+0x16a>
	res = RES_ERROR;
 80015ee:	2401      	movs	r4, #1
 80015f0:	e030      	b.n	8001654 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015f2:	2100      	movs	r1, #0
 80015f4:	2049      	movs	r0, #73	; 0x49
 80015f6:	f7ff fd7b 	bl	80010f0 <SD_SendCmd>
 80015fa:	4604      	mov	r4, r0
 80015fc:	b108      	cbz	r0, 8001602 <SD_disk_ioctl+0x106>
	res = RES_ERROR;
 80015fe:	2401      	movs	r4, #1
 8001600:	e028      	b.n	8001654 <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001602:	2110      	movs	r1, #16
 8001604:	4630      	mov	r0, r6
 8001606:	f7ff fdaf 	bl	8001168 <SD_RxDataBlock>
 800160a:	bb18      	cbnz	r0, 8001654 <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 800160c:	2401      	movs	r4, #1
 800160e:	e021      	b.n	8001654 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001610:	2100      	movs	r1, #0
 8001612:	204a      	movs	r0, #74	; 0x4a
 8001614:	f7ff fd6c 	bl	80010f0 <SD_SendCmd>
 8001618:	4604      	mov	r4, r0
 800161a:	b108      	cbz	r0, 8001620 <SD_disk_ioctl+0x124>
	res = RES_ERROR;
 800161c:	2401      	movs	r4, #1
 800161e:	e019      	b.n	8001654 <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001620:	2110      	movs	r1, #16
 8001622:	4630      	mov	r0, r6
 8001624:	f7ff fda0 	bl	8001168 <SD_RxDataBlock>
 8001628:	b9a0      	cbnz	r0, 8001654 <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 800162a:	2401      	movs	r4, #1
 800162c:	e012      	b.n	8001654 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800162e:	2100      	movs	r1, #0
 8001630:	207a      	movs	r0, #122	; 0x7a
 8001632:	f7ff fd5d 	bl	80010f0 <SD_SendCmd>
 8001636:	4604      	mov	r4, r0
 8001638:	b138      	cbz	r0, 800164a <SD_disk_ioctl+0x14e>
					*ptr++ = SPI_RxByte();
				}
				res = RES_OK;
			}
		default:
			res = RES_PARERR;
 800163a:	2404      	movs	r4, #4
 800163c:	e00a      	b.n	8001654 <SD_disk_ioctl+0x158>
					*ptr++ = SPI_RxByte();
 800163e:	f7ff fcf5 	bl	800102c <SPI_RxByte>
 8001642:	f806 0b01 	strb.w	r0, [r6], #1
				for (n = 0; n < 4; n++)
 8001646:	3401      	adds	r4, #1
 8001648:	b2e4      	uxtb	r4, r4
 800164a:	2c03      	cmp	r4, #3
 800164c:	d9f7      	bls.n	800163e <SD_disk_ioctl+0x142>
			res = RES_PARERR;
 800164e:	2404      	movs	r4, #4
 8001650:	e000      	b.n	8001654 <SD_disk_ioctl+0x158>
		switch (ctrl)
 8001652:	2404      	movs	r4, #4
		}

		DESELECT();
 8001654:	f7ff fcde 	bl	8001014 <DESELECT>
		SPI_RxByte();
 8001658:	f7ff fce8 	bl	800102c <SPI_RxByte>
	}

	return res;
}
 800165c:	4620      	mov	r0, r4
 800165e:	b005      	add	sp, #20
 8001660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = RES_ERROR;
 8001662:	462c      	mov	r4, r5
 8001664:	e7f6      	b.n	8001654 <SD_disk_ioctl+0x158>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001666:	462c      	mov	r4, r5
 8001668:	e7f4      	b.n	8001654 <SD_disk_ioctl+0x158>
	if (drv) return RES_PARERR;
 800166a:	2404      	movs	r4, #4
 800166c:	e7f6      	b.n	800165c <SD_disk_ioctl+0x160>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800166e:	2403      	movs	r4, #3
 8001670:	e7f4      	b.n	800165c <SD_disk_ioctl+0x160>
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800167c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	2400      	movs	r4, #0
 8001680:	9405      	str	r4, [sp, #20]
 8001682:	9406      	str	r4, [sp, #24]
 8001684:	9407      	str	r4, [sp, #28]
 8001686:	9408      	str	r4, [sp, #32]
 8001688:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	9401      	str	r4, [sp, #4]
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <MX_GPIO_Init+0xe0>)
 800168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001690:	f042 0204 	orr.w	r2, r2, #4
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
 8001696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001698:	f002 0204 	and.w	r2, r2, #4
 800169c:	9201      	str	r2, [sp, #4]
 800169e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a0:	9402      	str	r4, [sp, #8]
 80016a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016a8:	631a      	str	r2, [r3, #48]	; 0x30
 80016aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80016b0:	9202      	str	r2, [sp, #8]
 80016b2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	9403      	str	r4, [sp, #12]
 80016b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
 80016be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c0:	f002 0201 	and.w	r2, r2, #1
 80016c4:	9203      	str	r2, [sp, #12]
 80016c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	9404      	str	r4, [sp, #16]
 80016ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016cc:	f042 0202 	orr.w	r2, r2, #2
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	9304      	str	r3, [sp, #16]
 80016da:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI2_CS_GPIO_Port, SD_SPI2_CS_Pin, GPIO_PIN_RESET);
 80016dc:	4e1f      	ldr	r6, [pc, #124]	; (800175c <MX_GPIO_Init+0xe4>)
 80016de:	4622      	mov	r2, r4
 80016e0:	2102      	movs	r1, #2
 80016e2:	4630      	mov	r0, r6
 80016e4:	f001 fafa 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016e8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001764 <MX_GPIO_Init+0xec>
 80016ec:	4622      	mov	r2, r4
 80016ee:	2120      	movs	r1, #32
 80016f0:	4640      	mov	r0, r8
 80016f2:	f001 faf3 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 80016f6:	4f1a      	ldr	r7, [pc, #104]	; (8001760 <MX_GPIO_Init+0xe8>)
 80016f8:	4622      	mov	r2, r4
 80016fa:	2104      	movs	r1, #4
 80016fc:	4638      	mov	r0, r7
 80016fe:	f001 faed 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001706:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001708:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800170c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001710:	a905      	add	r1, sp, #20
 8001712:	4630      	mov	r0, r6
 8001714:	f001 fa02 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 8001718:	2302      	movs	r3, #2
 800171a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2501      	movs	r5, #1
 800171e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001724:	a905      	add	r1, sp, #20
 8001726:	4630      	mov	r0, r6
 8001728:	f001 f9f8 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800172c:	2320      	movs	r3, #32
 800172e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001736:	a905      	add	r1, sp, #20
 8001738:	4640      	mov	r0, r8
 800173a:	f001 f9ef 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_SPI2_CS_Pin */
  GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 800173e:	2304      	movs	r3, #4
 8001740:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001748:	a905      	add	r1, sp, #20
 800174a:	4638      	mov	r0, r7
 800174c:	f001 f9e6 	bl	8002b1c <HAL_GPIO_Init>

}
 8001750:	b00a      	add	sp, #40	; 0x28
 8001752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40020800 	.word	0x40020800
 8001760:	40020400 	.word	0x40020400
 8001764:	40020000 	.word	0x40020000

08001768 <MX_DMA_Init>:
{
 8001768:	b500      	push	{lr}
 800176a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176c:	2100      	movs	r1, #0
 800176e:	9101      	str	r1, [sp, #4]
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_DMA_Init+0x30>)
 8001772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001774:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001784:	460a      	mov	r2, r1
 8001786:	2010      	movs	r0, #16
 8001788:	f000 ffb0 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800178c:	2010      	movs	r0, #16
 800178e:	f000 ffe5 	bl	800275c <HAL_NVIC_EnableIRQ>
}
 8001792:	b003      	add	sp, #12
 8001794:	f85d fb04 	ldr.w	pc, [sp], #4
 8001798:	40023800 	.word	0x40023800

0800179c <testSD>:
int testSD() {
 800179c:	b510      	push	{r4, lr}
 800179e:	b082      	sub	sp, #8
	if(f_mount(&fs, "/", 0) != FR_OK) {
 80017a0:	2200      	movs	r2, #0
 80017a2:	4948      	ldr	r1, [pc, #288]	; (80018c4 <testSD+0x128>)
 80017a4:	4848      	ldr	r0, [pc, #288]	; (80018c8 <testSD+0x12c>)
 80017a6:	f004 f939 	bl	8005a1c <f_mount>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d156      	bne.n	800185c <testSD+0xc0>
	ret = f_open(&fil, "/TEST.TXT", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017ae:	2213      	movs	r2, #19
 80017b0:	4946      	ldr	r1, [pc, #280]	; (80018cc <testSD+0x130>)
 80017b2:	4847      	ldr	r0, [pc, #284]	; (80018d0 <testSD+0x134>)
 80017b4:	f004 f960 	bl	8005a78 <f_open>
	if(ret != FR_OK) {
 80017b8:	4601      	mov	r1, r0
 80017ba:	2800      	cmp	r0, #0
 80017bc:	d154      	bne.n	8001868 <testSD+0xcc>
	if(f_getfree("", &fre_clust, &pfs) != FR_OK) {
 80017be:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <testSD+0x138>)
 80017c0:	4945      	ldr	r1, [pc, #276]	; (80018d8 <testSD+0x13c>)
 80017c2:	4846      	ldr	r0, [pc, #280]	; (80018dc <testSD+0x140>)
 80017c4:	f004 fd0b 	bl	80061de <f_getfree>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d153      	bne.n	8001874 <testSD+0xd8>
	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80017cc:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <testSD+0x138>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69d8      	ldr	r0, [r3, #28]
 80017d2:	3802      	subs	r0, #2
 80017d4:	895c      	ldrh	r4, [r3, #10]
 80017d6:	fb04 f000 	mul.w	r0, r4, r0
 80017da:	f7fe feab 	bl	8000534 <__aeabi_ui2d>
 80017de:	2200      	movs	r2, #0
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <testSD+0x144>)
 80017e2:	f7fe ff21 	bl	8000628 <__aeabi_dmul>
 80017e6:	f7ff f9f7 	bl	8000bd8 <__aeabi_d2uiz>
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <testSD+0x148>)
 80017ec:	6018      	str	r0, [r3, #0]
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80017ee:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <testSD+0x13c>)
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	fb04 f000 	mul.w	r0, r4, r0
 80017f6:	f7fe fe9d 	bl	8000534 <__aeabi_ui2d>
 80017fa:	2200      	movs	r2, #0
 80017fc:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <testSD+0x144>)
 80017fe:	f7fe ff13 	bl	8000628 <__aeabi_dmul>
 8001802:	f7ff f9e9 	bl	8000bd8 <__aeabi_d2uiz>
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <testSD+0x14c>)
 8001808:	6018      	str	r0, [r3, #0]
	if(free_space < 1) {
 800180a:	2800      	cmp	r0, #0
 800180c:	d038      	beq.n	8001880 <testSD+0xe4>
	f_puts("TEST", &fil);
 800180e:	4c30      	ldr	r4, [pc, #192]	; (80018d0 <testSD+0x134>)
 8001810:	4621      	mov	r1, r4
 8001812:	4836      	ldr	r0, [pc, #216]	; (80018ec <testSD+0x150>)
 8001814:	f004 fdd9 	bl	80063ca <f_puts>
	ret = f_close(&fil);
 8001818:	4620      	mov	r0, r4
 800181a:	f004 fccb 	bl	80061b4 <f_close>
	if(ret != FR_OK) {
 800181e:	4601      	mov	r1, r0
 8001820:	bba0      	cbnz	r0, 800188c <testSD+0xf0>
	ret = f_open(&fil, "/TEST.TXT", FA_READ);
 8001822:	2201      	movs	r2, #1
 8001824:	4929      	ldr	r1, [pc, #164]	; (80018cc <testSD+0x130>)
 8001826:	482a      	ldr	r0, [pc, #168]	; (80018d0 <testSD+0x134>)
 8001828:	f004 f926 	bl	8005a78 <f_open>
	if(ret != FR_OK) {
 800182c:	4601      	mov	r1, r0
 800182e:	bb98      	cbnz	r0, 8001898 <testSD+0xfc>
	f_gets(buffer, sizeof(buffer), &fil);
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <testSD+0x134>)
 8001832:	2105      	movs	r1, #5
 8001834:	4668      	mov	r0, sp
 8001836:	f004 fd9d 	bl	8006374 <f_gets>
	if (strcmp(buffer, "TEST")) {
 800183a:	492c      	ldr	r1, [pc, #176]	; (80018ec <testSD+0x150>)
 800183c:	4668      	mov	r0, sp
 800183e:	f7fe fccf 	bl	80001e0 <strcmp>
 8001842:	4604      	mov	r4, r0
 8001844:	bb70      	cbnz	r0, 80018a4 <testSD+0x108>
	if(f_close(&fil) != FR_OK) {
 8001846:	4822      	ldr	r0, [pc, #136]	; (80018d0 <testSD+0x134>)
 8001848:	f004 fcb4 	bl	80061b4 <f_close>
 800184c:	bb80      	cbnz	r0, 80018b0 <testSD+0x114>
	if(f_unlink("test.txt") != FR_OK) {
 800184e:	4828      	ldr	r0, [pc, #160]	; (80018f0 <testSD+0x154>)
 8001850:	f004 fd34 	bl	80062bc <f_unlink>
 8001854:	bb90      	cbnz	r0, 80018bc <testSD+0x120>
}
 8001856:	4620      	mov	r0, r4
 8001858:	b002      	add	sp, #8
 800185a:	bd10      	pop	{r4, pc}
		printf("Failed to mount SD Card\r\n");
 800185c:	4825      	ldr	r0, [pc, #148]	; (80018f4 <testSD+0x158>)
 800185e:	f005 fb85 	bl	8006f6c <puts>
		return -1;
 8001862:	f04f 34ff 	mov.w	r4, #4294967295
 8001866:	e7f6      	b.n	8001856 <testSD+0xba>
		printf("Failed to open file (%i) \r\n", ret);
 8001868:	4823      	ldr	r0, [pc, #140]	; (80018f8 <testSD+0x15c>)
 800186a:	f005 faf9 	bl	8006e60 <iprintf>
		return -1;
 800186e:	f04f 34ff 	mov.w	r4, #4294967295
 8001872:	e7f0      	b.n	8001856 <testSD+0xba>
		printf("Free space check failed\r\n");
 8001874:	4821      	ldr	r0, [pc, #132]	; (80018fc <testSD+0x160>)
 8001876:	f005 fb79 	bl	8006f6c <puts>
		return -1;
 800187a:	f04f 34ff 	mov.w	r4, #4294967295
 800187e:	e7ea      	b.n	8001856 <testSD+0xba>
		printf("Drive is full\r\n");
 8001880:	481f      	ldr	r0, [pc, #124]	; (8001900 <testSD+0x164>)
 8001882:	f005 fb73 	bl	8006f6c <puts>
		return -1;
 8001886:	f04f 34ff 	mov.w	r4, #4294967295
 800188a:	e7e4      	b.n	8001856 <testSD+0xba>
		printf("Failed to close file (%i) \r\n", ret);
 800188c:	481d      	ldr	r0, [pc, #116]	; (8001904 <testSD+0x168>)
 800188e:	f005 fae7 	bl	8006e60 <iprintf>
		return -1;
 8001892:	f04f 34ff 	mov.w	r4, #4294967295
 8001896:	e7de      	b.n	8001856 <testSD+0xba>
		printf("Failed to open in read mode (%i) \r\n", ret);
 8001898:	481b      	ldr	r0, [pc, #108]	; (8001908 <testSD+0x16c>)
 800189a:	f005 fae1 	bl	8006e60 <iprintf>
		return -1;
 800189e:	f04f 34ff 	mov.w	r4, #4294967295
 80018a2:	e7d8      	b.n	8001856 <testSD+0xba>
		printf("File contents MISMATCH. FAIL R/W test\r\n");
 80018a4:	4819      	ldr	r0, [pc, #100]	; (800190c <testSD+0x170>)
 80018a6:	f005 fb61 	bl	8006f6c <puts>
		return -1;
 80018aa:	f04f 34ff 	mov.w	r4, #4294967295
 80018ae:	e7d2      	b.n	8001856 <testSD+0xba>
		printf("Failed to close\r\n");
 80018b0:	4817      	ldr	r0, [pc, #92]	; (8001910 <testSD+0x174>)
 80018b2:	f005 fb5b 	bl	8006f6c <puts>
		return -1;
 80018b6:	f04f 34ff 	mov.w	r4, #4294967295
 80018ba:	e7cc      	b.n	8001856 <testSD+0xba>
		printf("Failed to delete test file \r\n");
 80018bc:	4815      	ldr	r0, [pc, #84]	; (8001914 <testSD+0x178>)
 80018be:	f005 fb55 	bl	8006f6c <puts>
 80018c2:	e7c8      	b.n	8001856 <testSD+0xba>
 80018c4:	0800a188 	.word	0x0800a188
 80018c8:	20002730 	.word	0x20002730
 80018cc:	0800a1a8 	.word	0x0800a1a8
 80018d0:	200012f8 	.word	0x200012f8
 80018d4:	200039a0 	.word	0x200039a0
 80018d8:	20002728 	.word	0x20002728
 80018dc:	0800a220 	.word	0x0800a220
 80018e0:	3fe00000 	.word	0x3fe00000
 80018e4:	200039a4 	.word	0x200039a4
 80018e8:	2000272c 	.word	0x2000272c
 80018ec:	0800a1fc 	.word	0x0800a1fc
 80018f0:	0800a284 	.word	0x0800a284
 80018f4:	0800a18c 	.word	0x0800a18c
 80018f8:	0800a1b4 	.word	0x0800a1b4
 80018fc:	0800a1d0 	.word	0x0800a1d0
 8001900:	0800a1ec 	.word	0x0800a1ec
 8001904:	0800a204 	.word	0x0800a204
 8001908:	0800a224 	.word	0x0800a224
 800190c:	0800a248 	.word	0x0800a248
 8001910:	0800a270 	.word	0x0800a270
 8001914:	0800a290 	.word	0x0800a290

08001918 <fill_LUT>:
{
 8001918:	b510      	push	{r4, lr}
	uint16_t i = 0;
 800191a:	2400      	movs	r4, #0
	for(; i < LUT_SIZE; ++i)
 800191c:	e029      	b.n	8001972 <fill_LUT+0x5a>
		SIN_LUT[i] = (uint16_t) ( (sin( ( (double) i) * 360.0 / ((double) LUT_SIZE)  * 3.14159265/180.0) * HALF_AMP) + 128.0);
 800191e:	4620      	mov	r0, r4
 8001920:	f7fe fe08 	bl	8000534 <__aeabi_ui2d>
 8001924:	2200      	movs	r2, #0
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <fill_LUT+0x70>)
 8001928:	f7fe fe7e 	bl	8000628 <__aeabi_dmul>
 800192c:	2200      	movs	r2, #0
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <fill_LUT+0x74>)
 8001930:	f7fe ffa4 	bl	800087c <__aeabi_ddiv>
 8001934:	a310      	add	r3, pc, #64	; (adr r3, 8001978 <fill_LUT+0x60>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fe75 	bl	8000628 <__aeabi_dmul>
 800193e:	2200      	movs	r2, #0
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <fill_LUT+0x78>)
 8001942:	f7fe ff9b 	bl	800087c <__aeabi_ddiv>
 8001946:	ec41 0b10 	vmov	d0, r0, r1
 800194a:	f007 fbc5 	bl	80090d8 <sin>
 800194e:	ec51 0b10 	vmov	r0, r1, d0
 8001952:	a30b      	add	r3, pc, #44	; (adr r3, 8001980 <fill_LUT+0x68>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fe66 	bl	8000628 <__aeabi_dmul>
 800195c:	2200      	movs	r2, #0
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <fill_LUT+0x7c>)
 8001960:	f7fe fcac 	bl	80002bc <__adddf3>
 8001964:	f7ff f938 	bl	8000bd8 <__aeabi_d2uiz>
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <fill_LUT+0x80>)
 800196a:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
	for(; i < LUT_SIZE; ++i)
 800196e:	3401      	adds	r4, #1
 8001970:	b2a4      	uxth	r4, r4
 8001972:	2c63      	cmp	r4, #99	; 0x63
 8001974:	d9d3      	bls.n	800191e <fill_LUT+0x6>
}
 8001976:	bd10      	pop	{r4, pc}
 8001978:	53c8d4f1 	.word	0x53c8d4f1
 800197c:	400921fb 	.word	0x400921fb
 8001980:	99999999 	.word	0x99999999
 8001984:	40563999 	.word	0x40563999
 8001988:	40768000 	.word	0x40768000
 800198c:	40590000 	.word	0x40590000
 8001990:	40668000 	.word	0x40668000
 8001994:	40600000 	.word	0x40600000
 8001998:	20000218 	.word	0x20000218

0800199c <convert_data>:
	for (uint16_t i = 0; i < AUDIO_BUF_LEN; ++i) {
 800199c:	2300      	movs	r3, #0
 800199e:	e00b      	b.n	80019b8 <convert_data+0x1c>
		dac_buf[dac_bank_in][i] = (uint16_t)((0b111 << 12) | (uint16_t)(file_buf[i]) << 4);
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <convert_data+0x24>)
 80019a2:	5cd2      	ldrb	r2, [r2, r3]
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80019aa:	eb03 2c80 	add.w	ip, r3, r0, lsl #10
 80019ae:	4905      	ldr	r1, [pc, #20]	; (80019c4 <convert_data+0x28>)
 80019b0:	f821 201c 	strh.w	r2, [r1, ip, lsl #1]
	for (uint16_t i = 0; i < AUDIO_BUF_LEN; ++i) {
 80019b4:	3301      	adds	r3, #1
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019bc:	d3f0      	bcc.n	80019a0 <convert_data+0x4>
}
 80019be:	4770      	bx	lr
 80019c0:	20002328 	.word	0x20002328
 80019c4:	200002e8 	.word	0x200002e8

080019c8 <populate_bank>:
void populate_bank(uint8_t dac_bank_in) {
 80019c8:	b510      	push	{r4, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	4604      	mov	r4, r0
	res = f_read(&fil, file_buf, AUDIO_BUF_LEN, &bytes_read);
 80019ce:	ab01      	add	r3, sp, #4
 80019d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d4:	490b      	ldr	r1, [pc, #44]	; (8001a04 <populate_bank+0x3c>)
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <populate_bank+0x40>)
 80019d8:	f004 f968 	bl	8005cac <f_read>
	bytes_left -= bytes_read;
 80019dc:	9901      	ldr	r1, [sp, #4]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <populate_bank+0x44>)
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	1a5b      	subs	r3, r3, r1
 80019e4:	6013      	str	r3, [r2, #0]
	if (res != FR_OK || bytes_read == 0)
 80019e6:	b900      	cbnz	r0, 80019ea <populate_bank+0x22>
 80019e8:	b909      	cbnz	r1, 80019ee <populate_bank+0x26>
}
 80019ea:	b002      	add	sp, #8
 80019ec:	bd10      	pop	{r4, pc}
	convert_data(dac_bank_in);
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff ffd4 	bl	800199c <convert_data>
	dac_flag |= (1 << dac_bank_in);
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f404 	lsl.w	r4, r0, r4
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <populate_bank+0x48>)
 80019fc:	7818      	ldrb	r0, [r3, #0]
 80019fe:	4320      	orrs	r0, r4
 8001a00:	7018      	strb	r0, [r3, #0]
 8001a02:	e7f2      	b.n	80019ea <populate_bank+0x22>
 8001a04:	20002328 	.word	0x20002328
 8001a08:	200012f8 	.word	0x200012f8
 8001a0c:	200002e0 	.word	0x200002e0
 8001a10:	200012ea 	.word	0x200012ea

08001a14 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001a14:	b500      	push	{lr}
 8001a16:	b083      	sub	sp, #12
 8001a18:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1e:	2201      	movs	r2, #1
 8001a20:	a901      	add	r1, sp, #4
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <__io_putchar+0x1c>)
 8001a24:	f002 fbf9 	bl	800421a <HAL_UART_Transmit>
  return ch;
}
 8001a28:	9801      	ldr	r0, [sp, #4]
 8001a2a:	b003      	add	sp, #12
 8001a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a30:	2000395c 	.word	0x2000395c

08001a34 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim == &htim4) {
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001a36:	4283      	cmp	r3, r0
 8001a38:	d000      	beq.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x8>
 8001a3a:	4770      	bx	lr
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a3c:	b510      	push	{r4, lr}
		write_to_dac(&ext_dac, dac_buf[dac_bank][dac_buf_idx++]);
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	4c14      	ldr	r4, [pc, #80]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a44:	8823      	ldrh	r3, [r4, #0]
 8001a46:	1c59      	adds	r1, r3, #1
 8001a48:	8021      	strh	r1, [r4, #0]
 8001a4a:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a50:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a54:	4811      	ldr	r0, [pc, #68]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001a56:	f7ff fa81 	bl	8000f5c <write_to_dac>
		if (dac_buf_idx >= AUDIO_BUF_LEN) {
 8001a5a:	8823      	ldrh	r3, [r4, #0]
 8001a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a60:	d312      	bcc.n	8001a88 <HAL_TIM_PeriodElapsedCallback+0x54>
			dac_flag &= ~(1 << dac_bank);
 8001a62:	480b      	ldr	r0, [pc, #44]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001a64:	7803      	ldrb	r3, [r0, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	fa02 f103 	lsl.w	r1, r2, r3
 8001a6c:	4c0c      	ldr	r4, [pc, #48]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a6e:	7822      	ldrb	r2, [r4, #0]
 8001a70:	ea22 0201 	bic.w	r2, r2, r1
 8001a74:	7022      	strb	r2, [r4, #0]
			dac_bank = (dac_bank + 1) % 2;
 8001a76:	3301      	adds	r3, #1
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	bf48      	it	mi
 8001a7e:	425b      	negmi	r3, r3
 8001a80:	7003      	strb	r3, [r0, #0]
			dac_buf_idx = 0;
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	801a      	strh	r2, [r3, #0]
		}
		//write_to_dac(&ext_dac, SIN_LUT[lut_idx++]);
		//lut_idx %= 100;
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
	}
}
 8001a88:	bd10      	pop	{r4, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20003914 	.word	0x20003914
 8001a90:	200002e4 	.word	0x200002e4
 8001a94:	200012e8 	.word	0x200012e8
 8001a98:	200002e8 	.word	0x200002e8
 8001a9c:	200012ec 	.word	0x200012ec
 8001aa0:	200012ea 	.word	0x200012ea

08001aa4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <Error_Handler+0x2>

08001aa8 <MX_I2C1_Init>:
{
 8001aa8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001aaa:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <MX_I2C1_Init+0x2c>)
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <MX_I2C1_Init+0x30>)
 8001aae:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <MX_I2C1_Init+0x34>)
 8001ab2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abe:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ac2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac8:	f001 f90e 	bl	8002ce8 <HAL_I2C_Init>
 8001acc:	b900      	cbnz	r0, 8001ad0 <MX_I2C1_Init+0x28>
}
 8001ace:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001ad0:	f7ff ffe8 	bl	8001aa4 <Error_Handler>
 8001ad4:	20003810 	.word	0x20003810
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	000186a0 	.word	0x000186a0

08001ae0 <MX_SPI2_Init>:
{
 8001ae0:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8001ae2:	480d      	ldr	r0, [pc, #52]	; (8001b18 <MX_SPI2_Init+0x38>)
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <MX_SPI2_Init+0x3c>)
 8001ae6:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ae8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001aec:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001aee:	2300      	movs	r3, #0
 8001af0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001af2:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af6:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afc:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001afe:	2210      	movs	r2, #16
 8001b00:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b02:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b04:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b06:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b08:	230a      	movs	r3, #10
 8001b0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b0c:	f001 fda4 	bl	8003658 <HAL_SPI_Init>
 8001b10:	b900      	cbnz	r0, 8001b14 <MX_SPI2_Init+0x34>
}
 8001b12:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b14:	f7ff ffc6 	bl	8001aa4 <Error_Handler>
 8001b18:	20003864 	.word	0x20003864
 8001b1c:	40003800 	.word	0x40003800

08001b20 <MX_SPI3_Init>:
{
 8001b20:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <MX_SPI3_Init+0x3c>)
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_SPI3_Init+0x40>)
 8001b26:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b28:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b2c:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001b32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b36:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b38:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b3a:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b40:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b42:	2208      	movs	r2, #8
 8001b44:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b46:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b48:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b4a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b50:	f001 fd82 	bl	8003658 <HAL_SPI_Init>
 8001b54:	b900      	cbnz	r0, 8001b58 <MX_SPI3_Init+0x38>
}
 8001b56:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b58:	f7ff ffa4 	bl	8001aa4 <Error_Handler>
 8001b5c:	200038bc 	.word	0x200038bc
 8001b60:	40003c00 	.word	0x40003c00

08001b64 <MX_USART2_UART_Init>:
{
 8001b64:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001b66:	480a      	ldr	r0, [pc, #40]	; (8001b90 <MX_USART2_UART_Init+0x2c>)
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <MX_USART2_UART_Init+0x30>)
 8001b6a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001b6c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b70:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	2300      	movs	r3, #0
 8001b74:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b76:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b78:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b82:	f002 fb1b 	bl	80041bc <HAL_UART_Init>
 8001b86:	b900      	cbnz	r0, 8001b8a <MX_USART2_UART_Init+0x26>
}
 8001b88:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b8a:	f7ff ff8b 	bl	8001aa4 <Error_Handler>
 8001b8e:	bf00      	nop
 8001b90:	2000395c 	.word	0x2000395c
 8001b94:	40004400 	.word	0x40004400

08001b98 <MX_ADC1_Init>:
{
 8001b98:	b500      	push	{lr}
 8001b9a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8001ba6:	4814      	ldr	r0, [pc, #80]	; (8001bf8 <MX_ADC1_Init+0x60>)
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <MX_ADC1_Init+0x64>)
 8001baa:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bb0:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bb2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001bb4:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bb6:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bb8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bbc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <MX_ADC1_Init+0x68>)
 8001bc0:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc2:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bc8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bcc:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bce:	f000 fc83 	bl	80024d8 <HAL_ADC_Init>
 8001bd2:	b968      	cbnz	r0, 8001bf0 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_8;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be0:	4669      	mov	r1, sp
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_ADC1_Init+0x60>)
 8001be4:	f000 fca4 	bl	8002530 <HAL_ADC_ConfigChannel>
 8001be8:	b920      	cbnz	r0, 8001bf4 <MX_ADC1_Init+0x5c>
}
 8001bea:	b005      	add	sp, #20
 8001bec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001bf0:	f7ff ff58 	bl	8001aa4 <Error_Handler>
    Error_Handler();
 8001bf4:	f7ff ff56 	bl	8001aa4 <Error_Handler>
 8001bf8:	20003768 	.word	0x20003768
 8001bfc:	40012000 	.word	0x40012000
 8001c00:	0f000001 	.word	0x0f000001

08001c04 <MX_TIM4_Init>:
{
 8001c04:	b500      	push	{lr}
 8001c06:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	9303      	str	r3, [sp, #12]
 8001c0e:	9304      	str	r3, [sp, #16]
 8001c10:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	9301      	str	r3, [sp, #4]
  htim4.Instance = TIM4;
 8001c16:	4813      	ldr	r0, [pc, #76]	; (8001c64 <MX_TIM4_Init+0x60>)
 8001c18:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <MX_TIM4_Init+0x64>)
 8001c1a:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8001c1c:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 7619;
 8001c20:	f641 52c3 	movw	r2, #7619	; 0x1dc3
 8001c24:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c26:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c2c:	f002 f902 	bl	8003e34 <HAL_TIM_Base_Init>
 8001c30:	b990      	cbnz	r0, 8001c58 <MX_TIM4_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c36:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c38:	a902      	add	r1, sp, #8
 8001c3a:	480a      	ldr	r0, [pc, #40]	; (8001c64 <MX_TIM4_Init+0x60>)
 8001c3c:	f002 f933 	bl	8003ea6 <HAL_TIM_ConfigClockSource>
 8001c40:	b960      	cbnz	r0, 8001c5c <MX_TIM4_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c48:	4669      	mov	r1, sp
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <MX_TIM4_Init+0x60>)
 8001c4c:	f002 f9aa 	bl	8003fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	b930      	cbnz	r0, 8001c60 <MX_TIM4_Init+0x5c>
}
 8001c52:	b007      	add	sp, #28
 8001c54:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001c58:	f7ff ff24 	bl	8001aa4 <Error_Handler>
    Error_Handler();
 8001c5c:	f7ff ff22 	bl	8001aa4 <Error_Handler>
    Error_Handler();
 8001c60:	f7ff ff20 	bl	8001aa4 <Error_Handler>
 8001c64:	20003914 	.word	0x20003914
 8001c68:	40000800 	.word	0x40000800

08001c6c <SystemClock_Config>:
{
 8001c6c:	b500      	push	{lr}
 8001c6e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c70:	2230      	movs	r2, #48	; 0x30
 8001c72:	2100      	movs	r1, #0
 8001c74:	a808      	add	r0, sp, #32
 8001c76:	f004 fc81 	bl	800657c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	9303      	str	r3, [sp, #12]
 8001c7e:	9304      	str	r3, [sp, #16]
 8001c80:	9305      	str	r3, [sp, #20]
 8001c82:	9306      	str	r3, [sp, #24]
 8001c84:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <SystemClock_Config+0x9c>)
 8001c8a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001c8c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001c90:	6411      	str	r1, [r2, #64]	; 0x40
 8001c92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c94:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001c98:	9201      	str	r2, [sp, #4]
 8001c9a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	491b      	ldr	r1, [pc, #108]	; (8001d0c <SystemClock_Config+0xa0>)
 8001ca0:	680a      	ldr	r2, [r1, #0]
 8001ca2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001caa:	600a      	str	r2, [r1, #0]
 8001cac:	680a      	ldr	r2, [r1, #0]
 8001cae:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cba:	2201      	movs	r2, #1
 8001cbc:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc2:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cc4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001cc6:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001cc8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ccc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd6:	a808      	add	r0, sp, #32
 8001cd8:	f001 f8e4 	bl	8002ea4 <HAL_RCC_OscConfig>
 8001cdc:	b980      	cbnz	r0, 8001d00 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cde:	230f      	movs	r3, #15
 8001ce0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cee:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cf2:	a803      	add	r0, sp, #12
 8001cf4:	f001 fb3c 	bl	8003370 <HAL_RCC_ClockConfig>
 8001cf8:	b920      	cbnz	r0, 8001d04 <SystemClock_Config+0x98>
}
 8001cfa:	b015      	add	sp, #84	; 0x54
 8001cfc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d00:	f7ff fed0 	bl	8001aa4 <Error_Handler>
    Error_Handler();
 8001d04:	f7ff fece 	bl	8001aa4 <Error_Handler>
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40007000 	.word	0x40007000

08001d10 <main>:
{
 8001d10:	b500      	push	{lr}
 8001d12:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001d14:	f000 fb06 	bl	8002324 <HAL_Init>
  SystemClock_Config();
 8001d18:	f7ff ffa8 	bl	8001c6c <SystemClock_Config>
  MX_GPIO_Init();
 8001d1c:	f7ff fcac 	bl	8001678 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d20:	f7ff fd22 	bl	8001768 <MX_DMA_Init>
  MX_I2C1_Init();
 8001d24:	f7ff fec0 	bl	8001aa8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001d28:	f7ff feda 	bl	8001ae0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001d2c:	f7ff fef8 	bl	8001b20 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001d30:	f7ff ff18 	bl	8001b64 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001d34:	f002 fade 	bl	80042f4 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001d38:	f7ff ff2e 	bl	8001b98 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001d3c:	f7ff ff62 	bl	8001c04 <MX_TIM4_Init>
  ext_dac.hspi = &hspi3;
 8001d40:	4828      	ldr	r0, [pc, #160]	; (8001de4 <main+0xd4>)
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <main+0xd8>)
 8001d44:	6003      	str	r3, [r0, #0]
  ext_dac.cs_port = GPIOB;
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <main+0xdc>)
 8001d48:	6043      	str	r3, [r0, #4]
  ext_dac.cs_pin = GPIO_PIN_2;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	8103      	strh	r3, [r0, #8]
  shutdown_dac(&ext_dac);
 8001d4e:	f7ff f8e5 	bl	8000f1c <shutdown_dac>
  fill_LUT();
 8001d52:	f7ff fde1 	bl	8001918 <fill_LUT>
  testSD();
 8001d56:	f7ff fd21 	bl	800179c <testSD>
  if(f_mount(&fs, "/", 0) != FR_OK) {
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4924      	ldr	r1, [pc, #144]	; (8001df0 <main+0xe0>)
 8001d5e:	4825      	ldr	r0, [pc, #148]	; (8001df4 <main+0xe4>)
 8001d60:	f003 fe5c 	bl	8005a1c <f_mount>
 8001d64:	b9d0      	cbnz	r0, 8001d9c <main+0x8c>
  f_open(&fil, "/song.wav", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001d66:	4c24      	ldr	r4, [pc, #144]	; (8001df8 <main+0xe8>)
 8001d68:	2213      	movs	r2, #19
 8001d6a:	4924      	ldr	r1, [pc, #144]	; (8001dfc <main+0xec>)
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f003 fe83 	bl	8005a78 <f_open>
  f_read(&fil, &wav_header, sizeof(WAV_Header), &count);
 8001d72:	ab0b      	add	r3, sp, #44	; 0x2c
 8001d74:	222c      	movs	r2, #44	; 0x2c
 8001d76:	4669      	mov	r1, sp
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f003 ff97 	bl	8005cac <f_read>
  bytes_left = wav_header.file_size - 2048;
 8001d7e:	9b01      	ldr	r3, [sp, #4]
 8001d80:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001d84:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <main+0xf0>)
 8001d86:	6013      	str	r3, [r2, #0]
  populate_bank(0);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff fe1d 	bl	80019c8 <populate_bank>
  populate_bank(1);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f7ff fe1a 	bl	80019c8 <populate_bank>
  HAL_TIM_Base_Start_IT(&htim4);
 8001d94:	481b      	ldr	r0, [pc, #108]	; (8001e04 <main+0xf4>)
 8001d96:	f001 fee9 	bl	8003b6c <HAL_TIM_Base_Start_IT>
  while (bytes_left > 0) {
 8001d9a:	e008      	b.n	8001dae <main+0x9e>
  		printf("Failed to mount SD Card\r\n");
 8001d9c:	481a      	ldr	r0, [pc, #104]	; (8001e08 <main+0xf8>)
 8001d9e:	f005 f8e5 	bl	8006f6c <puts>
 8001da2:	e7e0      	b.n	8001d66 <main+0x56>
	  if (!(dac_flag & 0b10)) {
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <main+0xfc>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	f013 0f02 	tst.w	r3, #2
 8001dac:	d00f      	beq.n	8001dce <main+0xbe>
  while (bytes_left > 0) {
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <main+0xf0>)
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	2900      	cmp	r1, #0
 8001db4:	dd0f      	ble.n	8001dd6 <main+0xc6>
	  printf("%ld\n\r", bytes_left);
 8001db6:	4816      	ldr	r0, [pc, #88]	; (8001e10 <main+0x100>)
 8001db8:	f005 f852 	bl	8006e60 <iprintf>
	  if (!(dac_flag & 0b1)) {
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <main+0xfc>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f013 0f01 	tst.w	r3, #1
 8001dc4:	d1ee      	bne.n	8001da4 <main+0x94>
		  populate_bank(0);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fdfe 	bl	80019c8 <populate_bank>
 8001dcc:	e7ea      	b.n	8001da4 <main+0x94>
	  	 populate_bank(1);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff fdfa 	bl	80019c8 <populate_bank>
 8001dd4:	e7eb      	b.n	8001dae <main+0x9e>
  HAL_TIM_Base_Stop_IT(&htim4);
 8001dd6:	480b      	ldr	r0, [pc, #44]	; (8001e04 <main+0xf4>)
 8001dd8:	f001 ff04 	bl	8003be4 <HAL_TIM_Base_Stop_IT>
  shutdown_dac(&ext_dac);
 8001ddc:	4801      	ldr	r0, [pc, #4]	; (8001de4 <main+0xd4>)
 8001dde:	f7ff f89d 	bl	8000f1c <shutdown_dac>
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <main+0xd2>
 8001de4:	200012ec 	.word	0x200012ec
 8001de8:	200038bc 	.word	0x200038bc
 8001dec:	40020400 	.word	0x40020400
 8001df0:	0800a188 	.word	0x0800a188
 8001df4:	20002730 	.word	0x20002730
 8001df8:	200012f8 	.word	0x200012f8
 8001dfc:	0800a2b0 	.word	0x0800a2b0
 8001e00:	200002e0 	.word	0x200002e0
 8001e04:	20003914 	.word	0x20003914
 8001e08:	0800a18c 	.word	0x0800a18c
 8001e0c:	200012ea 	.word	0x200012ea
 8001e10:	0800a2bc 	.word	0x0800a2bc

08001e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e14:	b500      	push	{lr}
 8001e16:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e18:	2100      	movs	r1, #0
 8001e1a:	9100      	str	r1, [sp, #0]
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <HAL_MspInit+0x3c>)
 8001e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
 8001e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e28:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e2c:	9200      	str	r2, [sp, #0]
 8001e2e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	9101      	str	r1, [sp, #4]
 8001e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e44:	2007      	movs	r0, #7
 8001e46:	f000 fc3f 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4a:	b003      	add	sp, #12
 8001e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e50:	40023800 	.word	0x40023800

08001e54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e54:	b530      	push	{r4, r5, lr}
 8001e56:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9303      	str	r3, [sp, #12]
 8001e5c:	9304      	str	r3, [sp, #16]
 8001e5e:	9305      	str	r3, [sp, #20]
 8001e60:	9306      	str	r3, [sp, #24]
 8001e62:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8001e64:	6802      	ldr	r2, [r0, #0]
 8001e66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e6a:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e72:	b009      	add	sp, #36	; 0x24
 8001e74:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e76:	2400      	movs	r4, #0
 8001e78:	9400      	str	r4, [sp, #0]
 8001e7a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
 8001e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e88:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001e8c:	9200      	str	r2, [sp, #0]
 8001e8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e90:	9401      	str	r4, [sp, #4]
 8001e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e94:	f042 0204 	orr.w	r2, r2, #4
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
 8001e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9c:	f002 0204 	and.w	r2, r2, #4
 8001ea0:	9201      	str	r2, [sp, #4]
 8001ea2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea4:	9402      	str	r4, [sp, #8]
 8001ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea8:	f042 0202 	orr.w	r2, r2, #2
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ebc:	2503      	movs	r5, #3
 8001ebe:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	a903      	add	r1, sp, #12
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_ADC_MspInit+0x84>)
 8001ec4:	f000 fe2a 	bl	8002b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 8001ec8:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eca:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ece:	a903      	add	r1, sp, #12
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <HAL_ADC_MspInit+0x88>)
 8001ed2:	f000 fe23 	bl	8002b1c <HAL_GPIO_Init>
}
 8001ed6:	e7cc      	b.n	8001e72 <HAL_ADC_MspInit+0x1e>
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	40020400 	.word	0x40020400

08001ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee0:	b530      	push	{r4, r5, lr}
 8001ee2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9303      	str	r3, [sp, #12]
 8001ee8:	9304      	str	r3, [sp, #16]
 8001eea:	9305      	str	r3, [sp, #20]
 8001eec:	9306      	str	r3, [sp, #24]
 8001eee:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001ef0:	6802      	ldr	r2, [r0, #0]
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_I2C_MspInit+0x64>)
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ef8:	b009      	add	sp, #36	; 0x24
 8001efa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efc:	2500      	movs	r5, #0
 8001efe:	9501      	str	r5, [sp, #4]
 8001f00:	4c11      	ldr	r4, [pc, #68]	; (8001f48 <HAL_I2C_MspInit+0x68>)
 8001f02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6323      	str	r3, [r4, #48]	; 0x30
 8001f0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = IMU_I2C1_SDA_Pin|IMU_I2C1_SCL_Pin;
 8001f14:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1a:	2312      	movs	r3, #18
 8001f1c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f22:	2304      	movs	r3, #4
 8001f24:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	a903      	add	r1, sp, #12
 8001f28:	4808      	ldr	r0, [pc, #32]	; (8001f4c <HAL_I2C_MspInit+0x6c>)
 8001f2a:	f000 fdf7 	bl	8002b1c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f2e:	9502      	str	r5, [sp, #8]
 8001f30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f36:	6423      	str	r3, [r4, #64]	; 0x40
 8001f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3e:	9302      	str	r3, [sp, #8]
 8001f40:	9b02      	ldr	r3, [sp, #8]
}
 8001f42:	e7d9      	b.n	8001ef8 <HAL_I2C_MspInit+0x18>
 8001f44:	40005400 	.word	0x40005400
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020400 	.word	0x40020400

08001f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f52:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	2300      	movs	r3, #0
 8001f56:	9305      	str	r3, [sp, #20]
 8001f58:	9306      	str	r3, [sp, #24]
 8001f5a:	9307      	str	r3, [sp, #28]
 8001f5c:	9308      	str	r3, [sp, #32]
 8001f5e:	9309      	str	r3, [sp, #36]	; 0x24
  if(hspi->Instance==SPI2)
 8001f60:	6803      	ldr	r3, [r0, #0]
 8001f62:	4a40      	ldr	r2, [pc, #256]	; (8002064 <HAL_SPI_MspInit+0x114>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d005      	beq.n	8001f74 <HAL_SPI_MspInit+0x24>
 8001f68:	4604      	mov	r4, r0

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8001f6a:	4a3f      	ldr	r2, [pc, #252]	; (8002068 <HAL_SPI_MspInit+0x118>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d039      	beq.n	8001fe4 <HAL_SPI_MspInit+0x94>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f70:	b00b      	add	sp, #44	; 0x2c
 8001f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f74:	2400      	movs	r4, #0
 8001f76:	9400      	str	r4, [sp, #0]
 8001f78:	4b3c      	ldr	r3, [pc, #240]	; (800206c <HAL_SPI_MspInit+0x11c>)
 8001f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
 8001f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f84:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f88:	9200      	str	r2, [sp, #0]
 8001f8a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8c:	9401      	str	r4, [sp, #4]
 8001f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f90:	f042 0204 	orr.w	r2, r2, #4
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
 8001f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f98:	f002 0204 	and.w	r2, r2, #4
 8001f9c:	9201      	str	r2, [sp, #4]
 8001f9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	9402      	str	r4, [sp, #8]
 8001fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa4:	f042 0202 	orr.w	r2, r2, #2
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2702      	movs	r7, #2
 8001fba:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	2603      	movs	r6, #3
 8001fbe:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fc0:	2505      	movs	r5, #5
 8001fc2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc4:	a905      	add	r1, sp, #20
 8001fc6:	482a      	ldr	r0, [pc, #168]	; (8002070 <HAL_SPI_MspInit+0x120>)
 8001fc8:	f000 fda8 	bl	8002b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8001fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fd8:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001fda:	a905      	add	r1, sp, #20
 8001fdc:	4825      	ldr	r0, [pc, #148]	; (8002074 <HAL_SPI_MspInit+0x124>)
 8001fde:	f000 fd9d 	bl	8002b1c <HAL_GPIO_Init>
 8001fe2:	e7c5      	b.n	8001f70 <HAL_SPI_MspInit+0x20>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fe4:	2500      	movs	r5, #0
 8001fe6:	9503      	str	r5, [sp, #12]
 8001fe8:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_SPI_MspInit+0x11c>)
 8001fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001ff8:	9203      	str	r2, [sp, #12]
 8001ffa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffc:	9504      	str	r5, [sp, #16]
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	f042 0204 	orr.w	r2, r2, #4
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	9304      	str	r3, [sp, #16]
 800200e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002010:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002014:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800201e:	2306      	movs	r3, #6
 8002020:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	a905      	add	r1, sp, #20
 8002024:	4812      	ldr	r0, [pc, #72]	; (8002070 <HAL_SPI_MspInit+0x120>)
 8002026:	f000 fd79 	bl	8002b1c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800202a:	4813      	ldr	r0, [pc, #76]	; (8002078 <HAL_SPI_MspInit+0x128>)
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_SPI_MspInit+0x12c>)
 800202e:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002030:	6045      	str	r5, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002032:	2340      	movs	r3, #64	; 0x40
 8002034:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002036:	60c5      	str	r5, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203c:	6103      	str	r3, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800203e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002042:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002048:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800204a:	61c5      	str	r5, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800204c:	6205      	str	r5, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800204e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002050:	f000 fc10 	bl	8002874 <HAL_DMA_Init>
 8002054:	b918      	cbnz	r0, 800205e <HAL_SPI_MspInit+0x10e>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_SPI_MspInit+0x128>)
 8002058:	64a3      	str	r3, [r4, #72]	; 0x48
 800205a:	639c      	str	r4, [r3, #56]	; 0x38
}
 800205c:	e788      	b.n	8001f70 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 800205e:	f7ff fd21 	bl	8001aa4 <Error_Handler>
 8002062:	e7f8      	b.n	8002056 <HAL_SPI_MspInit+0x106>
 8002064:	40003800 	.word	0x40003800
 8002068:	40003c00 	.word	0x40003c00
 800206c:	40023800 	.word	0x40023800
 8002070:	40020800 	.word	0x40020800
 8002074:	40020400 	.word	0x40020400
 8002078:	200037b0 	.word	0x200037b0
 800207c:	40026088 	.word	0x40026088

08002080 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8002080:	6802      	ldr	r2, [r0, #0]
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_TIM_Base_MspInit+0x3c>)
 8002084:	429a      	cmp	r2, r3
 8002086:	d000      	beq.n	800208a <HAL_TIM_Base_MspInit+0xa>
 8002088:	4770      	bx	lr
{
 800208a:	b500      	push	{lr}
 800208c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800208e:	2100      	movs	r1, #0
 8002090:	9101      	str	r1, [sp, #4]
 8002092:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8002096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002098:	f042 0204 	orr.w	r2, r2, #4
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	9b01      	ldr	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020a8:	460a      	mov	r2, r1
 80020aa:	201e      	movs	r0, #30
 80020ac:	f000 fb1e 	bl	80026ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020b0:	201e      	movs	r0, #30
 80020b2:	f000 fb53 	bl	800275c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020b6:	b003      	add	sp, #12
 80020b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80020bc:	40000800 	.word	0x40000800

080020c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b500      	push	{lr}
 80020c2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	2300      	movs	r3, #0
 80020c6:	9303      	str	r3, [sp, #12]
 80020c8:	9304      	str	r3, [sp, #16]
 80020ca:	9305      	str	r3, [sp, #20]
 80020cc:	9306      	str	r3, [sp, #24]
 80020ce:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80020d0:	6802      	ldr	r2, [r0, #0]
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_UART_MspInit+0x64>)
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d002      	beq.n	80020de <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020d8:	b009      	add	sp, #36	; 0x24
 80020da:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80020de:	2100      	movs	r1, #0
 80020e0:	9101      	str	r1, [sp, #4]
 80020e2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80020e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
 80020ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80020f4:	9201      	str	r2, [sp, #4]
 80020f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f8:	9102      	str	r1, [sp, #8]
 80020fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	9302      	str	r3, [sp, #8]
 800210a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 800210c:	230c      	movs	r3, #12
 800210e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002114:	2307      	movs	r3, #7
 8002116:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	a903      	add	r1, sp, #12
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <HAL_UART_MspInit+0x68>)
 800211c:	f000 fcfe 	bl	8002b1c <HAL_GPIO_Init>
}
 8002120:	e7da      	b.n	80020d8 <HAL_UART_MspInit+0x18>
 8002122:	bf00      	nop
 8002124:	40004400 	.word	0x40004400
 8002128:	40020000 	.word	0x40020000

0800212c <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile extern uint8_t Timer1, Timer2;

void SDTimer_Handler() {

	if (Timer1 > 0) {
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <SDTimer_Handler+0x24>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b123      	cbz	r3, 800213c <SDTimer_Handler+0x10>
		--Timer1;
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <SDTimer_Handler+0x24>)
 8002134:	7813      	ldrb	r3, [r2, #0]
 8002136:	3b01      	subs	r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	7013      	strb	r3, [r2, #0]
	}

	if (Timer2 > 0) {
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SDTimer_Handler+0x28>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b123      	cbz	r3, 800214c <SDTimer_Handler+0x20>
		--Timer2;
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <SDTimer_Handler+0x28>)
 8002144:	7813      	ldrb	r3, [r2, #0]
 8002146:	3b01      	subs	r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	7013      	strb	r3, [r2, #0]
	}
}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000212 	.word	0x20000212
 8002154:	20000214 	.word	0x20000214

08002158 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <NMI_Handler>

0800215a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <HardFault_Handler>

0800215c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <MemManage_Handler>

0800215e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <BusFault_Handler>

08002160 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <UsageFault_Handler>

08002162 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002162:	4770      	bx	lr

08002164 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002164:	4770      	bx	lr

08002166 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002166:	4770      	bx	lr

08002168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002168:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <SysTick_Handler+0x28>)
 800216c:	7813      	ldrb	r3, [r2, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	7013      	strb	r3, [r2, #0]

	if (FatFsCnt >= 10) {
 8002174:	7813      	ldrb	r3, [r2, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b09      	cmp	r3, #9
 800217a:	d802      	bhi.n	8002182 <SysTick_Handler+0x1a>
		FatFsCnt = 0;
		SDTimer_Handler();
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217c:	f000 f8ec 	bl	8002358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002180:	bd08      	pop	{r3, pc}
		FatFsCnt = 0;
 8002182:	4613      	mov	r3, r2
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002188:	f7ff ffd0 	bl	800212c <SDTimer_Handler>
 800218c:	e7f6      	b.n	800217c <SysTick_Handler+0x14>
 800218e:	bf00      	nop
 8002190:	200039a8 	.word	0x200039a8

08002194 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002194:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002196:	4802      	ldr	r0, [pc, #8]	; (80021a0 <DMA1_Stream5_IRQHandler+0xc>)
 8002198:	f000 fbd2 	bl	8002940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800219c:	bd08      	pop	{r3, pc}
 800219e:	bf00      	nop
 80021a0:	200037b0 	.word	0x200037b0

080021a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021a6:	4802      	ldr	r0, [pc, #8]	; (80021b0 <TIM4_IRQHandler+0xc>)
 80021a8:	f001 fd39 	bl	8003c1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021ac:	bd08      	pop	{r3, pc}
 80021ae:	bf00      	nop
 80021b0:	20003914 	.word	0x20003914

080021b4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80021b4:	2001      	movs	r0, #1
 80021b6:	4770      	bx	lr

080021b8 <_kill>:

int _kill(int pid, int sig)
{
 80021b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80021ba:	f004 f9b5 	bl	8006528 <__errno>
 80021be:	2316      	movs	r3, #22
 80021c0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80021c2:	f04f 30ff 	mov.w	r0, #4294967295
 80021c6:	bd08      	pop	{r3, pc}

080021c8 <_exit>:

void _exit (int status)
{
 80021c8:	b508      	push	{r3, lr}
	_kill(status, -1);
 80021ca:	f04f 31ff 	mov.w	r1, #4294967295
 80021ce:	f7ff fff3 	bl	80021b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021d2:	e7fe      	b.n	80021d2 <_exit+0xa>

080021d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	460c      	mov	r4, r1
 80021d8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	2500      	movs	r5, #0
 80021dc:	e006      	b.n	80021ec <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80021de:	f3af 8000 	nop.w
 80021e2:	4621      	mov	r1, r4
 80021e4:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80021ea:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	42b5      	cmp	r5, r6
 80021ee:	dbf6      	blt.n	80021de <_read+0xa>
	}

return len;
}
 80021f0:	4630      	mov	r0, r6
 80021f2:	bd70      	pop	{r4, r5, r6, pc}

080021f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	460c      	mov	r4, r1
 80021f8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fa:	2500      	movs	r5, #0
 80021fc:	e004      	b.n	8002208 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80021fe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002202:	f7ff fc07 	bl	8001a14 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	3501      	adds	r5, #1
 8002208:	42b5      	cmp	r5, r6
 800220a:	dbf8      	blt.n	80021fe <_write+0xa>
	}
	return len;
}
 800220c:	4630      	mov	r0, r6
 800220e:	bd70      	pop	{r4, r5, r6, pc}

08002210 <_close>:

int _close(int file)
{
	return -1;
}
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	4770      	bx	lr

08002216 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800221a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800221c:	2000      	movs	r0, #0
 800221e:	4770      	bx	lr

08002220 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002220:	2001      	movs	r0, #1
 8002222:	4770      	bx	lr

08002224 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002224:	2000      	movs	r0, #0
 8002226:	4770      	bx	lr

08002228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002228:	b510      	push	{r4, lr}
 800222a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800222c:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <_sbrk+0x38>)
 800222e:	490d      	ldr	r1, [pc, #52]	; (8002264 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <_sbrk+0x40>)
 8002232:	6800      	ldr	r0, [r0, #0]
 8002234:	b140      	cbz	r0, 8002248 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002236:	480c      	ldr	r0, [pc, #48]	; (8002268 <_sbrk+0x40>)
 8002238:	6800      	ldr	r0, [r0, #0]
 800223a:	4403      	add	r3, r0
 800223c:	1a52      	subs	r2, r2, r1
 800223e:	4293      	cmp	r3, r2
 8002240:	d806      	bhi.n	8002250 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <_sbrk+0x40>)
 8002244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002246:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002248:	4807      	ldr	r0, [pc, #28]	; (8002268 <_sbrk+0x40>)
 800224a:	4c08      	ldr	r4, [pc, #32]	; (800226c <_sbrk+0x44>)
 800224c:	6004      	str	r4, [r0, #0]
 800224e:	e7f2      	b.n	8002236 <_sbrk+0xe>
    errno = ENOMEM;
 8002250:	f004 f96a 	bl	8006528 <__errno>
 8002254:	230c      	movs	r3, #12
 8002256:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	e7f3      	b.n	8002246 <_sbrk+0x1e>
 800225e:	bf00      	nop
 8002260:	20018000 	.word	0x20018000
 8002264:	00000400 	.word	0x00000400
 8002268:	200039ac 	.word	0x200039ac
 800226c:	20003c00 	.word	0x20003c00

08002270 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <SystemInit+0x10>)
 8002272:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002276:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800227a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002288:	480d      	ldr	r0, [pc, #52]	; (80022c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800228a:	490e      	ldr	r1, [pc, #56]	; (80022c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002290:	e002      	b.n	8002298 <LoopCopyDataInit>

08002292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002296:	3304      	adds	r3, #4

08002298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800229c:	d3f9      	bcc.n	8002292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022a0:	4c0b      	ldr	r4, [pc, #44]	; (80022d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a4:	e001      	b.n	80022aa <LoopFillZerobss>

080022a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a8:	3204      	adds	r2, #4

080022aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ac:	d3fb      	bcc.n	80022a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022ae:	f7ff ffdf 	bl	8002270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022b2:	f004 f93f 	bl	8006534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022b6:	f7ff fd2b 	bl	8001d10 <main>
  bx  lr    
 80022ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80022c8:	0800ad00 	.word	0x0800ad00
  ldr r2, =_sbss
 80022cc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80022d0:	20003c00 	.word	0x20003c00

080022d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d4:	e7fe      	b.n	80022d4 <ADC_IRQHandler>
	...

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b510      	push	{r4, lr}
 80022da:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_InitTick+0x40>)
 80022de:	7818      	ldrb	r0, [r3, #0]
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <HAL_InitTick+0x44>)
 80022ea:	6810      	ldr	r0, [r2, #0]
 80022ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80022f0:	f000 fa42 	bl	8002778 <HAL_SYSTICK_Config>
 80022f4:	b968      	cbnz	r0, 8002312 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f6:	2c0f      	cmp	r4, #15
 80022f8:	d901      	bls.n	80022fe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
 80022fc:	e00a      	b.n	8002314 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fe:	2200      	movs	r2, #0
 8002300:	4621      	mov	r1, r4
 8002302:	f04f 30ff 	mov.w	r0, #4294967295
 8002306:	f000 f9f1 	bl	80026ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_InitTick+0x48>)
 800230c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2000      	movs	r0, #0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002312:	2001      	movs	r0, #1
}
 8002314:	bd10      	pop	{r4, pc}
 8002316:	bf00      	nop
 8002318:	20000008 	.word	0x20000008
 800231c:	20000004 	.word	0x20000004
 8002320:	2000000c 	.word	0x2000000c

08002324 <HAL_Init>:
{
 8002324:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_Init+0x30>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002336:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002340:	2003      	movs	r0, #3
 8002342:	f000 f9c1 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff ffc6 	bl	80022d8 <HAL_InitTick>
  HAL_MspInit();
 800234c:	f7ff fd62 	bl	8001e14 <HAL_MspInit>
}
 8002350:	2000      	movs	r0, #0
 8002352:	bd08      	pop	{r3, pc}
 8002354:	40023c00 	.word	0x40023c00

08002358 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002358:	4a03      	ldr	r2, [pc, #12]	; (8002368 <HAL_IncTick+0x10>)
 800235a:	6811      	ldr	r1, [r2, #0]
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_IncTick+0x14>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	440b      	add	r3, r1
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	200039b0 	.word	0x200039b0
 800236c:	20000008 	.word	0x20000008

08002370 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002370:	4b01      	ldr	r3, [pc, #4]	; (8002378 <HAL_GetTick+0x8>)
 8002372:	6818      	ldr	r0, [r3, #0]
}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200039b0 	.word	0x200039b0

0800237c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff fff6 	bl	8002370 <HAL_GetTick>
 8002384:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002386:	f1b4 3fff 	cmp.w	r4, #4294967295
 800238a:	d002      	beq.n	8002392 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <HAL_Delay+0x24>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002392:	f7ff ffed 	bl	8002370 <HAL_GetTick>
 8002396:	1b40      	subs	r0, r0, r5
 8002398:	42a0      	cmp	r0, r4
 800239a:	d3fa      	bcc.n	8002392 <HAL_Delay+0x16>
  {
  }
}
 800239c:	bd38      	pop	{r3, r4, r5, pc}
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008

080023a4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023a4:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <ADC_Init+0x12c>)
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80023ac:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	6841      	ldr	r1, [r0, #4]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023b6:	6802      	ldr	r2, [r0, #0]
 80023b8:	6853      	ldr	r3, [r2, #4]
 80023ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023be:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023c0:	6802      	ldr	r2, [r0, #0]
 80023c2:	6853      	ldr	r3, [r2, #4]
 80023c4:	6901      	ldr	r1, [r0, #16]
 80023c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023ca:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023cc:	6802      	ldr	r2, [r0, #0]
 80023ce:	6853      	ldr	r3, [r2, #4]
 80023d0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80023d4:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023d6:	6802      	ldr	r2, [r0, #0]
 80023d8:	6853      	ldr	r3, [r2, #4]
 80023da:	6881      	ldr	r1, [r0, #8]
 80023dc:	430b      	orrs	r3, r1
 80023de:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023e0:	6802      	ldr	r2, [r0, #0]
 80023e2:	6893      	ldr	r3, [r2, #8]
 80023e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023e8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023ea:	6802      	ldr	r2, [r0, #0]
 80023ec:	6893      	ldr	r3, [r2, #8]
 80023ee:	68c1      	ldr	r1, [r0, #12]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023f4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80023f6:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <ADC_Init+0x130>)
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d057      	beq.n	80024ac <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023fc:	6802      	ldr	r2, [r0, #0]
 80023fe:	6893      	ldr	r3, [r2, #8]
 8002400:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002404:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002406:	6802      	ldr	r2, [r0, #0]
 8002408:	6893      	ldr	r3, [r2, #8]
 800240a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800240c:	430b      	orrs	r3, r1
 800240e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002410:	6802      	ldr	r2, [r0, #0]
 8002412:	6893      	ldr	r3, [r2, #8]
 8002414:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002418:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800241a:	6802      	ldr	r2, [r0, #0]
 800241c:	6893      	ldr	r3, [r2, #8]
 800241e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002420:	430b      	orrs	r3, r1
 8002422:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002424:	6802      	ldr	r2, [r0, #0]
 8002426:	6893      	ldr	r3, [r2, #8]
 8002428:	f023 0302 	bic.w	r3, r3, #2
 800242c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800242e:	6802      	ldr	r2, [r0, #0]
 8002430:	6893      	ldr	r3, [r2, #8]
 8002432:	7e01      	ldrb	r1, [r0, #24]
 8002434:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002438:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800243a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03f      	beq.n	80024c2 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002442:	6802      	ldr	r2, [r0, #0]
 8002444:	6853      	ldr	r3, [r2, #4]
 8002446:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800244a:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800244c:	6802      	ldr	r2, [r0, #0]
 800244e:	6853      	ldr	r3, [r2, #4]
 8002450:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002454:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002456:	6801      	ldr	r1, [r0, #0]
 8002458:	684b      	ldr	r3, [r1, #4]
 800245a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800245c:	3a01      	subs	r2, #1
 800245e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002462:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002464:	6802      	ldr	r2, [r0, #0]
 8002466:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002468:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800246c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800246e:	6801      	ldr	r1, [r0, #0]
 8002470:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002472:	69c2      	ldr	r2, [r0, #28]
 8002474:	3a01      	subs	r2, #1
 8002476:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800247a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800247c:	6802      	ldr	r2, [r0, #0]
 800247e:	6893      	ldr	r3, [r2, #8]
 8002480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002484:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002486:	6802      	ldr	r2, [r0, #0]
 8002488:	6893      	ldr	r3, [r2, #8]
 800248a:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800248e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002492:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002494:	6802      	ldr	r2, [r0, #0]
 8002496:	6893      	ldr	r3, [r2, #8]
 8002498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800249c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800249e:	6802      	ldr	r2, [r0, #0]
 80024a0:	6893      	ldr	r3, [r2, #8]
 80024a2:	6941      	ldr	r1, [r0, #20]
 80024a4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80024a8:	6093      	str	r3, [r2, #8]
}
 80024aa:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ac:	6802      	ldr	r2, [r0, #0]
 80024ae:	6893      	ldr	r3, [r2, #8]
 80024b0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80024b4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024b6:	6802      	ldr	r2, [r0, #0]
 80024b8:	6893      	ldr	r3, [r2, #8]
 80024ba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80024be:	6093      	str	r3, [r2, #8]
 80024c0:	e7b0      	b.n	8002424 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024c2:	6802      	ldr	r2, [r0, #0]
 80024c4:	6853      	ldr	r3, [r2, #4]
 80024c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024ca:	6053      	str	r3, [r2, #4]
 80024cc:	e7ca      	b.n	8002464 <ADC_Init+0xc0>
 80024ce:	bf00      	nop
 80024d0:	40012300 	.word	0x40012300
 80024d4:	0f000001 	.word	0x0f000001

080024d8 <HAL_ADC_Init>:
  if(hadc == NULL)
 80024d8:	b338      	cbz	r0, 800252a <HAL_ADC_Init+0x52>
{
 80024da:	b510      	push	{r4, lr}
 80024dc:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024e0:	b143      	cbz	r3, 80024f4 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024e4:	f013 0f10 	tst.w	r3, #16
 80024e8:	d00b      	beq.n	8002502 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80024ea:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80024ec:	2300      	movs	r3, #0
 80024ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80024f2:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80024f4:	f7ff fcae 	bl	8001e54 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80024f8:	2300      	movs	r3, #0
 80024fa:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80024fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002500:	e7ef      	b.n	80024e2 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8002502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002504:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002508:	f023 0302 	bic.w	r3, r3, #2
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8002512:	4620      	mov	r0, r4
 8002514:	f7ff ff46 	bl	80023a4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002518:	2000      	movs	r0, #0
 800251a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800251c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6423      	str	r3, [r4, #64]	; 0x40
 8002528:	e7e0      	b.n	80024ec <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800252a:	2001      	movs	r0, #1
}
 800252c:	4770      	bx	lr
	...

08002530 <HAL_ADC_ConfigChannel>:
{
 8002530:	b430      	push	{r4, r5}
 8002532:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002538:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800253c:	2b01      	cmp	r3, #1
 800253e:	f000 80bb 	beq.w	80026b8 <HAL_ADC_ConfigChannel+0x188>
 8002542:	2301      	movs	r3, #1
 8002544:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002548:	680b      	ldr	r3, [r1, #0]
 800254a:	2b09      	cmp	r3, #9
 800254c:	d941      	bls.n	80025d2 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800254e:	6804      	ldr	r4, [r0, #0]
 8002550:	68e2      	ldr	r2, [r4, #12]
 8002552:	b29b      	uxth	r3, r3
 8002554:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002558:	3b1e      	subs	r3, #30
 800255a:	f04f 0c07 	mov.w	ip, #7
 800255e:	fa0c f303 	lsl.w	r3, ip, r3
 8002562:	ea22 0303 	bic.w	r3, r2, r3
 8002566:	60e3      	str	r3, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002568:	6804      	ldr	r4, [r0, #0]
 800256a:	68e2      	ldr	r2, [r4, #12]
 800256c:	880b      	ldrh	r3, [r1, #0]
 800256e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002572:	3b1e      	subs	r3, #30
 8002574:	688d      	ldr	r5, [r1, #8]
 8002576:	fa05 f303 	lsl.w	r3, r5, r3
 800257a:	4313      	orrs	r3, r2
 800257c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800257e:	684b      	ldr	r3, [r1, #4]
 8002580:	2b06      	cmp	r3, #6
 8002582:	d83d      	bhi.n	8002600 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002584:	6804      	ldr	r4, [r0, #0]
 8002586:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002588:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800258c:	3b05      	subs	r3, #5
 800258e:	f04f 0c1f 	mov.w	ip, #31
 8002592:	fa0c f303 	lsl.w	r3, ip, r3
 8002596:	ea22 0303 	bic.w	r3, r2, r3
 800259a:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800259c:	6804      	ldr	r4, [r0, #0]
 800259e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80025a0:	684b      	ldr	r3, [r1, #4]
 80025a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025a6:	3b05      	subs	r3, #5
 80025a8:	f8b1 c000 	ldrh.w	ip, [r1]
 80025ac:	fa0c f303 	lsl.w	r3, ip, r3
 80025b0:	4313      	orrs	r3, r2
 80025b2:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025b4:	6802      	ldr	r2, [r0, #0]
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_ADC_ConfigChannel+0x18c>)
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d051      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025bc:	6802      	ldr	r2, [r0, #0]
 80025be:	4b3f      	ldr	r3, [pc, #252]	; (80026bc <HAL_ADC_ConfigChannel+0x18c>)
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d056      	beq.n	8002672 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 80025c4:	2300      	movs	r3, #0
 80025c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80025ca:	4618      	mov	r0, r3
}
 80025cc:	b002      	add	sp, #8
 80025ce:	bc30      	pop	{r4, r5}
 80025d0:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025d2:	6804      	ldr	r4, [r0, #0]
 80025d4:	6922      	ldr	r2, [r4, #16]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025dc:	f04f 0c07 	mov.w	ip, #7
 80025e0:	fa0c f303 	lsl.w	r3, ip, r3
 80025e4:	ea22 0303 	bic.w	r3, r2, r3
 80025e8:	6123      	str	r3, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025ea:	6804      	ldr	r4, [r0, #0]
 80025ec:	6922      	ldr	r2, [r4, #16]
 80025ee:	880b      	ldrh	r3, [r1, #0]
 80025f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025f4:	688d      	ldr	r5, [r1, #8]
 80025f6:	fa05 f303 	lsl.w	r3, r5, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	6123      	str	r3, [r4, #16]
 80025fe:	e7be      	b.n	800257e <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13U)
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d816      	bhi.n	8002632 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002604:	6805      	ldr	r5, [r0, #0]
 8002606:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002608:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800260c:	3b23      	subs	r3, #35	; 0x23
 800260e:	241f      	movs	r4, #31
 8002610:	fa04 f303 	lsl.w	r3, r4, r3
 8002614:	ea22 0303 	bic.w	r3, r2, r3
 8002618:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800261a:	6805      	ldr	r5, [r0, #0]
 800261c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800261e:	684b      	ldr	r3, [r1, #4]
 8002620:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002624:	3b23      	subs	r3, #35	; 0x23
 8002626:	880c      	ldrh	r4, [r1, #0]
 8002628:	fa04 f303 	lsl.w	r3, r4, r3
 800262c:	4313      	orrs	r3, r2
 800262e:	632b      	str	r3, [r5, #48]	; 0x30
 8002630:	e7c0      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002632:	6805      	ldr	r5, [r0, #0]
 8002634:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002636:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800263a:	3b41      	subs	r3, #65	; 0x41
 800263c:	241f      	movs	r4, #31
 800263e:	fa04 f303 	lsl.w	r3, r4, r3
 8002642:	ea22 0303 	bic.w	r3, r2, r3
 8002646:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002648:	6805      	ldr	r5, [r0, #0]
 800264a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800264c:	684b      	ldr	r3, [r1, #4]
 800264e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002652:	3b41      	subs	r3, #65	; 0x41
 8002654:	880c      	ldrh	r4, [r1, #0]
 8002656:	fa04 f303 	lsl.w	r3, r4, r3
 800265a:	4313      	orrs	r3, r2
 800265c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800265e:	e7a9      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x84>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002660:	680b      	ldr	r3, [r1, #0]
 8002662:	2b12      	cmp	r3, #18
 8002664:	d1aa      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x8c>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002666:	4a16      	ldr	r2, [pc, #88]	; (80026c0 <HAL_ADC_ConfigChannel+0x190>)
 8002668:	6853      	ldr	r3, [r2, #4]
 800266a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800266e:	6053      	str	r3, [r2, #4]
 8002670:	e7a4      	b.n	80025bc <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002672:	680b      	ldr	r3, [r1, #0]
 8002674:	3b10      	subs	r3, #16
 8002676:	2b01      	cmp	r3, #1
 8002678:	d8a4      	bhi.n	80025c4 <HAL_ADC_ConfigChannel+0x94>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800267a:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <HAL_ADC_ConfigChannel+0x190>)
 800267c:	6853      	ldr	r3, [r2, #4]
 800267e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002682:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002684:	680b      	ldr	r3, [r1, #0]
 8002686:	2b10      	cmp	r3, #16
 8002688:	d19c      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x94>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_ADC_ConfigChannel+0x194>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8002692:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8002696:	f202 3283 	addw	r2, r2, #899	; 0x383
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9b      	lsrs	r3, r3, #18
 80026a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x180>
        counter--;
 80026aa:	9b01      	ldr	r3, [sp, #4]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80026b0:	9b01      	ldr	r3, [sp, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f9      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x17a>
 80026b6:	e785      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x94>
  __HAL_LOCK(hadc);
 80026b8:	2002      	movs	r0, #2
 80026ba:	e787      	b.n	80025cc <HAL_ADC_ConfigChannel+0x9c>
 80026bc:	40012000 	.word	0x40012000
 80026c0:	40012300 	.word	0x40012300
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80026ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d4:	0200      	lsls	r0, r0, #8
 80026d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026da:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80026dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80026e4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ec:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_NVIC_SetPriority+0x68>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f6:	f1c3 0c07 	rsb	ip, r3, #7
 80026fa:	f1bc 0f04 	cmp.w	ip, #4
 80026fe:	bf28      	it	cs
 8002700:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002704:	f103 0e04 	add.w	lr, r3, #4
 8002708:	f1be 0f06 	cmp.w	lr, #6
 800270c:	d918      	bls.n	8002740 <HAL_NVIC_SetPriority+0x54>
 800270e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 3eff 	mov.w	lr, #4294967295
 8002714:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002718:	ea21 010c 	bic.w	r1, r1, ip
 800271c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271e:	fa0e f303 	lsl.w	r3, lr, r3
 8002722:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002726:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002728:	2800      	cmp	r0, #0
 800272a:	db0b      	blt.n	8002744 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	0109      	lsls	r1, r1, #4
 800272e:	b2c9      	uxtb	r1, r1
 8002730:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002734:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002738:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800273c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002740:	2300      	movs	r3, #0
 8002742:	e7e5      	b.n	8002710 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	f000 000f 	and.w	r0, r0, #15
 8002748:	0109      	lsls	r1, r1, #4
 800274a:	b2c9      	uxtb	r1, r1
 800274c:	4b02      	ldr	r3, [pc, #8]	; (8002758 <HAL_NVIC_SetPriority+0x6c>)
 800274e:	5419      	strb	r1, [r3, r0]
 8002750:	e7f4      	b.n	800273c <HAL_NVIC_SetPriority+0x50>
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00
 8002758:	e000ed14 	.word	0xe000ed14

0800275c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800275c:	2800      	cmp	r0, #0
 800275e:	db07      	blt.n	8002770 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002760:	f000 021f 	and.w	r2, r0, #31
 8002764:	0940      	lsrs	r0, r0, #5
 8002766:	2301      	movs	r3, #1
 8002768:	4093      	lsls	r3, r2
 800276a:	4a02      	ldr	r2, [pc, #8]	; (8002774 <HAL_NVIC_EnableIRQ+0x18>)
 800276c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000e100 	.word	0xe000e100

08002778 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002778:	3801      	subs	r0, #1
 800277a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800277e:	d20b      	bcs.n	8002798 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002780:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002784:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_SYSTICK_Config+0x24>)
 8002788:	21f0      	movs	r1, #240	; 0xf0
 800278a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800278e:	2000      	movs	r0, #0
 8002790:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	2207      	movs	r2, #7
 8002794:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002796:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002798:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027a0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a2:	6803      	ldr	r3, [r0, #0]
 80027a4:	b2d9      	uxtb	r1, r3
 80027a6:	3910      	subs	r1, #16
 80027a8:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <DMA_CalcBaseAndBitshift+0x3c>)
 80027aa:	fba2 4201 	umull	r4, r2, r2, r1
 80027ae:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027b0:	4c0b      	ldr	r4, [pc, #44]	; (80027e0 <DMA_CalcBaseAndBitshift+0x40>)
 80027b2:	5ca2      	ldrb	r2, [r4, r2]
 80027b4:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027b6:	295f      	cmp	r1, #95	; 0x5f
 80027b8:	d909      	bls.n	80027ce <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	3304      	adds	r3, #4
 80027c4:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80027c6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80027c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027cc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027d2:	f023 0303 	bic.w	r3, r3, #3
 80027d6:	6583      	str	r3, [r0, #88]	; 0x58
 80027d8:	e7f5      	b.n	80027c6 <DMA_CalcBaseAndBitshift+0x26>
 80027da:	bf00      	nop
 80027dc:	aaaaaaab 	.word	0xaaaaaaab
 80027e0:	0800a2dc 	.word	0x0800a2dc

080027e4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027e6:	6982      	ldr	r2, [r0, #24]
 80027e8:	b992      	cbnz	r2, 8002810 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d00a      	beq.n	8002804 <DMA_CheckFifoParam+0x20>
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d002      	beq.n	80027f8 <DMA_CheckFifoParam+0x14>
 80027f2:	b10b      	cbz	r3, 80027f8 <DMA_CheckFifoParam+0x14>
 80027f4:	2000      	movs	r0, #0
 80027f6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80027fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80027fe:	d128      	bne.n	8002852 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8002800:	2000      	movs	r0, #0
 8002802:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002804:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800280a:	d024      	beq.n	8002856 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	2000      	movs	r0, #0
 800280e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002810:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002814:	d009      	beq.n	800282a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002816:	2b02      	cmp	r3, #2
 8002818:	d925      	bls.n	8002866 <DMA_CheckFifoParam+0x82>
 800281a:	2b03      	cmp	r3, #3
 800281c:	d125      	bne.n	800286a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800281e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002820:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002824:	d123      	bne.n	800286e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2000      	movs	r0, #0
 8002828:	4770      	bx	lr
    switch (tmp)
 800282a:	2b03      	cmp	r3, #3
 800282c:	d803      	bhi.n	8002836 <DMA_CheckFifoParam+0x52>
 800282e:	e8df f003 	tbb	[pc, r3]
 8002832:	0414      	.short	0x0414
 8002834:	0a14      	.short	0x0a14
 8002836:	2000      	movs	r0, #0
 8002838:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800283c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002840:	d10d      	bne.n	800285e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2000      	movs	r0, #0
 8002844:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002846:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002848:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800284c:	d009      	beq.n	8002862 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800284e:	2000      	movs	r0, #0
 8002850:	4770      	bx	lr
        status = HAL_ERROR;
 8002852:	2001      	movs	r0, #1
 8002854:	4770      	bx	lr
        status = HAL_ERROR;
 8002856:	2001      	movs	r0, #1
 8002858:	4770      	bx	lr
      status = HAL_ERROR;
 800285a:	2001      	movs	r0, #1
 800285c:	4770      	bx	lr
        status = HAL_ERROR;
 800285e:	2001      	movs	r0, #1
 8002860:	4770      	bx	lr
        status = HAL_ERROR;
 8002862:	2001      	movs	r0, #1
 8002864:	4770      	bx	lr
      status = HAL_ERROR;
 8002866:	2001      	movs	r0, #1
 8002868:	4770      	bx	lr
    switch (tmp)
 800286a:	2000      	movs	r0, #0
 800286c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800286e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002870:	4770      	bx	lr
	...

08002874 <HAL_DMA_Init>:
{
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7ff fd7a 	bl	8002370 <HAL_GetTick>
  if(hdma == NULL)
 800287c:	2c00      	cmp	r4, #0
 800287e:	d05b      	beq.n	8002938 <HAL_DMA_Init+0xc4>
 8002880:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002882:	2302      	movs	r3, #2
 8002884:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002888:	2300      	movs	r3, #0
 800288a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800288e:	6822      	ldr	r2, [r4, #0]
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	f012 0f01 	tst.w	r2, #1
 80028a0:	d00a      	beq.n	80028b8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028a2:	f7ff fd65 	bl	8002370 <HAL_GetTick>
 80028a6:	1b43      	subs	r3, r0, r5
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d9f5      	bls.n	8002898 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ac:	2320      	movs	r3, #32
 80028ae:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028b0:	2003      	movs	r0, #3
 80028b2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80028b6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80028b8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028ba:	4820      	ldr	r0, [pc, #128]	; (800293c <HAL_DMA_Init+0xc8>)
 80028bc:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028be:	6861      	ldr	r1, [r4, #4]
 80028c0:	68a2      	ldr	r2, [r4, #8]
 80028c2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c8:	6921      	ldr	r1, [r4, #16]
 80028ca:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028cc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ce:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d0:	69a1      	ldr	r1, [r4, #24]
 80028d2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d8:	6a21      	ldr	r1, [r4, #32]
 80028da:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028dc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028e0:	2904      	cmp	r1, #4
 80028e2:	d01e      	beq.n	8002922 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80028e4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80028e6:	6826      	ldr	r6, [r4, #0]
 80028e8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028ea:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80028ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028f0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d107      	bne.n	8002906 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80028f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028f8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028fc:	b11b      	cbz	r3, 8002906 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff ff70 	bl	80027e4 <DMA_CheckFifoParam>
 8002904:	b990      	cbnz	r0, 800292c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002906:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002908:	4620      	mov	r0, r4
 800290a:	f7ff ff49 	bl	80027a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002910:	233f      	movs	r3, #63	; 0x3f
 8002912:	4093      	lsls	r3, r2
 8002914:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002916:	2000      	movs	r0, #0
 8002918:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800291a:	2301      	movs	r3, #1
 800291c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002920:	e7c9      	b.n	80028b6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002922:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002924:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002926:	4301      	orrs	r1, r0
 8002928:	430a      	orrs	r2, r1
 800292a:	e7db      	b.n	80028e4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800292c:	2340      	movs	r3, #64	; 0x40
 800292e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002930:	2001      	movs	r0, #1
 8002932:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002936:	e7be      	b.n	80028b6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002938:	2001      	movs	r0, #1
 800293a:	e7bc      	b.n	80028b6 <HAL_DMA_Init+0x42>
 800293c:	f010803f 	.word	0xf010803f

08002940 <HAL_DMA_IRQHandler>:
{
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	b083      	sub	sp, #12
 8002944:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800294a:	4b72      	ldr	r3, [pc, #456]	; (8002b14 <HAL_DMA_IRQHandler+0x1d4>)
 800294c:	681d      	ldr	r5, [r3, #0]
 800294e:	4b72      	ldr	r3, [pc, #456]	; (8002b18 <HAL_DMA_IRQHandler+0x1d8>)
 8002950:	fba3 3505 	umull	r3, r5, r3, r5
 8002954:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002958:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800295a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800295c:	2308      	movs	r3, #8
 800295e:	4093      	lsls	r3, r2
 8002960:	4233      	tst	r3, r6
 8002962:	d010      	beq.n	8002986 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002964:	6803      	ldr	r3, [r0, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	f012 0f04 	tst.w	r2, #4
 800296c:	d00b      	beq.n	8002986 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	f022 0204 	bic.w	r2, r2, #4
 8002974:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002976:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002978:	2308      	movs	r3, #8
 800297a:	4093      	lsls	r3, r2
 800297c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800297e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002986:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002988:	2301      	movs	r3, #1
 800298a:	4093      	lsls	r3, r2
 800298c:	4233      	tst	r3, r6
 800298e:	d009      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	6952      	ldr	r2, [r2, #20]
 8002994:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002998:	d004      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800299a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800299c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800299e:	f043 0302 	orr.w	r3, r3, #2
 80029a2:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80029a6:	2304      	movs	r3, #4
 80029a8:	4093      	lsls	r3, r2
 80029aa:	4233      	tst	r3, r6
 80029ac:	d009      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ae:	6822      	ldr	r2, [r4, #0]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	f012 0f02 	tst.w	r2, #2
 80029b6:	d004      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029b8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80029c4:	2310      	movs	r3, #16
 80029c6:	4093      	lsls	r3, r2
 80029c8:	4233      	tst	r3, r6
 80029ca:	d024      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029cc:	6822      	ldr	r2, [r4, #0]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	f012 0f08 	tst.w	r2, #8
 80029d4:	d01f      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029d6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80029e0:	d00d      	beq.n	80029fe <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80029e8:	d104      	bne.n	80029f4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80029ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029ec:	b19b      	cbz	r3, 8002a16 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80029ee:	4620      	mov	r0, r4
 80029f0:	4798      	blx	r3
 80029f2:	e010      	b.n	8002a16 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029f6:	b173      	cbz	r3, 8002a16 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80029f8:	4620      	mov	r0, r4
 80029fa:	4798      	blx	r3
 80029fc:	e00b      	b.n	8002a16 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002a04:	d103      	bne.n	8002a0e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	f022 0208 	bic.w	r2, r2, #8
 8002a0c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a10:	b10b      	cbz	r3, 8002a16 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002a12:	4620      	mov	r0, r4
 8002a14:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a16:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002a18:	2320      	movs	r3, #32
 8002a1a:	4093      	lsls	r3, r2
 8002a1c:	4233      	tst	r3, r6
 8002a1e:	d055      	beq.n	8002acc <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	f012 0f10 	tst.w	r2, #16
 8002a28:	d050      	beq.n	8002acc <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a2a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a2c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d00e      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002a3e:	d033      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002a46:	d12a      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002a48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d03e      	beq.n	8002acc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4798      	blx	r3
 8002a52:	e03b      	b.n	8002acc <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a54:	6822      	ldr	r2, [r4, #0]
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	f023 0316 	bic.w	r3, r3, #22
 8002a5c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	6953      	ldr	r3, [r2, #20]
 8002a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a66:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a6a:	b1a3      	cbz	r3, 8002a96 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a6c:	6822      	ldr	r2, [r4, #0]
 8002a6e:	6813      	ldr	r3, [r2, #0]
 8002a70:	f023 0308 	bic.w	r3, r3, #8
 8002a74:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002a78:	233f      	movs	r3, #63	; 0x3f
 8002a7a:	4093      	lsls	r3, r2
 8002a7c:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002a84:	2300      	movs	r3, #0
 8002a86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002a8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d03f      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002a90:	4620      	mov	r0, r4
 8002a92:	4798      	blx	r3
        return;
 8002a94:	e03c      	b.n	8002b10 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e7      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x12c>
 8002a9c:	e7eb      	b.n	8002a76 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002a9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002aa0:	b1a3      	cbz	r3, 8002acc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	4798      	blx	r3
 8002aa6:	e011      	b.n	8002acc <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002aae:	d109      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f022 0210 	bic.w	r2, r2, #16
 8002ab6:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002ac4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ac6:	b10b      	cbz	r3, 8002acc <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002ac8:	4620      	mov	r0, r4
 8002aca:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002acc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ace:	b1fb      	cbz	r3, 8002b10 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ad0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ad2:	f013 0f01 	tst.w	r3, #1
 8002ad6:	d017      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ad8:	2305      	movs	r3, #5
 8002ada:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002ade:	6822      	ldr	r2, [r4, #0]
 8002ae0:	6813      	ldr	r3, [r2, #0]
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002ae8:	9b01      	ldr	r3, [sp, #4]
 8002aea:	3301      	adds	r3, #1
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	42ab      	cmp	r3, r5
 8002af0:	d804      	bhi.n	8002afc <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f013 0f01 	tst.w	r3, #1
 8002afa:	d1f5      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002b02:	2300      	movs	r3, #0
 8002b04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002b08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b0a:	b10b      	cbz	r3, 8002b10 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4798      	blx	r3
}
 8002b10:	b003      	add	sp, #12
 8002b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b14:	20000004 	.word	0x20000004
 8002b18:	1b4e81b5 	.word	0x1b4e81b5

08002b1c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	f200 80d2 	bhi.w	8002cc8 <HAL_GPIO_Init+0x1ac>
{
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	e060      	b.n	8002bec <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b2c:	005e      	lsls	r6, r3, #1
 8002b2e:	2403      	movs	r4, #3
 8002b30:	40b4      	lsls	r4, r6
 8002b32:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b36:	68cc      	ldr	r4, [r1, #12]
 8002b38:	40b4      	lsls	r4, r6
 8002b3a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002b3c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b40:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b44:	684c      	ldr	r4, [r1, #4]
 8002b46:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8002b4e:	6042      	str	r2, [r0, #4]
 8002b50:	e05a      	b.n	8002c08 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b52:	08dc      	lsrs	r4, r3, #3
 8002b54:	3408      	adds	r4, #8
 8002b56:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b5a:	f003 0207 	and.w	r2, r3, #7
 8002b5e:	0095      	lsls	r5, r2, #2
 8002b60:	220f      	movs	r2, #15
 8002b62:	40aa      	lsls	r2, r5
 8002b64:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b68:	690a      	ldr	r2, [r1, #16]
 8002b6a:	40aa      	lsls	r2, r5
 8002b6c:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002b70:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002b74:	e05c      	b.n	8002c30 <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	2204      	movs	r2, #4
 8002b78:	e000      	b.n	8002b7c <HAL_GPIO_Init+0x60>
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002b80:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b82:	3402      	adds	r4, #2
 8002b84:	4d51      	ldr	r5, [pc, #324]	; (8002ccc <HAL_GPIO_Init+0x1b0>)
 8002b86:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8a:	4a51      	ldr	r2, [pc, #324]	; (8002cd0 <HAL_GPIO_Init+0x1b4>)
 8002b8c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002b8e:	ea6f 020c 	mvn.w	r2, ip
 8002b92:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b96:	684e      	ldr	r6, [r1, #4]
 8002b98:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8002b9c:	d001      	beq.n	8002ba2 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8002b9e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002ba2:	4c4b      	ldr	r4, [pc, #300]	; (8002cd0 <HAL_GPIO_Init+0x1b4>)
 8002ba4:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002ba6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bac:	684e      	ldr	r6, [r1, #4]
 8002bae:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002bb2:	d001      	beq.n	8002bb8 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8002bb4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002bb8:	4c45      	ldr	r4, [pc, #276]	; (8002cd0 <HAL_GPIO_Init+0x1b4>)
 8002bba:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002bbc:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc2:	684e      	ldr	r6, [r1, #4]
 8002bc4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8002bc8:	d001      	beq.n	8002bce <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8002bca:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002bce:	4c40      	ldr	r4, [pc, #256]	; (8002cd0 <HAL_GPIO_Init+0x1b4>)
 8002bd0:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd2:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd6:	684d      	ldr	r5, [r1, #4]
 8002bd8:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8002bdc:	d001      	beq.n	8002be2 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8002bde:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8002be2:	4c3b      	ldr	r4, [pc, #236]	; (8002cd0 <HAL_GPIO_Init+0x1b4>)
 8002be4:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be6:	3301      	adds	r3, #1
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d86b      	bhi.n	8002cc4 <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8002bec:	2201      	movs	r2, #1
 8002bee:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf0:	680c      	ldr	r4, [r1, #0]
 8002bf2:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002bf6:	ea32 0404 	bics.w	r4, r2, r4
 8002bfa:	d1f4      	bne.n	8002be6 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfc:	684c      	ldr	r4, [r1, #4]
 8002bfe:	f004 0403 	and.w	r4, r4, #3
 8002c02:	3c01      	subs	r4, #1
 8002c04:	2c01      	cmp	r4, #1
 8002c06:	d990      	bls.n	8002b2a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c08:	684a      	ldr	r2, [r1, #4]
 8002c0a:	f002 0203 	and.w	r2, r2, #3
 8002c0e:	2a03      	cmp	r2, #3
 8002c10:	d009      	beq.n	8002c26 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 8002c12:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c14:	005d      	lsls	r5, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	40aa      	lsls	r2, r5
 8002c1a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c1e:	688a      	ldr	r2, [r1, #8]
 8002c20:	40aa      	lsls	r2, r5
 8002c22:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002c24:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c26:	684a      	ldr	r2, [r1, #4]
 8002c28:	f002 0203 	and.w	r2, r2, #3
 8002c2c:	2a02      	cmp	r2, #2
 8002c2e:	d090      	beq.n	8002b52 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8002c30:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c32:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f20e 	lsl.w	r2, r2, lr
 8002c3c:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c40:	684a      	ldr	r2, [r1, #4]
 8002c42:	f002 0203 	and.w	r2, r2, #3
 8002c46:	fa02 f20e 	lsl.w	r2, r2, lr
 8002c4a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002c4c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c4e:	684a      	ldr	r2, [r1, #4]
 8002c50:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8002c54:	d0c7      	beq.n	8002be6 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	2200      	movs	r2, #0
 8002c58:	9201      	str	r2, [sp, #4]
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <HAL_GPIO_Init+0x1b8>)
 8002c5c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002c5e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002c62:	6454      	str	r4, [r2, #68]	; 0x44
 8002c64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c66:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002c6a:	9201      	str	r2, [sp, #4]
 8002c6c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6e:	089c      	lsrs	r4, r3, #2
 8002c70:	1ca5      	adds	r5, r4, #2
 8002c72:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_GPIO_Init+0x1b0>)
 8002c74:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c78:	f003 0203 	and.w	r2, r3, #3
 8002c7c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f20e 	lsl.w	r2, r2, lr
 8002c86:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c8a:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <HAL_GPIO_Init+0x1bc>)
 8002c8c:	4290      	cmp	r0, r2
 8002c8e:	f43f af74 	beq.w	8002b7a <HAL_GPIO_Init+0x5e>
 8002c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c96:	4290      	cmp	r0, r2
 8002c98:	d00e      	beq.n	8002cb8 <HAL_GPIO_Init+0x19c>
 8002c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c9e:	4290      	cmp	r0, r2
 8002ca0:	d00c      	beq.n	8002cbc <HAL_GPIO_Init+0x1a0>
 8002ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ca6:	4290      	cmp	r0, r2
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_GPIO_Init+0x1a4>
 8002caa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cae:	4290      	cmp	r0, r2
 8002cb0:	f43f af61 	beq.w	8002b76 <HAL_GPIO_Init+0x5a>
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	e761      	b.n	8002b7c <HAL_GPIO_Init+0x60>
 8002cb8:	2201      	movs	r2, #1
 8002cba:	e75f      	b.n	8002b7c <HAL_GPIO_Init+0x60>
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	e75d      	b.n	8002b7c <HAL_GPIO_Init+0x60>
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	e75b      	b.n	8002b7c <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40013800 	.word	0x40013800
 8002cd0:	40013c00 	.word	0x40013c00
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020000 	.word	0x40020000

08002cdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	b10a      	cbz	r2, 8002ce2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cde:	6181      	str	r1, [r0, #24]
 8002ce0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ce2:	0409      	lsls	r1, r1, #16
 8002ce4:	6181      	str	r1, [r0, #24]
  }
}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	f000 80cc 	beq.w	8002e86 <HAL_I2C_Init+0x19e>
{
 8002cee:	b570      	push	{r4, r5, r6, lr}
 8002cf0:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cf2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d077      	beq.n	8002dea <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cfa:	2324      	movs	r3, #36	; 0x24
 8002cfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d00:	6822      	ldr	r2, [r4, #0]
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	6813      	ldr	r3, [r2, #0]
 8002d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d12:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	6813      	ldr	r3, [r2, #0]
 8002d18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d1e:	f000 fbdd 	bl	80034dc <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d22:	6862      	ldr	r2, [r4, #4]
 8002d24:	4b5a      	ldr	r3, [pc, #360]	; (8002e90 <HAL_I2C_Init+0x1a8>)
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d864      	bhi.n	8002df4 <HAL_I2C_Init+0x10c>
 8002d2a:	4b5a      	ldr	r3, [pc, #360]	; (8002e94 <HAL_I2C_Init+0x1ac>)
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	bf8c      	ite	hi
 8002d30:	2300      	movhi	r3, #0
 8002d32:	2301      	movls	r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f040 80a8 	bne.w	8002e8a <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d3a:	4957      	ldr	r1, [pc, #348]	; (8002e98 <HAL_I2C_Init+0x1b0>)
 8002d3c:	fba1 3100 	umull	r3, r1, r1, r0
 8002d40:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d42:	6825      	ldr	r5, [r4, #0]
 8002d44:	686a      	ldr	r2, [r5, #4]
 8002d46:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d4a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002d4e:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d50:	6821      	ldr	r1, [r4, #0]
 8002d52:	6a0a      	ldr	r2, [r1, #32]
 8002d54:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d58:	6866      	ldr	r6, [r4, #4]
 8002d5a:	4d4d      	ldr	r5, [pc, #308]	; (8002e90 <HAL_I2C_Init+0x1a8>)
 8002d5c:	42ae      	cmp	r6, r5
 8002d5e:	d84f      	bhi.n	8002e00 <HAL_I2C_Init+0x118>
 8002d60:	3301      	adds	r3, #1
 8002d62:	4313      	orrs	r3, r2
 8002d64:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d66:	6821      	ldr	r1, [r4, #0]
 8002d68:	69ca      	ldr	r2, [r1, #28]
 8002d6a:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8002d6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d72:	6866      	ldr	r6, [r4, #4]
 8002d74:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <HAL_I2C_Init+0x1a8>)
 8002d76:	429e      	cmp	r6, r3
 8002d78:	d84c      	bhi.n	8002e14 <HAL_I2C_Init+0x12c>
 8002d7a:	1e43      	subs	r3, r0, #1
 8002d7c:	0076      	lsls	r6, r6, #1
 8002d7e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002d82:	3301      	adds	r3, #1
 8002d84:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002d88:	4203      	tst	r3, r0
 8002d8a:	d078      	beq.n	8002e7e <HAL_I2C_Init+0x196>
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d94:	6821      	ldr	r1, [r4, #0]
 8002d96:	680b      	ldr	r3, [r1, #0]
 8002d98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d9c:	69e2      	ldr	r2, [r4, #28]
 8002d9e:	6a20      	ldr	r0, [r4, #32]
 8002da0:	4302      	orrs	r2, r0
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da6:	6821      	ldr	r1, [r4, #0]
 8002da8:	688b      	ldr	r3, [r1, #8]
 8002daa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002db2:	6922      	ldr	r2, [r4, #16]
 8002db4:	68e0      	ldr	r0, [r4, #12]
 8002db6:	4302      	orrs	r2, r0
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dbc:	6821      	ldr	r1, [r4, #0]
 8002dbe:	68cb      	ldr	r3, [r1, #12]
 8002dc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dc4:	6962      	ldr	r2, [r4, #20]
 8002dc6:	69a0      	ldr	r0, [r4, #24]
 8002dc8:	4302      	orrs	r2, r0
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dce:	6822      	ldr	r2, [r4, #0]
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	2000      	movs	r0, #0
 8002dda:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002dea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002dee:	f7ff f877 	bl	8001ee0 <HAL_I2C_MspInit>
 8002df2:	e782      	b.n	8002cfa <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002df4:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <HAL_I2C_Init+0x1b4>)
 8002df6:	4298      	cmp	r0, r3
 8002df8:	bf8c      	ite	hi
 8002dfa:	2300      	movhi	r3, #0
 8002dfc:	2301      	movls	r3, #1
 8002dfe:	e799      	b.n	8002d34 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e00:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8002e04:	fb05 f303 	mul.w	r3, r5, r3
 8002e08:	4d25      	ldr	r5, [pc, #148]	; (8002ea0 <HAL_I2C_Init+0x1b8>)
 8002e0a:	fba5 5303 	umull	r5, r3, r5, r3
 8002e0e:	099b      	lsrs	r3, r3, #6
 8002e10:	3301      	adds	r3, #1
 8002e12:	e7a6      	b.n	8002d62 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e14:	68a3      	ldr	r3, [r4, #8]
 8002e16:	b9bb      	cbnz	r3, 8002e48 <HAL_I2C_Init+0x160>
 8002e18:	1e45      	subs	r5, r0, #1
 8002e1a:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8002e1e:	fbb5 f5fc 	udiv	r5, r5, ip
 8002e22:	3501      	adds	r5, #1
 8002e24:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8002e28:	fab5 f585 	clz	r5, r5
 8002e2c:	096d      	lsrs	r5, r5, #5
 8002e2e:	bb45      	cbnz	r5, 8002e82 <HAL_I2C_Init+0x19a>
 8002e30:	b9c3      	cbnz	r3, 8002e64 <HAL_I2C_Init+0x17c>
 8002e32:	3801      	subs	r0, #1
 8002e34:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e46:	e7a3      	b.n	8002d90 <HAL_I2C_Init+0xa8>
 8002e48:	1e45      	subs	r5, r0, #1
 8002e4a:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
 8002e4e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002e52:	fbb5 f5fc 	udiv	r5, r5, ip
 8002e56:	3501      	adds	r5, #1
 8002e58:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8002e5c:	fab5 f585 	clz	r5, r5
 8002e60:	096d      	lsrs	r5, r5, #5
 8002e62:	e7e4      	b.n	8002e2e <HAL_I2C_Init+0x146>
 8002e64:	3801      	subs	r0, #1
 8002e66:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8002e6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e7c:	e788      	b.n	8002d90 <HAL_I2C_Init+0xa8>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e786      	b.n	8002d90 <HAL_I2C_Init+0xa8>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e784      	b.n	8002d90 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8002e86:	2001      	movs	r0, #1
}
 8002e88:	4770      	bx	lr
    return HAL_ERROR;
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	e7ac      	b.n	8002de8 <HAL_I2C_Init+0x100>
 8002e8e:	bf00      	nop
 8002e90:	000186a0 	.word	0x000186a0
 8002e94:	001e847f 	.word	0x001e847f
 8002e98:	431bde83 	.word	0x431bde83
 8002e9c:	003d08ff 	.word	0x003d08ff
 8002ea0:	10624dd3 	.word	0x10624dd3

08002ea4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	f000 81e0 	beq.w	800326a <HAL_RCC_OscConfig+0x3c6>
{
 8002eaa:	b570      	push	{r4, r5, r6, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb0:	6803      	ldr	r3, [r0, #0]
 8002eb2:	f013 0f01 	tst.w	r3, #1
 8002eb6:	d03b      	beq.n	8002f30 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb8:	4b9f      	ldr	r3, [pc, #636]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d02c      	beq.n	8002f1e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec4:	4b9c      	ldr	r3, [pc, #624]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d021      	beq.n	8002f14 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	6863      	ldr	r3, [r4, #4]
 8002ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed6:	d04f      	beq.n	8002f78 <HAL_RCC_OscConfig+0xd4>
 8002ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002edc:	d052      	beq.n	8002f84 <HAL_RCC_OscConfig+0xe0>
 8002ede:	4b96      	ldr	r3, [pc, #600]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002eee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef0:	6863      	ldr	r3, [r4, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d050      	beq.n	8002f98 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7ff fa3b 	bl	8002370 <HAL_GetTick>
 8002efa:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efc:	4b8e      	ldr	r3, [pc, #568]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f04:	d114      	bne.n	8002f30 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f06:	f7ff fa33 	bl	8002370 <HAL_GetTick>
 8002f0a:	1b40      	subs	r0, r0, r5
 8002f0c:	2864      	cmp	r0, #100	; 0x64
 8002f0e:	d9f5      	bls.n	8002efc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002f10:	2003      	movs	r0, #3
 8002f12:	e1b1      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f14:	4b88      	ldr	r3, [pc, #544]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002f1c:	d0d8      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1e:	4b86      	ldr	r3, [pc, #536]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f26:	d003      	beq.n	8002f30 <HAL_RCC_OscConfig+0x8c>
 8002f28:	6863      	ldr	r3, [r4, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 819f 	beq.w	800326e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	f013 0f02 	tst.w	r3, #2
 8002f36:	d054      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f38:	4b7f      	ldr	r3, [pc, #508]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f013 0f0c 	tst.w	r3, #12
 8002f40:	d03e      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f42:	4b7d      	ldr	r3, [pc, #500]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d033      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f4e:	68e3      	ldr	r3, [r4, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d068      	beq.n	8003026 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f54:	4b79      	ldr	r3, [pc, #484]	; (800313c <HAL_RCC_OscConfig+0x298>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7ff fa09 	bl	8002370 <HAL_GetTick>
 8002f5e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	4b75      	ldr	r3, [pc, #468]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f013 0f02 	tst.w	r3, #2
 8002f68:	d154      	bne.n	8003014 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f6a:	f7ff fa01 	bl	8002370 <HAL_GetTick>
 8002f6e:	1b40      	subs	r0, r0, r5
 8002f70:	2802      	cmp	r0, #2
 8002f72:	d9f5      	bls.n	8002f60 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002f74:	2003      	movs	r0, #3
 8002f76:	e17f      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f78:	4a6f      	ldr	r2, [pc, #444]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002f7a:	6813      	ldr	r3, [r2, #0]
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e7b5      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4c>
 8002f84:	4b6c      	ldr	r3, [pc, #432]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e7ab      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002f98:	f7ff f9ea 	bl	8002370 <HAL_GetTick>
 8002f9c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	4b66      	ldr	r3, [pc, #408]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002fa6:	d0c3      	beq.n	8002f30 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7ff f9e2 	bl	8002370 <HAL_GetTick>
 8002fac:	1b40      	subs	r0, r0, r5
 8002fae:	2864      	cmp	r0, #100	; 0x64
 8002fb0:	d9f5      	bls.n	8002f9e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002fb2:	2003      	movs	r0, #3
 8002fb4:	e160      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb6:	4b60      	ldr	r3, [pc, #384]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002fbe:	d1c6      	bne.n	8002f4e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc0:	4b5d      	ldr	r3, [pc, #372]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f013 0f02 	tst.w	r3, #2
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x12e>
 8002fca:	68e3      	ldr	r3, [r4, #12]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	f040 8150 	bne.w	8003272 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	4a59      	ldr	r2, [pc, #356]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002fd4:	6813      	ldr	r3, [r2, #0]
 8002fd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002fda:	6921      	ldr	r1, [r4, #16]
 8002fdc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002fe0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	f013 0f08 	tst.w	r3, #8
 8002fe8:	d042      	beq.n	8003070 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fea:	6963      	ldr	r3, [r4, #20]
 8002fec:	b36b      	cbz	r3, 800304a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fee:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_OscConfig+0x298>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7ff f9bb 	bl	8002370 <HAL_GetTick>
 8002ffa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffc:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8002ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003000:	f013 0f02 	tst.w	r3, #2
 8003004:	d134      	bne.n	8003070 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003006:	f7ff f9b3 	bl	8002370 <HAL_GetTick>
 800300a:	1b40      	subs	r0, r0, r5
 800300c:	2802      	cmp	r0, #2
 800300e:	d9f5      	bls.n	8002ffc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003010:	2003      	movs	r0, #3
 8003012:	e131      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	4a48      	ldr	r2, [pc, #288]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8003016:	6813      	ldr	r3, [r2, #0]
 8003018:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800301c:	6921      	ldr	r1, [r4, #16]
 800301e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	e7dd      	b.n	8002fe2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8003026:	4b45      	ldr	r3, [pc, #276]	; (800313c <HAL_RCC_OscConfig+0x298>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800302c:	f7ff f9a0 	bl	8002370 <HAL_GetTick>
 8003030:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f013 0f02 	tst.w	r3, #2
 800303a:	d0d2      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303c:	f7ff f998 	bl	8002370 <HAL_GetTick>
 8003040:	1b40      	subs	r0, r0, r5
 8003042:	2802      	cmp	r0, #2
 8003044:	d9f5      	bls.n	8003032 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003046:	2003      	movs	r0, #3
 8003048:	e116      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304a:	4b3c      	ldr	r3, [pc, #240]	; (800313c <HAL_RCC_OscConfig+0x298>)
 800304c:	2200      	movs	r2, #0
 800304e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7ff f98d 	bl	8002370 <HAL_GetTick>
 8003056:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003058:	4b37      	ldr	r3, [pc, #220]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 800305a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305c:	f013 0f02 	tst.w	r3, #2
 8003060:	d006      	beq.n	8003070 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003062:	f7ff f985 	bl	8002370 <HAL_GetTick>
 8003066:	1b40      	subs	r0, r0, r5
 8003068:	2802      	cmp	r0, #2
 800306a:	d9f5      	bls.n	8003058 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 800306c:	2003      	movs	r0, #3
 800306e:	e103      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	f013 0f04 	tst.w	r3, #4
 8003076:	d077      	beq.n	8003168 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003078:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003080:	d133      	bne.n	80030ea <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8003088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800309a:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <HAL_RCC_OscConfig+0x29c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030a4:	d023      	beq.n	80030ee <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a6:	68a3      	ldr	r3, [r4, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d034      	beq.n	8003116 <HAL_RCC_OscConfig+0x272>
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d038      	beq.n	8003122 <HAL_RCC_OscConfig+0x27e>
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 80030b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	671a      	str	r2, [r3, #112]	; 0x70
 80030ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030bc:	f022 0204 	bic.w	r2, r2, #4
 80030c0:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c2:	68a3      	ldr	r3, [r4, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d03d      	beq.n	8003144 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7ff f952 	bl	8002370 <HAL_GetTick>
 80030cc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	f013 0f02 	tst.w	r3, #2
 80030d6:	d146      	bne.n	8003166 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7ff f94a 	bl	8002370 <HAL_GetTick>
 80030dc:	1b80      	subs	r0, r0, r6
 80030de:	f241 3388 	movw	r3, #5000	; 0x1388
 80030e2:	4298      	cmp	r0, r3
 80030e4:	d9f3      	bls.n	80030ce <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80030e6:	2003      	movs	r0, #3
 80030e8:	e0c6      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	2500      	movs	r5, #0
 80030ec:	e7d6      	b.n	800309c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ee:	4a14      	ldr	r2, [pc, #80]	; (8003140 <HAL_RCC_OscConfig+0x29c>)
 80030f0:	6813      	ldr	r3, [r2, #0]
 80030f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80030f8:	f7ff f93a 	bl	8002370 <HAL_GetTick>
 80030fc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fe:	4b10      	ldr	r3, [pc, #64]	; (8003140 <HAL_RCC_OscConfig+0x29c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003106:	d1ce      	bne.n	80030a6 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003108:	f7ff f932 	bl	8002370 <HAL_GetTick>
 800310c:	1b80      	subs	r0, r0, r6
 800310e:	2802      	cmp	r0, #2
 8003110:	d9f5      	bls.n	80030fe <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8003112:	2003      	movs	r0, #3
 8003114:	e0b0      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8003118:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	e7cf      	b.n	80030c2 <HAL_RCC_OscConfig+0x21e>
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_OscConfig+0x294>)
 8003124:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003126:	f042 0204 	orr.w	r2, r2, #4
 800312a:	671a      	str	r2, [r3, #112]	; 0x70
 800312c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	671a      	str	r2, [r3, #112]	; 0x70
 8003134:	e7c5      	b.n	80030c2 <HAL_RCC_OscConfig+0x21e>
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	42470000 	.word	0x42470000
 8003140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003144:	f7ff f914 	bl	8002370 <HAL_GetTick>
 8003148:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314a:	4b52      	ldr	r3, [pc, #328]	; (8003294 <HAL_RCC_OscConfig+0x3f0>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	f013 0f02 	tst.w	r3, #2
 8003152:	d008      	beq.n	8003166 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7ff f90c 	bl	8002370 <HAL_GetTick>
 8003158:	1b80      	subs	r0, r0, r6
 800315a:	f241 3388 	movw	r3, #5000	; 0x1388
 800315e:	4298      	cmp	r0, r3
 8003160:	d9f3      	bls.n	800314a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8003162:	2003      	movs	r0, #3
 8003164:	e088      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003166:	b9ed      	cbnz	r5, 80031a4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003168:	69a3      	ldr	r3, [r4, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8083 	beq.w	8003276 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003170:	4a48      	ldr	r2, [pc, #288]	; (8003294 <HAL_RCC_OscConfig+0x3f0>)
 8003172:	6892      	ldr	r2, [r2, #8]
 8003174:	f002 020c 	and.w	r2, r2, #12
 8003178:	2a08      	cmp	r2, #8
 800317a:	d051      	beq.n	8003220 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317c:	2b02      	cmp	r3, #2
 800317e:	d017      	beq.n	80031b0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003180:	4b45      	ldr	r3, [pc, #276]	; (8003298 <HAL_RCC_OscConfig+0x3f4>)
 8003182:	2200      	movs	r2, #0
 8003184:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7ff f8f3 	bl	8002370 <HAL_GetTick>
 800318a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318c:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCC_OscConfig+0x3f0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003194:	d042      	beq.n	800321c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003196:	f7ff f8eb 	bl	8002370 <HAL_GetTick>
 800319a:	1b00      	subs	r0, r0, r4
 800319c:	2802      	cmp	r0, #2
 800319e:	d9f5      	bls.n	800318c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80031a0:	2003      	movs	r0, #3
 80031a2:	e069      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a4:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x3f0>)
 80031a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	e7db      	b.n	8003168 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80031b0:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_OscConfig+0x3f4>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80031b6:	f7ff f8db 	bl	8002370 <HAL_GetTick>
 80031ba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <HAL_RCC_OscConfig+0x3f0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80031c4:	d006      	beq.n	80031d4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c6:	f7ff f8d3 	bl	8002370 <HAL_GetTick>
 80031ca:	1b40      	subs	r0, r0, r5
 80031cc:	2802      	cmp	r0, #2
 80031ce:	d9f5      	bls.n	80031bc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80031d0:	2003      	movs	r0, #3
 80031d2:	e051      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d4:	69e3      	ldr	r3, [r4, #28]
 80031d6:	6a22      	ldr	r2, [r4, #32]
 80031d8:	4313      	orrs	r3, r2
 80031da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031dc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80031e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80031e2:	0852      	lsrs	r2, r2, #1
 80031e4:	3a01      	subs	r2, #1
 80031e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80031f0:	4a28      	ldr	r2, [pc, #160]	; (8003294 <HAL_RCC_OscConfig+0x3f0>)
 80031f2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80031f4:	4b28      	ldr	r3, [pc, #160]	; (8003298 <HAL_RCC_OscConfig+0x3f4>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80031fa:	f7ff f8b9 	bl	8002370 <HAL_GetTick>
 80031fe:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x3f0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003208:	d106      	bne.n	8003218 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320a:	f7ff f8b1 	bl	8002370 <HAL_GetTick>
 800320e:	1b00      	subs	r0, r0, r4
 8003210:	2802      	cmp	r0, #2
 8003212:	d9f5      	bls.n	8003200 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8003214:	2003      	movs	r0, #3
 8003216:	e02f      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003218:	2000      	movs	r0, #0
 800321a:	e02d      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
 800321c:	2000      	movs	r0, #0
 800321e:	e02b      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003220:	2b01      	cmp	r3, #1
 8003222:	d02b      	beq.n	800327c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x3f0>)
 8003226:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003228:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800322c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322e:	4291      	cmp	r1, r2
 8003230:	d126      	bne.n	8003280 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003236:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003238:	428a      	cmp	r2, r1
 800323a:	d123      	bne.n	8003284 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800323c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003242:	401a      	ands	r2, r3
 8003244:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003248:	d11e      	bne.n	8003288 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800324a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800324e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003250:	0852      	lsrs	r2, r2, #1
 8003252:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003254:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003258:	d118      	bne.n	800328c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800325a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800325e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003260:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003264:	d114      	bne.n	8003290 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8003266:	2000      	movs	r0, #0
 8003268:	e006      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800326a:	2001      	movs	r0, #1
}
 800326c:	4770      	bx	lr
        return HAL_ERROR;
 800326e:	2001      	movs	r0, #1
 8003270:	e002      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8003272:	2001      	movs	r0, #1
 8003274:	e000      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8003276:	2000      	movs	r0, #0
}
 8003278:	b002      	add	sp, #8
 800327a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800327c:	2001      	movs	r0, #1
 800327e:	e7fb      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8003280:	2001      	movs	r0, #1
 8003282:	e7f9      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
 8003284:	2001      	movs	r0, #1
 8003286:	e7f7      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
 8003288:	2001      	movs	r0, #1
 800328a:	e7f5      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
 800328c:	2001      	movs	r0, #1
 800328e:	e7f3      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
 8003290:	2001      	movs	r0, #1
 8003292:	e7f1      	b.n	8003278 <HAL_RCC_OscConfig+0x3d4>
 8003294:	40023800 	.word	0x40023800
 8003298:	42470000 	.word	0x42470000

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329e:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d057      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0xbe>
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d157      	bne.n	800335e <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80032bc:	d02a      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80032c6:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80032ca:	ebb1 000c 	subs.w	r0, r1, ip
 80032ce:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80032d2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80032d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032da:	0181      	lsls	r1, r0, #6
 80032dc:	1a09      	subs	r1, r1, r0
 80032de:	eb63 030e 	sbc.w	r3, r3, lr
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e8:	00c9      	lsls	r1, r1, #3
 80032ea:	eb11 0c0c 	adds.w	ip, r1, ip
 80032ee:	f143 0300 	adc.w	r3, r3, #0
 80032f2:	0259      	lsls	r1, r3, #9
 80032f4:	2300      	movs	r3, #0
 80032f6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80032fa:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80032fe:	f7fd fc8b 	bl	8000c18 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003302:	4b18      	ldr	r3, [pc, #96]	; (8003364 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800330a:	3301      	adds	r3, #1
 800330c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800330e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003312:	e025      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003314:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800331c:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003320:	ebb1 000c 	subs.w	r0, r1, ip
 8003324:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003328:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800332c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003330:	0181      	lsls	r1, r0, #6
 8003332:	1a09      	subs	r1, r1, r0
 8003334:	eb63 030e 	sbc.w	r3, r3, lr
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800333e:	00c9      	lsls	r1, r1, #3
 8003340:	eb11 0c0c 	adds.w	ip, r1, ip
 8003344:	f143 0300 	adc.w	r3, r3, #0
 8003348:	0299      	lsls	r1, r3, #10
 800334a:	2300      	movs	r3, #0
 800334c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003350:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003354:	f7fd fc60 	bl	8000c18 <__aeabi_uldivmod>
 8003358:	e7d3      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 800335a:	4803      	ldr	r0, [pc, #12]	; (8003368 <HAL_RCC_GetSysClockFreq+0xcc>)
 800335c:	e000      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335e:	4803      	ldr	r0, [pc, #12]	; (800336c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003360:	bd08      	pop	{r3, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	007a1200 	.word	0x007a1200
 800336c:	00f42400 	.word	0x00f42400

08003370 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003370:	2800      	cmp	r0, #0
 8003372:	f000 809b 	beq.w	80034ac <HAL_RCC_ClockConfig+0x13c>
{
 8003376:	b570      	push	{r4, r5, r6, lr}
 8003378:	460d      	mov	r5, r1
 800337a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800337c:	4b4f      	ldr	r3, [pc, #316]	; (80034bc <HAL_RCC_ClockConfig+0x14c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	428b      	cmp	r3, r1
 8003386:	d208      	bcs.n	800339a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003388:	b2cb      	uxtb	r3, r1
 800338a:	4a4c      	ldr	r2, [pc, #304]	; (80034bc <HAL_RCC_ClockConfig+0x14c>)
 800338c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	6813      	ldr	r3, [r2, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	428b      	cmp	r3, r1
 8003396:	f040 808b 	bne.w	80034b0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	f013 0f02 	tst.w	r3, #2
 80033a0:	d017      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a2:	f013 0f04 	tst.w	r3, #4
 80033a6:	d004      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a8:	4a45      	ldr	r2, [pc, #276]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 80033aa:	6893      	ldr	r3, [r2, #8]
 80033ac:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033b0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	f013 0f08 	tst.w	r3, #8
 80033b8:	d004      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ba:	4a41      	ldr	r2, [pc, #260]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 80033bc:	6893      	ldr	r3, [r2, #8]
 80033be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033c2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c4:	4a3e      	ldr	r2, [pc, #248]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 80033c6:	6893      	ldr	r3, [r2, #8]
 80033c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033cc:	68a1      	ldr	r1, [r4, #8]
 80033ce:	430b      	orrs	r3, r1
 80033d0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f013 0f01 	tst.w	r3, #1
 80033d8:	d032      	beq.n	8003440 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	6863      	ldr	r3, [r4, #4]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d021      	beq.n	8003424 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e0:	1e9a      	subs	r2, r3, #2
 80033e2:	2a01      	cmp	r2, #1
 80033e4:	d925      	bls.n	8003432 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e6:	4a36      	ldr	r2, [pc, #216]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	f012 0f02 	tst.w	r2, #2
 80033ee:	d061      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f0:	4933      	ldr	r1, [pc, #204]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 80033f2:	688a      	ldr	r2, [r1, #8]
 80033f4:	f022 0203 	bic.w	r2, r2, #3
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80033fc:	f7fe ffb8 	bl	8002370 <HAL_GetTick>
 8003400:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	6862      	ldr	r2, [r4, #4]
 800340c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003410:	d016      	beq.n	8003440 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003412:	f7fe ffad 	bl	8002370 <HAL_GetTick>
 8003416:	1b80      	subs	r0, r0, r6
 8003418:	f241 3388 	movw	r3, #5000	; 0x1388
 800341c:	4298      	cmp	r0, r3
 800341e:	d9f0      	bls.n	8003402 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8003420:	2003      	movs	r0, #3
 8003422:	e042      	b.n	80034aa <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003424:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800342c:	d1e0      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800342e:	2001      	movs	r0, #1
 8003430:	e03b      	b.n	80034aa <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800343a:	d1d9      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800343c:	2001      	movs	r0, #1
 800343e:	e034      	b.n	80034aa <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <HAL_RCC_ClockConfig+0x14c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	42ab      	cmp	r3, r5
 800344a:	d907      	bls.n	800345c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344c:	b2ea      	uxtb	r2, r5
 800344e:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_RCC_ClockConfig+0x14c>)
 8003450:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	42ab      	cmp	r3, r5
 800345a:	d12d      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	f013 0f04 	tst.w	r3, #4
 8003462:	d006      	beq.n	8003472 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4a16      	ldr	r2, [pc, #88]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 8003466:	6893      	ldr	r3, [r2, #8]
 8003468:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800346c:	68e1      	ldr	r1, [r4, #12]
 800346e:	430b      	orrs	r3, r1
 8003470:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	f013 0f08 	tst.w	r3, #8
 8003478:	d007      	beq.n	800348a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800347a:	4a11      	ldr	r2, [pc, #68]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 800347c:	6893      	ldr	r3, [r2, #8]
 800347e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003482:	6921      	ldr	r1, [r4, #16]
 8003484:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003488:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800348a:	f7ff ff07 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCC_ClockConfig+0x150>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003496:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <HAL_RCC_ClockConfig+0x154>)
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	40d8      	lsrs	r0, r3
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_RCC_ClockConfig+0x158>)
 800349e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x15c>)
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	f7fe ff18 	bl	80022d8 <HAL_InitTick>
  return HAL_OK;
 80034a8:	2000      	movs	r0, #0
}
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80034ac:	2001      	movs	r0, #1
}
 80034ae:	4770      	bx	lr
      return HAL_ERROR;
 80034b0:	2001      	movs	r0, #1
 80034b2:	e7fa      	b.n	80034aa <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80034b4:	2001      	movs	r0, #1
 80034b6:	e7f8      	b.n	80034aa <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80034b8:	2001      	movs	r0, #1
 80034ba:	e7f6      	b.n	80034aa <HAL_RCC_ClockConfig+0x13a>
 80034bc:	40023c00 	.word	0x40023c00
 80034c0:	40023800 	.word	0x40023800
 80034c4:	0800a2c4 	.word	0x0800a2c4
 80034c8:	20000004 	.word	0x20000004
 80034cc:	2000000c 	.word	0x2000000c

080034d0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80034d0:	4b01      	ldr	r3, [pc, #4]	; (80034d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034dc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034de:	f7ff fff7 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80034ea:	4a03      	ldr	r2, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80034ec:	5cd3      	ldrb	r3, [r2, r3]
}
 80034ee:	40d8      	lsrs	r0, r3
 80034f0:	bd08      	pop	{r3, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	0800a2d4 	.word	0x0800a2d4

080034fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034fe:	f7ff ffe7 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800350a:	4a03      	ldr	r2, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800350c:	5cd3      	ldrb	r3, [r2, r3]
}
 800350e:	40d8      	lsrs	r0, r3
 8003510:	bd08      	pop	{r3, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	0800a2d4 	.word	0x0800a2d4

0800351c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	4605      	mov	r5, r0
 8003524:	4688      	mov	r8, r1
 8003526:	4617      	mov	r7, r2
 8003528:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800352a:	f7fe ff21 	bl	8002370 <HAL_GetTick>
 800352e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003530:	1a1b      	subs	r3, r3, r0
 8003532:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003536:	f7fe ff1b 	bl	8002370 <HAL_GetTick>
 800353a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <SPI_WaitFlagStateUntilTimeout+0xd0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003544:	fb09 f303 	mul.w	r3, r9, r3
 8003548:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800354a:	682b      	ldr	r3, [r5, #0]
 800354c:	689c      	ldr	r4, [r3, #8]
 800354e:	ea38 0304 	bics.w	r3, r8, r4
 8003552:	bf0c      	ite	eq
 8003554:	f04f 0c01 	moveq.w	ip, #1
 8003558:	f04f 0c00 	movne.w	ip, #0
 800355c:	45bc      	cmp	ip, r7
 800355e:	d040      	beq.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003560:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003564:	d0f1      	beq.n	800354a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003566:	f7fe ff03 	bl	8002370 <HAL_GetTick>
 800356a:	eba0 000a 	sub.w	r0, r0, sl
 800356e:	4548      	cmp	r0, r9
 8003570:	d20a      	bcs.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003572:	f1b9 0f00 	cmp.w	r9, #0
 8003576:	d007      	beq.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003578:	9a01      	ldr	r2, [sp, #4]
 800357a:	b102      	cbz	r2, 800357e <SPI_WaitFlagStateUntilTimeout+0x62>
 800357c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800357e:	9b01      	ldr	r3, [sp, #4]
 8003580:	3b01      	subs	r3, #1
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	4691      	mov	r9, r2
 8003586:	e7e0      	b.n	800354a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003588:	682a      	ldr	r2, [r5, #0]
 800358a:	6853      	ldr	r3, [r2, #4]
 800358c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003590:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003592:	686b      	ldr	r3, [r5, #4]
 8003594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003598:	d00b      	beq.n	80035b2 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800359a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800359c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a0:	d014      	beq.n	80035cc <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80035a8:	2300      	movs	r3, #0
 80035aa:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 80035ae:	2003      	movs	r0, #3
 80035b0:	e018      	b.n	80035e4 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035b2:	68ab      	ldr	r3, [r5, #8]
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b8:	d002      	beq.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	d1ec      	bne.n	800359a <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 80035c0:	682a      	ldr	r2, [r5, #0]
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e7e6      	b.n	800359a <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 80035cc:	682a      	ldr	r2, [r5, #0]
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	682a      	ldr	r2, [r5, #0]
 80035d8:	6813      	ldr	r3, [r2, #0]
 80035da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	e7df      	b.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 80035e2:	2000      	movs	r0, #0
}
 80035e4:	b002      	add	sp, #8
 80035e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ea:	bf00      	nop
 80035ec:	20000004 	.word	0x20000004

080035f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b510      	push	{r4, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035f6:	4b16      	ldr	r3, [pc, #88]	; (8003650 <SPI_EndRxTxTransaction+0x60>)
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <SPI_EndRxTxTransaction+0x64>)
 80035fc:	fba3 3000 	umull	r3, r0, r3, r0
 8003600:	0d40      	lsrs	r0, r0, #21
 8003602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003606:	fb03 f000 	mul.w	r0, r3, r0
 800360a:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800360c:	6863      	ldr	r3, [r4, #4]
 800360e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003612:	d00b      	beq.n	800362c <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003614:	9b03      	ldr	r3, [sp, #12]
 8003616:	b1bb      	cbz	r3, 8003648 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8003618:	9b03      	ldr	r3, [sp, #12]
 800361a:	3b01      	subs	r3, #1
 800361c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003626:	d1f5      	bne.n	8003614 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8003628:	2000      	movs	r0, #0
 800362a:	e00e      	b.n	800364a <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800362c:	9200      	str	r2, [sp, #0]
 800362e:	460b      	mov	r3, r1
 8003630:	2200      	movs	r2, #0
 8003632:	2180      	movs	r1, #128	; 0x80
 8003634:	4620      	mov	r0, r4
 8003636:	f7ff ff71 	bl	800351c <SPI_WaitFlagStateUntilTimeout>
 800363a:	b130      	cbz	r0, 800364a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800363c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800363e:	f043 0320 	orr.w	r3, r3, #32
 8003642:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003644:	2003      	movs	r0, #3
 8003646:	e000      	b.n	800364a <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8003648:	2000      	movs	r0, #0
}
 800364a:	b004      	add	sp, #16
 800364c:	bd10      	pop	{r4, pc}
 800364e:	bf00      	nop
 8003650:	20000004 	.word	0x20000004
 8003654:	165e9f81 	.word	0x165e9f81

08003658 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003658:	2800      	cmp	r0, #0
 800365a:	d05a      	beq.n	8003712 <HAL_SPI_Init+0xba>
{
 800365c:	b510      	push	{r4, lr}
 800365e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003660:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003662:	b933      	cbnz	r3, 8003672 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003664:	6843      	ldr	r3, [r0, #4]
 8003666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366a:	d005      	beq.n	8003678 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800366c:	2300      	movs	r3, #0
 800366e:	61c3      	str	r3, [r0, #28]
 8003670:	e002      	b.n	8003678 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003676:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003678:	2300      	movs	r3, #0
 800367a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800367c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003680:	2b00      	cmp	r3, #0
 8003682:	d040      	beq.n	8003706 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003684:	2302      	movs	r3, #2
 8003686:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	6813      	ldr	r3, [r2, #0]
 800368e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003692:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003694:	6863      	ldr	r3, [r4, #4]
 8003696:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800369a:	68a2      	ldr	r2, [r4, #8]
 800369c:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80036a0:	4313      	orrs	r3, r2
 80036a2:	68e2      	ldr	r2, [r4, #12]
 80036a4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036a8:	4313      	orrs	r3, r2
 80036aa:	6922      	ldr	r2, [r4, #16]
 80036ac:	f002 0202 	and.w	r2, r2, #2
 80036b0:	4313      	orrs	r3, r2
 80036b2:	6962      	ldr	r2, [r4, #20]
 80036b4:	f002 0201 	and.w	r2, r2, #1
 80036b8:	4313      	orrs	r3, r2
 80036ba:	69a2      	ldr	r2, [r4, #24]
 80036bc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80036c0:	4313      	orrs	r3, r2
 80036c2:	69e2      	ldr	r2, [r4, #28]
 80036c4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80036c8:	4313      	orrs	r3, r2
 80036ca:	6a22      	ldr	r2, [r4, #32]
 80036cc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80036d0:	4313      	orrs	r3, r2
 80036d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80036d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036d8:	6821      	ldr	r1, [r4, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036de:	8b63      	ldrh	r3, [r4, #26]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036e6:	f002 0210 	and.w	r2, r2, #16
 80036ea:	6821      	ldr	r1, [r4, #0]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036f0:	6822      	ldr	r2, [r4, #0]
 80036f2:	69d3      	ldr	r3, [r2, #28]
 80036f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036f8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036fa:	2000      	movs	r0, #0
 80036fc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036fe:	2301      	movs	r3, #1
 8003700:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003704:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003706:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800370a:	4620      	mov	r0, r4
 800370c:	f7fe fc20 	bl	8001f50 <HAL_SPI_MspInit>
 8003710:	e7b8      	b.n	8003684 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003712:	2001      	movs	r0, #1
}
 8003714:	4770      	bx	lr

08003716 <HAL_SPI_Transmit>:
{
 8003716:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800371a:	b083      	sub	sp, #12
 800371c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800371e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003722:	2b01      	cmp	r3, #1
 8003724:	f000 80d1 	beq.w	80038ca <HAL_SPI_Transmit+0x1b4>
 8003728:	4604      	mov	r4, r0
 800372a:	4688      	mov	r8, r1
 800372c:	4691      	mov	r9, r2
 800372e:	2301      	movs	r3, #1
 8003730:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003734:	f7fe fe1c 	bl	8002370 <HAL_GetTick>
 8003738:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800373a:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 800373e:	b2f6      	uxtb	r6, r6
 8003740:	2e01      	cmp	r6, #1
 8003742:	f040 80af 	bne.w	80038a4 <HAL_SPI_Transmit+0x18e>
  if ((pData == NULL) || (Size == 0U))
 8003746:	f1b8 0f00 	cmp.w	r8, #0
 800374a:	f000 80ac 	beq.w	80038a6 <HAL_SPI_Transmit+0x190>
 800374e:	f1b9 0f00 	cmp.w	r9, #0
 8003752:	f000 80a8 	beq.w	80038a6 <HAL_SPI_Transmit+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003756:	2303      	movs	r3, #3
 8003758:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800375c:	2300      	movs	r3, #0
 800375e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003760:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003764:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003768:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800376c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800376e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003770:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003772:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003774:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377c:	d01e      	beq.n	80037bc <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003786:	d103      	bne.n	8003790 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800378e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003790:	68e3      	ldr	r3, [r4, #12]
 8003792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003796:	d01c      	beq.n	80037d2 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	b113      	cbz	r3, 80037a2 <HAL_SPI_Transmit+0x8c>
 800379c:	f1b9 0f01 	cmp.w	r9, #1
 80037a0:	d152      	bne.n	8003848 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	7812      	ldrb	r2, [r2, #0]
 80037a8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037ac:	3301      	adds	r3, #1
 80037ae:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80037b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80037ba:	e045      	b.n	8003848 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 80037bc:	6822      	ldr	r2, [r4, #0]
 80037be:	6813      	ldr	r3, [r2, #0]
 80037c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c4:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	6813      	ldr	r3, [r2, #0]
 80037ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e7d5      	b.n	800377e <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d2:	6863      	ldr	r3, [r4, #4]
 80037d4:	b113      	cbz	r3, 80037dc <HAL_SPI_Transmit+0xc6>
 80037d6:	f1b9 0f01 	cmp.w	r9, #1
 80037da:	d116      	bne.n	800380a <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	8812      	ldrh	r2, [r2, #0]
 80037e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037e6:	3302      	adds	r3, #2
 80037e8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80037ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80037f4:	e009      	b.n	800380a <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037f6:	f7fe fdbb 	bl	8002370 <HAL_GetTick>
 80037fa:	1bc0      	subs	r0, r0, r7
 80037fc:	42a8      	cmp	r0, r5
 80037fe:	d302      	bcc.n	8003806 <HAL_SPI_Transmit+0xf0>
 8003800:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003804:	d159      	bne.n	80038ba <HAL_SPI_Transmit+0x1a4>
 8003806:	2d00      	cmp	r5, #0
 8003808:	d059      	beq.n	80038be <HAL_SPI_Transmit+0x1a8>
    while (hspi->TxXferCount > 0U)
 800380a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d033      	beq.n	800387a <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	f012 0f02 	tst.w	r2, #2
 800381a:	d0ec      	beq.n	80037f6 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800381e:	8812      	ldrh	r2, [r2, #0]
 8003820:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003822:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003824:	3302      	adds	r3, #2
 8003826:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003828:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29b      	uxth	r3, r3
 8003830:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003832:	e7ea      	b.n	800380a <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003834:	f7fe fd9c 	bl	8002370 <HAL_GetTick>
 8003838:	1bc0      	subs	r0, r0, r7
 800383a:	42a8      	cmp	r0, r5
 800383c:	d302      	bcc.n	8003844 <HAL_SPI_Transmit+0x12e>
 800383e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003842:	d13e      	bne.n	80038c2 <HAL_SPI_Transmit+0x1ac>
 8003844:	2d00      	cmp	r5, #0
 8003846:	d03e      	beq.n	80038c6 <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 8003848:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800384a:	b29b      	uxth	r3, r3
 800384c:	b1ab      	cbz	r3, 800387a <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	f012 0f02 	tst.w	r2, #2
 8003856:	d0ed      	beq.n	8003834 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003858:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800385a:	7812      	ldrb	r2, [r2, #0]
 800385c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800385e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003860:	3301      	adds	r3, #1
 8003862:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003864:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8003868:	fa1f fc8c 	uxth.w	ip, ip
 800386c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003870:	fa1f fc8c 	uxth.w	ip, ip
 8003874:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 8003878:	e7e6      	b.n	8003848 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800387a:	463a      	mov	r2, r7
 800387c:	4629      	mov	r1, r5
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff feb6 	bl	80035f0 <SPI_EndRxTxTransaction>
 8003884:	b108      	cbz	r0, 800388a <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003886:	2320      	movs	r3, #32
 8003888:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800388a:	68a3      	ldr	r3, [r4, #8]
 800388c:	b933      	cbnz	r3, 800389c <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	9201      	str	r2, [sp, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800389c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800389e:	b913      	cbnz	r3, 80038a6 <HAL_SPI_Transmit+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038a0:	2600      	movs	r6, #0
 80038a2:	e000      	b.n	80038a6 <HAL_SPI_Transmit+0x190>
    errorcode = HAL_BUSY;
 80038a4:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038ac:	2300      	movs	r3, #0
 80038ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80038b2:	4630      	mov	r0, r6
 80038b4:	b003      	add	sp, #12
 80038b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80038ba:	2603      	movs	r6, #3
 80038bc:	e7f3      	b.n	80038a6 <HAL_SPI_Transmit+0x190>
 80038be:	2603      	movs	r6, #3
 80038c0:	e7f1      	b.n	80038a6 <HAL_SPI_Transmit+0x190>
          errorcode = HAL_TIMEOUT;
 80038c2:	2603      	movs	r6, #3
 80038c4:	e7ef      	b.n	80038a6 <HAL_SPI_Transmit+0x190>
 80038c6:	2603      	movs	r6, #3
 80038c8:	e7ed      	b.n	80038a6 <HAL_SPI_Transmit+0x190>
  __HAL_LOCK(hspi);
 80038ca:	2602      	movs	r6, #2
 80038cc:	e7f1      	b.n	80038b2 <HAL_SPI_Transmit+0x19c>

080038ce <HAL_SPI_TransmitReceive>:
{
 80038ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038d2:	b083      	sub	sp, #12
 80038d4:	461f      	mov	r7, r3
 80038d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80038d8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80038dc:	2b01      	cmp	r3, #1
 80038de:	f000 8110 	beq.w	8003b02 <HAL_SPI_TransmitReceive+0x234>
 80038e2:	4604      	mov	r4, r0
 80038e4:	4688      	mov	r8, r1
 80038e6:	4691      	mov	r9, r2
 80038e8:	2301      	movs	r3, #1
 80038ea:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80038ee:	f7fe fd3f 	bl	8002370 <HAL_GetTick>
 80038f2:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80038f4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80038f8:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80038fa:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d00a      	beq.n	8003916 <HAL_SPI_TransmitReceive+0x48>
 8003900:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003904:	f040 80e3 	bne.w	8003ace <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003908:	68a2      	ldr	r2, [r4, #8]
 800390a:	2a00      	cmp	r2, #0
 800390c:	f040 80e9 	bne.w	8003ae2 <HAL_SPI_TransmitReceive+0x214>
 8003910:	2b04      	cmp	r3, #4
 8003912:	f040 80e8 	bne.w	8003ae6 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003916:	f1b8 0f00 	cmp.w	r8, #0
 800391a:	f000 80e6 	beq.w	8003aea <HAL_SPI_TransmitReceive+0x21c>
 800391e:	f1b9 0f00 	cmp.w	r9, #0
 8003922:	f000 80e4 	beq.w	8003aee <HAL_SPI_TransmitReceive+0x220>
 8003926:	2f00      	cmp	r7, #0
 8003928:	f000 80e3 	beq.w	8003af2 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800392c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b04      	cmp	r3, #4
 8003934:	d002      	beq.n	800393c <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003936:	2305      	movs	r3, #5
 8003938:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800393c:	2300      	movs	r3, #0
 800393e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003940:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003944:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003946:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003948:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800394c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800394e:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8003950:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003952:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	f012 0f40 	tst.w	r2, #64	; 0x40
 800395c:	d103      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003964:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003966:	68e3      	ldr	r3, [r4, #12]
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396c:	d011      	beq.n	8003992 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396e:	6863      	ldr	r3, [r4, #4]
 8003970:	b10b      	cbz	r3, 8003976 <HAL_SPI_TransmitReceive+0xa8>
 8003972:	2f01      	cmp	r7, #1
 8003974:	d10b      	bne.n	800398e <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003976:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800397e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003980:	3301      	adds	r3, #1
 8003982:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003984:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29b      	uxth	r3, r3
 800398c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800398e:	2701      	movs	r7, #1
 8003990:	e06b      	b.n	8003a6a <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003992:	6863      	ldr	r3, [r4, #4]
 8003994:	b10b      	cbz	r3, 800399a <HAL_SPI_TransmitReceive+0xcc>
 8003996:	2f01      	cmp	r7, #1
 8003998:	d10b      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800399a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	8812      	ldrh	r2, [r2, #0]
 80039a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039a4:	3302      	adds	r3, #2
 80039a6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80039a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80039b2:	2701      	movs	r7, #1
 80039b4:	e01c      	b.n	80039f0 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	f012 0f01 	tst.w	r2, #1
 80039be:	d00e      	beq.n	80039de <HAL_SPI_TransmitReceive+0x110>
 80039c0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80039c2:	b292      	uxth	r2, r2
 80039c4:	b15a      	cbz	r2, 80039de <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039ce:	3302      	adds	r3, #2
 80039d0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80039d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29b      	uxth	r3, r3
 80039da:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80039dc:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039de:	f7fe fcc7 	bl	8002370 <HAL_GetTick>
 80039e2:	1b80      	subs	r0, r0, r6
 80039e4:	42a8      	cmp	r0, r5
 80039e6:	d303      	bcc.n	80039f0 <HAL_SPI_TransmitReceive+0x122>
 80039e8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80039ec:	f040 8083 	bne.w	8003af6 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	b91b      	cbnz	r3, 80039fe <HAL_SPI_TransmitReceive+0x130>
 80039f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d053      	beq.n	8003aa6 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	f012 0f02 	tst.w	r2, #2
 8003a06:	d0d6      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0xe8>
 8003a08:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	2a00      	cmp	r2, #0
 8003a0e:	d0d2      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0xe8>
 8003a10:	2f00      	cmp	r7, #0
 8003a12:	d0d0      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a16:	8812      	ldrh	r2, [r2, #0]
 8003a18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003a20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003a2a:	2700      	movs	r7, #0
 8003a2c:	e7c3      	b.n	80039b6 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	f012 0f01 	tst.w	r2, #1
 8003a36:	d00e      	beq.n	8003a56 <HAL_SPI_TransmitReceive+0x188>
 8003a38:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003a3a:	b292      	uxth	r2, r2
 8003a3c:	b15a      	cbz	r2, 8003a56 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a46:	3301      	adds	r3, #1
 8003a48:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003a4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003a54:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a56:	f7fe fc8b 	bl	8002370 <HAL_GetTick>
 8003a5a:	1b83      	subs	r3, r0, r6
 8003a5c:	42ab      	cmp	r3, r5
 8003a5e:	d302      	bcc.n	8003a66 <HAL_SPI_TransmitReceive+0x198>
 8003a60:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a64:	d149      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x22c>
 8003a66:	2d00      	cmp	r5, #0
 8003a68:	d049      	beq.n	8003afe <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b913      	cbnz	r3, 8003a76 <HAL_SPI_TransmitReceive+0x1a8>
 8003a70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	b1bb      	cbz	r3, 8003aa6 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	f012 0f02 	tst.w	r2, #2
 8003a7e:	d0d6      	beq.n	8003a2e <HAL_SPI_TransmitReceive+0x160>
 8003a80:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003a82:	b292      	uxth	r2, r2
 8003a84:	2a00      	cmp	r2, #0
 8003a86:	d0d2      	beq.n	8003a2e <HAL_SPI_TransmitReceive+0x160>
 8003a88:	2f00      	cmp	r7, #0
 8003a8a:	d0d0      	beq.n	8003a2e <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a8e:	7812      	ldrb	r2, [r2, #0]
 8003a90:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003a92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a94:	3301      	adds	r3, #1
 8003a96:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003a98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003aa2:	2700      	movs	r7, #0
 8003aa4:	e7c3      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7ff fda0 	bl	80035f0 <SPI_EndRxTxTransaction>
 8003ab0:	b948      	cbnz	r0, 8003ac6 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab2:	68a3      	ldr	r3, [r4, #8]
 8003ab4:	b963      	cbnz	r3, 8003ad0 <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	9201      	str	r2, [sp, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	9b01      	ldr	r3, [sp, #4]
 8003ac4:	e004      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003aca:	2001      	movs	r0, #1
    goto error;
 8003acc:	e000      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8003ace:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003adc:	b003      	add	sp, #12
 8003ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003ae2:	2002      	movs	r0, #2
 8003ae4:	e7f4      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x202>
 8003ae6:	2002      	movs	r0, #2
 8003ae8:	e7f2      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8003aea:	2001      	movs	r0, #1
 8003aec:	e7f0      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x202>
 8003aee:	2001      	movs	r0, #1
 8003af0:	e7ee      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x202>
 8003af2:	2001      	movs	r0, #1
 8003af4:	e7ec      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8003af6:	2003      	movs	r0, #3
 8003af8:	e7ea      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8003afa:	2003      	movs	r0, #3
 8003afc:	e7e8      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x202>
 8003afe:	2003      	movs	r0, #3
 8003b00:	e7e6      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 8003b02:	2002      	movs	r0, #2
 8003b04:	e7ea      	b.n	8003adc <HAL_SPI_TransmitReceive+0x20e>

08003b06 <HAL_SPI_GetState>:
  return hspi->State;
 8003b06:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8003b0a:	4770      	bx	lr

08003b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b10:	6a04      	ldr	r4, [r0, #32]
 8003b12:	f024 0401 	bic.w	r4, r4, #1
 8003b16:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b18:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b1a:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b1e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b22:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003b26:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b28:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b2a:	6203      	str	r3, [r0, #32]
}
 8003b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b32:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b34:	6a04      	ldr	r4, [r0, #32]
 8003b36:	f024 0410 	bic.w	r4, r4, #16
 8003b3a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003b3e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b40:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b44:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b4c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b50:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b52:	6203      	str	r3, [r0, #32]
}
 8003b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b5a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b60:	430b      	orrs	r3, r1
 8003b62:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b66:	6083      	str	r3, [r0, #8]
}
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003b6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d12f      	bne.n	8003bd6 <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b76:	2302      	movs	r3, #2
 8003b78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b7c:	6802      	ldr	r2, [r0, #0]
 8003b7e:	68d3      	ldr	r3, [r2, #12]
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b86:	6803      	ldr	r3, [r0, #0]
 8003b88:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <HAL_TIM_Base_Start_IT+0x74>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d018      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x54>
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b92:	d015      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x54>
 8003b94:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d011      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x54>
 8003b9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x54>
 8003ba4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x54>
 8003bac:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d005      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc6:	2a06      	cmp	r2, #6
 8003bc8:	d007      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	f042 0201 	orr.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	4770      	bx	lr
    return HAL_ERROR;
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	4770      	bx	lr
  return HAL_OK;
 8003bda:	2000      	movs	r0, #0
}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40010000 	.word	0x40010000

08003be4 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003be4:	6802      	ldr	r2, [r0, #0]
 8003be6:	68d3      	ldr	r3, [r2, #12]
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8003bee:	6803      	ldr	r3, [r0, #0]
 8003bf0:	6a19      	ldr	r1, [r3, #32]
 8003bf2:	f241 1211 	movw	r2, #4369	; 0x1111
 8003bf6:	4211      	tst	r1, r2
 8003bf8:	d108      	bne.n	8003c0c <HAL_TIM_Base_Stop_IT+0x28>
 8003bfa:	6a19      	ldr	r1, [r3, #32]
 8003bfc:	f240 4244 	movw	r2, #1092	; 0x444
 8003c00:	4211      	tst	r1, r2
 8003c02:	d103      	bne.n	8003c0c <HAL_TIM_Base_Stop_IT+0x28>
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003c12:	2000      	movs	r0, #0
 8003c14:	4770      	bx	lr

08003c16 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIM_IC_CaptureCallback>:
}
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIM_TriggerCallback>:
}
 8003c1c:	4770      	bx	lr

08003c1e <HAL_TIM_IRQHandler>:
{
 8003c1e:	b510      	push	{r4, lr}
 8003c20:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c22:	6803      	ldr	r3, [r0, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	f012 0f02 	tst.w	r2, #2
 8003c2a:	d011      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	f012 0f02 	tst.w	r2, #2
 8003c32:	d00d      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c34:	f06f 0202 	mvn.w	r2, #2
 8003c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c3e:	6803      	ldr	r3, [r0, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f013 0f03 	tst.w	r3, #3
 8003c46:	d070      	beq.n	8003d2a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003c48:	f7ff ffe6 	bl	8003c18 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	f012 0f04 	tst.w	r2, #4
 8003c58:	d012      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	f012 0f04 	tst.w	r2, #4
 8003c60:	d00e      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c62:	f06f 0204 	mvn.w	r2, #4
 8003c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c74:	d05f      	beq.n	8003d36 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7ff ffce 	bl	8003c18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	f012 0f08 	tst.w	r2, #8
 8003c88:	d012      	beq.n	8003cb0 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	f012 0f08 	tst.w	r2, #8
 8003c90:	d00e      	beq.n	8003cb0 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c92:	f06f 0208 	mvn.w	r2, #8
 8003c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c98:	2304      	movs	r3, #4
 8003c9a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f013 0f03 	tst.w	r3, #3
 8003ca4:	d04e      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f7ff ffb6 	bl	8003c18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cac:	2300      	movs	r3, #0
 8003cae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	f012 0f10 	tst.w	r2, #16
 8003cb8:	d012      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	f012 0f10 	tst.w	r2, #16
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc2:	f06f 0210 	mvn.w	r2, #16
 8003cc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cc8:	2308      	movs	r3, #8
 8003cca:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003cd4:	d03d      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f7ff ff9e 	bl	8003c18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	f012 0f01 	tst.w	r2, #1
 8003ce8:	d003      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	f012 0f01 	tst.w	r2, #1
 8003cf0:	d136      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003cfa:	d003      	beq.n	8003d04 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d02:	d134      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d14:	d132      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	f012 0f20 	tst.w	r2, #32
 8003d1e:	d003      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	f012 0f20 	tst.w	r2, #32
 8003d26:	d130      	bne.n	8003d8a <HAL_TIM_IRQHandler+0x16c>
}
 8003d28:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	f7ff ff74 	bl	8003c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f7ff ff73 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
 8003d34:	e78a      	b.n	8003c4c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d36:	4620      	mov	r0, r4
 8003d38:	f7ff ff6d 	bl	8003c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f7ff ff6c 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
 8003d42:	e79b      	b.n	8003c7c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d44:	4620      	mov	r0, r4
 8003d46:	f7ff ff66 	bl	8003c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f7ff ff65 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
 8003d50:	e7ac      	b.n	8003cac <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff ff5f 	bl	8003c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f7ff ff5e 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
 8003d5e:	e7bd      	b.n	8003cdc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d60:	f06f 0201 	mvn.w	r2, #1
 8003d64:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d66:	4620      	mov	r0, r4
 8003d68:	f7fd fe64 	bl	8001a34 <HAL_TIM_PeriodElapsedCallback>
 8003d6c:	e7c1      	b.n	8003cf2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003d74:	4620      	mov	r0, r4
 8003d76:	f000 f954 	bl	8004022 <HAL_TIMEx_BreakCallback>
 8003d7a:	e7c3      	b.n	8003d04 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d80:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003d82:	4620      	mov	r0, r4
 8003d84:	f7ff ff4a 	bl	8003c1c <HAL_TIM_TriggerCallback>
 8003d88:	e7c5      	b.n	8003d16 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d8a:	f06f 0220 	mvn.w	r2, #32
 8003d8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003d90:	4620      	mov	r0, r4
 8003d92:	f000 f945 	bl	8004020 <HAL_TIMEx_CommutCallback>
}
 8003d96:	e7c7      	b.n	8003d28 <HAL_TIM_IRQHandler+0x10a>

08003d98 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003d98:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d9a:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <TIM_Base_SetConfig+0x98>)
 8003d9c:	4290      	cmp	r0, r2
 8003d9e:	d00e      	beq.n	8003dbe <TIM_Base_SetConfig+0x26>
 8003da0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003da4:	d00b      	beq.n	8003dbe <TIM_Base_SetConfig+0x26>
 8003da6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003daa:	4290      	cmp	r0, r2
 8003dac:	d007      	beq.n	8003dbe <TIM_Base_SetConfig+0x26>
 8003dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003db2:	4290      	cmp	r0, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_Base_SetConfig+0x26>
 8003db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dba:	4290      	cmp	r0, r2
 8003dbc:	d103      	bne.n	8003dc6 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003dc2:	684a      	ldr	r2, [r1, #4]
 8003dc4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc6:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <TIM_Base_SetConfig+0x98>)
 8003dc8:	4290      	cmp	r0, r2
 8003dca:	d01a      	beq.n	8003e02 <TIM_Base_SetConfig+0x6a>
 8003dcc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003dd0:	d017      	beq.n	8003e02 <TIM_Base_SetConfig+0x6a>
 8003dd2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003dd6:	4290      	cmp	r0, r2
 8003dd8:	d013      	beq.n	8003e02 <TIM_Base_SetConfig+0x6a>
 8003dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dde:	4290      	cmp	r0, r2
 8003de0:	d00f      	beq.n	8003e02 <TIM_Base_SetConfig+0x6a>
 8003de2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003de6:	4290      	cmp	r0, r2
 8003de8:	d00b      	beq.n	8003e02 <TIM_Base_SetConfig+0x6a>
 8003dea:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003dee:	4290      	cmp	r0, r2
 8003df0:	d007      	beq.n	8003e02 <TIM_Base_SetConfig+0x6a>
 8003df2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003df6:	4290      	cmp	r0, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_Base_SetConfig+0x6a>
 8003dfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dfe:	4290      	cmp	r0, r2
 8003e00:	d103      	bne.n	8003e0a <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	68ca      	ldr	r2, [r1, #12]
 8003e08:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e0e:	694a      	ldr	r2, [r1, #20]
 8003e10:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003e12:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e14:	688b      	ldr	r3, [r1, #8]
 8003e16:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e18:	680b      	ldr	r3, [r1, #0]
 8003e1a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <TIM_Base_SetConfig+0x98>)
 8003e1e:	4298      	cmp	r0, r3
 8003e20:	d002      	beq.n	8003e28 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8003e22:	2301      	movs	r3, #1
 8003e24:	6143      	str	r3, [r0, #20]
}
 8003e26:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003e28:	690b      	ldr	r3, [r1, #16]
 8003e2a:	6303      	str	r3, [r0, #48]	; 0x30
 8003e2c:	e7f9      	b.n	8003e22 <TIM_Base_SetConfig+0x8a>
 8003e2e:	bf00      	nop
 8003e30:	40010000 	.word	0x40010000

08003e34 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003e34:	b340      	cbz	r0, 8003e88 <HAL_TIM_Base_Init+0x54>
{
 8003e36:	b510      	push	{r4, lr}
 8003e38:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e3e:	b1f3      	cbz	r3, 8003e7e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	2302      	movs	r3, #2
 8003e42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e46:	4621      	mov	r1, r4
 8003e48:	f851 0b04 	ldr.w	r0, [r1], #4
 8003e4c:	f7ff ffa4 	bl	8003d98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e5a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003e76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e7a:	2000      	movs	r0, #0
}
 8003e7c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003e82:	f7fe f8fd 	bl	8002080 <HAL_TIM_Base_MspInit>
 8003e86:	e7db      	b.n	8003e40 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003e88:	2001      	movs	r0, #1
}
 8003e8a:	4770      	bx	lr

08003e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e8c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e8e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e90:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e94:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9e:	6082      	str	r2, [r0, #8]
}
 8003ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003ea6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d078      	beq.n	8003fa0 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003eae:	b510      	push	{r4, lr}
 8003eb0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003ebe:	6802      	ldr	r2, [r0, #0]
 8003ec0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ec6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003eca:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003ecc:	680b      	ldr	r3, [r1, #0]
 8003ece:	2b60      	cmp	r3, #96	; 0x60
 8003ed0:	d04c      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0xc6>
 8003ed2:	d829      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x82>
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	d054      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0xdc>
 8003ed8:	d90c      	bls.n	8003ef4 <HAL_TIM_ConfigClockSource+0x4e>
 8003eda:	2b50      	cmp	r3, #80	; 0x50
 8003edc:	d122      	bne.n	8003f24 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ede:	68ca      	ldr	r2, [r1, #12]
 8003ee0:	6849      	ldr	r1, [r1, #4]
 8003ee2:	6800      	ldr	r0, [r0, #0]
 8003ee4:	f7ff fe12 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ee8:	2150      	movs	r1, #80	; 0x50
 8003eea:	6820      	ldr	r0, [r4, #0]
 8003eec:	f7ff fe35 	bl	8003b5a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ef0:	2000      	movs	r0, #0
      break;
 8003ef2:	e005      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d00d      	beq.n	8003f14 <HAL_TIM_ConfigClockSource+0x6e>
 8003ef8:	d909      	bls.n	8003f0e <HAL_TIM_ConfigClockSource+0x68>
 8003efa:	2b30      	cmp	r3, #48	; 0x30
 8003efc:	d00a      	beq.n	8003f14 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8003efe:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f06:	2300      	movs	r3, #0
 8003f08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003f0c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003f0e:	b10b      	cbz	r3, 8003f14 <HAL_TIM_ConfigClockSource+0x6e>
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d105      	bne.n	8003f20 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f14:	4619      	mov	r1, r3
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	f7ff fe1f 	bl	8003b5a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2000      	movs	r0, #0
      break;
 8003f1e:	e7ef      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003f20:	2001      	movs	r0, #1
 8003f22:	e7ed      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x5a>
 8003f24:	2001      	movs	r0, #1
 8003f26:	e7eb      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d034      	beq.n	8003f98 <HAL_TIM_ConfigClockSource+0xf2>
 8003f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f32:	d10c      	bne.n	8003f4e <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8003f34:	68cb      	ldr	r3, [r1, #12]
 8003f36:	684a      	ldr	r2, [r1, #4]
 8003f38:	6889      	ldr	r1, [r1, #8]
 8003f3a:	6800      	ldr	r0, [r0, #0]
 8003f3c:	f7ff ffa6 	bl	8003e8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f40:	6822      	ldr	r2, [r4, #0]
 8003f42:	6893      	ldr	r3, [r2, #8]
 8003f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f48:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	2000      	movs	r0, #0
      break;
 8003f4c:	e7d8      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003f4e:	2b70      	cmp	r3, #112	; 0x70
 8003f50:	d124      	bne.n	8003f9c <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003f52:	68cb      	ldr	r3, [r1, #12]
 8003f54:	684a      	ldr	r2, [r1, #4]
 8003f56:	6889      	ldr	r1, [r1, #8]
 8003f58:	6800      	ldr	r0, [r0, #0]
 8003f5a:	f7ff ff97 	bl	8003e8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f5e:	6822      	ldr	r2, [r4, #0]
 8003f60:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003f66:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2000      	movs	r0, #0
      break;
 8003f6a:	e7c9      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f6c:	68ca      	ldr	r2, [r1, #12]
 8003f6e:	6849      	ldr	r1, [r1, #4]
 8003f70:	6800      	ldr	r0, [r0, #0]
 8003f72:	f7ff fdde 	bl	8003b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f76:	2160      	movs	r1, #96	; 0x60
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	f7ff fdee 	bl	8003b5a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	2000      	movs	r0, #0
      break;
 8003f80:	e7be      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f82:	68ca      	ldr	r2, [r1, #12]
 8003f84:	6849      	ldr	r1, [r1, #4]
 8003f86:	6800      	ldr	r0, [r0, #0]
 8003f88:	f7ff fdc0 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f8c:	2140      	movs	r1, #64	; 0x40
 8003f8e:	6820      	ldr	r0, [r4, #0]
 8003f90:	f7ff fde3 	bl	8003b5a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2000      	movs	r0, #0
      break;
 8003f96:	e7b3      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e7b1      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	e7af      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8003fa0:	2002      	movs	r0, #2
}
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fa4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d035      	beq.n	8004018 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8003fac:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fba:	6803      	ldr	r3, [r0, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fbe:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc0:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc4:	680a      	ldr	r2, [r1, #0]
 8003fc6:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fcc:	6803      	ldr	r3, [r0, #0]
 8003fce:	4a13      	ldr	r2, [pc, #76]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d012      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd8:	d00f      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fda:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d007      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ff2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d104      	bne.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ffa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ffe:	684a      	ldr	r2, [r1, #4]
 8004000:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004002:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004004:	2301      	movs	r3, #1
 8004006:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800400a:	2300      	movs	r3, #0
 800400c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004010:	4618      	mov	r0, r3
}
 8004012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004016:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004018:	2002      	movs	r0, #2
}
 800401a:	4770      	bx	lr
 800401c:	40010000 	.word	0x40010000

08004020 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004020:	4770      	bx	lr

08004022 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004022:	4770      	bx	lr

08004024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004028:	6802      	ldr	r2, [r0, #0]
 800402a:	6913      	ldr	r3, [r2, #16]
 800402c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004030:	68c1      	ldr	r1, [r0, #12]
 8004032:	430b      	orrs	r3, r1
 8004034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004036:	6883      	ldr	r3, [r0, #8]
 8004038:	6902      	ldr	r2, [r0, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	6942      	ldr	r2, [r0, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	69c2      	ldr	r2, [r0, #28]
 8004042:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004044:	6801      	ldr	r1, [r0, #0]
 8004046:	68cb      	ldr	r3, [r1, #12]
 8004048:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800404c:	f023 030c 	bic.w	r3, r3, #12
 8004050:	4313      	orrs	r3, r2
 8004052:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004054:	6802      	ldr	r2, [r0, #0]
 8004056:	6953      	ldr	r3, [r2, #20]
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	6981      	ldr	r1, [r0, #24]
 800405e:	430b      	orrs	r3, r1
 8004060:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004062:	6803      	ldr	r3, [r0, #0]
 8004064:	4a31      	ldr	r2, [pc, #196]	; (800412c <UART_SetConfig+0x108>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d006      	beq.n	8004078 <UART_SetConfig+0x54>
 800406a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800406e:	4293      	cmp	r3, r2
 8004070:	d002      	beq.n	8004078 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004072:	f7ff fa33 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 8004076:	e001      	b.n	800407c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7ff fa40 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407c:	69e3      	ldr	r3, [r4, #28]
 800407e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004082:	d029      	beq.n	80040d8 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004084:	2100      	movs	r1, #0
 8004086:	1803      	adds	r3, r0, r0
 8004088:	4149      	adcs	r1, r1
 800408a:	181b      	adds	r3, r3, r0
 800408c:	f141 0100 	adc.w	r1, r1, #0
 8004090:	00c9      	lsls	r1, r1, #3
 8004092:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	1818      	adds	r0, r3, r0
 800409a:	6863      	ldr	r3, [r4, #4]
 800409c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80040a0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80040a4:	f141 0100 	adc.w	r1, r1, #0
 80040a8:	f7fc fdb6 	bl	8000c18 <__aeabi_uldivmod>
 80040ac:	4d20      	ldr	r5, [pc, #128]	; (8004130 <UART_SetConfig+0x10c>)
 80040ae:	fba5 3200 	umull	r3, r2, r5, r0
 80040b2:	0951      	lsrs	r1, r2, #5
 80040b4:	2364      	movs	r3, #100	; 0x64
 80040b6:	fb03 0311 	mls	r3, r3, r1, r0
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	3332      	adds	r3, #50	; 0x32
 80040be:	fba5 2303 	umull	r2, r3, r5, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040c8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	6821      	ldr	r1, [r4, #0]
 80040d2:	4413      	add	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }
}
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d8:	2300      	movs	r3, #0
 80040da:	1802      	adds	r2, r0, r0
 80040dc:	eb43 0103 	adc.w	r1, r3, r3
 80040e0:	1812      	adds	r2, r2, r0
 80040e2:	f141 0100 	adc.w	r1, r1, #0
 80040e6:	00c9      	lsls	r1, r1, #3
 80040e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040ec:	00d2      	lsls	r2, r2, #3
 80040ee:	1810      	adds	r0, r2, r0
 80040f0:	f141 0100 	adc.w	r1, r1, #0
 80040f4:	6862      	ldr	r2, [r4, #4]
 80040f6:	1892      	adds	r2, r2, r2
 80040f8:	415b      	adcs	r3, r3
 80040fa:	f7fc fd8d 	bl	8000c18 <__aeabi_uldivmod>
 80040fe:	4d0c      	ldr	r5, [pc, #48]	; (8004130 <UART_SetConfig+0x10c>)
 8004100:	fba5 3200 	umull	r3, r2, r5, r0
 8004104:	0951      	lsrs	r1, r2, #5
 8004106:	2364      	movs	r3, #100	; 0x64
 8004108:	fb03 0311 	mls	r3, r3, r1, r0
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	3332      	adds	r3, #50	; 0x32
 8004110:	fba5 2303 	umull	r2, r3, r5, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	005a      	lsls	r2, r3, #1
 8004118:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800411c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	6821      	ldr	r1, [r4, #0]
 8004126:	4413      	add	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
 800412a:	e7d4      	b.n	80040d6 <UART_SetConfig+0xb2>
 800412c:	40011000 	.word	0x40011000
 8004130:	51eb851f 	.word	0x51eb851f

08004134 <UART_WaitOnFlagUntilTimeout>:
{
 8004134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004138:	4605      	mov	r5, r0
 800413a:	460f      	mov	r7, r1
 800413c:	4616      	mov	r6, r2
 800413e:	4699      	mov	r9, r3
 8004140:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004144:	682c      	ldr	r4, [r5, #0]
 8004146:	6824      	ldr	r4, [r4, #0]
 8004148:	ea37 0304 	bics.w	r3, r7, r4
 800414c:	bf0c      	ite	eq
 800414e:	f04f 0c01 	moveq.w	ip, #1
 8004152:	f04f 0c00 	movne.w	ip, #0
 8004156:	45b4      	cmp	ip, r6
 8004158:	d12d      	bne.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 800415a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800415e:	d0f1      	beq.n	8004144 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004160:	f1b8 0f00 	cmp.w	r8, #0
 8004164:	d005      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0x3e>
 8004166:	f7fe f903 	bl	8002370 <HAL_GetTick>
 800416a:	eba0 0009 	sub.w	r0, r0, r9
 800416e:	4540      	cmp	r0, r8
 8004170:	d9e8      	bls.n	8004144 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004172:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	f102 030c 	add.w	r3, r2, #12
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	320c      	adds	r2, #12
 8004182:	e842 3100 	strex	r1, r3, [r2]
 8004186:	2900      	cmp	r1, #0
 8004188:	d1f3      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0x3e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	f102 0314 	add.w	r3, r2, #20
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	3214      	adds	r2, #20
 800419a:	e842 3100 	strex	r1, r3, [r2]
 800419e:	2900      	cmp	r1, #0
 80041a0:	d1f3      	bne.n	800418a <UART_WaitOnFlagUntilTimeout+0x56>
        huart->gState  = HAL_UART_STATE_READY;
 80041a2:	2320      	movs	r3, #32
 80041a4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041a8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80041ac:	2300      	movs	r3, #0
 80041ae:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80041b2:	2003      	movs	r0, #3
 80041b4:	e000      	b.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 80041b6:	2000      	movs	r0, #0
}
 80041b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080041bc <HAL_UART_Init>:
  if (huart == NULL)
 80041bc:	b358      	cbz	r0, 8004216 <HAL_UART_Init+0x5a>
{
 80041be:	b510      	push	{r4, lr}
 80041c0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80041c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041c6:	b30b      	cbz	r3, 800420c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80041c8:	2324      	movs	r3, #36	; 0x24
 80041ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80041ce:	6822      	ldr	r2, [r4, #0]
 80041d0:	68d3      	ldr	r3, [r2, #12]
 80041d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041d6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80041d8:	4620      	mov	r0, r4
 80041da:	f7ff ff23 	bl	8004024 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	6913      	ldr	r3, [r2, #16]
 80041e2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80041e6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e8:	6822      	ldr	r2, [r4, #0]
 80041ea:	6953      	ldr	r3, [r2, #20]
 80041ec:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80041f0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	68d3      	ldr	r3, [r2, #12]
 80041f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041fa:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	2000      	movs	r0, #0
 80041fe:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004200:	2320      	movs	r3, #32
 8004202:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004206:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800420a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800420c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004210:	f7fd ff56 	bl	80020c0 <HAL_UART_MspInit>
 8004214:	e7d8      	b.n	80041c8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004216:	2001      	movs	r0, #1
}
 8004218:	4770      	bx	lr

0800421a <HAL_UART_Transmit>:
{
 800421a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004222:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b20      	cmp	r3, #32
 800422a:	d154      	bne.n	80042d6 <HAL_UART_Transmit+0xbc>
 800422c:	4604      	mov	r4, r0
 800422e:	460d      	mov	r5, r1
 8004230:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004232:	2900      	cmp	r1, #0
 8004234:	d053      	beq.n	80042de <HAL_UART_Transmit+0xc4>
 8004236:	2a00      	cmp	r2, #0
 8004238:	d053      	beq.n	80042e2 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800423a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800423e:	2b01      	cmp	r3, #1
 8004240:	d051      	beq.n	80042e6 <HAL_UART_Transmit+0xcc>
 8004242:	2301      	movs	r3, #1
 8004244:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	2300      	movs	r3, #0
 800424a:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424c:	2321      	movs	r3, #33	; 0x21
 800424e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004252:	f7fe f88d 	bl	8002370 <HAL_GetTick>
 8004256:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004258:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800425c:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004260:	68a3      	ldr	r3, [r4, #8]
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d005      	beq.n	8004274 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8004268:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 800426c:	2300      	movs	r3, #0
 800426e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004272:	e012      	b.n	800429a <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004274:	6923      	ldr	r3, [r4, #16]
 8004276:	b113      	cbz	r3, 800427e <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8004278:	f04f 0800 	mov.w	r8, #0
 800427c:	e7f6      	b.n	800426c <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 800427e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004280:	2500      	movs	r5, #0
 8004282:	e7f3      	b.n	800426c <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004284:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004288:	6822      	ldr	r2, [r4, #0]
 800428a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004290:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004292:	b292      	uxth	r2, r2
 8004294:	3a01      	subs	r2, #1
 8004296:	b292      	uxth	r2, r2
 8004298:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800429a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800429c:	b29b      	uxth	r3, r3
 800429e:	b173      	cbz	r3, 80042be <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a0:	9600      	str	r6, [sp, #0]
 80042a2:	463b      	mov	r3, r7
 80042a4:	2200      	movs	r2, #0
 80042a6:	2180      	movs	r1, #128	; 0x80
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7ff ff43 	bl	8004134 <UART_WaitOnFlagUntilTimeout>
 80042ae:	b9e0      	cbnz	r0, 80042ea <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80042b0:	2d00      	cmp	r5, #0
 80042b2:	d0e7      	beq.n	8004284 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042bc:	e7e8      	b.n	8004290 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042be:	9600      	str	r6, [sp, #0]
 80042c0:	463b      	mov	r3, r7
 80042c2:	2200      	movs	r2, #0
 80042c4:	2140      	movs	r1, #64	; 0x40
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7ff ff34 	bl	8004134 <UART_WaitOnFlagUntilTimeout>
 80042cc:	b978      	cbnz	r0, 80042ee <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80042ce:	2320      	movs	r3, #32
 80042d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80042d4:	e000      	b.n	80042d8 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80042d6:	2002      	movs	r0, #2
}
 80042d8:	b002      	add	sp, #8
 80042da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80042de:	2001      	movs	r0, #1
 80042e0:	e7fa      	b.n	80042d8 <HAL_UART_Transmit+0xbe>
 80042e2:	2001      	movs	r0, #1
 80042e4:	e7f8      	b.n	80042d8 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80042e6:	2002      	movs	r0, #2
 80042e8:	e7f6      	b.n	80042d8 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80042ea:	2003      	movs	r0, #3
 80042ec:	e7f4      	b.n	80042d8 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80042ee:	2003      	movs	r0, #3
 80042f0:	e7f2      	b.n	80042d8 <HAL_UART_Transmit+0xbe>
	...

080042f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80042f4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80042f6:	4903      	ldr	r1, [pc, #12]	; (8004304 <MX_FATFS_Init+0x10>)
 80042f8:	4803      	ldr	r0, [pc, #12]	; (8004308 <MX_FATFS_Init+0x14>)
 80042fa:	f002 f8a3 	bl	8006444 <FATFS_LinkDriver>
 80042fe:	4b03      	ldr	r3, [pc, #12]	; (800430c <MX_FATFS_Init+0x18>)
 8004300:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004302:	bd08      	pop	{r3, pc}
 8004304:	200039b4 	.word	0x200039b4
 8004308:	20000010 	.word	0x20000010
 800430c:	200039b8 	.word	0x200039b8

08004310 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8004310:	2000      	movs	r0, #0
 8004312:	4770      	bx	lr

08004314 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004316:	f7fc ff7b 	bl	8001210 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800431a:	b2c0      	uxtb	r0, r0
 800431c:	bd08      	pop	{r3, pc}

0800431e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800431e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8004320:	f7fd f834 	bl	800138c <SD_disk_status>
  /* USER CODE END STATUS */
}
 8004324:	b2c0      	uxtb	r0, r0
 8004326:	bd08      	pop	{r3, pc}

08004328 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004328:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800432a:	f7fd f839 	bl	80013a0 <SD_disk_read>
  /* USER CODE END READ */
}
 800432e:	b2c0      	uxtb	r0, r0
 8004330:	bd08      	pop	{r3, pc}

08004332 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004332:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004334:	f7fd f880 	bl	8001438 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8004338:	b2c0      	uxtb	r0, r0
 800433a:	bd08      	pop	{r3, pc}

0800433c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800433c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800433e:	f7fd f8dd 	bl	80014fc <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8004342:	b2c0      	uxtb	r0, r0
 8004344:	bd08      	pop	{r3, pc}
	...

08004348 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004348:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800434a:	4b04      	ldr	r3, [pc, #16]	; (800435c <disk_status+0x14>)
 800434c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8004350:	6852      	ldr	r2, [r2, #4]
 8004352:	6852      	ldr	r2, [r2, #4]
 8004354:	4403      	add	r3, r0
 8004356:	7a18      	ldrb	r0, [r3, #8]
 8004358:	4790      	blx	r2
  return stat;
}
 800435a:	bd08      	pop	{r3, pc}
 800435c:	20003be4 	.word	0x20003be4

08004360 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004360:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <disk_initialize+0x24>)
 8004364:	5c1b      	ldrb	r3, [r3, r0]
 8004366:	b953      	cbnz	r3, 800437e <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <disk_initialize+0x24>)
 800436a:	2201      	movs	r2, #1
 800436c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800436e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8004372:	6852      	ldr	r2, [r2, #4]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	4418      	add	r0, r3
 8004378:	7a00      	ldrb	r0, [r0, #8]
 800437a:	4790      	blx	r2
  }
  return stat;
}
 800437c:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 800437e:	2000      	movs	r0, #0
 8004380:	e7fc      	b.n	800437c <disk_initialize+0x1c>
 8004382:	bf00      	nop
 8004384:	20003be4 	.word	0x20003be4

08004388 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004388:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800438a:	4c04      	ldr	r4, [pc, #16]	; (800439c <disk_read+0x14>)
 800438c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8004390:	686d      	ldr	r5, [r5, #4]
 8004392:	68ad      	ldr	r5, [r5, #8]
 8004394:	4404      	add	r4, r0
 8004396:	7a20      	ldrb	r0, [r4, #8]
 8004398:	47a8      	blx	r5
  return res;
}
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	20003be4 	.word	0x20003be4

080043a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80043a0:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80043a2:	4c04      	ldr	r4, [pc, #16]	; (80043b4 <disk_write+0x14>)
 80043a4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80043a8:	686d      	ldr	r5, [r5, #4]
 80043aa:	68ed      	ldr	r5, [r5, #12]
 80043ac:	4404      	add	r4, r0
 80043ae:	7a20      	ldrb	r0, [r4, #8]
 80043b0:	47a8      	blx	r5
  return res;
}
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	20003be4 	.word	0x20003be4

080043b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80043b8:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80043ba:	4b04      	ldr	r3, [pc, #16]	; (80043cc <disk_ioctl+0x14>)
 80043bc:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80043c0:	6864      	ldr	r4, [r4, #4]
 80043c2:	6924      	ldr	r4, [r4, #16]
 80043c4:	4403      	add	r3, r0
 80043c6:	7a18      	ldrb	r0, [r3, #8]
 80043c8:	47a0      	blx	r4
  return res;
}
 80043ca:	bd10      	pop	{r4, pc}
 80043cc:	20003be4 	.word	0x20003be4

080043d0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80043d0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80043d2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80043d4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80043d8:	4770      	bx	lr

080043da <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80043da:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80043dc:	7883      	ldrb	r3, [r0, #2]
 80043de:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80043e2:	7843      	ldrb	r3, [r0, #1]
 80043e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80043e8:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80043ea:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80043ee:	4770      	bx	lr

080043f0 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80043f0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80043f2:	0a09      	lsrs	r1, r1, #8
 80043f4:	7041      	strb	r1, [r0, #1]
}
 80043f6:	4770      	bx	lr

080043f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80043f8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80043fa:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80043fe:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004400:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004404:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004406:	0e09      	lsrs	r1, r1, #24
 8004408:	70c1      	strb	r1, [r0, #3]
}
 800440a:	4770      	bx	lr

0800440c <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800440c:	4694      	mov	ip, r2
 800440e:	b132      	cbz	r2, 800441e <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8004410:	780a      	ldrb	r2, [r1, #0]
 8004412:	3101      	adds	r1, #1
 8004414:	7002      	strb	r2, [r0, #0]
 8004416:	3001      	adds	r0, #1
		} while (--cnt);
 8004418:	f1bc 0c01 	subs.w	ip, ip, #1
 800441c:	d1f8      	bne.n	8004410 <mem_cpy+0x4>
	}
}
 800441e:	4770      	bx	lr

08004420 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8004420:	7001      	strb	r1, [r0, #0]
 8004422:	3001      	adds	r0, #1
	} while (--cnt);
 8004424:	3a01      	subs	r2, #1
 8004426:	d1fb      	bne.n	8004420 <mem_set>
}
 8004428:	4770      	bx	lr

0800442a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800442a:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800442c:	f89c 0000 	ldrb.w	r0, [ip]
 8004430:	f10c 0c01 	add.w	ip, ip, #1
 8004434:	780b      	ldrb	r3, [r1, #0]
 8004436:	3101      	adds	r1, #1
 8004438:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 800443a:	3a01      	subs	r2, #1
 800443c:	d001      	beq.n	8004442 <mem_cmp+0x18>
 800443e:	2800      	cmp	r0, #0
 8004440:	d0f4      	beq.n	800442c <mem_cmp+0x2>

	return r;
}
 8004442:	4770      	bx	lr

08004444 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004444:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8004446:	e000      	b.n	800444a <chk_chr+0x6>
 8004448:	3301      	adds	r3, #1
 800444a:	7818      	ldrb	r0, [r3, #0]
 800444c:	b108      	cbz	r0, 8004452 <chk_chr+0xe>
 800444e:	4288      	cmp	r0, r1
 8004450:	d1fa      	bne.n	8004448 <chk_chr+0x4>
	return *str;
}
 8004452:	4770      	bx	lr

08004454 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004454:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004456:	2500      	movs	r5, #0
 8004458:	462b      	mov	r3, r5
 800445a:	e001      	b.n	8004460 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800445c:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800445e:	3301      	adds	r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d815      	bhi.n	8004490 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8004464:	011a      	lsls	r2, r3, #4
 8004466:	4c17      	ldr	r4, [pc, #92]	; (80044c4 <chk_lock+0x70>)
 8004468:	58a2      	ldr	r2, [r4, r2]
 800446a:	2a00      	cmp	r2, #0
 800446c:	d0f6      	beq.n	800445c <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800446e:	6804      	ldr	r4, [r0, #0]
 8004470:	42a2      	cmp	r2, r4
 8004472:	d1f4      	bne.n	800445e <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8004474:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <chk_lock+0x70>)
 8004476:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800447a:	6854      	ldr	r4, [r2, #4]
 800447c:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800447e:	4294      	cmp	r4, r2
 8004480:	d1ed      	bne.n	800445e <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8004482:	4a10      	ldr	r2, [pc, #64]	; (80044c4 <chk_lock+0x70>)
 8004484:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004488:	6894      	ldr	r4, [r2, #8]
 800448a:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 800448c:	4294      	cmp	r4, r2
 800448e:	d1e6      	bne.n	800445e <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004490:	2b02      	cmp	r3, #2
 8004492:	d00a      	beq.n	80044aa <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004494:	b9a1      	cbnz	r1, 80044c0 <chk_lock+0x6c>
 8004496:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <chk_lock+0x70>)
 8004498:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800449c:	899b      	ldrh	r3, [r3, #12]
 800449e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a2:	d00b      	beq.n	80044bc <chk_lock+0x68>
 80044a4:	2000      	movs	r0, #0
}
 80044a6:	bc30      	pop	{r4, r5}
 80044a8:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80044aa:	b92d      	cbnz	r5, 80044b8 <chk_lock+0x64>
 80044ac:	2902      	cmp	r1, #2
 80044ae:	d001      	beq.n	80044b4 <chk_lock+0x60>
 80044b0:	2012      	movs	r0, #18
 80044b2:	e7f8      	b.n	80044a6 <chk_lock+0x52>
 80044b4:	2000      	movs	r0, #0
 80044b6:	e7f6      	b.n	80044a6 <chk_lock+0x52>
 80044b8:	2000      	movs	r0, #0
 80044ba:	e7f4      	b.n	80044a6 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80044bc:	2010      	movs	r0, #16
 80044be:	e7f2      	b.n	80044a6 <chk_lock+0x52>
 80044c0:	2010      	movs	r0, #16
 80044c2:	e7f0      	b.n	80044a6 <chk_lock+0x52>
 80044c4:	200039c0 	.word	0x200039c0

080044c8 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80044c8:	2000      	movs	r0, #0
 80044ca:	e000      	b.n	80044ce <enq_lock+0x6>
 80044cc:	3001      	adds	r0, #1
 80044ce:	2801      	cmp	r0, #1
 80044d0:	d804      	bhi.n	80044dc <enq_lock+0x14>
 80044d2:	0103      	lsls	r3, r0, #4
 80044d4:	4a03      	ldr	r2, [pc, #12]	; (80044e4 <enq_lock+0x1c>)
 80044d6:	58d3      	ldr	r3, [r2, r3]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f7      	bne.n	80044cc <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 80044dc:	3802      	subs	r0, #2
 80044de:	bf18      	it	ne
 80044e0:	2001      	movne	r0, #1
 80044e2:	4770      	bx	lr
 80044e4:	200039c0 	.word	0x200039c0

080044e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80044e8:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044ea:	2300      	movs	r3, #0
 80044ec:	e000      	b.n	80044f0 <inc_lock+0x8>
 80044ee:	3301      	adds	r3, #1
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d813      	bhi.n	800451c <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 80044f4:	011a      	lsls	r2, r3, #4
 80044f6:	4c24      	ldr	r4, [pc, #144]	; (8004588 <inc_lock+0xa0>)
 80044f8:	58a4      	ldr	r4, [r4, r2]
 80044fa:	6802      	ldr	r2, [r0, #0]
 80044fc:	4294      	cmp	r4, r2
 80044fe:	d1f6      	bne.n	80044ee <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8004500:	4a21      	ldr	r2, [pc, #132]	; (8004588 <inc_lock+0xa0>)
 8004502:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004506:	6854      	ldr	r4, [r2, #4]
 8004508:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 800450a:	4294      	cmp	r4, r2
 800450c:	d1ef      	bne.n	80044ee <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 800450e:	4a1e      	ldr	r2, [pc, #120]	; (8004588 <inc_lock+0xa0>)
 8004510:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004514:	6894      	ldr	r4, [r2, #8]
 8004516:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8004518:	4294      	cmp	r4, r2
 800451a:	d1e8      	bne.n	80044ee <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800451c:	2b02      	cmp	r3, #2
 800451e:	d00d      	beq.n	800453c <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004520:	b121      	cbz	r1, 800452c <inc_lock+0x44>
 8004522:	4a19      	ldr	r2, [pc, #100]	; (8004588 <inc_lock+0xa0>)
 8004524:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004528:	8992      	ldrh	r2, [r2, #12]
 800452a:	bb52      	cbnz	r2, 8004582 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800452c:	b9f1      	cbnz	r1, 800456c <inc_lock+0x84>
 800452e:	4a16      	ldr	r2, [pc, #88]	; (8004588 <inc_lock+0xa0>)
 8004530:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004534:	8991      	ldrh	r1, [r2, #12]
 8004536:	3101      	adds	r1, #1
 8004538:	b289      	uxth	r1, r1
 800453a:	e019      	b.n	8004570 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800453c:	2300      	movs	r3, #0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d805      	bhi.n	800454e <inc_lock+0x66>
 8004542:	011a      	lsls	r2, r3, #4
 8004544:	4c10      	ldr	r4, [pc, #64]	; (8004588 <inc_lock+0xa0>)
 8004546:	58a2      	ldr	r2, [r4, r2]
 8004548:	b10a      	cbz	r2, 800454e <inc_lock+0x66>
 800454a:	3301      	adds	r3, #1
 800454c:	e7f7      	b.n	800453e <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800454e:	2b02      	cmp	r3, #2
 8004550:	d015      	beq.n	800457e <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 8004552:	4d0d      	ldr	r5, [pc, #52]	; (8004588 <inc_lock+0xa0>)
 8004554:	011c      	lsls	r4, r3, #4
 8004556:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 800455a:	6806      	ldr	r6, [r0, #0]
 800455c:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800455e:	6884      	ldr	r4, [r0, #8]
 8004560:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8004562:	6940      	ldr	r0, [r0, #20]
 8004564:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8004566:	2000      	movs	r0, #0
 8004568:	8190      	strh	r0, [r2, #12]
 800456a:	e7d9      	b.n	8004520 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800456c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004570:	4a05      	ldr	r2, [pc, #20]	; (8004588 <inc_lock+0xa0>)
 8004572:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004576:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8004578:	1c58      	adds	r0, r3, #1
}
 800457a:	bc70      	pop	{r4, r5, r6}
 800457c:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800457e:	2000      	movs	r0, #0
 8004580:	e7fb      	b.n	800457a <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004582:	2000      	movs	r0, #0
 8004584:	e7f9      	b.n	800457a <inc_lock+0x92>
 8004586:	bf00      	nop
 8004588:	200039c0 	.word	0x200039c0

0800458c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800458c:	3801      	subs	r0, #1
 800458e:	2801      	cmp	r0, #1
 8004590:	d815      	bhi.n	80045be <dec_lock+0x32>
		n = Files[i].ctr;
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <dec_lock+0x3c>)
 8004594:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8004598:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	d003      	beq.n	80045a8 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 80045a0:	b11b      	cbz	r3, 80045aa <dec_lock+0x1e>
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	e000      	b.n	80045aa <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80045a8:	2300      	movs	r3, #0
		Files[i].ctr = n;
 80045aa:	4a07      	ldr	r2, [pc, #28]	; (80045c8 <dec_lock+0x3c>)
 80045ac:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80045b0:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80045b2:	b933      	cbnz	r3, 80045c2 <dec_lock+0x36>
 80045b4:	0103      	lsls	r3, r0, #4
 80045b6:	2000      	movs	r0, #0
 80045b8:	4a03      	ldr	r2, [pc, #12]	; (80045c8 <dec_lock+0x3c>)
 80045ba:	50d0      	str	r0, [r2, r3]
 80045bc:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80045be:	2002      	movs	r0, #2
 80045c0:	4770      	bx	lr
		res = FR_OK;
 80045c2:	2000      	movs	r0, #0
	}
	return res;
}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	200039c0 	.word	0x200039c0

080045cc <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80045cc:	2300      	movs	r3, #0
 80045ce:	e003      	b.n	80045d8 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 80045d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045d4:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 80045d6:	3301      	adds	r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d811      	bhi.n	8004600 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80045dc:	011a      	lsls	r2, r3, #4
 80045de:	4909      	ldr	r1, [pc, #36]	; (8004604 <clear_lock+0x38>)
 80045e0:	588a      	ldr	r2, [r1, r2]
 80045e2:	4282      	cmp	r2, r0
 80045e4:	d1f7      	bne.n	80045d6 <clear_lock+0xa>
{
 80045e6:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80045e8:	011a      	lsls	r2, r3, #4
 80045ea:	2400      	movs	r4, #0
 80045ec:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 80045ee:	3301      	adds	r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d8ed      	bhi.n	80045d0 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80045f4:	011a      	lsls	r2, r3, #4
 80045f6:	4903      	ldr	r1, [pc, #12]	; (8004604 <clear_lock+0x38>)
 80045f8:	588a      	ldr	r2, [r1, r2]
 80045fa:	4282      	cmp	r2, r0
 80045fc:	d1f7      	bne.n	80045ee <clear_lock+0x22>
 80045fe:	e7f3      	b.n	80045e8 <clear_lock+0x1c>
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	200039c0 	.word	0x200039c0

08004608 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8004608:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800460a:	69c3      	ldr	r3, [r0, #28]
 800460c:	3b02      	subs	r3, #2
 800460e:	428b      	cmp	r3, r1
 8004610:	d904      	bls.n	800461c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8004612:	8943      	ldrh	r3, [r0, #10]
 8004614:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004616:	fb01 0003 	mla	r0, r1, r3, r0
 800461a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800461c:	2000      	movs	r0, #0
}
 800461e:	4770      	bx	lr

08004620 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004620:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004622:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004624:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004626:	8990      	ldrh	r0, [r2, #12]
 8004628:	fbb1 f1f0 	udiv	r1, r1, r0
 800462c:	8952      	ldrh	r2, [r2, #10]
 800462e:	fbb1 f1f2 	udiv	r1, r1, r2
 8004632:	e001      	b.n	8004638 <clmt_clust+0x18>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 8004634:	1a09      	subs	r1, r1, r0
 8004636:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004638:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800463a:	b118      	cbz	r0, 8004644 <clmt_clust+0x24>
		if (cl < ncl) break;	/* In this fragment? */
 800463c:	4281      	cmp	r1, r0
 800463e:	d2f9      	bcs.n	8004634 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8004640:	6858      	ldr	r0, [r3, #4]
 8004642:	4408      	add	r0, r1
}
 8004644:	4770      	bx	lr

08004646 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004646:	b570      	push	{r4, r5, r6, lr}
 8004648:	4606      	mov	r6, r0
 800464a:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800464c:	f101 001a 	add.w	r0, r1, #26
 8004650:	f7ff febe 	bl	80043d0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8004654:	7833      	ldrb	r3, [r6, #0]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d000      	beq.n	800465c <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800465e:	f105 0014 	add.w	r0, r5, #20
 8004662:	f7ff feb5 	bl	80043d0 <ld_word>
 8004666:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800466a:	e7f6      	b.n	800465a <ld_clust+0x14>

0800466c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4606      	mov	r6, r0
 8004670:	460c      	mov	r4, r1
 8004672:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004674:	b291      	uxth	r1, r2
 8004676:	f104 001a 	add.w	r0, r4, #26
 800467a:	f7ff feb9 	bl	80043f0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800467e:	7833      	ldrb	r3, [r6, #0]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d000      	beq.n	8004686 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8004684:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004686:	0c29      	lsrs	r1, r5, #16
 8004688:	f104 0014 	add.w	r0, r4, #20
 800468c:	f7ff feb0 	bl	80043f0 <st_word>
}
 8004690:	e7f8      	b.n	8004684 <st_clust+0x18>
	...

08004694 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8004694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004698:	4680      	mov	r8, r0
 800469a:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800469c:	f101 001a 	add.w	r0, r1, #26
 80046a0:	f7ff fe96 	bl	80043d0 <ld_word>
 80046a4:	bb50      	cbnz	r0, 80046fc <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80046a6:	7835      	ldrb	r5, [r6, #0]
 80046a8:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 80046ac:	3d01      	subs	r5, #1
 80046ae:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80046b2:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80046b6:	2701      	movs	r7, #1
 80046b8:	2400      	movs	r4, #0
 80046ba:	e004      	b.n	80046c6 <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80046bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046c0:	4298      	cmp	r0, r3
 80046c2:	d120      	bne.n	8004706 <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80046c4:	3401      	adds	r4, #1
 80046c6:	2c0c      	cmp	r4, #12
 80046c8:	d80d      	bhi.n	80046e6 <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <pick_lfn+0x80>)
 80046cc:	5d18      	ldrb	r0, [r3, r4]
 80046ce:	4430      	add	r0, r6
 80046d0:	f7ff fe7e 	bl	80043d0 <ld_word>
		if (wc) {
 80046d4:	2f00      	cmp	r7, #0
 80046d6:	d0f1      	beq.n	80046bc <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80046d8:	2dfe      	cmp	r5, #254	; 0xfe
 80046da:	d812      	bhi.n	8004702 <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80046dc:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 80046e0:	4607      	mov	r7, r0
 80046e2:	3501      	adds	r5, #1
 80046e4:	e7ee      	b.n	80046c4 <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80046e6:	7833      	ldrb	r3, [r6, #0]
 80046e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80046ec:	d00d      	beq.n	800470a <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80046ee:	2dfe      	cmp	r5, #254	; 0xfe
 80046f0:	d80d      	bhi.n	800470e <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 80046f8:	2001      	movs	r0, #1
 80046fa:	e000      	b.n	80046fe <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80046fc:	2000      	movs	r0, #0
}
 80046fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004702:	2000      	movs	r0, #0
 8004704:	e7fb      	b.n	80046fe <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004706:	2000      	movs	r0, #0
 8004708:	e7f9      	b.n	80046fe <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 800470a:	2001      	movs	r0, #1
 800470c:	e7f7      	b.n	80046fe <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800470e:	2000      	movs	r0, #0
 8004710:	e7f5      	b.n	80046fe <pick_lfn+0x6a>
 8004712:	bf00      	nop
 8004714:	0800a378 	.word	0x0800a378

08004718 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800471c:	4680      	mov	r8, r0
 800471e:	460f      	mov	r7, r1
 8004720:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004722:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004724:	230f      	movs	r3, #15
 8004726:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8004728:	2400      	movs	r4, #0
 800472a:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 800472c:	4621      	mov	r1, r4
 800472e:	f107 001a 	add.w	r0, r7, #26
 8004732:	f7ff fe5d 	bl	80043f0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004736:	f109 36ff 	add.w	r6, r9, #4294967295
 800473a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800473e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8004742:	4625      	mov	r5, r4
 8004744:	e002      	b.n	800474c <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 8004746:	3401      	adds	r4, #1
 8004748:	2c0c      	cmp	r4, #12
 800474a:	d811      	bhi.n	8004770 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800474c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004750:	429d      	cmp	r5, r3
 8004752:	d002      	beq.n	800475a <put_lfn+0x42>
 8004754:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8004758:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800475a:	4b0c      	ldr	r3, [pc, #48]	; (800478c <put_lfn+0x74>)
 800475c:	5d18      	ldrb	r0, [r3, r4]
 800475e:	4629      	mov	r1, r5
 8004760:	4438      	add	r0, r7
 8004762:	f7ff fe45 	bl	80043f0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004766:	2d00      	cmp	r5, #0
 8004768:	d1ed      	bne.n	8004746 <put_lfn+0x2e>
 800476a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800476e:	e7ea      	b.n	8004746 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004774:	429d      	cmp	r5, r3
 8004776:	d002      	beq.n	800477e <put_lfn+0x66>
 8004778:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800477c:	b90b      	cbnz	r3, 8004782 <put_lfn+0x6a>
 800477e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004782:	f887 9000 	strb.w	r9, [r7]
}
 8004786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800478a:	bf00      	nop
 800478c:	0800a378 	.word	0x0800a378

08004790 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	4605      	mov	r5, r0
 8004796:	4616      	mov	r6, r2
 8004798:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800479a:	220b      	movs	r2, #11
 800479c:	f7ff fe36 	bl	800440c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80047a0:	2c05      	cmp	r4, #5
 80047a2:	d811      	bhi.n	80047c8 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 80047a4:	2307      	movs	r3, #7
 80047a6:	e01f      	b.n	80047e8 <gen_numname+0x58>
 80047a8:	3101      	adds	r1, #1
 80047aa:	290f      	cmp	r1, #15
 80047ac:	d80c      	bhi.n	80047c8 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 80047ae:	f003 0c01 	and.w	ip, r3, #1
 80047b2:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 80047b6:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80047b8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80047bc:	d0f4      	beq.n	80047a8 <gen_numname+0x18>
 80047be:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 80047c2:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 80047c6:	e7ef      	b.n	80047a8 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 80047c8:	8833      	ldrh	r3, [r6, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0ea      	beq.n	80047a4 <gen_numname+0x14>
			wc = *lfn++;
 80047ce:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 80047d0:	2100      	movs	r1, #0
 80047d2:	e7ea      	b.n	80047aa <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 80047d4:	1e5a      	subs	r2, r3, #1
 80047d6:	3308      	adds	r3, #8
 80047d8:	446b      	add	r3, sp
 80047da:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 80047de:	0921      	lsrs	r1, r4, #4
	} while (seq);
 80047e0:	2c0f      	cmp	r4, #15
 80047e2:	d90a      	bls.n	80047fa <gen_numname+0x6a>
		ns[i--] = c;
 80047e4:	4613      	mov	r3, r2
		seq /= 16;
 80047e6:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 80047e8:	f004 020f 	and.w	r2, r4, #15
 80047ec:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 80047f0:	2939      	cmp	r1, #57	; 0x39
 80047f2:	d9ef      	bls.n	80047d4 <gen_numname+0x44>
 80047f4:	f102 0137 	add.w	r1, r2, #55	; 0x37
 80047f8:	e7ec      	b.n	80047d4 <gen_numname+0x44>
	ns[i] = '~';
 80047fa:	217e      	movs	r1, #126	; 0x7e
 80047fc:	f102 0308 	add.w	r3, r2, #8
 8004800:	446b      	add	r3, sp
 8004802:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004806:	2300      	movs	r3, #0
 8004808:	e000      	b.n	800480c <gen_numname+0x7c>
 800480a:	3301      	adds	r3, #1
 800480c:	4293      	cmp	r3, r2
 800480e:	d209      	bcs.n	8004824 <gen_numname+0x94>
 8004810:	5ce9      	ldrb	r1, [r5, r3]
 8004812:	2920      	cmp	r1, #32
 8004814:	d1f9      	bne.n	800480a <gen_numname+0x7a>
 8004816:	e005      	b.n	8004824 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004818:	2020      	movs	r0, #32
 800481a:	1c59      	adds	r1, r3, #1
 800481c:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 800481e:	2907      	cmp	r1, #7
 8004820:	d809      	bhi.n	8004836 <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004822:	460b      	mov	r3, r1
 8004824:	2a07      	cmp	r2, #7
 8004826:	d8f7      	bhi.n	8004818 <gen_numname+0x88>
 8004828:	f102 0108 	add.w	r1, r2, #8
 800482c:	4469      	add	r1, sp
 800482e:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8004832:	3201      	adds	r2, #1
 8004834:	e7f1      	b.n	800481a <gen_numname+0x8a>
}
 8004836:	b002      	add	sp, #8
 8004838:	bd70      	pop	{r4, r5, r6, pc}

0800483a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800483a:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800483c:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 8004840:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004842:	01c3      	lsls	r3, r0, #7
 8004844:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8004848:	7808      	ldrb	r0, [r1, #0]
 800484a:	3101      	adds	r1, #1
 800484c:	fa50 f383 	uxtab	r3, r0, r3
 8004850:	b2d8      	uxtb	r0, r3
	} while (--n);
 8004852:	f1bc 0c01 	subs.w	ip, ip, #1
 8004856:	d1f4      	bne.n	8004842 <sum_sfn+0x8>
	return sum;
}
 8004858:	4770      	bx	lr

0800485a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800485a:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800485c:	6800      	ldr	r0, [r0, #0]
 800485e:	b138      	cbz	r0, 8004870 <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004860:	4602      	mov	r2, r0
 8004862:	7813      	ldrb	r3, [r2, #0]
 8004864:	2b1f      	cmp	r3, #31
 8004866:	d906      	bls.n	8004876 <get_ldnumber+0x1c>
 8004868:	2b3a      	cmp	r3, #58	; 0x3a
 800486a:	d004      	beq.n	8004876 <get_ldnumber+0x1c>
 800486c:	3201      	adds	r2, #1
 800486e:	e7f8      	b.n	8004862 <get_ldnumber+0x8>
	int vol = -1;
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004876:	2b3a      	cmp	r3, #58	; 0x3a
 8004878:	d001      	beq.n	800487e <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800487a:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800487c:	4770      	bx	lr
{
 800487e:	b410      	push	{r4}
			i = *tp++ - '0';
 8004880:	4603      	mov	r3, r0
 8004882:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004886:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004888:	2809      	cmp	r0, #9
 800488a:	d808      	bhi.n	800489e <get_ldnumber+0x44>
 800488c:	429a      	cmp	r2, r3
 800488e:	d002      	beq.n	8004896 <get_ldnumber+0x3c>
	int vol = -1;
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	e005      	b.n	80048a2 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004896:	b938      	cbnz	r0, 80048a8 <get_ldnumber+0x4e>
					*path = ++tt;
 8004898:	3201      	adds	r2, #1
 800489a:	600a      	str	r2, [r1, #0]
 800489c:	e001      	b.n	80048a2 <get_ldnumber+0x48>
	int vol = -1;
 800489e:	f04f 30ff 	mov.w	r0, #4294967295
}
 80048a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048a6:	4770      	bx	lr
	int vol = -1;
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 80048ac:	e7f9      	b.n	80048a2 <get_ldnumber+0x48>

080048ae <putc_init>:
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
 80048ae:	6001      	str	r1, [r0, #0]
	pb->nchr = pb->idx = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	6043      	str	r3, [r0, #4]
 80048b4:	6083      	str	r3, [r0, #8]
}
 80048b6:	4770      	bx	lr

080048b8 <validate>:
{
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80048bc:	4604      	mov	r4, r0
 80048be:	b198      	cbz	r0, 80048e8 <validate+0x30>
 80048c0:	6803      	ldr	r3, [r0, #0]
 80048c2:	b19b      	cbz	r3, 80048ec <validate+0x34>
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	b1a2      	cbz	r2, 80048f2 <validate+0x3a>
 80048c8:	8881      	ldrh	r1, [r0, #4]
 80048ca:	88da      	ldrh	r2, [r3, #6]
 80048cc:	4291      	cmp	r1, r2
 80048ce:	d003      	beq.n	80048d8 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80048d0:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80048d2:	2400      	movs	r4, #0
 80048d4:	602c      	str	r4, [r5, #0]
}
 80048d6:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80048d8:	7858      	ldrb	r0, [r3, #1]
 80048da:	f7ff fd35 	bl	8004348 <disk_status>
 80048de:	f010 0001 	ands.w	r0, r0, #1
 80048e2:	d109      	bne.n	80048f8 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80048e4:	6824      	ldr	r4, [r4, #0]
 80048e6:	e7f5      	b.n	80048d4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80048e8:	2009      	movs	r0, #9
 80048ea:	e7f3      	b.n	80048d4 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80048ec:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 80048ee:	2009      	movs	r0, #9
 80048f0:	e7f0      	b.n	80048d4 <validate+0x1c>
 80048f2:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80048f4:	2400      	movs	r4, #0
 80048f6:	e7ed      	b.n	80048d4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80048f8:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80048fa:	2400      	movs	r4, #0
 80048fc:	e7ea      	b.n	80048d4 <validate+0x1c>

080048fe <sync_window>:
{
 80048fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004902:	78c5      	ldrb	r5, [r0, #3]
 8004904:	b915      	cbnz	r5, 800490c <sync_window+0xe>
}
 8004906:	4628      	mov	r0, r5
 8004908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800490c:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800490e:	6b47      	ldr	r7, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004910:	f100 0838 	add.w	r8, r0, #56	; 0x38
 8004914:	2301      	movs	r3, #1
 8004916:	463a      	mov	r2, r7
 8004918:	4641      	mov	r1, r8
 800491a:	7840      	ldrb	r0, [r0, #1]
 800491c:	f7ff fd40 	bl	80043a0 <disk_write>
 8004920:	4605      	mov	r5, r0
 8004922:	b9a0      	cbnz	r0, 800494e <sync_window+0x50>
			fs->wflag = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004928:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800492a:	1afb      	subs	r3, r7, r3
 800492c:	6a22      	ldr	r2, [r4, #32]
 800492e:	4293      	cmp	r3, r2
 8004930:	d2e9      	bcs.n	8004906 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004932:	78a6      	ldrb	r6, [r4, #2]
 8004934:	e008      	b.n	8004948 <sync_window+0x4a>
					wsect += fs->fsize;
 8004936:	6a23      	ldr	r3, [r4, #32]
 8004938:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800493a:	2301      	movs	r3, #1
 800493c:	463a      	mov	r2, r7
 800493e:	4641      	mov	r1, r8
 8004940:	7860      	ldrb	r0, [r4, #1]
 8004942:	f7ff fd2d 	bl	80043a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004946:	3e01      	subs	r6, #1
 8004948:	2e01      	cmp	r6, #1
 800494a:	d8f4      	bhi.n	8004936 <sync_window+0x38>
 800494c:	e7db      	b.n	8004906 <sync_window+0x8>
			res = FR_DISK_ERR;
 800494e:	2501      	movs	r5, #1
 8004950:	e7d9      	b.n	8004906 <sync_window+0x8>

08004952 <move_window>:
{
 8004952:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004954:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004956:	428b      	cmp	r3, r1
 8004958:	d102      	bne.n	8004960 <move_window+0xe>
	FRESULT res = FR_OK;
 800495a:	2600      	movs	r6, #0
}
 800495c:	4630      	mov	r0, r6
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	4604      	mov	r4, r0
 8004962:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8004964:	f7ff ffcb 	bl	80048fe <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004968:	4606      	mov	r6, r0
 800496a:	2800      	cmp	r0, #0
 800496c:	d1f6      	bne.n	800495c <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800496e:	2301      	movs	r3, #1
 8004970:	462a      	mov	r2, r5
 8004972:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8004976:	7860      	ldrb	r0, [r4, #1]
 8004978:	f7ff fd06 	bl	8004388 <disk_read>
 800497c:	b110      	cbz	r0, 8004984 <move_window+0x32>
				res = FR_DISK_ERR;
 800497e:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004980:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8004984:	6365      	str	r5, [r4, #52]	; 0x34
 8004986:	e7e9      	b.n	800495c <move_window+0xa>

08004988 <check_fs>:
{
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800498c:	2300      	movs	r3, #0
 800498e:	70c3      	strb	r3, [r0, #3]
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004996:	f7ff ffdc 	bl	8004952 <move_window>
 800499a:	bb30      	cbnz	r0, 80049ea <check_fs+0x62>
 800499c:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800499e:	f204 2036 	addw	r0, r4, #566	; 0x236
 80049a2:	f7ff fd15 	bl	80043d0 <ld_word>
 80049a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80049aa:	4298      	cmp	r0, r3
 80049ac:	d11f      	bne.n	80049ee <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80049ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80049b2:	2be9      	cmp	r3, #233	; 0xe9
 80049b4:	d007      	beq.n	80049c6 <check_fs+0x3e>
 80049b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80049bc:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <check_fs+0x6c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d001      	beq.n	80049c6 <check_fs+0x3e>
	return 2;
 80049c2:	2502      	movs	r5, #2
 80049c4:	e014      	b.n	80049f0 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80049c6:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 80049ca:	f7ff fd06 	bl	80043da <ld_dword>
 80049ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <check_fs+0x70>)
 80049d4:	4298      	cmp	r0, r3
 80049d6:	d00b      	beq.n	80049f0 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80049d8:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 80049dc:	f7ff fcfd 	bl	80043da <ld_dword>
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <check_fs+0x74>)
 80049e2:	4298      	cmp	r0, r3
 80049e4:	d004      	beq.n	80049f0 <check_fs+0x68>
	return 2;
 80049e6:	2502      	movs	r5, #2
 80049e8:	e002      	b.n	80049f0 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80049ea:	2504      	movs	r5, #4
 80049ec:	e000      	b.n	80049f0 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80049ee:	2503      	movs	r5, #3
}
 80049f0:	4628      	mov	r0, r5
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	009000eb 	.word	0x009000eb
 80049f8:	00544146 	.word	0x00544146
 80049fc:	33544146 	.word	0x33544146

08004a00 <find_volume>:
{
 8004a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a04:	b087      	sub	sp, #28
 8004a06:	460d      	mov	r5, r1
 8004a08:	4616      	mov	r6, r2
	*rfs = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8004a0e:	f7ff ff24 	bl	800485a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a12:	1e07      	subs	r7, r0, #0
 8004a14:	f2c0 8168 	blt.w	8004ce8 <find_volume+0x2e8>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004a18:	4bbe      	ldr	r3, [pc, #760]	; (8004d14 <find_volume+0x314>)
 8004a1a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004a1e:	2c00      	cmp	r4, #0
 8004a20:	f000 8167 	beq.w	8004cf2 <find_volume+0x2f2>
	*rfs = fs;							/* Return pointer to the file system object */
 8004a24:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004a26:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004a2a:	7823      	ldrb	r3, [r4, #0]
 8004a2c:	b173      	cbz	r3, 8004a4c <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8004a2e:	7860      	ldrb	r0, [r4, #1]
 8004a30:	f7ff fc8a 	bl	8004348 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004a34:	f010 0501 	ands.w	r5, r0, #1
 8004a38:	d108      	bne.n	8004a4c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004a3a:	2e00      	cmp	r6, #0
 8004a3c:	f000 8155 	beq.w	8004cea <find_volume+0x2ea>
 8004a40:	f010 0f04 	tst.w	r0, #4
 8004a44:	f000 8151 	beq.w	8004cea <find_volume+0x2ea>
				return FR_WRITE_PROTECTED;
 8004a48:	250a      	movs	r5, #10
 8004a4a:	e14e      	b.n	8004cea <find_volume+0x2ea>
	fs->fs_type = 0;					/* Clear the file system object */
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004a50:	b2f8      	uxtb	r0, r7
 8004a52:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004a54:	f7ff fc84 	bl	8004360 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004a58:	f010 0f01 	tst.w	r0, #1
 8004a5c:	f040 814b 	bne.w	8004cf6 <find_volume+0x2f6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004a60:	b11e      	cbz	r6, 8004a6a <find_volume+0x6a>
 8004a62:	f010 0f04 	tst.w	r0, #4
 8004a66:	f040 8148 	bne.w	8004cfa <find_volume+0x2fa>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004a6a:	f104 020c 	add.w	r2, r4, #12
 8004a6e:	2102      	movs	r1, #2
 8004a70:	7860      	ldrb	r0, [r4, #1]
 8004a72:	f7ff fca1 	bl	80043b8 <disk_ioctl>
 8004a76:	4605      	mov	r5, r0
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	f040 8140 	bne.w	8004cfe <find_volume+0x2fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004a7e:	89a2      	ldrh	r2, [r4, #12]
 8004a80:	f5a2 7300 	sub.w	r3, r2, #512	; 0x200
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004a8a:	f200 813a 	bhi.w	8004d02 <find_volume+0x302>
 8004a8e:	1e53      	subs	r3, r2, #1
 8004a90:	421a      	tst	r2, r3
 8004a92:	d001      	beq.n	8004a98 <find_volume+0x98>
 8004a94:	2501      	movs	r5, #1
 8004a96:	e128      	b.n	8004cea <find_volume+0x2ea>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f7ff ff74 	bl	8004988 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004aa0:	2802      	cmp	r0, #2
 8004aa2:	f000 80c3 	beq.w	8004c2c <find_volume+0x22c>
	bsect = 0;
 8004aa6:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004aa8:	2804      	cmp	r0, #4
 8004aaa:	f000 812c 	beq.w	8004d06 <find_volume+0x306>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004aae:	2801      	cmp	r0, #1
 8004ab0:	f200 812b 	bhi.w	8004d0a <find_volume+0x30a>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004ab4:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8004ab8:	f7ff fc8a 	bl	80043d0 <ld_word>
 8004abc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8004ac0:	4540      	cmp	r0, r8
 8004ac2:	f040 8124 	bne.w	8004d0e <find_volume+0x30e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004ac6:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 8004aca:	f7ff fc81 	bl	80043d0 <ld_word>
 8004ace:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004ad0:	b920      	cbnz	r0, 8004adc <find_volume+0xdc>
 8004ad2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ad6:	f7ff fc80 	bl	80043da <ld_dword>
 8004ada:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8004adc:	6227      	str	r7, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004ade:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8004ae2:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004ae4:	1e53      	subs	r3, r2, #1
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	f200 811d 	bhi.w	8004d28 <find_volume+0x328>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004aee:	fb07 f302 	mul.w	r3, r7, r2
 8004af2:	9300      	str	r3, [sp, #0]
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004af4:	f894 9045 	ldrb.w	r9, [r4, #69]	; 0x45
 8004af8:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004afc:	f1b9 0f00 	cmp.w	r9, #0
 8004b00:	f000 8114 	beq.w	8004d2c <find_volume+0x32c>
 8004b04:	f109 33ff 	add.w	r3, r9, #4294967295
 8004b08:	ea19 0f03 	tst.w	r9, r3
 8004b0c:	f040 8110 	bne.w	8004d30 <find_volume+0x330>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004b10:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8004b14:	f7ff fc5c 	bl	80043d0 <ld_word>
 8004b18:	4682      	mov	sl, r0
 8004b1a:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004b1c:	ea4f 1b58 	mov.w	fp, r8, lsr #5
 8004b20:	fbb0 f3fb 	udiv	r3, r0, fp
 8004b24:	fb0b 0313 	mls	r3, fp, r3, r0
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 8102 	bne.w	8004d34 <find_volume+0x334>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004b30:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8004b34:	f7ff fc4c 	bl	80043d0 <ld_word>
 8004b38:	9001      	str	r0, [sp, #4]
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004b3a:	b920      	cbnz	r0, 8004b46 <find_volume+0x146>
 8004b3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b40:	f7ff fc4b 	bl	80043da <ld_dword>
 8004b44:	9001      	str	r0, [sp, #4]
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004b46:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8004b4a:	f7ff fc41 	bl	80043d0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004b4e:	4601      	mov	r1, r0
 8004b50:	2800      	cmp	r0, #0
 8004b52:	f000 80f1 	beq.w	8004d38 <find_volume+0x338>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004b56:	9b00      	ldr	r3, [sp, #0]
 8004b58:	18c3      	adds	r3, r0, r3
 8004b5a:	fbba fbfb 	udiv	fp, sl, fp
 8004b5e:	445b      	add	r3, fp
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004b60:	9a01      	ldr	r2, [sp, #4]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	f0c0 80ea 	bcc.w	8004d3c <find_volume+0x33c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004b68:	1ad2      	subs	r2, r2, r3
 8004b6a:	fbb2 f0f9 	udiv	r0, r2, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004b6e:	454a      	cmp	r2, r9
 8004b70:	f0c0 80e6 	bcc.w	8004d40 <find_volume+0x340>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004b74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004b78:	4290      	cmp	r0, r2
 8004b7a:	d96f      	bls.n	8004c5c <find_volume+0x25c>
		fmt = FS_FAT32;
 8004b7c:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004b80:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004b84:	4290      	cmp	r0, r2
 8004b86:	d801      	bhi.n	8004b8c <find_volume+0x18c>
 8004b88:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004b8c:	f100 0902 	add.w	r9, r0, #2
 8004b90:	f8c4 901c 	str.w	r9, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8004b94:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004b96:	198a      	adds	r2, r1, r6
 8004b98:	62a2      	str	r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8004b9a:	4433      	add	r3, r6
 8004b9c:	6323      	str	r3, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8004b9e:	f1bb 0f03 	cmp.w	fp, #3
 8004ba2:	d05e      	beq.n	8004c62 <find_volume+0x262>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004ba4:	f1ba 0f00 	cmp.w	sl, #0
 8004ba8:	f000 80d0 	beq.w	8004d4c <find_volume+0x34c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004bac:	9b00      	ldr	r3, [sp, #0]
 8004bae:	441a      	add	r2, r3
 8004bb0:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004bb2:	f1bb 0f02 	cmp.w	fp, #2
 8004bb6:	d065      	beq.n	8004c84 <find_volume+0x284>
 8004bb8:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 8004bbc:	f009 0301 	and.w	r3, r9, #1
 8004bc0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004bc4:	4443      	add	r3, r8
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	fbb3 f8f8 	udiv	r8, r3, r8
 8004bcc:	45b8      	cmp	r8, r7
 8004bce:	f200 80bf 	bhi.w	8004d50 <find_volume+0x350>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	61a3      	str	r3, [r4, #24]
 8004bd8:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004bde:	f1bb 0f03 	cmp.w	fp, #3
 8004be2:	d052      	beq.n	8004c8a <find_volume+0x28a>
	fs->fs_type = fmt;		/* FAT sub-type */
 8004be4:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8004be8:	4a4b      	ldr	r2, [pc, #300]	; (8004d18 <find_volume+0x318>)
 8004bea:	8813      	ldrh	r3, [r2, #0]
 8004bec:	3301      	adds	r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	8013      	strh	r3, [r2, #0]
 8004bf2:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004bf4:	4b49      	ldr	r3, [pc, #292]	; (8004d1c <find_volume+0x31c>)
 8004bf6:	6123      	str	r3, [r4, #16]
	clear_lock(fs);
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7ff fce7 	bl	80045cc <clear_lock>
	return FR_OK;
 8004bfe:	e074      	b.n	8004cea <find_volume+0x2ea>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004c00:	2000      	movs	r0, #0
 8004c02:	ab06      	add	r3, sp, #24
 8004c04:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8004c08:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c0c:	3601      	adds	r6, #1
 8004c0e:	2e03      	cmp	r6, #3
 8004c10:	d80e      	bhi.n	8004c30 <find_volume+0x230>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004c12:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8004c16:	0133      	lsls	r3, r6, #4
 8004c18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004c1c:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004c1e:	7903      	ldrb	r3, [r0, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ed      	beq.n	8004c00 <find_volume+0x200>
 8004c24:	3008      	adds	r0, #8
 8004c26:	f7ff fbd8 	bl	80043da <ld_dword>
 8004c2a:	e7ea      	b.n	8004c02 <find_volume+0x202>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	e7ee      	b.n	8004c0e <find_volume+0x20e>
 8004c30:	2700      	movs	r7, #0
 8004c32:	e00a      	b.n	8004c4a <find_volume+0x24a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004c34:	4631      	mov	r1, r6
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7ff fea6 	bl	8004988 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004c3c:	2801      	cmp	r0, #1
 8004c3e:	f67f af33 	bls.w	8004aa8 <find_volume+0xa8>
 8004c42:	3701      	adds	r7, #1
 8004c44:	2f03      	cmp	r7, #3
 8004c46:	f63f af2f 	bhi.w	8004aa8 <find_volume+0xa8>
			bsect = br[i];
 8004c4a:	ab06      	add	r3, sp, #24
 8004c4c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8004c50:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004c54:	2e00      	cmp	r6, #0
 8004c56:	d1ed      	bne.n	8004c34 <find_volume+0x234>
 8004c58:	2003      	movs	r0, #3
 8004c5a:	e7f2      	b.n	8004c42 <find_volume+0x242>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004c5c:	f04f 0b02 	mov.w	fp, #2
 8004c60:	e78e      	b.n	8004b80 <find_volume+0x180>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004c62:	f104 0062 	add.w	r0, r4, #98	; 0x62
 8004c66:	f7ff fbb3 	bl	80043d0 <ld_word>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d16a      	bne.n	8004d44 <find_volume+0x344>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004c6e:	f1ba 0f00 	cmp.w	sl, #0
 8004c72:	d169      	bne.n	8004d48 <find_volume+0x348>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004c74:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8004c78:	f7ff fbaf 	bl	80043da <ld_dword>
 8004c7c:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004c7e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8004c82:	e79f      	b.n	8004bc4 <find_volume+0x1c4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004c84:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8004c88:	e79c      	b.n	8004bc4 <find_volume+0x1c4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004c8a:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c8e:	f7ff fb9f 	bl	80043d0 <ld_word>
 8004c92:	2801      	cmp	r0, #1
 8004c94:	d1a6      	bne.n	8004be4 <find_volume+0x1e4>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004c96:	1c71      	adds	r1, r6, #1
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f7ff fe5a 	bl	8004952 <move_window>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d1a0      	bne.n	8004be4 <find_volume+0x1e4>
			fs->fsi_flag = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004ca6:	f204 2036 	addw	r0, r4, #566	; 0x236
 8004caa:	f7ff fb91 	bl	80043d0 <ld_word>
 8004cae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004cb2:	4298      	cmp	r0, r3
 8004cb4:	d196      	bne.n	8004be4 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004cb6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8004cba:	f7ff fb8e 	bl	80043da <ld_dword>
 8004cbe:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <find_volume+0x320>)
 8004cc0:	4298      	cmp	r0, r3
 8004cc2:	d18f      	bne.n	8004be4 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004cc4:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8004cc8:	f7ff fb87 	bl	80043da <ld_dword>
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <find_volume+0x324>)
 8004cce:	4298      	cmp	r0, r3
 8004cd0:	d188      	bne.n	8004be4 <find_volume+0x1e4>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004cd2:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8004cd6:	f7ff fb80 	bl	80043da <ld_dword>
 8004cda:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004cdc:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8004ce0:	f7ff fb7b 	bl	80043da <ld_dword>
 8004ce4:	6160      	str	r0, [r4, #20]
 8004ce6:	e77d      	b.n	8004be4 <find_volume+0x1e4>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ce8:	250b      	movs	r5, #11
}
 8004cea:	4628      	mov	r0, r5
 8004cec:	b007      	add	sp, #28
 8004cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004cf2:	250c      	movs	r5, #12
 8004cf4:	e7f9      	b.n	8004cea <find_volume+0x2ea>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004cf6:	2503      	movs	r5, #3
 8004cf8:	e7f7      	b.n	8004cea <find_volume+0x2ea>
		return FR_WRITE_PROTECTED;
 8004cfa:	250a      	movs	r5, #10
 8004cfc:	e7f5      	b.n	8004cea <find_volume+0x2ea>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004cfe:	2501      	movs	r5, #1
 8004d00:	e7f3      	b.n	8004cea <find_volume+0x2ea>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004d02:	2501      	movs	r5, #1
 8004d04:	e7f1      	b.n	8004cea <find_volume+0x2ea>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004d06:	2501      	movs	r5, #1
 8004d08:	e7ef      	b.n	8004cea <find_volume+0x2ea>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004d0a:	250d      	movs	r5, #13
 8004d0c:	e7ed      	b.n	8004cea <find_volume+0x2ea>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004d0e:	250d      	movs	r5, #13
 8004d10:	e7eb      	b.n	8004cea <find_volume+0x2ea>
 8004d12:	bf00      	nop
 8004d14:	200039bc 	.word	0x200039bc
 8004d18:	200039e0 	.word	0x200039e0
 8004d1c:	200039e4 	.word	0x200039e4
 8004d20:	41615252 	.word	0x41615252
 8004d24:	61417272 	.word	0x61417272
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004d28:	250d      	movs	r5, #13
 8004d2a:	e7de      	b.n	8004cea <find_volume+0x2ea>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004d2c:	250d      	movs	r5, #13
 8004d2e:	e7dc      	b.n	8004cea <find_volume+0x2ea>
 8004d30:	250d      	movs	r5, #13
 8004d32:	e7da      	b.n	8004cea <find_volume+0x2ea>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004d34:	250d      	movs	r5, #13
 8004d36:	e7d8      	b.n	8004cea <find_volume+0x2ea>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004d38:	250d      	movs	r5, #13
 8004d3a:	e7d6      	b.n	8004cea <find_volume+0x2ea>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004d3c:	250d      	movs	r5, #13
 8004d3e:	e7d4      	b.n	8004cea <find_volume+0x2ea>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004d40:	250d      	movs	r5, #13
 8004d42:	e7d2      	b.n	8004cea <find_volume+0x2ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004d44:	250d      	movs	r5, #13
 8004d46:	e7d0      	b.n	8004cea <find_volume+0x2ea>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004d48:	250d      	movs	r5, #13
 8004d4a:	e7ce      	b.n	8004cea <find_volume+0x2ea>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004d4c:	250d      	movs	r5, #13
 8004d4e:	e7cc      	b.n	8004cea <find_volume+0x2ea>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004d50:	250d      	movs	r5, #13
 8004d52:	e7ca      	b.n	8004cea <find_volume+0x2ea>

08004d54 <put_fat>:
{
 8004d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004d58:	2901      	cmp	r1, #1
 8004d5a:	f240 8096 	bls.w	8004e8a <put_fat+0x136>
 8004d5e:	4604      	mov	r4, r0
 8004d60:	460d      	mov	r5, r1
 8004d62:	4617      	mov	r7, r2
 8004d64:	69c3      	ldr	r3, [r0, #28]
 8004d66:	428b      	cmp	r3, r1
 8004d68:	f240 8091 	bls.w	8004e8e <put_fat+0x13a>
		switch (fs->fs_type) {
 8004d6c:	7803      	ldrb	r3, [r0, #0]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d04f      	beq.n	8004e12 <put_fat+0xbe>
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d067      	beq.n	8004e46 <put_fat+0xf2>
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d003      	beq.n	8004d82 <put_fat+0x2e>
 8004d7a:	2602      	movs	r6, #2
}
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8004d82:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d86:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004d88:	8983      	ldrh	r3, [r0, #12]
 8004d8a:	fbb8 f3f3 	udiv	r3, r8, r3
 8004d8e:	4419      	add	r1, r3
 8004d90:	f7ff fddf 	bl	8004952 <move_window>
			if (res != FR_OK) break;
 8004d94:	4606      	mov	r6, r0
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d1f0      	bne.n	8004d7c <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 8004d9a:	f104 0a38 	add.w	sl, r4, #56	; 0x38
 8004d9e:	f108 0901 	add.w	r9, r8, #1
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	fbb8 f2f3 	udiv	r2, r8, r3
 8004da8:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004dac:	f015 0501 	ands.w	r5, r5, #1
 8004db0:	d024      	beq.n	8004dfc <put_fat+0xa8>
 8004db2:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	013a      	lsls	r2, r7, #4
 8004dbc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004dcc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	fbb9 f3f3 	udiv	r3, r9, r3
 8004dd4:	4419      	add	r1, r3
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f7ff fdbb 	bl	8004952 <move_window>
			if (res != FR_OK) break;
 8004ddc:	4606      	mov	r6, r0
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d1cc      	bne.n	8004d7c <put_fat+0x28>
			p = fs->win + bc % SS(fs);
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	fbb9 f2f3 	udiv	r2, r9, r3
 8004de8:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004dec:	b145      	cbz	r5, 8004e00 <put_fat+0xac>
 8004dee:	f3c7 1207 	ubfx	r2, r7, #4, #8
 8004df2:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	70e3      	strb	r3, [r4, #3]
			break;
 8004dfa:	e7bf      	b.n	8004d7c <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004dfc:	b2fb      	uxtb	r3, r7
 8004dfe:	e7e1      	b.n	8004dc4 <put_fat+0x70>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004e00:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8004e04:	f022 020f 	bic.w	r2, r2, #15
 8004e08:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8004e0c:	433a      	orrs	r2, r7
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	e7ef      	b.n	8004df2 <put_fat+0x9e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004e12:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004e14:	8983      	ldrh	r3, [r0, #12]
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	fbb5 f3f3 	udiv	r3, r5, r3
 8004e1c:	4419      	add	r1, r3
 8004e1e:	f7ff fd98 	bl	8004952 <move_window>
			if (res != FR_OK) break;
 8004e22:	4606      	mov	r6, r0
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d1a9      	bne.n	8004d7c <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004e28:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8004e2c:	006d      	lsls	r5, r5, #1
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	fbb5 f2f3 	udiv	r2, r5, r3
 8004e34:	fb03 5512 	mls	r5, r3, r2, r5
 8004e38:	b2b9      	uxth	r1, r7
 8004e3a:	4428      	add	r0, r5
 8004e3c:	f7ff fad8 	bl	80043f0 <st_word>
			fs->wflag = 1;
 8004e40:	2301      	movs	r3, #1
 8004e42:	70e3      	strb	r3, [r4, #3]
			break;
 8004e44:	e79a      	b.n	8004d7c <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004e46:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004e48:	8983      	ldrh	r3, [r0, #12]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	fbb5 f3f3 	udiv	r3, r5, r3
 8004e50:	4419      	add	r1, r3
 8004e52:	f7ff fd7e 	bl	8004952 <move_window>
			if (res != FR_OK) break;
 8004e56:	4606      	mov	r6, r0
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d18f      	bne.n	8004d7c <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004e5c:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8004e60:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8004e64:	00ad      	lsls	r5, r5, #2
 8004e66:	89a2      	ldrh	r2, [r4, #12]
 8004e68:	fbb5 f1f2 	udiv	r1, r5, r2
 8004e6c:	fb02 5511 	mls	r5, r2, r1, r5
 8004e70:	441d      	add	r5, r3
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7ff fab1 	bl	80043da <ld_dword>
 8004e78:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004e7c:	4339      	orrs	r1, r7
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f7ff faba 	bl	80043f8 <st_dword>
			fs->wflag = 1;
 8004e84:	2301      	movs	r3, #1
 8004e86:	70e3      	strb	r3, [r4, #3]
			break;
 8004e88:	e778      	b.n	8004d7c <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 8004e8a:	2602      	movs	r6, #2
 8004e8c:	e776      	b.n	8004d7c <put_fat+0x28>
 8004e8e:	2602      	movs	r6, #2
 8004e90:	e774      	b.n	8004d7c <put_fat+0x28>

08004e92 <get_fat>:
{
 8004e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8004e94:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e96:	2901      	cmp	r1, #1
 8004e98:	d96c      	bls.n	8004f74 <get_fat+0xe2>
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	69eb      	ldr	r3, [r5, #28]
 8004e9e:	428b      	cmp	r3, r1
 8004ea0:	d96a      	bls.n	8004f78 <get_fat+0xe6>
		switch (fs->fs_type) {
 8004ea2:	782b      	ldrb	r3, [r5, #0]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d037      	beq.n	8004f18 <get_fat+0x86>
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d04b      	beq.n	8004f44 <get_fat+0xb2>
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <get_fat+0x22>
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	e060      	b.n	8004f76 <get_fat+0xe4>
			bc = (UINT)clst; bc += bc / 2;
 8004eb4:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004eb8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004eba:	89ab      	ldrh	r3, [r5, #12]
 8004ebc:	fbb6 f3f3 	udiv	r3, r6, r3
 8004ec0:	4419      	add	r1, r3
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f7ff fd45 	bl	8004952 <move_window>
 8004ec8:	b110      	cbz	r0, 8004ed0 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004eca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ece:	e052      	b.n	8004f76 <get_fat+0xe4>
			wc = fs->win[bc++ % SS(fs)];
 8004ed0:	1c77      	adds	r7, r6, #1
 8004ed2:	89ab      	ldrh	r3, [r5, #12]
 8004ed4:	fbb6 f2f3 	udiv	r2, r6, r3
 8004ed8:	fb03 6612 	mls	r6, r3, r2, r6
 8004edc:	442e      	add	r6, r5
 8004ede:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ee2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004ee4:	fbb7 f3f3 	udiv	r3, r7, r3
 8004ee8:	4419      	add	r1, r3
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7ff fd31 	bl	8004952 <move_window>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d143      	bne.n	8004f7c <get_fat+0xea>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004ef4:	89ab      	ldrh	r3, [r5, #12]
 8004ef6:	fbb7 f2f3 	udiv	r2, r7, r3
 8004efa:	fb03 7712 	mls	r7, r3, r2, r7
 8004efe:	443d      	add	r5, r7
 8004f00:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
 8004f04:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004f08:	f014 0f01 	tst.w	r4, #1
 8004f0c:	d001      	beq.n	8004f12 <get_fat+0x80>
 8004f0e:	0900      	lsrs	r0, r0, #4
 8004f10:	e031      	b.n	8004f76 <get_fat+0xe4>
 8004f12:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004f16:	e02e      	b.n	8004f76 <get_fat+0xe4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004f18:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004f1a:	89ab      	ldrh	r3, [r5, #12]
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f22:	4419      	add	r1, r3
 8004f24:	4628      	mov	r0, r5
 8004f26:	f7ff fd14 	bl	8004952 <move_window>
 8004f2a:	bb50      	cbnz	r0, 8004f82 <get_fat+0xf0>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004f2c:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8004f30:	0064      	lsls	r4, r4, #1
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	fbb4 f2f3 	udiv	r2, r4, r3
 8004f38:	fb03 4412 	mls	r4, r3, r2, r4
 8004f3c:	4420      	add	r0, r4
 8004f3e:	f7ff fa47 	bl	80043d0 <ld_word>
			break;
 8004f42:	e018      	b.n	8004f76 <get_fat+0xe4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004f44:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004f46:	89ab      	ldrh	r3, [r5, #12]
 8004f48:	089b      	lsrs	r3, r3, #2
 8004f4a:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f4e:	4419      	add	r1, r3
 8004f50:	4628      	mov	r0, r5
 8004f52:	f7ff fcfe 	bl	8004952 <move_window>
 8004f56:	b9b8      	cbnz	r0, 8004f88 <get_fat+0xf6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004f58:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8004f5c:	00a4      	lsls	r4, r4, #2
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	fbb4 f2f3 	udiv	r2, r4, r3
 8004f64:	fb03 4412 	mls	r4, r3, r2, r4
 8004f68:	4420      	add	r0, r4
 8004f6a:	f7ff fa36 	bl	80043da <ld_dword>
 8004f6e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8004f72:	e000      	b.n	8004f76 <get_fat+0xe4>
		val = 1;	/* Internal error */
 8004f74:	2001      	movs	r0, #1
}
 8004f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8004f78:	2001      	movs	r0, #1
 8004f7a:	e7fc      	b.n	8004f76 <get_fat+0xe4>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	e7f9      	b.n	8004f76 <get_fat+0xe4>
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	e7f6      	b.n	8004f76 <get_fat+0xe4>
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8004f8c:	e7f3      	b.n	8004f76 <get_fat+0xe4>

08004f8e <dir_sdi>:
{
 8004f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8004f92:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004f96:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004f9a:	d24a      	bcs.n	8005032 <dir_sdi+0xa4>
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	460e      	mov	r6, r1
 8004fa0:	f011 0f1f 	tst.w	r1, #31
 8004fa4:	d147      	bne.n	8005036 <dir_sdi+0xa8>
	dp->dptr = ofs;				/* Set current offset */
 8004fa6:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004fa8:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004faa:	b92c      	cbnz	r4, 8004fb8 <dir_sdi+0x2a>
 8004fac:	f898 3000 	ldrb.w	r3, [r8]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <dir_sdi+0x2a>
		clst = fs->dirbase;
 8004fb4:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004fb8:	b9ec      	cbnz	r4, 8004ff6 <dir_sdi+0x68>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004fba:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8004fbe:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8004fc2:	d93a      	bls.n	800503a <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 8004fc4:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8004fc8:	61fb      	str	r3, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 8004fca:	61bc      	str	r4, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	b3e3      	cbz	r3, 800504a <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004fd0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8004fd4:	fbb6 f2f2 	udiv	r2, r6, r2
 8004fd8:	4413      	add	r3, r2
 8004fda:	61fb      	str	r3, [r7, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004fdc:	f108 0338 	add.w	r3, r8, #56	; 0x38
 8004fe0:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 8004fe4:	fbb6 f2f1 	udiv	r2, r6, r1
 8004fe8:	fb01 6112 	mls	r1, r1, r2, r6
 8004fec:	4419      	add	r1, r3
 8004fee:	6239      	str	r1, [r7, #32]
	return FR_OK;
 8004ff0:	2000      	movs	r0, #0
}
 8004ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004ff6:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8004ffa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004ffe:	fb03 f505 	mul.w	r5, r3, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 8005002:	42ae      	cmp	r6, r5
 8005004:	d30f      	bcc.n	8005026 <dir_sdi+0x98>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005006:	4621      	mov	r1, r4
 8005008:	4638      	mov	r0, r7
 800500a:	f7ff ff42 	bl	8004e92 <get_fat>
 800500e:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005010:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005014:	d013      	beq.n	800503e <dir_sdi+0xb0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005016:	2801      	cmp	r0, #1
 8005018:	d913      	bls.n	8005042 <dir_sdi+0xb4>
 800501a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800501e:	4283      	cmp	r3, r0
 8005020:	d911      	bls.n	8005046 <dir_sdi+0xb8>
			ofs -= csz;
 8005022:	1b76      	subs	r6, r6, r5
 8005024:	e7ed      	b.n	8005002 <dir_sdi+0x74>
		dp->sect = clust2sect(fs, clst);
 8005026:	4621      	mov	r1, r4
 8005028:	4640      	mov	r0, r8
 800502a:	f7ff faed 	bl	8004608 <clust2sect>
 800502e:	61f8      	str	r0, [r7, #28]
 8005030:	e7cb      	b.n	8004fca <dir_sdi+0x3c>
		return FR_INT_ERR;
 8005032:	2002      	movs	r0, #2
 8005034:	e7dd      	b.n	8004ff2 <dir_sdi+0x64>
 8005036:	2002      	movs	r0, #2
 8005038:	e7db      	b.n	8004ff2 <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800503a:	2002      	movs	r0, #2
 800503c:	e7d9      	b.n	8004ff2 <dir_sdi+0x64>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800503e:	2001      	movs	r0, #1
 8005040:	e7d7      	b.n	8004ff2 <dir_sdi+0x64>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005042:	2002      	movs	r0, #2
 8005044:	e7d5      	b.n	8004ff2 <dir_sdi+0x64>
 8005046:	2002      	movs	r0, #2
 8005048:	e7d3      	b.n	8004ff2 <dir_sdi+0x64>
	if (!dp->sect) return FR_INT_ERR;
 800504a:	2002      	movs	r0, #2
 800504c:	e7d1      	b.n	8004ff2 <dir_sdi+0x64>

0800504e <create_chain>:
{
 800504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005052:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8005054:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005056:	460f      	mov	r7, r1
 8005058:	b951      	cbnz	r1, 8005070 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800505a:	f8d6 8014 	ldr.w	r8, [r6, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800505e:	f1b8 0f00 	cmp.w	r8, #0
 8005062:	d012      	beq.n	800508a <create_chain+0x3c>
 8005064:	69f3      	ldr	r3, [r6, #28]
 8005066:	4543      	cmp	r3, r8
 8005068:	d811      	bhi.n	800508e <create_chain+0x40>
 800506a:	f04f 0801 	mov.w	r8, #1
 800506e:	e00e      	b.n	800508e <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005070:	f7ff ff0f 	bl	8004e92 <get_fat>
 8005074:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005076:	2801      	cmp	r0, #1
 8005078:	d947      	bls.n	800510a <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800507a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800507e:	d049      	beq.n	8005114 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005080:	69f2      	ldr	r2, [r6, #28]
 8005082:	4282      	cmp	r2, r0
 8005084:	d846      	bhi.n	8005114 <create_chain+0xc6>
		scl = clst;
 8005086:	46b8      	mov	r8, r7
 8005088:	e001      	b.n	800508e <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800508a:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 800508e:	4644      	mov	r4, r8
 8005090:	e00c      	b.n	80050ac <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005092:	4621      	mov	r1, r4
 8005094:	4628      	mov	r0, r5
 8005096:	f7ff fefc 	bl	8004e92 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800509a:	4603      	mov	r3, r0
 800509c:	b178      	cbz	r0, 80050be <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800509e:	2801      	cmp	r0, #1
 80050a0:	d038      	beq.n	8005114 <create_chain+0xc6>
 80050a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050a6:	d035      	beq.n	8005114 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 80050a8:	4544      	cmp	r4, r8
 80050aa:	d032      	beq.n	8005112 <create_chain+0xc4>
			ncl++;							/* Next cluster */
 80050ac:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80050ae:	69f3      	ldr	r3, [r6, #28]
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d8ee      	bhi.n	8005092 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 80050b4:	f1b8 0f01 	cmp.w	r8, #1
 80050b8:	d929      	bls.n	800510e <create_chain+0xc0>
				ncl = 2;
 80050ba:	2402      	movs	r4, #2
 80050bc:	e7e9      	b.n	8005092 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80050be:	f04f 32ff 	mov.w	r2, #4294967295
 80050c2:	4621      	mov	r1, r4
 80050c4:	4630      	mov	r0, r6
 80050c6:	f7ff fe45 	bl	8004d54 <put_fat>
		if (res == FR_OK && clst != 0) {
 80050ca:	4603      	mov	r3, r0
 80050cc:	b900      	cbnz	r0, 80050d0 <create_chain+0x82>
 80050ce:	b977      	cbnz	r7, 80050ee <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80050d0:	b9a3      	cbnz	r3, 80050fc <create_chain+0xae>
		fs->last_clst = ncl;
 80050d2:	6174      	str	r4, [r6, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80050d4:	69b2      	ldr	r2, [r6, #24]
 80050d6:	69f3      	ldr	r3, [r6, #28]
 80050d8:	3b02      	subs	r3, #2
 80050da:	429a      	cmp	r2, r3
 80050dc:	d801      	bhi.n	80050e2 <create_chain+0x94>
 80050de:	3a01      	subs	r2, #1
 80050e0:	61b2      	str	r2, [r6, #24]
		fs->fsi_flag |= 1;
 80050e2:	7933      	ldrb	r3, [r6, #4]
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	7133      	strb	r3, [r6, #4]
 80050ea:	4623      	mov	r3, r4
 80050ec:	e012      	b.n	8005114 <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80050ee:	4622      	mov	r2, r4
 80050f0:	4639      	mov	r1, r7
 80050f2:	4630      	mov	r0, r6
 80050f4:	f7ff fe2e 	bl	8004d54 <put_fat>
 80050f8:	4603      	mov	r3, r0
 80050fa:	e7e9      	b.n	80050d0 <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d001      	beq.n	8005104 <create_chain+0xb6>
 8005100:	2301      	movs	r3, #1
 8005102:	e007      	b.n	8005114 <create_chain+0xc6>
 8005104:	f04f 33ff 	mov.w	r3, #4294967295
 8005108:	e004      	b.n	8005114 <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800510a:	2301      	movs	r3, #1
 800510c:	e002      	b.n	8005114 <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800511a <remove_chain>:
{
 800511a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511c:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800511e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005120:	2901      	cmp	r1, #1
 8005122:	d92e      	bls.n	8005182 <remove_chain+0x68>
 8005124:	4606      	mov	r6, r0
 8005126:	4611      	mov	r1, r2
 8005128:	69eb      	ldr	r3, [r5, #28]
 800512a:	42a3      	cmp	r3, r4
 800512c:	d92b      	bls.n	8005186 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800512e:	b14a      	cbz	r2, 8005144 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005130:	f04f 32ff 	mov.w	r2, #4294967295
 8005134:	4628      	mov	r0, r5
 8005136:	f7ff fe0d 	bl	8004d54 <put_fat>
		if (res != FR_OK) return res;
 800513a:	4607      	mov	r7, r0
 800513c:	b110      	cbz	r0, 8005144 <remove_chain+0x2a>
 800513e:	e023      	b.n	8005188 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005140:	42a2      	cmp	r2, r4
 8005142:	d921      	bls.n	8005188 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005144:	4627      	mov	r7, r4
 8005146:	4621      	mov	r1, r4
 8005148:	4630      	mov	r0, r6
 800514a:	f7ff fea2 	bl	8004e92 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800514e:	4604      	mov	r4, r0
 8005150:	b1e0      	cbz	r0, 800518c <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005152:	2801      	cmp	r0, #1
 8005154:	d01c      	beq.n	8005190 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005156:	f1b0 3fff 	cmp.w	r0, #4294967295
 800515a:	d01b      	beq.n	8005194 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800515c:	2200      	movs	r2, #0
 800515e:	4639      	mov	r1, r7
 8005160:	4628      	mov	r0, r5
 8005162:	f7ff fdf7 	bl	8004d54 <put_fat>
			if (res != FR_OK) return res;
 8005166:	4607      	mov	r7, r0
 8005168:	b970      	cbnz	r0, 8005188 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800516a:	69ab      	ldr	r3, [r5, #24]
 800516c:	69ea      	ldr	r2, [r5, #28]
 800516e:	1e91      	subs	r1, r2, #2
 8005170:	428b      	cmp	r3, r1
 8005172:	d2e5      	bcs.n	8005140 <remove_chain+0x26>
			fs->free_clst++;
 8005174:	3301      	adds	r3, #1
 8005176:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 8005178:	792b      	ldrb	r3, [r5, #4]
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	712b      	strb	r3, [r5, #4]
 8005180:	e7de      	b.n	8005140 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005182:	2702      	movs	r7, #2
 8005184:	e000      	b.n	8005188 <remove_chain+0x6e>
 8005186:	2702      	movs	r7, #2
}
 8005188:	4638      	mov	r0, r7
 800518a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 800518c:	2700      	movs	r7, #0
 800518e:	e7fb      	b.n	8005188 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005190:	2702      	movs	r7, #2
 8005192:	e7f9      	b.n	8005188 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005194:	2701      	movs	r7, #1
 8005196:	e7f7      	b.n	8005188 <remove_chain+0x6e>

08005198 <dir_next>:
{
 8005198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 800519c:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800519e:	6944      	ldr	r4, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80051a0:	69c3      	ldr	r3, [r0, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d074      	beq.n	8005290 <dir_next+0xf8>
 80051a6:	4605      	mov	r5, r0
 80051a8:	460f      	mov	r7, r1
 80051aa:	3420      	adds	r4, #32
 80051ac:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 80051b0:	d270      	bcs.n	8005294 <dir_next+0xfc>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80051b2:	89b1      	ldrh	r1, [r6, #12]
 80051b4:	fbb4 f2f1 	udiv	r2, r4, r1
 80051b8:	fb01 4212 	mls	r2, r1, r2, r4
 80051bc:	b93a      	cbnz	r2, 80051ce <dir_next+0x36>
		dp->sect++;				/* Next sector */
 80051be:	3301      	adds	r3, #1
 80051c0:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80051c2:	6981      	ldr	r1, [r0, #24]
 80051c4:	b9a1      	cbnz	r1, 80051f0 <dir_next+0x58>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80051c6:	8933      	ldrh	r3, [r6, #8]
 80051c8:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80051cc:	d90c      	bls.n	80051e8 <dir_next+0x50>
	dp->dptr = ofs;						/* Current entry */
 80051ce:	616c      	str	r4, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80051d0:	f106 0338 	add.w	r3, r6, #56	; 0x38
 80051d4:	89b2      	ldrh	r2, [r6, #12]
 80051d6:	fbb4 f1f2 	udiv	r1, r4, r2
 80051da:	fb02 4411 	mls	r4, r2, r1, r4
 80051de:	441c      	add	r4, r3
 80051e0:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80051e2:	2000      	movs	r0, #0
}
 80051e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61c3      	str	r3, [r0, #28]
 80051ec:	2004      	movs	r0, #4
 80051ee:	e7f9      	b.n	80051e4 <dir_next+0x4c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80051f0:	89b2      	ldrh	r2, [r6, #12]
 80051f2:	fbb4 f2f2 	udiv	r2, r4, r2
 80051f6:	8973      	ldrh	r3, [r6, #10]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	ea12 0803 	ands.w	r8, r2, r3
 80051fe:	d1e6      	bne.n	80051ce <dir_next+0x36>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005200:	f7ff fe47 	bl	8004e92 <get_fat>
 8005204:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005206:	2801      	cmp	r0, #1
 8005208:	d946      	bls.n	8005298 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800520a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800520e:	d045      	beq.n	800529c <dir_next+0x104>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005210:	69f3      	ldr	r3, [r6, #28]
 8005212:	4283      	cmp	r3, r0
 8005214:	d834      	bhi.n	8005280 <dir_next+0xe8>
					if (!stretch) {								/* If no stretch, report EOT */
 8005216:	b18f      	cbz	r7, 800523c <dir_next+0xa4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005218:	69a9      	ldr	r1, [r5, #24]
 800521a:	4628      	mov	r0, r5
 800521c:	f7ff ff17 	bl	800504e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005220:	4681      	mov	r9, r0
 8005222:	2800      	cmp	r0, #0
 8005224:	d03c      	beq.n	80052a0 <dir_next+0x108>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005226:	2801      	cmp	r0, #1
 8005228:	d03c      	beq.n	80052a4 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800522a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800522e:	d03b      	beq.n	80052a8 <dir_next+0x110>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005230:	4630      	mov	r0, r6
 8005232:	f7ff fb64 	bl	80048fe <sync_window>
 8005236:	b128      	cbz	r0, 8005244 <dir_next+0xac>
 8005238:	2001      	movs	r0, #1
 800523a:	e7d3      	b.n	80051e4 <dir_next+0x4c>
						dp->sect = 0; return FR_NO_FILE;
 800523c:	2300      	movs	r3, #0
 800523e:	61eb      	str	r3, [r5, #28]
 8005240:	2004      	movs	r0, #4
 8005242:	e7cf      	b.n	80051e4 <dir_next+0x4c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005244:	89b2      	ldrh	r2, [r6, #12]
 8005246:	2100      	movs	r1, #0
 8005248:	f106 0038 	add.w	r0, r6, #56	; 0x38
 800524c:	f7ff f8e8 	bl	8004420 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005250:	4649      	mov	r1, r9
 8005252:	4630      	mov	r0, r6
 8005254:	f7ff f9d8 	bl	8004608 <clust2sect>
 8005258:	6370      	str	r0, [r6, #52]	; 0x34
 800525a:	8973      	ldrh	r3, [r6, #10]
 800525c:	4598      	cmp	r8, r3
 800525e:	d20b      	bcs.n	8005278 <dir_next+0xe0>
						fs->wflag = 1;
 8005260:	2301      	movs	r3, #1
 8005262:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005264:	4630      	mov	r0, r6
 8005266:	f7ff fb4a 	bl	80048fe <sync_window>
 800526a:	b9f8      	cbnz	r0, 80052ac <dir_next+0x114>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800526c:	f108 0801 	add.w	r8, r8, #1
 8005270:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005272:	3301      	adds	r3, #1
 8005274:	6373      	str	r3, [r6, #52]	; 0x34
 8005276:	e7f0      	b.n	800525a <dir_next+0xc2>
					fs->winsect -= n;							/* Restore window offset */
 8005278:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800527a:	eba3 0308 	sub.w	r3, r3, r8
 800527e:	6373      	str	r3, [r6, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8005280:	f8c5 9018 	str.w	r9, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8005284:	4649      	mov	r1, r9
 8005286:	4630      	mov	r0, r6
 8005288:	f7ff f9be 	bl	8004608 <clust2sect>
 800528c:	61e8      	str	r0, [r5, #28]
 800528e:	e79e      	b.n	80051ce <dir_next+0x36>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005290:	2004      	movs	r0, #4
 8005292:	e7a7      	b.n	80051e4 <dir_next+0x4c>
 8005294:	2004      	movs	r0, #4
 8005296:	e7a5      	b.n	80051e4 <dir_next+0x4c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005298:	2002      	movs	r0, #2
 800529a:	e7a3      	b.n	80051e4 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800529c:	2001      	movs	r0, #1
 800529e:	e7a1      	b.n	80051e4 <dir_next+0x4c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80052a0:	2007      	movs	r0, #7
 80052a2:	e79f      	b.n	80051e4 <dir_next+0x4c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80052a4:	2002      	movs	r0, #2
 80052a6:	e79d      	b.n	80051e4 <dir_next+0x4c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80052a8:	2001      	movs	r0, #1
 80052aa:	e79b      	b.n	80051e4 <dir_next+0x4c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80052ac:	2001      	movs	r0, #1
 80052ae:	e799      	b.n	80051e4 <dir_next+0x4c>

080052b0 <dir_alloc>:
{
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	4604      	mov	r4, r0
 80052b4:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 80052b6:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 80052b8:	2100      	movs	r1, #0
 80052ba:	f7ff fe68 	bl	8004f8e <dir_sdi>
	if (res == FR_OK) {
 80052be:	4602      	mov	r2, r0
 80052c0:	b9c0      	cbnz	r0, 80052f4 <dir_alloc+0x44>
		n = 0;
 80052c2:	2500      	movs	r5, #0
 80052c4:	e008      	b.n	80052d8 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80052c6:	3501      	adds	r5, #1
 80052c8:	42b5      	cmp	r5, r6
 80052ca:	d013      	beq.n	80052f4 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 80052cc:	2101      	movs	r1, #1
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7ff ff62 	bl	8005198 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80052d4:	4602      	mov	r2, r0
 80052d6:	b968      	cbnz	r0, 80052f4 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 80052d8:	69e1      	ldr	r1, [r4, #28]
 80052da:	4638      	mov	r0, r7
 80052dc:	f7ff fb39 	bl	8004952 <move_window>
			if (res != FR_OK) break;
 80052e0:	4602      	mov	r2, r0
 80052e2:	b938      	cbnz	r0, 80052f4 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80052e4:	6a23      	ldr	r3, [r4, #32]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2be5      	cmp	r3, #229	; 0xe5
 80052ea:	d0ec      	beq.n	80052c6 <dir_alloc+0x16>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ea      	beq.n	80052c6 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 80052f0:	2500      	movs	r5, #0
 80052f2:	e7eb      	b.n	80052cc <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80052f4:	2a04      	cmp	r2, #4
 80052f6:	d001      	beq.n	80052fc <dir_alloc+0x4c>
}
 80052f8:	4610      	mov	r0, r2
 80052fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80052fc:	2207      	movs	r2, #7
 80052fe:	e7fb      	b.n	80052f8 <dir_alloc+0x48>

08005300 <dir_read>:
{
 8005300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005304:	4604      	mov	r4, r0
 8005306:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8005308:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800530a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800530e:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 8005310:	2504      	movs	r5, #4
	while (dp->sect) {
 8005312:	e02e      	b.n	8005372 <dir_read+0x72>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005314:	2b0f      	cmp	r3, #15
 8005316:	d119      	bne.n	800534c <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005318:	f012 0f40 	tst.w	r2, #64	; 0x40
 800531c:	d006      	beq.n	800532c <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 800531e:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 8005322:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8005326:	6963      	ldr	r3, [r4, #20]
 8005328:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 800532a:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800532c:	42b2      	cmp	r2, r6
 800532e:	d001      	beq.n	8005334 <dir_read+0x34>
 8005330:	26ff      	movs	r6, #255	; 0xff
 8005332:	e018      	b.n	8005366 <dir_read+0x66>
 8005334:	7b4b      	ldrb	r3, [r1, #13]
 8005336:	454b      	cmp	r3, r9
 8005338:	d001      	beq.n	800533e <dir_read+0x3e>
 800533a:	26ff      	movs	r6, #255	; 0xff
 800533c:	e013      	b.n	8005366 <dir_read+0x66>
 800533e:	6938      	ldr	r0, [r7, #16]
 8005340:	f7ff f9a8 	bl	8004694 <pick_lfn>
 8005344:	b388      	cbz	r0, 80053aa <dir_read+0xaa>
 8005346:	3e01      	subs	r6, #1
 8005348:	b2f6      	uxtb	r6, r6
 800534a:	e00c      	b.n	8005366 <dir_read+0x66>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800534c:	b926      	cbnz	r6, 8005358 <dir_read+0x58>
 800534e:	4608      	mov	r0, r1
 8005350:	f7ff fa73 	bl	800483a <sum_sfn>
 8005354:	4548      	cmp	r0, r9
 8005356:	d02b      	beq.n	80053b0 <dir_read+0xb0>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005358:	f04f 33ff 	mov.w	r3, #4294967295
 800535c:	6323      	str	r3, [r4, #48]	; 0x30
 800535e:	e027      	b.n	80053b0 <dir_read+0xb0>
				ord = 0xFF;
 8005360:	26ff      	movs	r6, #255	; 0xff
 8005362:	e000      	b.n	8005366 <dir_read+0x66>
 8005364:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8005366:	2100      	movs	r1, #0
 8005368:	4620      	mov	r0, r4
 800536a:	f7ff ff15 	bl	8005198 <dir_next>
		if (res != FR_OK) break;
 800536e:	4605      	mov	r5, r0
 8005370:	b9f0      	cbnz	r0, 80053b0 <dir_read+0xb0>
	while (dp->sect) {
 8005372:	69e1      	ldr	r1, [r4, #28]
 8005374:	b1e1      	cbz	r1, 80053b0 <dir_read+0xb0>
		res = move_window(fs, dp->sect);
 8005376:	4638      	mov	r0, r7
 8005378:	f7ff faeb 	bl	8004952 <move_window>
		if (res != FR_OK) break;
 800537c:	4605      	mov	r5, r0
 800537e:	b9b8      	cbnz	r0, 80053b0 <dir_read+0xb0>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005380:	6a21      	ldr	r1, [r4, #32]
 8005382:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8005384:	b19a      	cbz	r2, 80053ae <dir_read+0xae>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005386:	7acb      	ldrb	r3, [r1, #11]
 8005388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800538c:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800538e:	2ae5      	cmp	r2, #229	; 0xe5
 8005390:	d0e6      	beq.n	8005360 <dir_read+0x60>
 8005392:	2a2e      	cmp	r2, #46	; 0x2e
 8005394:	d0e6      	beq.n	8005364 <dir_read+0x64>
 8005396:	f023 0020 	bic.w	r0, r3, #32
 800539a:	2808      	cmp	r0, #8
 800539c:	bf14      	ite	ne
 800539e:	2000      	movne	r0, #0
 80053a0:	2001      	moveq	r0, #1
 80053a2:	4540      	cmp	r0, r8
 80053a4:	d0b6      	beq.n	8005314 <dir_read+0x14>
				ord = 0xFF;
 80053a6:	26ff      	movs	r6, #255	; 0xff
 80053a8:	e7dd      	b.n	8005366 <dir_read+0x66>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80053aa:	26ff      	movs	r6, #255	; 0xff
 80053ac:	e7db      	b.n	8005366 <dir_read+0x66>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80053ae:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80053b0:	b10d      	cbz	r5, 80053b6 <dir_read+0xb6>
 80053b2:	2300      	movs	r3, #0
 80053b4:	61e3      	str	r3, [r4, #28]
}
 80053b6:	4628      	mov	r0, r5
 80053b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080053bc <dir_remove>:
{
 80053bc:	b570      	push	{r4, r5, r6, lr}
 80053be:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80053c0:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 80053c2:	6946      	ldr	r6, [r0, #20]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80053c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80053c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80053ca:	d118      	bne.n	80053fe <dir_remove+0x42>
			res = move_window(fs, dp->sect);
 80053cc:	69e1      	ldr	r1, [r4, #28]
 80053ce:	4628      	mov	r0, r5
 80053d0:	f7ff fabf 	bl	8004952 <move_window>
			if (res != FR_OK) break;
 80053d4:	4603      	mov	r3, r0
 80053d6:	b970      	cbnz	r0, 80053f6 <dir_remove+0x3a>
				dp->dir[DIR_Name] = DDEM;
 80053d8:	6a22      	ldr	r2, [r4, #32]
 80053da:	21e5      	movs	r1, #229	; 0xe5
 80053dc:	7011      	strb	r1, [r2, #0]
			fs->wflag = 1;
 80053de:	2201      	movs	r2, #1
 80053e0:	70ea      	strb	r2, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80053e2:	6962      	ldr	r2, [r4, #20]
 80053e4:	42b2      	cmp	r2, r6
 80053e6:	d206      	bcs.n	80053f6 <dir_remove+0x3a>
			res = dir_next(dp, 0);	/* Next entry */
 80053e8:	2100      	movs	r1, #0
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7ff fed4 	bl	8005198 <dir_next>
		} while (res == FR_OK);
 80053f0:	4603      	mov	r3, r0
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d0ea      	beq.n	80053cc <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d007      	beq.n	800540a <dir_remove+0x4e>
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80053fe:	f7ff fdc6 	bl	8004f8e <dir_sdi>
	if (res == FR_OK) {
 8005402:	4603      	mov	r3, r0
 8005404:	2800      	cmp	r0, #0
 8005406:	d1f8      	bne.n	80053fa <dir_remove+0x3e>
 8005408:	e7e0      	b.n	80053cc <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800540a:	2302      	movs	r3, #2
 800540c:	e7f5      	b.n	80053fa <dir_remove+0x3e>
	...

08005410 <sync_fs>:
{
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4604      	mov	r4, r0
	res = sync_window(fs);
 8005414:	f7ff fa73 	bl	80048fe <sync_window>
	if (res == FR_OK) {
 8005418:	4605      	mov	r5, r0
 800541a:	b948      	cbnz	r0, 8005430 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800541c:	7823      	ldrb	r3, [r4, #0]
 800541e:	2b03      	cmp	r3, #3
 8005420:	d008      	beq.n	8005434 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005422:	2200      	movs	r2, #0
 8005424:	4611      	mov	r1, r2
 8005426:	7860      	ldrb	r0, [r4, #1]
 8005428:	f7fe ffc6 	bl	80043b8 <disk_ioctl>
 800542c:	b100      	cbz	r0, 8005430 <sync_fs+0x20>
 800542e:	2501      	movs	r5, #1
}
 8005430:	4628      	mov	r0, r5
 8005432:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005434:	7923      	ldrb	r3, [r4, #4]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d1f3      	bne.n	8005422 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800543a:	f104 0638 	add.w	r6, r4, #56	; 0x38
 800543e:	89a2      	ldrh	r2, [r4, #12]
 8005440:	2100      	movs	r1, #0
 8005442:	4630      	mov	r0, r6
 8005444:	f7fe ffec 	bl	8004420 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005448:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800544c:	f204 2036 	addw	r0, r4, #566	; 0x236
 8005450:	f7fe ffce 	bl	80043f0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005454:	490e      	ldr	r1, [pc, #56]	; (8005490 <sync_fs+0x80>)
 8005456:	4630      	mov	r0, r6
 8005458:	f7fe ffce 	bl	80043f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800545c:	490d      	ldr	r1, [pc, #52]	; (8005494 <sync_fs+0x84>)
 800545e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8005462:	f7fe ffc9 	bl	80043f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005466:	69a1      	ldr	r1, [r4, #24]
 8005468:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800546c:	f7fe ffc4 	bl	80043f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005470:	6961      	ldr	r1, [r4, #20]
 8005472:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8005476:	f7fe ffbf 	bl	80043f8 <st_dword>
			fs->winsect = fs->volbase + 1;
 800547a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800547c:	3201      	adds	r2, #1
 800547e:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005480:	2301      	movs	r3, #1
 8005482:	4631      	mov	r1, r6
 8005484:	7860      	ldrb	r0, [r4, #1]
 8005486:	f7fe ff8b 	bl	80043a0 <disk_write>
			fs->fsi_flag = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	7123      	strb	r3, [r4, #4]
 800548e:	e7c8      	b.n	8005422 <sync_fs+0x12>
 8005490:	41615252 	.word	0x41615252
 8005494:	61417272 	.word	0x61417272

08005498 <create_name>:
{
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	b083      	sub	sp, #12
 800549e:	4607      	mov	r7, r0
 80054a0:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80054a2:	f8d1 9000 	ldr.w	r9, [r1]
 80054a6:	6803      	ldr	r3, [r0, #0]
 80054a8:	691d      	ldr	r5, [r3, #16]
 80054aa:	2400      	movs	r4, #0
 80054ac:	4623      	mov	r3, r4
 80054ae:	e012      	b.n	80054d6 <create_name+0x3e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80054b0:	3601      	adds	r6, #1
 80054b2:	f819 3006 	ldrb.w	r3, [r9, r6]
 80054b6:	2b2f      	cmp	r3, #47	; 0x2f
 80054b8:	d0fa      	beq.n	80054b0 <create_name+0x18>
 80054ba:	2b5c      	cmp	r3, #92	; 0x5c
 80054bc:	d0f8      	beq.n	80054b0 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 80054be:	444e      	add	r6, r9
 80054c0:	f8ca 6000 	str.w	r6, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80054c4:	281f      	cmp	r0, #31
 80054c6:	d823      	bhi.n	8005510 <create_name+0x78>
 80054c8:	f04f 0804 	mov.w	r8, #4
 80054cc:	e024      	b.n	8005518 <create_name+0x80>
		lfn[di++] = w;					/* Store the Unicode character */
 80054ce:	f825 8014 	strh.w	r8, [r5, r4, lsl #1]
 80054d2:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 80054d4:	4633      	mov	r3, r6
 80054d6:	1c5e      	adds	r6, r3, #1
 80054d8:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 80054dc:	281f      	cmp	r0, #31
 80054de:	d9ee      	bls.n	80054be <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80054e0:	282f      	cmp	r0, #47	; 0x2f
 80054e2:	d0e6      	beq.n	80054b2 <create_name+0x1a>
 80054e4:	285c      	cmp	r0, #92	; 0x5c
 80054e6:	d0e4      	beq.n	80054b2 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80054e8:	2cfe      	cmp	r4, #254	; 0xfe
 80054ea:	f200 80df 	bhi.w	80056ac <create_name+0x214>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80054ee:	2101      	movs	r1, #1
 80054f0:	f000 ffae 	bl	8006450 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80054f4:	4680      	mov	r8, r0
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f000 80da 	beq.w	80056b0 <create_name+0x218>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80054fc:	287f      	cmp	r0, #127	; 0x7f
 80054fe:	d8e6      	bhi.n	80054ce <create_name+0x36>
 8005500:	4601      	mov	r1, r0
 8005502:	486d      	ldr	r0, [pc, #436]	; (80056b8 <create_name+0x220>)
 8005504:	f7fe ff9e 	bl	8004444 <chk_chr>
 8005508:	2800      	cmp	r0, #0
 800550a:	d0e0      	beq.n	80054ce <create_name+0x36>
 800550c:	2006      	movs	r0, #6
 800550e:	e085      	b.n	800561c <create_name+0x184>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005510:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005514:	e000      	b.n	8005518 <create_name+0x80>
		di--;
 8005516:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005518:	b144      	cbz	r4, 800552c <create_name+0x94>
		w = lfn[di - 1];
 800551a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800551e:	3b01      	subs	r3, #1
 8005520:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8005524:	2b20      	cmp	r3, #32
 8005526:	d0f6      	beq.n	8005516 <create_name+0x7e>
 8005528:	2b2e      	cmp	r3, #46	; 0x2e
 800552a:	d0f4      	beq.n	8005516 <create_name+0x7e>
	lfn[di] = 0;						/* LFN is created */
 800552c:	2300      	movs	r3, #0
 800552e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005532:	2c00      	cmp	r4, #0
 8005534:	f000 80be 	beq.w	80056b4 <create_name+0x21c>
	mem_set(dp->fn, ' ', 11);
 8005538:	220b      	movs	r2, #11
 800553a:	2120      	movs	r1, #32
 800553c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005540:	f7fe ff6e 	bl	8004420 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <create_name+0xb2>
 8005548:	3301      	adds	r3, #1
 800554a:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800554e:	2a20      	cmp	r2, #32
 8005550:	d0fa      	beq.n	8005548 <create_name+0xb0>
 8005552:	2a2e      	cmp	r2, #46	; 0x2e
 8005554:	d0f8      	beq.n	8005548 <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005556:	b11b      	cbz	r3, 8005560 <create_name+0xc8>
 8005558:	f048 0803 	orr.w	r8, r8, #3
 800555c:	e000      	b.n	8005560 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800555e:	3c01      	subs	r4, #1
 8005560:	b16c      	cbz	r4, 800557e <create_name+0xe6>
 8005562:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 8005566:	3a01      	subs	r2, #1
 8005568:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800556c:	2a2e      	cmp	r2, #46	; 0x2e
 800556e:	d1f6      	bne.n	800555e <create_name+0xc6>
 8005570:	f04f 0b08 	mov.w	fp, #8
 8005574:	f04f 0a00 	mov.w	sl, #0
 8005578:	f8cd a004 	str.w	sl, [sp, #4]
 800557c:	e00a      	b.n	8005594 <create_name+0xfc>
 800557e:	46a2      	mov	sl, r4
 8005580:	f04f 0b08 	mov.w	fp, #8
 8005584:	2200      	movs	r2, #0
 8005586:	9201      	str	r2, [sp, #4]
 8005588:	e004      	b.n	8005594 <create_name+0xfc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800558a:	454c      	cmp	r4, r9
 800558c:	d00b      	beq.n	80055a6 <create_name+0x10e>
			cf |= NS_LOSS | NS_LFN; continue;
 800558e:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8005592:	464b      	mov	r3, r9
 8005594:	f103 0901 	add.w	r9, r3, #1
 8005598:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800559c:	b1fe      	cbz	r6, 80055de <create_name+0x146>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800559e:	2e20      	cmp	r6, #32
 80055a0:	d0f5      	beq.n	800558e <create_name+0xf6>
 80055a2:	2e2e      	cmp	r6, #46	; 0x2e
 80055a4:	d0f1      	beq.n	800558a <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80055a6:	45da      	cmp	sl, fp
 80055a8:	d210      	bcs.n	80055cc <create_name+0x134>
 80055aa:	454c      	cmp	r4, r9
 80055ac:	d00e      	beq.n	80055cc <create_name+0x134>
		if (w >= 0x80) {				/* Non ASCII character */
 80055ae:	2e7f      	cmp	r6, #127	; 0x7f
 80055b0:	d844      	bhi.n	800563c <create_name+0x1a4>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80055b2:	2e00      	cmp	r6, #0
 80055b4:	d14f      	bne.n	8005656 <create_name+0x1be>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80055b6:	f048 0803 	orr.w	r8, r8, #3
 80055ba:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80055bc:	eb07 030a 	add.w	r3, r7, sl
 80055c0:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80055c4:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 80055c6:	f10a 0a01 	add.w	sl, sl, #1
 80055ca:	e7e3      	b.n	8005594 <create_name+0xfc>
			if (ni == 11) {				/* Long extension */
 80055cc:	f1bb 0f0b 	cmp.w	fp, #11
 80055d0:	d027      	beq.n	8005622 <create_name+0x18a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80055d2:	454c      	cmp	r4, r9
 80055d4:	d001      	beq.n	80055da <create_name+0x142>
 80055d6:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 80055da:	454c      	cmp	r4, r9
 80055dc:	d224      	bcs.n	8005628 <create_name+0x190>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80055de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055e2:	2be5      	cmp	r3, #229	; 0xe5
 80055e4:	d053      	beq.n	800568e <create_name+0x1f6>
	if (ni == 8) b <<= 2;
 80055e6:	f1bb 0f08 	cmp.w	fp, #8
 80055ea:	d054      	beq.n	8005696 <create_name+0x1fe>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80055ec:	9b01      	ldr	r3, [sp, #4]
 80055ee:	f003 020c 	and.w	r2, r3, #12
 80055f2:	2a0c      	cmp	r2, #12
 80055f4:	d003      	beq.n	80055fe <create_name+0x166>
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d101      	bne.n	8005602 <create_name+0x16a>
 80055fe:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005602:	f018 0f02 	tst.w	r8, #2
 8005606:	d106      	bne.n	8005616 <create_name+0x17e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005608:	9b01      	ldr	r3, [sp, #4]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d046      	beq.n	80056a0 <create_name+0x208>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005612:	2a04      	cmp	r2, #4
 8005614:	d047      	beq.n	80056a6 <create_name+0x20e>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005616:	f887 802f 	strb.w	r8, [r7, #47]	; 0x2f
	return FR_OK;
 800561a:	2000      	movs	r0, #0
}
 800561c:	b003      	add	sp, #12
 800561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8005622:	f048 0803 	orr.w	r8, r8, #3
 8005626:	e7da      	b.n	80055de <create_name+0x146>
			b <<= 2; continue;
 8005628:	9b01      	ldr	r3, [sp, #4]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	b2db      	uxtb	r3, r3
 800562e:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005630:	4623      	mov	r3, r4
 8005632:	f04f 0b0b 	mov.w	fp, #11
 8005636:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800563a:	e7ab      	b.n	8005594 <create_name+0xfc>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800563c:	2100      	movs	r1, #0
 800563e:	4630      	mov	r0, r6
 8005640:	f000 ff06 	bl	8006450 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005644:	4606      	mov	r6, r0
 8005646:	b118      	cbz	r0, 8005650 <create_name+0x1b8>
 8005648:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 800564c:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <create_name+0x224>)
 800564e:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 8005650:	f048 0802 	orr.w	r8, r8, #2
 8005654:	e7ad      	b.n	80055b2 <create_name+0x11a>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005656:	4631      	mov	r1, r6
 8005658:	4819      	ldr	r0, [pc, #100]	; (80056c0 <create_name+0x228>)
 800565a:	f7fe fef3 	bl	8004444 <chk_chr>
 800565e:	2800      	cmp	r0, #0
 8005660:	d1a9      	bne.n	80055b6 <create_name+0x11e>
				if (IsUpper(w)) {		/* ASCII large capital */
 8005662:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b19      	cmp	r3, #25
 800566a:	d804      	bhi.n	8005676 <create_name+0x1de>
					b |= 2;
 800566c:	9b01      	ldr	r3, [sp, #4]
 800566e:	f043 0302 	orr.w	r3, r3, #2
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	e7a2      	b.n	80055bc <create_name+0x124>
					if (IsLower(w)) {	/* ASCII small capital */
 8005676:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b19      	cmp	r3, #25
 800567e:	d89d      	bhi.n	80055bc <create_name+0x124>
						b |= 1; w -= 0x20;
 8005680:	9b01      	ldr	r3, [sp, #4]
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	3e20      	subs	r6, #32
 800568a:	b2b6      	uxth	r6, r6
 800568c:	e796      	b.n	80055bc <create_name+0x124>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800568e:	2305      	movs	r3, #5
 8005690:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005694:	e7a7      	b.n	80055e6 <create_name+0x14e>
	if (ni == 8) b <<= 2;
 8005696:	9b01      	ldr	r3, [sp, #4]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	b2db      	uxtb	r3, r3
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	e7a5      	b.n	80055ec <create_name+0x154>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80056a0:	f048 0810 	orr.w	r8, r8, #16
 80056a4:	e7b5      	b.n	8005612 <create_name+0x17a>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80056a6:	f048 0808 	orr.w	r8, r8, #8
 80056aa:	e7b4      	b.n	8005616 <create_name+0x17e>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80056ac:	2006      	movs	r0, #6
 80056ae:	e7b5      	b.n	800561c <create_name+0x184>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80056b0:	2006      	movs	r0, #6
 80056b2:	e7b3      	b.n	800561c <create_name+0x184>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80056b4:	2006      	movs	r0, #6
 80056b6:	e7b1      	b.n	800561c <create_name+0x184>
 80056b8:	0800a2e4 	.word	0x0800a2e4
 80056bc:	0800a2f8 	.word	0x0800a2f8
 80056c0:	0800a2f0 	.word	0x0800a2f0

080056c4 <cmp_lfn>:
{
 80056c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	4681      	mov	r9, r0
 80056ca:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80056cc:	f101 001a 	add.w	r0, r1, #26
 80056d0:	f7fe fe7e 	bl	80043d0 <ld_word>
 80056d4:	bbc8      	cbnz	r0, 800574a <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80056d6:	783e      	ldrb	r6, [r7, #0]
 80056d8:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 80056dc:	3e01      	subs	r6, #1
 80056de:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80056e2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80056e6:	f04f 0801 	mov.w	r8, #1
 80056ea:	2500      	movs	r5, #0
 80056ec:	e006      	b.n	80056fc <cmp_lfn+0x38>
				return 0;					/* Not matched */
 80056ee:	2000      	movs	r0, #0
 80056f0:	e02c      	b.n	800574c <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80056f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056f6:	4298      	cmp	r0, r3
 80056f8:	d12a      	bne.n	8005750 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80056fa:	3501      	adds	r5, #1
 80056fc:	2d0c      	cmp	r5, #12
 80056fe:	d818      	bhi.n	8005732 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005700:	4b17      	ldr	r3, [pc, #92]	; (8005760 <cmp_lfn+0x9c>)
 8005702:	5d58      	ldrb	r0, [r3, r5]
 8005704:	4438      	add	r0, r7
 8005706:	f7fe fe63 	bl	80043d0 <ld_word>
 800570a:	4604      	mov	r4, r0
		if (wc) {
 800570c:	f1b8 0f00 	cmp.w	r8, #0
 8005710:	d0ef      	beq.n	80056f2 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005712:	2efe      	cmp	r6, #254	; 0xfe
 8005714:	d8eb      	bhi.n	80056ee <cmp_lfn+0x2a>
 8005716:	f000 feb9 	bl	800648c <ff_wtoupper>
 800571a:	4680      	mov	r8, r0
 800571c:	f106 0a01 	add.w	sl, r6, #1
 8005720:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 8005724:	f000 feb2 	bl	800648c <ff_wtoupper>
 8005728:	4580      	cmp	r8, r0
 800572a:	d1e0      	bne.n	80056ee <cmp_lfn+0x2a>
			wc = uc;
 800572c:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800572e:	4656      	mov	r6, sl
 8005730:	e7e3      	b.n	80056fa <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005732:	783b      	ldrb	r3, [r7, #0]
 8005734:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005738:	d00c      	beq.n	8005754 <cmp_lfn+0x90>
 800573a:	f1b8 0f00 	cmp.w	r8, #0
 800573e:	d00b      	beq.n	8005758 <cmp_lfn+0x94>
 8005740:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8005744:	b953      	cbnz	r3, 800575c <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 8005746:	2001      	movs	r0, #1
 8005748:	e000      	b.n	800574c <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800574a:	2000      	movs	r0, #0
}
 800574c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005750:	2000      	movs	r0, #0
 8005752:	e7fb      	b.n	800574c <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 8005754:	2001      	movs	r0, #1
 8005756:	e7f9      	b.n	800574c <cmp_lfn+0x88>
 8005758:	2001      	movs	r0, #1
 800575a:	e7f7      	b.n	800574c <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800575c:	2000      	movs	r0, #0
 800575e:	e7f5      	b.n	800574c <cmp_lfn+0x88>
 8005760:	0800a378 	.word	0x0800a378

08005764 <dir_find>:
{
 8005764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005768:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800576a:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800576e:	2100      	movs	r1, #0
 8005770:	f7ff fc0d 	bl	8004f8e <dir_sdi>
	if (res != FR_OK) return res;
 8005774:	4606      	mov	r6, r0
 8005776:	2800      	cmp	r0, #0
 8005778:	d164      	bne.n	8005844 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800577a:	f04f 33ff 	mov.w	r3, #4294967295
 800577e:	6323      	str	r3, [r4, #48]	; 0x30
 8005780:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8005784:	464f      	mov	r7, r9
 8005786:	e00a      	b.n	800579e <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005788:	f04f 33ff 	mov.w	r3, #4294967295
 800578c:	6323      	str	r3, [r4, #48]	; 0x30
 800578e:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8005790:	2100      	movs	r1, #0
 8005792:	4620      	mov	r0, r4
 8005794:	f7ff fd00 	bl	8005198 <dir_next>
	} while (res == FR_OK);
 8005798:	4606      	mov	r6, r0
 800579a:	2800      	cmp	r0, #0
 800579c:	d152      	bne.n	8005844 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 800579e:	69e1      	ldr	r1, [r4, #28]
 80057a0:	4640      	mov	r0, r8
 80057a2:	f7ff f8d6 	bl	8004952 <move_window>
		if (res != FR_OK) break;
 80057a6:	4606      	mov	r6, r0
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d14b      	bne.n	8005844 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 80057ac:	6a25      	ldr	r5, [r4, #32]
 80057ae:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d046      	beq.n	8005842 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80057b4:	7ae9      	ldrb	r1, [r5, #11]
 80057b6:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 80057ba:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80057bc:	2be5      	cmp	r3, #229	; 0xe5
 80057be:	d0e3      	beq.n	8005788 <dir_find+0x24>
 80057c0:	f011 0f08 	tst.w	r1, #8
 80057c4:	d001      	beq.n	80057ca <dir_find+0x66>
 80057c6:	2a0f      	cmp	r2, #15
 80057c8:	d1de      	bne.n	8005788 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80057ca:	2a0f      	cmp	r2, #15
 80057cc:	d016      	beq.n	80057fc <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80057ce:	b927      	cbnz	r7, 80057da <dir_find+0x76>
 80057d0:	4628      	mov	r0, r5
 80057d2:	f7ff f832 	bl	800483a <sum_sfn>
 80057d6:	4548      	cmp	r0, r9
 80057d8:	d034      	beq.n	8005844 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80057da:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80057de:	f013 0f01 	tst.w	r3, #1
 80057e2:	d106      	bne.n	80057f2 <dir_find+0x8e>
 80057e4:	220b      	movs	r2, #11
 80057e6:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80057ea:	4628      	mov	r0, r5
 80057ec:	f7fe fe1d 	bl	800442a <mem_cmp>
 80057f0:	b340      	cbz	r0, 8005844 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80057f2:	f04f 33ff 	mov.w	r3, #4294967295
 80057f6:	6323      	str	r3, [r4, #48]	; 0x30
 80057f8:	27ff      	movs	r7, #255	; 0xff
 80057fa:	e7c9      	b.n	8005790 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80057fc:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8005800:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005804:	d1c4      	bne.n	8005790 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005806:	f013 0f40 	tst.w	r3, #64	; 0x40
 800580a:	d006      	beq.n	800581a <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 800580c:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005810:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005814:	6962      	ldr	r2, [r4, #20]
 8005816:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005818:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800581a:	42bb      	cmp	r3, r7
 800581c:	d001      	beq.n	8005822 <dir_find+0xbe>
 800581e:	27ff      	movs	r7, #255	; 0xff
 8005820:	e7b6      	b.n	8005790 <dir_find+0x2c>
 8005822:	7b6b      	ldrb	r3, [r5, #13]
 8005824:	454b      	cmp	r3, r9
 8005826:	d001      	beq.n	800582c <dir_find+0xc8>
 8005828:	27ff      	movs	r7, #255	; 0xff
 800582a:	e7b1      	b.n	8005790 <dir_find+0x2c>
 800582c:	4629      	mov	r1, r5
 800582e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8005832:	f7ff ff47 	bl	80056c4 <cmp_lfn>
 8005836:	b110      	cbz	r0, 800583e <dir_find+0xda>
 8005838:	3f01      	subs	r7, #1
 800583a:	b2ff      	uxtb	r7, r7
 800583c:	e7a8      	b.n	8005790 <dir_find+0x2c>
 800583e:	27ff      	movs	r7, #255	; 0xff
 8005840:	e7a6      	b.n	8005790 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005842:	2604      	movs	r6, #4
}
 8005844:	4630      	mov	r0, r6
 8005846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800584a <follow_path>:
{
 800584a:	b530      	push	{r4, r5, lr}
 800584c:	b083      	sub	sp, #12
 800584e:	4604      	mov	r4, r0
 8005850:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8005852:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005854:	e001      	b.n	800585a <follow_path+0x10>
 8005856:	3301      	adds	r3, #1
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	9b01      	ldr	r3, [sp, #4]
 800585c:	781a      	ldrb	r2, [r3, #0]
 800585e:	2a2f      	cmp	r2, #47	; 0x2f
 8005860:	d0f9      	beq.n	8005856 <follow_path+0xc>
 8005862:	2a5c      	cmp	r2, #92	; 0x5c
 8005864:	d0f7      	beq.n	8005856 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8005866:	2200      	movs	r2, #0
 8005868:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b1f      	cmp	r3, #31
 800586e:	d921      	bls.n	80058b4 <follow_path+0x6a>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005870:	a901      	add	r1, sp, #4
 8005872:	4620      	mov	r0, r4
 8005874:	f7ff fe10 	bl	8005498 <create_name>
			if (res != FR_OK) break;
 8005878:	4603      	mov	r3, r0
 800587a:	bb18      	cbnz	r0, 80058c4 <follow_path+0x7a>
			res = dir_find(dp);				/* Find an object with the segment name */
 800587c:	4620      	mov	r0, r4
 800587e:	f7ff ff71 	bl	8005764 <dir_find>
			ns = dp->fn[NSFLAG];
 8005882:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8005886:	4603      	mov	r3, r0
 8005888:	b9f8      	cbnz	r0, 80058ca <follow_path+0x80>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800588a:	f012 0f04 	tst.w	r2, #4
 800588e:	d119      	bne.n	80058c4 <follow_path+0x7a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005890:	79a3      	ldrb	r3, [r4, #6]
 8005892:	f013 0f10 	tst.w	r3, #16
 8005896:	d01f      	beq.n	80058d8 <follow_path+0x8e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005898:	f105 0338 	add.w	r3, r5, #56	; 0x38
 800589c:	6961      	ldr	r1, [r4, #20]
 800589e:	89aa      	ldrh	r2, [r5, #12]
 80058a0:	fbb1 f0f2 	udiv	r0, r1, r2
 80058a4:	fb02 1110 	mls	r1, r2, r0, r1
 80058a8:	4419      	add	r1, r3
 80058aa:	4628      	mov	r0, r5
 80058ac:	f7fe fecb 	bl	8004646 <ld_clust>
 80058b0:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80058b2:	e7dd      	b.n	8005870 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 80058b4:	2380      	movs	r3, #128	; 0x80
 80058b6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80058ba:	4611      	mov	r1, r2
 80058bc:	4620      	mov	r0, r4
 80058be:	f7ff fb66 	bl	8004f8e <dir_sdi>
 80058c2:	4603      	mov	r3, r0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	b003      	add	sp, #12
 80058c8:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 80058ca:	2804      	cmp	r0, #4
 80058cc:	d1fa      	bne.n	80058c4 <follow_path+0x7a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80058ce:	f012 0f04 	tst.w	r2, #4
 80058d2:	d1f7      	bne.n	80058c4 <follow_path+0x7a>
 80058d4:	2305      	movs	r3, #5
 80058d6:	e7f5      	b.n	80058c4 <follow_path+0x7a>
				res = FR_NO_PATH; break;
 80058d8:	2305      	movs	r3, #5
 80058da:	e7f3      	b.n	80058c4 <follow_path+0x7a>

080058dc <dir_register>:
{
 80058dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058e0:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 80058e2:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80058e4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80058e8:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 80058ec:	f040 808e 	bne.w	8005a0c <dir_register+0x130>
 80058f0:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80058f2:	2400      	movs	r4, #0
 80058f4:	e000      	b.n	80058f8 <dir_register+0x1c>
 80058f6:	3401      	adds	r4, #1
 80058f8:	6933      	ldr	r3, [r6, #16]
 80058fa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f9      	bne.n	80058f6 <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 8005902:	f107 0824 	add.w	r8, r7, #36	; 0x24
 8005906:	220c      	movs	r2, #12
 8005908:	4641      	mov	r1, r8
 800590a:	a801      	add	r0, sp, #4
 800590c:	f7fe fd7e 	bl	800440c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005910:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005914:	f013 0f01 	tst.w	r3, #1
 8005918:	d01c      	beq.n	8005954 <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800591a:	2340      	movs	r3, #64	; 0x40
 800591c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005920:	2501      	movs	r5, #1
 8005922:	e000      	b.n	8005926 <dir_register+0x4a>
 8005924:	3501      	adds	r5, #1
 8005926:	2d63      	cmp	r5, #99	; 0x63
 8005928:	d80b      	bhi.n	8005942 <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800592a:	462b      	mov	r3, r5
 800592c:	6932      	ldr	r2, [r6, #16]
 800592e:	a901      	add	r1, sp, #4
 8005930:	4640      	mov	r0, r8
 8005932:	f7fe ff2d 	bl	8004790 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005936:	4638      	mov	r0, r7
 8005938:	f7ff ff14 	bl	8005764 <dir_find>
			if (res != FR_OK) break;
 800593c:	4681      	mov	r9, r0
 800593e:	2800      	cmp	r0, #0
 8005940:	d0f0      	beq.n	8005924 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005942:	2d64      	cmp	r5, #100	; 0x64
 8005944:	d065      	beq.n	8005a12 <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005946:	f1b9 0f04 	cmp.w	r9, #4
 800594a:	d11b      	bne.n	8005984 <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800594c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005954:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005958:	f013 0f02 	tst.w	r3, #2
 800595c:	d006      	beq.n	800596c <dir_register+0x90>
 800595e:	340c      	adds	r4, #12
 8005960:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <dir_register+0x13c>)
 8005962:	fba3 3404 	umull	r3, r4, r3, r4
 8005966:	08a4      	lsrs	r4, r4, #2
 8005968:	3401      	adds	r4, #1
 800596a:	e000      	b.n	800596e <dir_register+0x92>
 800596c:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800596e:	4621      	mov	r1, r4
 8005970:	4638      	mov	r0, r7
 8005972:	f7ff fc9d 	bl	80052b0 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005976:	4681      	mov	r9, r0
 8005978:	b908      	cbnz	r0, 800597e <dir_register+0xa2>
 800597a:	3c01      	subs	r4, #1
 800597c:	d106      	bne.n	800598c <dir_register+0xb0>
	if (res == FR_OK) {
 800597e:	f1b9 0f00 	cmp.w	r9, #0
 8005982:	d029      	beq.n	80059d8 <dir_register+0xfc>
}
 8005984:	4648      	mov	r0, r9
 8005986:	b005      	add	sp, #20
 8005988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800598c:	6979      	ldr	r1, [r7, #20]
 800598e:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8005992:	4638      	mov	r0, r7
 8005994:	f7ff fafb 	bl	8004f8e <dir_sdi>
		if (res == FR_OK) {
 8005998:	4681      	mov	r9, r0
 800599a:	2800      	cmp	r0, #0
 800599c:	d1ef      	bne.n	800597e <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800599e:	4640      	mov	r0, r8
 80059a0:	f7fe ff4b 	bl	800483a <sum_sfn>
 80059a4:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 80059a6:	69f9      	ldr	r1, [r7, #28]
 80059a8:	4630      	mov	r0, r6
 80059aa:	f7fe ffd2 	bl	8004952 <move_window>
				if (res != FR_OK) break;
 80059ae:	4681      	mov	r9, r0
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d1e4      	bne.n	800597e <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80059b4:	462b      	mov	r3, r5
 80059b6:	b2e2      	uxtb	r2, r4
 80059b8:	6a39      	ldr	r1, [r7, #32]
 80059ba:	6930      	ldr	r0, [r6, #16]
 80059bc:	f7fe feac 	bl	8004718 <put_lfn>
				fs->wflag = 1;
 80059c0:	2301      	movs	r3, #1
 80059c2:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80059c4:	2100      	movs	r1, #0
 80059c6:	4638      	mov	r0, r7
 80059c8:	f7ff fbe6 	bl	8005198 <dir_next>
			} while (res == FR_OK && --nent);
 80059cc:	4681      	mov	r9, r0
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d1d5      	bne.n	800597e <dir_register+0xa2>
 80059d2:	3c01      	subs	r4, #1
 80059d4:	d1e7      	bne.n	80059a6 <dir_register+0xca>
 80059d6:	e7d2      	b.n	800597e <dir_register+0xa2>
		res = move_window(fs, dp->sect);
 80059d8:	69f9      	ldr	r1, [r7, #28]
 80059da:	4630      	mov	r0, r6
 80059dc:	f7fe ffb9 	bl	8004952 <move_window>
		if (res == FR_OK) {
 80059e0:	4681      	mov	r9, r0
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d1ce      	bne.n	8005984 <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80059e6:	2220      	movs	r2, #32
 80059e8:	2100      	movs	r1, #0
 80059ea:	6a38      	ldr	r0, [r7, #32]
 80059ec:	f7fe fd18 	bl	8004420 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80059f0:	220b      	movs	r2, #11
 80059f2:	4641      	mov	r1, r8
 80059f4:	6a38      	ldr	r0, [r7, #32]
 80059f6:	f7fe fd09 	bl	800440c <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80059fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	f003 0318 	and.w	r3, r3, #24
 8005a04:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8005a06:	2301      	movs	r3, #1
 8005a08:	70f3      	strb	r3, [r6, #3]
 8005a0a:	e7bb      	b.n	8005984 <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005a0c:	f04f 0906 	mov.w	r9, #6
 8005a10:	e7b8      	b.n	8005984 <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005a12:	f04f 0907 	mov.w	r9, #7
 8005a16:	e7b5      	b.n	8005984 <dir_register+0xa8>
 8005a18:	4ec4ec4f 	.word	0x4ec4ec4f

08005a1c <f_mount>:
{
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	9001      	str	r0, [sp, #4]
 8005a22:	9100      	str	r1, [sp, #0]
 8005a24:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 8005a26:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8005a28:	a803      	add	r0, sp, #12
 8005a2a:	f7fe ff16 	bl	800485a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a2e:	1e04      	subs	r4, r0, #0
 8005a30:	db1c      	blt.n	8005a6c <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005a32:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <f_mount+0x58>)
 8005a34:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (cfs) {
 8005a38:	b125      	cbz	r5, 8005a44 <f_mount+0x28>
		clear_lock(cfs);
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f7fe fdc6 	bl	80045cc <clear_lock>
		cfs->fs_type = 0;				/* Clear old fs object */
 8005a40:	2300      	movs	r3, #0
 8005a42:	702b      	strb	r3, [r5, #0]
	if (fs) {
 8005a44:	9b01      	ldr	r3, [sp, #4]
 8005a46:	b10b      	cbz	r3, 8005a4c <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8005a4c:	9b01      	ldr	r3, [sp, #4]
 8005a4e:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <f_mount+0x58>)
 8005a50:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005a54:	b163      	cbz	r3, 8005a70 <f_mount+0x54>
 8005a56:	2e01      	cmp	r6, #1
 8005a58:	d002      	beq.n	8005a60 <f_mount+0x44>
 8005a5a:	2000      	movs	r0, #0
}
 8005a5c:	b004      	add	sp, #16
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005a60:	2200      	movs	r2, #0
 8005a62:	a901      	add	r1, sp, #4
 8005a64:	4668      	mov	r0, sp
 8005a66:	f7fe ffcb 	bl	8004a00 <find_volume>
	LEAVE_FF(fs, res);
 8005a6a:	e7f7      	b.n	8005a5c <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a6c:	200b      	movs	r0, #11
 8005a6e:	e7f5      	b.n	8005a5c <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005a70:	2000      	movs	r0, #0
 8005a72:	e7f3      	b.n	8005a5c <f_mount+0x40>
 8005a74:	200039bc 	.word	0x200039bc

08005a78 <f_open>:
{
 8005a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a7c:	b091      	sub	sp, #68	; 0x44
 8005a7e:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f000 8111 	beq.w	8005ca8 <f_open+0x230>
 8005a86:	4615      	mov	r5, r2
 8005a88:	4606      	mov	r6, r0
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005a8a:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8005a8e:	463a      	mov	r2, r7
 8005a90:	a902      	add	r1, sp, #8
 8005a92:	a801      	add	r0, sp, #4
 8005a94:	f7fe ffb4 	bl	8004a00 <find_volume>
	if (res == FR_OK) {
 8005a98:	4604      	mov	r4, r0
 8005a9a:	b130      	cbz	r0, 8005aaa <f_open+0x32>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005a9c:	b10c      	cbz	r4, 8005aa2 <f_open+0x2a>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6033      	str	r3, [r6, #0]
}
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	b011      	add	sp, #68	; 0x44
 8005aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8005aaa:	9b02      	ldr	r3, [sp, #8]
 8005aac:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005aae:	9901      	ldr	r1, [sp, #4]
 8005ab0:	a803      	add	r0, sp, #12
 8005ab2:	f7ff feca 	bl	800584a <follow_path>
		if (res == FR_OK) {
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	b960      	cbnz	r0, 8005ad4 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005aba:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	db50      	blt.n	8005b64 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ac2:	f037 0301 	bics.w	r3, r7, #1
 8005ac6:	bf14      	ite	ne
 8005ac8:	2101      	movne	r1, #1
 8005aca:	2100      	moveq	r1, #0
 8005acc:	a803      	add	r0, sp, #12
 8005ace:	f7fe fcc1 	bl	8004454 <chk_lock>
 8005ad2:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005ad4:	f015 0f1c 	tst.w	r5, #28
 8005ad8:	d05a      	beq.n	8005b90 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 8005ada:	2c00      	cmp	r4, #0
 8005adc:	d04e      	beq.n	8005b7c <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005ade:	2c04      	cmp	r4, #4
 8005ae0:	d042      	beq.n	8005b68 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005ae2:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005ae6:	2c00      	cmp	r4, #0
 8005ae8:	d161      	bne.n	8005bae <f_open+0x136>
 8005aea:	f017 0f08 	tst.w	r7, #8
 8005aee:	d05e      	beq.n	8005bae <f_open+0x136>
				dw = GET_FATTIME();
 8005af0:	f7fe fc0e 	bl	8004310 <get_fattime>
 8005af4:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005af6:	4601      	mov	r1, r0
 8005af8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005afa:	300e      	adds	r0, #14
 8005afc:	f7fe fc7c 	bl	80043f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005b00:	4629      	mov	r1, r5
 8005b02:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005b04:	3016      	adds	r0, #22
 8005b06:	f7fe fc77 	bl	80043f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005b10:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005b14:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005b18:	4649      	mov	r1, r9
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	f7fe fd93 	bl	8004646 <ld_clust>
 8005b20:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005b22:	2200      	movs	r2, #0
 8005b24:	4649      	mov	r1, r9
 8005b26:	4640      	mov	r0, r8
 8005b28:	f7fe fda0 	bl	800466c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005b30:	301c      	adds	r0, #28
 8005b32:	f7fe fc61 	bl	80043f8 <st_dword>
					fs->wflag = 1;
 8005b36:	9b02      	ldr	r3, [sp, #8]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8005b3c:	b3bd      	cbz	r5, 8005bae <f_open+0x136>
						dw = fs->winsect;
 8005b3e:	9b02      	ldr	r3, [sp, #8]
 8005b40:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8005b44:	2200      	movs	r2, #0
 8005b46:	4629      	mov	r1, r5
 8005b48:	a803      	add	r0, sp, #12
 8005b4a:	f7ff fae6 	bl	800511a <remove_chain>
						if (res == FR_OK) {
 8005b4e:	4604      	mov	r4, r0
 8005b50:	bb68      	cbnz	r0, 8005bae <f_open+0x136>
							res = move_window(fs, dw);
 8005b52:	4641      	mov	r1, r8
 8005b54:	9802      	ldr	r0, [sp, #8]
 8005b56:	f7fe fefc 	bl	8004952 <move_window>
 8005b5a:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005b5c:	3d01      	subs	r5, #1
 8005b5e:	9b02      	ldr	r3, [sp, #8]
 8005b60:	615d      	str	r5, [r3, #20]
 8005b62:	e024      	b.n	8005bae <f_open+0x136>
				res = FR_INVALID_NAME;
 8005b64:	2406      	movs	r4, #6
 8005b66:	e7b5      	b.n	8005ad4 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005b68:	f7fe fcae 	bl	80044c8 <enq_lock>
 8005b6c:	b908      	cbnz	r0, 8005b72 <f_open+0xfa>
 8005b6e:	2412      	movs	r4, #18
 8005b70:	e7b7      	b.n	8005ae2 <f_open+0x6a>
 8005b72:	a803      	add	r0, sp, #12
 8005b74:	f7ff feb2 	bl	80058dc <dir_register>
 8005b78:	4604      	mov	r4, r0
 8005b7a:	e7b2      	b.n	8005ae2 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005b7c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005b80:	f013 0f11 	tst.w	r3, #17
 8005b84:	d112      	bne.n	8005bac <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005b86:	f015 0f04 	tst.w	r5, #4
 8005b8a:	d0ac      	beq.n	8005ae6 <f_open+0x6e>
 8005b8c:	2408      	movs	r4, #8
 8005b8e:	e00e      	b.n	8005bae <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 8005b90:	b96c      	cbnz	r4, 8005bae <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005b92:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005b96:	f013 0f10 	tst.w	r3, #16
 8005b9a:	d14e      	bne.n	8005c3a <f_open+0x1c2>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005b9c:	f015 0f02 	tst.w	r5, #2
 8005ba0:	d005      	beq.n	8005bae <f_open+0x136>
 8005ba2:	f013 0f01 	tst.w	r3, #1
 8005ba6:	d002      	beq.n	8005bae <f_open+0x136>
						res = FR_DENIED;
 8005ba8:	2407      	movs	r4, #7
 8005baa:	e016      	b.n	8005bda <f_open+0x162>
					res = FR_DENIED;
 8005bac:	2407      	movs	r4, #7
		if (res == FR_OK) {
 8005bae:	b9a4      	cbnz	r4, 8005bda <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005bb0:	f017 0f08 	tst.w	r7, #8
 8005bb4:	d001      	beq.n	8005bba <f_open+0x142>
				mode |= FA_MODIFIED;
 8005bb6:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005bba:	9b02      	ldr	r3, [sp, #8]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbe:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc2:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005bc4:	f037 0301 	bics.w	r3, r7, #1
 8005bc8:	bf14      	ite	ne
 8005bca:	2101      	movne	r1, #1
 8005bcc:	2100      	moveq	r1, #0
 8005bce:	a803      	add	r0, sp, #12
 8005bd0:	f7fe fc8a 	bl	80044e8 <inc_lock>
 8005bd4:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d064      	beq.n	8005ca4 <f_open+0x22c>
		if (res == FR_OK) {
 8005bda:	2c00      	cmp	r4, #0
 8005bdc:	f47f af5e 	bne.w	8005a9c <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005be0:	9d02      	ldr	r5, [sp, #8]
 8005be2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005be6:	4641      	mov	r1, r8
 8005be8:	4628      	mov	r0, r5
 8005bea:	f7fe fd2c 	bl	8004646 <ld_clust>
 8005bee:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005bf0:	f108 001c 	add.w	r0, r8, #28
 8005bf4:	f7fe fbf1 	bl	80043da <ld_dword>
 8005bf8:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005bfe:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 8005c00:	88eb      	ldrh	r3, [r5, #6]
 8005c02:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8005c04:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8005c06:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005c08:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005c0a:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005c0c:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8005c10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c14:	4640      	mov	r0, r8
 8005c16:	f7fe fc03 	bl	8004420 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005c1a:	f017 0f20 	tst.w	r7, #32
 8005c1e:	f43f af3d 	beq.w	8005a9c <f_open+0x24>
 8005c22:	68f5      	ldr	r5, [r6, #12]
 8005c24:	2d00      	cmp	r5, #0
 8005c26:	f43f af39 	beq.w	8005a9c <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005c2a:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005c2c:	9b02      	ldr	r3, [sp, #8]
 8005c2e:	895f      	ldrh	r7, [r3, #10]
 8005c30:	899b      	ldrh	r3, [r3, #12]
 8005c32:	fb03 f707 	mul.w	r7, r3, r7
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005c36:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c38:	e005      	b.n	8005c46 <f_open+0x1ce>
					res = FR_NO_FILE;
 8005c3a:	2404      	movs	r4, #4
 8005c3c:	e7cd      	b.n	8005bda <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005c3e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005c42:	d00b      	beq.n	8005c5c <f_open+0x1e4>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c44:	1bed      	subs	r5, r5, r7
 8005c46:	b95c      	cbnz	r4, 8005c60 <f_open+0x1e8>
 8005c48:	42bd      	cmp	r5, r7
 8005c4a:	d909      	bls.n	8005c60 <f_open+0x1e8>
					clst = get_fat(&fp->obj, clst);
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f7ff f920 	bl	8004e92 <get_fat>
 8005c52:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8005c54:	2801      	cmp	r0, #1
 8005c56:	d8f2      	bhi.n	8005c3e <f_open+0x1c6>
 8005c58:	2402      	movs	r4, #2
 8005c5a:	e7f0      	b.n	8005c3e <f_open+0x1c6>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005c5c:	2401      	movs	r4, #1
 8005c5e:	e7f1      	b.n	8005c44 <f_open+0x1cc>
				fp->clust = clst;
 8005c60:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005c62:	2c00      	cmp	r4, #0
 8005c64:	f47f af1a 	bne.w	8005a9c <f_open+0x24>
 8005c68:	9f02      	ldr	r7, [sp, #8]
 8005c6a:	f8b7 900c 	ldrh.w	r9, [r7, #12]
 8005c6e:	fbb5 f3f9 	udiv	r3, r5, r9
 8005c72:	fb09 5313 	mls	r3, r9, r3, r5
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f43f af10 	beq.w	8005a9c <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	f7fe fcc3 	bl	8004608 <clust2sect>
 8005c82:	b908      	cbnz	r0, 8005c88 <f_open+0x210>
						res = FR_INT_ERR;
 8005c84:	2402      	movs	r4, #2
 8005c86:	e70a      	b.n	8005a9e <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005c88:	fbb5 f2f9 	udiv	r2, r5, r9
 8005c8c:	4402      	add	r2, r0
 8005c8e:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	4641      	mov	r1, r8
 8005c94:	7878      	ldrb	r0, [r7, #1]
 8005c96:	f7fe fb77 	bl	8004388 <disk_read>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	f43f aefe 	beq.w	8005a9c <f_open+0x24>
 8005ca0:	2401      	movs	r4, #1
 8005ca2:	e6fc      	b.n	8005a9e <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005ca4:	2402      	movs	r4, #2
 8005ca6:	e6f9      	b.n	8005a9c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8005ca8:	2409      	movs	r4, #9
 8005caa:	e6fa      	b.n	8005aa2 <f_open+0x2a>

08005cac <f_read>:
{
 8005cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	460f      	mov	r7, r1
 8005cb6:	4615      	mov	r5, r2
 8005cb8:	4698      	mov	r8, r3
	*br = 0;	/* Clear read byte counter */
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005cc0:	a903      	add	r1, sp, #12
 8005cc2:	f7fe fdf9 	bl	80048b8 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005cc6:	9001      	str	r0, [sp, #4]
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	f040 80b9 	bne.w	8005e40 <f_read+0x194>
 8005cce:	7d63      	ldrb	r3, [r4, #21]
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f040 80b4 	bne.w	8005e40 <f_read+0x194>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005cd8:	7d23      	ldrb	r3, [r4, #20]
 8005cda:	f013 0f01 	tst.w	r3, #1
 8005cde:	f000 80ce 	beq.w	8005e7e <f_read+0x1d2>
	remain = fp->obj.objsize - fp->fptr;
 8005ce2:	68e6      	ldr	r6, [r4, #12]
 8005ce4:	69a3      	ldr	r3, [r4, #24]
 8005ce6:	1af6      	subs	r6, r6, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005ce8:	42ae      	cmp	r6, r5
 8005cea:	d367      	bcc.n	8005dbc <f_read+0x110>
 8005cec:	462e      	mov	r6, r5
 8005cee:	e065      	b.n	8005dbc <f_read+0x110>
					if (fp->cltbl) {
 8005cf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005cf2:	b11b      	cbz	r3, 8005cfc <f_read+0x50>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f7fe fc93 	bl	8004620 <clmt_clust>
 8005cfa:	e073      	b.n	8005de4 <f_read+0x138>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005cfc:	69e1      	ldr	r1, [r4, #28]
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f7ff f8c7 	bl	8004e92 <get_fat>
 8005d04:	e06e      	b.n	8005de4 <f_read+0x138>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005d06:	f04f 0a02 	mov.w	sl, #2
 8005d0a:	f884 a015 	strb.w	sl, [r4, #21]
 8005d0e:	f8cd a004 	str.w	sl, [sp, #4]
 8005d12:	e095      	b.n	8005e40 <f_read+0x194>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005d14:	f04f 0a01 	mov.w	sl, #1
 8005d18:	f884 a015 	strb.w	sl, [r4, #21]
 8005d1c:	f8cd a004 	str.w	sl, [sp, #4]
 8005d20:	e08e      	b.n	8005e40 <f_read+0x194>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005d22:	f04f 0a02 	mov.w	sl, #2
 8005d26:	f884 a015 	strb.w	sl, [r4, #21]
 8005d2a:	f8cd a004 	str.w	sl, [sp, #4]
 8005d2e:	e087      	b.n	8005e40 <f_read+0x194>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005d30:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	db04      	blt.n	8005d42 <f_read+0x96>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005d38:	9b03      	ldr	r3, [sp, #12]
 8005d3a:	899d      	ldrh	r5, [r3, #12]
 8005d3c:	fb0a f505 	mul.w	r5, sl, r5
				continue;
 8005d40:	e032      	b.n	8005da8 <f_read+0xfc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005d42:	6a20      	ldr	r0, [r4, #32]
 8005d44:	eba0 0009 	sub.w	r0, r0, r9
 8005d48:	4550      	cmp	r0, sl
 8005d4a:	d2f5      	bcs.n	8005d38 <f_read+0x8c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005d4c:	9b03      	ldr	r3, [sp, #12]
 8005d4e:	899a      	ldrh	r2, [r3, #12]
 8005d50:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8005d54:	fb02 7000 	mla	r0, r2, r0, r7
 8005d58:	f7fe fb58 	bl	800440c <mem_cpy>
 8005d5c:	e7ec      	b.n	8005d38 <f_read+0x8c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005d5e:	6a22      	ldr	r2, [r4, #32]
 8005d60:	454a      	cmp	r2, r9
 8005d62:	d00d      	beq.n	8005d80 <f_read+0xd4>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005d64:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	db6d      	blt.n	8005e48 <f_read+0x19c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	464a      	mov	r2, r9
 8005d70:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8005d74:	9803      	ldr	r0, [sp, #12]
 8005d76:	7840      	ldrb	r0, [r0, #1]
 8005d78:	f7fe fb06 	bl	8004388 <disk_read>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d177      	bne.n	8005e70 <f_read+0x1c4>
			fp->sect = sect;
 8005d80:	f8c4 9020 	str.w	r9, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	899d      	ldrh	r5, [r3, #12]
 8005d88:	69a3      	ldr	r3, [r4, #24]
 8005d8a:	fbb3 f1f5 	udiv	r1, r3, r5
 8005d8e:	fb05 3311 	mls	r3, r5, r1, r3
 8005d92:	1aed      	subs	r5, r5, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005d94:	42ae      	cmp	r6, r5
 8005d96:	d200      	bcs.n	8005d9a <f_read+0xee>
 8005d98:	4635      	mov	r5, r6
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005d9a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8005d9e:	462a      	mov	r2, r5
 8005da0:	4419      	add	r1, r3
 8005da2:	4638      	mov	r0, r7
 8005da4:	f7fe fb32 	bl	800440c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005da8:	442f      	add	r7, r5
 8005daa:	69a3      	ldr	r3, [r4, #24]
 8005dac:	442b      	add	r3, r5
 8005dae:	61a3      	str	r3, [r4, #24]
 8005db0:	f8d8 3000 	ldr.w	r3, [r8]
 8005db4:	442b      	add	r3, r5
 8005db6:	f8c8 3000 	str.w	r3, [r8]
 8005dba:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
 8005dbc:	2e00      	cmp	r6, #0
 8005dbe:	d03f      	beq.n	8005e40 <f_read+0x194>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005dc0:	69a1      	ldr	r1, [r4, #24]
 8005dc2:	9a03      	ldr	r2, [sp, #12]
 8005dc4:	8995      	ldrh	r5, [r2, #12]
 8005dc6:	fbb1 f3f5 	udiv	r3, r1, r5
 8005dca:	fb05 1313 	mls	r3, r5, r3, r1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1d8      	bne.n	8005d84 <f_read+0xd8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005dd2:	fbb1 f5f5 	udiv	r5, r1, r5
 8005dd6:	8953      	ldrh	r3, [r2, #10]
 8005dd8:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8005dda:	401d      	ands	r5, r3
 8005ddc:	d108      	bne.n	8005df0 <f_read+0x144>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005dde:	2900      	cmp	r1, #0
 8005de0:	d186      	bne.n	8005cf0 <f_read+0x44>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005de2:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005de4:	2801      	cmp	r0, #1
 8005de6:	d98e      	bls.n	8005d06 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005de8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005dec:	d092      	beq.n	8005d14 <f_read+0x68>
				fp->clust = clst;				/* Update current cluster */
 8005dee:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005df0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005df4:	69e1      	ldr	r1, [r4, #28]
 8005df6:	4658      	mov	r0, fp
 8005df8:	f7fe fc06 	bl	8004608 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005dfc:	4681      	mov	r9, r0
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d08f      	beq.n	8005d22 <f_read+0x76>
			sect += csect;
 8005e02:	44a9      	add	r9, r5
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005e04:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005e08:	fbb6 faf3 	udiv	sl, r6, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005e0c:	42b3      	cmp	r3, r6
 8005e0e:	d8a6      	bhi.n	8005d5e <f_read+0xb2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005e10:	eb05 030a 	add.w	r3, r5, sl
 8005e14:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d901      	bls.n	8005e20 <f_read+0x174>
					cc = fs->csize - csect;
 8005e1c:	eba2 0a05 	sub.w	sl, r2, r5
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e20:	4653      	mov	r3, sl
 8005e22:	464a      	mov	r2, r9
 8005e24:	4639      	mov	r1, r7
 8005e26:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8005e2a:	f7fe faad 	bl	8004388 <disk_read>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f43f af7e 	beq.w	8005d30 <f_read+0x84>
 8005e34:	f04f 0a01 	mov.w	sl, #1
 8005e38:	f884 a015 	strb.w	sl, [r4, #21]
 8005e3c:	f8cd a004 	str.w	sl, [sp, #4]
}
 8005e40:	9801      	ldr	r0, [sp, #4]
 8005e42:	b005      	add	sp, #20
 8005e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8005e4e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8005e52:	f7fe faa5 	bl	80043a0 <disk_write>
 8005e56:	b920      	cbnz	r0, 8005e62 <f_read+0x1b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005e58:	7d23      	ldrb	r3, [r4, #20]
 8005e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5e:	7523      	strb	r3, [r4, #20]
 8005e60:	e784      	b.n	8005d6c <f_read+0xc0>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e62:	f04f 0a01 	mov.w	sl, #1
 8005e66:	f884 a015 	strb.w	sl, [r4, #21]
 8005e6a:	f8cd a004 	str.w	sl, [sp, #4]
 8005e6e:	e7e7      	b.n	8005e40 <f_read+0x194>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005e70:	f04f 0a01 	mov.w	sl, #1
 8005e74:	f884 a015 	strb.w	sl, [r4, #21]
 8005e78:	f8cd a004 	str.w	sl, [sp, #4]
 8005e7c:	e7e0      	b.n	8005e40 <f_read+0x194>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005e7e:	2307      	movs	r3, #7
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	e7dd      	b.n	8005e40 <f_read+0x194>

08005e84 <f_write>:
{
 8005e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	460f      	mov	r7, r1
 8005e8e:	4615      	mov	r5, r2
 8005e90:	4698      	mov	r8, r3
	*bw = 0;	/* Clear write byte counter */
 8005e92:	2300      	movs	r3, #0
 8005e94:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005e98:	a903      	add	r1, sp, #12
 8005e9a:	f7fe fd0d 	bl	80048b8 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005e9e:	9001      	str	r0, [sp, #4]
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d14a      	bne.n	8005f3a <f_write+0xb6>
 8005ea4:	7d63      	ldrb	r3, [r4, #21]
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d146      	bne.n	8005f3a <f_write+0xb6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005eac:	7d23      	ldrb	r3, [r4, #20]
 8005eae:	f013 0f02 	tst.w	r3, #2
 8005eb2:	f000 80ec 	beq.w	800608e <f_write+0x20a>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005eb6:	69a3      	ldr	r3, [r4, #24]
 8005eb8:	42eb      	cmn	r3, r5
 8005eba:	f0c0 80b6 	bcc.w	800602a <f_write+0x1a6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005ebe:	43dd      	mvns	r5, r3
 8005ec0:	e0b3      	b.n	800602a <f_write+0x1a6>
					if (fp->cltbl) {
 8005ec2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d03c      	beq.n	8005f42 <f_write+0xbe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f7fe fba9 	bl	8004620 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	f000 80d8 	beq.w	8006084 <f_write+0x200>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005ed4:	2801      	cmp	r0, #1
 8005ed6:	d039      	beq.n	8005f4c <f_write+0xc8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005ed8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005edc:	d03d      	beq.n	8005f5a <f_write+0xd6>
				fp->clust = clst;			/* Update current cluster */
 8005ede:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	b903      	cbnz	r3, 8005ee6 <f_write+0x62>
 8005ee4:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005ee6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	db3c      	blt.n	8005f68 <f_write+0xe4>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005eee:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005ef2:	69e1      	ldr	r1, [r4, #28]
 8005ef4:	4658      	mov	r0, fp
 8005ef6:	f7fe fb87 	bl	8004608 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005efa:	4681      	mov	r9, r0
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d048      	beq.n	8005f92 <f_write+0x10e>
			sect += csect;
 8005f00:	44b1      	add	r9, r6
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005f02:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005f06:	fbb5 faf3 	udiv	sl, r5, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005f0a:	42ab      	cmp	r3, r5
 8005f0c:	d85f      	bhi.n	8005fce <f_write+0x14a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005f0e:	eb06 030a 	add.w	r3, r6, sl
 8005f12:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <f_write+0x9a>
					cc = fs->csize - csect;
 8005f1a:	eba2 0a06 	sub.w	sl, r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f1e:	4653      	mov	r3, sl
 8005f20:	464a      	mov	r2, r9
 8005f22:	4639      	mov	r1, r7
 8005f24:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8005f28:	f7fe fa3a 	bl	80043a0 <disk_write>
 8005f2c:	b3c0      	cbz	r0, 8005fa0 <f_write+0x11c>
 8005f2e:	f04f 0a01 	mov.w	sl, #1
 8005f32:	f884 a015 	strb.w	sl, [r4, #21]
 8005f36:	f8cd a004 	str.w	sl, [sp, #4]
}
 8005f3a:	9801      	ldr	r0, [sp, #4]
 8005f3c:	b005      	add	sp, #20
 8005f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005f42:	69e1      	ldr	r1, [r4, #28]
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7ff f882 	bl	800504e <create_chain>
 8005f4a:	e7c0      	b.n	8005ece <f_write+0x4a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005f4c:	f04f 0a02 	mov.w	sl, #2
 8005f50:	f884 a015 	strb.w	sl, [r4, #21]
 8005f54:	f8cd a004 	str.w	sl, [sp, #4]
 8005f58:	e7ef      	b.n	8005f3a <f_write+0xb6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005f5a:	f04f 0a01 	mov.w	sl, #1
 8005f5e:	f884 a015 	strb.w	sl, [r4, #21]
 8005f62:	f8cd a004 	str.w	sl, [sp, #4]
 8005f66:	e7e8      	b.n	8005f3a <f_write+0xb6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f68:	2301      	movs	r3, #1
 8005f6a:	6a22      	ldr	r2, [r4, #32]
 8005f6c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8005f70:	9803      	ldr	r0, [sp, #12]
 8005f72:	7840      	ldrb	r0, [r0, #1]
 8005f74:	f7fe fa14 	bl	80043a0 <disk_write>
 8005f78:	b920      	cbnz	r0, 8005f84 <f_write+0x100>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f7a:	7d23      	ldrb	r3, [r4, #20]
 8005f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f80:	7523      	strb	r3, [r4, #20]
 8005f82:	e7b4      	b.n	8005eee <f_write+0x6a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f84:	f04f 0a01 	mov.w	sl, #1
 8005f88:	f884 a015 	strb.w	sl, [r4, #21]
 8005f8c:	f8cd a004 	str.w	sl, [sp, #4]
 8005f90:	e7d3      	b.n	8005f3a <f_write+0xb6>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005f92:	f04f 0a02 	mov.w	sl, #2
 8005f96:	f884 a015 	strb.w	sl, [r4, #21]
 8005f9a:	f8cd a004 	str.w	sl, [sp, #4]
 8005f9e:	e7cc      	b.n	8005f3a <f_write+0xb6>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005fa0:	6a21      	ldr	r1, [r4, #32]
 8005fa2:	eba1 0109 	sub.w	r1, r1, r9
 8005fa6:	4551      	cmp	r1, sl
 8005fa8:	d304      	bcc.n	8005fb4 <f_write+0x130>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	899e      	ldrh	r6, [r3, #12]
 8005fae:	fb0a f606 	mul.w	r6, sl, r6
				continue;
 8005fb2:	e02b      	b.n	800600c <f_write+0x188>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005fb4:	9b03      	ldr	r3, [sp, #12]
 8005fb6:	899a      	ldrh	r2, [r3, #12]
 8005fb8:	fb02 7101 	mla	r1, r2, r1, r7
 8005fbc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005fc0:	f7fe fa24 	bl	800440c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005fc4:	7d23      	ldrb	r3, [r4, #20]
 8005fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fca:	7523      	strb	r3, [r4, #20]
 8005fcc:	e7ed      	b.n	8005faa <f_write+0x126>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005fce:	6a23      	ldr	r3, [r4, #32]
 8005fd0:	454b      	cmp	r3, r9
 8005fd2:	d003      	beq.n	8005fdc <f_write+0x158>
				fp->fptr < fp->obj.objsize &&
 8005fd4:	69a2      	ldr	r2, [r4, #24]
 8005fd6:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d342      	bcc.n	8006062 <f_write+0x1de>
			fp->sect = sect;
 8005fdc:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	899e      	ldrh	r6, [r3, #12]
 8005fe4:	69a3      	ldr	r3, [r4, #24]
 8005fe6:	fbb3 f0f6 	udiv	r0, r3, r6
 8005fea:	fb06 3310 	mls	r3, r6, r0, r3
 8005fee:	1af6      	subs	r6, r6, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005ff0:	42b5      	cmp	r5, r6
 8005ff2:	d200      	bcs.n	8005ff6 <f_write+0x172>
 8005ff4:	462e      	mov	r6, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005ff6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	4418      	add	r0, r3
 8006000:	f7fe fa04 	bl	800440c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006004:	7d23      	ldrb	r3, [r4, #20]
 8006006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800600a:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800600c:	4437      	add	r7, r6
 800600e:	69a3      	ldr	r3, [r4, #24]
 8006010:	4433      	add	r3, r6
 8006012:	61a3      	str	r3, [r4, #24]
 8006014:	68e2      	ldr	r2, [r4, #12]
 8006016:	4293      	cmp	r3, r2
 8006018:	bf38      	it	cc
 800601a:	4613      	movcc	r3, r2
 800601c:	60e3      	str	r3, [r4, #12]
 800601e:	f8d8 3000 	ldr.w	r3, [r8]
 8006022:	4433      	add	r3, r6
 8006024:	f8c8 3000 	str.w	r3, [r8]
 8006028:	1bad      	subs	r5, r5, r6
	for ( ;  btw;							/* Repeat until all data written */
 800602a:	b35d      	cbz	r5, 8006084 <f_write+0x200>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800602c:	69a1      	ldr	r1, [r4, #24]
 800602e:	9a03      	ldr	r2, [sp, #12]
 8006030:	8996      	ldrh	r6, [r2, #12]
 8006032:	fbb1 f3f6 	udiv	r3, r1, r6
 8006036:	fb06 1313 	mls	r3, r6, r3, r1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1d0      	bne.n	8005fe0 <f_write+0x15c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800603e:	fbb1 f6f6 	udiv	r6, r1, r6
 8006042:	8953      	ldrh	r3, [r2, #10]
 8006044:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8006046:	401e      	ands	r6, r3
 8006048:	f47f af4d 	bne.w	8005ee6 <f_write+0x62>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800604c:	2900      	cmp	r1, #0
 800604e:	f47f af38 	bne.w	8005ec2 <f_write+0x3e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006052:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8006054:	2800      	cmp	r0, #0
 8006056:	f47f af3a 	bne.w	8005ece <f_write+0x4a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800605a:	4620      	mov	r0, r4
 800605c:	f7fe fff7 	bl	800504e <create_chain>
 8006060:	e735      	b.n	8005ece <f_write+0x4a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006062:	2301      	movs	r3, #1
 8006064:	464a      	mov	r2, r9
 8006066:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800606a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800606e:	f7fe f98b 	bl	8004388 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8006072:	2800      	cmp	r0, #0
 8006074:	d0b2      	beq.n	8005fdc <f_write+0x158>
					ABORT(fs, FR_DISK_ERR);
 8006076:	f04f 0a01 	mov.w	sl, #1
 800607a:	f884 a015 	strb.w	sl, [r4, #21]
 800607e:	f8cd a004 	str.w	sl, [sp, #4]
 8006082:	e75a      	b.n	8005f3a <f_write+0xb6>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006084:	7d23      	ldrb	r3, [r4, #20]
 8006086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800608a:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800608c:	e755      	b.n	8005f3a <f_write+0xb6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800608e:	2307      	movs	r3, #7
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	e752      	b.n	8005f3a <f_write+0xb6>

08006094 <putc_bfd>:
{
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	4604      	mov	r4, r0
 800609a:	460d      	mov	r5, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800609c:	290a      	cmp	r1, #10
 800609e:	d00d      	beq.n	80060bc <putc_bfd+0x28>
	i = pb->idx;		/* Write index of pb->buf[] */
 80060a0:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	db08      	blt.n	80060b8 <putc_bfd+0x24>
	pb->buf[i++] = (BYTE)c;
 80060a6:	1c5e      	adds	r6, r3, #1
 80060a8:	4423      	add	r3, r4
 80060aa:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80060ac:	2e3c      	cmp	r6, #60	; 0x3c
 80060ae:	dc09      	bgt.n	80060c4 <putc_bfd+0x30>
	pb->idx = i;
 80060b0:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 80060b2:	68a3      	ldr	r3, [r4, #8]
 80060b4:	3301      	adds	r3, #1
 80060b6:	60a3      	str	r3, [r4, #8]
}
 80060b8:	b002      	add	sp, #8
 80060ba:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 80060bc:	210d      	movs	r1, #13
 80060be:	f7ff ffe9 	bl	8006094 <putc_bfd>
 80060c2:	e7ed      	b.n	80060a0 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80060c4:	4621      	mov	r1, r4
 80060c6:	f851 0b0c 	ldr.w	r0, [r1], #12
 80060ca:	ab01      	add	r3, sp, #4
 80060cc:	4632      	mov	r2, r6
 80060ce:	f7ff fed9 	bl	8005e84 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80060d2:	9b01      	ldr	r3, [sp, #4]
 80060d4:	429e      	cmp	r6, r3
 80060d6:	d002      	beq.n	80060de <putc_bfd+0x4a>
 80060d8:	f04f 36ff 	mov.w	r6, #4294967295
 80060dc:	e7e8      	b.n	80060b0 <putc_bfd+0x1c>
 80060de:	2600      	movs	r6, #0
 80060e0:	e7e6      	b.n	80060b0 <putc_bfd+0x1c>

080060e2 <putc_flush>:
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80060e2:	6842      	ldr	r2, [r0, #4]
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	db10      	blt.n	800610a <putc_flush+0x28>
{
 80060e8:	b510      	push	{r4, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80060ee:	4601      	mov	r1, r0
 80060f0:	f851 0b0c 	ldr.w	r0, [r1], #12
 80060f4:	ab01      	add	r3, sp, #4
 80060f6:	f7ff fec5 	bl	8005e84 <f_write>
 80060fa:	b948      	cbnz	r0, 8006110 <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80060fc:	6862      	ldr	r2, [r4, #4]
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	429a      	cmp	r2, r3
 8006102:	d108      	bne.n	8006116 <putc_flush+0x34>
 8006104:	68a0      	ldr	r0, [r4, #8]
}
 8006106:	b002      	add	sp, #8
 8006108:	bd10      	pop	{r4, pc}
	return EOF;
 800610a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800610e:	4770      	bx	lr
	return EOF;
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	e7f7      	b.n	8006106 <putc_flush+0x24>
 8006116:	f04f 30ff 	mov.w	r0, #4294967295
 800611a:	e7f4      	b.n	8006106 <putc_flush+0x24>

0800611c <f_sync>:
{
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006122:	a901      	add	r1, sp, #4
 8006124:	f7fe fbc8 	bl	80048b8 <validate>
	if (res == FR_OK) {
 8006128:	b970      	cbnz	r0, 8006148 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800612a:	7d23      	ldrb	r3, [r4, #20]
 800612c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006130:	d00a      	beq.n	8006148 <f_sync+0x2c>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006132:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006136:	d109      	bne.n	800614c <f_sync+0x30>
			tm = GET_FATTIME();				/* Modified time */
 8006138:	f7fe f8ea 	bl	8004310 <get_fattime>
 800613c:	4605      	mov	r5, r0
				res = move_window(fs, fp->dir_sect);
 800613e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006140:	9801      	ldr	r0, [sp, #4]
 8006142:	f7fe fc06 	bl	8004952 <move_window>
				if (res == FR_OK) {
 8006146:	b178      	cbz	r0, 8006168 <f_sync+0x4c>
}
 8006148:	b002      	add	sp, #8
 800614a:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800614c:	2301      	movs	r3, #1
 800614e:	6a22      	ldr	r2, [r4, #32]
 8006150:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006154:	9801      	ldr	r0, [sp, #4]
 8006156:	7840      	ldrb	r0, [r0, #1]
 8006158:	f7fe f922 	bl	80043a0 <disk_write>
 800615c:	bb40      	cbnz	r0, 80061b0 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 800615e:	7d23      	ldrb	r3, [r4, #20]
 8006160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006164:	7523      	strb	r3, [r4, #20]
 8006166:	e7e7      	b.n	8006138 <f_sync+0x1c>
					dir = fp->dir_ptr;
 8006168:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800616a:	7af3      	ldrb	r3, [r6, #11]
 800616c:	f043 0320 	orr.w	r3, r3, #32
 8006170:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006172:	68a2      	ldr	r2, [r4, #8]
 8006174:	4631      	mov	r1, r6
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	f7fe fa78 	bl	800466c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800617c:	68e1      	ldr	r1, [r4, #12]
 800617e:	f106 001c 	add.w	r0, r6, #28
 8006182:	f7fe f939 	bl	80043f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006186:	4629      	mov	r1, r5
 8006188:	f106 0016 	add.w	r0, r6, #22
 800618c:	f7fe f934 	bl	80043f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006190:	2100      	movs	r1, #0
 8006192:	f106 0012 	add.w	r0, r6, #18
 8006196:	f7fe f92b 	bl	80043f0 <st_word>
					fs->wflag = 1;
 800619a:	9b01      	ldr	r3, [sp, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80061a0:	9801      	ldr	r0, [sp, #4]
 80061a2:	f7ff f935 	bl	8005410 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80061a6:	7d23      	ldrb	r3, [r4, #20]
 80061a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ac:	7523      	strb	r3, [r4, #20]
 80061ae:	e7cb      	b.n	8006148 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80061b0:	2001      	movs	r0, #1
 80061b2:	e7c9      	b.n	8006148 <f_sync+0x2c>

080061b4 <f_close>:
{
 80061b4:	b510      	push	{r4, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 80061ba:	f7ff ffaf 	bl	800611c <f_sync>
	if (res == FR_OK)
 80061be:	b108      	cbz	r0, 80061c4 <f_close+0x10>
}
 80061c0:	b002      	add	sp, #8
 80061c2:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80061c4:	a901      	add	r1, sp, #4
 80061c6:	4620      	mov	r0, r4
 80061c8:	f7fe fb76 	bl	80048b8 <validate>
		if (res == FR_OK) {
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d1f7      	bne.n	80061c0 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80061d0:	6920      	ldr	r0, [r4, #16]
 80061d2:	f7fe f9db 	bl	800458c <dec_lock>
			if (res == FR_OK)
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d1f2      	bne.n	80061c0 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 80061da:	6020      	str	r0, [r4, #0]
 80061dc:	e7f0      	b.n	80061c0 <f_close+0xc>

080061de <f_getfree>:
{
 80061de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e2:	b089      	sub	sp, #36	; 0x24
 80061e4:	9001      	str	r0, [sp, #4]
 80061e6:	4688      	mov	r8, r1
 80061e8:	4614      	mov	r4, r2
	res = find_volume(&path, &fs, 0);
 80061ea:	2200      	movs	r2, #0
 80061ec:	a907      	add	r1, sp, #28
 80061ee:	a801      	add	r0, sp, #4
 80061f0:	f7fe fc06 	bl	8004a00 <find_volume>
	if (res == FR_OK) {
 80061f4:	4681      	mov	r9, r0
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d159      	bne.n	80062ae <f_getfree+0xd0>
		*fatfs = fs;				/* Return ptr to the fs object */
 80061fa:	9b07      	ldr	r3, [sp, #28]
 80061fc:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 80061fe:	699a      	ldr	r2, [r3, #24]
 8006200:	69dd      	ldr	r5, [r3, #28]
 8006202:	1ea9      	subs	r1, r5, #2
 8006204:	428a      	cmp	r2, r1
 8006206:	d802      	bhi.n	800620e <f_getfree+0x30>
			*nclst = fs->free_clst;
 8006208:	f8c8 2000 	str.w	r2, [r8]
 800620c:	e04f      	b.n	80062ae <f_getfree+0xd0>
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800620e:	781e      	ldrb	r6, [r3, #0]
 8006210:	2e01      	cmp	r6, #1
 8006212:	d005      	beq.n	8006220 <f_getfree+0x42>
					clst = fs->n_fatent; sect = fs->fatbase;
 8006214:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
					i = 0; p = 0;
 8006218:	2400      	movs	r4, #0
 800621a:	4626      	mov	r6, r4
			nfree = 0;
 800621c:	4627      	mov	r7, r4
 800621e:	e02f      	b.n	8006280 <f_getfree+0xa2>
				clst = 2; obj.fs = fs;
 8006220:	9302      	str	r3, [sp, #8]
 8006222:	2402      	movs	r4, #2
			nfree = 0;
 8006224:	2700      	movs	r7, #0
 8006226:	e004      	b.n	8006232 <f_getfree+0x54>
				} while (++clst < fs->n_fatent);
 8006228:	3401      	adds	r4, #1
 800622a:	9b07      	ldr	r3, [sp, #28]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	42a3      	cmp	r3, r4
 8006230:	d935      	bls.n	800629e <f_getfree+0xc0>
					stat = get_fat(&obj, clst);
 8006232:	4621      	mov	r1, r4
 8006234:	a802      	add	r0, sp, #8
 8006236:	f7fe fe2c 	bl	8004e92 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800623a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800623e:	d02d      	beq.n	800629c <f_getfree+0xbe>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006240:	2801      	cmp	r0, #1
 8006242:	d038      	beq.n	80062b6 <f_getfree+0xd8>
					if (stat == 0) nfree++;
 8006244:	2800      	cmp	r0, #0
 8006246:	d1ef      	bne.n	8006228 <f_getfree+0x4a>
 8006248:	3701      	adds	r7, #1
 800624a:	e7ed      	b.n	8006228 <f_getfree+0x4a>
							res = move_window(fs, sect++);
 800624c:	f10a 0b01 	add.w	fp, sl, #1
 8006250:	4651      	mov	r1, sl
 8006252:	9807      	ldr	r0, [sp, #28]
 8006254:	f7fe fb7d 	bl	8004952 <move_window>
							if (res != FR_OK) break;
 8006258:	4681      	mov	r9, r0
 800625a:	bb00      	cbnz	r0, 800629e <f_getfree+0xc0>
							p = fs->win;
 800625c:	9b07      	ldr	r3, [sp, #28]
 800625e:	f103 0438 	add.w	r4, r3, #56	; 0x38
							i = SS(fs);
 8006262:	899e      	ldrh	r6, [r3, #12]
							res = move_window(fs, sect++);
 8006264:	46da      	mov	sl, fp
 8006266:	e00d      	b.n	8006284 <f_getfree+0xa6>
							if (ld_word(p) == 0) nfree++;
 8006268:	4620      	mov	r0, r4
 800626a:	f7fe f8b1 	bl	80043d0 <ld_word>
 800626e:	b900      	cbnz	r0, 8006272 <f_getfree+0x94>
 8006270:	3701      	adds	r7, #1
							p += 2; i -= 2;
 8006272:	3402      	adds	r4, #2
 8006274:	3e02      	subs	r6, #2
 8006276:	e001      	b.n	800627c <f_getfree+0x9e>
							p += 4; i -= 4;
 8006278:	3404      	adds	r4, #4
 800627a:	3e04      	subs	r6, #4
					} while (--clst);
 800627c:	3d01      	subs	r5, #1
 800627e:	d00e      	beq.n	800629e <f_getfree+0xc0>
						if (i == 0) {
 8006280:	2e00      	cmp	r6, #0
 8006282:	d0e3      	beq.n	800624c <f_getfree+0x6e>
						if (fs->fs_type == FS_FAT16) {
 8006284:	9b07      	ldr	r3, [sp, #28]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d0ed      	beq.n	8006268 <f_getfree+0x8a>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800628c:	4620      	mov	r0, r4
 800628e:	f7fe f8a4 	bl	80043da <ld_dword>
 8006292:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 8006296:	d1ef      	bne.n	8006278 <f_getfree+0x9a>
 8006298:	3701      	adds	r7, #1
 800629a:	e7ed      	b.n	8006278 <f_getfree+0x9a>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800629c:	46b1      	mov	r9, r6
			*nclst = nfree;			/* Return the free clusters */
 800629e:	f8c8 7000 	str.w	r7, [r8]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80062a2:	9b07      	ldr	r3, [sp, #28]
 80062a4:	619f      	str	r7, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80062a6:	791a      	ldrb	r2, [r3, #4]
 80062a8:	f042 0201 	orr.w	r2, r2, #1
 80062ac:	711a      	strb	r2, [r3, #4]
}
 80062ae:	4648      	mov	r0, r9
 80062b0:	b009      	add	sp, #36	; 0x24
 80062b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (stat == 1) { res = FR_INT_ERR; break; }
 80062b6:	f04f 0902 	mov.w	r9, #2
 80062ba:	e7f0      	b.n	800629e <f_getfree+0xc0>

080062bc <f_unlink>:
{
 80062bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062be:	b09f      	sub	sp, #124	; 0x7c
 80062c0:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 80062c2:	2202      	movs	r2, #2
 80062c4:	a903      	add	r1, sp, #12
 80062c6:	a801      	add	r0, sp, #4
 80062c8:	f7fe fb9a 	bl	8004a00 <find_volume>
	dj.obj.fs = fs;
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	9311      	str	r3, [sp, #68]	; 0x44
	if (res == FR_OK) {
 80062d0:	4604      	mov	r4, r0
 80062d2:	b110      	cbz	r0, 80062da <f_unlink+0x1e>
}
 80062d4:	4620      	mov	r0, r4
 80062d6:	b01f      	add	sp, #124	; 0x7c
 80062d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		res = follow_path(&dj, path);		/* Follow the file path */
 80062da:	9901      	ldr	r1, [sp, #4]
 80062dc:	a811      	add	r0, sp, #68	; 0x44
 80062de:	f7ff fab4 	bl	800584a <follow_path>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80062e2:	4604      	mov	r4, r0
 80062e4:	b920      	cbnz	r0, 80062f0 <f_unlink+0x34>
 80062e6:	2102      	movs	r1, #2
 80062e8:	a811      	add	r0, sp, #68	; 0x44
 80062ea:	f7fe f8b3 	bl	8004454 <chk_lock>
 80062ee:	4604      	mov	r4, r0
		if (res == FR_OK) {					/* The object is accessible */
 80062f0:	2c00      	cmp	r4, #0
 80062f2:	d1ef      	bne.n	80062d4 <f_unlink+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80062f4:	f99d 3073 	ldrsb.w	r3, [sp, #115]	; 0x73
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	db1e      	blt.n	800633a <f_unlink+0x7e>
				if (dj.obj.attr & AM_RDO) {
 80062fc:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
 8006300:	f016 0f01 	tst.w	r6, #1
 8006304:	d12a      	bne.n	800635c <f_unlink+0xa0>
					dclst = ld_clust(fs, dj.dir);
 8006306:	9f03      	ldr	r7, [sp, #12]
 8006308:	9919      	ldr	r1, [sp, #100]	; 0x64
 800630a:	4638      	mov	r0, r7
 800630c:	f7fe f99b 	bl	8004646 <ld_clust>
 8006310:	4605      	mov	r5, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8006312:	f016 0f10 	tst.w	r6, #16
 8006316:	d012      	beq.n	800633e <f_unlink+0x82>
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8006318:	9704      	str	r7, [sp, #16]
						sdj.obj.sclust = dclst;
 800631a:	9006      	str	r0, [sp, #24]
						res = dir_sdi(&sdj, 0);
 800631c:	2100      	movs	r1, #0
 800631e:	a804      	add	r0, sp, #16
 8006320:	f7fe fe35 	bl	8004f8e <dir_sdi>
						if (res == FR_OK) {
 8006324:	4604      	mov	r4, r0
 8006326:	b950      	cbnz	r0, 800633e <f_unlink+0x82>
							res = dir_read(&sdj, 0);			/* Read an item */
 8006328:	2100      	movs	r1, #0
 800632a:	a804      	add	r0, sp, #16
 800632c:	f7fe ffe8 	bl	8005300 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8006330:	4604      	mov	r4, r0
 8006332:	b1b0      	cbz	r0, 8006362 <f_unlink+0xa6>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8006334:	2804      	cmp	r0, #4
 8006336:	d102      	bne.n	800633e <f_unlink+0x82>
 8006338:	e003      	b.n	8006342 <f_unlink+0x86>
	DWORD dclst = 0;
 800633a:	2500      	movs	r5, #0
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800633c:	2406      	movs	r4, #6
			if (res == FR_OK) {
 800633e:	2c00      	cmp	r4, #0
 8006340:	d1c8      	bne.n	80062d4 <f_unlink+0x18>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8006342:	a811      	add	r0, sp, #68	; 0x44
 8006344:	f7ff f83a 	bl	80053bc <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8006348:	4604      	mov	r4, r0
 800634a:	b900      	cbnz	r0, 800634e <f_unlink+0x92>
 800634c:	b95d      	cbnz	r5, 8006366 <f_unlink+0xaa>
				if (res == FR_OK) res = sync_fs(fs);
 800634e:	2c00      	cmp	r4, #0
 8006350:	d1c0      	bne.n	80062d4 <f_unlink+0x18>
 8006352:	9803      	ldr	r0, [sp, #12]
 8006354:	f7ff f85c 	bl	8005410 <sync_fs>
 8006358:	4604      	mov	r4, r0
 800635a:	e7bb      	b.n	80062d4 <f_unlink+0x18>
	DWORD dclst = 0;
 800635c:	2500      	movs	r5, #0
					res = FR_DENIED;		/* Cannot remove R/O object */
 800635e:	2407      	movs	r4, #7
 8006360:	e7ed      	b.n	800633e <f_unlink+0x82>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8006362:	2407      	movs	r4, #7
 8006364:	e7eb      	b.n	800633e <f_unlink+0x82>
					res = remove_chain(&dj.obj, dclst, 0);
 8006366:	2200      	movs	r2, #0
 8006368:	4629      	mov	r1, r5
 800636a:	a811      	add	r0, sp, #68	; 0x44
 800636c:	f7fe fed5 	bl	800511a <remove_chain>
 8006370:	4604      	mov	r4, r0
 8006372:	e7ec      	b.n	800634e <f_unlink+0x92>

08006374 <f_gets>:
{
 8006374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	4680      	mov	r8, r0
 800637c:	460e      	mov	r6, r1
 800637e:	4617      	mov	r7, r2
	TCHAR c, *p = buff;
 8006380:	4604      	mov	r4, r0
	int n = 0;
 8006382:	2500      	movs	r5, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006384:	e001      	b.n	800638a <f_gets+0x16>
 8006386:	46a4      	mov	ip, r4
 8006388:	4664      	mov	r4, ip
 800638a:	1e73      	subs	r3, r6, #1
 800638c:	42ab      	cmp	r3, r5
 800638e:	dd13      	ble.n	80063b8 <f_gets+0x44>
		f_read(fp, s, 1, &rc);
 8006390:	466b      	mov	r3, sp
 8006392:	2201      	movs	r2, #1
 8006394:	a901      	add	r1, sp, #4
 8006396:	4638      	mov	r0, r7
 8006398:	f7ff fc88 	bl	8005cac <f_read>
		if (rc != 1) break;
 800639c:	9b00      	ldr	r3, [sp, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d10a      	bne.n	80063b8 <f_gets+0x44>
		c = s[0];
 80063a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80063a6:	2b0d      	cmp	r3, #13
 80063a8:	d0ed      	beq.n	8006386 <f_gets+0x12>
		*p++ = c;
 80063aa:	46a4      	mov	ip, r4
 80063ac:	f80c 3b01 	strb.w	r3, [ip], #1
		n++;
 80063b0:	3501      	adds	r5, #1
		if (c == '\n') break;		/* Break on EOL */
 80063b2:	2b0a      	cmp	r3, #10
 80063b4:	d1e8      	bne.n	8006388 <f_gets+0x14>
		*p++ = c;
 80063b6:	4664      	mov	r4, ip
	*p = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	7023      	strb	r3, [r4, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80063bc:	b11d      	cbz	r5, 80063c6 <f_gets+0x52>
 80063be:	4640      	mov	r0, r8
}
 80063c0:	b002      	add	sp, #8
 80063c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80063c6:	2000      	movs	r0, #0
 80063c8:	e7fa      	b.n	80063c0 <f_gets+0x4c>

080063ca <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80063ca:	b510      	push	{r4, lr}
 80063cc:	b094      	sub	sp, #80	; 0x50
 80063ce:	4604      	mov	r4, r0
	putbuff pb;


	putc_init(&pb, fp);
 80063d0:	a801      	add	r0, sp, #4
 80063d2:	f7fe fa6c 	bl	80048ae <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80063d6:	e003      	b.n	80063e0 <f_puts+0x16>
 80063d8:	3401      	adds	r4, #1
 80063da:	a801      	add	r0, sp, #4
 80063dc:	f7ff fe5a 	bl	8006094 <putc_bfd>
 80063e0:	7821      	ldrb	r1, [r4, #0]
 80063e2:	2900      	cmp	r1, #0
 80063e4:	d1f8      	bne.n	80063d8 <f_puts+0xe>
	return putc_flush(&pb);
 80063e6:	a801      	add	r0, sp, #4
 80063e8:	f7ff fe7b 	bl	80060e2 <putc_flush>
}
 80063ec:	b014      	add	sp, #80	; 0x50
 80063ee:	bd10      	pop	{r4, pc}

080063f0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80063f0:	4b13      	ldr	r3, [pc, #76]	; (8006440 <FATFS_LinkDriverEx+0x50>)
 80063f2:	7a5b      	ldrb	r3, [r3, #9]
 80063f4:	bb13      	cbnz	r3, 800643c <FATFS_LinkDriverEx+0x4c>
{
 80063f6:	b510      	push	{r4, lr}
 80063f8:	4604      	mov	r4, r0
 80063fa:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 80063fe:	4b10      	ldr	r3, [pc, #64]	; (8006440 <FATFS_LinkDriverEx+0x50>)
 8006400:	f893 c009 	ldrb.w	ip, [r3, #9]
 8006404:	fa5f fc8c 	uxtb.w	ip, ip
 8006408:	f04f 0e00 	mov.w	lr, #0
 800640c:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8006410:	f893 c009 	ldrb.w	ip, [r3, #9]
 8006414:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8006418:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800641c:	7a5c      	ldrb	r4, [r3, #9]
 800641e:	441c      	add	r4, r3
 8006420:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8006422:	7a5a      	ldrb	r2, [r3, #9]
 8006424:	1c54      	adds	r4, r2, #1
 8006426:	b2e4      	uxtb	r4, r4
 8006428:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800642a:	3230      	adds	r2, #48	; 0x30
 800642c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800642e:	233a      	movs	r3, #58	; 0x3a
 8006430:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006432:	232f      	movs	r3, #47	; 0x2f
 8006434:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8006436:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800643a:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800643c:	2001      	movs	r0, #1
}
 800643e:	4770      	bx	lr
 8006440:	20003be4 	.word	0x20003be4

08006444 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006444:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8006446:	2200      	movs	r2, #0
 8006448:	f7ff ffd2 	bl	80063f0 <FATFS_LinkDriverEx>
}
 800644c:	bd08      	pop	{r3, pc}
	...

08006450 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006450:	287f      	cmp	r0, #127	; 0x7f
 8006452:	d917      	bls.n	8006484 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006454:	b131      	cbz	r1, 8006464 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006456:	28ff      	cmp	r0, #255	; 0xff
 8006458:	d813      	bhi.n	8006482 <ff_convert+0x32>
 800645a:	3880      	subs	r0, #128	; 0x80
 800645c:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <ff_convert+0x38>)
 800645e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006462:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006464:	2300      	movs	r3, #0
 8006466:	2b7f      	cmp	r3, #127	; 0x7f
 8006468:	d807      	bhi.n	800647a <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800646a:	4a07      	ldr	r2, [pc, #28]	; (8006488 <ff_convert+0x38>)
 800646c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006470:	4282      	cmp	r2, r0
 8006472:	d002      	beq.n	800647a <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8006474:	3301      	adds	r3, #1
 8006476:	b29b      	uxth	r3, r3
 8006478:	e7f5      	b.n	8006466 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800647a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800647e:	b2c0      	uxtb	r0, r0
 8006480:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006482:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	0800a388 	.word	0x0800a388

0800648c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800648c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006490:	d207      	bcs.n	80064a2 <ff_wtoupper+0x16>
 8006492:	4b23      	ldr	r3, [pc, #140]	; (8006520 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 8006494:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8006496:	2a00      	cmp	r2, #0
 8006498:	d041      	beq.n	800651e <ff_wtoupper+0x92>
 800649a:	4290      	cmp	r0, r2
 800649c:	d33f      	bcc.n	800651e <ff_wtoupper+0x92>
{
 800649e:	b510      	push	{r4, lr}
 80064a0:	e006      	b.n	80064b0 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 80064a2:	4b20      	ldr	r3, [pc, #128]	; (8006524 <ff_wtoupper+0x98>)
 80064a4:	e7f6      	b.n	8006494 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80064a6:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 80064a8:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 80064aa:	b1da      	cbz	r2, 80064e4 <ff_wtoupper+0x58>
 80064ac:	4290      	cmp	r0, r2
 80064ae:	d319      	bcc.n	80064e4 <ff_wtoupper+0x58>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80064b0:	f103 0e04 	add.w	lr, r3, #4
 80064b4:	885b      	ldrh	r3, [r3, #2]
 80064b6:	0a19      	lsrs	r1, r3, #8
 80064b8:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 80064ba:	eb03 0c02 	add.w	ip, r3, r2
 80064be:	4560      	cmp	r0, ip
 80064c0:	db04      	blt.n	80064cc <ff_wtoupper+0x40>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80064c2:	2900      	cmp	r1, #0
 80064c4:	d1ef      	bne.n	80064a6 <ff_wtoupper+0x1a>
 80064c6:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80064ca:	e7ed      	b.n	80064a8 <ff_wtoupper+0x1c>
			switch (cmd) {
 80064cc:	2908      	cmp	r1, #8
 80064ce:	d809      	bhi.n	80064e4 <ff_wtoupper+0x58>
 80064d0:	e8df f001 	tbb	[pc, r1]
 80064d4:	120f0905 	.word	0x120f0905
 80064d8:	1e1b1815 	.word	0x1e1b1815
 80064dc:	21          	.byte	0x21
 80064dd:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80064de:	1a82      	subs	r2, r0, r2
 80064e0:	f83e 0012 	ldrh.w	r0, [lr, r2, lsl #1]
	}

	return chr;
}
 80064e4:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80064e6:	1a83      	subs	r3, r0, r2
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	1ac0      	subs	r0, r0, r3
 80064ee:	b280      	uxth	r0, r0
 80064f0:	e7f8      	b.n	80064e4 <ff_wtoupper+0x58>
			case 2: chr -= 16; break;				/* Shift -16 */
 80064f2:	3810      	subs	r0, #16
 80064f4:	b280      	uxth	r0, r0
 80064f6:	e7f5      	b.n	80064e4 <ff_wtoupper+0x58>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80064f8:	3820      	subs	r0, #32
 80064fa:	b280      	uxth	r0, r0
 80064fc:	e7f2      	b.n	80064e4 <ff_wtoupper+0x58>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80064fe:	3830      	subs	r0, #48	; 0x30
 8006500:	b280      	uxth	r0, r0
 8006502:	e7ef      	b.n	80064e4 <ff_wtoupper+0x58>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006504:	381a      	subs	r0, #26
 8006506:	b280      	uxth	r0, r0
 8006508:	e7ec      	b.n	80064e4 <ff_wtoupper+0x58>
			case 6:	chr += 8; break;				/* Shift +8 */
 800650a:	3008      	adds	r0, #8
 800650c:	b280      	uxth	r0, r0
 800650e:	e7e9      	b.n	80064e4 <ff_wtoupper+0x58>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006510:	3850      	subs	r0, #80	; 0x50
 8006512:	b280      	uxth	r0, r0
 8006514:	e7e6      	b.n	80064e4 <ff_wtoupper+0x58>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006516:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800651a:	b280      	uxth	r0, r0
 800651c:	e7e2      	b.n	80064e4 <ff_wtoupper+0x58>
}
 800651e:	4770      	bx	lr
 8006520:	0800a488 	.word	0x0800a488
 8006524:	0800a67c 	.word	0x0800a67c

08006528 <__errno>:
 8006528:	4b01      	ldr	r3, [pc, #4]	; (8006530 <__errno+0x8>)
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	20000024 	.word	0x20000024

08006534 <__libc_init_array>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	4d0d      	ldr	r5, [pc, #52]	; (800656c <__libc_init_array+0x38>)
 8006538:	4c0d      	ldr	r4, [pc, #52]	; (8006570 <__libc_init_array+0x3c>)
 800653a:	1b64      	subs	r4, r4, r5
 800653c:	10a4      	asrs	r4, r4, #2
 800653e:	2600      	movs	r6, #0
 8006540:	42a6      	cmp	r6, r4
 8006542:	d109      	bne.n	8006558 <__libc_init_array+0x24>
 8006544:	4d0b      	ldr	r5, [pc, #44]	; (8006574 <__libc_init_array+0x40>)
 8006546:	4c0c      	ldr	r4, [pc, #48]	; (8006578 <__libc_init_array+0x44>)
 8006548:	f003 fe10 	bl	800a16c <_init>
 800654c:	1b64      	subs	r4, r4, r5
 800654e:	10a4      	asrs	r4, r4, #2
 8006550:	2600      	movs	r6, #0
 8006552:	42a6      	cmp	r6, r4
 8006554:	d105      	bne.n	8006562 <__libc_init_array+0x2e>
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	f855 3b04 	ldr.w	r3, [r5], #4
 800655c:	4798      	blx	r3
 800655e:	3601      	adds	r6, #1
 8006560:	e7ee      	b.n	8006540 <__libc_init_array+0xc>
 8006562:	f855 3b04 	ldr.w	r3, [r5], #4
 8006566:	4798      	blx	r3
 8006568:	3601      	adds	r6, #1
 800656a:	e7f2      	b.n	8006552 <__libc_init_array+0x1e>
 800656c:	0800acf8 	.word	0x0800acf8
 8006570:	0800acf8 	.word	0x0800acf8
 8006574:	0800acf8 	.word	0x0800acf8
 8006578:	0800acfc 	.word	0x0800acfc

0800657c <memset>:
 800657c:	4402      	add	r2, r0
 800657e:	4603      	mov	r3, r0
 8006580:	4293      	cmp	r3, r2
 8006582:	d100      	bne.n	8006586 <memset+0xa>
 8006584:	4770      	bx	lr
 8006586:	f803 1b01 	strb.w	r1, [r3], #1
 800658a:	e7f9      	b.n	8006580 <memset+0x4>

0800658c <__cvt>:
 800658c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	ec55 4b10 	vmov	r4, r5, d0
 8006594:	2d00      	cmp	r5, #0
 8006596:	460e      	mov	r6, r1
 8006598:	4619      	mov	r1, r3
 800659a:	462b      	mov	r3, r5
 800659c:	bfbb      	ittet	lt
 800659e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065a2:	461d      	movlt	r5, r3
 80065a4:	2300      	movge	r3, #0
 80065a6:	232d      	movlt	r3, #45	; 0x2d
 80065a8:	700b      	strb	r3, [r1, #0]
 80065aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065b0:	4691      	mov	r9, r2
 80065b2:	f023 0820 	bic.w	r8, r3, #32
 80065b6:	bfbc      	itt	lt
 80065b8:	4622      	movlt	r2, r4
 80065ba:	4614      	movlt	r4, r2
 80065bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065c0:	d005      	beq.n	80065ce <__cvt+0x42>
 80065c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065c6:	d100      	bne.n	80065ca <__cvt+0x3e>
 80065c8:	3601      	adds	r6, #1
 80065ca:	2102      	movs	r1, #2
 80065cc:	e000      	b.n	80065d0 <__cvt+0x44>
 80065ce:	2103      	movs	r1, #3
 80065d0:	ab03      	add	r3, sp, #12
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	ab02      	add	r3, sp, #8
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	ec45 4b10 	vmov	d0, r4, r5
 80065dc:	4653      	mov	r3, sl
 80065de:	4632      	mov	r2, r6
 80065e0:	f000 fe1a 	bl	8007218 <_dtoa_r>
 80065e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065e8:	4607      	mov	r7, r0
 80065ea:	d102      	bne.n	80065f2 <__cvt+0x66>
 80065ec:	f019 0f01 	tst.w	r9, #1
 80065f0:	d022      	beq.n	8006638 <__cvt+0xac>
 80065f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065f6:	eb07 0906 	add.w	r9, r7, r6
 80065fa:	d110      	bne.n	800661e <__cvt+0x92>
 80065fc:	783b      	ldrb	r3, [r7, #0]
 80065fe:	2b30      	cmp	r3, #48	; 0x30
 8006600:	d10a      	bne.n	8006618 <__cvt+0x8c>
 8006602:	2200      	movs	r2, #0
 8006604:	2300      	movs	r3, #0
 8006606:	4620      	mov	r0, r4
 8006608:	4629      	mov	r1, r5
 800660a:	f7fa fa75 	bl	8000af8 <__aeabi_dcmpeq>
 800660e:	b918      	cbnz	r0, 8006618 <__cvt+0x8c>
 8006610:	f1c6 0601 	rsb	r6, r6, #1
 8006614:	f8ca 6000 	str.w	r6, [sl]
 8006618:	f8da 3000 	ldr.w	r3, [sl]
 800661c:	4499      	add	r9, r3
 800661e:	2200      	movs	r2, #0
 8006620:	2300      	movs	r3, #0
 8006622:	4620      	mov	r0, r4
 8006624:	4629      	mov	r1, r5
 8006626:	f7fa fa67 	bl	8000af8 <__aeabi_dcmpeq>
 800662a:	b108      	cbz	r0, 8006630 <__cvt+0xa4>
 800662c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006630:	2230      	movs	r2, #48	; 0x30
 8006632:	9b03      	ldr	r3, [sp, #12]
 8006634:	454b      	cmp	r3, r9
 8006636:	d307      	bcc.n	8006648 <__cvt+0xbc>
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800663c:	1bdb      	subs	r3, r3, r7
 800663e:	4638      	mov	r0, r7
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	b004      	add	sp, #16
 8006644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006648:	1c59      	adds	r1, r3, #1
 800664a:	9103      	str	r1, [sp, #12]
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	e7f0      	b.n	8006632 <__cvt+0xa6>

08006650 <__exponent>:
 8006650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006652:	4603      	mov	r3, r0
 8006654:	2900      	cmp	r1, #0
 8006656:	bfb8      	it	lt
 8006658:	4249      	neglt	r1, r1
 800665a:	f803 2b02 	strb.w	r2, [r3], #2
 800665e:	bfb4      	ite	lt
 8006660:	222d      	movlt	r2, #45	; 0x2d
 8006662:	222b      	movge	r2, #43	; 0x2b
 8006664:	2909      	cmp	r1, #9
 8006666:	7042      	strb	r2, [r0, #1]
 8006668:	dd2a      	ble.n	80066c0 <__exponent+0x70>
 800666a:	f10d 0407 	add.w	r4, sp, #7
 800666e:	46a4      	mov	ip, r4
 8006670:	270a      	movs	r7, #10
 8006672:	46a6      	mov	lr, r4
 8006674:	460a      	mov	r2, r1
 8006676:	fb91 f6f7 	sdiv	r6, r1, r7
 800667a:	fb07 1516 	mls	r5, r7, r6, r1
 800667e:	3530      	adds	r5, #48	; 0x30
 8006680:	2a63      	cmp	r2, #99	; 0x63
 8006682:	f104 34ff 	add.w	r4, r4, #4294967295
 8006686:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800668a:	4631      	mov	r1, r6
 800668c:	dcf1      	bgt.n	8006672 <__exponent+0x22>
 800668e:	3130      	adds	r1, #48	; 0x30
 8006690:	f1ae 0502 	sub.w	r5, lr, #2
 8006694:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006698:	1c44      	adds	r4, r0, #1
 800669a:	4629      	mov	r1, r5
 800669c:	4561      	cmp	r1, ip
 800669e:	d30a      	bcc.n	80066b6 <__exponent+0x66>
 80066a0:	f10d 0209 	add.w	r2, sp, #9
 80066a4:	eba2 020e 	sub.w	r2, r2, lr
 80066a8:	4565      	cmp	r5, ip
 80066aa:	bf88      	it	hi
 80066ac:	2200      	movhi	r2, #0
 80066ae:	4413      	add	r3, r2
 80066b0:	1a18      	subs	r0, r3, r0
 80066b2:	b003      	add	sp, #12
 80066b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066be:	e7ed      	b.n	800669c <__exponent+0x4c>
 80066c0:	2330      	movs	r3, #48	; 0x30
 80066c2:	3130      	adds	r1, #48	; 0x30
 80066c4:	7083      	strb	r3, [r0, #2]
 80066c6:	70c1      	strb	r1, [r0, #3]
 80066c8:	1d03      	adds	r3, r0, #4
 80066ca:	e7f1      	b.n	80066b0 <__exponent+0x60>

080066cc <_printf_float>:
 80066cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d0:	ed2d 8b02 	vpush	{d8}
 80066d4:	b08d      	sub	sp, #52	; 0x34
 80066d6:	460c      	mov	r4, r1
 80066d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066dc:	4616      	mov	r6, r2
 80066de:	461f      	mov	r7, r3
 80066e0:	4605      	mov	r5, r0
 80066e2:	f001 fd3f 	bl	8008164 <_localeconv_r>
 80066e6:	f8d0 a000 	ldr.w	sl, [r0]
 80066ea:	4650      	mov	r0, sl
 80066ec:	f7f9 fd82 	bl	80001f4 <strlen>
 80066f0:	2300      	movs	r3, #0
 80066f2:	930a      	str	r3, [sp, #40]	; 0x28
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	9305      	str	r3, [sp, #20]
 80066f8:	f8d8 3000 	ldr.w	r3, [r8]
 80066fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006700:	3307      	adds	r3, #7
 8006702:	f023 0307 	bic.w	r3, r3, #7
 8006706:	f103 0208 	add.w	r2, r3, #8
 800670a:	f8c8 2000 	str.w	r2, [r8]
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006716:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800671a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800671e:	9307      	str	r3, [sp, #28]
 8006720:	f8cd 8018 	str.w	r8, [sp, #24]
 8006724:	ee08 0a10 	vmov	s16, r0
 8006728:	4b9f      	ldr	r3, [pc, #636]	; (80069a8 <_printf_float+0x2dc>)
 800672a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800672e:	f04f 32ff 	mov.w	r2, #4294967295
 8006732:	f7fa fa13 	bl	8000b5c <__aeabi_dcmpun>
 8006736:	bb88      	cbnz	r0, 800679c <_printf_float+0xd0>
 8006738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800673c:	4b9a      	ldr	r3, [pc, #616]	; (80069a8 <_printf_float+0x2dc>)
 800673e:	f04f 32ff 	mov.w	r2, #4294967295
 8006742:	f7fa f9ed 	bl	8000b20 <__aeabi_dcmple>
 8006746:	bb48      	cbnz	r0, 800679c <_printf_float+0xd0>
 8006748:	2200      	movs	r2, #0
 800674a:	2300      	movs	r3, #0
 800674c:	4640      	mov	r0, r8
 800674e:	4649      	mov	r1, r9
 8006750:	f7fa f9dc 	bl	8000b0c <__aeabi_dcmplt>
 8006754:	b110      	cbz	r0, 800675c <_printf_float+0x90>
 8006756:	232d      	movs	r3, #45	; 0x2d
 8006758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800675c:	4b93      	ldr	r3, [pc, #588]	; (80069ac <_printf_float+0x2e0>)
 800675e:	4894      	ldr	r0, [pc, #592]	; (80069b0 <_printf_float+0x2e4>)
 8006760:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006764:	bf94      	ite	ls
 8006766:	4698      	movls	r8, r3
 8006768:	4680      	movhi	r8, r0
 800676a:	2303      	movs	r3, #3
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	9b05      	ldr	r3, [sp, #20]
 8006770:	f023 0204 	bic.w	r2, r3, #4
 8006774:	6022      	str	r2, [r4, #0]
 8006776:	f04f 0900 	mov.w	r9, #0
 800677a:	9700      	str	r7, [sp, #0]
 800677c:	4633      	mov	r3, r6
 800677e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006780:	4621      	mov	r1, r4
 8006782:	4628      	mov	r0, r5
 8006784:	f000 f9d8 	bl	8006b38 <_printf_common>
 8006788:	3001      	adds	r0, #1
 800678a:	f040 8090 	bne.w	80068ae <_printf_float+0x1e2>
 800678e:	f04f 30ff 	mov.w	r0, #4294967295
 8006792:	b00d      	add	sp, #52	; 0x34
 8006794:	ecbd 8b02 	vpop	{d8}
 8006798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679c:	4642      	mov	r2, r8
 800679e:	464b      	mov	r3, r9
 80067a0:	4640      	mov	r0, r8
 80067a2:	4649      	mov	r1, r9
 80067a4:	f7fa f9da 	bl	8000b5c <__aeabi_dcmpun>
 80067a8:	b140      	cbz	r0, 80067bc <_printf_float+0xf0>
 80067aa:	464b      	mov	r3, r9
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfbc      	itt	lt
 80067b0:	232d      	movlt	r3, #45	; 0x2d
 80067b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067b6:	487f      	ldr	r0, [pc, #508]	; (80069b4 <_printf_float+0x2e8>)
 80067b8:	4b7f      	ldr	r3, [pc, #508]	; (80069b8 <_printf_float+0x2ec>)
 80067ba:	e7d1      	b.n	8006760 <_printf_float+0x94>
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067c2:	9206      	str	r2, [sp, #24]
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	d13f      	bne.n	8006848 <_printf_float+0x17c>
 80067c8:	2306      	movs	r3, #6
 80067ca:	6063      	str	r3, [r4, #4]
 80067cc:	9b05      	ldr	r3, [sp, #20]
 80067ce:	6861      	ldr	r1, [r4, #4]
 80067d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067d4:	2300      	movs	r3, #0
 80067d6:	9303      	str	r3, [sp, #12]
 80067d8:	ab0a      	add	r3, sp, #40	; 0x28
 80067da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067de:	ab09      	add	r3, sp, #36	; 0x24
 80067e0:	ec49 8b10 	vmov	d0, r8, r9
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	6022      	str	r2, [r4, #0]
 80067e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067ec:	4628      	mov	r0, r5
 80067ee:	f7ff fecd 	bl	800658c <__cvt>
 80067f2:	9b06      	ldr	r3, [sp, #24]
 80067f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067f6:	2b47      	cmp	r3, #71	; 0x47
 80067f8:	4680      	mov	r8, r0
 80067fa:	d108      	bne.n	800680e <_printf_float+0x142>
 80067fc:	1cc8      	adds	r0, r1, #3
 80067fe:	db02      	blt.n	8006806 <_printf_float+0x13a>
 8006800:	6863      	ldr	r3, [r4, #4]
 8006802:	4299      	cmp	r1, r3
 8006804:	dd41      	ble.n	800688a <_printf_float+0x1be>
 8006806:	f1ab 0b02 	sub.w	fp, fp, #2
 800680a:	fa5f fb8b 	uxtb.w	fp, fp
 800680e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006812:	d820      	bhi.n	8006856 <_printf_float+0x18a>
 8006814:	3901      	subs	r1, #1
 8006816:	465a      	mov	r2, fp
 8006818:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800681c:	9109      	str	r1, [sp, #36]	; 0x24
 800681e:	f7ff ff17 	bl	8006650 <__exponent>
 8006822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006824:	1813      	adds	r3, r2, r0
 8006826:	2a01      	cmp	r2, #1
 8006828:	4681      	mov	r9, r0
 800682a:	6123      	str	r3, [r4, #16]
 800682c:	dc02      	bgt.n	8006834 <_printf_float+0x168>
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	07d2      	lsls	r2, r2, #31
 8006832:	d501      	bpl.n	8006838 <_printf_float+0x16c>
 8006834:	3301      	adds	r3, #1
 8006836:	6123      	str	r3, [r4, #16]
 8006838:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800683c:	2b00      	cmp	r3, #0
 800683e:	d09c      	beq.n	800677a <_printf_float+0xae>
 8006840:	232d      	movs	r3, #45	; 0x2d
 8006842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006846:	e798      	b.n	800677a <_printf_float+0xae>
 8006848:	9a06      	ldr	r2, [sp, #24]
 800684a:	2a47      	cmp	r2, #71	; 0x47
 800684c:	d1be      	bne.n	80067cc <_printf_float+0x100>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1bc      	bne.n	80067cc <_printf_float+0x100>
 8006852:	2301      	movs	r3, #1
 8006854:	e7b9      	b.n	80067ca <_printf_float+0xfe>
 8006856:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800685a:	d118      	bne.n	800688e <_printf_float+0x1c2>
 800685c:	2900      	cmp	r1, #0
 800685e:	6863      	ldr	r3, [r4, #4]
 8006860:	dd0b      	ble.n	800687a <_printf_float+0x1ae>
 8006862:	6121      	str	r1, [r4, #16]
 8006864:	b913      	cbnz	r3, 800686c <_printf_float+0x1a0>
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	07d0      	lsls	r0, r2, #31
 800686a:	d502      	bpl.n	8006872 <_printf_float+0x1a6>
 800686c:	3301      	adds	r3, #1
 800686e:	440b      	add	r3, r1
 8006870:	6123      	str	r3, [r4, #16]
 8006872:	65a1      	str	r1, [r4, #88]	; 0x58
 8006874:	f04f 0900 	mov.w	r9, #0
 8006878:	e7de      	b.n	8006838 <_printf_float+0x16c>
 800687a:	b913      	cbnz	r3, 8006882 <_printf_float+0x1b6>
 800687c:	6822      	ldr	r2, [r4, #0]
 800687e:	07d2      	lsls	r2, r2, #31
 8006880:	d501      	bpl.n	8006886 <_printf_float+0x1ba>
 8006882:	3302      	adds	r3, #2
 8006884:	e7f4      	b.n	8006870 <_printf_float+0x1a4>
 8006886:	2301      	movs	r3, #1
 8006888:	e7f2      	b.n	8006870 <_printf_float+0x1a4>
 800688a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800688e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006890:	4299      	cmp	r1, r3
 8006892:	db05      	blt.n	80068a0 <_printf_float+0x1d4>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	6121      	str	r1, [r4, #16]
 8006898:	07d8      	lsls	r0, r3, #31
 800689a:	d5ea      	bpl.n	8006872 <_printf_float+0x1a6>
 800689c:	1c4b      	adds	r3, r1, #1
 800689e:	e7e7      	b.n	8006870 <_printf_float+0x1a4>
 80068a0:	2900      	cmp	r1, #0
 80068a2:	bfd4      	ite	le
 80068a4:	f1c1 0202 	rsble	r2, r1, #2
 80068a8:	2201      	movgt	r2, #1
 80068aa:	4413      	add	r3, r2
 80068ac:	e7e0      	b.n	8006870 <_printf_float+0x1a4>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	055a      	lsls	r2, r3, #21
 80068b2:	d407      	bmi.n	80068c4 <_printf_float+0x1f8>
 80068b4:	6923      	ldr	r3, [r4, #16]
 80068b6:	4642      	mov	r2, r8
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	d12c      	bne.n	800691c <_printf_float+0x250>
 80068c2:	e764      	b.n	800678e <_printf_float+0xc2>
 80068c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068c8:	f240 80e0 	bls.w	8006a8c <_printf_float+0x3c0>
 80068cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068d0:	2200      	movs	r2, #0
 80068d2:	2300      	movs	r3, #0
 80068d4:	f7fa f910 	bl	8000af8 <__aeabi_dcmpeq>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d034      	beq.n	8006946 <_printf_float+0x27a>
 80068dc:	4a37      	ldr	r2, [pc, #220]	; (80069bc <_printf_float+0x2f0>)
 80068de:	2301      	movs	r3, #1
 80068e0:	4631      	mov	r1, r6
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	f43f af51 	beq.w	800678e <_printf_float+0xc2>
 80068ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068f0:	429a      	cmp	r2, r3
 80068f2:	db02      	blt.n	80068fa <_printf_float+0x22e>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	07d8      	lsls	r0, r3, #31
 80068f8:	d510      	bpl.n	800691c <_printf_float+0x250>
 80068fa:	ee18 3a10 	vmov	r3, s16
 80068fe:	4652      	mov	r2, sl
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f af41 	beq.w	800678e <_printf_float+0xc2>
 800690c:	f04f 0800 	mov.w	r8, #0
 8006910:	f104 091a 	add.w	r9, r4, #26
 8006914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006916:	3b01      	subs	r3, #1
 8006918:	4543      	cmp	r3, r8
 800691a:	dc09      	bgt.n	8006930 <_printf_float+0x264>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	079b      	lsls	r3, r3, #30
 8006920:	f100 8105 	bmi.w	8006b2e <_printf_float+0x462>
 8006924:	68e0      	ldr	r0, [r4, #12]
 8006926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006928:	4298      	cmp	r0, r3
 800692a:	bfb8      	it	lt
 800692c:	4618      	movlt	r0, r3
 800692e:	e730      	b.n	8006792 <_printf_float+0xc6>
 8006930:	2301      	movs	r3, #1
 8006932:	464a      	mov	r2, r9
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af27 	beq.w	800678e <_printf_float+0xc2>
 8006940:	f108 0801 	add.w	r8, r8, #1
 8006944:	e7e6      	b.n	8006914 <_printf_float+0x248>
 8006946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	dc39      	bgt.n	80069c0 <_printf_float+0x2f4>
 800694c:	4a1b      	ldr	r2, [pc, #108]	; (80069bc <_printf_float+0x2f0>)
 800694e:	2301      	movs	r3, #1
 8006950:	4631      	mov	r1, r6
 8006952:	4628      	mov	r0, r5
 8006954:	47b8      	blx	r7
 8006956:	3001      	adds	r0, #1
 8006958:	f43f af19 	beq.w	800678e <_printf_float+0xc2>
 800695c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006960:	4313      	orrs	r3, r2
 8006962:	d102      	bne.n	800696a <_printf_float+0x29e>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	07d9      	lsls	r1, r3, #31
 8006968:	d5d8      	bpl.n	800691c <_printf_float+0x250>
 800696a:	ee18 3a10 	vmov	r3, s16
 800696e:	4652      	mov	r2, sl
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	47b8      	blx	r7
 8006976:	3001      	adds	r0, #1
 8006978:	f43f af09 	beq.w	800678e <_printf_float+0xc2>
 800697c:	f04f 0900 	mov.w	r9, #0
 8006980:	f104 0a1a 	add.w	sl, r4, #26
 8006984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006986:	425b      	negs	r3, r3
 8006988:	454b      	cmp	r3, r9
 800698a:	dc01      	bgt.n	8006990 <_printf_float+0x2c4>
 800698c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800698e:	e792      	b.n	80068b6 <_printf_float+0x1ea>
 8006990:	2301      	movs	r3, #1
 8006992:	4652      	mov	r2, sl
 8006994:	4631      	mov	r1, r6
 8006996:	4628      	mov	r0, r5
 8006998:	47b8      	blx	r7
 800699a:	3001      	adds	r0, #1
 800699c:	f43f aef7 	beq.w	800678e <_printf_float+0xc2>
 80069a0:	f109 0901 	add.w	r9, r9, #1
 80069a4:	e7ee      	b.n	8006984 <_printf_float+0x2b8>
 80069a6:	bf00      	nop
 80069a8:	7fefffff 	.word	0x7fefffff
 80069ac:	0800a73c 	.word	0x0800a73c
 80069b0:	0800a740 	.word	0x0800a740
 80069b4:	0800a748 	.word	0x0800a748
 80069b8:	0800a744 	.word	0x0800a744
 80069bc:	0800a74c 	.word	0x0800a74c
 80069c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069c4:	429a      	cmp	r2, r3
 80069c6:	bfa8      	it	ge
 80069c8:	461a      	movge	r2, r3
 80069ca:	2a00      	cmp	r2, #0
 80069cc:	4691      	mov	r9, r2
 80069ce:	dc37      	bgt.n	8006a40 <_printf_float+0x374>
 80069d0:	f04f 0b00 	mov.w	fp, #0
 80069d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069d8:	f104 021a 	add.w	r2, r4, #26
 80069dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	eba3 0309 	sub.w	r3, r3, r9
 80069e4:	455b      	cmp	r3, fp
 80069e6:	dc33      	bgt.n	8006a50 <_printf_float+0x384>
 80069e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069ec:	429a      	cmp	r2, r3
 80069ee:	db3b      	blt.n	8006a68 <_printf_float+0x39c>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	07da      	lsls	r2, r3, #31
 80069f4:	d438      	bmi.n	8006a68 <_printf_float+0x39c>
 80069f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f8:	9a05      	ldr	r2, [sp, #20]
 80069fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069fc:	1a9a      	subs	r2, r3, r2
 80069fe:	eba3 0901 	sub.w	r9, r3, r1
 8006a02:	4591      	cmp	r9, r2
 8006a04:	bfa8      	it	ge
 8006a06:	4691      	movge	r9, r2
 8006a08:	f1b9 0f00 	cmp.w	r9, #0
 8006a0c:	dc35      	bgt.n	8006a7a <_printf_float+0x3ae>
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a16:	f104 0a1a 	add.w	sl, r4, #26
 8006a1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	eba3 0309 	sub.w	r3, r3, r9
 8006a24:	4543      	cmp	r3, r8
 8006a26:	f77f af79 	ble.w	800691c <_printf_float+0x250>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4652      	mov	r2, sl
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b8      	blx	r7
 8006a34:	3001      	adds	r0, #1
 8006a36:	f43f aeaa 	beq.w	800678e <_printf_float+0xc2>
 8006a3a:	f108 0801 	add.w	r8, r8, #1
 8006a3e:	e7ec      	b.n	8006a1a <_printf_float+0x34e>
 8006a40:	4613      	mov	r3, r2
 8006a42:	4631      	mov	r1, r6
 8006a44:	4642      	mov	r2, r8
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d1c0      	bne.n	80069d0 <_printf_float+0x304>
 8006a4e:	e69e      	b.n	800678e <_printf_float+0xc2>
 8006a50:	2301      	movs	r3, #1
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	9205      	str	r2, [sp, #20]
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	f43f ae97 	beq.w	800678e <_printf_float+0xc2>
 8006a60:	9a05      	ldr	r2, [sp, #20]
 8006a62:	f10b 0b01 	add.w	fp, fp, #1
 8006a66:	e7b9      	b.n	80069dc <_printf_float+0x310>
 8006a68:	ee18 3a10 	vmov	r3, s16
 8006a6c:	4652      	mov	r2, sl
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	d1be      	bne.n	80069f6 <_printf_float+0x32a>
 8006a78:	e689      	b.n	800678e <_printf_float+0xc2>
 8006a7a:	9a05      	ldr	r2, [sp, #20]
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	4442      	add	r2, r8
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	d1c1      	bne.n	8006a0e <_printf_float+0x342>
 8006a8a:	e680      	b.n	800678e <_printf_float+0xc2>
 8006a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a8e:	2a01      	cmp	r2, #1
 8006a90:	dc01      	bgt.n	8006a96 <_printf_float+0x3ca>
 8006a92:	07db      	lsls	r3, r3, #31
 8006a94:	d538      	bpl.n	8006b08 <_printf_float+0x43c>
 8006a96:	2301      	movs	r3, #1
 8006a98:	4642      	mov	r2, r8
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f43f ae74 	beq.w	800678e <_printf_float+0xc2>
 8006aa6:	ee18 3a10 	vmov	r3, s16
 8006aaa:	4652      	mov	r2, sl
 8006aac:	4631      	mov	r1, r6
 8006aae:	4628      	mov	r0, r5
 8006ab0:	47b8      	blx	r7
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	f43f ae6b 	beq.w	800678e <_printf_float+0xc2>
 8006ab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006abc:	2200      	movs	r2, #0
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f7fa f81a 	bl	8000af8 <__aeabi_dcmpeq>
 8006ac4:	b9d8      	cbnz	r0, 8006afe <_printf_float+0x432>
 8006ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac8:	f108 0201 	add.w	r2, r8, #1
 8006acc:	3b01      	subs	r3, #1
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d10e      	bne.n	8006af6 <_printf_float+0x42a>
 8006ad8:	e659      	b.n	800678e <_printf_float+0xc2>
 8006ada:	2301      	movs	r3, #1
 8006adc:	4652      	mov	r2, sl
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b8      	blx	r7
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	f43f ae52 	beq.w	800678e <_printf_float+0xc2>
 8006aea:	f108 0801 	add.w	r8, r8, #1
 8006aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af0:	3b01      	subs	r3, #1
 8006af2:	4543      	cmp	r3, r8
 8006af4:	dcf1      	bgt.n	8006ada <_printf_float+0x40e>
 8006af6:	464b      	mov	r3, r9
 8006af8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006afc:	e6dc      	b.n	80068b8 <_printf_float+0x1ec>
 8006afe:	f04f 0800 	mov.w	r8, #0
 8006b02:	f104 0a1a 	add.w	sl, r4, #26
 8006b06:	e7f2      	b.n	8006aee <_printf_float+0x422>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4642      	mov	r2, r8
 8006b0c:	e7df      	b.n	8006ace <_printf_float+0x402>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	464a      	mov	r2, r9
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f43f ae38 	beq.w	800678e <_printf_float+0xc2>
 8006b1e:	f108 0801 	add.w	r8, r8, #1
 8006b22:	68e3      	ldr	r3, [r4, #12]
 8006b24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b26:	1a5b      	subs	r3, r3, r1
 8006b28:	4543      	cmp	r3, r8
 8006b2a:	dcf0      	bgt.n	8006b0e <_printf_float+0x442>
 8006b2c:	e6fa      	b.n	8006924 <_printf_float+0x258>
 8006b2e:	f04f 0800 	mov.w	r8, #0
 8006b32:	f104 0919 	add.w	r9, r4, #25
 8006b36:	e7f4      	b.n	8006b22 <_printf_float+0x456>

08006b38 <_printf_common>:
 8006b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b3c:	4616      	mov	r6, r2
 8006b3e:	4699      	mov	r9, r3
 8006b40:	688a      	ldr	r2, [r1, #8]
 8006b42:	690b      	ldr	r3, [r1, #16]
 8006b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	bfb8      	it	lt
 8006b4c:	4613      	movlt	r3, r2
 8006b4e:	6033      	str	r3, [r6, #0]
 8006b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b54:	4607      	mov	r7, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	b10a      	cbz	r2, 8006b5e <_printf_common+0x26>
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	6033      	str	r3, [r6, #0]
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	0699      	lsls	r1, r3, #26
 8006b62:	bf42      	ittt	mi
 8006b64:	6833      	ldrmi	r3, [r6, #0]
 8006b66:	3302      	addmi	r3, #2
 8006b68:	6033      	strmi	r3, [r6, #0]
 8006b6a:	6825      	ldr	r5, [r4, #0]
 8006b6c:	f015 0506 	ands.w	r5, r5, #6
 8006b70:	d106      	bne.n	8006b80 <_printf_common+0x48>
 8006b72:	f104 0a19 	add.w	sl, r4, #25
 8006b76:	68e3      	ldr	r3, [r4, #12]
 8006b78:	6832      	ldr	r2, [r6, #0]
 8006b7a:	1a9b      	subs	r3, r3, r2
 8006b7c:	42ab      	cmp	r3, r5
 8006b7e:	dc26      	bgt.n	8006bce <_printf_common+0x96>
 8006b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b84:	1e13      	subs	r3, r2, #0
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	bf18      	it	ne
 8006b8a:	2301      	movne	r3, #1
 8006b8c:	0692      	lsls	r2, r2, #26
 8006b8e:	d42b      	bmi.n	8006be8 <_printf_common+0xb0>
 8006b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b94:	4649      	mov	r1, r9
 8006b96:	4638      	mov	r0, r7
 8006b98:	47c0      	blx	r8
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	d01e      	beq.n	8006bdc <_printf_common+0xa4>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	68e5      	ldr	r5, [r4, #12]
 8006ba2:	6832      	ldr	r2, [r6, #0]
 8006ba4:	f003 0306 	and.w	r3, r3, #6
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	bf08      	it	eq
 8006bac:	1aad      	subeq	r5, r5, r2
 8006bae:	68a3      	ldr	r3, [r4, #8]
 8006bb0:	6922      	ldr	r2, [r4, #16]
 8006bb2:	bf0c      	ite	eq
 8006bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bb8:	2500      	movne	r5, #0
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	bfc4      	itt	gt
 8006bbe:	1a9b      	subgt	r3, r3, r2
 8006bc0:	18ed      	addgt	r5, r5, r3
 8006bc2:	2600      	movs	r6, #0
 8006bc4:	341a      	adds	r4, #26
 8006bc6:	42b5      	cmp	r5, r6
 8006bc8:	d11a      	bne.n	8006c00 <_printf_common+0xc8>
 8006bca:	2000      	movs	r0, #0
 8006bcc:	e008      	b.n	8006be0 <_printf_common+0xa8>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4652      	mov	r2, sl
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	47c0      	blx	r8
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d103      	bne.n	8006be4 <_printf_common+0xac>
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be4:	3501      	adds	r5, #1
 8006be6:	e7c6      	b.n	8006b76 <_printf_common+0x3e>
 8006be8:	18e1      	adds	r1, r4, r3
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	2030      	movs	r0, #48	; 0x30
 8006bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bf2:	4422      	add	r2, r4
 8006bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bfc:	3302      	adds	r3, #2
 8006bfe:	e7c7      	b.n	8006b90 <_printf_common+0x58>
 8006c00:	2301      	movs	r3, #1
 8006c02:	4622      	mov	r2, r4
 8006c04:	4649      	mov	r1, r9
 8006c06:	4638      	mov	r0, r7
 8006c08:	47c0      	blx	r8
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d0e6      	beq.n	8006bdc <_printf_common+0xa4>
 8006c0e:	3601      	adds	r6, #1
 8006c10:	e7d9      	b.n	8006bc6 <_printf_common+0x8e>
	...

08006c14 <_printf_i>:
 8006c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c18:	7e0f      	ldrb	r7, [r1, #24]
 8006c1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c1c:	2f78      	cmp	r7, #120	; 0x78
 8006c1e:	4691      	mov	r9, r2
 8006c20:	4680      	mov	r8, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	469a      	mov	sl, r3
 8006c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c2a:	d807      	bhi.n	8006c3c <_printf_i+0x28>
 8006c2c:	2f62      	cmp	r7, #98	; 0x62
 8006c2e:	d80a      	bhi.n	8006c46 <_printf_i+0x32>
 8006c30:	2f00      	cmp	r7, #0
 8006c32:	f000 80d8 	beq.w	8006de6 <_printf_i+0x1d2>
 8006c36:	2f58      	cmp	r7, #88	; 0x58
 8006c38:	f000 80a3 	beq.w	8006d82 <_printf_i+0x16e>
 8006c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c44:	e03a      	b.n	8006cbc <_printf_i+0xa8>
 8006c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c4a:	2b15      	cmp	r3, #21
 8006c4c:	d8f6      	bhi.n	8006c3c <_printf_i+0x28>
 8006c4e:	a101      	add	r1, pc, #4	; (adr r1, 8006c54 <_printf_i+0x40>)
 8006c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c54:	08006cad 	.word	0x08006cad
 8006c58:	08006cc1 	.word	0x08006cc1
 8006c5c:	08006c3d 	.word	0x08006c3d
 8006c60:	08006c3d 	.word	0x08006c3d
 8006c64:	08006c3d 	.word	0x08006c3d
 8006c68:	08006c3d 	.word	0x08006c3d
 8006c6c:	08006cc1 	.word	0x08006cc1
 8006c70:	08006c3d 	.word	0x08006c3d
 8006c74:	08006c3d 	.word	0x08006c3d
 8006c78:	08006c3d 	.word	0x08006c3d
 8006c7c:	08006c3d 	.word	0x08006c3d
 8006c80:	08006dcd 	.word	0x08006dcd
 8006c84:	08006cf1 	.word	0x08006cf1
 8006c88:	08006daf 	.word	0x08006daf
 8006c8c:	08006c3d 	.word	0x08006c3d
 8006c90:	08006c3d 	.word	0x08006c3d
 8006c94:	08006def 	.word	0x08006def
 8006c98:	08006c3d 	.word	0x08006c3d
 8006c9c:	08006cf1 	.word	0x08006cf1
 8006ca0:	08006c3d 	.word	0x08006c3d
 8006ca4:	08006c3d 	.word	0x08006c3d
 8006ca8:	08006db7 	.word	0x08006db7
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	1d1a      	adds	r2, r3, #4
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	602a      	str	r2, [r5, #0]
 8006cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0a3      	b.n	8006e08 <_printf_i+0x1f4>
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	6829      	ldr	r1, [r5, #0]
 8006cc4:	0606      	lsls	r6, r0, #24
 8006cc6:	f101 0304 	add.w	r3, r1, #4
 8006cca:	d50a      	bpl.n	8006ce2 <_printf_i+0xce>
 8006ccc:	680e      	ldr	r6, [r1, #0]
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	2e00      	cmp	r6, #0
 8006cd2:	da03      	bge.n	8006cdc <_printf_i+0xc8>
 8006cd4:	232d      	movs	r3, #45	; 0x2d
 8006cd6:	4276      	negs	r6, r6
 8006cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cdc:	485e      	ldr	r0, [pc, #376]	; (8006e58 <_printf_i+0x244>)
 8006cde:	230a      	movs	r3, #10
 8006ce0:	e019      	b.n	8006d16 <_printf_i+0x102>
 8006ce2:	680e      	ldr	r6, [r1, #0]
 8006ce4:	602b      	str	r3, [r5, #0]
 8006ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cea:	bf18      	it	ne
 8006cec:	b236      	sxthne	r6, r6
 8006cee:	e7ef      	b.n	8006cd0 <_printf_i+0xbc>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	6820      	ldr	r0, [r4, #0]
 8006cf4:	1d19      	adds	r1, r3, #4
 8006cf6:	6029      	str	r1, [r5, #0]
 8006cf8:	0601      	lsls	r1, r0, #24
 8006cfa:	d501      	bpl.n	8006d00 <_printf_i+0xec>
 8006cfc:	681e      	ldr	r6, [r3, #0]
 8006cfe:	e002      	b.n	8006d06 <_printf_i+0xf2>
 8006d00:	0646      	lsls	r6, r0, #25
 8006d02:	d5fb      	bpl.n	8006cfc <_printf_i+0xe8>
 8006d04:	881e      	ldrh	r6, [r3, #0]
 8006d06:	4854      	ldr	r0, [pc, #336]	; (8006e58 <_printf_i+0x244>)
 8006d08:	2f6f      	cmp	r7, #111	; 0x6f
 8006d0a:	bf0c      	ite	eq
 8006d0c:	2308      	moveq	r3, #8
 8006d0e:	230a      	movne	r3, #10
 8006d10:	2100      	movs	r1, #0
 8006d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d16:	6865      	ldr	r5, [r4, #4]
 8006d18:	60a5      	str	r5, [r4, #8]
 8006d1a:	2d00      	cmp	r5, #0
 8006d1c:	bfa2      	ittt	ge
 8006d1e:	6821      	ldrge	r1, [r4, #0]
 8006d20:	f021 0104 	bicge.w	r1, r1, #4
 8006d24:	6021      	strge	r1, [r4, #0]
 8006d26:	b90e      	cbnz	r6, 8006d2c <_printf_i+0x118>
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	d04d      	beq.n	8006dc8 <_printf_i+0x1b4>
 8006d2c:	4615      	mov	r5, r2
 8006d2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d32:	fb03 6711 	mls	r7, r3, r1, r6
 8006d36:	5dc7      	ldrb	r7, [r0, r7]
 8006d38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d3c:	4637      	mov	r7, r6
 8006d3e:	42bb      	cmp	r3, r7
 8006d40:	460e      	mov	r6, r1
 8006d42:	d9f4      	bls.n	8006d2e <_printf_i+0x11a>
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d10b      	bne.n	8006d60 <_printf_i+0x14c>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	07de      	lsls	r6, r3, #31
 8006d4c:	d508      	bpl.n	8006d60 <_printf_i+0x14c>
 8006d4e:	6923      	ldr	r3, [r4, #16]
 8006d50:	6861      	ldr	r1, [r4, #4]
 8006d52:	4299      	cmp	r1, r3
 8006d54:	bfde      	ittt	le
 8006d56:	2330      	movle	r3, #48	; 0x30
 8006d58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d60:	1b52      	subs	r2, r2, r5
 8006d62:	6122      	str	r2, [r4, #16]
 8006d64:	f8cd a000 	str.w	sl, [sp]
 8006d68:	464b      	mov	r3, r9
 8006d6a:	aa03      	add	r2, sp, #12
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	4640      	mov	r0, r8
 8006d70:	f7ff fee2 	bl	8006b38 <_printf_common>
 8006d74:	3001      	adds	r0, #1
 8006d76:	d14c      	bne.n	8006e12 <_printf_i+0x1fe>
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	b004      	add	sp, #16
 8006d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d82:	4835      	ldr	r0, [pc, #212]	; (8006e58 <_printf_i+0x244>)
 8006d84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d88:	6829      	ldr	r1, [r5, #0]
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d90:	6029      	str	r1, [r5, #0]
 8006d92:	061d      	lsls	r5, r3, #24
 8006d94:	d514      	bpl.n	8006dc0 <_printf_i+0x1ac>
 8006d96:	07df      	lsls	r7, r3, #31
 8006d98:	bf44      	itt	mi
 8006d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d9e:	6023      	strmi	r3, [r4, #0]
 8006da0:	b91e      	cbnz	r6, 8006daa <_printf_i+0x196>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	f023 0320 	bic.w	r3, r3, #32
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	2310      	movs	r3, #16
 8006dac:	e7b0      	b.n	8006d10 <_printf_i+0xfc>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	f043 0320 	orr.w	r3, r3, #32
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	2378      	movs	r3, #120	; 0x78
 8006db8:	4828      	ldr	r0, [pc, #160]	; (8006e5c <_printf_i+0x248>)
 8006dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dbe:	e7e3      	b.n	8006d88 <_printf_i+0x174>
 8006dc0:	0659      	lsls	r1, r3, #25
 8006dc2:	bf48      	it	mi
 8006dc4:	b2b6      	uxthmi	r6, r6
 8006dc6:	e7e6      	b.n	8006d96 <_printf_i+0x182>
 8006dc8:	4615      	mov	r5, r2
 8006dca:	e7bb      	b.n	8006d44 <_printf_i+0x130>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	6826      	ldr	r6, [r4, #0]
 8006dd0:	6961      	ldr	r1, [r4, #20]
 8006dd2:	1d18      	adds	r0, r3, #4
 8006dd4:	6028      	str	r0, [r5, #0]
 8006dd6:	0635      	lsls	r5, r6, #24
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	d501      	bpl.n	8006de0 <_printf_i+0x1cc>
 8006ddc:	6019      	str	r1, [r3, #0]
 8006dde:	e002      	b.n	8006de6 <_printf_i+0x1d2>
 8006de0:	0670      	lsls	r0, r6, #25
 8006de2:	d5fb      	bpl.n	8006ddc <_printf_i+0x1c8>
 8006de4:	8019      	strh	r1, [r3, #0]
 8006de6:	2300      	movs	r3, #0
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	4615      	mov	r5, r2
 8006dec:	e7ba      	b.n	8006d64 <_printf_i+0x150>
 8006dee:	682b      	ldr	r3, [r5, #0]
 8006df0:	1d1a      	adds	r2, r3, #4
 8006df2:	602a      	str	r2, [r5, #0]
 8006df4:	681d      	ldr	r5, [r3, #0]
 8006df6:	6862      	ldr	r2, [r4, #4]
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f7f9 fa08 	bl	8000210 <memchr>
 8006e00:	b108      	cbz	r0, 8006e06 <_printf_i+0x1f2>
 8006e02:	1b40      	subs	r0, r0, r5
 8006e04:	6060      	str	r0, [r4, #4]
 8006e06:	6863      	ldr	r3, [r4, #4]
 8006e08:	6123      	str	r3, [r4, #16]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e10:	e7a8      	b.n	8006d64 <_printf_i+0x150>
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	462a      	mov	r2, r5
 8006e16:	4649      	mov	r1, r9
 8006e18:	4640      	mov	r0, r8
 8006e1a:	47d0      	blx	sl
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d0ab      	beq.n	8006d78 <_printf_i+0x164>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	079b      	lsls	r3, r3, #30
 8006e24:	d413      	bmi.n	8006e4e <_printf_i+0x23a>
 8006e26:	68e0      	ldr	r0, [r4, #12]
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	4298      	cmp	r0, r3
 8006e2c:	bfb8      	it	lt
 8006e2e:	4618      	movlt	r0, r3
 8006e30:	e7a4      	b.n	8006d7c <_printf_i+0x168>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4632      	mov	r2, r6
 8006e36:	4649      	mov	r1, r9
 8006e38:	4640      	mov	r0, r8
 8006e3a:	47d0      	blx	sl
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d09b      	beq.n	8006d78 <_printf_i+0x164>
 8006e40:	3501      	adds	r5, #1
 8006e42:	68e3      	ldr	r3, [r4, #12]
 8006e44:	9903      	ldr	r1, [sp, #12]
 8006e46:	1a5b      	subs	r3, r3, r1
 8006e48:	42ab      	cmp	r3, r5
 8006e4a:	dcf2      	bgt.n	8006e32 <_printf_i+0x21e>
 8006e4c:	e7eb      	b.n	8006e26 <_printf_i+0x212>
 8006e4e:	2500      	movs	r5, #0
 8006e50:	f104 0619 	add.w	r6, r4, #25
 8006e54:	e7f5      	b.n	8006e42 <_printf_i+0x22e>
 8006e56:	bf00      	nop
 8006e58:	0800a74e 	.word	0x0800a74e
 8006e5c:	0800a75f 	.word	0x0800a75f

08006e60 <iprintf>:
 8006e60:	b40f      	push	{r0, r1, r2, r3}
 8006e62:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <iprintf+0x2c>)
 8006e64:	b513      	push	{r0, r1, r4, lr}
 8006e66:	681c      	ldr	r4, [r3, #0]
 8006e68:	b124      	cbz	r4, 8006e74 <iprintf+0x14>
 8006e6a:	69a3      	ldr	r3, [r4, #24]
 8006e6c:	b913      	cbnz	r3, 8006e74 <iprintf+0x14>
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f001 f8da 	bl	8008028 <__sinit>
 8006e74:	ab05      	add	r3, sp, #20
 8006e76:	9a04      	ldr	r2, [sp, #16]
 8006e78:	68a1      	ldr	r1, [r4, #8]
 8006e7a:	9301      	str	r3, [sp, #4]
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f001 fe97 	bl	8008bb0 <_vfiprintf_r>
 8006e82:	b002      	add	sp, #8
 8006e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e88:	b004      	add	sp, #16
 8006e8a:	4770      	bx	lr
 8006e8c:	20000024 	.word	0x20000024

08006e90 <_puts_r>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	460e      	mov	r6, r1
 8006e94:	4605      	mov	r5, r0
 8006e96:	b118      	cbz	r0, 8006ea0 <_puts_r+0x10>
 8006e98:	6983      	ldr	r3, [r0, #24]
 8006e9a:	b90b      	cbnz	r3, 8006ea0 <_puts_r+0x10>
 8006e9c:	f001 f8c4 	bl	8008028 <__sinit>
 8006ea0:	69ab      	ldr	r3, [r5, #24]
 8006ea2:	68ac      	ldr	r4, [r5, #8]
 8006ea4:	b913      	cbnz	r3, 8006eac <_puts_r+0x1c>
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f001 f8be 	bl	8008028 <__sinit>
 8006eac:	4b2c      	ldr	r3, [pc, #176]	; (8006f60 <_puts_r+0xd0>)
 8006eae:	429c      	cmp	r4, r3
 8006eb0:	d120      	bne.n	8006ef4 <_puts_r+0x64>
 8006eb2:	686c      	ldr	r4, [r5, #4]
 8006eb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb6:	07db      	lsls	r3, r3, #31
 8006eb8:	d405      	bmi.n	8006ec6 <_puts_r+0x36>
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	0598      	lsls	r0, r3, #22
 8006ebe:	d402      	bmi.n	8006ec6 <_puts_r+0x36>
 8006ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec2:	f001 f954 	bl	800816e <__retarget_lock_acquire_recursive>
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	0719      	lsls	r1, r3, #28
 8006eca:	d51d      	bpl.n	8006f08 <_puts_r+0x78>
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	b1db      	cbz	r3, 8006f08 <_puts_r+0x78>
 8006ed0:	3e01      	subs	r6, #1
 8006ed2:	68a3      	ldr	r3, [r4, #8]
 8006ed4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	60a3      	str	r3, [r4, #8]
 8006edc:	bb39      	cbnz	r1, 8006f2e <_puts_r+0x9e>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da38      	bge.n	8006f54 <_puts_r+0xc4>
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	210a      	movs	r1, #10
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f848 	bl	8006f7c <__swbuf_r>
 8006eec:	3001      	adds	r0, #1
 8006eee:	d011      	beq.n	8006f14 <_puts_r+0x84>
 8006ef0:	250a      	movs	r5, #10
 8006ef2:	e011      	b.n	8006f18 <_puts_r+0x88>
 8006ef4:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <_puts_r+0xd4>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d101      	bne.n	8006efe <_puts_r+0x6e>
 8006efa:	68ac      	ldr	r4, [r5, #8]
 8006efc:	e7da      	b.n	8006eb4 <_puts_r+0x24>
 8006efe:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <_puts_r+0xd8>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	bf08      	it	eq
 8006f04:	68ec      	ldreq	r4, [r5, #12]
 8006f06:	e7d5      	b.n	8006eb4 <_puts_r+0x24>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 f888 	bl	8007020 <__swsetup_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d0dd      	beq.n	8006ed0 <_puts_r+0x40>
 8006f14:	f04f 35ff 	mov.w	r5, #4294967295
 8006f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f1a:	07da      	lsls	r2, r3, #31
 8006f1c:	d405      	bmi.n	8006f2a <_puts_r+0x9a>
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	059b      	lsls	r3, r3, #22
 8006f22:	d402      	bmi.n	8006f2a <_puts_r+0x9a>
 8006f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f26:	f001 f923 	bl	8008170 <__retarget_lock_release_recursive>
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	bd70      	pop	{r4, r5, r6, pc}
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	da04      	bge.n	8006f3c <_puts_r+0xac>
 8006f32:	69a2      	ldr	r2, [r4, #24]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	dc06      	bgt.n	8006f46 <_puts_r+0xb6>
 8006f38:	290a      	cmp	r1, #10
 8006f3a:	d004      	beq.n	8006f46 <_puts_r+0xb6>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	6022      	str	r2, [r4, #0]
 8006f42:	7019      	strb	r1, [r3, #0]
 8006f44:	e7c5      	b.n	8006ed2 <_puts_r+0x42>
 8006f46:	4622      	mov	r2, r4
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f000 f817 	bl	8006f7c <__swbuf_r>
 8006f4e:	3001      	adds	r0, #1
 8006f50:	d1bf      	bne.n	8006ed2 <_puts_r+0x42>
 8006f52:	e7df      	b.n	8006f14 <_puts_r+0x84>
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	250a      	movs	r5, #10
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	6022      	str	r2, [r4, #0]
 8006f5c:	701d      	strb	r5, [r3, #0]
 8006f5e:	e7db      	b.n	8006f18 <_puts_r+0x88>
 8006f60:	0800a820 	.word	0x0800a820
 8006f64:	0800a840 	.word	0x0800a840
 8006f68:	0800a800 	.word	0x0800a800

08006f6c <puts>:
 8006f6c:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <puts+0xc>)
 8006f6e:	4601      	mov	r1, r0
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	f7ff bf8d 	b.w	8006e90 <_puts_r>
 8006f76:	bf00      	nop
 8006f78:	20000024 	.word	0x20000024

08006f7c <__swbuf_r>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	460e      	mov	r6, r1
 8006f80:	4614      	mov	r4, r2
 8006f82:	4605      	mov	r5, r0
 8006f84:	b118      	cbz	r0, 8006f8e <__swbuf_r+0x12>
 8006f86:	6983      	ldr	r3, [r0, #24]
 8006f88:	b90b      	cbnz	r3, 8006f8e <__swbuf_r+0x12>
 8006f8a:	f001 f84d 	bl	8008028 <__sinit>
 8006f8e:	4b21      	ldr	r3, [pc, #132]	; (8007014 <__swbuf_r+0x98>)
 8006f90:	429c      	cmp	r4, r3
 8006f92:	d12b      	bne.n	8006fec <__swbuf_r+0x70>
 8006f94:	686c      	ldr	r4, [r5, #4]
 8006f96:	69a3      	ldr	r3, [r4, #24]
 8006f98:	60a3      	str	r3, [r4, #8]
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	071a      	lsls	r2, r3, #28
 8006f9e:	d52f      	bpl.n	8007000 <__swbuf_r+0x84>
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	b36b      	cbz	r3, 8007000 <__swbuf_r+0x84>
 8006fa4:	6923      	ldr	r3, [r4, #16]
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	1ac0      	subs	r0, r0, r3
 8006faa:	6963      	ldr	r3, [r4, #20]
 8006fac:	b2f6      	uxtb	r6, r6
 8006fae:	4283      	cmp	r3, r0
 8006fb0:	4637      	mov	r7, r6
 8006fb2:	dc04      	bgt.n	8006fbe <__swbuf_r+0x42>
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f000 ffa2 	bl	8007f00 <_fflush_r>
 8006fbc:	bb30      	cbnz	r0, 800700c <__swbuf_r+0x90>
 8006fbe:	68a3      	ldr	r3, [r4, #8]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	60a3      	str	r3, [r4, #8]
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	6022      	str	r2, [r4, #0]
 8006fca:	701e      	strb	r6, [r3, #0]
 8006fcc:	6963      	ldr	r3, [r4, #20]
 8006fce:	3001      	adds	r0, #1
 8006fd0:	4283      	cmp	r3, r0
 8006fd2:	d004      	beq.n	8006fde <__swbuf_r+0x62>
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	07db      	lsls	r3, r3, #31
 8006fd8:	d506      	bpl.n	8006fe8 <__swbuf_r+0x6c>
 8006fda:	2e0a      	cmp	r6, #10
 8006fdc:	d104      	bne.n	8006fe8 <__swbuf_r+0x6c>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 ff8d 	bl	8007f00 <_fflush_r>
 8006fe6:	b988      	cbnz	r0, 800700c <__swbuf_r+0x90>
 8006fe8:	4638      	mov	r0, r7
 8006fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <__swbuf_r+0x9c>)
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	d101      	bne.n	8006ff6 <__swbuf_r+0x7a>
 8006ff2:	68ac      	ldr	r4, [r5, #8]
 8006ff4:	e7cf      	b.n	8006f96 <__swbuf_r+0x1a>
 8006ff6:	4b09      	ldr	r3, [pc, #36]	; (800701c <__swbuf_r+0xa0>)
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	bf08      	it	eq
 8006ffc:	68ec      	ldreq	r4, [r5, #12]
 8006ffe:	e7ca      	b.n	8006f96 <__swbuf_r+0x1a>
 8007000:	4621      	mov	r1, r4
 8007002:	4628      	mov	r0, r5
 8007004:	f000 f80c 	bl	8007020 <__swsetup_r>
 8007008:	2800      	cmp	r0, #0
 800700a:	d0cb      	beq.n	8006fa4 <__swbuf_r+0x28>
 800700c:	f04f 37ff 	mov.w	r7, #4294967295
 8007010:	e7ea      	b.n	8006fe8 <__swbuf_r+0x6c>
 8007012:	bf00      	nop
 8007014:	0800a820 	.word	0x0800a820
 8007018:	0800a840 	.word	0x0800a840
 800701c:	0800a800 	.word	0x0800a800

08007020 <__swsetup_r>:
 8007020:	4b32      	ldr	r3, [pc, #200]	; (80070ec <__swsetup_r+0xcc>)
 8007022:	b570      	push	{r4, r5, r6, lr}
 8007024:	681d      	ldr	r5, [r3, #0]
 8007026:	4606      	mov	r6, r0
 8007028:	460c      	mov	r4, r1
 800702a:	b125      	cbz	r5, 8007036 <__swsetup_r+0x16>
 800702c:	69ab      	ldr	r3, [r5, #24]
 800702e:	b913      	cbnz	r3, 8007036 <__swsetup_r+0x16>
 8007030:	4628      	mov	r0, r5
 8007032:	f000 fff9 	bl	8008028 <__sinit>
 8007036:	4b2e      	ldr	r3, [pc, #184]	; (80070f0 <__swsetup_r+0xd0>)
 8007038:	429c      	cmp	r4, r3
 800703a:	d10f      	bne.n	800705c <__swsetup_r+0x3c>
 800703c:	686c      	ldr	r4, [r5, #4]
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007044:	0719      	lsls	r1, r3, #28
 8007046:	d42c      	bmi.n	80070a2 <__swsetup_r+0x82>
 8007048:	06dd      	lsls	r5, r3, #27
 800704a:	d411      	bmi.n	8007070 <__swsetup_r+0x50>
 800704c:	2309      	movs	r3, #9
 800704e:	6033      	str	r3, [r6, #0]
 8007050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	f04f 30ff 	mov.w	r0, #4294967295
 800705a:	e03e      	b.n	80070da <__swsetup_r+0xba>
 800705c:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <__swsetup_r+0xd4>)
 800705e:	429c      	cmp	r4, r3
 8007060:	d101      	bne.n	8007066 <__swsetup_r+0x46>
 8007062:	68ac      	ldr	r4, [r5, #8]
 8007064:	e7eb      	b.n	800703e <__swsetup_r+0x1e>
 8007066:	4b24      	ldr	r3, [pc, #144]	; (80070f8 <__swsetup_r+0xd8>)
 8007068:	429c      	cmp	r4, r3
 800706a:	bf08      	it	eq
 800706c:	68ec      	ldreq	r4, [r5, #12]
 800706e:	e7e6      	b.n	800703e <__swsetup_r+0x1e>
 8007070:	0758      	lsls	r0, r3, #29
 8007072:	d512      	bpl.n	800709a <__swsetup_r+0x7a>
 8007074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007076:	b141      	cbz	r1, 800708a <__swsetup_r+0x6a>
 8007078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800707c:	4299      	cmp	r1, r3
 800707e:	d002      	beq.n	8007086 <__swsetup_r+0x66>
 8007080:	4630      	mov	r0, r6
 8007082:	f001 fc8b 	bl	800899c <_free_r>
 8007086:	2300      	movs	r3, #0
 8007088:	6363      	str	r3, [r4, #52]	; 0x34
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	2300      	movs	r3, #0
 8007094:	6063      	str	r3, [r4, #4]
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	f043 0308 	orr.w	r3, r3, #8
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	6923      	ldr	r3, [r4, #16]
 80070a4:	b94b      	cbnz	r3, 80070ba <__swsetup_r+0x9a>
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b0:	d003      	beq.n	80070ba <__swsetup_r+0x9a>
 80070b2:	4621      	mov	r1, r4
 80070b4:	4630      	mov	r0, r6
 80070b6:	f001 f881 	bl	80081bc <__smakebuf_r>
 80070ba:	89a0      	ldrh	r0, [r4, #12]
 80070bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070c0:	f010 0301 	ands.w	r3, r0, #1
 80070c4:	d00a      	beq.n	80070dc <__swsetup_r+0xbc>
 80070c6:	2300      	movs	r3, #0
 80070c8:	60a3      	str	r3, [r4, #8]
 80070ca:	6963      	ldr	r3, [r4, #20]
 80070cc:	425b      	negs	r3, r3
 80070ce:	61a3      	str	r3, [r4, #24]
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	b943      	cbnz	r3, 80070e6 <__swsetup_r+0xc6>
 80070d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070d8:	d1ba      	bne.n	8007050 <__swsetup_r+0x30>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	0781      	lsls	r1, r0, #30
 80070de:	bf58      	it	pl
 80070e0:	6963      	ldrpl	r3, [r4, #20]
 80070e2:	60a3      	str	r3, [r4, #8]
 80070e4:	e7f4      	b.n	80070d0 <__swsetup_r+0xb0>
 80070e6:	2000      	movs	r0, #0
 80070e8:	e7f7      	b.n	80070da <__swsetup_r+0xba>
 80070ea:	bf00      	nop
 80070ec:	20000024 	.word	0x20000024
 80070f0:	0800a820 	.word	0x0800a820
 80070f4:	0800a840 	.word	0x0800a840
 80070f8:	0800a800 	.word	0x0800a800

080070fc <quorem>:
 80070fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	6903      	ldr	r3, [r0, #16]
 8007102:	690c      	ldr	r4, [r1, #16]
 8007104:	42a3      	cmp	r3, r4
 8007106:	4607      	mov	r7, r0
 8007108:	f2c0 8081 	blt.w	800720e <quorem+0x112>
 800710c:	3c01      	subs	r4, #1
 800710e:	f101 0814 	add.w	r8, r1, #20
 8007112:	f100 0514 	add.w	r5, r0, #20
 8007116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007124:	3301      	adds	r3, #1
 8007126:	429a      	cmp	r2, r3
 8007128:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800712c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007130:	fbb2 f6f3 	udiv	r6, r2, r3
 8007134:	d331      	bcc.n	800719a <quorem+0x9e>
 8007136:	f04f 0e00 	mov.w	lr, #0
 800713a:	4640      	mov	r0, r8
 800713c:	46ac      	mov	ip, r5
 800713e:	46f2      	mov	sl, lr
 8007140:	f850 2b04 	ldr.w	r2, [r0], #4
 8007144:	b293      	uxth	r3, r2
 8007146:	fb06 e303 	mla	r3, r6, r3, lr
 800714a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800714e:	b29b      	uxth	r3, r3
 8007150:	ebaa 0303 	sub.w	r3, sl, r3
 8007154:	f8dc a000 	ldr.w	sl, [ip]
 8007158:	0c12      	lsrs	r2, r2, #16
 800715a:	fa13 f38a 	uxtah	r3, r3, sl
 800715e:	fb06 e202 	mla	r2, r6, r2, lr
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	9b00      	ldr	r3, [sp, #0]
 8007166:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800716a:	b292      	uxth	r2, r2
 800716c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007174:	f8bd 3000 	ldrh.w	r3, [sp]
 8007178:	4581      	cmp	r9, r0
 800717a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800717e:	f84c 3b04 	str.w	r3, [ip], #4
 8007182:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007186:	d2db      	bcs.n	8007140 <quorem+0x44>
 8007188:	f855 300b 	ldr.w	r3, [r5, fp]
 800718c:	b92b      	cbnz	r3, 800719a <quorem+0x9e>
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	3b04      	subs	r3, #4
 8007192:	429d      	cmp	r5, r3
 8007194:	461a      	mov	r2, r3
 8007196:	d32e      	bcc.n	80071f6 <quorem+0xfa>
 8007198:	613c      	str	r4, [r7, #16]
 800719a:	4638      	mov	r0, r7
 800719c:	f001 fae6 	bl	800876c <__mcmp>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	db24      	blt.n	80071ee <quorem+0xf2>
 80071a4:	3601      	adds	r6, #1
 80071a6:	4628      	mov	r0, r5
 80071a8:	f04f 0c00 	mov.w	ip, #0
 80071ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80071b0:	f8d0 e000 	ldr.w	lr, [r0]
 80071b4:	b293      	uxth	r3, r2
 80071b6:	ebac 0303 	sub.w	r3, ip, r3
 80071ba:	0c12      	lsrs	r2, r2, #16
 80071bc:	fa13 f38e 	uxtah	r3, r3, lr
 80071c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ce:	45c1      	cmp	r9, r8
 80071d0:	f840 3b04 	str.w	r3, [r0], #4
 80071d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071d8:	d2e8      	bcs.n	80071ac <quorem+0xb0>
 80071da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071e2:	b922      	cbnz	r2, 80071ee <quorem+0xf2>
 80071e4:	3b04      	subs	r3, #4
 80071e6:	429d      	cmp	r5, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	d30a      	bcc.n	8007202 <quorem+0x106>
 80071ec:	613c      	str	r4, [r7, #16]
 80071ee:	4630      	mov	r0, r6
 80071f0:	b003      	add	sp, #12
 80071f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	3b04      	subs	r3, #4
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	d1cc      	bne.n	8007198 <quorem+0x9c>
 80071fe:	3c01      	subs	r4, #1
 8007200:	e7c7      	b.n	8007192 <quorem+0x96>
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	3b04      	subs	r3, #4
 8007206:	2a00      	cmp	r2, #0
 8007208:	d1f0      	bne.n	80071ec <quorem+0xf0>
 800720a:	3c01      	subs	r4, #1
 800720c:	e7eb      	b.n	80071e6 <quorem+0xea>
 800720e:	2000      	movs	r0, #0
 8007210:	e7ee      	b.n	80071f0 <quorem+0xf4>
 8007212:	0000      	movs	r0, r0
 8007214:	0000      	movs	r0, r0
	...

08007218 <_dtoa_r>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	ed2d 8b04 	vpush	{d8-d9}
 8007220:	ec57 6b10 	vmov	r6, r7, d0
 8007224:	b093      	sub	sp, #76	; 0x4c
 8007226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800722c:	9106      	str	r1, [sp, #24]
 800722e:	ee10 aa10 	vmov	sl, s0
 8007232:	4604      	mov	r4, r0
 8007234:	9209      	str	r2, [sp, #36]	; 0x24
 8007236:	930c      	str	r3, [sp, #48]	; 0x30
 8007238:	46bb      	mov	fp, r7
 800723a:	b975      	cbnz	r5, 800725a <_dtoa_r+0x42>
 800723c:	2010      	movs	r0, #16
 800723e:	f000 fffd 	bl	800823c <malloc>
 8007242:	4602      	mov	r2, r0
 8007244:	6260      	str	r0, [r4, #36]	; 0x24
 8007246:	b920      	cbnz	r0, 8007252 <_dtoa_r+0x3a>
 8007248:	4ba7      	ldr	r3, [pc, #668]	; (80074e8 <_dtoa_r+0x2d0>)
 800724a:	21ea      	movs	r1, #234	; 0xea
 800724c:	48a7      	ldr	r0, [pc, #668]	; (80074ec <_dtoa_r+0x2d4>)
 800724e:	f001 fe45 	bl	8008edc <__assert_func>
 8007252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007256:	6005      	str	r5, [r0, #0]
 8007258:	60c5      	str	r5, [r0, #12]
 800725a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800725c:	6819      	ldr	r1, [r3, #0]
 800725e:	b151      	cbz	r1, 8007276 <_dtoa_r+0x5e>
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	604a      	str	r2, [r1, #4]
 8007264:	2301      	movs	r3, #1
 8007266:	4093      	lsls	r3, r2
 8007268:	608b      	str	r3, [r1, #8]
 800726a:	4620      	mov	r0, r4
 800726c:	f001 f83c 	bl	80082e8 <_Bfree>
 8007270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	1e3b      	subs	r3, r7, #0
 8007278:	bfaa      	itet	ge
 800727a:	2300      	movge	r3, #0
 800727c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007280:	f8c8 3000 	strge.w	r3, [r8]
 8007284:	4b9a      	ldr	r3, [pc, #616]	; (80074f0 <_dtoa_r+0x2d8>)
 8007286:	bfbc      	itt	lt
 8007288:	2201      	movlt	r2, #1
 800728a:	f8c8 2000 	strlt.w	r2, [r8]
 800728e:	ea33 030b 	bics.w	r3, r3, fp
 8007292:	d11b      	bne.n	80072cc <_dtoa_r+0xb4>
 8007294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007296:	f242 730f 	movw	r3, #9999	; 0x270f
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072a0:	4333      	orrs	r3, r6
 80072a2:	f000 8592 	beq.w	8007dca <_dtoa_r+0xbb2>
 80072a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072a8:	b963      	cbnz	r3, 80072c4 <_dtoa_r+0xac>
 80072aa:	4b92      	ldr	r3, [pc, #584]	; (80074f4 <_dtoa_r+0x2dc>)
 80072ac:	e022      	b.n	80072f4 <_dtoa_r+0xdc>
 80072ae:	4b92      	ldr	r3, [pc, #584]	; (80074f8 <_dtoa_r+0x2e0>)
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	3308      	adds	r3, #8
 80072b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	9801      	ldr	r0, [sp, #4]
 80072ba:	b013      	add	sp, #76	; 0x4c
 80072bc:	ecbd 8b04 	vpop	{d8-d9}
 80072c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c4:	4b8b      	ldr	r3, [pc, #556]	; (80074f4 <_dtoa_r+0x2dc>)
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	3303      	adds	r3, #3
 80072ca:	e7f3      	b.n	80072b4 <_dtoa_r+0x9c>
 80072cc:	2200      	movs	r2, #0
 80072ce:	2300      	movs	r3, #0
 80072d0:	4650      	mov	r0, sl
 80072d2:	4659      	mov	r1, fp
 80072d4:	f7f9 fc10 	bl	8000af8 <__aeabi_dcmpeq>
 80072d8:	ec4b ab19 	vmov	d9, sl, fp
 80072dc:	4680      	mov	r8, r0
 80072de:	b158      	cbz	r0, 80072f8 <_dtoa_r+0xe0>
 80072e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072e2:	2301      	movs	r3, #1
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 856b 	beq.w	8007dc4 <_dtoa_r+0xbac>
 80072ee:	4883      	ldr	r0, [pc, #524]	; (80074fc <_dtoa_r+0x2e4>)
 80072f0:	6018      	str	r0, [r3, #0]
 80072f2:	1e43      	subs	r3, r0, #1
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	e7df      	b.n	80072b8 <_dtoa_r+0xa0>
 80072f8:	ec4b ab10 	vmov	d0, sl, fp
 80072fc:	aa10      	add	r2, sp, #64	; 0x40
 80072fe:	a911      	add	r1, sp, #68	; 0x44
 8007300:	4620      	mov	r0, r4
 8007302:	f001 fad9 	bl	80088b8 <__d2b>
 8007306:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800730a:	ee08 0a10 	vmov	s16, r0
 800730e:	2d00      	cmp	r5, #0
 8007310:	f000 8084 	beq.w	800741c <_dtoa_r+0x204>
 8007314:	ee19 3a90 	vmov	r3, s19
 8007318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800731c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007320:	4656      	mov	r6, sl
 8007322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800732a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800732e:	4b74      	ldr	r3, [pc, #464]	; (8007500 <_dtoa_r+0x2e8>)
 8007330:	2200      	movs	r2, #0
 8007332:	4630      	mov	r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	f7f8 ffbf 	bl	80002b8 <__aeabi_dsub>
 800733a:	a365      	add	r3, pc, #404	; (adr r3, 80074d0 <_dtoa_r+0x2b8>)
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	f7f9 f972 	bl	8000628 <__aeabi_dmul>
 8007344:	a364      	add	r3, pc, #400	; (adr r3, 80074d8 <_dtoa_r+0x2c0>)
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	f7f8 ffb7 	bl	80002bc <__adddf3>
 800734e:	4606      	mov	r6, r0
 8007350:	4628      	mov	r0, r5
 8007352:	460f      	mov	r7, r1
 8007354:	f7f9 f8fe 	bl	8000554 <__aeabi_i2d>
 8007358:	a361      	add	r3, pc, #388	; (adr r3, 80074e0 <_dtoa_r+0x2c8>)
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	f7f9 f963 	bl	8000628 <__aeabi_dmul>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4630      	mov	r0, r6
 8007368:	4639      	mov	r1, r7
 800736a:	f7f8 ffa7 	bl	80002bc <__adddf3>
 800736e:	4606      	mov	r6, r0
 8007370:	460f      	mov	r7, r1
 8007372:	f7f9 fc09 	bl	8000b88 <__aeabi_d2iz>
 8007376:	2200      	movs	r2, #0
 8007378:	9000      	str	r0, [sp, #0]
 800737a:	2300      	movs	r3, #0
 800737c:	4630      	mov	r0, r6
 800737e:	4639      	mov	r1, r7
 8007380:	f7f9 fbc4 	bl	8000b0c <__aeabi_dcmplt>
 8007384:	b150      	cbz	r0, 800739c <_dtoa_r+0x184>
 8007386:	9800      	ldr	r0, [sp, #0]
 8007388:	f7f9 f8e4 	bl	8000554 <__aeabi_i2d>
 800738c:	4632      	mov	r2, r6
 800738e:	463b      	mov	r3, r7
 8007390:	f7f9 fbb2 	bl	8000af8 <__aeabi_dcmpeq>
 8007394:	b910      	cbnz	r0, 800739c <_dtoa_r+0x184>
 8007396:	9b00      	ldr	r3, [sp, #0]
 8007398:	3b01      	subs	r3, #1
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	9b00      	ldr	r3, [sp, #0]
 800739e:	2b16      	cmp	r3, #22
 80073a0:	d85a      	bhi.n	8007458 <_dtoa_r+0x240>
 80073a2:	9a00      	ldr	r2, [sp, #0]
 80073a4:	4b57      	ldr	r3, [pc, #348]	; (8007504 <_dtoa_r+0x2ec>)
 80073a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	ec51 0b19 	vmov	r0, r1, d9
 80073b2:	f7f9 fbab 	bl	8000b0c <__aeabi_dcmplt>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d050      	beq.n	800745c <_dtoa_r+0x244>
 80073ba:	9b00      	ldr	r3, [sp, #0]
 80073bc:	3b01      	subs	r3, #1
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	2300      	movs	r3, #0
 80073c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80073c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073c6:	1b5d      	subs	r5, r3, r5
 80073c8:	1e6b      	subs	r3, r5, #1
 80073ca:	9305      	str	r3, [sp, #20]
 80073cc:	bf45      	ittet	mi
 80073ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80073d2:	9304      	strmi	r3, [sp, #16]
 80073d4:	2300      	movpl	r3, #0
 80073d6:	2300      	movmi	r3, #0
 80073d8:	bf4c      	ite	mi
 80073da:	9305      	strmi	r3, [sp, #20]
 80073dc:	9304      	strpl	r3, [sp, #16]
 80073de:	9b00      	ldr	r3, [sp, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	db3d      	blt.n	8007460 <_dtoa_r+0x248>
 80073e4:	9b05      	ldr	r3, [sp, #20]
 80073e6:	9a00      	ldr	r2, [sp, #0]
 80073e8:	920a      	str	r2, [sp, #40]	; 0x28
 80073ea:	4413      	add	r3, r2
 80073ec:	9305      	str	r3, [sp, #20]
 80073ee:	2300      	movs	r3, #0
 80073f0:	9307      	str	r3, [sp, #28]
 80073f2:	9b06      	ldr	r3, [sp, #24]
 80073f4:	2b09      	cmp	r3, #9
 80073f6:	f200 8089 	bhi.w	800750c <_dtoa_r+0x2f4>
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	bfc4      	itt	gt
 80073fe:	3b04      	subgt	r3, #4
 8007400:	9306      	strgt	r3, [sp, #24]
 8007402:	9b06      	ldr	r3, [sp, #24]
 8007404:	f1a3 0302 	sub.w	r3, r3, #2
 8007408:	bfcc      	ite	gt
 800740a:	2500      	movgt	r5, #0
 800740c:	2501      	movle	r5, #1
 800740e:	2b03      	cmp	r3, #3
 8007410:	f200 8087 	bhi.w	8007522 <_dtoa_r+0x30a>
 8007414:	e8df f003 	tbb	[pc, r3]
 8007418:	59383a2d 	.word	0x59383a2d
 800741c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007420:	441d      	add	r5, r3
 8007422:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007426:	2b20      	cmp	r3, #32
 8007428:	bfc1      	itttt	gt
 800742a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800742e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007432:	fa0b f303 	lslgt.w	r3, fp, r3
 8007436:	fa26 f000 	lsrgt.w	r0, r6, r0
 800743a:	bfda      	itte	le
 800743c:	f1c3 0320 	rsble	r3, r3, #32
 8007440:	fa06 f003 	lslle.w	r0, r6, r3
 8007444:	4318      	orrgt	r0, r3
 8007446:	f7f9 f875 	bl	8000534 <__aeabi_ui2d>
 800744a:	2301      	movs	r3, #1
 800744c:	4606      	mov	r6, r0
 800744e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007452:	3d01      	subs	r5, #1
 8007454:	930e      	str	r3, [sp, #56]	; 0x38
 8007456:	e76a      	b.n	800732e <_dtoa_r+0x116>
 8007458:	2301      	movs	r3, #1
 800745a:	e7b2      	b.n	80073c2 <_dtoa_r+0x1aa>
 800745c:	900b      	str	r0, [sp, #44]	; 0x2c
 800745e:	e7b1      	b.n	80073c4 <_dtoa_r+0x1ac>
 8007460:	9b04      	ldr	r3, [sp, #16]
 8007462:	9a00      	ldr	r2, [sp, #0]
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	9304      	str	r3, [sp, #16]
 8007468:	4253      	negs	r3, r2
 800746a:	9307      	str	r3, [sp, #28]
 800746c:	2300      	movs	r3, #0
 800746e:	930a      	str	r3, [sp, #40]	; 0x28
 8007470:	e7bf      	b.n	80073f2 <_dtoa_r+0x1da>
 8007472:	2300      	movs	r3, #0
 8007474:	9308      	str	r3, [sp, #32]
 8007476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	dc55      	bgt.n	8007528 <_dtoa_r+0x310>
 800747c:	2301      	movs	r3, #1
 800747e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007482:	461a      	mov	r2, r3
 8007484:	9209      	str	r2, [sp, #36]	; 0x24
 8007486:	e00c      	b.n	80074a2 <_dtoa_r+0x28a>
 8007488:	2301      	movs	r3, #1
 800748a:	e7f3      	b.n	8007474 <_dtoa_r+0x25c>
 800748c:	2300      	movs	r3, #0
 800748e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007490:	9308      	str	r3, [sp, #32]
 8007492:	9b00      	ldr	r3, [sp, #0]
 8007494:	4413      	add	r3, r2
 8007496:	9302      	str	r3, [sp, #8]
 8007498:	3301      	adds	r3, #1
 800749a:	2b01      	cmp	r3, #1
 800749c:	9303      	str	r3, [sp, #12]
 800749e:	bfb8      	it	lt
 80074a0:	2301      	movlt	r3, #1
 80074a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80074a4:	2200      	movs	r2, #0
 80074a6:	6042      	str	r2, [r0, #4]
 80074a8:	2204      	movs	r2, #4
 80074aa:	f102 0614 	add.w	r6, r2, #20
 80074ae:	429e      	cmp	r6, r3
 80074b0:	6841      	ldr	r1, [r0, #4]
 80074b2:	d93d      	bls.n	8007530 <_dtoa_r+0x318>
 80074b4:	4620      	mov	r0, r4
 80074b6:	f000 fed7 	bl	8008268 <_Balloc>
 80074ba:	9001      	str	r0, [sp, #4]
 80074bc:	2800      	cmp	r0, #0
 80074be:	d13b      	bne.n	8007538 <_dtoa_r+0x320>
 80074c0:	4b11      	ldr	r3, [pc, #68]	; (8007508 <_dtoa_r+0x2f0>)
 80074c2:	4602      	mov	r2, r0
 80074c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074c8:	e6c0      	b.n	800724c <_dtoa_r+0x34>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e7df      	b.n	800748e <_dtoa_r+0x276>
 80074ce:	bf00      	nop
 80074d0:	636f4361 	.word	0x636f4361
 80074d4:	3fd287a7 	.word	0x3fd287a7
 80074d8:	8b60c8b3 	.word	0x8b60c8b3
 80074dc:	3fc68a28 	.word	0x3fc68a28
 80074e0:	509f79fb 	.word	0x509f79fb
 80074e4:	3fd34413 	.word	0x3fd34413
 80074e8:	0800a77d 	.word	0x0800a77d
 80074ec:	0800a794 	.word	0x0800a794
 80074f0:	7ff00000 	.word	0x7ff00000
 80074f4:	0800a779 	.word	0x0800a779
 80074f8:	0800a770 	.word	0x0800a770
 80074fc:	0800a74d 	.word	0x0800a74d
 8007500:	3ff80000 	.word	0x3ff80000
 8007504:	0800a8e8 	.word	0x0800a8e8
 8007508:	0800a7ef 	.word	0x0800a7ef
 800750c:	2501      	movs	r5, #1
 800750e:	2300      	movs	r3, #0
 8007510:	9306      	str	r3, [sp, #24]
 8007512:	9508      	str	r5, [sp, #32]
 8007514:	f04f 33ff 	mov.w	r3, #4294967295
 8007518:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800751c:	2200      	movs	r2, #0
 800751e:	2312      	movs	r3, #18
 8007520:	e7b0      	b.n	8007484 <_dtoa_r+0x26c>
 8007522:	2301      	movs	r3, #1
 8007524:	9308      	str	r3, [sp, #32]
 8007526:	e7f5      	b.n	8007514 <_dtoa_r+0x2fc>
 8007528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800752e:	e7b8      	b.n	80074a2 <_dtoa_r+0x28a>
 8007530:	3101      	adds	r1, #1
 8007532:	6041      	str	r1, [r0, #4]
 8007534:	0052      	lsls	r2, r2, #1
 8007536:	e7b8      	b.n	80074aa <_dtoa_r+0x292>
 8007538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800753a:	9a01      	ldr	r2, [sp, #4]
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	9b03      	ldr	r3, [sp, #12]
 8007540:	2b0e      	cmp	r3, #14
 8007542:	f200 809d 	bhi.w	8007680 <_dtoa_r+0x468>
 8007546:	2d00      	cmp	r5, #0
 8007548:	f000 809a 	beq.w	8007680 <_dtoa_r+0x468>
 800754c:	9b00      	ldr	r3, [sp, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	dd32      	ble.n	80075b8 <_dtoa_r+0x3a0>
 8007552:	4ab7      	ldr	r2, [pc, #732]	; (8007830 <_dtoa_r+0x618>)
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800755c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007560:	9b00      	ldr	r3, [sp, #0]
 8007562:	05d8      	lsls	r0, r3, #23
 8007564:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007568:	d516      	bpl.n	8007598 <_dtoa_r+0x380>
 800756a:	4bb2      	ldr	r3, [pc, #712]	; (8007834 <_dtoa_r+0x61c>)
 800756c:	ec51 0b19 	vmov	r0, r1, d9
 8007570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007574:	f7f9 f982 	bl	800087c <__aeabi_ddiv>
 8007578:	f007 070f 	and.w	r7, r7, #15
 800757c:	4682      	mov	sl, r0
 800757e:	468b      	mov	fp, r1
 8007580:	2503      	movs	r5, #3
 8007582:	4eac      	ldr	r6, [pc, #688]	; (8007834 <_dtoa_r+0x61c>)
 8007584:	b957      	cbnz	r7, 800759c <_dtoa_r+0x384>
 8007586:	4642      	mov	r2, r8
 8007588:	464b      	mov	r3, r9
 800758a:	4650      	mov	r0, sl
 800758c:	4659      	mov	r1, fp
 800758e:	f7f9 f975 	bl	800087c <__aeabi_ddiv>
 8007592:	4682      	mov	sl, r0
 8007594:	468b      	mov	fp, r1
 8007596:	e028      	b.n	80075ea <_dtoa_r+0x3d2>
 8007598:	2502      	movs	r5, #2
 800759a:	e7f2      	b.n	8007582 <_dtoa_r+0x36a>
 800759c:	07f9      	lsls	r1, r7, #31
 800759e:	d508      	bpl.n	80075b2 <_dtoa_r+0x39a>
 80075a0:	4640      	mov	r0, r8
 80075a2:	4649      	mov	r1, r9
 80075a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075a8:	f7f9 f83e 	bl	8000628 <__aeabi_dmul>
 80075ac:	3501      	adds	r5, #1
 80075ae:	4680      	mov	r8, r0
 80075b0:	4689      	mov	r9, r1
 80075b2:	107f      	asrs	r7, r7, #1
 80075b4:	3608      	adds	r6, #8
 80075b6:	e7e5      	b.n	8007584 <_dtoa_r+0x36c>
 80075b8:	f000 809b 	beq.w	80076f2 <_dtoa_r+0x4da>
 80075bc:	9b00      	ldr	r3, [sp, #0]
 80075be:	4f9d      	ldr	r7, [pc, #628]	; (8007834 <_dtoa_r+0x61c>)
 80075c0:	425e      	negs	r6, r3
 80075c2:	4b9b      	ldr	r3, [pc, #620]	; (8007830 <_dtoa_r+0x618>)
 80075c4:	f006 020f 	and.w	r2, r6, #15
 80075c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d0:	ec51 0b19 	vmov	r0, r1, d9
 80075d4:	f7f9 f828 	bl	8000628 <__aeabi_dmul>
 80075d8:	1136      	asrs	r6, r6, #4
 80075da:	4682      	mov	sl, r0
 80075dc:	468b      	mov	fp, r1
 80075de:	2300      	movs	r3, #0
 80075e0:	2502      	movs	r5, #2
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	d17a      	bne.n	80076dc <_dtoa_r+0x4c4>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1d3      	bne.n	8007592 <_dtoa_r+0x37a>
 80075ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 8082 	beq.w	80076f6 <_dtoa_r+0x4de>
 80075f2:	4b91      	ldr	r3, [pc, #580]	; (8007838 <_dtoa_r+0x620>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	4650      	mov	r0, sl
 80075f8:	4659      	mov	r1, fp
 80075fa:	f7f9 fa87 	bl	8000b0c <__aeabi_dcmplt>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d079      	beq.n	80076f6 <_dtoa_r+0x4de>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d076      	beq.n	80076f6 <_dtoa_r+0x4de>
 8007608:	9b02      	ldr	r3, [sp, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	dd36      	ble.n	800767c <_dtoa_r+0x464>
 800760e:	9b00      	ldr	r3, [sp, #0]
 8007610:	4650      	mov	r0, sl
 8007612:	4659      	mov	r1, fp
 8007614:	1e5f      	subs	r7, r3, #1
 8007616:	2200      	movs	r2, #0
 8007618:	4b88      	ldr	r3, [pc, #544]	; (800783c <_dtoa_r+0x624>)
 800761a:	f7f9 f805 	bl	8000628 <__aeabi_dmul>
 800761e:	9e02      	ldr	r6, [sp, #8]
 8007620:	4682      	mov	sl, r0
 8007622:	468b      	mov	fp, r1
 8007624:	3501      	adds	r5, #1
 8007626:	4628      	mov	r0, r5
 8007628:	f7f8 ff94 	bl	8000554 <__aeabi_i2d>
 800762c:	4652      	mov	r2, sl
 800762e:	465b      	mov	r3, fp
 8007630:	f7f8 fffa 	bl	8000628 <__aeabi_dmul>
 8007634:	4b82      	ldr	r3, [pc, #520]	; (8007840 <_dtoa_r+0x628>)
 8007636:	2200      	movs	r2, #0
 8007638:	f7f8 fe40 	bl	80002bc <__adddf3>
 800763c:	46d0      	mov	r8, sl
 800763e:	46d9      	mov	r9, fp
 8007640:	4682      	mov	sl, r0
 8007642:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007646:	2e00      	cmp	r6, #0
 8007648:	d158      	bne.n	80076fc <_dtoa_r+0x4e4>
 800764a:	4b7e      	ldr	r3, [pc, #504]	; (8007844 <_dtoa_r+0x62c>)
 800764c:	2200      	movs	r2, #0
 800764e:	4640      	mov	r0, r8
 8007650:	4649      	mov	r1, r9
 8007652:	f7f8 fe31 	bl	80002b8 <__aeabi_dsub>
 8007656:	4652      	mov	r2, sl
 8007658:	465b      	mov	r3, fp
 800765a:	4680      	mov	r8, r0
 800765c:	4689      	mov	r9, r1
 800765e:	f7f9 fa73 	bl	8000b48 <__aeabi_dcmpgt>
 8007662:	2800      	cmp	r0, #0
 8007664:	f040 8295 	bne.w	8007b92 <_dtoa_r+0x97a>
 8007668:	4652      	mov	r2, sl
 800766a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800766e:	4640      	mov	r0, r8
 8007670:	4649      	mov	r1, r9
 8007672:	f7f9 fa4b 	bl	8000b0c <__aeabi_dcmplt>
 8007676:	2800      	cmp	r0, #0
 8007678:	f040 8289 	bne.w	8007b8e <_dtoa_r+0x976>
 800767c:	ec5b ab19 	vmov	sl, fp, d9
 8007680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007682:	2b00      	cmp	r3, #0
 8007684:	f2c0 8148 	blt.w	8007918 <_dtoa_r+0x700>
 8007688:	9a00      	ldr	r2, [sp, #0]
 800768a:	2a0e      	cmp	r2, #14
 800768c:	f300 8144 	bgt.w	8007918 <_dtoa_r+0x700>
 8007690:	4b67      	ldr	r3, [pc, #412]	; (8007830 <_dtoa_r+0x618>)
 8007692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800769a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	f280 80d5 	bge.w	800784c <_dtoa_r+0x634>
 80076a2:	9b03      	ldr	r3, [sp, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f300 80d1 	bgt.w	800784c <_dtoa_r+0x634>
 80076aa:	f040 826f 	bne.w	8007b8c <_dtoa_r+0x974>
 80076ae:	4b65      	ldr	r3, [pc, #404]	; (8007844 <_dtoa_r+0x62c>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	4640      	mov	r0, r8
 80076b4:	4649      	mov	r1, r9
 80076b6:	f7f8 ffb7 	bl	8000628 <__aeabi_dmul>
 80076ba:	4652      	mov	r2, sl
 80076bc:	465b      	mov	r3, fp
 80076be:	f7f9 fa39 	bl	8000b34 <__aeabi_dcmpge>
 80076c2:	9e03      	ldr	r6, [sp, #12]
 80076c4:	4637      	mov	r7, r6
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f040 8245 	bne.w	8007b56 <_dtoa_r+0x93e>
 80076cc:	9d01      	ldr	r5, [sp, #4]
 80076ce:	2331      	movs	r3, #49	; 0x31
 80076d0:	f805 3b01 	strb.w	r3, [r5], #1
 80076d4:	9b00      	ldr	r3, [sp, #0]
 80076d6:	3301      	adds	r3, #1
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	e240      	b.n	8007b5e <_dtoa_r+0x946>
 80076dc:	07f2      	lsls	r2, r6, #31
 80076de:	d505      	bpl.n	80076ec <_dtoa_r+0x4d4>
 80076e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e4:	f7f8 ffa0 	bl	8000628 <__aeabi_dmul>
 80076e8:	3501      	adds	r5, #1
 80076ea:	2301      	movs	r3, #1
 80076ec:	1076      	asrs	r6, r6, #1
 80076ee:	3708      	adds	r7, #8
 80076f0:	e777      	b.n	80075e2 <_dtoa_r+0x3ca>
 80076f2:	2502      	movs	r5, #2
 80076f4:	e779      	b.n	80075ea <_dtoa_r+0x3d2>
 80076f6:	9f00      	ldr	r7, [sp, #0]
 80076f8:	9e03      	ldr	r6, [sp, #12]
 80076fa:	e794      	b.n	8007626 <_dtoa_r+0x40e>
 80076fc:	9901      	ldr	r1, [sp, #4]
 80076fe:	4b4c      	ldr	r3, [pc, #304]	; (8007830 <_dtoa_r+0x618>)
 8007700:	4431      	add	r1, r6
 8007702:	910d      	str	r1, [sp, #52]	; 0x34
 8007704:	9908      	ldr	r1, [sp, #32]
 8007706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800770a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800770e:	2900      	cmp	r1, #0
 8007710:	d043      	beq.n	800779a <_dtoa_r+0x582>
 8007712:	494d      	ldr	r1, [pc, #308]	; (8007848 <_dtoa_r+0x630>)
 8007714:	2000      	movs	r0, #0
 8007716:	f7f9 f8b1 	bl	800087c <__aeabi_ddiv>
 800771a:	4652      	mov	r2, sl
 800771c:	465b      	mov	r3, fp
 800771e:	f7f8 fdcb 	bl	80002b8 <__aeabi_dsub>
 8007722:	9d01      	ldr	r5, [sp, #4]
 8007724:	4682      	mov	sl, r0
 8007726:	468b      	mov	fp, r1
 8007728:	4649      	mov	r1, r9
 800772a:	4640      	mov	r0, r8
 800772c:	f7f9 fa2c 	bl	8000b88 <__aeabi_d2iz>
 8007730:	4606      	mov	r6, r0
 8007732:	f7f8 ff0f 	bl	8000554 <__aeabi_i2d>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	f7f8 fdbb 	bl	80002b8 <__aeabi_dsub>
 8007742:	3630      	adds	r6, #48	; 0x30
 8007744:	f805 6b01 	strb.w	r6, [r5], #1
 8007748:	4652      	mov	r2, sl
 800774a:	465b      	mov	r3, fp
 800774c:	4680      	mov	r8, r0
 800774e:	4689      	mov	r9, r1
 8007750:	f7f9 f9dc 	bl	8000b0c <__aeabi_dcmplt>
 8007754:	2800      	cmp	r0, #0
 8007756:	d163      	bne.n	8007820 <_dtoa_r+0x608>
 8007758:	4642      	mov	r2, r8
 800775a:	464b      	mov	r3, r9
 800775c:	4936      	ldr	r1, [pc, #216]	; (8007838 <_dtoa_r+0x620>)
 800775e:	2000      	movs	r0, #0
 8007760:	f7f8 fdaa 	bl	80002b8 <__aeabi_dsub>
 8007764:	4652      	mov	r2, sl
 8007766:	465b      	mov	r3, fp
 8007768:	f7f9 f9d0 	bl	8000b0c <__aeabi_dcmplt>
 800776c:	2800      	cmp	r0, #0
 800776e:	f040 80b5 	bne.w	80078dc <_dtoa_r+0x6c4>
 8007772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007774:	429d      	cmp	r5, r3
 8007776:	d081      	beq.n	800767c <_dtoa_r+0x464>
 8007778:	4b30      	ldr	r3, [pc, #192]	; (800783c <_dtoa_r+0x624>)
 800777a:	2200      	movs	r2, #0
 800777c:	4650      	mov	r0, sl
 800777e:	4659      	mov	r1, fp
 8007780:	f7f8 ff52 	bl	8000628 <__aeabi_dmul>
 8007784:	4b2d      	ldr	r3, [pc, #180]	; (800783c <_dtoa_r+0x624>)
 8007786:	4682      	mov	sl, r0
 8007788:	468b      	mov	fp, r1
 800778a:	4640      	mov	r0, r8
 800778c:	4649      	mov	r1, r9
 800778e:	2200      	movs	r2, #0
 8007790:	f7f8 ff4a 	bl	8000628 <__aeabi_dmul>
 8007794:	4680      	mov	r8, r0
 8007796:	4689      	mov	r9, r1
 8007798:	e7c6      	b.n	8007728 <_dtoa_r+0x510>
 800779a:	4650      	mov	r0, sl
 800779c:	4659      	mov	r1, fp
 800779e:	f7f8 ff43 	bl	8000628 <__aeabi_dmul>
 80077a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077a4:	9d01      	ldr	r5, [sp, #4]
 80077a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80077a8:	4682      	mov	sl, r0
 80077aa:	468b      	mov	fp, r1
 80077ac:	4649      	mov	r1, r9
 80077ae:	4640      	mov	r0, r8
 80077b0:	f7f9 f9ea 	bl	8000b88 <__aeabi_d2iz>
 80077b4:	4606      	mov	r6, r0
 80077b6:	f7f8 fecd 	bl	8000554 <__aeabi_i2d>
 80077ba:	3630      	adds	r6, #48	; 0x30
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4640      	mov	r0, r8
 80077c2:	4649      	mov	r1, r9
 80077c4:	f7f8 fd78 	bl	80002b8 <__aeabi_dsub>
 80077c8:	f805 6b01 	strb.w	r6, [r5], #1
 80077cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ce:	429d      	cmp	r5, r3
 80077d0:	4680      	mov	r8, r0
 80077d2:	4689      	mov	r9, r1
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	d124      	bne.n	8007824 <_dtoa_r+0x60c>
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <_dtoa_r+0x630>)
 80077dc:	4650      	mov	r0, sl
 80077de:	4659      	mov	r1, fp
 80077e0:	f7f8 fd6c 	bl	80002bc <__adddf3>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4640      	mov	r0, r8
 80077ea:	4649      	mov	r1, r9
 80077ec:	f7f9 f9ac 	bl	8000b48 <__aeabi_dcmpgt>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d173      	bne.n	80078dc <_dtoa_r+0x6c4>
 80077f4:	4652      	mov	r2, sl
 80077f6:	465b      	mov	r3, fp
 80077f8:	4913      	ldr	r1, [pc, #76]	; (8007848 <_dtoa_r+0x630>)
 80077fa:	2000      	movs	r0, #0
 80077fc:	f7f8 fd5c 	bl	80002b8 <__aeabi_dsub>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4640      	mov	r0, r8
 8007806:	4649      	mov	r1, r9
 8007808:	f7f9 f980 	bl	8000b0c <__aeabi_dcmplt>
 800780c:	2800      	cmp	r0, #0
 800780e:	f43f af35 	beq.w	800767c <_dtoa_r+0x464>
 8007812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007814:	1e6b      	subs	r3, r5, #1
 8007816:	930f      	str	r3, [sp, #60]	; 0x3c
 8007818:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800781c:	2b30      	cmp	r3, #48	; 0x30
 800781e:	d0f8      	beq.n	8007812 <_dtoa_r+0x5fa>
 8007820:	9700      	str	r7, [sp, #0]
 8007822:	e049      	b.n	80078b8 <_dtoa_r+0x6a0>
 8007824:	4b05      	ldr	r3, [pc, #20]	; (800783c <_dtoa_r+0x624>)
 8007826:	f7f8 feff 	bl	8000628 <__aeabi_dmul>
 800782a:	4680      	mov	r8, r0
 800782c:	4689      	mov	r9, r1
 800782e:	e7bd      	b.n	80077ac <_dtoa_r+0x594>
 8007830:	0800a8e8 	.word	0x0800a8e8
 8007834:	0800a8c0 	.word	0x0800a8c0
 8007838:	3ff00000 	.word	0x3ff00000
 800783c:	40240000 	.word	0x40240000
 8007840:	401c0000 	.word	0x401c0000
 8007844:	40140000 	.word	0x40140000
 8007848:	3fe00000 	.word	0x3fe00000
 800784c:	9d01      	ldr	r5, [sp, #4]
 800784e:	4656      	mov	r6, sl
 8007850:	465f      	mov	r7, fp
 8007852:	4642      	mov	r2, r8
 8007854:	464b      	mov	r3, r9
 8007856:	4630      	mov	r0, r6
 8007858:	4639      	mov	r1, r7
 800785a:	f7f9 f80f 	bl	800087c <__aeabi_ddiv>
 800785e:	f7f9 f993 	bl	8000b88 <__aeabi_d2iz>
 8007862:	4682      	mov	sl, r0
 8007864:	f7f8 fe76 	bl	8000554 <__aeabi_i2d>
 8007868:	4642      	mov	r2, r8
 800786a:	464b      	mov	r3, r9
 800786c:	f7f8 fedc 	bl	8000628 <__aeabi_dmul>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4630      	mov	r0, r6
 8007876:	4639      	mov	r1, r7
 8007878:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800787c:	f7f8 fd1c 	bl	80002b8 <__aeabi_dsub>
 8007880:	f805 6b01 	strb.w	r6, [r5], #1
 8007884:	9e01      	ldr	r6, [sp, #4]
 8007886:	9f03      	ldr	r7, [sp, #12]
 8007888:	1bae      	subs	r6, r5, r6
 800788a:	42b7      	cmp	r7, r6
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	d135      	bne.n	80078fe <_dtoa_r+0x6e6>
 8007892:	f7f8 fd13 	bl	80002bc <__adddf3>
 8007896:	4642      	mov	r2, r8
 8007898:	464b      	mov	r3, r9
 800789a:	4606      	mov	r6, r0
 800789c:	460f      	mov	r7, r1
 800789e:	f7f9 f953 	bl	8000b48 <__aeabi_dcmpgt>
 80078a2:	b9d0      	cbnz	r0, 80078da <_dtoa_r+0x6c2>
 80078a4:	4642      	mov	r2, r8
 80078a6:	464b      	mov	r3, r9
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f9 f924 	bl	8000af8 <__aeabi_dcmpeq>
 80078b0:	b110      	cbz	r0, 80078b8 <_dtoa_r+0x6a0>
 80078b2:	f01a 0f01 	tst.w	sl, #1
 80078b6:	d110      	bne.n	80078da <_dtoa_r+0x6c2>
 80078b8:	4620      	mov	r0, r4
 80078ba:	ee18 1a10 	vmov	r1, s16
 80078be:	f000 fd13 	bl	80082e8 <_Bfree>
 80078c2:	2300      	movs	r3, #0
 80078c4:	9800      	ldr	r0, [sp, #0]
 80078c6:	702b      	strb	r3, [r5, #0]
 80078c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078ca:	3001      	adds	r0, #1
 80078cc:	6018      	str	r0, [r3, #0]
 80078ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f43f acf1 	beq.w	80072b8 <_dtoa_r+0xa0>
 80078d6:	601d      	str	r5, [r3, #0]
 80078d8:	e4ee      	b.n	80072b8 <_dtoa_r+0xa0>
 80078da:	9f00      	ldr	r7, [sp, #0]
 80078dc:	462b      	mov	r3, r5
 80078de:	461d      	mov	r5, r3
 80078e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078e4:	2a39      	cmp	r2, #57	; 0x39
 80078e6:	d106      	bne.n	80078f6 <_dtoa_r+0x6de>
 80078e8:	9a01      	ldr	r2, [sp, #4]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d1f7      	bne.n	80078de <_dtoa_r+0x6c6>
 80078ee:	9901      	ldr	r1, [sp, #4]
 80078f0:	2230      	movs	r2, #48	; 0x30
 80078f2:	3701      	adds	r7, #1
 80078f4:	700a      	strb	r2, [r1, #0]
 80078f6:	781a      	ldrb	r2, [r3, #0]
 80078f8:	3201      	adds	r2, #1
 80078fa:	701a      	strb	r2, [r3, #0]
 80078fc:	e790      	b.n	8007820 <_dtoa_r+0x608>
 80078fe:	4ba6      	ldr	r3, [pc, #664]	; (8007b98 <_dtoa_r+0x980>)
 8007900:	2200      	movs	r2, #0
 8007902:	f7f8 fe91 	bl	8000628 <__aeabi_dmul>
 8007906:	2200      	movs	r2, #0
 8007908:	2300      	movs	r3, #0
 800790a:	4606      	mov	r6, r0
 800790c:	460f      	mov	r7, r1
 800790e:	f7f9 f8f3 	bl	8000af8 <__aeabi_dcmpeq>
 8007912:	2800      	cmp	r0, #0
 8007914:	d09d      	beq.n	8007852 <_dtoa_r+0x63a>
 8007916:	e7cf      	b.n	80078b8 <_dtoa_r+0x6a0>
 8007918:	9a08      	ldr	r2, [sp, #32]
 800791a:	2a00      	cmp	r2, #0
 800791c:	f000 80d7 	beq.w	8007ace <_dtoa_r+0x8b6>
 8007920:	9a06      	ldr	r2, [sp, #24]
 8007922:	2a01      	cmp	r2, #1
 8007924:	f300 80ba 	bgt.w	8007a9c <_dtoa_r+0x884>
 8007928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800792a:	2a00      	cmp	r2, #0
 800792c:	f000 80b2 	beq.w	8007a94 <_dtoa_r+0x87c>
 8007930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007934:	9e07      	ldr	r6, [sp, #28]
 8007936:	9d04      	ldr	r5, [sp, #16]
 8007938:	9a04      	ldr	r2, [sp, #16]
 800793a:	441a      	add	r2, r3
 800793c:	9204      	str	r2, [sp, #16]
 800793e:	9a05      	ldr	r2, [sp, #20]
 8007940:	2101      	movs	r1, #1
 8007942:	441a      	add	r2, r3
 8007944:	4620      	mov	r0, r4
 8007946:	9205      	str	r2, [sp, #20]
 8007948:	f000 fd86 	bl	8008458 <__i2b>
 800794c:	4607      	mov	r7, r0
 800794e:	2d00      	cmp	r5, #0
 8007950:	dd0c      	ble.n	800796c <_dtoa_r+0x754>
 8007952:	9b05      	ldr	r3, [sp, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	dd09      	ble.n	800796c <_dtoa_r+0x754>
 8007958:	42ab      	cmp	r3, r5
 800795a:	9a04      	ldr	r2, [sp, #16]
 800795c:	bfa8      	it	ge
 800795e:	462b      	movge	r3, r5
 8007960:	1ad2      	subs	r2, r2, r3
 8007962:	9204      	str	r2, [sp, #16]
 8007964:	9a05      	ldr	r2, [sp, #20]
 8007966:	1aed      	subs	r5, r5, r3
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	9305      	str	r3, [sp, #20]
 800796c:	9b07      	ldr	r3, [sp, #28]
 800796e:	b31b      	cbz	r3, 80079b8 <_dtoa_r+0x7a0>
 8007970:	9b08      	ldr	r3, [sp, #32]
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 80af 	beq.w	8007ad6 <_dtoa_r+0x8be>
 8007978:	2e00      	cmp	r6, #0
 800797a:	dd13      	ble.n	80079a4 <_dtoa_r+0x78c>
 800797c:	4639      	mov	r1, r7
 800797e:	4632      	mov	r2, r6
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fe29 	bl	80085d8 <__pow5mult>
 8007986:	ee18 2a10 	vmov	r2, s16
 800798a:	4601      	mov	r1, r0
 800798c:	4607      	mov	r7, r0
 800798e:	4620      	mov	r0, r4
 8007990:	f000 fd78 	bl	8008484 <__multiply>
 8007994:	ee18 1a10 	vmov	r1, s16
 8007998:	4680      	mov	r8, r0
 800799a:	4620      	mov	r0, r4
 800799c:	f000 fca4 	bl	80082e8 <_Bfree>
 80079a0:	ee08 8a10 	vmov	s16, r8
 80079a4:	9b07      	ldr	r3, [sp, #28]
 80079a6:	1b9a      	subs	r2, r3, r6
 80079a8:	d006      	beq.n	80079b8 <_dtoa_r+0x7a0>
 80079aa:	ee18 1a10 	vmov	r1, s16
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 fe12 	bl	80085d8 <__pow5mult>
 80079b4:	ee08 0a10 	vmov	s16, r0
 80079b8:	2101      	movs	r1, #1
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 fd4c 	bl	8008458 <__i2b>
 80079c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	4606      	mov	r6, r0
 80079c6:	f340 8088 	ble.w	8007ada <_dtoa_r+0x8c2>
 80079ca:	461a      	mov	r2, r3
 80079cc:	4601      	mov	r1, r0
 80079ce:	4620      	mov	r0, r4
 80079d0:	f000 fe02 	bl	80085d8 <__pow5mult>
 80079d4:	9b06      	ldr	r3, [sp, #24]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	4606      	mov	r6, r0
 80079da:	f340 8081 	ble.w	8007ae0 <_dtoa_r+0x8c8>
 80079de:	f04f 0800 	mov.w	r8, #0
 80079e2:	6933      	ldr	r3, [r6, #16]
 80079e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079e8:	6918      	ldr	r0, [r3, #16]
 80079ea:	f000 fce5 	bl	80083b8 <__hi0bits>
 80079ee:	f1c0 0020 	rsb	r0, r0, #32
 80079f2:	9b05      	ldr	r3, [sp, #20]
 80079f4:	4418      	add	r0, r3
 80079f6:	f010 001f 	ands.w	r0, r0, #31
 80079fa:	f000 8092 	beq.w	8007b22 <_dtoa_r+0x90a>
 80079fe:	f1c0 0320 	rsb	r3, r0, #32
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	f340 808a 	ble.w	8007b1c <_dtoa_r+0x904>
 8007a08:	f1c0 001c 	rsb	r0, r0, #28
 8007a0c:	9b04      	ldr	r3, [sp, #16]
 8007a0e:	4403      	add	r3, r0
 8007a10:	9304      	str	r3, [sp, #16]
 8007a12:	9b05      	ldr	r3, [sp, #20]
 8007a14:	4403      	add	r3, r0
 8007a16:	4405      	add	r5, r0
 8007a18:	9305      	str	r3, [sp, #20]
 8007a1a:	9b04      	ldr	r3, [sp, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	dd07      	ble.n	8007a30 <_dtoa_r+0x818>
 8007a20:	ee18 1a10 	vmov	r1, s16
 8007a24:	461a      	mov	r2, r3
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 fe30 	bl	800868c <__lshift>
 8007a2c:	ee08 0a10 	vmov	s16, r0
 8007a30:	9b05      	ldr	r3, [sp, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	dd05      	ble.n	8007a42 <_dtoa_r+0x82a>
 8007a36:	4631      	mov	r1, r6
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 fe26 	bl	800868c <__lshift>
 8007a40:	4606      	mov	r6, r0
 8007a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d06e      	beq.n	8007b26 <_dtoa_r+0x90e>
 8007a48:	ee18 0a10 	vmov	r0, s16
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	f000 fe8d 	bl	800876c <__mcmp>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	da67      	bge.n	8007b26 <_dtoa_r+0x90e>
 8007a56:	9b00      	ldr	r3, [sp, #0]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	ee18 1a10 	vmov	r1, s16
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	220a      	movs	r2, #10
 8007a62:	2300      	movs	r3, #0
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fc61 	bl	800832c <__multadd>
 8007a6a:	9b08      	ldr	r3, [sp, #32]
 8007a6c:	ee08 0a10 	vmov	s16, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 81b1 	beq.w	8007dd8 <_dtoa_r+0xbc0>
 8007a76:	2300      	movs	r3, #0
 8007a78:	4639      	mov	r1, r7
 8007a7a:	220a      	movs	r2, #10
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f000 fc55 	bl	800832c <__multadd>
 8007a82:	9b02      	ldr	r3, [sp, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	4607      	mov	r7, r0
 8007a88:	f300 808e 	bgt.w	8007ba8 <_dtoa_r+0x990>
 8007a8c:	9b06      	ldr	r3, [sp, #24]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	dc51      	bgt.n	8007b36 <_dtoa_r+0x91e>
 8007a92:	e089      	b.n	8007ba8 <_dtoa_r+0x990>
 8007a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a9a:	e74b      	b.n	8007934 <_dtoa_r+0x71c>
 8007a9c:	9b03      	ldr	r3, [sp, #12]
 8007a9e:	1e5e      	subs	r6, r3, #1
 8007aa0:	9b07      	ldr	r3, [sp, #28]
 8007aa2:	42b3      	cmp	r3, r6
 8007aa4:	bfbf      	itttt	lt
 8007aa6:	9b07      	ldrlt	r3, [sp, #28]
 8007aa8:	9607      	strlt	r6, [sp, #28]
 8007aaa:	1af2      	sublt	r2, r6, r3
 8007aac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007aae:	bfb6      	itet	lt
 8007ab0:	189b      	addlt	r3, r3, r2
 8007ab2:	1b9e      	subge	r6, r3, r6
 8007ab4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	bfb8      	it	lt
 8007aba:	2600      	movlt	r6, #0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	bfb7      	itett	lt
 8007ac0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ac4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ac8:	1a9d      	sublt	r5, r3, r2
 8007aca:	2300      	movlt	r3, #0
 8007acc:	e734      	b.n	8007938 <_dtoa_r+0x720>
 8007ace:	9e07      	ldr	r6, [sp, #28]
 8007ad0:	9d04      	ldr	r5, [sp, #16]
 8007ad2:	9f08      	ldr	r7, [sp, #32]
 8007ad4:	e73b      	b.n	800794e <_dtoa_r+0x736>
 8007ad6:	9a07      	ldr	r2, [sp, #28]
 8007ad8:	e767      	b.n	80079aa <_dtoa_r+0x792>
 8007ada:	9b06      	ldr	r3, [sp, #24]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	dc18      	bgt.n	8007b12 <_dtoa_r+0x8fa>
 8007ae0:	f1ba 0f00 	cmp.w	sl, #0
 8007ae4:	d115      	bne.n	8007b12 <_dtoa_r+0x8fa>
 8007ae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aea:	b993      	cbnz	r3, 8007b12 <_dtoa_r+0x8fa>
 8007aec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007af0:	0d1b      	lsrs	r3, r3, #20
 8007af2:	051b      	lsls	r3, r3, #20
 8007af4:	b183      	cbz	r3, 8007b18 <_dtoa_r+0x900>
 8007af6:	9b04      	ldr	r3, [sp, #16]
 8007af8:	3301      	adds	r3, #1
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	9b05      	ldr	r3, [sp, #20]
 8007afe:	3301      	adds	r3, #1
 8007b00:	9305      	str	r3, [sp, #20]
 8007b02:	f04f 0801 	mov.w	r8, #1
 8007b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f47f af6a 	bne.w	80079e2 <_dtoa_r+0x7ca>
 8007b0e:	2001      	movs	r0, #1
 8007b10:	e76f      	b.n	80079f2 <_dtoa_r+0x7da>
 8007b12:	f04f 0800 	mov.w	r8, #0
 8007b16:	e7f6      	b.n	8007b06 <_dtoa_r+0x8ee>
 8007b18:	4698      	mov	r8, r3
 8007b1a:	e7f4      	b.n	8007b06 <_dtoa_r+0x8ee>
 8007b1c:	f43f af7d 	beq.w	8007a1a <_dtoa_r+0x802>
 8007b20:	4618      	mov	r0, r3
 8007b22:	301c      	adds	r0, #28
 8007b24:	e772      	b.n	8007a0c <_dtoa_r+0x7f4>
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	dc37      	bgt.n	8007b9c <_dtoa_r+0x984>
 8007b2c:	9b06      	ldr	r3, [sp, #24]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	dd34      	ble.n	8007b9c <_dtoa_r+0x984>
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	9302      	str	r3, [sp, #8]
 8007b36:	9b02      	ldr	r3, [sp, #8]
 8007b38:	b96b      	cbnz	r3, 8007b56 <_dtoa_r+0x93e>
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	2205      	movs	r2, #5
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fbf4 	bl	800832c <__multadd>
 8007b44:	4601      	mov	r1, r0
 8007b46:	4606      	mov	r6, r0
 8007b48:	ee18 0a10 	vmov	r0, s16
 8007b4c:	f000 fe0e 	bl	800876c <__mcmp>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	f73f adbb 	bgt.w	80076cc <_dtoa_r+0x4b4>
 8007b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b58:	9d01      	ldr	r5, [sp, #4]
 8007b5a:	43db      	mvns	r3, r3
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	f04f 0800 	mov.w	r8, #0
 8007b62:	4631      	mov	r1, r6
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 fbbf 	bl	80082e8 <_Bfree>
 8007b6a:	2f00      	cmp	r7, #0
 8007b6c:	f43f aea4 	beq.w	80078b8 <_dtoa_r+0x6a0>
 8007b70:	f1b8 0f00 	cmp.w	r8, #0
 8007b74:	d005      	beq.n	8007b82 <_dtoa_r+0x96a>
 8007b76:	45b8      	cmp	r8, r7
 8007b78:	d003      	beq.n	8007b82 <_dtoa_r+0x96a>
 8007b7a:	4641      	mov	r1, r8
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f000 fbb3 	bl	80082e8 <_Bfree>
 8007b82:	4639      	mov	r1, r7
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fbaf 	bl	80082e8 <_Bfree>
 8007b8a:	e695      	b.n	80078b8 <_dtoa_r+0x6a0>
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	4637      	mov	r7, r6
 8007b90:	e7e1      	b.n	8007b56 <_dtoa_r+0x93e>
 8007b92:	9700      	str	r7, [sp, #0]
 8007b94:	4637      	mov	r7, r6
 8007b96:	e599      	b.n	80076cc <_dtoa_r+0x4b4>
 8007b98:	40240000 	.word	0x40240000
 8007b9c:	9b08      	ldr	r3, [sp, #32]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80ca 	beq.w	8007d38 <_dtoa_r+0xb20>
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	9302      	str	r3, [sp, #8]
 8007ba8:	2d00      	cmp	r5, #0
 8007baa:	dd05      	ble.n	8007bb8 <_dtoa_r+0x9a0>
 8007bac:	4639      	mov	r1, r7
 8007bae:	462a      	mov	r2, r5
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fd6b 	bl	800868c <__lshift>
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	f1b8 0f00 	cmp.w	r8, #0
 8007bbc:	d05b      	beq.n	8007c76 <_dtoa_r+0xa5e>
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fb51 	bl	8008268 <_Balloc>
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	b928      	cbnz	r0, 8007bd6 <_dtoa_r+0x9be>
 8007bca:	4b87      	ldr	r3, [pc, #540]	; (8007de8 <_dtoa_r+0xbd0>)
 8007bcc:	4602      	mov	r2, r0
 8007bce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bd2:	f7ff bb3b 	b.w	800724c <_dtoa_r+0x34>
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	3202      	adds	r2, #2
 8007bda:	0092      	lsls	r2, r2, #2
 8007bdc:	f107 010c 	add.w	r1, r7, #12
 8007be0:	300c      	adds	r0, #12
 8007be2:	f000 fb33 	bl	800824c <memcpy>
 8007be6:	2201      	movs	r2, #1
 8007be8:	4629      	mov	r1, r5
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 fd4e 	bl	800868c <__lshift>
 8007bf0:	9b01      	ldr	r3, [sp, #4]
 8007bf2:	f103 0901 	add.w	r9, r3, #1
 8007bf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	f00a 0301 	and.w	r3, sl, #1
 8007c02:	46b8      	mov	r8, r7
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	4607      	mov	r7, r0
 8007c08:	4631      	mov	r1, r6
 8007c0a:	ee18 0a10 	vmov	r0, s16
 8007c0e:	f7ff fa75 	bl	80070fc <quorem>
 8007c12:	4641      	mov	r1, r8
 8007c14:	9002      	str	r0, [sp, #8]
 8007c16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c1a:	ee18 0a10 	vmov	r0, s16
 8007c1e:	f000 fda5 	bl	800876c <__mcmp>
 8007c22:	463a      	mov	r2, r7
 8007c24:	9003      	str	r0, [sp, #12]
 8007c26:	4631      	mov	r1, r6
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fdbb 	bl	80087a4 <__mdiff>
 8007c2e:	68c2      	ldr	r2, [r0, #12]
 8007c30:	f109 3bff 	add.w	fp, r9, #4294967295
 8007c34:	4605      	mov	r5, r0
 8007c36:	bb02      	cbnz	r2, 8007c7a <_dtoa_r+0xa62>
 8007c38:	4601      	mov	r1, r0
 8007c3a:	ee18 0a10 	vmov	r0, s16
 8007c3e:	f000 fd95 	bl	800876c <__mcmp>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4629      	mov	r1, r5
 8007c46:	4620      	mov	r0, r4
 8007c48:	9207      	str	r2, [sp, #28]
 8007c4a:	f000 fb4d 	bl	80082e8 <_Bfree>
 8007c4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007c52:	ea43 0102 	orr.w	r1, r3, r2
 8007c56:	9b04      	ldr	r3, [sp, #16]
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	464d      	mov	r5, r9
 8007c5c:	d10f      	bne.n	8007c7e <_dtoa_r+0xa66>
 8007c5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c62:	d02a      	beq.n	8007cba <_dtoa_r+0xaa2>
 8007c64:	9b03      	ldr	r3, [sp, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dd02      	ble.n	8007c70 <_dtoa_r+0xa58>
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007c70:	f88b a000 	strb.w	sl, [fp]
 8007c74:	e775      	b.n	8007b62 <_dtoa_r+0x94a>
 8007c76:	4638      	mov	r0, r7
 8007c78:	e7ba      	b.n	8007bf0 <_dtoa_r+0x9d8>
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	e7e2      	b.n	8007c44 <_dtoa_r+0xa2c>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	db04      	blt.n	8007c8e <_dtoa_r+0xa76>
 8007c84:	9906      	ldr	r1, [sp, #24]
 8007c86:	430b      	orrs	r3, r1
 8007c88:	9904      	ldr	r1, [sp, #16]
 8007c8a:	430b      	orrs	r3, r1
 8007c8c:	d122      	bne.n	8007cd4 <_dtoa_r+0xabc>
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	ddee      	ble.n	8007c70 <_dtoa_r+0xa58>
 8007c92:	ee18 1a10 	vmov	r1, s16
 8007c96:	2201      	movs	r2, #1
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 fcf7 	bl	800868c <__lshift>
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	ee08 0a10 	vmov	s16, r0
 8007ca4:	f000 fd62 	bl	800876c <__mcmp>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	dc03      	bgt.n	8007cb4 <_dtoa_r+0xa9c>
 8007cac:	d1e0      	bne.n	8007c70 <_dtoa_r+0xa58>
 8007cae:	f01a 0f01 	tst.w	sl, #1
 8007cb2:	d0dd      	beq.n	8007c70 <_dtoa_r+0xa58>
 8007cb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007cb8:	d1d7      	bne.n	8007c6a <_dtoa_r+0xa52>
 8007cba:	2339      	movs	r3, #57	; 0x39
 8007cbc:	f88b 3000 	strb.w	r3, [fp]
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	461d      	mov	r5, r3
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cca:	2a39      	cmp	r2, #57	; 0x39
 8007ccc:	d071      	beq.n	8007db2 <_dtoa_r+0xb9a>
 8007cce:	3201      	adds	r2, #1
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e746      	b.n	8007b62 <_dtoa_r+0x94a>
 8007cd4:	2a00      	cmp	r2, #0
 8007cd6:	dd07      	ble.n	8007ce8 <_dtoa_r+0xad0>
 8007cd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007cdc:	d0ed      	beq.n	8007cba <_dtoa_r+0xaa2>
 8007cde:	f10a 0301 	add.w	r3, sl, #1
 8007ce2:	f88b 3000 	strb.w	r3, [fp]
 8007ce6:	e73c      	b.n	8007b62 <_dtoa_r+0x94a>
 8007ce8:	9b05      	ldr	r3, [sp, #20]
 8007cea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007cee:	4599      	cmp	r9, r3
 8007cf0:	d047      	beq.n	8007d82 <_dtoa_r+0xb6a>
 8007cf2:	ee18 1a10 	vmov	r1, s16
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	220a      	movs	r2, #10
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 fb16 	bl	800832c <__multadd>
 8007d00:	45b8      	cmp	r8, r7
 8007d02:	ee08 0a10 	vmov	s16, r0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	f04f 020a 	mov.w	r2, #10
 8007d0e:	4641      	mov	r1, r8
 8007d10:	4620      	mov	r0, r4
 8007d12:	d106      	bne.n	8007d22 <_dtoa_r+0xb0a>
 8007d14:	f000 fb0a 	bl	800832c <__multadd>
 8007d18:	4680      	mov	r8, r0
 8007d1a:	4607      	mov	r7, r0
 8007d1c:	f109 0901 	add.w	r9, r9, #1
 8007d20:	e772      	b.n	8007c08 <_dtoa_r+0x9f0>
 8007d22:	f000 fb03 	bl	800832c <__multadd>
 8007d26:	4639      	mov	r1, r7
 8007d28:	4680      	mov	r8, r0
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	220a      	movs	r2, #10
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 fafc 	bl	800832c <__multadd>
 8007d34:	4607      	mov	r7, r0
 8007d36:	e7f1      	b.n	8007d1c <_dtoa_r+0xb04>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	9302      	str	r3, [sp, #8]
 8007d3c:	9d01      	ldr	r5, [sp, #4]
 8007d3e:	ee18 0a10 	vmov	r0, s16
 8007d42:	4631      	mov	r1, r6
 8007d44:	f7ff f9da 	bl	80070fc <quorem>
 8007d48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d4c:	9b01      	ldr	r3, [sp, #4]
 8007d4e:	f805 ab01 	strb.w	sl, [r5], #1
 8007d52:	1aea      	subs	r2, r5, r3
 8007d54:	9b02      	ldr	r3, [sp, #8]
 8007d56:	4293      	cmp	r3, r2
 8007d58:	dd09      	ble.n	8007d6e <_dtoa_r+0xb56>
 8007d5a:	ee18 1a10 	vmov	r1, s16
 8007d5e:	2300      	movs	r3, #0
 8007d60:	220a      	movs	r2, #10
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 fae2 	bl	800832c <__multadd>
 8007d68:	ee08 0a10 	vmov	s16, r0
 8007d6c:	e7e7      	b.n	8007d3e <_dtoa_r+0xb26>
 8007d6e:	9b02      	ldr	r3, [sp, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bfc8      	it	gt
 8007d74:	461d      	movgt	r5, r3
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	bfd8      	it	le
 8007d7a:	2501      	movle	r5, #1
 8007d7c:	441d      	add	r5, r3
 8007d7e:	f04f 0800 	mov.w	r8, #0
 8007d82:	ee18 1a10 	vmov	r1, s16
 8007d86:	2201      	movs	r2, #1
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fc7f 	bl	800868c <__lshift>
 8007d8e:	4631      	mov	r1, r6
 8007d90:	ee08 0a10 	vmov	s16, r0
 8007d94:	f000 fcea 	bl	800876c <__mcmp>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	dc91      	bgt.n	8007cc0 <_dtoa_r+0xaa8>
 8007d9c:	d102      	bne.n	8007da4 <_dtoa_r+0xb8c>
 8007d9e:	f01a 0f01 	tst.w	sl, #1
 8007da2:	d18d      	bne.n	8007cc0 <_dtoa_r+0xaa8>
 8007da4:	462b      	mov	r3, r5
 8007da6:	461d      	mov	r5, r3
 8007da8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dac:	2a30      	cmp	r2, #48	; 0x30
 8007dae:	d0fa      	beq.n	8007da6 <_dtoa_r+0xb8e>
 8007db0:	e6d7      	b.n	8007b62 <_dtoa_r+0x94a>
 8007db2:	9a01      	ldr	r2, [sp, #4]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d184      	bne.n	8007cc2 <_dtoa_r+0xaaa>
 8007db8:	9b00      	ldr	r3, [sp, #0]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	2331      	movs	r3, #49	; 0x31
 8007dc0:	7013      	strb	r3, [r2, #0]
 8007dc2:	e6ce      	b.n	8007b62 <_dtoa_r+0x94a>
 8007dc4:	4b09      	ldr	r3, [pc, #36]	; (8007dec <_dtoa_r+0xbd4>)
 8007dc6:	f7ff ba95 	b.w	80072f4 <_dtoa_r+0xdc>
 8007dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f47f aa6e 	bne.w	80072ae <_dtoa_r+0x96>
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <_dtoa_r+0xbd8>)
 8007dd4:	f7ff ba8e 	b.w	80072f4 <_dtoa_r+0xdc>
 8007dd8:	9b02      	ldr	r3, [sp, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	dcae      	bgt.n	8007d3c <_dtoa_r+0xb24>
 8007dde:	9b06      	ldr	r3, [sp, #24]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	f73f aea8 	bgt.w	8007b36 <_dtoa_r+0x91e>
 8007de6:	e7a9      	b.n	8007d3c <_dtoa_r+0xb24>
 8007de8:	0800a7ef 	.word	0x0800a7ef
 8007dec:	0800a74c 	.word	0x0800a74c
 8007df0:	0800a770 	.word	0x0800a770

08007df4 <__sflush_r>:
 8007df4:	898a      	ldrh	r2, [r1, #12]
 8007df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	0710      	lsls	r0, r2, #28
 8007dfe:	460c      	mov	r4, r1
 8007e00:	d458      	bmi.n	8007eb4 <__sflush_r+0xc0>
 8007e02:	684b      	ldr	r3, [r1, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dc05      	bgt.n	8007e14 <__sflush_r+0x20>
 8007e08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	dc02      	bgt.n	8007e14 <__sflush_r+0x20>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e16:	2e00      	cmp	r6, #0
 8007e18:	d0f9      	beq.n	8007e0e <__sflush_r+0x1a>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e20:	682f      	ldr	r7, [r5, #0]
 8007e22:	602b      	str	r3, [r5, #0]
 8007e24:	d032      	beq.n	8007e8c <__sflush_r+0x98>
 8007e26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	075a      	lsls	r2, r3, #29
 8007e2c:	d505      	bpl.n	8007e3a <__sflush_r+0x46>
 8007e2e:	6863      	ldr	r3, [r4, #4]
 8007e30:	1ac0      	subs	r0, r0, r3
 8007e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e34:	b10b      	cbz	r3, 8007e3a <__sflush_r+0x46>
 8007e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e38:	1ac0      	subs	r0, r0, r3
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e40:	6a21      	ldr	r1, [r4, #32]
 8007e42:	4628      	mov	r0, r5
 8007e44:	47b0      	blx	r6
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	d106      	bne.n	8007e5a <__sflush_r+0x66>
 8007e4c:	6829      	ldr	r1, [r5, #0]
 8007e4e:	291d      	cmp	r1, #29
 8007e50:	d82c      	bhi.n	8007eac <__sflush_r+0xb8>
 8007e52:	4a2a      	ldr	r2, [pc, #168]	; (8007efc <__sflush_r+0x108>)
 8007e54:	40ca      	lsrs	r2, r1
 8007e56:	07d6      	lsls	r6, r2, #31
 8007e58:	d528      	bpl.n	8007eac <__sflush_r+0xb8>
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	6062      	str	r2, [r4, #4]
 8007e5e:	04d9      	lsls	r1, r3, #19
 8007e60:	6922      	ldr	r2, [r4, #16]
 8007e62:	6022      	str	r2, [r4, #0]
 8007e64:	d504      	bpl.n	8007e70 <__sflush_r+0x7c>
 8007e66:	1c42      	adds	r2, r0, #1
 8007e68:	d101      	bne.n	8007e6e <__sflush_r+0x7a>
 8007e6a:	682b      	ldr	r3, [r5, #0]
 8007e6c:	b903      	cbnz	r3, 8007e70 <__sflush_r+0x7c>
 8007e6e:	6560      	str	r0, [r4, #84]	; 0x54
 8007e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e72:	602f      	str	r7, [r5, #0]
 8007e74:	2900      	cmp	r1, #0
 8007e76:	d0ca      	beq.n	8007e0e <__sflush_r+0x1a>
 8007e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e7c:	4299      	cmp	r1, r3
 8007e7e:	d002      	beq.n	8007e86 <__sflush_r+0x92>
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 fd8b 	bl	800899c <_free_r>
 8007e86:	2000      	movs	r0, #0
 8007e88:	6360      	str	r0, [r4, #52]	; 0x34
 8007e8a:	e7c1      	b.n	8007e10 <__sflush_r+0x1c>
 8007e8c:	6a21      	ldr	r1, [r4, #32]
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b0      	blx	r6
 8007e94:	1c41      	adds	r1, r0, #1
 8007e96:	d1c7      	bne.n	8007e28 <__sflush_r+0x34>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0c4      	beq.n	8007e28 <__sflush_r+0x34>
 8007e9e:	2b1d      	cmp	r3, #29
 8007ea0:	d001      	beq.n	8007ea6 <__sflush_r+0xb2>
 8007ea2:	2b16      	cmp	r3, #22
 8007ea4:	d101      	bne.n	8007eaa <__sflush_r+0xb6>
 8007ea6:	602f      	str	r7, [r5, #0]
 8007ea8:	e7b1      	b.n	8007e0e <__sflush_r+0x1a>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb0:	81a3      	strh	r3, [r4, #12]
 8007eb2:	e7ad      	b.n	8007e10 <__sflush_r+0x1c>
 8007eb4:	690f      	ldr	r7, [r1, #16]
 8007eb6:	2f00      	cmp	r7, #0
 8007eb8:	d0a9      	beq.n	8007e0e <__sflush_r+0x1a>
 8007eba:	0793      	lsls	r3, r2, #30
 8007ebc:	680e      	ldr	r6, [r1, #0]
 8007ebe:	bf08      	it	eq
 8007ec0:	694b      	ldreq	r3, [r1, #20]
 8007ec2:	600f      	str	r7, [r1, #0]
 8007ec4:	bf18      	it	ne
 8007ec6:	2300      	movne	r3, #0
 8007ec8:	eba6 0807 	sub.w	r8, r6, r7
 8007ecc:	608b      	str	r3, [r1, #8]
 8007ece:	f1b8 0f00 	cmp.w	r8, #0
 8007ed2:	dd9c      	ble.n	8007e0e <__sflush_r+0x1a>
 8007ed4:	6a21      	ldr	r1, [r4, #32]
 8007ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ed8:	4643      	mov	r3, r8
 8007eda:	463a      	mov	r2, r7
 8007edc:	4628      	mov	r0, r5
 8007ede:	47b0      	blx	r6
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	dc06      	bgt.n	8007ef2 <__sflush_r+0xfe>
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	e78e      	b.n	8007e10 <__sflush_r+0x1c>
 8007ef2:	4407      	add	r7, r0
 8007ef4:	eba8 0800 	sub.w	r8, r8, r0
 8007ef8:	e7e9      	b.n	8007ece <__sflush_r+0xda>
 8007efa:	bf00      	nop
 8007efc:	20400001 	.word	0x20400001

08007f00 <_fflush_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	690b      	ldr	r3, [r1, #16]
 8007f04:	4605      	mov	r5, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	b913      	cbnz	r3, 8007f10 <_fflush_r+0x10>
 8007f0a:	2500      	movs	r5, #0
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	b118      	cbz	r0, 8007f1a <_fflush_r+0x1a>
 8007f12:	6983      	ldr	r3, [r0, #24]
 8007f14:	b90b      	cbnz	r3, 8007f1a <_fflush_r+0x1a>
 8007f16:	f000 f887 	bl	8008028 <__sinit>
 8007f1a:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <_fflush_r+0x6c>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d11b      	bne.n	8007f58 <_fflush_r+0x58>
 8007f20:	686c      	ldr	r4, [r5, #4]
 8007f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0ef      	beq.n	8007f0a <_fflush_r+0xa>
 8007f2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f2c:	07d0      	lsls	r0, r2, #31
 8007f2e:	d404      	bmi.n	8007f3a <_fflush_r+0x3a>
 8007f30:	0599      	lsls	r1, r3, #22
 8007f32:	d402      	bmi.n	8007f3a <_fflush_r+0x3a>
 8007f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f36:	f000 f91a 	bl	800816e <__retarget_lock_acquire_recursive>
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	f7ff ff59 	bl	8007df4 <__sflush_r>
 8007f42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f44:	07da      	lsls	r2, r3, #31
 8007f46:	4605      	mov	r5, r0
 8007f48:	d4e0      	bmi.n	8007f0c <_fflush_r+0xc>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	059b      	lsls	r3, r3, #22
 8007f4e:	d4dd      	bmi.n	8007f0c <_fflush_r+0xc>
 8007f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f52:	f000 f90d 	bl	8008170 <__retarget_lock_release_recursive>
 8007f56:	e7d9      	b.n	8007f0c <_fflush_r+0xc>
 8007f58:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <_fflush_r+0x70>)
 8007f5a:	429c      	cmp	r4, r3
 8007f5c:	d101      	bne.n	8007f62 <_fflush_r+0x62>
 8007f5e:	68ac      	ldr	r4, [r5, #8]
 8007f60:	e7df      	b.n	8007f22 <_fflush_r+0x22>
 8007f62:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <_fflush_r+0x74>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	bf08      	it	eq
 8007f68:	68ec      	ldreq	r4, [r5, #12]
 8007f6a:	e7da      	b.n	8007f22 <_fflush_r+0x22>
 8007f6c:	0800a820 	.word	0x0800a820
 8007f70:	0800a840 	.word	0x0800a840
 8007f74:	0800a800 	.word	0x0800a800

08007f78 <std>:
 8007f78:	2300      	movs	r3, #0
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f86:	6083      	str	r3, [r0, #8]
 8007f88:	8181      	strh	r1, [r0, #12]
 8007f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f8c:	81c2      	strh	r2, [r0, #14]
 8007f8e:	6183      	str	r3, [r0, #24]
 8007f90:	4619      	mov	r1, r3
 8007f92:	2208      	movs	r2, #8
 8007f94:	305c      	adds	r0, #92	; 0x5c
 8007f96:	f7fe faf1 	bl	800657c <memset>
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <std+0x38>)
 8007f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <std+0x3c>)
 8007fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fa2:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <std+0x40>)
 8007fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fa6:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <std+0x44>)
 8007fa8:	6224      	str	r4, [r4, #32]
 8007faa:	6323      	str	r3, [r4, #48]	; 0x30
 8007fac:	bd10      	pop	{r4, pc}
 8007fae:	bf00      	nop
 8007fb0:	08008e31 	.word	0x08008e31
 8007fb4:	08008e53 	.word	0x08008e53
 8007fb8:	08008e8b 	.word	0x08008e8b
 8007fbc:	08008eaf 	.word	0x08008eaf

08007fc0 <_cleanup_r>:
 8007fc0:	4901      	ldr	r1, [pc, #4]	; (8007fc8 <_cleanup_r+0x8>)
 8007fc2:	f000 b8af 	b.w	8008124 <_fwalk_reent>
 8007fc6:	bf00      	nop
 8007fc8:	08007f01 	.word	0x08007f01

08007fcc <__sfmoreglue>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	2268      	movs	r2, #104	; 0x68
 8007fd0:	1e4d      	subs	r5, r1, #1
 8007fd2:	4355      	muls	r5, r2
 8007fd4:	460e      	mov	r6, r1
 8007fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fda:	f000 fd4b 	bl	8008a74 <_malloc_r>
 8007fde:	4604      	mov	r4, r0
 8007fe0:	b140      	cbz	r0, 8007ff4 <__sfmoreglue+0x28>
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8007fe8:	300c      	adds	r0, #12
 8007fea:	60a0      	str	r0, [r4, #8]
 8007fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ff0:	f7fe fac4 	bl	800657c <memset>
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}

08007ff8 <__sfp_lock_acquire>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__sfp_lock_acquire+0x8>)
 8007ffa:	f000 b8b8 	b.w	800816e <__retarget_lock_acquire_recursive>
 8007ffe:	bf00      	nop
 8008000:	20003bf1 	.word	0x20003bf1

08008004 <__sfp_lock_release>:
 8008004:	4801      	ldr	r0, [pc, #4]	; (800800c <__sfp_lock_release+0x8>)
 8008006:	f000 b8b3 	b.w	8008170 <__retarget_lock_release_recursive>
 800800a:	bf00      	nop
 800800c:	20003bf1 	.word	0x20003bf1

08008010 <__sinit_lock_acquire>:
 8008010:	4801      	ldr	r0, [pc, #4]	; (8008018 <__sinit_lock_acquire+0x8>)
 8008012:	f000 b8ac 	b.w	800816e <__retarget_lock_acquire_recursive>
 8008016:	bf00      	nop
 8008018:	20003bf2 	.word	0x20003bf2

0800801c <__sinit_lock_release>:
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <__sinit_lock_release+0x8>)
 800801e:	f000 b8a7 	b.w	8008170 <__retarget_lock_release_recursive>
 8008022:	bf00      	nop
 8008024:	20003bf2 	.word	0x20003bf2

08008028 <__sinit>:
 8008028:	b510      	push	{r4, lr}
 800802a:	4604      	mov	r4, r0
 800802c:	f7ff fff0 	bl	8008010 <__sinit_lock_acquire>
 8008030:	69a3      	ldr	r3, [r4, #24]
 8008032:	b11b      	cbz	r3, 800803c <__sinit+0x14>
 8008034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008038:	f7ff bff0 	b.w	800801c <__sinit_lock_release>
 800803c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008040:	6523      	str	r3, [r4, #80]	; 0x50
 8008042:	4b13      	ldr	r3, [pc, #76]	; (8008090 <__sinit+0x68>)
 8008044:	4a13      	ldr	r2, [pc, #76]	; (8008094 <__sinit+0x6c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	62a2      	str	r2, [r4, #40]	; 0x28
 800804a:	42a3      	cmp	r3, r4
 800804c:	bf04      	itt	eq
 800804e:	2301      	moveq	r3, #1
 8008050:	61a3      	streq	r3, [r4, #24]
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f820 	bl	8008098 <__sfp>
 8008058:	6060      	str	r0, [r4, #4]
 800805a:	4620      	mov	r0, r4
 800805c:	f000 f81c 	bl	8008098 <__sfp>
 8008060:	60a0      	str	r0, [r4, #8]
 8008062:	4620      	mov	r0, r4
 8008064:	f000 f818 	bl	8008098 <__sfp>
 8008068:	2200      	movs	r2, #0
 800806a:	60e0      	str	r0, [r4, #12]
 800806c:	2104      	movs	r1, #4
 800806e:	6860      	ldr	r0, [r4, #4]
 8008070:	f7ff ff82 	bl	8007f78 <std>
 8008074:	68a0      	ldr	r0, [r4, #8]
 8008076:	2201      	movs	r2, #1
 8008078:	2109      	movs	r1, #9
 800807a:	f7ff ff7d 	bl	8007f78 <std>
 800807e:	68e0      	ldr	r0, [r4, #12]
 8008080:	2202      	movs	r2, #2
 8008082:	2112      	movs	r1, #18
 8008084:	f7ff ff78 	bl	8007f78 <std>
 8008088:	2301      	movs	r3, #1
 800808a:	61a3      	str	r3, [r4, #24]
 800808c:	e7d2      	b.n	8008034 <__sinit+0xc>
 800808e:	bf00      	nop
 8008090:	0800a738 	.word	0x0800a738
 8008094:	08007fc1 	.word	0x08007fc1

08008098 <__sfp>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	4607      	mov	r7, r0
 800809c:	f7ff ffac 	bl	8007ff8 <__sfp_lock_acquire>
 80080a0:	4b1e      	ldr	r3, [pc, #120]	; (800811c <__sfp+0x84>)
 80080a2:	681e      	ldr	r6, [r3, #0]
 80080a4:	69b3      	ldr	r3, [r6, #24]
 80080a6:	b913      	cbnz	r3, 80080ae <__sfp+0x16>
 80080a8:	4630      	mov	r0, r6
 80080aa:	f7ff ffbd 	bl	8008028 <__sinit>
 80080ae:	3648      	adds	r6, #72	; 0x48
 80080b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	d503      	bpl.n	80080c0 <__sfp+0x28>
 80080b8:	6833      	ldr	r3, [r6, #0]
 80080ba:	b30b      	cbz	r3, 8008100 <__sfp+0x68>
 80080bc:	6836      	ldr	r6, [r6, #0]
 80080be:	e7f7      	b.n	80080b0 <__sfp+0x18>
 80080c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080c4:	b9d5      	cbnz	r5, 80080fc <__sfp+0x64>
 80080c6:	4b16      	ldr	r3, [pc, #88]	; (8008120 <__sfp+0x88>)
 80080c8:	60e3      	str	r3, [r4, #12]
 80080ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080ce:	6665      	str	r5, [r4, #100]	; 0x64
 80080d0:	f000 f84c 	bl	800816c <__retarget_lock_init_recursive>
 80080d4:	f7ff ff96 	bl	8008004 <__sfp_lock_release>
 80080d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080e0:	6025      	str	r5, [r4, #0]
 80080e2:	61a5      	str	r5, [r4, #24]
 80080e4:	2208      	movs	r2, #8
 80080e6:	4629      	mov	r1, r5
 80080e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080ec:	f7fe fa46 	bl	800657c <memset>
 80080f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080f8:	4620      	mov	r0, r4
 80080fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fc:	3468      	adds	r4, #104	; 0x68
 80080fe:	e7d9      	b.n	80080b4 <__sfp+0x1c>
 8008100:	2104      	movs	r1, #4
 8008102:	4638      	mov	r0, r7
 8008104:	f7ff ff62 	bl	8007fcc <__sfmoreglue>
 8008108:	4604      	mov	r4, r0
 800810a:	6030      	str	r0, [r6, #0]
 800810c:	2800      	cmp	r0, #0
 800810e:	d1d5      	bne.n	80080bc <__sfp+0x24>
 8008110:	f7ff ff78 	bl	8008004 <__sfp_lock_release>
 8008114:	230c      	movs	r3, #12
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	e7ee      	b.n	80080f8 <__sfp+0x60>
 800811a:	bf00      	nop
 800811c:	0800a738 	.word	0x0800a738
 8008120:	ffff0001 	.word	0xffff0001

08008124 <_fwalk_reent>:
 8008124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008128:	4606      	mov	r6, r0
 800812a:	4688      	mov	r8, r1
 800812c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008130:	2700      	movs	r7, #0
 8008132:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008136:	f1b9 0901 	subs.w	r9, r9, #1
 800813a:	d505      	bpl.n	8008148 <_fwalk_reent+0x24>
 800813c:	6824      	ldr	r4, [r4, #0]
 800813e:	2c00      	cmp	r4, #0
 8008140:	d1f7      	bne.n	8008132 <_fwalk_reent+0xe>
 8008142:	4638      	mov	r0, r7
 8008144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008148:	89ab      	ldrh	r3, [r5, #12]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d907      	bls.n	800815e <_fwalk_reent+0x3a>
 800814e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008152:	3301      	adds	r3, #1
 8008154:	d003      	beq.n	800815e <_fwalk_reent+0x3a>
 8008156:	4629      	mov	r1, r5
 8008158:	4630      	mov	r0, r6
 800815a:	47c0      	blx	r8
 800815c:	4307      	orrs	r7, r0
 800815e:	3568      	adds	r5, #104	; 0x68
 8008160:	e7e9      	b.n	8008136 <_fwalk_reent+0x12>
	...

08008164 <_localeconv_r>:
 8008164:	4800      	ldr	r0, [pc, #0]	; (8008168 <_localeconv_r+0x4>)
 8008166:	4770      	bx	lr
 8008168:	20000178 	.word	0x20000178

0800816c <__retarget_lock_init_recursive>:
 800816c:	4770      	bx	lr

0800816e <__retarget_lock_acquire_recursive>:
 800816e:	4770      	bx	lr

08008170 <__retarget_lock_release_recursive>:
 8008170:	4770      	bx	lr

08008172 <__swhatbuf_r>:
 8008172:	b570      	push	{r4, r5, r6, lr}
 8008174:	460e      	mov	r6, r1
 8008176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800817a:	2900      	cmp	r1, #0
 800817c:	b096      	sub	sp, #88	; 0x58
 800817e:	4614      	mov	r4, r2
 8008180:	461d      	mov	r5, r3
 8008182:	da08      	bge.n	8008196 <__swhatbuf_r+0x24>
 8008184:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	602a      	str	r2, [r5, #0]
 800818c:	061a      	lsls	r2, r3, #24
 800818e:	d410      	bmi.n	80081b2 <__swhatbuf_r+0x40>
 8008190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008194:	e00e      	b.n	80081b4 <__swhatbuf_r+0x42>
 8008196:	466a      	mov	r2, sp
 8008198:	f000 fee0 	bl	8008f5c <_fstat_r>
 800819c:	2800      	cmp	r0, #0
 800819e:	dbf1      	blt.n	8008184 <__swhatbuf_r+0x12>
 80081a0:	9a01      	ldr	r2, [sp, #4]
 80081a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081aa:	425a      	negs	r2, r3
 80081ac:	415a      	adcs	r2, r3
 80081ae:	602a      	str	r2, [r5, #0]
 80081b0:	e7ee      	b.n	8008190 <__swhatbuf_r+0x1e>
 80081b2:	2340      	movs	r3, #64	; 0x40
 80081b4:	2000      	movs	r0, #0
 80081b6:	6023      	str	r3, [r4, #0]
 80081b8:	b016      	add	sp, #88	; 0x58
 80081ba:	bd70      	pop	{r4, r5, r6, pc}

080081bc <__smakebuf_r>:
 80081bc:	898b      	ldrh	r3, [r1, #12]
 80081be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081c0:	079d      	lsls	r5, r3, #30
 80081c2:	4606      	mov	r6, r0
 80081c4:	460c      	mov	r4, r1
 80081c6:	d507      	bpl.n	80081d8 <__smakebuf_r+0x1c>
 80081c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	6123      	str	r3, [r4, #16]
 80081d0:	2301      	movs	r3, #1
 80081d2:	6163      	str	r3, [r4, #20]
 80081d4:	b002      	add	sp, #8
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	ab01      	add	r3, sp, #4
 80081da:	466a      	mov	r2, sp
 80081dc:	f7ff ffc9 	bl	8008172 <__swhatbuf_r>
 80081e0:	9900      	ldr	r1, [sp, #0]
 80081e2:	4605      	mov	r5, r0
 80081e4:	4630      	mov	r0, r6
 80081e6:	f000 fc45 	bl	8008a74 <_malloc_r>
 80081ea:	b948      	cbnz	r0, 8008200 <__smakebuf_r+0x44>
 80081ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f0:	059a      	lsls	r2, r3, #22
 80081f2:	d4ef      	bmi.n	80081d4 <__smakebuf_r+0x18>
 80081f4:	f023 0303 	bic.w	r3, r3, #3
 80081f8:	f043 0302 	orr.w	r3, r3, #2
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	e7e3      	b.n	80081c8 <__smakebuf_r+0xc>
 8008200:	4b0d      	ldr	r3, [pc, #52]	; (8008238 <__smakebuf_r+0x7c>)
 8008202:	62b3      	str	r3, [r6, #40]	; 0x28
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	6020      	str	r0, [r4, #0]
 8008208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820c:	81a3      	strh	r3, [r4, #12]
 800820e:	9b00      	ldr	r3, [sp, #0]
 8008210:	6163      	str	r3, [r4, #20]
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	6120      	str	r0, [r4, #16]
 8008216:	b15b      	cbz	r3, 8008230 <__smakebuf_r+0x74>
 8008218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800821c:	4630      	mov	r0, r6
 800821e:	f000 feaf 	bl	8008f80 <_isatty_r>
 8008222:	b128      	cbz	r0, 8008230 <__smakebuf_r+0x74>
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	f023 0303 	bic.w	r3, r3, #3
 800822a:	f043 0301 	orr.w	r3, r3, #1
 800822e:	81a3      	strh	r3, [r4, #12]
 8008230:	89a0      	ldrh	r0, [r4, #12]
 8008232:	4305      	orrs	r5, r0
 8008234:	81a5      	strh	r5, [r4, #12]
 8008236:	e7cd      	b.n	80081d4 <__smakebuf_r+0x18>
 8008238:	08007fc1 	.word	0x08007fc1

0800823c <malloc>:
 800823c:	4b02      	ldr	r3, [pc, #8]	; (8008248 <malloc+0xc>)
 800823e:	4601      	mov	r1, r0
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	f000 bc17 	b.w	8008a74 <_malloc_r>
 8008246:	bf00      	nop
 8008248:	20000024 	.word	0x20000024

0800824c <memcpy>:
 800824c:	440a      	add	r2, r1
 800824e:	4291      	cmp	r1, r2
 8008250:	f100 33ff 	add.w	r3, r0, #4294967295
 8008254:	d100      	bne.n	8008258 <memcpy+0xc>
 8008256:	4770      	bx	lr
 8008258:	b510      	push	{r4, lr}
 800825a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800825e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008262:	4291      	cmp	r1, r2
 8008264:	d1f9      	bne.n	800825a <memcpy+0xe>
 8008266:	bd10      	pop	{r4, pc}

08008268 <_Balloc>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800826c:	4604      	mov	r4, r0
 800826e:	460d      	mov	r5, r1
 8008270:	b976      	cbnz	r6, 8008290 <_Balloc+0x28>
 8008272:	2010      	movs	r0, #16
 8008274:	f7ff ffe2 	bl	800823c <malloc>
 8008278:	4602      	mov	r2, r0
 800827a:	6260      	str	r0, [r4, #36]	; 0x24
 800827c:	b920      	cbnz	r0, 8008288 <_Balloc+0x20>
 800827e:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <_Balloc+0x78>)
 8008280:	4818      	ldr	r0, [pc, #96]	; (80082e4 <_Balloc+0x7c>)
 8008282:	2166      	movs	r1, #102	; 0x66
 8008284:	f000 fe2a 	bl	8008edc <__assert_func>
 8008288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800828c:	6006      	str	r6, [r0, #0]
 800828e:	60c6      	str	r6, [r0, #12]
 8008290:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008292:	68f3      	ldr	r3, [r6, #12]
 8008294:	b183      	cbz	r3, 80082b8 <_Balloc+0x50>
 8008296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800829e:	b9b8      	cbnz	r0, 80082d0 <_Balloc+0x68>
 80082a0:	2101      	movs	r1, #1
 80082a2:	fa01 f605 	lsl.w	r6, r1, r5
 80082a6:	1d72      	adds	r2, r6, #5
 80082a8:	0092      	lsls	r2, r2, #2
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 fb60 	bl	8008970 <_calloc_r>
 80082b0:	b160      	cbz	r0, 80082cc <_Balloc+0x64>
 80082b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082b6:	e00e      	b.n	80082d6 <_Balloc+0x6e>
 80082b8:	2221      	movs	r2, #33	; 0x21
 80082ba:	2104      	movs	r1, #4
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fb57 	bl	8008970 <_calloc_r>
 80082c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082c4:	60f0      	str	r0, [r6, #12]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e4      	bne.n	8008296 <_Balloc+0x2e>
 80082cc:	2000      	movs	r0, #0
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	6802      	ldr	r2, [r0, #0]
 80082d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082d6:	2300      	movs	r3, #0
 80082d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082dc:	e7f7      	b.n	80082ce <_Balloc+0x66>
 80082de:	bf00      	nop
 80082e0:	0800a77d 	.word	0x0800a77d
 80082e4:	0800a860 	.word	0x0800a860

080082e8 <_Bfree>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082ec:	4605      	mov	r5, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	b976      	cbnz	r6, 8008310 <_Bfree+0x28>
 80082f2:	2010      	movs	r0, #16
 80082f4:	f7ff ffa2 	bl	800823c <malloc>
 80082f8:	4602      	mov	r2, r0
 80082fa:	6268      	str	r0, [r5, #36]	; 0x24
 80082fc:	b920      	cbnz	r0, 8008308 <_Bfree+0x20>
 80082fe:	4b09      	ldr	r3, [pc, #36]	; (8008324 <_Bfree+0x3c>)
 8008300:	4809      	ldr	r0, [pc, #36]	; (8008328 <_Bfree+0x40>)
 8008302:	218a      	movs	r1, #138	; 0x8a
 8008304:	f000 fdea 	bl	8008edc <__assert_func>
 8008308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800830c:	6006      	str	r6, [r0, #0]
 800830e:	60c6      	str	r6, [r0, #12]
 8008310:	b13c      	cbz	r4, 8008322 <_Bfree+0x3a>
 8008312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008314:	6862      	ldr	r2, [r4, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800831c:	6021      	str	r1, [r4, #0]
 800831e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	0800a77d 	.word	0x0800a77d
 8008328:	0800a860 	.word	0x0800a860

0800832c <__multadd>:
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	690d      	ldr	r5, [r1, #16]
 8008332:	4607      	mov	r7, r0
 8008334:	460c      	mov	r4, r1
 8008336:	461e      	mov	r6, r3
 8008338:	f101 0c14 	add.w	ip, r1, #20
 800833c:	2000      	movs	r0, #0
 800833e:	f8dc 3000 	ldr.w	r3, [ip]
 8008342:	b299      	uxth	r1, r3
 8008344:	fb02 6101 	mla	r1, r2, r1, r6
 8008348:	0c1e      	lsrs	r6, r3, #16
 800834a:	0c0b      	lsrs	r3, r1, #16
 800834c:	fb02 3306 	mla	r3, r2, r6, r3
 8008350:	b289      	uxth	r1, r1
 8008352:	3001      	adds	r0, #1
 8008354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008358:	4285      	cmp	r5, r0
 800835a:	f84c 1b04 	str.w	r1, [ip], #4
 800835e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008362:	dcec      	bgt.n	800833e <__multadd+0x12>
 8008364:	b30e      	cbz	r6, 80083aa <__multadd+0x7e>
 8008366:	68a3      	ldr	r3, [r4, #8]
 8008368:	42ab      	cmp	r3, r5
 800836a:	dc19      	bgt.n	80083a0 <__multadd+0x74>
 800836c:	6861      	ldr	r1, [r4, #4]
 800836e:	4638      	mov	r0, r7
 8008370:	3101      	adds	r1, #1
 8008372:	f7ff ff79 	bl	8008268 <_Balloc>
 8008376:	4680      	mov	r8, r0
 8008378:	b928      	cbnz	r0, 8008386 <__multadd+0x5a>
 800837a:	4602      	mov	r2, r0
 800837c:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <__multadd+0x84>)
 800837e:	480d      	ldr	r0, [pc, #52]	; (80083b4 <__multadd+0x88>)
 8008380:	21b5      	movs	r1, #181	; 0xb5
 8008382:	f000 fdab 	bl	8008edc <__assert_func>
 8008386:	6922      	ldr	r2, [r4, #16]
 8008388:	3202      	adds	r2, #2
 800838a:	f104 010c 	add.w	r1, r4, #12
 800838e:	0092      	lsls	r2, r2, #2
 8008390:	300c      	adds	r0, #12
 8008392:	f7ff ff5b 	bl	800824c <memcpy>
 8008396:	4621      	mov	r1, r4
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff ffa5 	bl	80082e8 <_Bfree>
 800839e:	4644      	mov	r4, r8
 80083a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083a4:	3501      	adds	r5, #1
 80083a6:	615e      	str	r6, [r3, #20]
 80083a8:	6125      	str	r5, [r4, #16]
 80083aa:	4620      	mov	r0, r4
 80083ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b0:	0800a7ef 	.word	0x0800a7ef
 80083b4:	0800a860 	.word	0x0800a860

080083b8 <__hi0bits>:
 80083b8:	0c03      	lsrs	r3, r0, #16
 80083ba:	041b      	lsls	r3, r3, #16
 80083bc:	b9d3      	cbnz	r3, 80083f4 <__hi0bits+0x3c>
 80083be:	0400      	lsls	r0, r0, #16
 80083c0:	2310      	movs	r3, #16
 80083c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80083c6:	bf04      	itt	eq
 80083c8:	0200      	lsleq	r0, r0, #8
 80083ca:	3308      	addeq	r3, #8
 80083cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80083d0:	bf04      	itt	eq
 80083d2:	0100      	lsleq	r0, r0, #4
 80083d4:	3304      	addeq	r3, #4
 80083d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80083da:	bf04      	itt	eq
 80083dc:	0080      	lsleq	r0, r0, #2
 80083de:	3302      	addeq	r3, #2
 80083e0:	2800      	cmp	r0, #0
 80083e2:	db05      	blt.n	80083f0 <__hi0bits+0x38>
 80083e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80083e8:	f103 0301 	add.w	r3, r3, #1
 80083ec:	bf08      	it	eq
 80083ee:	2320      	moveq	r3, #32
 80083f0:	4618      	mov	r0, r3
 80083f2:	4770      	bx	lr
 80083f4:	2300      	movs	r3, #0
 80083f6:	e7e4      	b.n	80083c2 <__hi0bits+0xa>

080083f8 <__lo0bits>:
 80083f8:	6803      	ldr	r3, [r0, #0]
 80083fa:	f013 0207 	ands.w	r2, r3, #7
 80083fe:	4601      	mov	r1, r0
 8008400:	d00b      	beq.n	800841a <__lo0bits+0x22>
 8008402:	07da      	lsls	r2, r3, #31
 8008404:	d423      	bmi.n	800844e <__lo0bits+0x56>
 8008406:	0798      	lsls	r0, r3, #30
 8008408:	bf49      	itett	mi
 800840a:	085b      	lsrmi	r3, r3, #1
 800840c:	089b      	lsrpl	r3, r3, #2
 800840e:	2001      	movmi	r0, #1
 8008410:	600b      	strmi	r3, [r1, #0]
 8008412:	bf5c      	itt	pl
 8008414:	600b      	strpl	r3, [r1, #0]
 8008416:	2002      	movpl	r0, #2
 8008418:	4770      	bx	lr
 800841a:	b298      	uxth	r0, r3
 800841c:	b9a8      	cbnz	r0, 800844a <__lo0bits+0x52>
 800841e:	0c1b      	lsrs	r3, r3, #16
 8008420:	2010      	movs	r0, #16
 8008422:	b2da      	uxtb	r2, r3
 8008424:	b90a      	cbnz	r2, 800842a <__lo0bits+0x32>
 8008426:	3008      	adds	r0, #8
 8008428:	0a1b      	lsrs	r3, r3, #8
 800842a:	071a      	lsls	r2, r3, #28
 800842c:	bf04      	itt	eq
 800842e:	091b      	lsreq	r3, r3, #4
 8008430:	3004      	addeq	r0, #4
 8008432:	079a      	lsls	r2, r3, #30
 8008434:	bf04      	itt	eq
 8008436:	089b      	lsreq	r3, r3, #2
 8008438:	3002      	addeq	r0, #2
 800843a:	07da      	lsls	r2, r3, #31
 800843c:	d403      	bmi.n	8008446 <__lo0bits+0x4e>
 800843e:	085b      	lsrs	r3, r3, #1
 8008440:	f100 0001 	add.w	r0, r0, #1
 8008444:	d005      	beq.n	8008452 <__lo0bits+0x5a>
 8008446:	600b      	str	r3, [r1, #0]
 8008448:	4770      	bx	lr
 800844a:	4610      	mov	r0, r2
 800844c:	e7e9      	b.n	8008422 <__lo0bits+0x2a>
 800844e:	2000      	movs	r0, #0
 8008450:	4770      	bx	lr
 8008452:	2020      	movs	r0, #32
 8008454:	4770      	bx	lr
	...

08008458 <__i2b>:
 8008458:	b510      	push	{r4, lr}
 800845a:	460c      	mov	r4, r1
 800845c:	2101      	movs	r1, #1
 800845e:	f7ff ff03 	bl	8008268 <_Balloc>
 8008462:	4602      	mov	r2, r0
 8008464:	b928      	cbnz	r0, 8008472 <__i2b+0x1a>
 8008466:	4b05      	ldr	r3, [pc, #20]	; (800847c <__i2b+0x24>)
 8008468:	4805      	ldr	r0, [pc, #20]	; (8008480 <__i2b+0x28>)
 800846a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800846e:	f000 fd35 	bl	8008edc <__assert_func>
 8008472:	2301      	movs	r3, #1
 8008474:	6144      	str	r4, [r0, #20]
 8008476:	6103      	str	r3, [r0, #16]
 8008478:	bd10      	pop	{r4, pc}
 800847a:	bf00      	nop
 800847c:	0800a7ef 	.word	0x0800a7ef
 8008480:	0800a860 	.word	0x0800a860

08008484 <__multiply>:
 8008484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008488:	4691      	mov	r9, r2
 800848a:	690a      	ldr	r2, [r1, #16]
 800848c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008490:	429a      	cmp	r2, r3
 8008492:	bfb8      	it	lt
 8008494:	460b      	movlt	r3, r1
 8008496:	460c      	mov	r4, r1
 8008498:	bfbc      	itt	lt
 800849a:	464c      	movlt	r4, r9
 800849c:	4699      	movlt	r9, r3
 800849e:	6927      	ldr	r7, [r4, #16]
 80084a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084a4:	68a3      	ldr	r3, [r4, #8]
 80084a6:	6861      	ldr	r1, [r4, #4]
 80084a8:	eb07 060a 	add.w	r6, r7, sl
 80084ac:	42b3      	cmp	r3, r6
 80084ae:	b085      	sub	sp, #20
 80084b0:	bfb8      	it	lt
 80084b2:	3101      	addlt	r1, #1
 80084b4:	f7ff fed8 	bl	8008268 <_Balloc>
 80084b8:	b930      	cbnz	r0, 80084c8 <__multiply+0x44>
 80084ba:	4602      	mov	r2, r0
 80084bc:	4b44      	ldr	r3, [pc, #272]	; (80085d0 <__multiply+0x14c>)
 80084be:	4845      	ldr	r0, [pc, #276]	; (80085d4 <__multiply+0x150>)
 80084c0:	f240 115d 	movw	r1, #349	; 0x15d
 80084c4:	f000 fd0a 	bl	8008edc <__assert_func>
 80084c8:	f100 0514 	add.w	r5, r0, #20
 80084cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084d0:	462b      	mov	r3, r5
 80084d2:	2200      	movs	r2, #0
 80084d4:	4543      	cmp	r3, r8
 80084d6:	d321      	bcc.n	800851c <__multiply+0x98>
 80084d8:	f104 0314 	add.w	r3, r4, #20
 80084dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084e0:	f109 0314 	add.w	r3, r9, #20
 80084e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084e8:	9202      	str	r2, [sp, #8]
 80084ea:	1b3a      	subs	r2, r7, r4
 80084ec:	3a15      	subs	r2, #21
 80084ee:	f022 0203 	bic.w	r2, r2, #3
 80084f2:	3204      	adds	r2, #4
 80084f4:	f104 0115 	add.w	r1, r4, #21
 80084f8:	428f      	cmp	r7, r1
 80084fa:	bf38      	it	cc
 80084fc:	2204      	movcc	r2, #4
 80084fe:	9201      	str	r2, [sp, #4]
 8008500:	9a02      	ldr	r2, [sp, #8]
 8008502:	9303      	str	r3, [sp, #12]
 8008504:	429a      	cmp	r2, r3
 8008506:	d80c      	bhi.n	8008522 <__multiply+0x9e>
 8008508:	2e00      	cmp	r6, #0
 800850a:	dd03      	ble.n	8008514 <__multiply+0x90>
 800850c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008510:	2b00      	cmp	r3, #0
 8008512:	d05a      	beq.n	80085ca <__multiply+0x146>
 8008514:	6106      	str	r6, [r0, #16]
 8008516:	b005      	add	sp, #20
 8008518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851c:	f843 2b04 	str.w	r2, [r3], #4
 8008520:	e7d8      	b.n	80084d4 <__multiply+0x50>
 8008522:	f8b3 a000 	ldrh.w	sl, [r3]
 8008526:	f1ba 0f00 	cmp.w	sl, #0
 800852a:	d024      	beq.n	8008576 <__multiply+0xf2>
 800852c:	f104 0e14 	add.w	lr, r4, #20
 8008530:	46a9      	mov	r9, r5
 8008532:	f04f 0c00 	mov.w	ip, #0
 8008536:	f85e 2b04 	ldr.w	r2, [lr], #4
 800853a:	f8d9 1000 	ldr.w	r1, [r9]
 800853e:	fa1f fb82 	uxth.w	fp, r2
 8008542:	b289      	uxth	r1, r1
 8008544:	fb0a 110b 	mla	r1, sl, fp, r1
 8008548:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800854c:	f8d9 2000 	ldr.w	r2, [r9]
 8008550:	4461      	add	r1, ip
 8008552:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008556:	fb0a c20b 	mla	r2, sl, fp, ip
 800855a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800855e:	b289      	uxth	r1, r1
 8008560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008564:	4577      	cmp	r7, lr
 8008566:	f849 1b04 	str.w	r1, [r9], #4
 800856a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800856e:	d8e2      	bhi.n	8008536 <__multiply+0xb2>
 8008570:	9a01      	ldr	r2, [sp, #4]
 8008572:	f845 c002 	str.w	ip, [r5, r2]
 8008576:	9a03      	ldr	r2, [sp, #12]
 8008578:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800857c:	3304      	adds	r3, #4
 800857e:	f1b9 0f00 	cmp.w	r9, #0
 8008582:	d020      	beq.n	80085c6 <__multiply+0x142>
 8008584:	6829      	ldr	r1, [r5, #0]
 8008586:	f104 0c14 	add.w	ip, r4, #20
 800858a:	46ae      	mov	lr, r5
 800858c:	f04f 0a00 	mov.w	sl, #0
 8008590:	f8bc b000 	ldrh.w	fp, [ip]
 8008594:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008598:	fb09 220b 	mla	r2, r9, fp, r2
 800859c:	4492      	add	sl, r2
 800859e:	b289      	uxth	r1, r1
 80085a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80085a4:	f84e 1b04 	str.w	r1, [lr], #4
 80085a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085ac:	f8be 1000 	ldrh.w	r1, [lr]
 80085b0:	0c12      	lsrs	r2, r2, #16
 80085b2:	fb09 1102 	mla	r1, r9, r2, r1
 80085b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085ba:	4567      	cmp	r7, ip
 80085bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085c0:	d8e6      	bhi.n	8008590 <__multiply+0x10c>
 80085c2:	9a01      	ldr	r2, [sp, #4]
 80085c4:	50a9      	str	r1, [r5, r2]
 80085c6:	3504      	adds	r5, #4
 80085c8:	e79a      	b.n	8008500 <__multiply+0x7c>
 80085ca:	3e01      	subs	r6, #1
 80085cc:	e79c      	b.n	8008508 <__multiply+0x84>
 80085ce:	bf00      	nop
 80085d0:	0800a7ef 	.word	0x0800a7ef
 80085d4:	0800a860 	.word	0x0800a860

080085d8 <__pow5mult>:
 80085d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085dc:	4615      	mov	r5, r2
 80085de:	f012 0203 	ands.w	r2, r2, #3
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	d007      	beq.n	80085f8 <__pow5mult+0x20>
 80085e8:	4c25      	ldr	r4, [pc, #148]	; (8008680 <__pow5mult+0xa8>)
 80085ea:	3a01      	subs	r2, #1
 80085ec:	2300      	movs	r3, #0
 80085ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085f2:	f7ff fe9b 	bl	800832c <__multadd>
 80085f6:	4607      	mov	r7, r0
 80085f8:	10ad      	asrs	r5, r5, #2
 80085fa:	d03d      	beq.n	8008678 <__pow5mult+0xa0>
 80085fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085fe:	b97c      	cbnz	r4, 8008620 <__pow5mult+0x48>
 8008600:	2010      	movs	r0, #16
 8008602:	f7ff fe1b 	bl	800823c <malloc>
 8008606:	4602      	mov	r2, r0
 8008608:	6270      	str	r0, [r6, #36]	; 0x24
 800860a:	b928      	cbnz	r0, 8008618 <__pow5mult+0x40>
 800860c:	4b1d      	ldr	r3, [pc, #116]	; (8008684 <__pow5mult+0xac>)
 800860e:	481e      	ldr	r0, [pc, #120]	; (8008688 <__pow5mult+0xb0>)
 8008610:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008614:	f000 fc62 	bl	8008edc <__assert_func>
 8008618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800861c:	6004      	str	r4, [r0, #0]
 800861e:	60c4      	str	r4, [r0, #12]
 8008620:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008628:	b94c      	cbnz	r4, 800863e <__pow5mult+0x66>
 800862a:	f240 2171 	movw	r1, #625	; 0x271
 800862e:	4630      	mov	r0, r6
 8008630:	f7ff ff12 	bl	8008458 <__i2b>
 8008634:	2300      	movs	r3, #0
 8008636:	f8c8 0008 	str.w	r0, [r8, #8]
 800863a:	4604      	mov	r4, r0
 800863c:	6003      	str	r3, [r0, #0]
 800863e:	f04f 0900 	mov.w	r9, #0
 8008642:	07eb      	lsls	r3, r5, #31
 8008644:	d50a      	bpl.n	800865c <__pow5mult+0x84>
 8008646:	4639      	mov	r1, r7
 8008648:	4622      	mov	r2, r4
 800864a:	4630      	mov	r0, r6
 800864c:	f7ff ff1a 	bl	8008484 <__multiply>
 8008650:	4639      	mov	r1, r7
 8008652:	4680      	mov	r8, r0
 8008654:	4630      	mov	r0, r6
 8008656:	f7ff fe47 	bl	80082e8 <_Bfree>
 800865a:	4647      	mov	r7, r8
 800865c:	106d      	asrs	r5, r5, #1
 800865e:	d00b      	beq.n	8008678 <__pow5mult+0xa0>
 8008660:	6820      	ldr	r0, [r4, #0]
 8008662:	b938      	cbnz	r0, 8008674 <__pow5mult+0x9c>
 8008664:	4622      	mov	r2, r4
 8008666:	4621      	mov	r1, r4
 8008668:	4630      	mov	r0, r6
 800866a:	f7ff ff0b 	bl	8008484 <__multiply>
 800866e:	6020      	str	r0, [r4, #0]
 8008670:	f8c0 9000 	str.w	r9, [r0]
 8008674:	4604      	mov	r4, r0
 8008676:	e7e4      	b.n	8008642 <__pow5mult+0x6a>
 8008678:	4638      	mov	r0, r7
 800867a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800867e:	bf00      	nop
 8008680:	0800a9b0 	.word	0x0800a9b0
 8008684:	0800a77d 	.word	0x0800a77d
 8008688:	0800a860 	.word	0x0800a860

0800868c <__lshift>:
 800868c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008690:	460c      	mov	r4, r1
 8008692:	6849      	ldr	r1, [r1, #4]
 8008694:	6923      	ldr	r3, [r4, #16]
 8008696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800869a:	68a3      	ldr	r3, [r4, #8]
 800869c:	4607      	mov	r7, r0
 800869e:	4691      	mov	r9, r2
 80086a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086a4:	f108 0601 	add.w	r6, r8, #1
 80086a8:	42b3      	cmp	r3, r6
 80086aa:	db0b      	blt.n	80086c4 <__lshift+0x38>
 80086ac:	4638      	mov	r0, r7
 80086ae:	f7ff fddb 	bl	8008268 <_Balloc>
 80086b2:	4605      	mov	r5, r0
 80086b4:	b948      	cbnz	r0, 80086ca <__lshift+0x3e>
 80086b6:	4602      	mov	r2, r0
 80086b8:	4b2a      	ldr	r3, [pc, #168]	; (8008764 <__lshift+0xd8>)
 80086ba:	482b      	ldr	r0, [pc, #172]	; (8008768 <__lshift+0xdc>)
 80086bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80086c0:	f000 fc0c 	bl	8008edc <__assert_func>
 80086c4:	3101      	adds	r1, #1
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	e7ee      	b.n	80086a8 <__lshift+0x1c>
 80086ca:	2300      	movs	r3, #0
 80086cc:	f100 0114 	add.w	r1, r0, #20
 80086d0:	f100 0210 	add.w	r2, r0, #16
 80086d4:	4618      	mov	r0, r3
 80086d6:	4553      	cmp	r3, sl
 80086d8:	db37      	blt.n	800874a <__lshift+0xbe>
 80086da:	6920      	ldr	r0, [r4, #16]
 80086dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086e0:	f104 0314 	add.w	r3, r4, #20
 80086e4:	f019 091f 	ands.w	r9, r9, #31
 80086e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80086f0:	d02f      	beq.n	8008752 <__lshift+0xc6>
 80086f2:	f1c9 0e20 	rsb	lr, r9, #32
 80086f6:	468a      	mov	sl, r1
 80086f8:	f04f 0c00 	mov.w	ip, #0
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	fa02 f209 	lsl.w	r2, r2, r9
 8008702:	ea42 020c 	orr.w	r2, r2, ip
 8008706:	f84a 2b04 	str.w	r2, [sl], #4
 800870a:	f853 2b04 	ldr.w	r2, [r3], #4
 800870e:	4298      	cmp	r0, r3
 8008710:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008714:	d8f2      	bhi.n	80086fc <__lshift+0x70>
 8008716:	1b03      	subs	r3, r0, r4
 8008718:	3b15      	subs	r3, #21
 800871a:	f023 0303 	bic.w	r3, r3, #3
 800871e:	3304      	adds	r3, #4
 8008720:	f104 0215 	add.w	r2, r4, #21
 8008724:	4290      	cmp	r0, r2
 8008726:	bf38      	it	cc
 8008728:	2304      	movcc	r3, #4
 800872a:	f841 c003 	str.w	ip, [r1, r3]
 800872e:	f1bc 0f00 	cmp.w	ip, #0
 8008732:	d001      	beq.n	8008738 <__lshift+0xac>
 8008734:	f108 0602 	add.w	r6, r8, #2
 8008738:	3e01      	subs	r6, #1
 800873a:	4638      	mov	r0, r7
 800873c:	612e      	str	r6, [r5, #16]
 800873e:	4621      	mov	r1, r4
 8008740:	f7ff fdd2 	bl	80082e8 <_Bfree>
 8008744:	4628      	mov	r0, r5
 8008746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874a:	f842 0f04 	str.w	r0, [r2, #4]!
 800874e:	3301      	adds	r3, #1
 8008750:	e7c1      	b.n	80086d6 <__lshift+0x4a>
 8008752:	3904      	subs	r1, #4
 8008754:	f853 2b04 	ldr.w	r2, [r3], #4
 8008758:	f841 2f04 	str.w	r2, [r1, #4]!
 800875c:	4298      	cmp	r0, r3
 800875e:	d8f9      	bhi.n	8008754 <__lshift+0xc8>
 8008760:	e7ea      	b.n	8008738 <__lshift+0xac>
 8008762:	bf00      	nop
 8008764:	0800a7ef 	.word	0x0800a7ef
 8008768:	0800a860 	.word	0x0800a860

0800876c <__mcmp>:
 800876c:	b530      	push	{r4, r5, lr}
 800876e:	6902      	ldr	r2, [r0, #16]
 8008770:	690c      	ldr	r4, [r1, #16]
 8008772:	1b12      	subs	r2, r2, r4
 8008774:	d10e      	bne.n	8008794 <__mcmp+0x28>
 8008776:	f100 0314 	add.w	r3, r0, #20
 800877a:	3114      	adds	r1, #20
 800877c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008780:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008784:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008788:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800878c:	42a5      	cmp	r5, r4
 800878e:	d003      	beq.n	8008798 <__mcmp+0x2c>
 8008790:	d305      	bcc.n	800879e <__mcmp+0x32>
 8008792:	2201      	movs	r2, #1
 8008794:	4610      	mov	r0, r2
 8008796:	bd30      	pop	{r4, r5, pc}
 8008798:	4283      	cmp	r3, r0
 800879a:	d3f3      	bcc.n	8008784 <__mcmp+0x18>
 800879c:	e7fa      	b.n	8008794 <__mcmp+0x28>
 800879e:	f04f 32ff 	mov.w	r2, #4294967295
 80087a2:	e7f7      	b.n	8008794 <__mcmp+0x28>

080087a4 <__mdiff>:
 80087a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	460c      	mov	r4, r1
 80087aa:	4606      	mov	r6, r0
 80087ac:	4611      	mov	r1, r2
 80087ae:	4620      	mov	r0, r4
 80087b0:	4690      	mov	r8, r2
 80087b2:	f7ff ffdb 	bl	800876c <__mcmp>
 80087b6:	1e05      	subs	r5, r0, #0
 80087b8:	d110      	bne.n	80087dc <__mdiff+0x38>
 80087ba:	4629      	mov	r1, r5
 80087bc:	4630      	mov	r0, r6
 80087be:	f7ff fd53 	bl	8008268 <_Balloc>
 80087c2:	b930      	cbnz	r0, 80087d2 <__mdiff+0x2e>
 80087c4:	4b3a      	ldr	r3, [pc, #232]	; (80088b0 <__mdiff+0x10c>)
 80087c6:	4602      	mov	r2, r0
 80087c8:	f240 2132 	movw	r1, #562	; 0x232
 80087cc:	4839      	ldr	r0, [pc, #228]	; (80088b4 <__mdiff+0x110>)
 80087ce:	f000 fb85 	bl	8008edc <__assert_func>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087dc:	bfa4      	itt	ge
 80087de:	4643      	movge	r3, r8
 80087e0:	46a0      	movge	r8, r4
 80087e2:	4630      	mov	r0, r6
 80087e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80087e8:	bfa6      	itte	ge
 80087ea:	461c      	movge	r4, r3
 80087ec:	2500      	movge	r5, #0
 80087ee:	2501      	movlt	r5, #1
 80087f0:	f7ff fd3a 	bl	8008268 <_Balloc>
 80087f4:	b920      	cbnz	r0, 8008800 <__mdiff+0x5c>
 80087f6:	4b2e      	ldr	r3, [pc, #184]	; (80088b0 <__mdiff+0x10c>)
 80087f8:	4602      	mov	r2, r0
 80087fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80087fe:	e7e5      	b.n	80087cc <__mdiff+0x28>
 8008800:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008804:	6926      	ldr	r6, [r4, #16]
 8008806:	60c5      	str	r5, [r0, #12]
 8008808:	f104 0914 	add.w	r9, r4, #20
 800880c:	f108 0514 	add.w	r5, r8, #20
 8008810:	f100 0e14 	add.w	lr, r0, #20
 8008814:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008818:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800881c:	f108 0210 	add.w	r2, r8, #16
 8008820:	46f2      	mov	sl, lr
 8008822:	2100      	movs	r1, #0
 8008824:	f859 3b04 	ldr.w	r3, [r9], #4
 8008828:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800882c:	fa1f f883 	uxth.w	r8, r3
 8008830:	fa11 f18b 	uxtah	r1, r1, fp
 8008834:	0c1b      	lsrs	r3, r3, #16
 8008836:	eba1 0808 	sub.w	r8, r1, r8
 800883a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800883e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008842:	fa1f f888 	uxth.w	r8, r8
 8008846:	1419      	asrs	r1, r3, #16
 8008848:	454e      	cmp	r6, r9
 800884a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800884e:	f84a 3b04 	str.w	r3, [sl], #4
 8008852:	d8e7      	bhi.n	8008824 <__mdiff+0x80>
 8008854:	1b33      	subs	r3, r6, r4
 8008856:	3b15      	subs	r3, #21
 8008858:	f023 0303 	bic.w	r3, r3, #3
 800885c:	3304      	adds	r3, #4
 800885e:	3415      	adds	r4, #21
 8008860:	42a6      	cmp	r6, r4
 8008862:	bf38      	it	cc
 8008864:	2304      	movcc	r3, #4
 8008866:	441d      	add	r5, r3
 8008868:	4473      	add	r3, lr
 800886a:	469e      	mov	lr, r3
 800886c:	462e      	mov	r6, r5
 800886e:	4566      	cmp	r6, ip
 8008870:	d30e      	bcc.n	8008890 <__mdiff+0xec>
 8008872:	f10c 0203 	add.w	r2, ip, #3
 8008876:	1b52      	subs	r2, r2, r5
 8008878:	f022 0203 	bic.w	r2, r2, #3
 800887c:	3d03      	subs	r5, #3
 800887e:	45ac      	cmp	ip, r5
 8008880:	bf38      	it	cc
 8008882:	2200      	movcc	r2, #0
 8008884:	441a      	add	r2, r3
 8008886:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800888a:	b17b      	cbz	r3, 80088ac <__mdiff+0x108>
 800888c:	6107      	str	r7, [r0, #16]
 800888e:	e7a3      	b.n	80087d8 <__mdiff+0x34>
 8008890:	f856 8b04 	ldr.w	r8, [r6], #4
 8008894:	fa11 f288 	uxtah	r2, r1, r8
 8008898:	1414      	asrs	r4, r2, #16
 800889a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800889e:	b292      	uxth	r2, r2
 80088a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80088a4:	f84e 2b04 	str.w	r2, [lr], #4
 80088a8:	1421      	asrs	r1, r4, #16
 80088aa:	e7e0      	b.n	800886e <__mdiff+0xca>
 80088ac:	3f01      	subs	r7, #1
 80088ae:	e7ea      	b.n	8008886 <__mdiff+0xe2>
 80088b0:	0800a7ef 	.word	0x0800a7ef
 80088b4:	0800a860 	.word	0x0800a860

080088b8 <__d2b>:
 80088b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088bc:	4689      	mov	r9, r1
 80088be:	2101      	movs	r1, #1
 80088c0:	ec57 6b10 	vmov	r6, r7, d0
 80088c4:	4690      	mov	r8, r2
 80088c6:	f7ff fccf 	bl	8008268 <_Balloc>
 80088ca:	4604      	mov	r4, r0
 80088cc:	b930      	cbnz	r0, 80088dc <__d2b+0x24>
 80088ce:	4602      	mov	r2, r0
 80088d0:	4b25      	ldr	r3, [pc, #148]	; (8008968 <__d2b+0xb0>)
 80088d2:	4826      	ldr	r0, [pc, #152]	; (800896c <__d2b+0xb4>)
 80088d4:	f240 310a 	movw	r1, #778	; 0x30a
 80088d8:	f000 fb00 	bl	8008edc <__assert_func>
 80088dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80088e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088e4:	bb35      	cbnz	r5, 8008934 <__d2b+0x7c>
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	d028      	beq.n	800893e <__d2b+0x86>
 80088ec:	4668      	mov	r0, sp
 80088ee:	9600      	str	r6, [sp, #0]
 80088f0:	f7ff fd82 	bl	80083f8 <__lo0bits>
 80088f4:	9900      	ldr	r1, [sp, #0]
 80088f6:	b300      	cbz	r0, 800893a <__d2b+0x82>
 80088f8:	9a01      	ldr	r2, [sp, #4]
 80088fa:	f1c0 0320 	rsb	r3, r0, #32
 80088fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008902:	430b      	orrs	r3, r1
 8008904:	40c2      	lsrs	r2, r0
 8008906:	6163      	str	r3, [r4, #20]
 8008908:	9201      	str	r2, [sp, #4]
 800890a:	9b01      	ldr	r3, [sp, #4]
 800890c:	61a3      	str	r3, [r4, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	bf14      	ite	ne
 8008912:	2202      	movne	r2, #2
 8008914:	2201      	moveq	r2, #1
 8008916:	6122      	str	r2, [r4, #16]
 8008918:	b1d5      	cbz	r5, 8008950 <__d2b+0x98>
 800891a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800891e:	4405      	add	r5, r0
 8008920:	f8c9 5000 	str.w	r5, [r9]
 8008924:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008928:	f8c8 0000 	str.w	r0, [r8]
 800892c:	4620      	mov	r0, r4
 800892e:	b003      	add	sp, #12
 8008930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008938:	e7d5      	b.n	80088e6 <__d2b+0x2e>
 800893a:	6161      	str	r1, [r4, #20]
 800893c:	e7e5      	b.n	800890a <__d2b+0x52>
 800893e:	a801      	add	r0, sp, #4
 8008940:	f7ff fd5a 	bl	80083f8 <__lo0bits>
 8008944:	9b01      	ldr	r3, [sp, #4]
 8008946:	6163      	str	r3, [r4, #20]
 8008948:	2201      	movs	r2, #1
 800894a:	6122      	str	r2, [r4, #16]
 800894c:	3020      	adds	r0, #32
 800894e:	e7e3      	b.n	8008918 <__d2b+0x60>
 8008950:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008954:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008958:	f8c9 0000 	str.w	r0, [r9]
 800895c:	6918      	ldr	r0, [r3, #16]
 800895e:	f7ff fd2b 	bl	80083b8 <__hi0bits>
 8008962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008966:	e7df      	b.n	8008928 <__d2b+0x70>
 8008968:	0800a7ef 	.word	0x0800a7ef
 800896c:	0800a860 	.word	0x0800a860

08008970 <_calloc_r>:
 8008970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008972:	fba1 2402 	umull	r2, r4, r1, r2
 8008976:	b94c      	cbnz	r4, 800898c <_calloc_r+0x1c>
 8008978:	4611      	mov	r1, r2
 800897a:	9201      	str	r2, [sp, #4]
 800897c:	f000 f87a 	bl	8008a74 <_malloc_r>
 8008980:	9a01      	ldr	r2, [sp, #4]
 8008982:	4605      	mov	r5, r0
 8008984:	b930      	cbnz	r0, 8008994 <_calloc_r+0x24>
 8008986:	4628      	mov	r0, r5
 8008988:	b003      	add	sp, #12
 800898a:	bd30      	pop	{r4, r5, pc}
 800898c:	220c      	movs	r2, #12
 800898e:	6002      	str	r2, [r0, #0]
 8008990:	2500      	movs	r5, #0
 8008992:	e7f8      	b.n	8008986 <_calloc_r+0x16>
 8008994:	4621      	mov	r1, r4
 8008996:	f7fd fdf1 	bl	800657c <memset>
 800899a:	e7f4      	b.n	8008986 <_calloc_r+0x16>

0800899c <_free_r>:
 800899c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800899e:	2900      	cmp	r1, #0
 80089a0:	d044      	beq.n	8008a2c <_free_r+0x90>
 80089a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089a6:	9001      	str	r0, [sp, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f1a1 0404 	sub.w	r4, r1, #4
 80089ae:	bfb8      	it	lt
 80089b0:	18e4      	addlt	r4, r4, r3
 80089b2:	f000 fb19 	bl	8008fe8 <__malloc_lock>
 80089b6:	4a1e      	ldr	r2, [pc, #120]	; (8008a30 <_free_r+0x94>)
 80089b8:	9801      	ldr	r0, [sp, #4]
 80089ba:	6813      	ldr	r3, [r2, #0]
 80089bc:	b933      	cbnz	r3, 80089cc <_free_r+0x30>
 80089be:	6063      	str	r3, [r4, #4]
 80089c0:	6014      	str	r4, [r2, #0]
 80089c2:	b003      	add	sp, #12
 80089c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089c8:	f000 bb14 	b.w	8008ff4 <__malloc_unlock>
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d908      	bls.n	80089e2 <_free_r+0x46>
 80089d0:	6825      	ldr	r5, [r4, #0]
 80089d2:	1961      	adds	r1, r4, r5
 80089d4:	428b      	cmp	r3, r1
 80089d6:	bf01      	itttt	eq
 80089d8:	6819      	ldreq	r1, [r3, #0]
 80089da:	685b      	ldreq	r3, [r3, #4]
 80089dc:	1949      	addeq	r1, r1, r5
 80089de:	6021      	streq	r1, [r4, #0]
 80089e0:	e7ed      	b.n	80089be <_free_r+0x22>
 80089e2:	461a      	mov	r2, r3
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	b10b      	cbz	r3, 80089ec <_free_r+0x50>
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	d9fa      	bls.n	80089e2 <_free_r+0x46>
 80089ec:	6811      	ldr	r1, [r2, #0]
 80089ee:	1855      	adds	r5, r2, r1
 80089f0:	42a5      	cmp	r5, r4
 80089f2:	d10b      	bne.n	8008a0c <_free_r+0x70>
 80089f4:	6824      	ldr	r4, [r4, #0]
 80089f6:	4421      	add	r1, r4
 80089f8:	1854      	adds	r4, r2, r1
 80089fa:	42a3      	cmp	r3, r4
 80089fc:	6011      	str	r1, [r2, #0]
 80089fe:	d1e0      	bne.n	80089c2 <_free_r+0x26>
 8008a00:	681c      	ldr	r4, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	6053      	str	r3, [r2, #4]
 8008a06:	4421      	add	r1, r4
 8008a08:	6011      	str	r1, [r2, #0]
 8008a0a:	e7da      	b.n	80089c2 <_free_r+0x26>
 8008a0c:	d902      	bls.n	8008a14 <_free_r+0x78>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	6003      	str	r3, [r0, #0]
 8008a12:	e7d6      	b.n	80089c2 <_free_r+0x26>
 8008a14:	6825      	ldr	r5, [r4, #0]
 8008a16:	1961      	adds	r1, r4, r5
 8008a18:	428b      	cmp	r3, r1
 8008a1a:	bf04      	itt	eq
 8008a1c:	6819      	ldreq	r1, [r3, #0]
 8008a1e:	685b      	ldreq	r3, [r3, #4]
 8008a20:	6063      	str	r3, [r4, #4]
 8008a22:	bf04      	itt	eq
 8008a24:	1949      	addeq	r1, r1, r5
 8008a26:	6021      	streq	r1, [r4, #0]
 8008a28:	6054      	str	r4, [r2, #4]
 8008a2a:	e7ca      	b.n	80089c2 <_free_r+0x26>
 8008a2c:	b003      	add	sp, #12
 8008a2e:	bd30      	pop	{r4, r5, pc}
 8008a30:	20003bf4 	.word	0x20003bf4

08008a34 <sbrk_aligned>:
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	4e0e      	ldr	r6, [pc, #56]	; (8008a70 <sbrk_aligned+0x3c>)
 8008a38:	460c      	mov	r4, r1
 8008a3a:	6831      	ldr	r1, [r6, #0]
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	b911      	cbnz	r1, 8008a46 <sbrk_aligned+0x12>
 8008a40:	f000 f9e6 	bl	8008e10 <_sbrk_r>
 8008a44:	6030      	str	r0, [r6, #0]
 8008a46:	4621      	mov	r1, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 f9e1 	bl	8008e10 <_sbrk_r>
 8008a4e:	1c43      	adds	r3, r0, #1
 8008a50:	d00a      	beq.n	8008a68 <sbrk_aligned+0x34>
 8008a52:	1cc4      	adds	r4, r0, #3
 8008a54:	f024 0403 	bic.w	r4, r4, #3
 8008a58:	42a0      	cmp	r0, r4
 8008a5a:	d007      	beq.n	8008a6c <sbrk_aligned+0x38>
 8008a5c:	1a21      	subs	r1, r4, r0
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f000 f9d6 	bl	8008e10 <_sbrk_r>
 8008a64:	3001      	adds	r0, #1
 8008a66:	d101      	bne.n	8008a6c <sbrk_aligned+0x38>
 8008a68:	f04f 34ff 	mov.w	r4, #4294967295
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	20003bf8 	.word	0x20003bf8

08008a74 <_malloc_r>:
 8008a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a78:	1ccd      	adds	r5, r1, #3
 8008a7a:	f025 0503 	bic.w	r5, r5, #3
 8008a7e:	3508      	adds	r5, #8
 8008a80:	2d0c      	cmp	r5, #12
 8008a82:	bf38      	it	cc
 8008a84:	250c      	movcc	r5, #12
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	4607      	mov	r7, r0
 8008a8a:	db01      	blt.n	8008a90 <_malloc_r+0x1c>
 8008a8c:	42a9      	cmp	r1, r5
 8008a8e:	d905      	bls.n	8008a9c <_malloc_r+0x28>
 8008a90:	230c      	movs	r3, #12
 8008a92:	603b      	str	r3, [r7, #0]
 8008a94:	2600      	movs	r6, #0
 8008a96:	4630      	mov	r0, r6
 8008a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a9c:	4e2e      	ldr	r6, [pc, #184]	; (8008b58 <_malloc_r+0xe4>)
 8008a9e:	f000 faa3 	bl	8008fe8 <__malloc_lock>
 8008aa2:	6833      	ldr	r3, [r6, #0]
 8008aa4:	461c      	mov	r4, r3
 8008aa6:	bb34      	cbnz	r4, 8008af6 <_malloc_r+0x82>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f7ff ffc2 	bl	8008a34 <sbrk_aligned>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	d14d      	bne.n	8008b52 <_malloc_r+0xde>
 8008ab6:	6834      	ldr	r4, [r6, #0]
 8008ab8:	4626      	mov	r6, r4
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	d140      	bne.n	8008b40 <_malloc_r+0xcc>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	eb04 0803 	add.w	r8, r4, r3
 8008ac8:	f000 f9a2 	bl	8008e10 <_sbrk_r>
 8008acc:	4580      	cmp	r8, r0
 8008ace:	d13a      	bne.n	8008b46 <_malloc_r+0xd2>
 8008ad0:	6821      	ldr	r1, [r4, #0]
 8008ad2:	3503      	adds	r5, #3
 8008ad4:	1a6d      	subs	r5, r5, r1
 8008ad6:	f025 0503 	bic.w	r5, r5, #3
 8008ada:	3508      	adds	r5, #8
 8008adc:	2d0c      	cmp	r5, #12
 8008ade:	bf38      	it	cc
 8008ae0:	250c      	movcc	r5, #12
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f7ff ffa5 	bl	8008a34 <sbrk_aligned>
 8008aea:	3001      	adds	r0, #1
 8008aec:	d02b      	beq.n	8008b46 <_malloc_r+0xd2>
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	442b      	add	r3, r5
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	e00e      	b.n	8008b14 <_malloc_r+0xa0>
 8008af6:	6822      	ldr	r2, [r4, #0]
 8008af8:	1b52      	subs	r2, r2, r5
 8008afa:	d41e      	bmi.n	8008b3a <_malloc_r+0xc6>
 8008afc:	2a0b      	cmp	r2, #11
 8008afe:	d916      	bls.n	8008b2e <_malloc_r+0xba>
 8008b00:	1961      	adds	r1, r4, r5
 8008b02:	42a3      	cmp	r3, r4
 8008b04:	6025      	str	r5, [r4, #0]
 8008b06:	bf18      	it	ne
 8008b08:	6059      	strne	r1, [r3, #4]
 8008b0a:	6863      	ldr	r3, [r4, #4]
 8008b0c:	bf08      	it	eq
 8008b0e:	6031      	streq	r1, [r6, #0]
 8008b10:	5162      	str	r2, [r4, r5]
 8008b12:	604b      	str	r3, [r1, #4]
 8008b14:	4638      	mov	r0, r7
 8008b16:	f104 060b 	add.w	r6, r4, #11
 8008b1a:	f000 fa6b 	bl	8008ff4 <__malloc_unlock>
 8008b1e:	f026 0607 	bic.w	r6, r6, #7
 8008b22:	1d23      	adds	r3, r4, #4
 8008b24:	1af2      	subs	r2, r6, r3
 8008b26:	d0b6      	beq.n	8008a96 <_malloc_r+0x22>
 8008b28:	1b9b      	subs	r3, r3, r6
 8008b2a:	50a3      	str	r3, [r4, r2]
 8008b2c:	e7b3      	b.n	8008a96 <_malloc_r+0x22>
 8008b2e:	6862      	ldr	r2, [r4, #4]
 8008b30:	42a3      	cmp	r3, r4
 8008b32:	bf0c      	ite	eq
 8008b34:	6032      	streq	r2, [r6, #0]
 8008b36:	605a      	strne	r2, [r3, #4]
 8008b38:	e7ec      	b.n	8008b14 <_malloc_r+0xa0>
 8008b3a:	4623      	mov	r3, r4
 8008b3c:	6864      	ldr	r4, [r4, #4]
 8008b3e:	e7b2      	b.n	8008aa6 <_malloc_r+0x32>
 8008b40:	4634      	mov	r4, r6
 8008b42:	6876      	ldr	r6, [r6, #4]
 8008b44:	e7b9      	b.n	8008aba <_malloc_r+0x46>
 8008b46:	230c      	movs	r3, #12
 8008b48:	603b      	str	r3, [r7, #0]
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	f000 fa52 	bl	8008ff4 <__malloc_unlock>
 8008b50:	e7a1      	b.n	8008a96 <_malloc_r+0x22>
 8008b52:	6025      	str	r5, [r4, #0]
 8008b54:	e7de      	b.n	8008b14 <_malloc_r+0xa0>
 8008b56:	bf00      	nop
 8008b58:	20003bf4 	.word	0x20003bf4

08008b5c <__sfputc_r>:
 8008b5c:	6893      	ldr	r3, [r2, #8]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	b410      	push	{r4}
 8008b64:	6093      	str	r3, [r2, #8]
 8008b66:	da08      	bge.n	8008b7a <__sfputc_r+0x1e>
 8008b68:	6994      	ldr	r4, [r2, #24]
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	db01      	blt.n	8008b72 <__sfputc_r+0x16>
 8008b6e:	290a      	cmp	r1, #10
 8008b70:	d103      	bne.n	8008b7a <__sfputc_r+0x1e>
 8008b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b76:	f7fe ba01 	b.w	8006f7c <__swbuf_r>
 8008b7a:	6813      	ldr	r3, [r2, #0]
 8008b7c:	1c58      	adds	r0, r3, #1
 8008b7e:	6010      	str	r0, [r2, #0]
 8008b80:	7019      	strb	r1, [r3, #0]
 8008b82:	4608      	mov	r0, r1
 8008b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <__sfputs_r>:
 8008b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	4614      	mov	r4, r2
 8008b92:	18d5      	adds	r5, r2, r3
 8008b94:	42ac      	cmp	r4, r5
 8008b96:	d101      	bne.n	8008b9c <__sfputs_r+0x12>
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e007      	b.n	8008bac <__sfputs_r+0x22>
 8008b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba0:	463a      	mov	r2, r7
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ffda 	bl	8008b5c <__sfputc_r>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d1f3      	bne.n	8008b94 <__sfputs_r+0xa>
 8008bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bb0 <_vfiprintf_r>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	b09d      	sub	sp, #116	; 0x74
 8008bb8:	4614      	mov	r4, r2
 8008bba:	4698      	mov	r8, r3
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	b118      	cbz	r0, 8008bc8 <_vfiprintf_r+0x18>
 8008bc0:	6983      	ldr	r3, [r0, #24]
 8008bc2:	b90b      	cbnz	r3, 8008bc8 <_vfiprintf_r+0x18>
 8008bc4:	f7ff fa30 	bl	8008028 <__sinit>
 8008bc8:	4b89      	ldr	r3, [pc, #548]	; (8008df0 <_vfiprintf_r+0x240>)
 8008bca:	429d      	cmp	r5, r3
 8008bcc:	d11b      	bne.n	8008c06 <_vfiprintf_r+0x56>
 8008bce:	6875      	ldr	r5, [r6, #4]
 8008bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bd2:	07d9      	lsls	r1, r3, #31
 8008bd4:	d405      	bmi.n	8008be2 <_vfiprintf_r+0x32>
 8008bd6:	89ab      	ldrh	r3, [r5, #12]
 8008bd8:	059a      	lsls	r2, r3, #22
 8008bda:	d402      	bmi.n	8008be2 <_vfiprintf_r+0x32>
 8008bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bde:	f7ff fac6 	bl	800816e <__retarget_lock_acquire_recursive>
 8008be2:	89ab      	ldrh	r3, [r5, #12]
 8008be4:	071b      	lsls	r3, r3, #28
 8008be6:	d501      	bpl.n	8008bec <_vfiprintf_r+0x3c>
 8008be8:	692b      	ldr	r3, [r5, #16]
 8008bea:	b9eb      	cbnz	r3, 8008c28 <_vfiprintf_r+0x78>
 8008bec:	4629      	mov	r1, r5
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7fe fa16 	bl	8007020 <__swsetup_r>
 8008bf4:	b1c0      	cbz	r0, 8008c28 <_vfiprintf_r+0x78>
 8008bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bf8:	07dc      	lsls	r4, r3, #31
 8008bfa:	d50e      	bpl.n	8008c1a <_vfiprintf_r+0x6a>
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008c00:	b01d      	add	sp, #116	; 0x74
 8008c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c06:	4b7b      	ldr	r3, [pc, #492]	; (8008df4 <_vfiprintf_r+0x244>)
 8008c08:	429d      	cmp	r5, r3
 8008c0a:	d101      	bne.n	8008c10 <_vfiprintf_r+0x60>
 8008c0c:	68b5      	ldr	r5, [r6, #8]
 8008c0e:	e7df      	b.n	8008bd0 <_vfiprintf_r+0x20>
 8008c10:	4b79      	ldr	r3, [pc, #484]	; (8008df8 <_vfiprintf_r+0x248>)
 8008c12:	429d      	cmp	r5, r3
 8008c14:	bf08      	it	eq
 8008c16:	68f5      	ldreq	r5, [r6, #12]
 8008c18:	e7da      	b.n	8008bd0 <_vfiprintf_r+0x20>
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	0598      	lsls	r0, r3, #22
 8008c1e:	d4ed      	bmi.n	8008bfc <_vfiprintf_r+0x4c>
 8008c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c22:	f7ff faa5 	bl	8008170 <__retarget_lock_release_recursive>
 8008c26:	e7e9      	b.n	8008bfc <_vfiprintf_r+0x4c>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c2c:	2320      	movs	r3, #32
 8008c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c36:	2330      	movs	r3, #48	; 0x30
 8008c38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008dfc <_vfiprintf_r+0x24c>
 8008c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c40:	f04f 0901 	mov.w	r9, #1
 8008c44:	4623      	mov	r3, r4
 8008c46:	469a      	mov	sl, r3
 8008c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c4c:	b10a      	cbz	r2, 8008c52 <_vfiprintf_r+0xa2>
 8008c4e:	2a25      	cmp	r2, #37	; 0x25
 8008c50:	d1f9      	bne.n	8008c46 <_vfiprintf_r+0x96>
 8008c52:	ebba 0b04 	subs.w	fp, sl, r4
 8008c56:	d00b      	beq.n	8008c70 <_vfiprintf_r+0xc0>
 8008c58:	465b      	mov	r3, fp
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f7ff ff93 	bl	8008b8a <__sfputs_r>
 8008c64:	3001      	adds	r0, #1
 8008c66:	f000 80aa 	beq.w	8008dbe <_vfiprintf_r+0x20e>
 8008c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c6c:	445a      	add	r2, fp
 8008c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c70:	f89a 3000 	ldrb.w	r3, [sl]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80a2 	beq.w	8008dbe <_vfiprintf_r+0x20e>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c84:	f10a 0a01 	add.w	sl, sl, #1
 8008c88:	9304      	str	r3, [sp, #16]
 8008c8a:	9307      	str	r3, [sp, #28]
 8008c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c90:	931a      	str	r3, [sp, #104]	; 0x68
 8008c92:	4654      	mov	r4, sl
 8008c94:	2205      	movs	r2, #5
 8008c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9a:	4858      	ldr	r0, [pc, #352]	; (8008dfc <_vfiprintf_r+0x24c>)
 8008c9c:	f7f7 fab8 	bl	8000210 <memchr>
 8008ca0:	9a04      	ldr	r2, [sp, #16]
 8008ca2:	b9d8      	cbnz	r0, 8008cdc <_vfiprintf_r+0x12c>
 8008ca4:	06d1      	lsls	r1, r2, #27
 8008ca6:	bf44      	itt	mi
 8008ca8:	2320      	movmi	r3, #32
 8008caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cae:	0713      	lsls	r3, r2, #28
 8008cb0:	bf44      	itt	mi
 8008cb2:	232b      	movmi	r3, #43	; 0x2b
 8008cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008cbe:	d015      	beq.n	8008cec <_vfiprintf_r+0x13c>
 8008cc0:	9a07      	ldr	r2, [sp, #28]
 8008cc2:	4654      	mov	r4, sl
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	f04f 0c0a 	mov.w	ip, #10
 8008cca:	4621      	mov	r1, r4
 8008ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cd0:	3b30      	subs	r3, #48	; 0x30
 8008cd2:	2b09      	cmp	r3, #9
 8008cd4:	d94e      	bls.n	8008d74 <_vfiprintf_r+0x1c4>
 8008cd6:	b1b0      	cbz	r0, 8008d06 <_vfiprintf_r+0x156>
 8008cd8:	9207      	str	r2, [sp, #28]
 8008cda:	e014      	b.n	8008d06 <_vfiprintf_r+0x156>
 8008cdc:	eba0 0308 	sub.w	r3, r0, r8
 8008ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	9304      	str	r3, [sp, #16]
 8008ce8:	46a2      	mov	sl, r4
 8008cea:	e7d2      	b.n	8008c92 <_vfiprintf_r+0xe2>
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	1d19      	adds	r1, r3, #4
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	9103      	str	r1, [sp, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bfbb      	ittet	lt
 8008cf8:	425b      	neglt	r3, r3
 8008cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008cfe:	9307      	strge	r3, [sp, #28]
 8008d00:	9307      	strlt	r3, [sp, #28]
 8008d02:	bfb8      	it	lt
 8008d04:	9204      	strlt	r2, [sp, #16]
 8008d06:	7823      	ldrb	r3, [r4, #0]
 8008d08:	2b2e      	cmp	r3, #46	; 0x2e
 8008d0a:	d10c      	bne.n	8008d26 <_vfiprintf_r+0x176>
 8008d0c:	7863      	ldrb	r3, [r4, #1]
 8008d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d10:	d135      	bne.n	8008d7e <_vfiprintf_r+0x1ce>
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	1d1a      	adds	r2, r3, #4
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	9203      	str	r2, [sp, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	bfb8      	it	lt
 8008d1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d22:	3402      	adds	r4, #2
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e0c <_vfiprintf_r+0x25c>
 8008d2a:	7821      	ldrb	r1, [r4, #0]
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	4650      	mov	r0, sl
 8008d30:	f7f7 fa6e 	bl	8000210 <memchr>
 8008d34:	b140      	cbz	r0, 8008d48 <_vfiprintf_r+0x198>
 8008d36:	2340      	movs	r3, #64	; 0x40
 8008d38:	eba0 000a 	sub.w	r0, r0, sl
 8008d3c:	fa03 f000 	lsl.w	r0, r3, r0
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	4303      	orrs	r3, r0
 8008d44:	3401      	adds	r4, #1
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4c:	482c      	ldr	r0, [pc, #176]	; (8008e00 <_vfiprintf_r+0x250>)
 8008d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d52:	2206      	movs	r2, #6
 8008d54:	f7f7 fa5c 	bl	8000210 <memchr>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d03f      	beq.n	8008ddc <_vfiprintf_r+0x22c>
 8008d5c:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <_vfiprintf_r+0x254>)
 8008d5e:	bb1b      	cbnz	r3, 8008da8 <_vfiprintf_r+0x1f8>
 8008d60:	9b03      	ldr	r3, [sp, #12]
 8008d62:	3307      	adds	r3, #7
 8008d64:	f023 0307 	bic.w	r3, r3, #7
 8008d68:	3308      	adds	r3, #8
 8008d6a:	9303      	str	r3, [sp, #12]
 8008d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6e:	443b      	add	r3, r7
 8008d70:	9309      	str	r3, [sp, #36]	; 0x24
 8008d72:	e767      	b.n	8008c44 <_vfiprintf_r+0x94>
 8008d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d78:	460c      	mov	r4, r1
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	e7a5      	b.n	8008cca <_vfiprintf_r+0x11a>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	3401      	adds	r4, #1
 8008d82:	9305      	str	r3, [sp, #20]
 8008d84:	4619      	mov	r1, r3
 8008d86:	f04f 0c0a 	mov.w	ip, #10
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d90:	3a30      	subs	r2, #48	; 0x30
 8008d92:	2a09      	cmp	r2, #9
 8008d94:	d903      	bls.n	8008d9e <_vfiprintf_r+0x1ee>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0c5      	beq.n	8008d26 <_vfiprintf_r+0x176>
 8008d9a:	9105      	str	r1, [sp, #20]
 8008d9c:	e7c3      	b.n	8008d26 <_vfiprintf_r+0x176>
 8008d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008da2:	4604      	mov	r4, r0
 8008da4:	2301      	movs	r3, #1
 8008da6:	e7f0      	b.n	8008d8a <_vfiprintf_r+0x1da>
 8008da8:	ab03      	add	r3, sp, #12
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	462a      	mov	r2, r5
 8008dae:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <_vfiprintf_r+0x258>)
 8008db0:	a904      	add	r1, sp, #16
 8008db2:	4630      	mov	r0, r6
 8008db4:	f7fd fc8a 	bl	80066cc <_printf_float>
 8008db8:	4607      	mov	r7, r0
 8008dba:	1c78      	adds	r0, r7, #1
 8008dbc:	d1d6      	bne.n	8008d6c <_vfiprintf_r+0x1bc>
 8008dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dc0:	07d9      	lsls	r1, r3, #31
 8008dc2:	d405      	bmi.n	8008dd0 <_vfiprintf_r+0x220>
 8008dc4:	89ab      	ldrh	r3, [r5, #12]
 8008dc6:	059a      	lsls	r2, r3, #22
 8008dc8:	d402      	bmi.n	8008dd0 <_vfiprintf_r+0x220>
 8008dca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dcc:	f7ff f9d0 	bl	8008170 <__retarget_lock_release_recursive>
 8008dd0:	89ab      	ldrh	r3, [r5, #12]
 8008dd2:	065b      	lsls	r3, r3, #25
 8008dd4:	f53f af12 	bmi.w	8008bfc <_vfiprintf_r+0x4c>
 8008dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dda:	e711      	b.n	8008c00 <_vfiprintf_r+0x50>
 8008ddc:	ab03      	add	r3, sp, #12
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	462a      	mov	r2, r5
 8008de2:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <_vfiprintf_r+0x258>)
 8008de4:	a904      	add	r1, sp, #16
 8008de6:	4630      	mov	r0, r6
 8008de8:	f7fd ff14 	bl	8006c14 <_printf_i>
 8008dec:	e7e4      	b.n	8008db8 <_vfiprintf_r+0x208>
 8008dee:	bf00      	nop
 8008df0:	0800a820 	.word	0x0800a820
 8008df4:	0800a840 	.word	0x0800a840
 8008df8:	0800a800 	.word	0x0800a800
 8008dfc:	0800a9bc 	.word	0x0800a9bc
 8008e00:	0800a9c6 	.word	0x0800a9c6
 8008e04:	080066cd 	.word	0x080066cd
 8008e08:	08008b8b 	.word	0x08008b8b
 8008e0c:	0800a9c2 	.word	0x0800a9c2

08008e10 <_sbrk_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4d06      	ldr	r5, [pc, #24]	; (8008e2c <_sbrk_r+0x1c>)
 8008e14:	2300      	movs	r3, #0
 8008e16:	4604      	mov	r4, r0
 8008e18:	4608      	mov	r0, r1
 8008e1a:	602b      	str	r3, [r5, #0]
 8008e1c:	f7f9 fa04 	bl	8002228 <_sbrk>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_sbrk_r+0x1a>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_sbrk_r+0x1a>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20003bfc 	.word	0x20003bfc

08008e30 <__sread>:
 8008e30:	b510      	push	{r4, lr}
 8008e32:	460c      	mov	r4, r1
 8008e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e38:	f000 f8e2 	bl	8009000 <_read_r>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	bfab      	itete	ge
 8008e40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e42:	89a3      	ldrhlt	r3, [r4, #12]
 8008e44:	181b      	addge	r3, r3, r0
 8008e46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e4a:	bfac      	ite	ge
 8008e4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e4e:	81a3      	strhlt	r3, [r4, #12]
 8008e50:	bd10      	pop	{r4, pc}

08008e52 <__swrite>:
 8008e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e56:	461f      	mov	r7, r3
 8008e58:	898b      	ldrh	r3, [r1, #12]
 8008e5a:	05db      	lsls	r3, r3, #23
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	4616      	mov	r6, r2
 8008e62:	d505      	bpl.n	8008e70 <__swrite+0x1e>
 8008e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e68:	2302      	movs	r3, #2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f000 f898 	bl	8008fa0 <_lseek_r>
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e7a:	81a3      	strh	r3, [r4, #12]
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	463b      	mov	r3, r7
 8008e80:	4628      	mov	r0, r5
 8008e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e86:	f000 b817 	b.w	8008eb8 <_write_r>

08008e8a <__sseek>:
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e92:	f000 f885 	bl	8008fa0 <_lseek_r>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	bf15      	itete	ne
 8008e9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ea2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ea6:	81a3      	strheq	r3, [r4, #12]
 8008ea8:	bf18      	it	ne
 8008eaa:	81a3      	strhne	r3, [r4, #12]
 8008eac:	bd10      	pop	{r4, pc}

08008eae <__sclose>:
 8008eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb2:	f000 b831 	b.w	8008f18 <_close_r>
	...

08008eb8 <_write_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4d07      	ldr	r5, [pc, #28]	; (8008ed8 <_write_r+0x20>)
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	4608      	mov	r0, r1
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	602a      	str	r2, [r5, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f7f9 f994 	bl	80021f4 <_write>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_write_r+0x1e>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_write_r+0x1e>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	20003bfc 	.word	0x20003bfc

08008edc <__assert_func>:
 8008edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ede:	4614      	mov	r4, r2
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <__assert_func+0x2c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	68d8      	ldr	r0, [r3, #12]
 8008eea:	b14c      	cbz	r4, 8008f00 <__assert_func+0x24>
 8008eec:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <__assert_func+0x30>)
 8008eee:	9100      	str	r1, [sp, #0]
 8008ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ef4:	4906      	ldr	r1, [pc, #24]	; (8008f10 <__assert_func+0x34>)
 8008ef6:	462b      	mov	r3, r5
 8008ef8:	f000 f81e 	bl	8008f38 <fiprintf>
 8008efc:	f000 f89f 	bl	800903e <abort>
 8008f00:	4b04      	ldr	r3, [pc, #16]	; (8008f14 <__assert_func+0x38>)
 8008f02:	461c      	mov	r4, r3
 8008f04:	e7f3      	b.n	8008eee <__assert_func+0x12>
 8008f06:	bf00      	nop
 8008f08:	20000024 	.word	0x20000024
 8008f0c:	0800a9cd 	.word	0x0800a9cd
 8008f10:	0800a9da 	.word	0x0800a9da
 8008f14:	0800aa08 	.word	0x0800aa08

08008f18 <_close_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d06      	ldr	r5, [pc, #24]	; (8008f34 <_close_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7f9 f974 	bl	8002210 <_close>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_close_r+0x1a>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_close_r+0x1a>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20003bfc 	.word	0x20003bfc

08008f38 <fiprintf>:
 8008f38:	b40e      	push	{r1, r2, r3}
 8008f3a:	b503      	push	{r0, r1, lr}
 8008f3c:	4601      	mov	r1, r0
 8008f3e:	ab03      	add	r3, sp, #12
 8008f40:	4805      	ldr	r0, [pc, #20]	; (8008f58 <fiprintf+0x20>)
 8008f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f46:	6800      	ldr	r0, [r0, #0]
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	f7ff fe31 	bl	8008bb0 <_vfiprintf_r>
 8008f4e:	b002      	add	sp, #8
 8008f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f54:	b003      	add	sp, #12
 8008f56:	4770      	bx	lr
 8008f58:	20000024 	.word	0x20000024

08008f5c <_fstat_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4d07      	ldr	r5, [pc, #28]	; (8008f7c <_fstat_r+0x20>)
 8008f60:	2300      	movs	r3, #0
 8008f62:	4604      	mov	r4, r0
 8008f64:	4608      	mov	r0, r1
 8008f66:	4611      	mov	r1, r2
 8008f68:	602b      	str	r3, [r5, #0]
 8008f6a:	f7f9 f954 	bl	8002216 <_fstat>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d102      	bne.n	8008f78 <_fstat_r+0x1c>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	b103      	cbz	r3, 8008f78 <_fstat_r+0x1c>
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	bd38      	pop	{r3, r4, r5, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20003bfc 	.word	0x20003bfc

08008f80 <_isatty_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4d06      	ldr	r5, [pc, #24]	; (8008f9c <_isatty_r+0x1c>)
 8008f84:	2300      	movs	r3, #0
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	602b      	str	r3, [r5, #0]
 8008f8c:	f7f9 f948 	bl	8002220 <_isatty>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_isatty_r+0x1a>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_isatty_r+0x1a>
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	20003bfc 	.word	0x20003bfc

08008fa0 <_lseek_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d07      	ldr	r5, [pc, #28]	; (8008fc0 <_lseek_r+0x20>)
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	4608      	mov	r0, r1
 8008fa8:	4611      	mov	r1, r2
 8008faa:	2200      	movs	r2, #0
 8008fac:	602a      	str	r2, [r5, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f7f9 f938 	bl	8002224 <_lseek>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_lseek_r+0x1e>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_lseek_r+0x1e>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	20003bfc 	.word	0x20003bfc

08008fc4 <__ascii_mbtowc>:
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	b901      	cbnz	r1, 8008fca <__ascii_mbtowc+0x6>
 8008fc8:	a901      	add	r1, sp, #4
 8008fca:	b142      	cbz	r2, 8008fde <__ascii_mbtowc+0x1a>
 8008fcc:	b14b      	cbz	r3, 8008fe2 <__ascii_mbtowc+0x1e>
 8008fce:	7813      	ldrb	r3, [r2, #0]
 8008fd0:	600b      	str	r3, [r1, #0]
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	1e10      	subs	r0, r2, #0
 8008fd6:	bf18      	it	ne
 8008fd8:	2001      	movne	r0, #1
 8008fda:	b002      	add	sp, #8
 8008fdc:	4770      	bx	lr
 8008fde:	4610      	mov	r0, r2
 8008fe0:	e7fb      	b.n	8008fda <__ascii_mbtowc+0x16>
 8008fe2:	f06f 0001 	mvn.w	r0, #1
 8008fe6:	e7f8      	b.n	8008fda <__ascii_mbtowc+0x16>

08008fe8 <__malloc_lock>:
 8008fe8:	4801      	ldr	r0, [pc, #4]	; (8008ff0 <__malloc_lock+0x8>)
 8008fea:	f7ff b8c0 	b.w	800816e <__retarget_lock_acquire_recursive>
 8008fee:	bf00      	nop
 8008ff0:	20003bf0 	.word	0x20003bf0

08008ff4 <__malloc_unlock>:
 8008ff4:	4801      	ldr	r0, [pc, #4]	; (8008ffc <__malloc_unlock+0x8>)
 8008ff6:	f7ff b8bb 	b.w	8008170 <__retarget_lock_release_recursive>
 8008ffa:	bf00      	nop
 8008ffc:	20003bf0 	.word	0x20003bf0

08009000 <_read_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d07      	ldr	r5, [pc, #28]	; (8009020 <_read_r+0x20>)
 8009004:	4604      	mov	r4, r0
 8009006:	4608      	mov	r0, r1
 8009008:	4611      	mov	r1, r2
 800900a:	2200      	movs	r2, #0
 800900c:	602a      	str	r2, [r5, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	f7f9 f8e0 	bl	80021d4 <_read>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d102      	bne.n	800901e <_read_r+0x1e>
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	b103      	cbz	r3, 800901e <_read_r+0x1e>
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	20003bfc 	.word	0x20003bfc

08009024 <__ascii_wctomb>:
 8009024:	b149      	cbz	r1, 800903a <__ascii_wctomb+0x16>
 8009026:	2aff      	cmp	r2, #255	; 0xff
 8009028:	bf85      	ittet	hi
 800902a:	238a      	movhi	r3, #138	; 0x8a
 800902c:	6003      	strhi	r3, [r0, #0]
 800902e:	700a      	strbls	r2, [r1, #0]
 8009030:	f04f 30ff 	movhi.w	r0, #4294967295
 8009034:	bf98      	it	ls
 8009036:	2001      	movls	r0, #1
 8009038:	4770      	bx	lr
 800903a:	4608      	mov	r0, r1
 800903c:	4770      	bx	lr

0800903e <abort>:
 800903e:	b508      	push	{r3, lr}
 8009040:	2006      	movs	r0, #6
 8009042:	f000 f82b 	bl	800909c <raise>
 8009046:	2001      	movs	r0, #1
 8009048:	f7f9 f8be 	bl	80021c8 <_exit>

0800904c <_raise_r>:
 800904c:	291f      	cmp	r1, #31
 800904e:	b538      	push	{r3, r4, r5, lr}
 8009050:	4604      	mov	r4, r0
 8009052:	460d      	mov	r5, r1
 8009054:	d904      	bls.n	8009060 <_raise_r+0x14>
 8009056:	2316      	movs	r3, #22
 8009058:	6003      	str	r3, [r0, #0]
 800905a:	f04f 30ff 	mov.w	r0, #4294967295
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009062:	b112      	cbz	r2, 800906a <_raise_r+0x1e>
 8009064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009068:	b94b      	cbnz	r3, 800907e <_raise_r+0x32>
 800906a:	4620      	mov	r0, r4
 800906c:	f000 f830 	bl	80090d0 <_getpid_r>
 8009070:	462a      	mov	r2, r5
 8009072:	4601      	mov	r1, r0
 8009074:	4620      	mov	r0, r4
 8009076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800907a:	f000 b817 	b.w	80090ac <_kill_r>
 800907e:	2b01      	cmp	r3, #1
 8009080:	d00a      	beq.n	8009098 <_raise_r+0x4c>
 8009082:	1c59      	adds	r1, r3, #1
 8009084:	d103      	bne.n	800908e <_raise_r+0x42>
 8009086:	2316      	movs	r3, #22
 8009088:	6003      	str	r3, [r0, #0]
 800908a:	2001      	movs	r0, #1
 800908c:	e7e7      	b.n	800905e <_raise_r+0x12>
 800908e:	2400      	movs	r4, #0
 8009090:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009094:	4628      	mov	r0, r5
 8009096:	4798      	blx	r3
 8009098:	2000      	movs	r0, #0
 800909a:	e7e0      	b.n	800905e <_raise_r+0x12>

0800909c <raise>:
 800909c:	4b02      	ldr	r3, [pc, #8]	; (80090a8 <raise+0xc>)
 800909e:	4601      	mov	r1, r0
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	f7ff bfd3 	b.w	800904c <_raise_r>
 80090a6:	bf00      	nop
 80090a8:	20000024 	.word	0x20000024

080090ac <_kill_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4d07      	ldr	r5, [pc, #28]	; (80090cc <_kill_r+0x20>)
 80090b0:	2300      	movs	r3, #0
 80090b2:	4604      	mov	r4, r0
 80090b4:	4608      	mov	r0, r1
 80090b6:	4611      	mov	r1, r2
 80090b8:	602b      	str	r3, [r5, #0]
 80090ba:	f7f9 f87d 	bl	80021b8 <_kill>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d102      	bne.n	80090c8 <_kill_r+0x1c>
 80090c2:	682b      	ldr	r3, [r5, #0]
 80090c4:	b103      	cbz	r3, 80090c8 <_kill_r+0x1c>
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	bd38      	pop	{r3, r4, r5, pc}
 80090ca:	bf00      	nop
 80090cc:	20003bfc 	.word	0x20003bfc

080090d0 <_getpid_r>:
 80090d0:	f7f9 b870 	b.w	80021b4 <_getpid>
 80090d4:	0000      	movs	r0, r0
	...

080090d8 <sin>:
 80090d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090da:	ec53 2b10 	vmov	r2, r3, d0
 80090de:	4828      	ldr	r0, [pc, #160]	; (8009180 <sin+0xa8>)
 80090e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090e4:	4281      	cmp	r1, r0
 80090e6:	dc07      	bgt.n	80090f8 <sin+0x20>
 80090e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009178 <sin+0xa0>
 80090ec:	2000      	movs	r0, #0
 80090ee:	b005      	add	sp, #20
 80090f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090f4:	f000 be6c 	b.w	8009dd0 <__kernel_sin>
 80090f8:	4822      	ldr	r0, [pc, #136]	; (8009184 <sin+0xac>)
 80090fa:	4281      	cmp	r1, r0
 80090fc:	dd09      	ble.n	8009112 <sin+0x3a>
 80090fe:	ee10 0a10 	vmov	r0, s0
 8009102:	4619      	mov	r1, r3
 8009104:	f7f7 f8d8 	bl	80002b8 <__aeabi_dsub>
 8009108:	ec41 0b10 	vmov	d0, r0, r1
 800910c:	b005      	add	sp, #20
 800910e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009112:	4668      	mov	r0, sp
 8009114:	f000 f838 	bl	8009188 <__ieee754_rem_pio2>
 8009118:	f000 0003 	and.w	r0, r0, #3
 800911c:	2801      	cmp	r0, #1
 800911e:	d00c      	beq.n	800913a <sin+0x62>
 8009120:	2802      	cmp	r0, #2
 8009122:	d011      	beq.n	8009148 <sin+0x70>
 8009124:	b9f0      	cbnz	r0, 8009164 <sin+0x8c>
 8009126:	ed9d 1b02 	vldr	d1, [sp, #8]
 800912a:	ed9d 0b00 	vldr	d0, [sp]
 800912e:	2001      	movs	r0, #1
 8009130:	f000 fe4e 	bl	8009dd0 <__kernel_sin>
 8009134:	ec51 0b10 	vmov	r0, r1, d0
 8009138:	e7e6      	b.n	8009108 <sin+0x30>
 800913a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800913e:	ed9d 0b00 	vldr	d0, [sp]
 8009142:	f000 fa2d 	bl	80095a0 <__kernel_cos>
 8009146:	e7f5      	b.n	8009134 <sin+0x5c>
 8009148:	ed9d 1b02 	vldr	d1, [sp, #8]
 800914c:	ed9d 0b00 	vldr	d0, [sp]
 8009150:	2001      	movs	r0, #1
 8009152:	f000 fe3d 	bl	8009dd0 <__kernel_sin>
 8009156:	ec53 2b10 	vmov	r2, r3, d0
 800915a:	ee10 0a10 	vmov	r0, s0
 800915e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009162:	e7d1      	b.n	8009108 <sin+0x30>
 8009164:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009168:	ed9d 0b00 	vldr	d0, [sp]
 800916c:	f000 fa18 	bl	80095a0 <__kernel_cos>
 8009170:	e7f1      	b.n	8009156 <sin+0x7e>
 8009172:	bf00      	nop
 8009174:	f3af 8000 	nop.w
	...
 8009180:	3fe921fb 	.word	0x3fe921fb
 8009184:	7fefffff 	.word	0x7fefffff

08009188 <__ieee754_rem_pio2>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	ed2d 8b02 	vpush	{d8}
 8009190:	ec55 4b10 	vmov	r4, r5, d0
 8009194:	4bca      	ldr	r3, [pc, #808]	; (80094c0 <__ieee754_rem_pio2+0x338>)
 8009196:	b08b      	sub	sp, #44	; 0x2c
 8009198:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800919c:	4598      	cmp	r8, r3
 800919e:	4682      	mov	sl, r0
 80091a0:	9502      	str	r5, [sp, #8]
 80091a2:	dc08      	bgt.n	80091b6 <__ieee754_rem_pio2+0x2e>
 80091a4:	2200      	movs	r2, #0
 80091a6:	2300      	movs	r3, #0
 80091a8:	ed80 0b00 	vstr	d0, [r0]
 80091ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80091b0:	f04f 0b00 	mov.w	fp, #0
 80091b4:	e028      	b.n	8009208 <__ieee754_rem_pio2+0x80>
 80091b6:	4bc3      	ldr	r3, [pc, #780]	; (80094c4 <__ieee754_rem_pio2+0x33c>)
 80091b8:	4598      	cmp	r8, r3
 80091ba:	dc78      	bgt.n	80092ae <__ieee754_rem_pio2+0x126>
 80091bc:	9b02      	ldr	r3, [sp, #8]
 80091be:	4ec2      	ldr	r6, [pc, #776]	; (80094c8 <__ieee754_rem_pio2+0x340>)
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	ee10 0a10 	vmov	r0, s0
 80091c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8009488 <__ieee754_rem_pio2+0x300>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	4629      	mov	r1, r5
 80091ce:	dd39      	ble.n	8009244 <__ieee754_rem_pio2+0xbc>
 80091d0:	f7f7 f872 	bl	80002b8 <__aeabi_dsub>
 80091d4:	45b0      	cmp	r8, r6
 80091d6:	4604      	mov	r4, r0
 80091d8:	460d      	mov	r5, r1
 80091da:	d01b      	beq.n	8009214 <__ieee754_rem_pio2+0x8c>
 80091dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8009490 <__ieee754_rem_pio2+0x308>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f7f7 f869 	bl	80002b8 <__aeabi_dsub>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	e9ca 2300 	strd	r2, r3, [sl]
 80091ee:	4620      	mov	r0, r4
 80091f0:	4629      	mov	r1, r5
 80091f2:	f7f7 f861 	bl	80002b8 <__aeabi_dsub>
 80091f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009490 <__ieee754_rem_pio2+0x308>)
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	f7f7 f85c 	bl	80002b8 <__aeabi_dsub>
 8009200:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009204:	f04f 0b01 	mov.w	fp, #1
 8009208:	4658      	mov	r0, fp
 800920a:	b00b      	add	sp, #44	; 0x2c
 800920c:	ecbd 8b02 	vpop	{d8}
 8009210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009214:	a3a0      	add	r3, pc, #640	; (adr r3, 8009498 <__ieee754_rem_pio2+0x310>)
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	f7f7 f84d 	bl	80002b8 <__aeabi_dsub>
 800921e:	a3a0      	add	r3, pc, #640	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x318>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	f7f7 f846 	bl	80002b8 <__aeabi_dsub>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	e9ca 2300 	strd	r2, r3, [sl]
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 f83e 	bl	80002b8 <__aeabi_dsub>
 800923c:	a398      	add	r3, pc, #608	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x318>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	e7db      	b.n	80091fc <__ieee754_rem_pio2+0x74>
 8009244:	f7f7 f83a 	bl	80002bc <__adddf3>
 8009248:	45b0      	cmp	r8, r6
 800924a:	4604      	mov	r4, r0
 800924c:	460d      	mov	r5, r1
 800924e:	d016      	beq.n	800927e <__ieee754_rem_pio2+0xf6>
 8009250:	a38f      	add	r3, pc, #572	; (adr r3, 8009490 <__ieee754_rem_pio2+0x308>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f7 f831 	bl	80002bc <__adddf3>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	e9ca 2300 	strd	r2, r3, [sl]
 8009262:	4620      	mov	r0, r4
 8009264:	4629      	mov	r1, r5
 8009266:	f7f7 f827 	bl	80002b8 <__aeabi_dsub>
 800926a:	a389      	add	r3, pc, #548	; (adr r3, 8009490 <__ieee754_rem_pio2+0x308>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 f824 	bl	80002bc <__adddf3>
 8009274:	f04f 3bff 	mov.w	fp, #4294967295
 8009278:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800927c:	e7c4      	b.n	8009208 <__ieee754_rem_pio2+0x80>
 800927e:	a386      	add	r3, pc, #536	; (adr r3, 8009498 <__ieee754_rem_pio2+0x310>)
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	f7f7 f81a 	bl	80002bc <__adddf3>
 8009288:	a385      	add	r3, pc, #532	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x318>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	4604      	mov	r4, r0
 8009290:	460d      	mov	r5, r1
 8009292:	f7f7 f813 	bl	80002bc <__adddf3>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	e9ca 2300 	strd	r2, r3, [sl]
 800929e:	4620      	mov	r0, r4
 80092a0:	4629      	mov	r1, r5
 80092a2:	f7f7 f809 	bl	80002b8 <__aeabi_dsub>
 80092a6:	a37e      	add	r3, pc, #504	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x318>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	e7e0      	b.n	8009270 <__ieee754_rem_pio2+0xe8>
 80092ae:	4b87      	ldr	r3, [pc, #540]	; (80094cc <__ieee754_rem_pio2+0x344>)
 80092b0:	4598      	cmp	r8, r3
 80092b2:	f300 80d9 	bgt.w	8009468 <__ieee754_rem_pio2+0x2e0>
 80092b6:	f000 fe49 	bl	8009f4c <fabs>
 80092ba:	ec55 4b10 	vmov	r4, r5, d0
 80092be:	ee10 0a10 	vmov	r0, s0
 80092c2:	a379      	add	r3, pc, #484	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x320>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7f7 f9ad 	bl	8000628 <__aeabi_dmul>
 80092ce:	4b80      	ldr	r3, [pc, #512]	; (80094d0 <__ieee754_rem_pio2+0x348>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	f7f6 fff3 	bl	80002bc <__adddf3>
 80092d6:	f7f7 fc57 	bl	8000b88 <__aeabi_d2iz>
 80092da:	4683      	mov	fp, r0
 80092dc:	f7f7 f93a 	bl	8000554 <__aeabi_i2d>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	ec43 2b18 	vmov	d8, r2, r3
 80092e8:	a367      	add	r3, pc, #412	; (adr r3, 8009488 <__ieee754_rem_pio2+0x300>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f7f7 f99b 	bl	8000628 <__aeabi_dmul>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	f7f6 ffdd 	bl	80002b8 <__aeabi_dsub>
 80092fe:	a364      	add	r3, pc, #400	; (adr r3, 8009490 <__ieee754_rem_pio2+0x308>)
 8009300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009304:	4606      	mov	r6, r0
 8009306:	460f      	mov	r7, r1
 8009308:	ec51 0b18 	vmov	r0, r1, d8
 800930c:	f7f7 f98c 	bl	8000628 <__aeabi_dmul>
 8009310:	f1bb 0f1f 	cmp.w	fp, #31
 8009314:	4604      	mov	r4, r0
 8009316:	460d      	mov	r5, r1
 8009318:	dc0d      	bgt.n	8009336 <__ieee754_rem_pio2+0x1ae>
 800931a:	4b6e      	ldr	r3, [pc, #440]	; (80094d4 <__ieee754_rem_pio2+0x34c>)
 800931c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009324:	4543      	cmp	r3, r8
 8009326:	d006      	beq.n	8009336 <__ieee754_rem_pio2+0x1ae>
 8009328:	4622      	mov	r2, r4
 800932a:	462b      	mov	r3, r5
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f6 ffc2 	bl	80002b8 <__aeabi_dsub>
 8009334:	e00f      	b.n	8009356 <__ieee754_rem_pio2+0x1ce>
 8009336:	462b      	mov	r3, r5
 8009338:	4622      	mov	r2, r4
 800933a:	4630      	mov	r0, r6
 800933c:	4639      	mov	r1, r7
 800933e:	f7f6 ffbb 	bl	80002b8 <__aeabi_dsub>
 8009342:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009346:	9303      	str	r3, [sp, #12]
 8009348:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800934c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009350:	f1b8 0f10 	cmp.w	r8, #16
 8009354:	dc02      	bgt.n	800935c <__ieee754_rem_pio2+0x1d4>
 8009356:	e9ca 0100 	strd	r0, r1, [sl]
 800935a:	e039      	b.n	80093d0 <__ieee754_rem_pio2+0x248>
 800935c:	a34e      	add	r3, pc, #312	; (adr r3, 8009498 <__ieee754_rem_pio2+0x310>)
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	ec51 0b18 	vmov	r0, r1, d8
 8009366:	f7f7 f95f 	bl	8000628 <__aeabi_dmul>
 800936a:	4604      	mov	r4, r0
 800936c:	460d      	mov	r5, r1
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4630      	mov	r0, r6
 8009374:	4639      	mov	r1, r7
 8009376:	f7f6 ff9f 	bl	80002b8 <__aeabi_dsub>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4680      	mov	r8, r0
 8009380:	4689      	mov	r9, r1
 8009382:	4630      	mov	r0, r6
 8009384:	4639      	mov	r1, r7
 8009386:	f7f6 ff97 	bl	80002b8 <__aeabi_dsub>
 800938a:	4622      	mov	r2, r4
 800938c:	462b      	mov	r3, r5
 800938e:	f7f6 ff93 	bl	80002b8 <__aeabi_dsub>
 8009392:	a343      	add	r3, pc, #268	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x318>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	4604      	mov	r4, r0
 800939a:	460d      	mov	r5, r1
 800939c:	ec51 0b18 	vmov	r0, r1, d8
 80093a0:	f7f7 f942 	bl	8000628 <__aeabi_dmul>
 80093a4:	4622      	mov	r2, r4
 80093a6:	462b      	mov	r3, r5
 80093a8:	f7f6 ff86 	bl	80002b8 <__aeabi_dsub>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4604      	mov	r4, r0
 80093b2:	460d      	mov	r5, r1
 80093b4:	4640      	mov	r0, r8
 80093b6:	4649      	mov	r1, r9
 80093b8:	f7f6 ff7e 	bl	80002b8 <__aeabi_dsub>
 80093bc:	9a03      	ldr	r2, [sp, #12]
 80093be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	2b31      	cmp	r3, #49	; 0x31
 80093c6:	dc24      	bgt.n	8009412 <__ieee754_rem_pio2+0x28a>
 80093c8:	e9ca 0100 	strd	r0, r1, [sl]
 80093cc:	4646      	mov	r6, r8
 80093ce:	464f      	mov	r7, r9
 80093d0:	e9da 8900 	ldrd	r8, r9, [sl]
 80093d4:	4630      	mov	r0, r6
 80093d6:	4642      	mov	r2, r8
 80093d8:	464b      	mov	r3, r9
 80093da:	4639      	mov	r1, r7
 80093dc:	f7f6 ff6c 	bl	80002b8 <__aeabi_dsub>
 80093e0:	462b      	mov	r3, r5
 80093e2:	4622      	mov	r2, r4
 80093e4:	f7f6 ff68 	bl	80002b8 <__aeabi_dsub>
 80093e8:	9b02      	ldr	r3, [sp, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80093f0:	f6bf af0a 	bge.w	8009208 <__ieee754_rem_pio2+0x80>
 80093f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093f8:	f8ca 3004 	str.w	r3, [sl, #4]
 80093fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009400:	f8ca 8000 	str.w	r8, [sl]
 8009404:	f8ca 0008 	str.w	r0, [sl, #8]
 8009408:	f8ca 300c 	str.w	r3, [sl, #12]
 800940c:	f1cb 0b00 	rsb	fp, fp, #0
 8009410:	e6fa      	b.n	8009208 <__ieee754_rem_pio2+0x80>
 8009412:	a327      	add	r3, pc, #156	; (adr r3, 80094b0 <__ieee754_rem_pio2+0x328>)
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	ec51 0b18 	vmov	r0, r1, d8
 800941c:	f7f7 f904 	bl	8000628 <__aeabi_dmul>
 8009420:	4604      	mov	r4, r0
 8009422:	460d      	mov	r5, r1
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4640      	mov	r0, r8
 800942a:	4649      	mov	r1, r9
 800942c:	f7f6 ff44 	bl	80002b8 <__aeabi_dsub>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4606      	mov	r6, r0
 8009436:	460f      	mov	r7, r1
 8009438:	4640      	mov	r0, r8
 800943a:	4649      	mov	r1, r9
 800943c:	f7f6 ff3c 	bl	80002b8 <__aeabi_dsub>
 8009440:	4622      	mov	r2, r4
 8009442:	462b      	mov	r3, r5
 8009444:	f7f6 ff38 	bl	80002b8 <__aeabi_dsub>
 8009448:	a31b      	add	r3, pc, #108	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x330>)
 800944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944e:	4604      	mov	r4, r0
 8009450:	460d      	mov	r5, r1
 8009452:	ec51 0b18 	vmov	r0, r1, d8
 8009456:	f7f7 f8e7 	bl	8000628 <__aeabi_dmul>
 800945a:	4622      	mov	r2, r4
 800945c:	462b      	mov	r3, r5
 800945e:	f7f6 ff2b 	bl	80002b8 <__aeabi_dsub>
 8009462:	4604      	mov	r4, r0
 8009464:	460d      	mov	r5, r1
 8009466:	e75f      	b.n	8009328 <__ieee754_rem_pio2+0x1a0>
 8009468:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <__ieee754_rem_pio2+0x350>)
 800946a:	4598      	cmp	r8, r3
 800946c:	dd36      	ble.n	80094dc <__ieee754_rem_pio2+0x354>
 800946e:	ee10 2a10 	vmov	r2, s0
 8009472:	462b      	mov	r3, r5
 8009474:	4620      	mov	r0, r4
 8009476:	4629      	mov	r1, r5
 8009478:	f7f6 ff1e 	bl	80002b8 <__aeabi_dsub>
 800947c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009480:	e9ca 0100 	strd	r0, r1, [sl]
 8009484:	e694      	b.n	80091b0 <__ieee754_rem_pio2+0x28>
 8009486:	bf00      	nop
 8009488:	54400000 	.word	0x54400000
 800948c:	3ff921fb 	.word	0x3ff921fb
 8009490:	1a626331 	.word	0x1a626331
 8009494:	3dd0b461 	.word	0x3dd0b461
 8009498:	1a600000 	.word	0x1a600000
 800949c:	3dd0b461 	.word	0x3dd0b461
 80094a0:	2e037073 	.word	0x2e037073
 80094a4:	3ba3198a 	.word	0x3ba3198a
 80094a8:	6dc9c883 	.word	0x6dc9c883
 80094ac:	3fe45f30 	.word	0x3fe45f30
 80094b0:	2e000000 	.word	0x2e000000
 80094b4:	3ba3198a 	.word	0x3ba3198a
 80094b8:	252049c1 	.word	0x252049c1
 80094bc:	397b839a 	.word	0x397b839a
 80094c0:	3fe921fb 	.word	0x3fe921fb
 80094c4:	4002d97b 	.word	0x4002d97b
 80094c8:	3ff921fb 	.word	0x3ff921fb
 80094cc:	413921fb 	.word	0x413921fb
 80094d0:	3fe00000 	.word	0x3fe00000
 80094d4:	0800ab14 	.word	0x0800ab14
 80094d8:	7fefffff 	.word	0x7fefffff
 80094dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80094e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80094e4:	ee10 0a10 	vmov	r0, s0
 80094e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80094ec:	ee10 6a10 	vmov	r6, s0
 80094f0:	460f      	mov	r7, r1
 80094f2:	f7f7 fb49 	bl	8000b88 <__aeabi_d2iz>
 80094f6:	f7f7 f82d 	bl	8000554 <__aeabi_i2d>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4630      	mov	r0, r6
 8009500:	4639      	mov	r1, r7
 8009502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009506:	f7f6 fed7 	bl	80002b8 <__aeabi_dsub>
 800950a:	4b23      	ldr	r3, [pc, #140]	; (8009598 <__ieee754_rem_pio2+0x410>)
 800950c:	2200      	movs	r2, #0
 800950e:	f7f7 f88b 	bl	8000628 <__aeabi_dmul>
 8009512:	460f      	mov	r7, r1
 8009514:	4606      	mov	r6, r0
 8009516:	f7f7 fb37 	bl	8000b88 <__aeabi_d2iz>
 800951a:	f7f7 f81b 	bl	8000554 <__aeabi_i2d>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4630      	mov	r0, r6
 8009524:	4639      	mov	r1, r7
 8009526:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800952a:	f7f6 fec5 	bl	80002b8 <__aeabi_dsub>
 800952e:	4b1a      	ldr	r3, [pc, #104]	; (8009598 <__ieee754_rem_pio2+0x410>)
 8009530:	2200      	movs	r2, #0
 8009532:	f7f7 f879 	bl	8000628 <__aeabi_dmul>
 8009536:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800953a:	ad04      	add	r5, sp, #16
 800953c:	f04f 0803 	mov.w	r8, #3
 8009540:	46a9      	mov	r9, r5
 8009542:	2600      	movs	r6, #0
 8009544:	2700      	movs	r7, #0
 8009546:	4632      	mov	r2, r6
 8009548:	463b      	mov	r3, r7
 800954a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800954e:	46c3      	mov	fp, r8
 8009550:	3d08      	subs	r5, #8
 8009552:	f108 38ff 	add.w	r8, r8, #4294967295
 8009556:	f7f7 facf 	bl	8000af8 <__aeabi_dcmpeq>
 800955a:	2800      	cmp	r0, #0
 800955c:	d1f3      	bne.n	8009546 <__ieee754_rem_pio2+0x3be>
 800955e:	4b0f      	ldr	r3, [pc, #60]	; (800959c <__ieee754_rem_pio2+0x414>)
 8009560:	9301      	str	r3, [sp, #4]
 8009562:	2302      	movs	r3, #2
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	4622      	mov	r2, r4
 8009568:	465b      	mov	r3, fp
 800956a:	4651      	mov	r1, sl
 800956c:	4648      	mov	r0, r9
 800956e:	f000 f8df 	bl	8009730 <__kernel_rem_pio2>
 8009572:	9b02      	ldr	r3, [sp, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	4683      	mov	fp, r0
 8009578:	f6bf ae46 	bge.w	8009208 <__ieee754_rem_pio2+0x80>
 800957c:	e9da 2100 	ldrd	r2, r1, [sl]
 8009580:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009584:	e9ca 2300 	strd	r2, r3, [sl]
 8009588:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800958c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009590:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009594:	e73a      	b.n	800940c <__ieee754_rem_pio2+0x284>
 8009596:	bf00      	nop
 8009598:	41700000 	.word	0x41700000
 800959c:	0800ab94 	.word	0x0800ab94

080095a0 <__kernel_cos>:
 80095a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	ec57 6b10 	vmov	r6, r7, d0
 80095a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80095ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80095b0:	ed8d 1b00 	vstr	d1, [sp]
 80095b4:	da07      	bge.n	80095c6 <__kernel_cos+0x26>
 80095b6:	ee10 0a10 	vmov	r0, s0
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f7 fae4 	bl	8000b88 <__aeabi_d2iz>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	f000 8088 	beq.w	80096d6 <__kernel_cos+0x136>
 80095c6:	4632      	mov	r2, r6
 80095c8:	463b      	mov	r3, r7
 80095ca:	4630      	mov	r0, r6
 80095cc:	4639      	mov	r1, r7
 80095ce:	f7f7 f82b 	bl	8000628 <__aeabi_dmul>
 80095d2:	4b51      	ldr	r3, [pc, #324]	; (8009718 <__kernel_cos+0x178>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	4604      	mov	r4, r0
 80095d8:	460d      	mov	r5, r1
 80095da:	f7f7 f825 	bl	8000628 <__aeabi_dmul>
 80095de:	a340      	add	r3, pc, #256	; (adr r3, 80096e0 <__kernel_cos+0x140>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	4682      	mov	sl, r0
 80095e6:	468b      	mov	fp, r1
 80095e8:	4620      	mov	r0, r4
 80095ea:	4629      	mov	r1, r5
 80095ec:	f7f7 f81c 	bl	8000628 <__aeabi_dmul>
 80095f0:	a33d      	add	r3, pc, #244	; (adr r3, 80096e8 <__kernel_cos+0x148>)
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f7f6 fe61 	bl	80002bc <__adddf3>
 80095fa:	4622      	mov	r2, r4
 80095fc:	462b      	mov	r3, r5
 80095fe:	f7f7 f813 	bl	8000628 <__aeabi_dmul>
 8009602:	a33b      	add	r3, pc, #236	; (adr r3, 80096f0 <__kernel_cos+0x150>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f6 fe56 	bl	80002b8 <__aeabi_dsub>
 800960c:	4622      	mov	r2, r4
 800960e:	462b      	mov	r3, r5
 8009610:	f7f7 f80a 	bl	8000628 <__aeabi_dmul>
 8009614:	a338      	add	r3, pc, #224	; (adr r3, 80096f8 <__kernel_cos+0x158>)
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f7f6 fe4f 	bl	80002bc <__adddf3>
 800961e:	4622      	mov	r2, r4
 8009620:	462b      	mov	r3, r5
 8009622:	f7f7 f801 	bl	8000628 <__aeabi_dmul>
 8009626:	a336      	add	r3, pc, #216	; (adr r3, 8009700 <__kernel_cos+0x160>)
 8009628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962c:	f7f6 fe44 	bl	80002b8 <__aeabi_dsub>
 8009630:	4622      	mov	r2, r4
 8009632:	462b      	mov	r3, r5
 8009634:	f7f6 fff8 	bl	8000628 <__aeabi_dmul>
 8009638:	a333      	add	r3, pc, #204	; (adr r3, 8009708 <__kernel_cos+0x168>)
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	f7f6 fe3d 	bl	80002bc <__adddf3>
 8009642:	4622      	mov	r2, r4
 8009644:	462b      	mov	r3, r5
 8009646:	f7f6 ffef 	bl	8000628 <__aeabi_dmul>
 800964a:	4622      	mov	r2, r4
 800964c:	462b      	mov	r3, r5
 800964e:	f7f6 ffeb 	bl	8000628 <__aeabi_dmul>
 8009652:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009656:	4604      	mov	r4, r0
 8009658:	460d      	mov	r5, r1
 800965a:	4630      	mov	r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	f7f6 ffe3 	bl	8000628 <__aeabi_dmul>
 8009662:	460b      	mov	r3, r1
 8009664:	4602      	mov	r2, r0
 8009666:	4629      	mov	r1, r5
 8009668:	4620      	mov	r0, r4
 800966a:	f7f6 fe25 	bl	80002b8 <__aeabi_dsub>
 800966e:	4b2b      	ldr	r3, [pc, #172]	; (800971c <__kernel_cos+0x17c>)
 8009670:	4598      	cmp	r8, r3
 8009672:	4606      	mov	r6, r0
 8009674:	460f      	mov	r7, r1
 8009676:	dc10      	bgt.n	800969a <__kernel_cos+0xfa>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4650      	mov	r0, sl
 800967e:	4659      	mov	r1, fp
 8009680:	f7f6 fe1a 	bl	80002b8 <__aeabi_dsub>
 8009684:	460b      	mov	r3, r1
 8009686:	4926      	ldr	r1, [pc, #152]	; (8009720 <__kernel_cos+0x180>)
 8009688:	4602      	mov	r2, r0
 800968a:	2000      	movs	r0, #0
 800968c:	f7f6 fe14 	bl	80002b8 <__aeabi_dsub>
 8009690:	ec41 0b10 	vmov	d0, r0, r1
 8009694:	b003      	add	sp, #12
 8009696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969a:	4b22      	ldr	r3, [pc, #136]	; (8009724 <__kernel_cos+0x184>)
 800969c:	4920      	ldr	r1, [pc, #128]	; (8009720 <__kernel_cos+0x180>)
 800969e:	4598      	cmp	r8, r3
 80096a0:	bfcc      	ite	gt
 80096a2:	4d21      	ldrgt	r5, [pc, #132]	; (8009728 <__kernel_cos+0x188>)
 80096a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80096a8:	2400      	movs	r4, #0
 80096aa:	4622      	mov	r2, r4
 80096ac:	462b      	mov	r3, r5
 80096ae:	2000      	movs	r0, #0
 80096b0:	f7f6 fe02 	bl	80002b8 <__aeabi_dsub>
 80096b4:	4622      	mov	r2, r4
 80096b6:	4680      	mov	r8, r0
 80096b8:	4689      	mov	r9, r1
 80096ba:	462b      	mov	r3, r5
 80096bc:	4650      	mov	r0, sl
 80096be:	4659      	mov	r1, fp
 80096c0:	f7f6 fdfa 	bl	80002b8 <__aeabi_dsub>
 80096c4:	4632      	mov	r2, r6
 80096c6:	463b      	mov	r3, r7
 80096c8:	f7f6 fdf6 	bl	80002b8 <__aeabi_dsub>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4640      	mov	r0, r8
 80096d2:	4649      	mov	r1, r9
 80096d4:	e7da      	b.n	800968c <__kernel_cos+0xec>
 80096d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009710 <__kernel_cos+0x170>
 80096da:	e7db      	b.n	8009694 <__kernel_cos+0xf4>
 80096dc:	f3af 8000 	nop.w
 80096e0:	be8838d4 	.word	0xbe8838d4
 80096e4:	bda8fae9 	.word	0xbda8fae9
 80096e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80096ec:	3e21ee9e 	.word	0x3e21ee9e
 80096f0:	809c52ad 	.word	0x809c52ad
 80096f4:	3e927e4f 	.word	0x3e927e4f
 80096f8:	19cb1590 	.word	0x19cb1590
 80096fc:	3efa01a0 	.word	0x3efa01a0
 8009700:	16c15177 	.word	0x16c15177
 8009704:	3f56c16c 	.word	0x3f56c16c
 8009708:	5555554c 	.word	0x5555554c
 800970c:	3fa55555 	.word	0x3fa55555
 8009710:	00000000 	.word	0x00000000
 8009714:	3ff00000 	.word	0x3ff00000
 8009718:	3fe00000 	.word	0x3fe00000
 800971c:	3fd33332 	.word	0x3fd33332
 8009720:	3ff00000 	.word	0x3ff00000
 8009724:	3fe90000 	.word	0x3fe90000
 8009728:	3fd20000 	.word	0x3fd20000
 800972c:	00000000 	.word	0x00000000

08009730 <__kernel_rem_pio2>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	ed2d 8b02 	vpush	{d8}
 8009738:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800973c:	f112 0f14 	cmn.w	r2, #20
 8009740:	9308      	str	r3, [sp, #32]
 8009742:	9101      	str	r1, [sp, #4]
 8009744:	4bc4      	ldr	r3, [pc, #784]	; (8009a58 <__kernel_rem_pio2+0x328>)
 8009746:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009748:	900b      	str	r0, [sp, #44]	; 0x2c
 800974a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800974e:	9302      	str	r3, [sp, #8]
 8009750:	9b08      	ldr	r3, [sp, #32]
 8009752:	f103 33ff 	add.w	r3, r3, #4294967295
 8009756:	bfa8      	it	ge
 8009758:	1ed4      	subge	r4, r2, #3
 800975a:	9306      	str	r3, [sp, #24]
 800975c:	bfb2      	itee	lt
 800975e:	2400      	movlt	r4, #0
 8009760:	2318      	movge	r3, #24
 8009762:	fb94 f4f3 	sdivge	r4, r4, r3
 8009766:	f06f 0317 	mvn.w	r3, #23
 800976a:	fb04 3303 	mla	r3, r4, r3, r3
 800976e:	eb03 0a02 	add.w	sl, r3, r2
 8009772:	9b02      	ldr	r3, [sp, #8]
 8009774:	9a06      	ldr	r2, [sp, #24]
 8009776:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009a48 <__kernel_rem_pio2+0x318>
 800977a:	eb03 0802 	add.w	r8, r3, r2
 800977e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009780:	1aa7      	subs	r7, r4, r2
 8009782:	ae22      	add	r6, sp, #136	; 0x88
 8009784:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009788:	2500      	movs	r5, #0
 800978a:	4545      	cmp	r5, r8
 800978c:	dd13      	ble.n	80097b6 <__kernel_rem_pio2+0x86>
 800978e:	9b08      	ldr	r3, [sp, #32]
 8009790:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009a48 <__kernel_rem_pio2+0x318>
 8009794:	aa22      	add	r2, sp, #136	; 0x88
 8009796:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800979a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800979e:	f04f 0800 	mov.w	r8, #0
 80097a2:	9b02      	ldr	r3, [sp, #8]
 80097a4:	4598      	cmp	r8, r3
 80097a6:	dc2f      	bgt.n	8009808 <__kernel_rem_pio2+0xd8>
 80097a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80097ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80097b0:	462f      	mov	r7, r5
 80097b2:	2600      	movs	r6, #0
 80097b4:	e01b      	b.n	80097ee <__kernel_rem_pio2+0xbe>
 80097b6:	42ef      	cmn	r7, r5
 80097b8:	d407      	bmi.n	80097ca <__kernel_rem_pio2+0x9a>
 80097ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80097be:	f7f6 fec9 	bl	8000554 <__aeabi_i2d>
 80097c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80097c6:	3501      	adds	r5, #1
 80097c8:	e7df      	b.n	800978a <__kernel_rem_pio2+0x5a>
 80097ca:	ec51 0b18 	vmov	r0, r1, d8
 80097ce:	e7f8      	b.n	80097c2 <__kernel_rem_pio2+0x92>
 80097d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80097d8:	f7f6 ff26 	bl	8000628 <__aeabi_dmul>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097e4:	f7f6 fd6a 	bl	80002bc <__adddf3>
 80097e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097ec:	3601      	adds	r6, #1
 80097ee:	9b06      	ldr	r3, [sp, #24]
 80097f0:	429e      	cmp	r6, r3
 80097f2:	f1a7 0708 	sub.w	r7, r7, #8
 80097f6:	ddeb      	ble.n	80097d0 <__kernel_rem_pio2+0xa0>
 80097f8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80097fc:	f108 0801 	add.w	r8, r8, #1
 8009800:	ecab 7b02 	vstmia	fp!, {d7}
 8009804:	3508      	adds	r5, #8
 8009806:	e7cc      	b.n	80097a2 <__kernel_rem_pio2+0x72>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	aa0e      	add	r2, sp, #56	; 0x38
 800980c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009810:	930d      	str	r3, [sp, #52]	; 0x34
 8009812:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009814:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009818:	9c02      	ldr	r4, [sp, #8]
 800981a:	930c      	str	r3, [sp, #48]	; 0x30
 800981c:	00e3      	lsls	r3, r4, #3
 800981e:	930a      	str	r3, [sp, #40]	; 0x28
 8009820:	ab9a      	add	r3, sp, #616	; 0x268
 8009822:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009826:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800982a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800982e:	ab72      	add	r3, sp, #456	; 0x1c8
 8009830:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009834:	46c3      	mov	fp, r8
 8009836:	46a1      	mov	r9, r4
 8009838:	f1b9 0f00 	cmp.w	r9, #0
 800983c:	f1a5 0508 	sub.w	r5, r5, #8
 8009840:	dc77      	bgt.n	8009932 <__kernel_rem_pio2+0x202>
 8009842:	ec47 6b10 	vmov	d0, r6, r7
 8009846:	4650      	mov	r0, sl
 8009848:	f000 fc0a 	bl	800a060 <scalbn>
 800984c:	ec57 6b10 	vmov	r6, r7, d0
 8009850:	2200      	movs	r2, #0
 8009852:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009856:	ee10 0a10 	vmov	r0, s0
 800985a:	4639      	mov	r1, r7
 800985c:	f7f6 fee4 	bl	8000628 <__aeabi_dmul>
 8009860:	ec41 0b10 	vmov	d0, r0, r1
 8009864:	f000 fb7c 	bl	8009f60 <floor>
 8009868:	4b7c      	ldr	r3, [pc, #496]	; (8009a5c <__kernel_rem_pio2+0x32c>)
 800986a:	ec51 0b10 	vmov	r0, r1, d0
 800986e:	2200      	movs	r2, #0
 8009870:	f7f6 feda 	bl	8000628 <__aeabi_dmul>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4630      	mov	r0, r6
 800987a:	4639      	mov	r1, r7
 800987c:	f7f6 fd1c 	bl	80002b8 <__aeabi_dsub>
 8009880:	460f      	mov	r7, r1
 8009882:	4606      	mov	r6, r0
 8009884:	f7f7 f980 	bl	8000b88 <__aeabi_d2iz>
 8009888:	9004      	str	r0, [sp, #16]
 800988a:	f7f6 fe63 	bl	8000554 <__aeabi_i2d>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4630      	mov	r0, r6
 8009894:	4639      	mov	r1, r7
 8009896:	f7f6 fd0f 	bl	80002b8 <__aeabi_dsub>
 800989a:	f1ba 0f00 	cmp.w	sl, #0
 800989e:	4606      	mov	r6, r0
 80098a0:	460f      	mov	r7, r1
 80098a2:	dd6d      	ble.n	8009980 <__kernel_rem_pio2+0x250>
 80098a4:	1e62      	subs	r2, r4, #1
 80098a6:	ab0e      	add	r3, sp, #56	; 0x38
 80098a8:	9d04      	ldr	r5, [sp, #16]
 80098aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80098ae:	f1ca 0118 	rsb	r1, sl, #24
 80098b2:	fa40 f301 	asr.w	r3, r0, r1
 80098b6:	441d      	add	r5, r3
 80098b8:	408b      	lsls	r3, r1
 80098ba:	1ac0      	subs	r0, r0, r3
 80098bc:	ab0e      	add	r3, sp, #56	; 0x38
 80098be:	9504      	str	r5, [sp, #16]
 80098c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80098c4:	f1ca 0317 	rsb	r3, sl, #23
 80098c8:	fa40 fb03 	asr.w	fp, r0, r3
 80098cc:	f1bb 0f00 	cmp.w	fp, #0
 80098d0:	dd65      	ble.n	800999e <__kernel_rem_pio2+0x26e>
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	2200      	movs	r2, #0
 80098d6:	3301      	adds	r3, #1
 80098d8:	9304      	str	r3, [sp, #16]
 80098da:	4615      	mov	r5, r2
 80098dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80098e0:	4294      	cmp	r4, r2
 80098e2:	f300 809c 	bgt.w	8009a1e <__kernel_rem_pio2+0x2ee>
 80098e6:	f1ba 0f00 	cmp.w	sl, #0
 80098ea:	dd07      	ble.n	80098fc <__kernel_rem_pio2+0x1cc>
 80098ec:	f1ba 0f01 	cmp.w	sl, #1
 80098f0:	f000 80c0 	beq.w	8009a74 <__kernel_rem_pio2+0x344>
 80098f4:	f1ba 0f02 	cmp.w	sl, #2
 80098f8:	f000 80c6 	beq.w	8009a88 <__kernel_rem_pio2+0x358>
 80098fc:	f1bb 0f02 	cmp.w	fp, #2
 8009900:	d14d      	bne.n	800999e <__kernel_rem_pio2+0x26e>
 8009902:	4632      	mov	r2, r6
 8009904:	463b      	mov	r3, r7
 8009906:	4956      	ldr	r1, [pc, #344]	; (8009a60 <__kernel_rem_pio2+0x330>)
 8009908:	2000      	movs	r0, #0
 800990a:	f7f6 fcd5 	bl	80002b8 <__aeabi_dsub>
 800990e:	4606      	mov	r6, r0
 8009910:	460f      	mov	r7, r1
 8009912:	2d00      	cmp	r5, #0
 8009914:	d043      	beq.n	800999e <__kernel_rem_pio2+0x26e>
 8009916:	4650      	mov	r0, sl
 8009918:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009a50 <__kernel_rem_pio2+0x320>
 800991c:	f000 fba0 	bl	800a060 <scalbn>
 8009920:	4630      	mov	r0, r6
 8009922:	4639      	mov	r1, r7
 8009924:	ec53 2b10 	vmov	r2, r3, d0
 8009928:	f7f6 fcc6 	bl	80002b8 <__aeabi_dsub>
 800992c:	4606      	mov	r6, r0
 800992e:	460f      	mov	r7, r1
 8009930:	e035      	b.n	800999e <__kernel_rem_pio2+0x26e>
 8009932:	4b4c      	ldr	r3, [pc, #304]	; (8009a64 <__kernel_rem_pio2+0x334>)
 8009934:	2200      	movs	r2, #0
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f6 fe75 	bl	8000628 <__aeabi_dmul>
 800993e:	f7f7 f923 	bl	8000b88 <__aeabi_d2iz>
 8009942:	f7f6 fe07 	bl	8000554 <__aeabi_i2d>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	ec43 2b18 	vmov	d8, r2, r3
 800994e:	4b46      	ldr	r3, [pc, #280]	; (8009a68 <__kernel_rem_pio2+0x338>)
 8009950:	2200      	movs	r2, #0
 8009952:	f7f6 fe69 	bl	8000628 <__aeabi_dmul>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4630      	mov	r0, r6
 800995c:	4639      	mov	r1, r7
 800995e:	f7f6 fcab 	bl	80002b8 <__aeabi_dsub>
 8009962:	f7f7 f911 	bl	8000b88 <__aeabi_d2iz>
 8009966:	e9d5 2300 	ldrd	r2, r3, [r5]
 800996a:	f84b 0b04 	str.w	r0, [fp], #4
 800996e:	ec51 0b18 	vmov	r0, r1, d8
 8009972:	f7f6 fca3 	bl	80002bc <__adddf3>
 8009976:	f109 39ff 	add.w	r9, r9, #4294967295
 800997a:	4606      	mov	r6, r0
 800997c:	460f      	mov	r7, r1
 800997e:	e75b      	b.n	8009838 <__kernel_rem_pio2+0x108>
 8009980:	d106      	bne.n	8009990 <__kernel_rem_pio2+0x260>
 8009982:	1e63      	subs	r3, r4, #1
 8009984:	aa0e      	add	r2, sp, #56	; 0x38
 8009986:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800998a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800998e:	e79d      	b.n	80098cc <__kernel_rem_pio2+0x19c>
 8009990:	4b36      	ldr	r3, [pc, #216]	; (8009a6c <__kernel_rem_pio2+0x33c>)
 8009992:	2200      	movs	r2, #0
 8009994:	f7f7 f8ce 	bl	8000b34 <__aeabi_dcmpge>
 8009998:	2800      	cmp	r0, #0
 800999a:	d13d      	bne.n	8009a18 <__kernel_rem_pio2+0x2e8>
 800999c:	4683      	mov	fp, r0
 800999e:	2200      	movs	r2, #0
 80099a0:	2300      	movs	r3, #0
 80099a2:	4630      	mov	r0, r6
 80099a4:	4639      	mov	r1, r7
 80099a6:	f7f7 f8a7 	bl	8000af8 <__aeabi_dcmpeq>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	f000 80c0 	beq.w	8009b30 <__kernel_rem_pio2+0x400>
 80099b0:	1e65      	subs	r5, r4, #1
 80099b2:	462b      	mov	r3, r5
 80099b4:	2200      	movs	r2, #0
 80099b6:	9902      	ldr	r1, [sp, #8]
 80099b8:	428b      	cmp	r3, r1
 80099ba:	da6c      	bge.n	8009a96 <__kernel_rem_pio2+0x366>
 80099bc:	2a00      	cmp	r2, #0
 80099be:	f000 8089 	beq.w	8009ad4 <__kernel_rem_pio2+0x3a4>
 80099c2:	ab0e      	add	r3, sp, #56	; 0x38
 80099c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80099c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 80ad 	beq.w	8009b2c <__kernel_rem_pio2+0x3fc>
 80099d2:	4650      	mov	r0, sl
 80099d4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009a50 <__kernel_rem_pio2+0x320>
 80099d8:	f000 fb42 	bl	800a060 <scalbn>
 80099dc:	ab9a      	add	r3, sp, #616	; 0x268
 80099de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80099e2:	ec57 6b10 	vmov	r6, r7, d0
 80099e6:	00ec      	lsls	r4, r5, #3
 80099e8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80099ec:	46aa      	mov	sl, r5
 80099ee:	f1ba 0f00 	cmp.w	sl, #0
 80099f2:	f280 80d6 	bge.w	8009ba2 <__kernel_rem_pio2+0x472>
 80099f6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009a48 <__kernel_rem_pio2+0x318>
 80099fa:	462e      	mov	r6, r5
 80099fc:	2e00      	cmp	r6, #0
 80099fe:	f2c0 8104 	blt.w	8009c0a <__kernel_rem_pio2+0x4da>
 8009a02:	ab72      	add	r3, sp, #456	; 0x1c8
 8009a04:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009a08:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009a70 <__kernel_rem_pio2+0x340>
 8009a0c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009a10:	f04f 0800 	mov.w	r8, #0
 8009a14:	1baf      	subs	r7, r5, r6
 8009a16:	e0ea      	b.n	8009bee <__kernel_rem_pio2+0x4be>
 8009a18:	f04f 0b02 	mov.w	fp, #2
 8009a1c:	e759      	b.n	80098d2 <__kernel_rem_pio2+0x1a2>
 8009a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a22:	b955      	cbnz	r5, 8009a3a <__kernel_rem_pio2+0x30a>
 8009a24:	b123      	cbz	r3, 8009a30 <__kernel_rem_pio2+0x300>
 8009a26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009a2a:	f8c8 3000 	str.w	r3, [r8]
 8009a2e:	2301      	movs	r3, #1
 8009a30:	3201      	adds	r2, #1
 8009a32:	f108 0804 	add.w	r8, r8, #4
 8009a36:	461d      	mov	r5, r3
 8009a38:	e752      	b.n	80098e0 <__kernel_rem_pio2+0x1b0>
 8009a3a:	1acb      	subs	r3, r1, r3
 8009a3c:	f8c8 3000 	str.w	r3, [r8]
 8009a40:	462b      	mov	r3, r5
 8009a42:	e7f5      	b.n	8009a30 <__kernel_rem_pio2+0x300>
 8009a44:	f3af 8000 	nop.w
	...
 8009a54:	3ff00000 	.word	0x3ff00000
 8009a58:	0800ace0 	.word	0x0800ace0
 8009a5c:	40200000 	.word	0x40200000
 8009a60:	3ff00000 	.word	0x3ff00000
 8009a64:	3e700000 	.word	0x3e700000
 8009a68:	41700000 	.word	0x41700000
 8009a6c:	3fe00000 	.word	0x3fe00000
 8009a70:	0800aca0 	.word	0x0800aca0
 8009a74:	1e62      	subs	r2, r4, #1
 8009a76:	ab0e      	add	r3, sp, #56	; 0x38
 8009a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009a80:	a90e      	add	r1, sp, #56	; 0x38
 8009a82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009a86:	e739      	b.n	80098fc <__kernel_rem_pio2+0x1cc>
 8009a88:	1e62      	subs	r2, r4, #1
 8009a8a:	ab0e      	add	r3, sp, #56	; 0x38
 8009a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009a94:	e7f4      	b.n	8009a80 <__kernel_rem_pio2+0x350>
 8009a96:	a90e      	add	r1, sp, #56	; 0x38
 8009a98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	e789      	b.n	80099b6 <__kernel_rem_pio2+0x286>
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009aa8:	2900      	cmp	r1, #0
 8009aaa:	d0fa      	beq.n	8009aa2 <__kernel_rem_pio2+0x372>
 8009aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009ab2:	446a      	add	r2, sp
 8009ab4:	3a98      	subs	r2, #152	; 0x98
 8009ab6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ab8:	9a08      	ldr	r2, [sp, #32]
 8009aba:	18e3      	adds	r3, r4, r3
 8009abc:	18a5      	adds	r5, r4, r2
 8009abe:	aa22      	add	r2, sp, #136	; 0x88
 8009ac0:	f104 0801 	add.w	r8, r4, #1
 8009ac4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009ac8:	9304      	str	r3, [sp, #16]
 8009aca:	9b04      	ldr	r3, [sp, #16]
 8009acc:	4543      	cmp	r3, r8
 8009ace:	da04      	bge.n	8009ada <__kernel_rem_pio2+0x3aa>
 8009ad0:	461c      	mov	r4, r3
 8009ad2:	e6a3      	b.n	800981c <__kernel_rem_pio2+0xec>
 8009ad4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e7e4      	b.n	8009aa4 <__kernel_rem_pio2+0x374>
 8009ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009adc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009ae0:	f7f6 fd38 	bl	8000554 <__aeabi_i2d>
 8009ae4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aea:	46ab      	mov	fp, r5
 8009aec:	461c      	mov	r4, r3
 8009aee:	f04f 0900 	mov.w	r9, #0
 8009af2:	2600      	movs	r6, #0
 8009af4:	2700      	movs	r7, #0
 8009af6:	9b06      	ldr	r3, [sp, #24]
 8009af8:	4599      	cmp	r9, r3
 8009afa:	dd06      	ble.n	8009b0a <__kernel_rem_pio2+0x3da>
 8009afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afe:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009b02:	f108 0801 	add.w	r8, r8, #1
 8009b06:	930a      	str	r3, [sp, #40]	; 0x28
 8009b08:	e7df      	b.n	8009aca <__kernel_rem_pio2+0x39a>
 8009b0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009b0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009b12:	f7f6 fd89 	bl	8000628 <__aeabi_dmul>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	4639      	mov	r1, r7
 8009b1e:	f7f6 fbcd 	bl	80002bc <__adddf3>
 8009b22:	f109 0901 	add.w	r9, r9, #1
 8009b26:	4606      	mov	r6, r0
 8009b28:	460f      	mov	r7, r1
 8009b2a:	e7e4      	b.n	8009af6 <__kernel_rem_pio2+0x3c6>
 8009b2c:	3d01      	subs	r5, #1
 8009b2e:	e748      	b.n	80099c2 <__kernel_rem_pio2+0x292>
 8009b30:	ec47 6b10 	vmov	d0, r6, r7
 8009b34:	f1ca 0000 	rsb	r0, sl, #0
 8009b38:	f000 fa92 	bl	800a060 <scalbn>
 8009b3c:	ec57 6b10 	vmov	r6, r7, d0
 8009b40:	4ba0      	ldr	r3, [pc, #640]	; (8009dc4 <__kernel_rem_pio2+0x694>)
 8009b42:	ee10 0a10 	vmov	r0, s0
 8009b46:	2200      	movs	r2, #0
 8009b48:	4639      	mov	r1, r7
 8009b4a:	f7f6 fff3 	bl	8000b34 <__aeabi_dcmpge>
 8009b4e:	b1f8      	cbz	r0, 8009b90 <__kernel_rem_pio2+0x460>
 8009b50:	4b9d      	ldr	r3, [pc, #628]	; (8009dc8 <__kernel_rem_pio2+0x698>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	4630      	mov	r0, r6
 8009b56:	4639      	mov	r1, r7
 8009b58:	f7f6 fd66 	bl	8000628 <__aeabi_dmul>
 8009b5c:	f7f7 f814 	bl	8000b88 <__aeabi_d2iz>
 8009b60:	4680      	mov	r8, r0
 8009b62:	f7f6 fcf7 	bl	8000554 <__aeabi_i2d>
 8009b66:	4b97      	ldr	r3, [pc, #604]	; (8009dc4 <__kernel_rem_pio2+0x694>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f7f6 fd5d 	bl	8000628 <__aeabi_dmul>
 8009b6e:	460b      	mov	r3, r1
 8009b70:	4602      	mov	r2, r0
 8009b72:	4639      	mov	r1, r7
 8009b74:	4630      	mov	r0, r6
 8009b76:	f7f6 fb9f 	bl	80002b8 <__aeabi_dsub>
 8009b7a:	f7f7 f805 	bl	8000b88 <__aeabi_d2iz>
 8009b7e:	1c65      	adds	r5, r4, #1
 8009b80:	ab0e      	add	r3, sp, #56	; 0x38
 8009b82:	f10a 0a18 	add.w	sl, sl, #24
 8009b86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b8a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009b8e:	e720      	b.n	80099d2 <__kernel_rem_pio2+0x2a2>
 8009b90:	4630      	mov	r0, r6
 8009b92:	4639      	mov	r1, r7
 8009b94:	f7f6 fff8 	bl	8000b88 <__aeabi_d2iz>
 8009b98:	ab0e      	add	r3, sp, #56	; 0x38
 8009b9a:	4625      	mov	r5, r4
 8009b9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009ba0:	e717      	b.n	80099d2 <__kernel_rem_pio2+0x2a2>
 8009ba2:	ab0e      	add	r3, sp, #56	; 0x38
 8009ba4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009ba8:	f7f6 fcd4 	bl	8000554 <__aeabi_i2d>
 8009bac:	4632      	mov	r2, r6
 8009bae:	463b      	mov	r3, r7
 8009bb0:	f7f6 fd3a 	bl	8000628 <__aeabi_dmul>
 8009bb4:	4b84      	ldr	r3, [pc, #528]	; (8009dc8 <__kernel_rem_pio2+0x698>)
 8009bb6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009bba:	2200      	movs	r2, #0
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	4639      	mov	r1, r7
 8009bc0:	f7f6 fd32 	bl	8000628 <__aeabi_dmul>
 8009bc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bc8:	4606      	mov	r6, r0
 8009bca:	460f      	mov	r7, r1
 8009bcc:	e70f      	b.n	80099ee <__kernel_rem_pio2+0x2be>
 8009bce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009bd2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009bd6:	f7f6 fd27 	bl	8000628 <__aeabi_dmul>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	460b      	mov	r3, r1
 8009bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009be2:	f7f6 fb6b 	bl	80002bc <__adddf3>
 8009be6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bea:	f108 0801 	add.w	r8, r8, #1
 8009bee:	9b02      	ldr	r3, [sp, #8]
 8009bf0:	4598      	cmp	r8, r3
 8009bf2:	dc01      	bgt.n	8009bf8 <__kernel_rem_pio2+0x4c8>
 8009bf4:	45b8      	cmp	r8, r7
 8009bf6:	ddea      	ble.n	8009bce <__kernel_rem_pio2+0x49e>
 8009bf8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009bfc:	ab4a      	add	r3, sp, #296	; 0x128
 8009bfe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009c02:	ed87 7b00 	vstr	d7, [r7]
 8009c06:	3e01      	subs	r6, #1
 8009c08:	e6f8      	b.n	80099fc <__kernel_rem_pio2+0x2cc>
 8009c0a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	dc0b      	bgt.n	8009c28 <__kernel_rem_pio2+0x4f8>
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	dc35      	bgt.n	8009c80 <__kernel_rem_pio2+0x550>
 8009c14:	d059      	beq.n	8009cca <__kernel_rem_pio2+0x59a>
 8009c16:	9b04      	ldr	r3, [sp, #16]
 8009c18:	f003 0007 	and.w	r0, r3, #7
 8009c1c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009c20:	ecbd 8b02 	vpop	{d8}
 8009c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d1f3      	bne.n	8009c16 <__kernel_rem_pio2+0x4e6>
 8009c2e:	ab4a      	add	r3, sp, #296	; 0x128
 8009c30:	4423      	add	r3, r4
 8009c32:	9306      	str	r3, [sp, #24]
 8009c34:	461c      	mov	r4, r3
 8009c36:	469a      	mov	sl, r3
 8009c38:	9502      	str	r5, [sp, #8]
 8009c3a:	9b02      	ldr	r3, [sp, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f1aa 0a08 	sub.w	sl, sl, #8
 8009c42:	dc6b      	bgt.n	8009d1c <__kernel_rem_pio2+0x5ec>
 8009c44:	46aa      	mov	sl, r5
 8009c46:	f1ba 0f01 	cmp.w	sl, #1
 8009c4a:	f1a4 0408 	sub.w	r4, r4, #8
 8009c4e:	f300 8085 	bgt.w	8009d5c <__kernel_rem_pio2+0x62c>
 8009c52:	9c06      	ldr	r4, [sp, #24]
 8009c54:	2000      	movs	r0, #0
 8009c56:	3408      	adds	r4, #8
 8009c58:	2100      	movs	r1, #0
 8009c5a:	2d01      	cmp	r5, #1
 8009c5c:	f300 809d 	bgt.w	8009d9a <__kernel_rem_pio2+0x66a>
 8009c60:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009c64:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009c68:	f1bb 0f00 	cmp.w	fp, #0
 8009c6c:	f040 809b 	bne.w	8009da6 <__kernel_rem_pio2+0x676>
 8009c70:	9b01      	ldr	r3, [sp, #4]
 8009c72:	e9c3 5600 	strd	r5, r6, [r3]
 8009c76:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009c7a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009c7e:	e7ca      	b.n	8009c16 <__kernel_rem_pio2+0x4e6>
 8009c80:	3408      	adds	r4, #8
 8009c82:	ab4a      	add	r3, sp, #296	; 0x128
 8009c84:	441c      	add	r4, r3
 8009c86:	462e      	mov	r6, r5
 8009c88:	2000      	movs	r0, #0
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	2e00      	cmp	r6, #0
 8009c8e:	da36      	bge.n	8009cfe <__kernel_rem_pio2+0x5ce>
 8009c90:	f1bb 0f00 	cmp.w	fp, #0
 8009c94:	d039      	beq.n	8009d0a <__kernel_rem_pio2+0x5da>
 8009c96:	4602      	mov	r2, r0
 8009c98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c9c:	9c01      	ldr	r4, [sp, #4]
 8009c9e:	e9c4 2300 	strd	r2, r3, [r4]
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009caa:	f7f6 fb05 	bl	80002b8 <__aeabi_dsub>
 8009cae:	ae4c      	add	r6, sp, #304	; 0x130
 8009cb0:	2401      	movs	r4, #1
 8009cb2:	42a5      	cmp	r5, r4
 8009cb4:	da2c      	bge.n	8009d10 <__kernel_rem_pio2+0x5e0>
 8009cb6:	f1bb 0f00 	cmp.w	fp, #0
 8009cba:	d002      	beq.n	8009cc2 <__kernel_rem_pio2+0x592>
 8009cbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	9b01      	ldr	r3, [sp, #4]
 8009cc4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009cc8:	e7a5      	b.n	8009c16 <__kernel_rem_pio2+0x4e6>
 8009cca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009cce:	eb0d 0403 	add.w	r4, sp, r3
 8009cd2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	2100      	movs	r1, #0
 8009cda:	2d00      	cmp	r5, #0
 8009cdc:	da09      	bge.n	8009cf2 <__kernel_rem_pio2+0x5c2>
 8009cde:	f1bb 0f00 	cmp.w	fp, #0
 8009ce2:	d002      	beq.n	8009cea <__kernel_rem_pio2+0x5ba>
 8009ce4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ce8:	4619      	mov	r1, r3
 8009cea:	9b01      	ldr	r3, [sp, #4]
 8009cec:	e9c3 0100 	strd	r0, r1, [r3]
 8009cf0:	e791      	b.n	8009c16 <__kernel_rem_pio2+0x4e6>
 8009cf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009cf6:	f7f6 fae1 	bl	80002bc <__adddf3>
 8009cfa:	3d01      	subs	r5, #1
 8009cfc:	e7ed      	b.n	8009cda <__kernel_rem_pio2+0x5aa>
 8009cfe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d02:	f7f6 fadb 	bl	80002bc <__adddf3>
 8009d06:	3e01      	subs	r6, #1
 8009d08:	e7c0      	b.n	8009c8c <__kernel_rem_pio2+0x55c>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	e7c5      	b.n	8009c9c <__kernel_rem_pio2+0x56c>
 8009d10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009d14:	f7f6 fad2 	bl	80002bc <__adddf3>
 8009d18:	3401      	adds	r4, #1
 8009d1a:	e7ca      	b.n	8009cb2 <__kernel_rem_pio2+0x582>
 8009d1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009d24:	9b02      	ldr	r3, [sp, #8]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	9302      	str	r3, [sp, #8]
 8009d2a:	4632      	mov	r2, r6
 8009d2c:	463b      	mov	r3, r7
 8009d2e:	4640      	mov	r0, r8
 8009d30:	4649      	mov	r1, r9
 8009d32:	f7f6 fac3 	bl	80002bc <__adddf3>
 8009d36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4640      	mov	r0, r8
 8009d40:	4649      	mov	r1, r9
 8009d42:	f7f6 fab9 	bl	80002b8 <__aeabi_dsub>
 8009d46:	4632      	mov	r2, r6
 8009d48:	463b      	mov	r3, r7
 8009d4a:	f7f6 fab7 	bl	80002bc <__adddf3>
 8009d4e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009d52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d56:	ed8a 7b00 	vstr	d7, [sl]
 8009d5a:	e76e      	b.n	8009c3a <__kernel_rem_pio2+0x50a>
 8009d5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009d60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009d64:	4640      	mov	r0, r8
 8009d66:	4632      	mov	r2, r6
 8009d68:	463b      	mov	r3, r7
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	f7f6 faa6 	bl	80002bc <__adddf3>
 8009d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	f7f6 fa9c 	bl	80002b8 <__aeabi_dsub>
 8009d80:	4632      	mov	r2, r6
 8009d82:	463b      	mov	r3, r7
 8009d84:	f7f6 fa9a 	bl	80002bc <__adddf3>
 8009d88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d90:	ed84 7b00 	vstr	d7, [r4]
 8009d94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d98:	e755      	b.n	8009c46 <__kernel_rem_pio2+0x516>
 8009d9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d9e:	f7f6 fa8d 	bl	80002bc <__adddf3>
 8009da2:	3d01      	subs	r5, #1
 8009da4:	e759      	b.n	8009c5a <__kernel_rem_pio2+0x52a>
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	9a01      	ldr	r2, [sp, #4]
 8009daa:	601d      	str	r5, [r3, #0]
 8009dac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009db0:	605c      	str	r4, [r3, #4]
 8009db2:	609f      	str	r7, [r3, #8]
 8009db4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009db8:	60d3      	str	r3, [r2, #12]
 8009dba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dbe:	6110      	str	r0, [r2, #16]
 8009dc0:	6153      	str	r3, [r2, #20]
 8009dc2:	e728      	b.n	8009c16 <__kernel_rem_pio2+0x4e6>
 8009dc4:	41700000 	.word	0x41700000
 8009dc8:	3e700000 	.word	0x3e700000
 8009dcc:	00000000 	.word	0x00000000

08009dd0 <__kernel_sin>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	ed2d 8b04 	vpush	{d8-d9}
 8009dd8:	eeb0 8a41 	vmov.f32	s16, s2
 8009ddc:	eef0 8a61 	vmov.f32	s17, s3
 8009de0:	ec55 4b10 	vmov	r4, r5, d0
 8009de4:	b083      	sub	sp, #12
 8009de6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009dea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009dee:	9001      	str	r0, [sp, #4]
 8009df0:	da06      	bge.n	8009e00 <__kernel_sin+0x30>
 8009df2:	ee10 0a10 	vmov	r0, s0
 8009df6:	4629      	mov	r1, r5
 8009df8:	f7f6 fec6 	bl	8000b88 <__aeabi_d2iz>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d051      	beq.n	8009ea4 <__kernel_sin+0xd4>
 8009e00:	4622      	mov	r2, r4
 8009e02:	462b      	mov	r3, r5
 8009e04:	4620      	mov	r0, r4
 8009e06:	4629      	mov	r1, r5
 8009e08:	f7f6 fc0e 	bl	8000628 <__aeabi_dmul>
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	468b      	mov	fp, r1
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4620      	mov	r0, r4
 8009e16:	4629      	mov	r1, r5
 8009e18:	f7f6 fc06 	bl	8000628 <__aeabi_dmul>
 8009e1c:	a341      	add	r3, pc, #260	; (adr r3, 8009f24 <__kernel_sin+0x154>)
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	4680      	mov	r8, r0
 8009e24:	4689      	mov	r9, r1
 8009e26:	4650      	mov	r0, sl
 8009e28:	4659      	mov	r1, fp
 8009e2a:	f7f6 fbfd 	bl	8000628 <__aeabi_dmul>
 8009e2e:	a33f      	add	r3, pc, #252	; (adr r3, 8009f2c <__kernel_sin+0x15c>)
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	f7f6 fa40 	bl	80002b8 <__aeabi_dsub>
 8009e38:	4652      	mov	r2, sl
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	f7f6 fbf4 	bl	8000628 <__aeabi_dmul>
 8009e40:	a33c      	add	r3, pc, #240	; (adr r3, 8009f34 <__kernel_sin+0x164>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	f7f6 fa39 	bl	80002bc <__adddf3>
 8009e4a:	4652      	mov	r2, sl
 8009e4c:	465b      	mov	r3, fp
 8009e4e:	f7f6 fbeb 	bl	8000628 <__aeabi_dmul>
 8009e52:	a33a      	add	r3, pc, #232	; (adr r3, 8009f3c <__kernel_sin+0x16c>)
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	f7f6 fa2e 	bl	80002b8 <__aeabi_dsub>
 8009e5c:	4652      	mov	r2, sl
 8009e5e:	465b      	mov	r3, fp
 8009e60:	f7f6 fbe2 	bl	8000628 <__aeabi_dmul>
 8009e64:	a337      	add	r3, pc, #220	; (adr r3, 8009f44 <__kernel_sin+0x174>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	f7f6 fa27 	bl	80002bc <__adddf3>
 8009e6e:	9b01      	ldr	r3, [sp, #4]
 8009e70:	4606      	mov	r6, r0
 8009e72:	460f      	mov	r7, r1
 8009e74:	b9eb      	cbnz	r3, 8009eb2 <__kernel_sin+0xe2>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4650      	mov	r0, sl
 8009e7c:	4659      	mov	r1, fp
 8009e7e:	f7f6 fbd3 	bl	8000628 <__aeabi_dmul>
 8009e82:	a325      	add	r3, pc, #148	; (adr r3, 8009f18 <__kernel_sin+0x148>)
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	f7f6 fa16 	bl	80002b8 <__aeabi_dsub>
 8009e8c:	4642      	mov	r2, r8
 8009e8e:	464b      	mov	r3, r9
 8009e90:	f7f6 fbca 	bl	8000628 <__aeabi_dmul>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4620      	mov	r0, r4
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	f7f6 fa0e 	bl	80002bc <__adddf3>
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	460d      	mov	r5, r1
 8009ea4:	ec45 4b10 	vmov	d0, r4, r5
 8009ea8:	b003      	add	sp, #12
 8009eaa:	ecbd 8b04 	vpop	{d8-d9}
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	4b1b      	ldr	r3, [pc, #108]	; (8009f20 <__kernel_sin+0x150>)
 8009eb4:	ec51 0b18 	vmov	r0, r1, d8
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f7f6 fbb5 	bl	8000628 <__aeabi_dmul>
 8009ebe:	4632      	mov	r2, r6
 8009ec0:	ec41 0b19 	vmov	d9, r0, r1
 8009ec4:	463b      	mov	r3, r7
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	4649      	mov	r1, r9
 8009eca:	f7f6 fbad 	bl	8000628 <__aeabi_dmul>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	ec51 0b19 	vmov	r0, r1, d9
 8009ed6:	f7f6 f9ef 	bl	80002b8 <__aeabi_dsub>
 8009eda:	4652      	mov	r2, sl
 8009edc:	465b      	mov	r3, fp
 8009ede:	f7f6 fba3 	bl	8000628 <__aeabi_dmul>
 8009ee2:	ec53 2b18 	vmov	r2, r3, d8
 8009ee6:	f7f6 f9e7 	bl	80002b8 <__aeabi_dsub>
 8009eea:	a30b      	add	r3, pc, #44	; (adr r3, 8009f18 <__kernel_sin+0x148>)
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	460f      	mov	r7, r1
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	f7f6 fb96 	bl	8000628 <__aeabi_dmul>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4630      	mov	r0, r6
 8009f02:	4639      	mov	r1, r7
 8009f04:	f7f6 f9da 	bl	80002bc <__adddf3>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	4629      	mov	r1, r5
 8009f10:	f7f6 f9d2 	bl	80002b8 <__aeabi_dsub>
 8009f14:	e7c4      	b.n	8009ea0 <__kernel_sin+0xd0>
 8009f16:	bf00      	nop
 8009f18:	55555549 	.word	0x55555549
 8009f1c:	3fc55555 	.word	0x3fc55555
 8009f20:	3fe00000 	.word	0x3fe00000
 8009f24:	5acfd57c 	.word	0x5acfd57c
 8009f28:	3de5d93a 	.word	0x3de5d93a
 8009f2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009f30:	3e5ae5e6 	.word	0x3e5ae5e6
 8009f34:	57b1fe7d 	.word	0x57b1fe7d
 8009f38:	3ec71de3 	.word	0x3ec71de3
 8009f3c:	19c161d5 	.word	0x19c161d5
 8009f40:	3f2a01a0 	.word	0x3f2a01a0
 8009f44:	1110f8a6 	.word	0x1110f8a6
 8009f48:	3f811111 	.word	0x3f811111

08009f4c <fabs>:
 8009f4c:	ec51 0b10 	vmov	r0, r1, d0
 8009f50:	ee10 2a10 	vmov	r2, s0
 8009f54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f58:	ec43 2b10 	vmov	d0, r2, r3
 8009f5c:	4770      	bx	lr
	...

08009f60 <floor>:
 8009f60:	ec51 0b10 	vmov	r0, r1, d0
 8009f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009f6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009f70:	2e13      	cmp	r6, #19
 8009f72:	ee10 5a10 	vmov	r5, s0
 8009f76:	ee10 8a10 	vmov	r8, s0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	dc32      	bgt.n	8009fe4 <floor+0x84>
 8009f7e:	2e00      	cmp	r6, #0
 8009f80:	da14      	bge.n	8009fac <floor+0x4c>
 8009f82:	a333      	add	r3, pc, #204	; (adr r3, 800a050 <floor+0xf0>)
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	f7f6 f998 	bl	80002bc <__adddf3>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f7f6 fdda 	bl	8000b48 <__aeabi_dcmpgt>
 8009f94:	b138      	cbz	r0, 8009fa6 <floor+0x46>
 8009f96:	2c00      	cmp	r4, #0
 8009f98:	da57      	bge.n	800a04a <floor+0xea>
 8009f9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009f9e:	431d      	orrs	r5, r3
 8009fa0:	d001      	beq.n	8009fa6 <floor+0x46>
 8009fa2:	4c2d      	ldr	r4, [pc, #180]	; (800a058 <floor+0xf8>)
 8009fa4:	2500      	movs	r5, #0
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	4628      	mov	r0, r5
 8009faa:	e025      	b.n	8009ff8 <floor+0x98>
 8009fac:	4f2b      	ldr	r7, [pc, #172]	; (800a05c <floor+0xfc>)
 8009fae:	4137      	asrs	r7, r6
 8009fb0:	ea01 0307 	and.w	r3, r1, r7
 8009fb4:	4303      	orrs	r3, r0
 8009fb6:	d01f      	beq.n	8009ff8 <floor+0x98>
 8009fb8:	a325      	add	r3, pc, #148	; (adr r3, 800a050 <floor+0xf0>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 f97d 	bl	80002bc <__adddf3>
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f7f6 fdbf 	bl	8000b48 <__aeabi_dcmpgt>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d0eb      	beq.n	8009fa6 <floor+0x46>
 8009fce:	2c00      	cmp	r4, #0
 8009fd0:	bfbe      	ittt	lt
 8009fd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009fd6:	fa43 f606 	asrlt.w	r6, r3, r6
 8009fda:	19a4      	addlt	r4, r4, r6
 8009fdc:	ea24 0407 	bic.w	r4, r4, r7
 8009fe0:	2500      	movs	r5, #0
 8009fe2:	e7e0      	b.n	8009fa6 <floor+0x46>
 8009fe4:	2e33      	cmp	r6, #51	; 0x33
 8009fe6:	dd0b      	ble.n	800a000 <floor+0xa0>
 8009fe8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009fec:	d104      	bne.n	8009ff8 <floor+0x98>
 8009fee:	ee10 2a10 	vmov	r2, s0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	f7f6 f962 	bl	80002bc <__adddf3>
 8009ff8:	ec41 0b10 	vmov	d0, r0, r1
 8009ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a000:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a004:	f04f 33ff 	mov.w	r3, #4294967295
 800a008:	fa23 f707 	lsr.w	r7, r3, r7
 800a00c:	4207      	tst	r7, r0
 800a00e:	d0f3      	beq.n	8009ff8 <floor+0x98>
 800a010:	a30f      	add	r3, pc, #60	; (adr r3, 800a050 <floor+0xf0>)
 800a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a016:	f7f6 f951 	bl	80002bc <__adddf3>
 800a01a:	2200      	movs	r2, #0
 800a01c:	2300      	movs	r3, #0
 800a01e:	f7f6 fd93 	bl	8000b48 <__aeabi_dcmpgt>
 800a022:	2800      	cmp	r0, #0
 800a024:	d0bf      	beq.n	8009fa6 <floor+0x46>
 800a026:	2c00      	cmp	r4, #0
 800a028:	da02      	bge.n	800a030 <floor+0xd0>
 800a02a:	2e14      	cmp	r6, #20
 800a02c:	d103      	bne.n	800a036 <floor+0xd6>
 800a02e:	3401      	adds	r4, #1
 800a030:	ea25 0507 	bic.w	r5, r5, r7
 800a034:	e7b7      	b.n	8009fa6 <floor+0x46>
 800a036:	2301      	movs	r3, #1
 800a038:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a03c:	fa03 f606 	lsl.w	r6, r3, r6
 800a040:	4435      	add	r5, r6
 800a042:	4545      	cmp	r5, r8
 800a044:	bf38      	it	cc
 800a046:	18e4      	addcc	r4, r4, r3
 800a048:	e7f2      	b.n	800a030 <floor+0xd0>
 800a04a:	2500      	movs	r5, #0
 800a04c:	462c      	mov	r4, r5
 800a04e:	e7aa      	b.n	8009fa6 <floor+0x46>
 800a050:	8800759c 	.word	0x8800759c
 800a054:	7e37e43c 	.word	0x7e37e43c
 800a058:	bff00000 	.word	0xbff00000
 800a05c:	000fffff 	.word	0x000fffff

0800a060 <scalbn>:
 800a060:	b570      	push	{r4, r5, r6, lr}
 800a062:	ec55 4b10 	vmov	r4, r5, d0
 800a066:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a06a:	4606      	mov	r6, r0
 800a06c:	462b      	mov	r3, r5
 800a06e:	b99a      	cbnz	r2, 800a098 <scalbn+0x38>
 800a070:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a074:	4323      	orrs	r3, r4
 800a076:	d036      	beq.n	800a0e6 <scalbn+0x86>
 800a078:	4b39      	ldr	r3, [pc, #228]	; (800a160 <scalbn+0x100>)
 800a07a:	4629      	mov	r1, r5
 800a07c:	ee10 0a10 	vmov	r0, s0
 800a080:	2200      	movs	r2, #0
 800a082:	f7f6 fad1 	bl	8000628 <__aeabi_dmul>
 800a086:	4b37      	ldr	r3, [pc, #220]	; (800a164 <scalbn+0x104>)
 800a088:	429e      	cmp	r6, r3
 800a08a:	4604      	mov	r4, r0
 800a08c:	460d      	mov	r5, r1
 800a08e:	da10      	bge.n	800a0b2 <scalbn+0x52>
 800a090:	a32b      	add	r3, pc, #172	; (adr r3, 800a140 <scalbn+0xe0>)
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	e03a      	b.n	800a10e <scalbn+0xae>
 800a098:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a09c:	428a      	cmp	r2, r1
 800a09e:	d10c      	bne.n	800a0ba <scalbn+0x5a>
 800a0a0:	ee10 2a10 	vmov	r2, s0
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	f7f6 f908 	bl	80002bc <__adddf3>
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	460d      	mov	r5, r1
 800a0b0:	e019      	b.n	800a0e6 <scalbn+0x86>
 800a0b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	3a36      	subs	r2, #54	; 0x36
 800a0ba:	4432      	add	r2, r6
 800a0bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a0c0:	428a      	cmp	r2, r1
 800a0c2:	dd08      	ble.n	800a0d6 <scalbn+0x76>
 800a0c4:	2d00      	cmp	r5, #0
 800a0c6:	a120      	add	r1, pc, #128	; (adr r1, 800a148 <scalbn+0xe8>)
 800a0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0cc:	da1c      	bge.n	800a108 <scalbn+0xa8>
 800a0ce:	a120      	add	r1, pc, #128	; (adr r1, 800a150 <scalbn+0xf0>)
 800a0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d4:	e018      	b.n	800a108 <scalbn+0xa8>
 800a0d6:	2a00      	cmp	r2, #0
 800a0d8:	dd08      	ble.n	800a0ec <scalbn+0x8c>
 800a0da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0e6:	ec45 4b10 	vmov	d0, r4, r5
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a0f0:	da19      	bge.n	800a126 <scalbn+0xc6>
 800a0f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a0f6:	429e      	cmp	r6, r3
 800a0f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a0fc:	dd0a      	ble.n	800a114 <scalbn+0xb4>
 800a0fe:	a112      	add	r1, pc, #72	; (adr r1, 800a148 <scalbn+0xe8>)
 800a100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e2      	bne.n	800a0ce <scalbn+0x6e>
 800a108:	a30f      	add	r3, pc, #60	; (adr r3, 800a148 <scalbn+0xe8>)
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	f7f6 fa8b 	bl	8000628 <__aeabi_dmul>
 800a112:	e7cb      	b.n	800a0ac <scalbn+0x4c>
 800a114:	a10a      	add	r1, pc, #40	; (adr r1, 800a140 <scalbn+0xe0>)
 800a116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0b8      	beq.n	800a090 <scalbn+0x30>
 800a11e:	a10e      	add	r1, pc, #56	; (adr r1, 800a158 <scalbn+0xf8>)
 800a120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a124:	e7b4      	b.n	800a090 <scalbn+0x30>
 800a126:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a12a:	3236      	adds	r2, #54	; 0x36
 800a12c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a130:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a134:	4620      	mov	r0, r4
 800a136:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <scalbn+0x108>)
 800a138:	2200      	movs	r2, #0
 800a13a:	e7e8      	b.n	800a10e <scalbn+0xae>
 800a13c:	f3af 8000 	nop.w
 800a140:	c2f8f359 	.word	0xc2f8f359
 800a144:	01a56e1f 	.word	0x01a56e1f
 800a148:	8800759c 	.word	0x8800759c
 800a14c:	7e37e43c 	.word	0x7e37e43c
 800a150:	8800759c 	.word	0x8800759c
 800a154:	fe37e43c 	.word	0xfe37e43c
 800a158:	c2f8f359 	.word	0xc2f8f359
 800a15c:	81a56e1f 	.word	0x81a56e1f
 800a160:	43500000 	.word	0x43500000
 800a164:	ffff3cb0 	.word	0xffff3cb0
 800a168:	3c900000 	.word	0x3c900000

0800a16c <_init>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	bf00      	nop
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr

0800a178 <_fini>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	bf00      	nop
 800a17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17e:	bc08      	pop	{r3}
 800a180:	469e      	mov	lr, r3
 800a182:	4770      	bx	lr
