
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800a3a0  0800a3a0  0001a3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c4  0800a8c4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8cc  0800a8cc  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8cc  0800a8cc  0001a8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d0  0800a8d0  0001a8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a8d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d78  200001f8  0800aacc  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002f70  0800aacc  00022f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f7ac  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000506d  00000000  00000000  0004f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002b47d  00000000  00000000  00054a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  0007fec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005b98  00000000  00000000  000810b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006e40  00000000  00000000  00086c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031815  00000000  00000000  0008da90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1b6e  00000000  00000000  000bf2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160e13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053b4  00000000  00000000  00160e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a384 	.word	0x0800a384

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800a384 	.word	0x0800a384

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <audio_init>:
}


void audio_init(Audio* audio) {
	for (uint8_t i = 0; i < MAX_AUDIO_QUEUE_LEN; ++i) {
		audio->queue[i] = NULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8000ec2:	e9c0 3307 	strd	r3, r3, [r0, #28]
	}

	audio->read_pos = 0;
	audio->write_pos = 0;
 8000ec6:	f880 385b 	strb.w	r3, [r0, #2139]	; 0x85b
	audio->dac_flag = 0;
 8000eca:	f8a0 3859 	strh.w	r3, [r0, #2137]	; 0x859
	audio->bytes_left = 0;
 8000ece:	f8c0 3850 	str.w	r3, [r0, #2128]	; 0x850
}
 8000ed2:	4770      	bx	lr

08000ed4 <check_and_fill_audio_buf>:

uint8_t is_playing(Audio* audio) {
	return audio->dac_flag & (1 << 2);
 8000ed4:	f890 3859 	ldrb.w	r3, [r0, #2137]	; 0x859
	audio->write_pos = (audio->write_pos + 1) % MAX_AUDIO_QUEUE_LEN;
	HAL_TIM_Base_Start_IT(audio->htim);
}

void check_and_fill_audio_buf(Audio* audio) {
	if (!(is_playing(audio))) {
 8000ed8:	0759      	lsls	r1, r3, #29
 8000eda:	d53c      	bpl.n	8000f56 <check_and_fill_audio_buf+0x82>
void check_and_fill_audio_buf(Audio* audio) {
 8000edc:	b510      	push	{r4, lr}
		return;
	}

	if (!(audio->dac_flag & 1)) {
 8000ede:	07da      	lsls	r2, r3, #31
void check_and_fill_audio_buf(Audio* audio) {
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	4604      	mov	r4, r0
	if (!(audio->dac_flag & 1)) {
 8000ee4:	d51e      	bpl.n	8000f24 <check_and_fill_audio_buf+0x50>
		fill_audio_buffer(audio, 0);
	}

	if (!(audio->dac_flag & (1 << 1))) {
 8000ee6:	079b      	lsls	r3, r3, #30
 8000ee8:	d501      	bpl.n	8000eee <check_and_fill_audio_buf+0x1a>
		fill_audio_buffer(audio, 1);
	}
}
 8000eea:	b002      	add	sp, #8
 8000eec:	bd10      	pop	{r4, pc}
	UINT bytes_to_read = audio->wav_header.file_size < AUDIO_BUF_LEN
 8000eee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 8000ef0:	6860      	ldr	r0, [r4, #4]
 8000ef2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000ef6:	bf28      	it	cs
 8000ef8:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8000efc:	ab01      	add	r3, sp, #4
 8000efe:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 8000f02:	f006 fa35 	bl	8007370 <f_read>
	if (res != FR_OK || !bytes_read) {
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d1ef      	bne.n	8000eea <check_and_fill_audio_buf+0x16>
 8000f0a:	9b01      	ldr	r3, [sp, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0ec      	beq.n	8000eea <check_and_fill_audio_buf+0x16>
	audio->wav_header.file_size -= bytes_read;
 8000f10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000f12:	f894 2859 	ldrb.w	r2, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 8000f16:	1acb      	subs	r3, r1, r3
	audio->dac_flag |= (1 << buf_bank);
 8000f18:	f042 0202 	orr.w	r2, r2, #2
	audio->wav_header.file_size -= bytes_read;
 8000f1c:	62a3      	str	r3, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000f1e:	f884 2859 	strb.w	r2, [r4, #2137]	; 0x859
	return 1;
 8000f22:	e7e2      	b.n	8000eea <check_and_fill_audio_buf+0x16>
	UINT bytes_to_read = audio->wav_header.file_size < AUDIO_BUF_LEN
 8000f24:	6a82      	ldr	r2, [r0, #40]	; 0x28
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 8000f26:	6840      	ldr	r0, [r0, #4]
 8000f28:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000f2c:	bf28      	it	cs
 8000f2e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8000f32:	ab01      	add	r3, sp, #4
 8000f34:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8000f38:	f006 fa1a 	bl	8007370 <f_read>
	if (res != FR_OK || !bytes_read) {
 8000f3c:	b960      	cbnz	r0, 8000f58 <check_and_fill_audio_buf+0x84>
 8000f3e:	9a01      	ldr	r2, [sp, #4]
 8000f40:	b152      	cbz	r2, 8000f58 <check_and_fill_audio_buf+0x84>
	audio->wav_header.file_size -= bytes_read;
 8000f42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000f44:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 8000f48:	1a8a      	subs	r2, r1, r2
	audio->dac_flag |= (1 << buf_bank);
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
	audio->wav_header.file_size -= bytes_read;
 8000f4e:	62a2      	str	r2, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000f50:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
	return 1;
 8000f54:	e7c7      	b.n	8000ee6 <check_and_fill_audio_buf+0x12>
 8000f56:	4770      	bx	lr
	if (!(audio->dac_flag & (1 << 1))) {
 8000f58:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 8000f5c:	079b      	lsls	r3, r3, #30
 8000f5e:	d4c4      	bmi.n	8000eea <check_and_fill_audio_buf+0x16>
 8000f60:	e7c5      	b.n	8000eee <check_and_fill_audio_buf+0x1a>
 8000f62:	bf00      	nop

08000f64 <audio_callback>:

void audio_callback(Audio* audio) {
 8000f64:	b570      	push	{r4, r5, r6, lr}

	if (!audio->bytes_left) {
 8000f66:	f8d0 5850 	ldr.w	r5, [r0, #2128]	; 0x850
void audio_callback(Audio* audio) {
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	4604      	mov	r4, r0
	if (!audio->bytes_left) {
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	d04d      	beq.n	800100e <audio_callback+0xaa>
		shutdown_dac(audio->ext_dac);
		play_next(audio);
		return;
	}

	if (audio->dac_buf_idx >= AUDIO_BUF_LEN) {
 8000f72:	f8b0 3854 	ldrh.w	r3, [r0, #2132]	; 0x854
 8000f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7a:	d218      	bcs.n	8000fae <audio_callback+0x4a>
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
		audio->dac_buf_idx = 0;
	}

	// ERROR CASE: stop and reinitialize
	if (!(audio->dac_flag & 0b11)) {
 8000f7c:	f890 5859 	ldrb.w	r5, [r0, #2137]	; 0x859
 8000f80:	f015 0503 	ands.w	r5, r5, #3
 8000f84:	d028      	beq.n	8000fd8 <audio_callback+0x74>
		audio_init(audio);
		return;
	}

	write_to_dac(audio->ext_dac,
			audio->dac_buf[audio->dac_buf_bank][audio->dac_buf_idx++]);
 8000f86:	f894 2858 	ldrb.w	r2, [r4, #2136]	; 0x858
	write_to_dac(audio->ext_dac,
 8000f8a:	68a0      	ldr	r0, [r4, #8]
 8000f8c:	eb04 2282 	add.w	r2, r4, r2, lsl #10
			audio->dac_buf[audio->dac_buf_bank][audio->dac_buf_idx++]);
 8000f90:	1c59      	adds	r1, r3, #1
	write_to_dac(audio->ext_dac,
 8000f92:	4413      	add	r3, r2
			audio->dac_buf[audio->dac_buf_bank][audio->dac_buf_idx++]);
 8000f94:	f8a4 1854 	strh.w	r1, [r4, #2132]	; 0x854
	write_to_dac(audio->ext_dac,
 8000f98:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8000f9c:	f000 f98c 	bl	80012b8 <write_to_dac>

	--audio->bytes_left;
 8000fa0:	f8d4 3850 	ldr.w	r3, [r4, #2128]	; 0x850
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	f8c4 3850 	str.w	r3, [r4, #2128]	; 0x850
}
 8000faa:	b002      	add	sp, #8
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
		audio->dac_flag &= ~(1 << audio->dac_buf_bank);
 8000fae:	f890 3858 	ldrb.w	r3, [r0, #2136]	; 0x858
 8000fb2:	f890 5859 	ldrb.w	r5, [r0, #2137]	; 0x859
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4099      	lsls	r1, r3
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
 8000fba:	1c5a      	adds	r2, r3, #1
		audio->dac_flag &= ~(1 << audio->dac_buf_bank);
 8000fbc:	ea25 0501 	bic.w	r5, r5, r1
		audio->dac_buf_idx = 0;
 8000fc0:	2300      	movs	r3, #0
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
 8000fc2:	f002 0201 	and.w	r2, r2, #1
		audio->dac_flag &= ~(1 << audio->dac_buf_bank);
 8000fc6:	f880 5859 	strb.w	r5, [r0, #2137]	; 0x859
	if (!(audio->dac_flag & 0b11)) {
 8000fca:	f015 0503 	ands.w	r5, r5, #3
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
 8000fce:	f880 2858 	strb.w	r2, [r0, #2136]	; 0x858
		audio->dac_buf_idx = 0;
 8000fd2:	f8a0 3854 	strh.w	r3, [r0, #2132]	; 0x854
	if (!(audio->dac_flag & 0b11)) {
 8000fd6:	d1d6      	bne.n	8000f86 <audio_callback+0x22>
	HAL_TIM_Base_Stop_IT(audio->htim);
 8000fd8:	68e0      	ldr	r0, [r4, #12]
 8000fda:	f004 f8e9 	bl	80051b0 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(audio->amp_enable_port, audio->amp_enable_pin, GPIO_PIN_RESET);
 8000fde:	f8b4 1856 	ldrh.w	r1, [r4, #2134]	; 0x856
 8000fe2:	6920      	ldr	r0, [r4, #16]
 8000fe4:	462a      	mov	r2, r5
 8000fe6:	f002 fe1f 	bl	8003c28 <HAL_GPIO_WritePin>
	shutdown_dac(audio->ext_dac);
 8000fea:	68a0      	ldr	r0, [r4, #8]
 8000fec:	f000 f944 	bl	8001278 <shutdown_dac>
	f_close(audio->fil);
 8000ff0:	6860      	ldr	r0, [r4, #4]
 8000ff2:	f006 fb35 	bl	8007660 <f_close>
		audio->queue[i] = NULL;
 8000ff6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000ffa:	e9c4 5507 	strd	r5, r5, [r4, #28]
	audio->dac_flag = 0;
 8000ffe:	f8a4 5859 	strh.w	r5, [r4, #2137]	; 0x859
	audio->write_pos = 0;
 8001002:	f884 585b 	strb.w	r5, [r4, #2139]	; 0x85b
	audio->bytes_left = 0;
 8001006:	f8c4 5850 	str.w	r5, [r4, #2128]	; 0x850
}
 800100a:	b002      	add	sp, #8
 800100c:	bd70      	pop	{r4, r5, r6, pc}
		shutdown_dac(audio->ext_dac);
 800100e:	6880      	ldr	r0, [r0, #8]
 8001010:	f000 f932 	bl	8001278 <shutdown_dac>
	const TCHAR* filename = audio->queue[audio->read_pos];
 8001014:	f894 385a 	ldrb.w	r3, [r4, #2138]	; 0x85a
 8001018:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800101c:	695e      	ldr	r6, [r3, #20]
	if (!filename) {
 800101e:	2e00      	cmp	r6, #0
 8001020:	d059      	beq.n	80010d6 <audio_callback+0x172>
	f_open(audio->fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001022:	2213      	movs	r2, #19
 8001024:	4631      	mov	r1, r6
 8001026:	6860      	ldr	r0, [r4, #4]
 8001028:	f006 f826 	bl	8007078 <f_open>
	f_read(audio->fil, &audio->wav_header, sizeof(WAV_Header), &count);
 800102c:	466b      	mov	r3, sp
 800102e:	222c      	movs	r2, #44	; 0x2c
 8001030:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8001034:	6860      	ldr	r0, [r4, #4]
 8001036:	f006 f99b 	bl	8007370 <f_read>
	audio->queue[audio->read_pos] = NULL;
 800103a:	f894 385a 	ldrb.w	r3, [r4, #2138]	; 0x85a
	audio->bytes_left = audio->wav_header.file_size;
 800103e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 8001040:	6860      	ldr	r0, [r4, #4]
	audio->queue[audio->read_pos] = NULL;
 8001042:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 	audio->read_pos = (audio->read_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 8001046:	3301      	adds	r3, #1
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 8001048:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 	audio->read_pos = (audio->read_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 800104c:	f003 0303 	and.w	r3, r3, #3
	audio->queue[audio->read_pos] = NULL;
 8001050:	614d      	str	r5, [r1, #20]
	audio->bytes_left = audio->wav_header.file_size;
 8001052:	f8c4 2850 	str.w	r2, [r4, #2128]	; 0x850
 	audio->read_pos = (audio->read_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 8001056:	f884 385a 	strb.w	r3, [r4, #2138]	; 0x85a
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 800105a:	bf28      	it	cs
 800105c:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8001060:	ab01      	add	r3, sp, #4
 8001062:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8001066:	f006 f983 	bl	8007370 <f_read>
	UINT bytes_to_read = audio->wav_header.file_size < AUDIO_BUF_LEN
 800106a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (res != FR_OK || !bytes_read) {
 800106c:	b948      	cbnz	r0, 8001082 <audio_callback+0x11e>
 800106e:	9b01      	ldr	r3, [sp, #4]
 8001070:	b13b      	cbz	r3, 8001082 <audio_callback+0x11e>
	audio->dac_flag |= (1 << buf_bank);
 8001072:	f894 1859 	ldrb.w	r1, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 8001076:	1ad2      	subs	r2, r2, r3
	audio->dac_flag |= (1 << buf_bank);
 8001078:	f041 0301 	orr.w	r3, r1, #1
	audio->wav_header.file_size -= bytes_read;
 800107c:	62a2      	str	r2, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 800107e:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 8001082:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001086:	bf28      	it	cs
 8001088:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 800108c:	6860      	ldr	r0, [r4, #4]
 800108e:	ab01      	add	r3, sp, #4
 8001090:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 8001094:	f006 f96c 	bl	8007370 <f_read>
	if (res != FR_OK || !bytes_read) {
 8001098:	b9d0      	cbnz	r0, 80010d0 <audio_callback+0x16c>
 800109a:	9a01      	ldr	r2, [sp, #4]
 800109c:	b1c2      	cbz	r2, 80010d0 <audio_callback+0x16c>
	audio->wav_header.file_size -= bytes_read;
 800109e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 80010a0:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 80010a4:	1a8a      	subs	r2, r1, r2
	audio->dac_flag |= (1 << buf_bank);
 80010a6:	f043 0302 	orr.w	r3, r3, #2
	audio->wav_header.file_size -= bytes_read;
 80010aa:	62a2      	str	r2, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 80010ac:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
	if (!is_playing(audio)) {
 80010b0:	075b      	lsls	r3, r3, #29
 80010b2:	f53f af7a 	bmi.w	8000faa <audio_callback+0x46>
		HAL_GPIO_WritePin(audio->amp_enable_port, audio->amp_enable_pin, GPIO_PIN_SET);
 80010b6:	f8b4 1856 	ldrh.w	r1, [r4, #2134]	; 0x856
 80010ba:	6920      	ldr	r0, [r4, #16]
 80010bc:	2201      	movs	r2, #1
 80010be:	f002 fdb3 	bl	8003c28 <HAL_GPIO_WritePin>
		audio->dac_flag |= (1 << 2);
 80010c2:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
 80010ce:	e76c      	b.n	8000faa <audio_callback+0x46>
	return audio->dac_flag & (1 << 2);
 80010d0:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 80010d4:	e7ec      	b.n	80010b0 <audio_callback+0x14c>
	HAL_TIM_Base_Stop_IT(audio->htim);
 80010d6:	68e0      	ldr	r0, [r4, #12]
 80010d8:	f004 f86a 	bl	80051b0 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(audio->amp_enable_port, audio->amp_enable_pin, GPIO_PIN_RESET);
 80010dc:	f8b4 1856 	ldrh.w	r1, [r4, #2134]	; 0x856
 80010e0:	6920      	ldr	r0, [r4, #16]
 80010e2:	4632      	mov	r2, r6
 80010e4:	f002 fda0 	bl	8003c28 <HAL_GPIO_WritePin>
	shutdown_dac(audio->ext_dac);
 80010e8:	68a0      	ldr	r0, [r4, #8]
 80010ea:	f000 f8c5 	bl	8001278 <shutdown_dac>
	f_close(audio->fil);
 80010ee:	6860      	ldr	r0, [r4, #4]
 80010f0:	f006 fab6 	bl	8007660 <f_close>
	audio->dac_flag = 0;
 80010f4:	f884 6859 	strb.w	r6, [r4, #2137]	; 0x859
		return;
 80010f8:	e757      	b.n	8000faa <audio_callback+0x46>
 80010fa:	bf00      	nop

080010fc <Input_Resolve>:
	uint8_t buf[1];
	Input_Read(MemAddress, buf, 1);
	return buf[0];
}

void Input_Resolve() {
 80010fc:	b570      	push	{r4, r5, r6, lr}
 80010fe:	b086      	sub	sp, #24
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	aa05      	add	r2, sp, #20
 8001106:	2301      	movs	r3, #1
 8001108:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800110c:	9200      	str	r2, [sp, #0]
 800110e:	4854      	ldr	r0, [pc, #336]	; (8001260 <Input_Resolve+0x164>)
 8001110:	2200      	movs	r2, #0
 8001112:	21b4      	movs	r1, #180	; 0xb4
 8001114:	f002 ffb4 	bl	8004080 <HAL_I2C_Mem_Read>
	if (ret != HAL_OK) {
 8001118:	b110      	cbz	r0, 8001120 <Input_Resolve+0x24>
		input_connected = 0;
 800111a:	4b52      	ldr	r3, [pc, #328]	; (8001264 <Input_Resolve+0x168>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
	uint8_t read = Input_Read_Byte(MPR121_TOUCHSTATUS_L);
	for (int i = 0; i < 8; i++) {
		uint8_t button = read & (1 << i);
 8001120:	f99d 4014 	ldrsb.w	r4, [sp, #20]
		if (button && !status[i]) {
 8001124:	4d50      	ldr	r5, [pc, #320]	; (8001268 <Input_Resolve+0x16c>)
 8001126:	f014 0101 	ands.w	r1, r4, #1
		uint8_t button = read & (1 << i);
 800112a:	f004 0601 	and.w	r6, r4, #1
		if (button && !status[i]) {
 800112e:	d13c      	bne.n	80011aa <Input_Resolve+0xae>
			Input_Touched(i);
		} else if (!button && status[i]) {
 8001130:	782b      	ldrb	r3, [r5, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d172      	bne.n	800121c <Input_Resolve+0x120>
		if (button && !status[i]) {
 8001136:	07a0      	lsls	r0, r4, #30
			Input_Released(i);
		}
		status[i] = button;
 8001138:	702e      	strb	r6, [r5, #0]
		if (button && !status[i]) {
 800113a:	786b      	ldrb	r3, [r5, #1]
		uint8_t button = read & (1 << i);
 800113c:	f004 0602 	and.w	r6, r4, #2
		if (button && !status[i]) {
 8001140:	d53a      	bpl.n	80011b8 <Input_Resolve+0xbc>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d06e      	beq.n	8001224 <Input_Resolve+0x128>
 8001146:	0761      	lsls	r1, r4, #29
		status[i] = button;
 8001148:	706e      	strb	r6, [r5, #1]
		if (button && !status[i]) {
 800114a:	78ab      	ldrb	r3, [r5, #2]
		uint8_t button = read & (1 << i);
 800114c:	f004 0604 	and.w	r6, r4, #4
		if (button && !status[i]) {
 8001150:	d439      	bmi.n	80011c6 <Input_Resolve+0xca>
		} else if (!button && status[i]) {
 8001152:	2b00      	cmp	r3, #0
 8001154:	d16b      	bne.n	800122e <Input_Resolve+0x132>
		if (button && !status[i]) {
 8001156:	0722      	lsls	r2, r4, #28
		status[i] = button;
 8001158:	70ae      	strb	r6, [r5, #2]
		if (button && !status[i]) {
 800115a:	78eb      	ldrb	r3, [r5, #3]
		uint8_t button = read & (1 << i);
 800115c:	f004 0608 	and.w	r6, r4, #8
		if (button && !status[i]) {
 8001160:	d438      	bmi.n	80011d4 <Input_Resolve+0xd8>
		} else if (!button && status[i]) {
 8001162:	2b00      	cmp	r3, #0
 8001164:	d168      	bne.n	8001238 <Input_Resolve+0x13c>
		if (button && !status[i]) {
 8001166:	06e0      	lsls	r0, r4, #27
		status[i] = button;
 8001168:	70ee      	strb	r6, [r5, #3]
		if (button && !status[i]) {
 800116a:	792b      	ldrb	r3, [r5, #4]
		uint8_t button = read & (1 << i);
 800116c:	f004 0610 	and.w	r6, r4, #16
		if (button && !status[i]) {
 8001170:	d437      	bmi.n	80011e2 <Input_Resolve+0xe6>
		} else if (!button && status[i]) {
 8001172:	2b00      	cmp	r3, #0
 8001174:	d165      	bne.n	8001242 <Input_Resolve+0x146>
		if (button && !status[i]) {
 8001176:	06a1      	lsls	r1, r4, #26
		status[i] = button;
 8001178:	712e      	strb	r6, [r5, #4]
		if (button && !status[i]) {
 800117a:	796b      	ldrb	r3, [r5, #5]
		uint8_t button = read & (1 << i);
 800117c:	f004 0620 	and.w	r6, r4, #32
		if (button && !status[i]) {
 8001180:	d436      	bmi.n	80011f0 <Input_Resolve+0xf4>
		} else if (!button && status[i]) {
 8001182:	2b00      	cmp	r3, #0
 8001184:	d162      	bne.n	800124c <Input_Resolve+0x150>
		if (button && !status[i]) {
 8001186:	0662      	lsls	r2, r4, #25
		status[i] = button;
 8001188:	716e      	strb	r6, [r5, #5]
		if (button && !status[i]) {
 800118a:	79ab      	ldrb	r3, [r5, #6]
		uint8_t button = read & (1 << i);
 800118c:	f004 0640 	and.w	r6, r4, #64	; 0x40
		if (button && !status[i]) {
 8001190:	d435      	bmi.n	80011fe <Input_Resolve+0x102>
		} else if (!button && status[i]) {
 8001192:	2b00      	cmp	r3, #0
 8001194:	d15f      	bne.n	8001256 <Input_Resolve+0x15a>
		if (button && !status[i]) {
 8001196:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 800119a:	79eb      	ldrb	r3, [r5, #7]
		status[i] = button;
 800119c:	71ae      	strb	r6, [r5, #6]
		if (button && !status[i]) {
 800119e:	d035      	beq.n	800120c <Input_Resolve+0x110>
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d035      	beq.n	8001210 <Input_Resolve+0x114>
		status[i] = button;
 80011a4:	71ec      	strb	r4, [r5, #7]
	}
}
 80011a6:	b006      	add	sp, #24
 80011a8:	bd70      	pop	{r4, r5, r6, pc}
		if (button && !status[i]) {
 80011aa:	7829      	ldrb	r1, [r5, #0]
 80011ac:	2900      	cmp	r1, #0
 80011ae:	d1c2      	bne.n	8001136 <Input_Resolve+0x3a>
		printf("Button %i pressed\n", button);
 80011b0:	482e      	ldr	r0, [pc, #184]	; (800126c <Input_Resolve+0x170>)
 80011b2:	f007 f895 	bl	80082e0 <iprintf>
 80011b6:	e7be      	b.n	8001136 <Input_Resolve+0x3a>
		} else if (!button && status[i]) {
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0c4      	beq.n	8001146 <Input_Resolve+0x4a>
		printf("Button %i released\n", button);
 80011bc:	2101      	movs	r1, #1
 80011be:	482c      	ldr	r0, [pc, #176]	; (8001270 <Input_Resolve+0x174>)
 80011c0:	f007 f88e 	bl	80082e0 <iprintf>
 80011c4:	e7bf      	b.n	8001146 <Input_Resolve+0x4a>
		if (button && !status[i]) {
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1c5      	bne.n	8001156 <Input_Resolve+0x5a>
		printf("Button %i pressed\n", button);
 80011ca:	2102      	movs	r1, #2
 80011cc:	4827      	ldr	r0, [pc, #156]	; (800126c <Input_Resolve+0x170>)
 80011ce:	f007 f887 	bl	80082e0 <iprintf>
 80011d2:	e7c0      	b.n	8001156 <Input_Resolve+0x5a>
		if (button && !status[i]) {
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1c6      	bne.n	8001166 <Input_Resolve+0x6a>
		printf("Button %i pressed\n", button);
 80011d8:	2103      	movs	r1, #3
 80011da:	4824      	ldr	r0, [pc, #144]	; (800126c <Input_Resolve+0x170>)
 80011dc:	f007 f880 	bl	80082e0 <iprintf>
 80011e0:	e7c1      	b.n	8001166 <Input_Resolve+0x6a>
		if (button && !status[i]) {
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1c7      	bne.n	8001176 <Input_Resolve+0x7a>
		printf("Button %i pressed\n", button);
 80011e6:	2104      	movs	r1, #4
 80011e8:	4820      	ldr	r0, [pc, #128]	; (800126c <Input_Resolve+0x170>)
 80011ea:	f007 f879 	bl	80082e0 <iprintf>
 80011ee:	e7c2      	b.n	8001176 <Input_Resolve+0x7a>
		if (button && !status[i]) {
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1c8      	bne.n	8001186 <Input_Resolve+0x8a>
		printf("Button %i pressed\n", button);
 80011f4:	2105      	movs	r1, #5
 80011f6:	481d      	ldr	r0, [pc, #116]	; (800126c <Input_Resolve+0x170>)
 80011f8:	f007 f872 	bl	80082e0 <iprintf>
 80011fc:	e7c3      	b.n	8001186 <Input_Resolve+0x8a>
		if (button && !status[i]) {
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1c9      	bne.n	8001196 <Input_Resolve+0x9a>
		printf("Button %i pressed\n", button);
 8001202:	2106      	movs	r1, #6
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <Input_Resolve+0x170>)
 8001206:	f007 f86b 	bl	80082e0 <iprintf>
 800120a:	e7c4      	b.n	8001196 <Input_Resolve+0x9a>
		} else if (!button && status[i]) {
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0c9      	beq.n	80011a4 <Input_Resolve+0xa8>
		printf("Button not configured\n");
 8001210:	4818      	ldr	r0, [pc, #96]	; (8001274 <Input_Resolve+0x178>)
 8001212:	f007 f8eb 	bl	80083ec <puts>
		status[i] = button;
 8001216:	71ec      	strb	r4, [r5, #7]
}
 8001218:	b006      	add	sp, #24
 800121a:	bd70      	pop	{r4, r5, r6, pc}
		printf("Button %i released\n", button);
 800121c:	4814      	ldr	r0, [pc, #80]	; (8001270 <Input_Resolve+0x174>)
 800121e:	f007 f85f 	bl	80082e0 <iprintf>
 8001222:	e788      	b.n	8001136 <Input_Resolve+0x3a>
		printf("Button %i pressed\n", button);
 8001224:	2101      	movs	r1, #1
 8001226:	4811      	ldr	r0, [pc, #68]	; (800126c <Input_Resolve+0x170>)
 8001228:	f007 f85a 	bl	80082e0 <iprintf>
 800122c:	e78b      	b.n	8001146 <Input_Resolve+0x4a>
		printf("Button %i released\n", button);
 800122e:	2102      	movs	r1, #2
 8001230:	480f      	ldr	r0, [pc, #60]	; (8001270 <Input_Resolve+0x174>)
 8001232:	f007 f855 	bl	80082e0 <iprintf>
 8001236:	e78e      	b.n	8001156 <Input_Resolve+0x5a>
 8001238:	2103      	movs	r1, #3
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <Input_Resolve+0x174>)
 800123c:	f007 f850 	bl	80082e0 <iprintf>
 8001240:	e791      	b.n	8001166 <Input_Resolve+0x6a>
 8001242:	2104      	movs	r1, #4
 8001244:	480a      	ldr	r0, [pc, #40]	; (8001270 <Input_Resolve+0x174>)
 8001246:	f007 f84b 	bl	80082e0 <iprintf>
 800124a:	e794      	b.n	8001176 <Input_Resolve+0x7a>
 800124c:	2105      	movs	r1, #5
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <Input_Resolve+0x174>)
 8001250:	f007 f846 	bl	80082e0 <iprintf>
 8001254:	e797      	b.n	8001186 <Input_Resolve+0x8a>
 8001256:	2106      	movs	r1, #6
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <Input_Resolve+0x174>)
 800125a:	f007 f841 	bl	80082e0 <iprintf>
 800125e:	e79a      	b.n	8001196 <Input_Resolve+0x9a>
 8001260:	20002bb0 	.word	0x20002bb0
 8001264:	20000004 	.word	0x20000004
 8001268:	20000214 	.word	0x20000214
 800126c:	0800a3a0 	.word	0x0800a3a0
 8001270:	0800a3cc 	.word	0x0800a3cc
 8001274:	0800a3b4 	.word	0x0800a3b4

08001278 <shutdown_dac>:
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}

	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
}

void shutdown_dac(Ext_DAC_t* ext_dac) {
 8001278:	b510      	push	{r4, lr}
 800127a:	4604      	mov	r4, r0
 800127c:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 800127e:	8901      	ldrh	r1, [r0, #8]
 8001280:	6840      	ldr	r0, [r0, #4]
 8001282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001286:	2200      	movs	r2, #0
 8001288:	f8ad 3006 	strh.w	r3, [sp, #6]
 800128c:	f002 fccc 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ext_dac->hspi, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 8001290:	6820      	ldr	r0, [r4, #0]
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	2201      	movs	r2, #1
 8001298:	f10d 0106 	add.w	r1, sp, #6
 800129c:	f003 fc36 	bl	8004b0c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}
 80012a0:	6820      	ldr	r0, [r4, #0]
 80012a2:	f003 fecf 	bl	8005044 <HAL_SPI_GetState>
 80012a6:	2801      	cmp	r0, #1
 80012a8:	4602      	mov	r2, r0
 80012aa:	d1f9      	bne.n	80012a0 <shutdown_dac+0x28>
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
 80012ac:	8921      	ldrh	r1, [r4, #8]
 80012ae:	6860      	ldr	r0, [r4, #4]
 80012b0:	f002 fcba 	bl	8003c28 <HAL_GPIO_WritePin>
	transmit_cmd(ext_dac, SHUTDOWN_CMD);
}
 80012b4:	b002      	add	sp, #8
 80012b6:	bd10      	pop	{r4, pc}

080012b8 <write_to_dac>:

void write_to_dac(Ext_DAC_t* ext_dac, uint8_t val) {
 80012b8:	b510      	push	{r4, lr}
	return (0b111 << 12) | (uint16_t)(val) << 4;
 80012ba:	010b      	lsls	r3, r1, #4
void write_to_dac(Ext_DAC_t* ext_dac, uint8_t val) {
 80012bc:	b082      	sub	sp, #8
 80012be:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 80012c0:	8901      	ldrh	r1, [r0, #8]
 80012c2:	6840      	ldr	r0, [r0, #4]
	return (0b111 << 12) | (uint16_t)(val) << 4;
 80012c4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f8ad 3006 	strh.w	r3, [sp, #6]
 80012ce:	f002 fcab 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ext_dac->hspi, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 80012d2:	6820      	ldr	r0, [r4, #0]
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	2201      	movs	r2, #1
 80012da:	f10d 0106 	add.w	r1, sp, #6
 80012de:	f003 fc15 	bl	8004b0c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}
 80012e2:	6820      	ldr	r0, [r4, #0]
 80012e4:	f003 feae 	bl	8005044 <HAL_SPI_GetState>
 80012e8:	2801      	cmp	r0, #1
 80012ea:	4602      	mov	r2, r0
 80012ec:	d1f9      	bne.n	80012e2 <write_to_dac+0x2a>
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
 80012ee:	8921      	ldrh	r1, [r4, #8]
 80012f0:	6860      	ldr	r0, [r4, #4]
 80012f2:	f002 fc99 	bl	8003c28 <HAL_GPIO_WritePin>
	transmit_cmd(ext_dac, val_to_dac(val));
}
 80012f6:	b002      	add	sp, #8
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	bf00      	nop

080012fc <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void)
{
 80012fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001300:	4834      	ldr	r0, [pc, #208]	; (80013d4 <SD_PowerOn+0xd8>)
 8001302:	4d35      	ldr	r5, [pc, #212]	; (80013d8 <SD_PowerOn+0xdc>)
{
 8001304:	b086      	sub	sp, #24
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	2102      	movs	r1, #2
 800130a:	f002 fc8d 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800130e:	2001      	movs	r0, #1
 8001310:	f001 fef8 	bl	8003104 <HAL_Delay>
 8001314:	240a      	movs	r4, #10
 8001316:	26ff      	movs	r6, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001318:	682a      	ldr	r2, [r5, #0]
 800131a:	f88d 600d 	strb.w	r6, [sp, #13]
 800131e:	6893      	ldr	r3, [r2, #8]
 8001320:	079f      	lsls	r7, r3, #30
 8001322:	d5fc      	bpl.n	800131e <SD_PowerOn+0x22>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001324:	2364      	movs	r3, #100	; 0x64
 8001326:	2201      	movs	r2, #1
 8001328:	f10d 010d 	add.w	r1, sp, #13
 800132c:	4628      	mov	r0, r5
 800132e:	f003 fbed 	bl	8004b0c <HAL_SPI_Transmit>
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
	for(int i = 0; i < 10; i++)
 8001332:	3c01      	subs	r4, #1
 8001334:	d1f0      	bne.n	8001318 <SD_PowerOn+0x1c>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001336:	4622      	mov	r2, r4
 8001338:	2102      	movs	r1, #2
 800133a:	4826      	ldr	r0, [pc, #152]	; (80013d4 <SD_PowerOn+0xd8>)
 800133c:	f002 fc74 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f001 fedf 	bl	8003104 <HAL_Delay>

	/* slave select */
	SELECT();

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001346:	2140      	movs	r1, #64	; 0x40
	args[1] = 0;
	args[2] = 0;
	args[3] = 0;
	args[4] = 0;
 8001348:	f44f 4315 	mov.w	r3, #38144	; 0x9500
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800134c:	682a      	ldr	r2, [r5, #0]
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800134e:	9104      	str	r1, [sp, #16]
	args[4] = 0;
 8001350:	f8ad 3014 	strh.w	r3, [sp, #20]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001354:	6893      	ldr	r3, [r2, #8]
 8001356:	0798      	lsls	r0, r3, #30
 8001358:	d5fc      	bpl.n	8001354 <SD_PowerOn+0x58>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800135a:	481f      	ldr	r0, [pc, #124]	; (80013d8 <SD_PowerOn+0xdc>)
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800135c:	4f1e      	ldr	r7, [pc, #120]	; (80013d8 <SD_PowerOn+0xdc>)
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800135e:	2364      	movs	r3, #100	; 0x64
 8001360:	2206      	movs	r2, #6
 8001362:	a904      	add	r1, sp, #16
 8001364:	f003 fbd2 	bl	8004b0c <HAL_SPI_Transmit>
}
 8001368:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	dummy = 0xFF;
 800136c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001370:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001372:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001374:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001378:	6893      	ldr	r3, [r2, #8]
 800137a:	0799      	lsls	r1, r3, #30
 800137c:	d5fc      	bpl.n	8001378 <SD_PowerOn+0x7c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800137e:	2301      	movs	r3, #1
 8001380:	9600      	str	r6, [sp, #0]
 8001382:	f10d 020f 	add.w	r2, sp, #15
 8001386:	f10d 010e 	add.w	r1, sp, #14
 800138a:	4638      	mov	r0, r7
 800138c:	f003 fd10 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001390:	f89d 300f 	ldrb.w	r3, [sp, #15]
	args[5] = 0x95;		/* CRC */

	SPI_TxBuffer(args, sizeof(args));

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001394:	2b01      	cmp	r3, #1
 8001396:	d001      	beq.n	800139c <SD_PowerOn+0xa0>
 8001398:	3c01      	subs	r4, #1
 800139a:	d1ea      	bne.n	8001372 <SD_PowerOn+0x76>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <SD_PowerOn+0xd8>)
 80013a0:	2102      	movs	r1, #2
 80013a2:	f002 fc41 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f001 feac 	bl	8003104 <HAL_Delay>
static void SPI_TxByte(uint8_t data)
 80013ac:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80013ae:	682a      	ldr	r2, [r5, #0]
 80013b0:	f88d 300f 	strb.w	r3, [sp, #15]
 80013b4:	6893      	ldr	r3, [r2, #8]
 80013b6:	079b      	lsls	r3, r3, #30
 80013b8:	d5fc      	bpl.n	80013b4 <SD_PowerOn+0xb8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80013ba:	2364      	movs	r3, #100	; 0x64
 80013bc:	2201      	movs	r2, #1
 80013be:	f10d 010f 	add.w	r1, sp, #15
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <SD_PowerOn+0xdc>)
 80013c4:	f003 fba2 	bl	8004b0c <HAL_SPI_Transmit>
	}

	DESELECT();
	SPI_TxByte(0XFF);

	PowerFlag = 1;
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SD_PowerOn+0xe0>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
}
 80013ce:	b006      	add	sp, #24
 80013d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013d4:	40020800 	.word	0x40020800
 80013d8:	20002c5c 	.word	0x20002c5c
 80013dc:	2000021d 	.word	0x2000021d

080013e0 <SD_RxDataBlock>:
	return PowerFlag;
}

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80013e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80013e4:	4e33      	ldr	r6, [pc, #204]	; (80014b4 <SD_RxDataBlock+0xd4>)
 80013e6:	4c34      	ldr	r4, [pc, #208]	; (80014b8 <SD_RxDataBlock+0xd8>)
 80013e8:	23c8      	movs	r3, #200	; 0xc8
{
 80013ea:	b085      	sub	sp, #20
 80013ec:	4605      	mov	r5, r0
 80013ee:	4689      	mov	r9, r1
	Timer1 = 200;
 80013f0:	8033      	strh	r3, [r6, #0]
	dummy = 0xFF;
 80013f2:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80013f6:	2764      	movs	r7, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80013f8:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80013fa:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80013fe:	6893      	ldr	r3, [r2, #8]
 8001400:	079b      	lsls	r3, r3, #30
 8001402:	d5fc      	bpl.n	80013fe <SD_RxDataBlock+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001404:	2301      	movs	r3, #1
 8001406:	9700      	str	r7, [sp, #0]
 8001408:	f10d 020f 	add.w	r2, sp, #15
 800140c:	f10d 010e 	add.w	r1, sp, #14
 8001410:	4620      	mov	r0, r4
 8001412:	f003 fccd 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001416:	f89d 300f 	ldrb.w	r3, [sp, #15]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
	} while((token == 0xFF) && Timer1);
 800141a:	2bff      	cmp	r3, #255	; 0xff
 800141c:	d105      	bne.n	800142a <SD_RxDataBlock+0x4a>
 800141e:	8830      	ldrh	r0, [r6, #0]
 8001420:	2800      	cmp	r0, #0
 8001422:	d1e9      	bne.n	80013f8 <SD_RxDataBlock+0x18>
	/* discard CRC */
	SPI_RxByte();
	SPI_RxByte();

	return TRUE;
}
 8001424:	b005      	add	sp, #20
 8001426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 800142a:	2bfe      	cmp	r3, #254	; 0xfe
 800142c:	d140      	bne.n	80014b0 <SD_RxDataBlock+0xd0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800142e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80014b8 <SD_RxDataBlock+0xd8>
 8001432:	44a9      	add	r9, r5
	dummy = 0xFF;
 8001434:	27ff      	movs	r7, #255	; 0xff
 8001436:	3d01      	subs	r5, #1
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001438:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800143a:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800143c:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001440:	6893      	ldr	r3, [r2, #8]
 8001442:	0798      	lsls	r0, r3, #30
 8001444:	d5fc      	bpl.n	8001440 <SD_RxDataBlock+0x60>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001446:	2301      	movs	r3, #1
 8001448:	9600      	str	r6, [sp, #0]
 800144a:	f10d 020f 	add.w	r2, sp, #15
 800144e:	f10d 010e 	add.w	r1, sp, #14
 8001452:	4640      	mov	r0, r8
 8001454:	f003 fcac 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001458:	f89d 300f 	ldrb.w	r3, [sp, #15]
	*buff = SPI_RxByte();
 800145c:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while(len--);
 8001460:	45a9      	cmp	r9, r5
 8001462:	d1ea      	bne.n	800143a <SD_RxDataBlock+0x5a>
	dummy = 0xFF;
 8001464:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001466:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8001468:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800146c:	6893      	ldr	r3, [r2, #8]
 800146e:	0799      	lsls	r1, r3, #30
 8001470:	d5fc      	bpl.n	800146c <SD_RxDataBlock+0x8c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	f10d 020f 	add.w	r2, sp, #15
 800147a:	2301      	movs	r3, #1
 800147c:	480e      	ldr	r0, [pc, #56]	; (80014b8 <SD_RxDataBlock+0xd8>)
 800147e:	f10d 010e 	add.w	r1, sp, #14
 8001482:	f003 fc95 	bl	8004db0 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8001486:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001488:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800148a:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800148e:	6893      	ldr	r3, [r2, #8]
 8001490:	079b      	lsls	r3, r3, #30
 8001492:	d5fc      	bpl.n	800148e <SD_RxDataBlock+0xae>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001494:	2364      	movs	r3, #100	; 0x64
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	f10d 020f 	add.w	r2, sp, #15
 800149c:	2301      	movs	r3, #1
 800149e:	f10d 010e 	add.w	r1, sp, #14
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <SD_RxDataBlock+0xd8>)
 80014a4:	f003 fc84 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return TRUE;
 80014a8:	2001      	movs	r0, #1
}
 80014aa:	b005      	add	sp, #20
 80014ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 80014b0:	2000      	movs	r0, #0
 80014b2:	e7b7      	b.n	8001424 <SD_RxDataBlock+0x44>
 80014b4:	2000021e 	.word	0x2000021e
 80014b8:	20002c5c 	.word	0x20002c5c

080014bc <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80014bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Timer2 = 500;
 80014c0:	4d5b      	ldr	r5, [pc, #364]	; (8001630 <SD_SendCmd+0x174>)
 80014c2:	4c5c      	ldr	r4, [pc, #368]	; (8001634 <SD_SendCmd+0x178>)
 80014c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 80014c8:	b085      	sub	sp, #20
 80014ca:	4681      	mov	r9, r0
 80014cc:	4688      	mov	r8, r1
	Timer2 = 500;
 80014ce:	802b      	strh	r3, [r5, #0]
	dummy = 0xFF;
 80014d0:	27ff      	movs	r7, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80014d2:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80014d4:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80014d6:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80014da:	6893      	ldr	r3, [r2, #8]
 80014dc:	0798      	lsls	r0, r3, #30
 80014de:	d5fc      	bpl.n	80014da <SD_SendCmd+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80014e0:	2301      	movs	r3, #1
 80014e2:	9600      	str	r6, [sp, #0]
 80014e4:	f10d 020f 	add.w	r2, sp, #15
 80014e8:	f10d 010e 	add.w	r1, sp, #14
 80014ec:	4620      	mov	r0, r4
 80014ee:	f003 fc5f 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 80014f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while ((res != 0xFF) && Timer2);
 80014f6:	2bff      	cmp	r3, #255	; 0xff
 80014f8:	d006      	beq.n	8001508 <SD_SendCmd+0x4c>
 80014fa:	882b      	ldrh	r3, [r5, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1e9      	bne.n	80014d4 <SD_SendCmd+0x18>
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001500:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 8001502:	b005      	add	sp, #20
 8001504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001508:	6822      	ldr	r2, [r4, #0]
 800150a:	f88d 900f 	strb.w	r9, [sp, #15]
 800150e:	6893      	ldr	r3, [r2, #8]
 8001510:	0799      	lsls	r1, r3, #30
 8001512:	d5fc      	bpl.n	800150e <SD_SendCmd+0x52>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001514:	2364      	movs	r3, #100	; 0x64
 8001516:	2201      	movs	r2, #1
 8001518:	4846      	ldr	r0, [pc, #280]	; (8001634 <SD_SendCmd+0x178>)
 800151a:	f10d 010f 	add.w	r1, sp, #15
 800151e:	f003 faf5 	bl	8004b0c <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001522:	ea4f 6318 	mov.w	r3, r8, lsr #24
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001526:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001528:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800152c:	6893      	ldr	r3, [r2, #8]
 800152e:	079b      	lsls	r3, r3, #30
 8001530:	d5fc      	bpl.n	800152c <SD_SendCmd+0x70>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001532:	2364      	movs	r3, #100	; 0x64
 8001534:	2201      	movs	r2, #1
 8001536:	483f      	ldr	r0, [pc, #252]	; (8001634 <SD_SendCmd+0x178>)
 8001538:	f10d 010f 	add.w	r1, sp, #15
 800153c:	f003 fae6 	bl	8004b0c <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001540:	ea4f 4318 	mov.w	r3, r8, lsr #16
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001544:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001546:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800154a:	6893      	ldr	r3, [r2, #8]
 800154c:	079f      	lsls	r7, r3, #30
 800154e:	d5fc      	bpl.n	800154a <SD_SendCmd+0x8e>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001550:	2364      	movs	r3, #100	; 0x64
 8001552:	2201      	movs	r2, #1
 8001554:	4837      	ldr	r0, [pc, #220]	; (8001634 <SD_SendCmd+0x178>)
 8001556:	f10d 010f 	add.w	r1, sp, #15
 800155a:	f003 fad7 	bl	8004b0c <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800155e:	ea4f 2318 	mov.w	r3, r8, lsr #8
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001562:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001564:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001568:	6893      	ldr	r3, [r2, #8]
 800156a:	079e      	lsls	r6, r3, #30
 800156c:	d5fc      	bpl.n	8001568 <SD_SendCmd+0xac>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800156e:	2201      	movs	r2, #1
 8001570:	4830      	ldr	r0, [pc, #192]	; (8001634 <SD_SendCmd+0x178>)
 8001572:	2364      	movs	r3, #100	; 0x64
 8001574:	f10d 010f 	add.w	r1, sp, #15
 8001578:	f003 fac8 	bl	8004b0c <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800157c:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800157e:	f88d 800f 	strb.w	r8, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001582:	6893      	ldr	r3, [r2, #8]
 8001584:	079d      	lsls	r5, r3, #30
 8001586:	d5fc      	bpl.n	8001582 <SD_SendCmd+0xc6>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001588:	482a      	ldr	r0, [pc, #168]	; (8001634 <SD_SendCmd+0x178>)
 800158a:	2364      	movs	r3, #100	; 0x64
 800158c:	2201      	movs	r2, #1
 800158e:	f10d 010f 	add.w	r1, sp, #15
 8001592:	f003 fabb 	bl	8004b0c <HAL_SPI_Transmit>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001596:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800159a:	d035      	beq.n	8001608 <SD_SendCmd+0x14c>
	else crc = 1;
 800159c:	f1b9 0f48 	cmp.w	r9, #72	; 0x48
 80015a0:	bf0c      	ite	eq
 80015a2:	2387      	moveq	r3, #135	; 0x87
 80015a4:	2301      	movne	r3, #1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80015a6:	6822      	ldr	r2, [r4, #0]
 80015a8:	f88d 300f 	strb.w	r3, [sp, #15]
 80015ac:	6893      	ldr	r3, [r2, #8]
 80015ae:	0798      	lsls	r0, r3, #30
 80015b0:	d5fc      	bpl.n	80015ac <SD_SendCmd+0xf0>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80015b2:	4820      	ldr	r0, [pc, #128]	; (8001634 <SD_SendCmd+0x178>)
 80015b4:	2364      	movs	r3, #100	; 0x64
 80015b6:	2201      	movs	r2, #1
 80015b8:	f10d 010f 	add.w	r1, sp, #15
 80015bc:	f003 faa6 	bl	8004b0c <HAL_SPI_Transmit>
	if (cmd == CMD12) SPI_RxByte();
 80015c0:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
 80015c4:	d022      	beq.n	800160c <SD_SendCmd+0x150>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80015c6:	4f1b      	ldr	r7, [pc, #108]	; (8001634 <SD_SendCmd+0x178>)
	else crc = 1;
 80015c8:	250a      	movs	r5, #10
	dummy = 0xFF;
 80015ca:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80015ce:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80015d0:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80015d2:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80015d6:	6893      	ldr	r3, [r2, #8]
 80015d8:	079b      	lsls	r3, r3, #30
 80015da:	d5fc      	bpl.n	80015d6 <SD_SendCmd+0x11a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80015dc:	2301      	movs	r3, #1
 80015de:	9600      	str	r6, [sp, #0]
 80015e0:	f10d 020f 	add.w	r2, sp, #15
 80015e4:	f10d 010e 	add.w	r1, sp, #14
 80015e8:	4638      	mov	r0, r7
 80015ea:	f003 fbe1 	bl	8004db0 <HAL_SPI_TransmitReceive>
	} while ((res & 0x80) && --n);
 80015ee:	f99d 300f 	ldrsb.w	r3, [sp, #15]
	return data;
 80015f2:	f89d 000f 	ldrb.w	r0, [sp, #15]
	} while ((res & 0x80) && --n);
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	da83      	bge.n	8001502 <SD_SendCmd+0x46>
 80015fa:	1e6b      	subs	r3, r5, #1
 80015fc:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8001600:	d1e6      	bne.n	80015d0 <SD_SendCmd+0x114>
}
 8001602:	b005      	add	sp, #20
 8001604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001608:	2395      	movs	r3, #149	; 0x95
 800160a:	e7cc      	b.n	80015a6 <SD_SendCmd+0xea>
	dummy = 0xFF;
 800160c:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800160e:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8001610:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001614:	6893      	ldr	r3, [r2, #8]
 8001616:	0799      	lsls	r1, r3, #30
 8001618:	d5fc      	bpl.n	8001614 <SD_SendCmd+0x158>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	f10d 020f 	add.w	r2, sp, #15
 8001622:	2301      	movs	r3, #1
 8001624:	f10d 010e 	add.w	r1, sp, #14
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <SD_SendCmd+0x178>)
 800162a:	f003 fbc1 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 800162e:	e7ca      	b.n	80015c6 <SD_SendCmd+0x10a>
 8001630:	20000220 	.word	0x20000220
 8001634:	20002c5c 	.word	0x20002c5c

08001638 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001638:	2800      	cmp	r0, #0
 800163a:	d145      	bne.n	80016c8 <SD_disk_initialize+0x90>
{
 800163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001640:	4d7f      	ldr	r5, [pc, #508]	; (8001840 <SD_disk_initialize+0x208>)
 8001642:	782c      	ldrb	r4, [r5, #0]
 8001644:	f014 0402 	ands.w	r4, r4, #2
{
 8001648:	b087      	sub	sp, #28
	if(Stat & STA_NODISK) return Stat;
 800164a:	d004      	beq.n	8001656 <SD_disk_initialize+0x1e>
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 800164c:	7828      	ldrb	r0, [r5, #0]
 800164e:	b2c0      	uxtb	r0, r0
}
 8001650:	b007      	add	sp, #28
 8001652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SD_PowerOn();
 8001656:	f7ff fe51 	bl	80012fc <SD_PowerOn>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800165a:	4622      	mov	r2, r4
 800165c:	2102      	movs	r1, #2
 800165e:	4879      	ldr	r0, [pc, #484]	; (8001844 <SD_disk_initialize+0x20c>)
 8001660:	f002 fae2 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001664:	2001      	movs	r0, #1
 8001666:	f001 fd4d 	bl	8003104 <HAL_Delay>
	if (SD_SendCmd(CMD0, 0) == 1)
 800166a:	4621      	mov	r1, r4
 800166c:	2040      	movs	r0, #64	; 0x40
 800166e:	f7ff ff25 	bl	80014bc <SD_SendCmd>
 8001672:	2801      	cmp	r0, #1
 8001674:	4607      	mov	r7, r0
 8001676:	d030      	beq.n	80016da <SD_disk_initialize+0xa2>
 8001678:	4e73      	ldr	r6, [pc, #460]	; (8001848 <SD_disk_initialize+0x210>)
 800167a:	f10d 0813 	add.w	r8, sp, #19
 800167e:	f10d 0712 	add.w	r7, sp, #18
	CardType = type;
 8001682:	4b72      	ldr	r3, [pc, #456]	; (800184c <SD_disk_initialize+0x214>)
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001684:	486f      	ldr	r0, [pc, #444]	; (8001844 <SD_disk_initialize+0x20c>)
	CardType = type;
 8001686:	701c      	strb	r4, [r3, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	2102      	movs	r1, #2
 800168c:	f002 facc 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001690:	2001      	movs	r0, #1
 8001692:	f001 fd37 	bl	8003104 <HAL_Delay>
	dummy = 0xFF;
 8001696:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001698:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 800169a:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800169e:	6893      	ldr	r3, [r2, #8]
 80016a0:	079b      	lsls	r3, r3, #30
 80016a2:	d5fc      	bpl.n	800169e <SD_disk_initialize+0x66>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80016a4:	2364      	movs	r3, #100	; 0x64
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4867      	ldr	r0, [pc, #412]	; (8001848 <SD_disk_initialize+0x210>)
 80016aa:	2301      	movs	r3, #1
 80016ac:	4642      	mov	r2, r8
 80016ae:	4639      	mov	r1, r7
 80016b0:	f003 fb7e 	bl	8004db0 <HAL_SPI_TransmitReceive>
	if (type)
 80016b4:	b154      	cbz	r4, 80016cc <SD_disk_initialize+0x94>
		Stat &= ~STA_NOINIT;
 80016b6:	782b      	ldrb	r3, [r5, #0]
 80016b8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80016bc:	702b      	strb	r3, [r5, #0]
	return Stat;
 80016be:	7828      	ldrb	r0, [r5, #0]
 80016c0:	b2c0      	uxtb	r0, r0
}
 80016c2:	b007      	add	sp, #28
 80016c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(drv) return STA_NOINIT;
 80016c8:	2001      	movs	r0, #1
}
 80016ca:	4770      	bx	lr
	return Stat;
 80016cc:	7828      	ldrb	r0, [r5, #0]
	PowerFlag = 0;
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <SD_disk_initialize+0x218>)
	return Stat;
 80016d0:	b2c0      	uxtb	r0, r0
	PowerFlag = 0;
 80016d2:	701c      	strb	r4, [r3, #0]
}
 80016d4:	b007      	add	sp, #28
 80016d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Timer1 = 1000;
 80016da:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8001854 <SD_disk_initialize+0x21c>
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80016e2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80016e6:	2048      	movs	r0, #72	; 0x48
		Timer1 = 1000;
 80016e8:	f8a9 3000 	strh.w	r3, [r9]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80016ec:	f7ff fee6 	bl	80014bc <SD_SendCmd>
 80016f0:	2801      	cmp	r0, #1
 80016f2:	d167      	bne.n	80017c4 <SD_disk_initialize+0x18c>
 80016f4:	4e54      	ldr	r6, [pc, #336]	; (8001848 <SD_disk_initialize+0x210>)
 80016f6:	ab05      	add	r3, sp, #20
 80016f8:	9303      	str	r3, [sp, #12]
 80016fa:	469a      	mov	sl, r3
 80016fc:	f10d 0813 	add.w	r8, sp, #19
 8001700:	f10d 0712 	add.w	r7, sp, #18
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001704:	46b3      	mov	fp, r6
	dummy = 0xFF;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800170a:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 800170c:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001710:	6893      	ldr	r3, [r2, #8]
 8001712:	0799      	lsls	r1, r3, #30
 8001714:	d5fc      	bpl.n	8001710 <SD_disk_initialize+0xd8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001716:	2364      	movs	r3, #100	; 0x64
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	4642      	mov	r2, r8
 800171c:	2301      	movs	r3, #1
 800171e:	4639      	mov	r1, r7
 8001720:	4658      	mov	r0, fp
 8001722:	f003 fb45 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001726:	f89d 3013 	ldrb.w	r3, [sp, #19]
				ocr[n] = SPI_RxByte();
 800172a:	f80a 3b01 	strb.w	r3, [sl], #1
			for (n = 0; n < 4; n++)
 800172e:	ab06      	add	r3, sp, #24
 8001730:	459a      	cmp	sl, r3
 8001732:	d1e8      	bne.n	8001706 <SD_disk_initialize+0xce>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001734:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d1a2      	bne.n	8001682 <SD_disk_initialize+0x4a>
 800173c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001740:	2baa      	cmp	r3, #170	; 0xaa
 8001742:	d19e      	bne.n	8001682 <SD_disk_initialize+0x4a>
 8001744:	e003      	b.n	800174e <SD_disk_initialize+0x116>
				} while (Timer1);
 8001746:	f8b9 3000 	ldrh.w	r3, [r9]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d099      	beq.n	8001682 <SD_disk_initialize+0x4a>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800174e:	2100      	movs	r1, #0
 8001750:	2077      	movs	r0, #119	; 0x77
 8001752:	f7ff feb3 	bl	80014bc <SD_SendCmd>
 8001756:	2801      	cmp	r0, #1
 8001758:	d8f5      	bhi.n	8001746 <SD_disk_initialize+0x10e>
 800175a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800175e:	2069      	movs	r0, #105	; 0x69
 8001760:	f7ff feac 	bl	80014bc <SD_SendCmd>
 8001764:	2800      	cmp	r0, #0
 8001766:	d1ee      	bne.n	8001746 <SD_disk_initialize+0x10e>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001768:	f8b9 3000 	ldrh.w	r3, [r9]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d088      	beq.n	8001682 <SD_disk_initialize+0x4a>
 8001770:	4601      	mov	r1, r0
 8001772:	207a      	movs	r0, #122	; 0x7a
 8001774:	f7ff fea2 	bl	80014bc <SD_SendCmd>
 8001778:	2800      	cmp	r0, #0
 800177a:	d182      	bne.n	8001682 <SD_disk_initialize+0x4a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800177c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8001848 <SD_disk_initialize+0x210>
 8001780:	f8dd b00c 	ldr.w	fp, [sp, #12]
	dummy = 0xFF;
 8001784:	24ff      	movs	r4, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001786:	f04f 0a64 	mov.w	sl, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800178a:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 800178c:	f88d 4012 	strb.w	r4, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001790:	6883      	ldr	r3, [r0, #8]
 8001792:	079a      	lsls	r2, r3, #30
 8001794:	d5fc      	bpl.n	8001790 <SD_disk_initialize+0x158>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001796:	2301      	movs	r3, #1
 8001798:	f8cd a000 	str.w	sl, [sp]
 800179c:	4642      	mov	r2, r8
 800179e:	4639      	mov	r1, r7
 80017a0:	4648      	mov	r0, r9
 80017a2:	f003 fb05 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 80017a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
						ocr[n] = SPI_RxByte();
 80017aa:	f80b 3b01 	strb.w	r3, [fp], #1
					for (n = 0; n < 4; n++)
 80017ae:	ab06      	add	r3, sp, #24
 80017b0:	459b      	cmp	fp, r3
 80017b2:	d1ea      	bne.n	800178a <SD_disk_initialize+0x152>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80017b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80017b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017bc:	bf14      	ite	ne
 80017be:	240c      	movne	r4, #12
 80017c0:	2404      	moveq	r4, #4
 80017c2:	e75e      	b.n	8001682 <SD_disk_initialize+0x4a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80017c4:	4621      	mov	r1, r4
 80017c6:	2077      	movs	r0, #119	; 0x77
 80017c8:	f7ff fe78 	bl	80014bc <SD_SendCmd>
 80017cc:	2801      	cmp	r0, #1
 80017ce:	d805      	bhi.n	80017dc <SD_disk_initialize+0x1a4>
 80017d0:	e01c      	b.n	800180c <SD_disk_initialize+0x1d4>
			} while (Timer1);
 80017d2:	f8b9 3000 	ldrh.w	r3, [r9]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f43f af4e 	beq.w	8001678 <SD_disk_initialize+0x40>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80017dc:	2100      	movs	r1, #0
 80017de:	2041      	movs	r0, #65	; 0x41
 80017e0:	f7ff fe6c 	bl	80014bc <SD_SendCmd>
 80017e4:	2800      	cmp	r0, #0
 80017e6:	d1f4      	bne.n	80017d2 <SD_disk_initialize+0x19a>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80017e8:	f8b9 3000 	ldrh.w	r3, [r9]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f43f af43 	beq.w	8001678 <SD_disk_initialize+0x40>
 80017f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f6:	2050      	movs	r0, #80	; 0x50
 80017f8:	f7ff fe60 	bl	80014bc <SD_SendCmd>
 80017fc:	4e12      	ldr	r6, [pc, #72]	; (8001848 <SD_disk_initialize+0x210>)
 80017fe:	b900      	cbnz	r0, 8001802 <SD_disk_initialize+0x1ca>
 8001800:	463c      	mov	r4, r7
 8001802:	f10d 0813 	add.w	r8, sp, #19
 8001806:	f10d 0712 	add.w	r7, sp, #18
 800180a:	e73a      	b.n	8001682 <SD_disk_initialize+0x4a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800180c:	4621      	mov	r1, r4
 800180e:	2069      	movs	r0, #105	; 0x69
 8001810:	f7ff fe54 	bl	80014bc <SD_SendCmd>
 8001814:	2801      	cmp	r0, #1
 8001816:	d8e1      	bhi.n	80017dc <SD_disk_initialize+0x1a4>
 8001818:	e004      	b.n	8001824 <SD_disk_initialize+0x1ec>
			} while (Timer1);
 800181a:	f8b9 3000 	ldrh.w	r3, [r9]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f43f af2a 	beq.w	8001678 <SD_disk_initialize+0x40>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001824:	2100      	movs	r1, #0
 8001826:	2077      	movs	r0, #119	; 0x77
 8001828:	f7ff fe48 	bl	80014bc <SD_SendCmd>
 800182c:	2801      	cmp	r0, #1
 800182e:	d8f4      	bhi.n	800181a <SD_disk_initialize+0x1e2>
 8001830:	2100      	movs	r1, #0
 8001832:	2069      	movs	r0, #105	; 0x69
 8001834:	f7ff fe42 	bl	80014bc <SD_SendCmd>
 8001838:	2800      	cmp	r0, #0
 800183a:	d1ee      	bne.n	800181a <SD_disk_initialize+0x1e2>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800183c:	2702      	movs	r7, #2
 800183e:	e7d3      	b.n	80017e8 <SD_disk_initialize+0x1b0>
 8001840:	20000000 	.word	0x20000000
 8001844:	40020800 	.word	0x40020800
 8001848:	20002c5c 	.word	0x20002c5c
 800184c:	2000021c 	.word	0x2000021c
 8001850:	2000021d 	.word	0x2000021d
 8001854:	2000021e 	.word	0x2000021e

08001858 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
	if (drv) return STA_NOINIT;
 8001858:	b918      	cbnz	r0, 8001862 <SD_disk_status+0xa>
	return Stat;
 800185a:	4b03      	ldr	r3, [pc, #12]	; (8001868 <SD_disk_status+0x10>)
 800185c:	7818      	ldrb	r0, [r3, #0]
 800185e:	b2c0      	uxtb	r0, r0
 8001860:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8001862:	2001      	movs	r0, #1
}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000000 	.word	0x20000000

0800186c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001870:	b089      	sub	sp, #36	; 0x24
 8001872:	9303      	str	r3, [sp, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001874:	2800      	cmp	r0, #0
 8001876:	d14e      	bne.n	8001916 <SD_disk_read+0xaa>
 8001878:	2b00      	cmp	r3, #0
 800187a:	d04c      	beq.n	8001916 <SD_disk_read+0xaa>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800187c:	4b9b      	ldr	r3, [pc, #620]	; (8001aec <SD_disk_read+0x280>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	07dc      	lsls	r4, r3, #31
 8001882:	d46f      	bmi.n	8001964 <SD_disk_read+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001884:	4b9a      	ldr	r3, [pc, #616]	; (8001af0 <SD_disk_read+0x284>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	0758      	lsls	r0, r3, #29
 800188a:	4614      	mov	r4, r2
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800188c:	4899      	ldr	r0, [pc, #612]	; (8001af4 <SD_disk_read+0x288>)
	if (!(CardType & CT_SD2)) sector *= 512;
 800188e:	bf58      	it	pl
 8001890:	0254      	lslpl	r4, r2, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001892:	468a      	mov	sl, r1
 8001894:	2200      	movs	r2, #0
 8001896:	2102      	movs	r1, #2
 8001898:	f002 f9c6 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800189c:	2001      	movs	r0, #1
 800189e:	f001 fc31 	bl	8003104 <HAL_Delay>

	SELECT();

	if (count == 1)
 80018a2:	9b03      	ldr	r3, [sp, #12]
 80018a4:	2b01      	cmp	r3, #1
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80018a6:	4621      	mov	r1, r4
	if (count == 1)
 80018a8:	f000 80a9 	beq.w	80019fe <SD_disk_read+0x192>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80018ac:	2052      	movs	r0, #82	; 0x52
 80018ae:	f7ff fe05 	bl	80014bc <SD_SendCmd>
 80018b2:	4e91      	ldr	r6, [pc, #580]	; (8001af8 <SD_disk_read+0x28c>)
 80018b4:	9004      	str	r0, [sp, #16]
 80018b6:	bba0      	cbnz	r0, 8001922 <SD_disk_read+0xb6>
 80018b8:	f10d 051f 	add.w	r5, sp, #31
 80018bc:	f10d 041e 	add.w	r4, sp, #30
 80018c0:	f8df b238 	ldr.w	fp, [pc, #568]	; 8001afc <SD_disk_read+0x290>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80018c4:	462a      	mov	r2, r5
	dummy = 0xFF;
 80018c6:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80018ca:	4637      	mov	r7, r6
 80018cc:	4625      	mov	r5, r4
	Timer1 = 200;
 80018ce:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 80018d2:	f8ab 3000 	strh.w	r3, [fp]
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80018d6:	2464      	movs	r4, #100	; 0x64
 80018d8:	4691      	mov	r9, r2
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80018da:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 80018dc:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80018e0:	6893      	ldr	r3, [r2, #8]
 80018e2:	0799      	lsls	r1, r3, #30
 80018e4:	d5fc      	bpl.n	80018e0 <SD_disk_read+0x74>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80018e6:	2301      	movs	r3, #1
 80018e8:	9400      	str	r4, [sp, #0]
 80018ea:	464a      	mov	r2, r9
 80018ec:	4629      	mov	r1, r5
 80018ee:	4638      	mov	r0, r7
 80018f0:	f003 fa5e 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 80018f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
	} while((token == 0xFF) && Timer1);
 80018f8:	2bff      	cmp	r3, #255	; 0xff
 80018fa:	d139      	bne.n	8001970 <SD_disk_read+0x104>
 80018fc:	f8bb 3000 	ldrh.w	r3, [fp]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ea      	bne.n	80018da <SD_disk_read+0x6e>
 8001904:	2301      	movs	r3, #1
 8001906:	462c      	mov	r4, r5
 8001908:	9304      	str	r3, [sp, #16]
 800190a:	464d      	mov	r5, r9
				if (!SD_RxDataBlock(buff, 512)) break;
				buff += 512;
			} while (--count);

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800190c:	2100      	movs	r1, #0
 800190e:	204c      	movs	r0, #76	; 0x4c
 8001910:	f7ff fdd4 	bl	80014bc <SD_SendCmd>
 8001914:	e00b      	b.n	800192e <SD_disk_read+0xc2>
	if (pdrv || !count) return RES_PARERR;
 8001916:	2304      	movs	r3, #4
 8001918:	9304      	str	r3, [sp, #16]
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 800191a:	9804      	ldr	r0, [sp, #16]
 800191c:	b009      	add	sp, #36	; 0x24
 800191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001922:	2301      	movs	r3, #1
 8001924:	9304      	str	r3, [sp, #16]
 8001926:	f10d 051f 	add.w	r5, sp, #31
 800192a:	f10d 041e 	add.w	r4, sp, #30
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	4870      	ldr	r0, [pc, #448]	; (8001af4 <SD_disk_read+0x288>)
 8001932:	2102      	movs	r1, #2
 8001934:	f002 f978 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001938:	2001      	movs	r0, #1
 800193a:	f001 fbe3 	bl	8003104 <HAL_Delay>
	dummy = 0xFF;
 800193e:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001940:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001942:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001946:	6893      	ldr	r3, [r2, #8]
 8001948:	079b      	lsls	r3, r3, #30
 800194a:	d5fc      	bpl.n	8001946 <SD_disk_read+0xda>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800194c:	2364      	movs	r3, #100	; 0x64
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	462a      	mov	r2, r5
 8001952:	2301      	movs	r3, #1
 8001954:	4621      	mov	r1, r4
 8001956:	4868      	ldr	r0, [pc, #416]	; (8001af8 <SD_disk_read+0x28c>)
 8001958:	f003 fa2a 	bl	8004db0 <HAL_SPI_TransmitReceive>
}
 800195c:	9804      	ldr	r0, [sp, #16]
 800195e:	b009      	add	sp, #36	; 0x24
 8001960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001964:	2303      	movs	r3, #3
 8001966:	9304      	str	r3, [sp, #16]
}
 8001968:	9804      	ldr	r0, [sp, #16]
 800196a:	b009      	add	sp, #36	; 0x24
 800196c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(token != 0xFE) return FALSE;
 8001970:	2bfe      	cmp	r3, #254	; 0xfe
 8001972:	464a      	mov	r2, r9
 8001974:	d176      	bne.n	8001a64 <SD_disk_read+0x1f8>
 8001976:	f10a 39ff 	add.w	r9, sl, #4294967295
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800197a:	f8cd b014 	str.w	fp, [sp, #20]
 800197e:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 8001982:	2464      	movs	r4, #100	; 0x64
 8001984:	4693      	mov	fp, r2
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001986:	6831      	ldr	r1, [r6, #0]
	dummy = 0xFF;
 8001988:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800198c:	688b      	ldr	r3, [r1, #8]
 800198e:	079b      	lsls	r3, r3, #30
 8001990:	d5fc      	bpl.n	800198c <SD_disk_read+0x120>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001992:	2301      	movs	r3, #1
 8001994:	9400      	str	r4, [sp, #0]
 8001996:	465a      	mov	r2, fp
 8001998:	4629      	mov	r1, r5
 800199a:	4638      	mov	r0, r7
 800199c:	f003 fa08 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 80019a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
	*buff = SPI_RxByte();
 80019a4:	f809 3f01 	strb.w	r3, [r9, #1]!
	} while(len--);
 80019a8:	45d1      	cmp	r9, sl
 80019aa:	d1ec      	bne.n	8001986 <SD_disk_read+0x11a>
	dummy = 0xFF;
 80019ac:	465a      	mov	r2, fp
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019ae:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 80019b0:	f8dd b014 	ldr.w	fp, [sp, #20]
 80019b4:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019b8:	6883      	ldr	r3, [r0, #8]
 80019ba:	079c      	lsls	r4, r3, #30
 80019bc:	d5fc      	bpl.n	80019b8 <SD_disk_read+0x14c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80019be:	2364      	movs	r3, #100	; 0x64
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	4629      	mov	r1, r5
 80019c4:	2301      	movs	r3, #1
 80019c6:	4638      	mov	r0, r7
 80019c8:	9205      	str	r2, [sp, #20]
 80019ca:	f003 f9f1 	bl	8004db0 <HAL_SPI_TransmitReceive>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019ce:	6830      	ldr	r0, [r6, #0]
 80019d0:	9a05      	ldr	r2, [sp, #20]
	dummy = 0xFF;
 80019d2:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019d6:	6883      	ldr	r3, [r0, #8]
 80019d8:	0799      	lsls	r1, r3, #30
 80019da:	d5fc      	bpl.n	80019d6 <SD_disk_read+0x16a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80019dc:	2364      	movs	r3, #100	; 0x64
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4629      	mov	r1, r5
 80019e2:	2301      	movs	r3, #1
 80019e4:	4638      	mov	r0, r7
 80019e6:	9205      	str	r2, [sp, #20]
 80019e8:	f003 f9e2 	bl	8004db0 <HAL_SPI_TransmitReceive>
			} while (--count);
 80019ec:	9b03      	ldr	r3, [sp, #12]
 80019ee:	9a05      	ldr	r2, [sp, #20]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	9303      	str	r3, [sp, #12]
 80019f4:	f47f af6b 	bne.w	80018ce <SD_disk_read+0x62>
 80019f8:	462c      	mov	r4, r5
 80019fa:	4615      	mov	r5, r2
 80019fc:	e786      	b.n	800190c <SD_disk_read+0xa0>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80019fe:	2051      	movs	r0, #81	; 0x51
 8001a00:	f7ff fd5c 	bl	80014bc <SD_SendCmd>
 8001a04:	9004      	str	r0, [sp, #16]
 8001a06:	b138      	cbz	r0, 8001a18 <SD_disk_read+0x1ac>
 8001a08:	4e3b      	ldr	r6, [pc, #236]	; (8001af8 <SD_disk_read+0x28c>)
 8001a0a:	f10d 051f 	add.w	r5, sp, #31
 8001a0e:	f10d 041e 	add.w	r4, sp, #30
 8001a12:	2301      	movs	r3, #1
 8001a14:	9304      	str	r3, [sp, #16]
 8001a16:	e78a      	b.n	800192e <SD_disk_read+0xc2>
	Timer1 = 200;
 8001a18:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8001afc <SD_disk_read+0x290>
 8001a1c:	4e36      	ldr	r6, [pc, #216]	; (8001af8 <SD_disk_read+0x28c>)
 8001a1e:	23c8      	movs	r3, #200	; 0xc8
 8001a20:	f8ab 3000 	strh.w	r3, [fp]
 8001a24:	f10d 051f 	add.w	r5, sp, #31
 8001a28:	f10d 041e 	add.w	r4, sp, #30
	dummy = 0xFF;
 8001a2c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a30:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a34:	4637      	mov	r7, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a36:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001a38:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a3c:	6893      	ldr	r3, [r2, #8]
 8001a3e:	0799      	lsls	r1, r3, #30
 8001a40:	d5fc      	bpl.n	8001a3c <SD_disk_read+0x1d0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a42:	2301      	movs	r3, #1
 8001a44:	f8cd 9000 	str.w	r9, [sp]
 8001a48:	462a      	mov	r2, r5
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	4638      	mov	r0, r7
 8001a4e:	f003 f9af 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001a52:	f89d 301f 	ldrb.w	r3, [sp, #31]
	} while((token == 0xFF) && Timer1);
 8001a56:	2bff      	cmp	r3, #255	; 0xff
 8001a58:	d109      	bne.n	8001a6e <SD_disk_read+0x202>
 8001a5a:	f8bb 3000 	ldrh.w	r3, [fp]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1e9      	bne.n	8001a36 <SD_disk_read+0x1ca>
 8001a62:	e7d6      	b.n	8001a12 <SD_disk_read+0x1a6>
 8001a64:	2301      	movs	r3, #1
 8001a66:	462c      	mov	r4, r5
 8001a68:	9304      	str	r3, [sp, #16]
 8001a6a:	464d      	mov	r5, r9
 8001a6c:	e74e      	b.n	800190c <SD_disk_read+0xa0>
	if(token != 0xFE) return FALSE;
 8001a6e:	2bfe      	cmp	r3, #254	; 0xfe
 8001a70:	d1cf      	bne.n	8001a12 <SD_disk_read+0x1a6>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a72:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001af8 <SD_disk_read+0x28c>
 8001a76:	f10a 37ff 	add.w	r7, sl, #4294967295
	dummy = 0xFF;
 8001a7a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8001a7e:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a82:	f04f 0b64 	mov.w	fp, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a86:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8001a88:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a8c:	6883      	ldr	r3, [r0, #8]
 8001a8e:	079b      	lsls	r3, r3, #30
 8001a90:	d5fc      	bpl.n	8001a8c <SD_disk_read+0x220>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a92:	2301      	movs	r3, #1
 8001a94:	f8cd b000 	str.w	fp, [sp]
 8001a98:	462a      	mov	r2, r5
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	4648      	mov	r0, r9
 8001a9e:	f003 f987 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001aa2:	f89d 301f 	ldrb.w	r3, [sp, #31]
	*buff = SPI_RxByte();
 8001aa6:	f807 3f01 	strb.w	r3, [r7, #1]!
	} while(len--);
 8001aaa:	4557      	cmp	r7, sl
 8001aac:	d1eb      	bne.n	8001a86 <SD_disk_read+0x21a>
	dummy = 0xFF;
 8001aae:	23ff      	movs	r3, #255	; 0xff
 8001ab0:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ab4:	6833      	ldr	r3, [r6, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	0797      	lsls	r7, r2, #30
 8001aba:	d5fc      	bpl.n	8001ab6 <SD_disk_read+0x24a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001abc:	2364      	movs	r3, #100	; 0x64
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	480d      	ldr	r0, [pc, #52]	; (8001af8 <SD_disk_read+0x28c>)
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	462a      	mov	r2, r5
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	f003 f972 	bl	8004db0 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8001acc:	23ff      	movs	r3, #255	; 0xff
 8001ace:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ad2:	6833      	ldr	r3, [r6, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	0790      	lsls	r0, r2, #30
 8001ad8:	d5fc      	bpl.n	8001ad4 <SD_disk_read+0x268>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ada:	2364      	movs	r3, #100	; 0x64
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	462a      	mov	r2, r5
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <SD_disk_read+0x28c>)
 8001ae6:	f003 f963 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return TRUE;
 8001aea:	e720      	b.n	800192e <SD_disk_read+0xc2>
 8001aec:	20000000 	.word	0x20000000
 8001af0:	2000021c 	.word	0x2000021c
 8001af4:	40020800 	.word	0x40020800
 8001af8:	20002c5c 	.word	0x20002c5c
 8001afc:	2000021e 	.word	0x2000021e

08001b00 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b04:	b087      	sub	sp, #28
 8001b06:	e9cd 3102 	strd	r3, r1, [sp, #8]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d16c      	bne.n	8001be8 <SD_disk_write+0xe8>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d06a      	beq.n	8001be8 <SD_disk_write+0xe8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b12:	4bb3      	ldr	r3, [pc, #716]	; (8001de0 <SD_disk_write+0x2e0>)
 8001b14:	4614      	mov	r4, r2
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	07d6      	lsls	r6, r2, #31
 8001b1a:	f100 808a 	bmi.w	8001c32 <SD_disk_write+0x132>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	075d      	lsls	r5, r3, #29
 8001b22:	f100 8101 	bmi.w	8001d28 <SD_disk_write+0x228>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001b26:	4daf      	ldr	r5, [pc, #700]	; (8001de4 <SD_disk_write+0x2e4>)
 8001b28:	782b      	ldrb	r3, [r5, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
	if (!(CardType & CT_SD2)) sector *= 512;
 8001b2c:	0758      	lsls	r0, r3, #29
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001b2e:	f04f 0102 	mov.w	r1, #2
 8001b32:	48ad      	ldr	r0, [pc, #692]	; (8001de8 <SD_disk_write+0x2e8>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8001b34:	bf58      	it	pl
 8001b36:	0264      	lslpl	r4, r4, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001b38:	f002 f876 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f001 fae1 	bl	8003104 <HAL_Delay>

	SELECT();

	if (count == 1)
 8001b42:	9b02      	ldr	r3, [sp, #8]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	f000 80fd 	beq.w	8001d44 <SD_disk_write+0x244>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001b4a:	782b      	ldrb	r3, [r5, #0]
 8001b4c:	079a      	lsls	r2, r3, #30
 8001b4e:	f100 80f0 	bmi.w	8001d32 <SD_disk_write+0x232>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001b52:	4621      	mov	r1, r4
 8001b54:	2059      	movs	r0, #89	; 0x59
 8001b56:	f7ff fcb1 	bl	80014bc <SD_SendCmd>
 8001b5a:	4da4      	ldr	r5, [pc, #656]	; (8001dec <SD_disk_write+0x2ec>)
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d148      	bne.n	8001bf2 <SD_disk_write+0xf2>
 8001b60:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8001df0 <SD_disk_write+0x2f0>
 8001b64:	f10d 0617 	add.w	r6, sp, #23
 8001b68:	f10d 0716 	add.w	r7, sp, #22
	dummy = 0xFF;
 8001b6c:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b70:	46a8      	mov	r8, r5
	Timer2 = 500;
 8001b72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b76:	f8aa 3000 	strh.w	r3, [sl]
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b7a:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b7c:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001b7e:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b82:	6883      	ldr	r3, [r0, #8]
 8001b84:	079b      	lsls	r3, r3, #30
 8001b86:	d5fc      	bpl.n	8001b82 <SD_disk_write+0x82>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b88:	2301      	movs	r3, #1
 8001b8a:	9400      	str	r4, [sp, #0]
 8001b8c:	4632      	mov	r2, r6
 8001b8e:	4639      	mov	r1, r7
 8001b90:	4640      	mov	r0, r8
 8001b92:	f003 f90d 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001b96:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8001b9a:	2bff      	cmp	r3, #255	; 0xff
 8001b9c:	d04e      	beq.n	8001c3c <SD_disk_write+0x13c>
 8001b9e:	f8ba 3000 	ldrh.w	r3, [sl]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ea      	bne.n	8001b7c <SD_disk_write+0x7c>
	Timer2 = 500;
 8001ba6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001baa:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8001dec <SD_disk_write+0x2ec>
	Timer2 = 500;
 8001bae:	f8aa 3000 	strh.w	r3, [sl]
	dummy = 0xFF;
 8001bb2:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001bb6:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001bb8:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001bba:	f88d 8016 	strb.w	r8, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001bbe:	6883      	ldr	r3, [r0, #8]
 8001bc0:	079b      	lsls	r3, r3, #30
 8001bc2:	d5fc      	bpl.n	8001bbe <SD_disk_write+0xbe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	9400      	str	r4, [sp, #0]
 8001bc8:	4632      	mov	r2, r6
 8001bca:	4639      	mov	r1, r7
 8001bcc:	4648      	mov	r0, r9
 8001bce:	f003 f8ef 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001bd2:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	f000 80bf 	beq.w	8001d5a <SD_disk_write+0x25a>
 8001bdc:	f8ba 3000 	ldrh.w	r3, [sl]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e9      	bne.n	8001bb8 <SD_disk_write+0xb8>
 8001be4:	2401      	movs	r4, #1
 8001be6:	e009      	b.n	8001bfc <SD_disk_write+0xfc>
	if (pdrv || !count) return RES_PARERR;
 8001be8:	2404      	movs	r4, #4
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 8001bea:	4620      	mov	r0, r4
 8001bec:	b007      	add	sp, #28
 8001bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bf2:	2401      	movs	r4, #1
 8001bf4:	f10d 0617 	add.w	r6, sp, #23
 8001bf8:	f10d 0716 	add.w	r7, sp, #22
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	487a      	ldr	r0, [pc, #488]	; (8001de8 <SD_disk_write+0x2e8>)
 8001c00:	2102      	movs	r1, #2
 8001c02:	f002 f811 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c06:	2001      	movs	r0, #1
 8001c08:	f001 fa7c 	bl	8003104 <HAL_Delay>
	dummy = 0xFF;
 8001c0c:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c0e:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001c10:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c14:	6893      	ldr	r3, [r2, #8]
 8001c16:	079b      	lsls	r3, r3, #30
 8001c18:	d5fc      	bpl.n	8001c14 <SD_disk_write+0x114>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c1a:	2364      	movs	r3, #100	; 0x64
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	4632      	mov	r2, r6
 8001c20:	2301      	movs	r3, #1
 8001c22:	4639      	mov	r1, r7
 8001c24:	4871      	ldr	r0, [pc, #452]	; (8001dec <SD_disk_write+0x2ec>)
 8001c26:	f003 f8c3 	bl	8004db0 <HAL_SPI_TransmitReceive>
}
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	b007      	add	sp, #28
 8001c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c32:	2403      	movs	r4, #3
}
 8001c34:	4620      	mov	r0, r4
 8001c36:	b007      	add	sp, #28
 8001c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SPI_TxByte(token);
 8001c3c:	23fc      	movs	r3, #252	; 0xfc
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c3e:	682a      	ldr	r2, [r5, #0]
 8001c40:	f88d 3017 	strb.w	r3, [sp, #23]
 8001c44:	6893      	ldr	r3, [r2, #8]
 8001c46:	0799      	lsls	r1, r3, #30
 8001c48:	d5fc      	bpl.n	8001c44 <SD_disk_write+0x144>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2364      	movs	r3, #100	; 0x64
 8001c4e:	4631      	mov	r1, r6
 8001c50:	4640      	mov	r0, r8
 8001c52:	f002 ff5b 	bl	8004b0c <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c56:	682a      	ldr	r2, [r5, #0]
 8001c58:	6893      	ldr	r3, [r2, #8]
 8001c5a:	079b      	lsls	r3, r3, #30
 8001c5c:	d5fc      	bpl.n	8001c58 <SD_disk_write+0x158>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c62:	9903      	ldr	r1, [sp, #12]
 8001c64:	2364      	movs	r3, #100	; 0x64
 8001c66:	4640      	mov	r0, r8
 8001c68:	f002 ff50 	bl	8004b0c <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c6c:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001c6e:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c72:	6893      	ldr	r3, [r2, #8]
 8001c74:	079c      	lsls	r4, r3, #30
 8001c76:	d5fc      	bpl.n	8001c72 <SD_disk_write+0x172>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c78:	2364      	movs	r3, #100	; 0x64
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	4632      	mov	r2, r6
 8001c7e:	2301      	movs	r3, #1
 8001c80:	4639      	mov	r1, r7
 8001c82:	4640      	mov	r0, r8
 8001c84:	f003 f894 	bl	8004db0 <HAL_SPI_TransmitReceive>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c88:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001c8a:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c8e:	6893      	ldr	r3, [r2, #8]
 8001c90:	0798      	lsls	r0, r3, #30
 8001c92:	d5fc      	bpl.n	8001c8e <SD_disk_write+0x18e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c94:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8001c98:	f8cd b000 	str.w	fp, [sp]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	4632      	mov	r2, r6
 8001ca0:	4639      	mov	r1, r7
 8001ca2:	4640      	mov	r0, r8
 8001ca4:	f003 f884 	bl	8004db0 <HAL_SPI_TransmitReceive>
		while (i <= 64)
 8001ca8:	2441      	movs	r4, #65	; 0x41
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001caa:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001cac:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cb0:	6893      	ldr	r3, [r2, #8]
 8001cb2:	0799      	lsls	r1, r3, #30
 8001cb4:	d5fc      	bpl.n	8001cb0 <SD_disk_write+0x1b0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f8cd b000 	str.w	fp, [sp]
 8001cbc:	4632      	mov	r2, r6
 8001cbe:	4639      	mov	r1, r7
 8001cc0:	4640      	mov	r0, r8
 8001cc2:	f003 f875 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001cc6:	f89d 3017 	ldrb.w	r3, [sp, #23]
			resp = SPI_RxByte();
 8001cca:	f88d 3014 	strb.w	r3, [sp, #20]
			if ((resp & 0x1F) == 0x05) break;
 8001cce:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d003      	beq.n	8001ce2 <SD_disk_write+0x1e2>
		while (i <= 64)
 8001cda:	3c01      	subs	r4, #1
 8001cdc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001ce0:	d1e3      	bne.n	8001caa <SD_disk_write+0x1aa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ce2:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ce4:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001ce6:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cea:	6883      	ldr	r3, [r0, #8]
 8001cec:	079a      	lsls	r2, r3, #30
 8001cee:	d5fc      	bpl.n	8001cea <SD_disk_write+0x1ea>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	9400      	str	r4, [sp, #0]
 8001cf4:	4632      	mov	r2, r6
 8001cf6:	4639      	mov	r1, r7
 8001cf8:	4640      	mov	r0, r8
 8001cfa:	f003 f859 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001cfe:	f89d 3017 	ldrb.w	r3, [sp, #23]
		while (SPI_RxByte() == 0);
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0ee      	beq.n	8001ce4 <SD_disk_write+0x1e4>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001d06:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	f47f af49 	bne.w	8001ba6 <SD_disk_write+0xa6>
				buff += 512;
 8001d14:	9b03      	ldr	r3, [sp, #12]
 8001d16:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d1a:	9303      	str	r3, [sp, #12]
			} while (--count);
 8001d1c:	9b02      	ldr	r3, [sp, #8]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	f47f af26 	bne.w	8001b72 <SD_disk_write+0x72>
 8001d26:	e73e      	b.n	8001ba6 <SD_disk_write+0xa6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001d28:	2402      	movs	r4, #2
}
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	b007      	add	sp, #28
 8001d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SD_SendCmd(CMD55, 0);
 8001d32:	2100      	movs	r1, #0
 8001d34:	2077      	movs	r0, #119	; 0x77
 8001d36:	f7ff fbc1 	bl	80014bc <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001d3a:	9902      	ldr	r1, [sp, #8]
 8001d3c:	2057      	movs	r0, #87	; 0x57
 8001d3e:	f7ff fbbd 	bl	80014bc <SD_SendCmd>
 8001d42:	e706      	b.n	8001b52 <SD_disk_write+0x52>
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001d44:	4621      	mov	r1, r4
 8001d46:	2058      	movs	r0, #88	; 0x58
 8001d48:	f7ff fbb8 	bl	80014bc <SD_SendCmd>
 8001d4c:	b308      	cbz	r0, 8001d92 <SD_disk_write+0x292>
 8001d4e:	4d27      	ldr	r5, [pc, #156]	; (8001dec <SD_disk_write+0x2ec>)
 8001d50:	f10d 0617 	add.w	r6, sp, #23
 8001d54:	f10d 0716 	add.w	r7, sp, #22
 8001d58:	e744      	b.n	8001be4 <SD_disk_write+0xe4>
	SPI_TxByte(token);
 8001d5a:	23fd      	movs	r3, #253	; 0xfd
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d5c:	682a      	ldr	r2, [r5, #0]
 8001d5e:	f88d 3017 	strb.w	r3, [sp, #23]
 8001d62:	6893      	ldr	r3, [r2, #8]
 8001d64:	0799      	lsls	r1, r3, #30
 8001d66:	d5fc      	bpl.n	8001d62 <SD_disk_write+0x262>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001d68:	2364      	movs	r3, #100	; 0x64
 8001d6a:	4820      	ldr	r0, [pc, #128]	; (8001dec <SD_disk_write+0x2ec>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4631      	mov	r1, r6
 8001d70:	f002 fecc 	bl	8004b0c <HAL_SPI_Transmit>
		resp = 0x05;
 8001d74:	2305      	movs	r3, #5
 8001d76:	f88d 3015 	strb.w	r3, [sp, #21]
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001d7a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	f47f af2e 	bne.w	8001be4 <SD_disk_write+0xe4>
	return count ? RES_ERROR : RES_OK;
 8001d88:	9b02      	ldr	r3, [sp, #8]
 8001d8a:	1e1c      	subs	r4, r3, #0
 8001d8c:	bf18      	it	ne
 8001d8e:	2401      	movne	r4, #1
 8001d90:	e734      	b.n	8001bfc <SD_disk_write+0xfc>
	Timer2 = 500;
 8001d92:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001df0 <SD_disk_write+0x2f0>
 8001d96:	4d15      	ldr	r5, [pc, #84]	; (8001dec <SD_disk_write+0x2ec>)
 8001d98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d9c:	f8aa 3000 	strh.w	r3, [sl]
 8001da0:	f10d 0617 	add.w	r6, sp, #23
 8001da4:	f10d 0716 	add.w	r7, sp, #22
	dummy = 0xFF;
 8001da8:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001dac:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001db0:	462c      	mov	r4, r5
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001db2:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001db4:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001db8:	6883      	ldr	r3, [r0, #8]
 8001dba:	0799      	lsls	r1, r3, #30
 8001dbc:	d5fc      	bpl.n	8001db8 <SD_disk_write+0x2b8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f8cd 8000 	str.w	r8, [sp]
 8001dc4:	4632      	mov	r2, r6
 8001dc6:	4639      	mov	r1, r7
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f002 fff1 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001dce:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8001dd2:	2bff      	cmp	r3, #255	; 0xff
 8001dd4:	d00e      	beq.n	8001df4 <SD_disk_write+0x2f4>
 8001dd6:	f8ba 3000 	ldrh.w	r3, [sl]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1e9      	bne.n	8001db2 <SD_disk_write+0x2b2>
 8001dde:	e701      	b.n	8001be4 <SD_disk_write+0xe4>
 8001de0:	20000000 	.word	0x20000000
 8001de4:	2000021c 	.word	0x2000021c
 8001de8:	40020800 	.word	0x40020800
 8001dec:	20002c5c 	.word	0x20002c5c
 8001df0:	20000220 	.word	0x20000220
	SPI_TxByte(token);
 8001df4:	23fe      	movs	r3, #254	; 0xfe
 8001df6:	f88d 3017 	strb.w	r3, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001dfa:	682b      	ldr	r3, [r5, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	0792      	lsls	r2, r2, #30
 8001e00:	d5fc      	bpl.n	8001dfc <SD_disk_write+0x2fc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001e02:	2364      	movs	r3, #100	; 0x64
 8001e04:	4837      	ldr	r0, [pc, #220]	; (8001ee4 <SD_disk_write+0x3e4>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	4631      	mov	r1, r6
 8001e0a:	f002 fe7f 	bl	8004b0c <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e0e:	682b      	ldr	r3, [r5, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	0794      	lsls	r4, r2, #30
 8001e14:	d5fc      	bpl.n	8001e10 <SD_disk_write+0x310>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001e16:	2364      	movs	r3, #100	; 0x64
 8001e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e1c:	9903      	ldr	r1, [sp, #12]
 8001e1e:	4831      	ldr	r0, [pc, #196]	; (8001ee4 <SD_disk_write+0x3e4>)
 8001e20:	f002 fe74 	bl	8004b0c <HAL_SPI_Transmit>
	dummy = 0xFF;
 8001e24:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e26:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001e28:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e2c:	6893      	ldr	r3, [r2, #8]
 8001e2e:	0798      	lsls	r0, r3, #30
 8001e30:	d5fc      	bpl.n	8001e2c <SD_disk_write+0x32c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e32:	2364      	movs	r3, #100	; 0x64
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4632      	mov	r2, r6
 8001e38:	2301      	movs	r3, #1
 8001e3a:	482a      	ldr	r0, [pc, #168]	; (8001ee4 <SD_disk_write+0x3e4>)
 8001e3c:	4639      	mov	r1, r7
 8001e3e:	f002 ffb7 	bl	8004db0 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8001e42:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e44:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001e46:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e4a:	6893      	ldr	r3, [r2, #8]
 8001e4c:	0799      	lsls	r1, r3, #30
 8001e4e:	d5fc      	bpl.n	8001e4a <SD_disk_write+0x34a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e50:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001e54:	4823      	ldr	r0, [pc, #140]	; (8001ee4 <SD_disk_write+0x3e4>)
 8001e56:	f8cd 8000 	str.w	r8, [sp]
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	4632      	mov	r2, r6
 8001e5e:	4639      	mov	r1, r7
 8001e60:	f002 ffa6 	bl	8004db0 <HAL_SPI_TransmitReceive>
 8001e64:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001ee4 <SD_disk_write+0x3e4>
 8001e68:	2441      	movs	r4, #65	; 0x41
	dummy = 0xFF;
 8001e6a:	f04f 09ff 	mov.w	r9, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e6e:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001e70:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e74:	6883      	ldr	r3, [r0, #8]
 8001e76:	079b      	lsls	r3, r3, #30
 8001e78:	d5fc      	bpl.n	8001e74 <SD_disk_write+0x374>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f8cd 8000 	str.w	r8, [sp]
 8001e80:	4632      	mov	r2, r6
 8001e82:	4639      	mov	r1, r7
 8001e84:	4650      	mov	r0, sl
 8001e86:	f002 ff93 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001e8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
			resp = SPI_RxByte();
 8001e8e:	f88d 3013 	strb.w	r3, [sp, #19]
			if ((resp & 0x1F) == 0x05) break;
 8001e92:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d003      	beq.n	8001ea6 <SD_disk_write+0x3a6>
		while (i <= 64)
 8001e9e:	3c01      	subs	r4, #1
 8001ea0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001ea4:	d1e3      	bne.n	8001e6e <SD_disk_write+0x36e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ea6:	4c0f      	ldr	r4, [pc, #60]	; (8001ee4 <SD_disk_write+0x3e4>)
	dummy = 0xFF;
 8001ea8:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001eac:	f04f 0864 	mov.w	r8, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001eb0:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001eb2:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001eb6:	6883      	ldr	r3, [r0, #8]
 8001eb8:	0799      	lsls	r1, r3, #30
 8001eba:	d5fc      	bpl.n	8001eb6 <SD_disk_write+0x3b6>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f8cd 8000 	str.w	r8, [sp]
 8001ec2:	4632      	mov	r2, r6
 8001ec4:	4639      	mov	r1, r7
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f002 ff72 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001ecc:	f89d 3017 	ldrb.w	r3, [sp, #23]
		while (SPI_RxByte() == 0);
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ed      	beq.n	8001eb0 <SD_disk_write+0x3b0>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001ed4:	f89d 4013 	ldrb.w	r4, [sp, #19]
 8001ed8:	f004 041f 	and.w	r4, r4, #31
	return count ? RES_ERROR : RES_OK;
 8001edc:	3c05      	subs	r4, #5
 8001ede:	bf18      	it	ne
 8001ee0:	2401      	movne	r4, #1
 8001ee2:	e68b      	b.n	8001bfc <SD_disk_write+0xfc>
 8001ee4:	20002c5c 	.word	0x20002c5c

08001ee8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eec:	b08b      	sub	sp, #44	; 0x2c
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001eee:	bb08      	cbnz	r0, 8001f34 <SD_disk_ioctl+0x4c>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8001ef0:	2905      	cmp	r1, #5
 8001ef2:	460d      	mov	r5, r1
 8001ef4:	4617      	mov	r7, r2
 8001ef6:	d017      	beq.n	8001f28 <SD_disk_ioctl+0x40>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ef8:	4b86      	ldr	r3, [pc, #536]	; (8002114 <SD_disk_ioctl+0x22c>)
 8001efa:	781c      	ldrb	r4, [r3, #0]
 8001efc:	f014 0401 	ands.w	r4, r4, #1
 8001f00:	d11d      	bne.n	8001f3e <SD_disk_ioctl+0x56>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001f02:	4885      	ldr	r0, [pc, #532]	; (8002118 <SD_disk_ioctl+0x230>)
 8001f04:	4622      	mov	r2, r4
 8001f06:	2102      	movs	r1, #2
 8001f08:	f001 fe8e 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f001 f8f9 	bl	8003104 <HAL_Delay>

		SELECT();

		switch (ctrl)
 8001f12:	2d0d      	cmp	r5, #13
 8001f14:	d818      	bhi.n	8001f48 <SD_disk_ioctl+0x60>
 8001f16:	e8df f005 	tbb	[pc, r5]
 8001f1a:	7550      	.short	0x7550
 8001f1c:	17171791 	.word	0x17171791
 8001f20:	17171717 	.word	0x17171717
 8001f24:	45988017 	.word	0x45988017
		switch (*ptr)
 8001f28:	7814      	ldrb	r4, [r2, #0]
 8001f2a:	2c01      	cmp	r4, #1
 8001f2c:	d034      	beq.n	8001f98 <SD_disk_ioctl+0xb0>
 8001f2e:	2c02      	cmp	r4, #2
 8001f30:	d02d      	beq.n	8001f8e <SD_disk_ioctl+0xa6>
 8001f32:	b34c      	cbz	r4, 8001f88 <SD_disk_ioctl+0xa0>
 8001f34:	2404      	movs	r4, #4
		DESELECT();
		SPI_RxByte();
	}

	return res;
}
 8001f36:	4620      	mov	r0, r4
 8001f38:	b00b      	add	sp, #44	; 0x2c
 8001f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f3e:	2403      	movs	r4, #3
}
 8001f40:	4620      	mov	r0, r4
 8001f42:	b00b      	add	sp, #44	; 0x2c
 8001f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f48:	4e74      	ldr	r6, [pc, #464]	; (800211c <SD_disk_ioctl+0x234>)
		switch (ctrl)
 8001f4a:	2404      	movs	r4, #4
 8001f4c:	f10d 0717 	add.w	r7, sp, #23
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	4871      	ldr	r0, [pc, #452]	; (8002118 <SD_disk_ioctl+0x230>)
 8001f54:	2102      	movs	r1, #2
 8001f56:	f001 fe67 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f001 f8d2 	bl	8003104 <HAL_Delay>
	dummy = 0xFF;
 8001f60:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f62:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001f64:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f68:	6893      	ldr	r3, [r2, #8]
 8001f6a:	079b      	lsls	r3, r3, #30
 8001f6c:	d5fc      	bpl.n	8001f68 <SD_disk_ioctl+0x80>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f6e:	2364      	movs	r3, #100	; 0x64
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	463a      	mov	r2, r7
 8001f74:	2301      	movs	r3, #1
 8001f76:	f10d 0116 	add.w	r1, sp, #22
 8001f7a:	4868      	ldr	r0, [pc, #416]	; (800211c <SD_disk_ioctl+0x234>)
 8001f7c:	f002 ff18 	bl	8004db0 <HAL_SPI_TransmitReceive>
}
 8001f80:	4620      	mov	r0, r4
 8001f82:	b00b      	add	sp, #44	; 0x2c
 8001f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PowerFlag = 0;
 8001f88:	4b65      	ldr	r3, [pc, #404]	; (8002120 <SD_disk_ioctl+0x238>)
 8001f8a:	701c      	strb	r4, [r3, #0]
			break;
 8001f8c:	e7d3      	b.n	8001f36 <SD_disk_ioctl+0x4e>
	return PowerFlag;
 8001f8e:	4b64      	ldr	r3, [pc, #400]	; (8002120 <SD_disk_ioctl+0x238>)
			*(ptr + 1) = SD_CheckPower();
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	7053      	strb	r3, [r2, #1]
			res = RES_OK;		/* Power Check */
 8001f94:	4604      	mov	r4, r0
			break;
 8001f96:	e7ce      	b.n	8001f36 <SD_disk_ioctl+0x4e>
 8001f98:	9003      	str	r0, [sp, #12]
			SD_PowerOn();		/* Power On */
 8001f9a:	f7ff f9af 	bl	80012fc <SD_PowerOn>
			res = RES_OK;
 8001f9e:	9803      	ldr	r0, [sp, #12]
 8001fa0:	4604      	mov	r4, r0
			break;
 8001fa2:	e7c8      	b.n	8001f36 <SD_disk_ioctl+0x4e>
			if (SD_SendCmd(CMD58, 0) == 0)
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	207a      	movs	r0, #122	; 0x7a
 8001fa8:	f7ff fa88 	bl	80014bc <SD_SendCmd>
 8001fac:	4e5b      	ldr	r6, [pc, #364]	; (800211c <SD_disk_ioctl+0x234>)
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d054      	beq.n	800205c <SD_disk_ioctl+0x174>
 8001fb2:	f10d 0717 	add.w	r7, sp, #23
			res = RES_PARERR;
 8001fb6:	2404      	movs	r4, #4
 8001fb8:	e7ca      	b.n	8001f50 <SD_disk_ioctl+0x68>
	Timer2 = 500;
 8001fba:	4c5a      	ldr	r4, [pc, #360]	; (8002124 <SD_disk_ioctl+0x23c>)
 8001fbc:	4e57      	ldr	r6, [pc, #348]	; (800211c <SD_disk_ioctl+0x234>)
 8001fbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fc2:	8023      	strh	r3, [r4, #0]
 8001fc4:	f10d 0b18 	add.w	fp, sp, #24
 8001fc8:	f10d 0717 	add.w	r7, sp, #23
	dummy = 0xFF;
 8001fcc:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001fd0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001fd4:	46b0      	mov	r8, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001fd6:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001fd8:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001fdc:	6893      	ldr	r3, [r2, #8]
 8001fde:	0798      	lsls	r0, r3, #30
 8001fe0:	d5fc      	bpl.n	8001fdc <SD_disk_ioctl+0xf4>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f8cd 9000 	str.w	r9, [sp]
 8001fe8:	465a      	mov	r2, fp
 8001fea:	4639      	mov	r1, r7
 8001fec:	4640      	mov	r0, r8
 8001fee:	f002 fedf 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 8001ff2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	} while ((res != 0xFF) && Timer2);
 8001ff6:	2bff      	cmp	r3, #255	; 0xff
 8001ff8:	d02e      	beq.n	8002058 <SD_disk_ioctl+0x170>
 8001ffa:	8823      	ldrh	r3, [r4, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ea      	bne.n	8001fd6 <SD_disk_ioctl+0xee>
	res = RES_ERROR;
 8002000:	2401      	movs	r4, #1
 8002002:	e7a5      	b.n	8001f50 <SD_disk_ioctl+0x68>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002004:	2100      	movs	r1, #0
 8002006:	2049      	movs	r0, #73	; 0x49
 8002008:	f7ff fa58 	bl	80014bc <SD_SendCmd>
 800200c:	4604      	mov	r4, r0
 800200e:	2800      	cmp	r0, #0
 8002010:	d044      	beq.n	800209c <SD_disk_ioctl+0x1b4>
 8002012:	4e42      	ldr	r6, [pc, #264]	; (800211c <SD_disk_ioctl+0x234>)
 8002014:	f10d 0717 	add.w	r7, sp, #23
 8002018:	e7f2      	b.n	8002000 <SD_disk_ioctl+0x118>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800201a:	2100      	movs	r1, #0
 800201c:	2049      	movs	r0, #73	; 0x49
 800201e:	f7ff fa4d 	bl	80014bc <SD_SendCmd>
 8002022:	2800      	cmp	r0, #0
 8002024:	d1f5      	bne.n	8002012 <SD_disk_ioctl+0x12a>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002026:	4638      	mov	r0, r7
 8002028:	2110      	movs	r1, #16
 800202a:	f7ff f9d9 	bl	80013e0 <SD_RxDataBlock>
	res = RES_ERROR;
 800202e:	fab0 f480 	clz	r4, r0
 8002032:	4e3a      	ldr	r6, [pc, #232]	; (800211c <SD_disk_ioctl+0x234>)
 8002034:	0964      	lsrs	r4, r4, #5
 8002036:	f10d 0717 	add.w	r7, sp, #23
 800203a:	e789      	b.n	8001f50 <SD_disk_ioctl+0x68>
			*(WORD*) buff = 512;
 800203c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002040:	803b      	strh	r3, [r7, #0]
			break;
 8002042:	4e36      	ldr	r6, [pc, #216]	; (800211c <SD_disk_ioctl+0x234>)
 8002044:	f10d 0717 	add.w	r7, sp, #23
 8002048:	e782      	b.n	8001f50 <SD_disk_ioctl+0x68>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800204a:	2100      	movs	r1, #0
 800204c:	204a      	movs	r0, #74	; 0x4a
 800204e:	f7ff fa35 	bl	80014bc <SD_SendCmd>
 8002052:	2800      	cmp	r0, #0
 8002054:	d1dd      	bne.n	8002012 <SD_disk_ioctl+0x12a>
 8002056:	e7e6      	b.n	8002026 <SD_disk_ioctl+0x13e>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002058:	462c      	mov	r4, r5
 800205a:	e779      	b.n	8001f50 <SD_disk_ioctl+0x68>
 800205c:	1e7d      	subs	r5, r7, #1
 800205e:	1cfc      	adds	r4, r7, #3
 8002060:	f10d 0b18 	add.w	fp, sp, #24
 8002064:	f10d 0717 	add.w	r7, sp, #23
	dummy = 0xFF;
 8002068:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800206c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002070:	46b0      	mov	r8, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002072:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8002074:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002078:	6893      	ldr	r3, [r2, #8]
 800207a:	0799      	lsls	r1, r3, #30
 800207c:	d5fc      	bpl.n	8002078 <SD_disk_ioctl+0x190>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800207e:	2301      	movs	r3, #1
 8002080:	f8cd 9000 	str.w	r9, [sp]
 8002084:	465a      	mov	r2, fp
 8002086:	4639      	mov	r1, r7
 8002088:	4640      	mov	r0, r8
 800208a:	f002 fe91 	bl	8004db0 <HAL_SPI_TransmitReceive>
	return data;
 800208e:	f89d 3018 	ldrb.w	r3, [sp, #24]
					*ptr++ = SPI_RxByte();
 8002092:	f805 3f01 	strb.w	r3, [r5, #1]!
				for (n = 0; n < 4; n++)
 8002096:	42ac      	cmp	r4, r5
 8002098:	d1eb      	bne.n	8002072 <SD_disk_ioctl+0x18a>
 800209a:	e78c      	b.n	8001fb6 <SD_disk_ioctl+0xce>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800209c:	2110      	movs	r1, #16
 800209e:	a806      	add	r0, sp, #24
 80020a0:	f7ff f99e 	bl	80013e0 <SD_RxDataBlock>
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d0b4      	beq.n	8002012 <SD_disk_ioctl+0x12a>
				if ((csd[0] >> 6) == 1)
 80020a8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d022      	beq.n	80020f8 <SD_disk_ioctl+0x210>
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80020b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80020b6:	f89d 1020 	ldrb.w	r1, [sp, #32]
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80020ba:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80020be:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 80020c2:	4e16      	ldr	r6, [pc, #88]	; (800211c <SD_disk_ioctl+0x234>)
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 80020ca:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80020ce:	0289      	lsls	r1, r1, #10
 80020d0:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80020d4:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80020d6:	440b      	add	r3, r1
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80020d8:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 80020dc:	f002 020f 	and.w	r2, r2, #15
 80020e0:	0049      	lsls	r1, r1, #1
 80020e2:	f001 0106 	and.w	r1, r1, #6
 80020e6:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80020ea:	440a      	add	r2, r1
 80020ec:	3a07      	subs	r2, #7
 80020ee:	4093      	lsls	r3, r2
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	f10d 0717 	add.w	r7, sp, #23
 80020f6:	e72b      	b.n	8001f50 <SD_disk_ioctl+0x68>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80020f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80020fc:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8002100:	4e06      	ldr	r6, [pc, #24]	; (800211c <SD_disk_ioctl+0x234>)
 8002102:	3301      	adds	r3, #1
 8002104:	eb03 2302 	add.w	r3, r3, r2, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 8002108:	b29b      	uxth	r3, r3
 800210a:	029b      	lsls	r3, r3, #10
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	f10d 0717 	add.w	r7, sp, #23
 8002112:	e71d      	b.n	8001f50 <SD_disk_ioctl+0x68>
 8002114:	20000000 	.word	0x20000000
 8002118:	40020800 	.word	0x40020800
 800211c:	20002c5c 	.word	0x20002c5c
 8002120:	2000021d 	.word	0x2000021d
 8002124:	20000220 	.word	0x20000220

08002128 <Headlamp_Init>:
#include "main.h"

int headlamp_on = 0;

void Headlamp_Init() {
	HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
 8002128:	2201      	movs	r2, #1
 800212a:	4802      	ldr	r0, [pc, #8]	; (8002134 <Headlamp_Init+0xc>)
 800212c:	4611      	mov	r1, r2
 800212e:	f001 bd7b 	b.w	8003c28 <HAL_GPIO_WritePin>
 8002132:	bf00      	nop
 8002134:	40020800 	.word	0x40020800

08002138 <toggle_headlamp>:
}

void toggle_headlamp() {
 8002138:	b570      	push	{r4, r5, r6, lr}
	if (HAL_TIM_Base_GetState(HEADLAMP_TIMER) == HAL_TIM_STATE_READY) {
 800213a:	4d16      	ldr	r5, [pc, #88]	; (8002194 <toggle_headlamp+0x5c>)
 800213c:	4628      	mov	r0, r5
 800213e:	f003 fb37 	bl	80057b0 <HAL_TIM_Base_GetState>
 8002142:	2801      	cmp	r0, #1
 8002144:	d000      	beq.n	8002148 <toggle_headlamp+0x10>
			printf("Light on\n");
			headlamp_on = 1;
		}
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
	}
}
 8002146:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin,
 8002148:	4604      	mov	r4, r0
		if (headlamp_on) {
 800214a:	4e13      	ldr	r6, [pc, #76]	; (8002198 <toggle_headlamp+0x60>)
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin,
 800214c:	4813      	ldr	r0, [pc, #76]	; (800219c <toggle_headlamp+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	4621      	mov	r1, r4
 8002152:	f001 fd69 	bl	8003c28 <HAL_GPIO_WritePin>
		if (headlamp_on) {
 8002156:	6833      	ldr	r3, [r6, #0]
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 10000);
 8002158:	682a      	ldr	r2, [r5, #0]
		if (headlamp_on) {
 800215a:	b963      	cbnz	r3, 8002176 <toggle_headlamp+0x3e>
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 2500);
 800215c:	f640 13c4 	movw	r3, #2500	; 0x9c4
			printf("Light on\n");
 8002160:	480f      	ldr	r0, [pc, #60]	; (80021a0 <toggle_headlamp+0x68>)
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 2500);
 8002162:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002164:	60eb      	str	r3, [r5, #12]
			printf("Light on\n");
 8002166:	f006 f941 	bl	80083ec <puts>
			headlamp_on = 1;
 800216a:	6034      	str	r4, [r6, #0]
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 800216c:	4809      	ldr	r0, [pc, #36]	; (8002194 <toggle_headlamp+0x5c>)
}
 800216e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 8002172:	f002 bfe9 	b.w	8005148 <HAL_TIM_Base_Start_IT>
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 10000);
 8002176:	f242 7310 	movw	r3, #10000	; 0x2710
 800217a:	62d3      	str	r3, [r2, #44]	; 0x2c
			printf("Light off\n");
 800217c:	4809      	ldr	r0, [pc, #36]	; (80021a4 <toggle_headlamp+0x6c>)
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 10000);
 800217e:	60eb      	str	r3, [r5, #12]
			printf("Light off\n");
 8002180:	f006 f934 	bl	80083ec <puts>
			headlamp_on = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	6033      	str	r3, [r6, #0]
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <toggle_headlamp+0x5c>)
}
 800218a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 800218e:	f002 bfdb 	b.w	8005148 <HAL_TIM_Base_Start_IT>
 8002192:	bf00      	nop
 8002194:	20002d0c 	.word	0x20002d0c
 8002198:	20000224 	.word	0x20000224
 800219c:	40020800 	.word	0x40020800
 80021a0:	0800a3ec 	.word	0x0800a3ec
 80021a4:	0800a3e0 	.word	0x0800a3e0

080021a8 <HAL_TIM_PeriodElapsedCallback>:
	return 0;
}

/* INTERRUPT CALLBACKS */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
	if (htim == audio.htim) {
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	4282      	cmp	r2, r0
 80021ae:	d019      	beq.n	80021e4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		audio_callback(&audio);
	}
	else if (htim == &DISTANCE_SENSOR_TIMER) {
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80021b2:	4298      	cmp	r0, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80021b4:	b510      	push	{r4, lr}
 80021b6:	4604      	mov	r4, r0
	else if (htim == &DISTANCE_SENSOR_TIMER) {
 80021b8:	d017      	beq.n	80021ea <HAL_TIM_PeriodElapsedCallback+0x42>
		update_readings_async(&distance_sensor_array);
	} else if (htim == &CAMERA_CAPTURE_TIMER) {
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80021bc:	4298      	cmp	r0, r3
 80021be:	d006      	beq.n	80021ce <HAL_TIM_PeriodElapsedCallback+0x26>
		capture_flag = 1;
	} else if (htim == HEADLAMP_TIMER) {
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80021c2:	4298      	cmp	r0, r3
 80021c4:	d019      	beq.n	80021fa <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
	} else if (htim == FILE_TIMER) {
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80021c8:	4298      	cmp	r0, r3
 80021ca:	d004      	beq.n	80021d6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		XBee_Transmit_File();
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
	}
}
 80021cc:	bd10      	pop	{r4, pc}
		capture_flag = 1;
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	bd10      	pop	{r4, pc}
		XBee_Transmit_File();
 80021d6:	f000 fec5 	bl	8002f64 <XBee_Transmit_File>
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
 80021da:	4620      	mov	r0, r4
}
 80021dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
 80021e0:	f002 bfe6 	b.w	80051b0 <HAL_TIM_Base_Stop_IT>
		audio_callback(&audio);
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe bebd 	b.w	8000f64 <audio_callback>
	ADC_HandleTypeDef* hadc;
	uint32_t readings[3];
} distance_sensor_array_t;

void update_readings_async(distance_sensor_array_t* ds) {
	HAL_ADC_Start_DMA(ds->hadc, ds->readings, 3);
 80021ea:	490f      	ldr	r1, [pc, #60]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x80>)
}
 80021ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80021f4:	2203      	movs	r2, #3
 80021f6:	f001 b845 	b.w	8003284 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80021fe:	4611      	mov	r1, r2
 8002200:	f001 fd12 	bl	8003c28 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
 8002204:	4620      	mov	r0, r4
}
 8002206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
 800220a:	f002 bfd1 	b.w	80051b0 <HAL_TIM_Base_Stop_IT>
 800220e:	bf00      	nop
 8002210:	20000228 	.word	0x20000228
 8002214:	20002de4 	.word	0x20002de4
 8002218:	20002d9c 	.word	0x20002d9c
 800221c:	20002d0c 	.word	0x20002d0c
 8002220:	20002d54 	.word	0x20002d54
 8002224:	20000a84 	.word	0x20000a84
 8002228:	20000a88 	.word	0x20000a88
 800222c:	40020800 	.word	0x40020800

08002230 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	// TODO: remove, this is just for testing
	if (GPIO_Pin == 7) {
 8002230:	2807      	cmp	r0, #7
 8002232:	d005      	beq.n	8002240 <HAL_GPIO_EXTI_Callback+0x10>
		save_requested = 1;
	} else if (GPIO_Pin & (1 << 8) && input_connected) {
 8002234:	05c3      	lsls	r3, r0, #23
 8002236:	d502      	bpl.n	800223e <HAL_GPIO_EXTI_Callback+0xe>
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <HAL_GPIO_EXTI_Callback+0x1c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	b923      	cbnz	r3, 8002248 <HAL_GPIO_EXTI_Callback+0x18>
		Input_Resolve();
	}
}
 800223e:	4770      	bx	lr
		save_requested = 1;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_GPIO_EXTI_Callback+0x20>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	4770      	bx	lr
		Input_Resolve();
 8002248:	f7fe bf58 	b.w	80010fc <Input_Resolve>
 800224c:	20000004 	.word	0x20000004
 8002250:	20002f08 	.word	0x20002f08
 8002254:	00000000 	.word	0x00000000

08002258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002258:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225a:	2300      	movs	r3, #0
{
 800225c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8002262:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002266:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800226a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	4928      	ldr	r1, [pc, #160]	; (8002310 <SystemClock_Config+0xb8>)
 8002270:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002272:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002274:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800227e:	6408      	str	r0, [r1, #64]	; 0x40
 8002280:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002282:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002286:	9100      	str	r1, [sp, #0]
 8002288:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	6813      	ldr	r3, [r2, #0]
 800228e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	6813      	ldr	r3, [r2, #0]
 800229a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800229e:	9301      	str	r3, [sp, #4]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a0:	2002      	movs	r0, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a2:	9901      	ldr	r1, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a4:	2100      	movs	r1, #0
 80022a6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80022aa:	2010      	movs	r0, #16
 80022ac:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80022b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80022b4:	2004      	movs	r0, #4
 80022b6:	2107      	movs	r1, #7
 80022b8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022bc:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022be:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c0:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c4:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c6:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ca:	f002 f887 	bl	80043dc <HAL_RCC_OscConfig>
 80022ce:	b108      	cbz	r0, 80022d4 <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022d2:	e7fe      	b.n	80022d2 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002300 <SystemClock_Config+0xa8>
 80022d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80022dc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002308 <SystemClock_Config+0xb0>
 80022e0:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022e2:	4621      	mov	r1, r4
 80022e4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e6:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ea:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022ec:	f002 fa8e 	bl	800480c <HAL_RCC_ClockConfig>
 80022f0:	b108      	cbz	r0, 80022f6 <SystemClock_Config+0x9e>
 80022f2:	b672      	cpsid	i
	while (1)
 80022f4:	e7fe      	b.n	80022f4 <SystemClock_Config+0x9c>
}
 80022f6:	b014      	add	sp, #80	; 0x50
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	bf00      	nop
 80022fc:	f3af 8000 	nop.w
 8002300:	0000000f 	.word	0x0000000f
 8002304:	00000002 	.word	0x00000002
 8002308:	00000000 	.word	0x00000000
 800230c:	00001000 	.word	0x00001000
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000

08002318 <main>:
{
 8002318:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	2400      	movs	r4, #0
{
 800231e:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8002320:	f000 fec4 	bl	80030ac <HAL_Init>
  SystemClock_Config();
 8002324:	f7ff ff98 	bl	8002258 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800232c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002330:	4dba      	ldr	r5, [pc, #744]	; (800261c <main+0x304>)
 8002332:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002336:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 8002338:	48b9      	ldr	r0, [pc, #740]	; (8002620 <main+0x308>)
  hi2c1.Instance = I2C1;
 800233a:	4eba      	ldr	r6, [pc, #744]	; (8002624 <main+0x30c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	632b      	str	r3, [r5, #48]	; 0x30
 8002342:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	9303      	str	r3, [sp, #12]
 800234a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234c:	9404      	str	r4, [sp, #16]
 800234e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002354:	632b      	str	r3, [r5, #48]	; 0x30
 8002356:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	9304      	str	r3, [sp, #16]
 800235e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	9405      	str	r4, [sp, #20]
 8002362:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	632b      	str	r3, [r5, #48]	; 0x30
 800236a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	9305      	str	r3, [sp, #20]
 8002372:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002374:	9406      	str	r4, [sp, #24]
 8002376:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	632b      	str	r3, [r5, #48]	; 0x30
 800237e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	9306      	str	r3, [sp, #24]
 8002386:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002388:	9407      	str	r4, [sp, #28]
 800238a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	632b      	str	r3, [r5, #48]	; 0x30
 8002392:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002394:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 8002398:	2133      	movs	r1, #51	; 0x33
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800239a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 800239c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800239e:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 80023a0:	f001 fc42 	bl	8003c28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_CS_GPIO_Port, DAC_CS_Pin, GPIO_PIN_RESET);
 80023a4:	48a0      	ldr	r0, [pc, #640]	; (8002628 <main+0x310>)
 80023a6:	4622      	mov	r2, r4
 80023a8:	2104      	movs	r1, #4
 80023aa:	f001 fc3d 	bl	8003c28 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80023ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023b6:	489a      	ldr	r0, [pc, #616]	; (8002620 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023ba:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = B1_Pin;
 80023bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin|CAM_CS_Pin|AMP_ENABLE_Pin;
 80023c0:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023c4:	f001 fb3e 	bl	8003a44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin|CAM_CS_Pin|AMP_ENABLE_Pin;
 80023c8:	f04f 0900 	mov.w	r9, #0
 80023cc:	2231      	movs	r2, #49	; 0x31
 80023ce:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d0:	4893      	ldr	r0, [pc, #588]	; (8002620 <main+0x308>)
 80023d2:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin|CAM_CS_Pin|AMP_ENABLE_Pin;
 80023d4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80023d8:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023dc:	f001 fb32 	bl	8003a44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80023e0:	2202      	movs	r2, #2
 80023e2:	2301      	movs	r3, #1
 80023e4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80023e8:	488d      	ldr	r0, [pc, #564]	; (8002620 <main+0x308>)
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80023ea:	2201      	movs	r2, #1
 80023ec:	2300      	movs	r3, #0
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80023ee:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80023f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80023f4:	f001 fb26 	bl	8003a44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80023f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002400:	4887      	ldr	r0, [pc, #540]	; (8002620 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002404:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002406:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800240a:	f001 fb1b 	bl	8003a44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin;
 800240e:	2204      	movs	r2, #4
 8002410:	2301      	movs	r3, #1
  HAL_GPIO_Init(DAC_CS_GPIO_Port, &GPIO_InitStruct);
 8002412:	4885      	ldr	r0, [pc, #532]	; (8002628 <main+0x310>)
 8002414:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = DAC_CS_Pin;
 8002416:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800241a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(DAC_CS_GPIO_Port, &GPIO_InitStruct);
 800241e:	f001 fb11 	bl	8003a44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8002422:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002426:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002428:	4880      	ldr	r0, [pc, #512]	; (800262c <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 800242c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 800242e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002432:	f001 fb07 	bl	8003a44 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002436:	4622      	mov	r2, r4
 8002438:	2101      	movs	r1, #1
 800243a:	2028      	movs	r0, #40	; 0x28
 800243c:	f001 f8d4 	bl	80035e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002440:	2028      	movs	r0, #40	; 0x28
 8002442:	f001 f90f 	bl	8003664 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002446:	9402      	str	r4, [sp, #8]
 8002448:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800244a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800244e:	632b      	str	r3, [r5, #48]	; 0x30
 8002450:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002456:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002458:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800245a:	4621      	mov	r1, r4
 800245c:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800245e:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002460:	f001 f8c2 	bl	80035e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002464:	2038      	movs	r0, #56	; 0x38
 8002466:	f001 f8fd 	bl	8003664 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.ClockSpeed = 100000;
 800246a:	4b71      	ldr	r3, [pc, #452]	; (8002630 <main+0x318>)
 800246c:	4a71      	ldr	r2, [pc, #452]	; (8002634 <main+0x31c>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800246e:	6234      	str	r4, [r6, #32]
  hi2c1.Init.ClockSpeed = 100000;
 8002470:	e9c6 2300 	strd	r2, r3, [r6]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002474:	4630      	mov	r0, r6
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002476:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 800247a:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800247e:	e9c6 3404 	strd	r3, r4, [r6, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002482:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002486:	f001 fd33 	bl	8003ef0 <HAL_I2C_Init>
 800248a:	b108      	cbz	r0, 8002490 <main+0x178>
 800248c:	b672      	cpsid	i
	while (1)
 800248e:	e7fe      	b.n	800248e <main+0x176>
  hspi2.Instance = SPI2;
 8002490:	4b69      	ldr	r3, [pc, #420]	; (8002638 <main+0x320>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002492:	4a6a      	ldr	r2, [pc, #424]	; (800263c <main+0x324>)
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002494:	6298      	str	r0, [r3, #40]	; 0x28
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002496:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800249a:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800249e:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024a2:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi2.Init.CRCPolynomial = 10;
 80024a6:	240a      	movs	r4, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024a8:	f44f 7500 	mov.w	r5, #512	; 0x200
 80024ac:	f04f 0810 	mov.w	r8, #16
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024b0:	4618      	mov	r0, r3
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024b2:	e9c3 2700 	strd	r2, r7, [r3]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024b6:	e9c3 5806 	strd	r5, r8, [r3, #24]
  hspi2.Init.CRCPolynomial = 10;
 80024ba:	62dc      	str	r4, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024bc:	f002 fac4 	bl	8004a48 <HAL_SPI_Init>
 80024c0:	b108      	cbz	r0, 80024c6 <main+0x1ae>
 80024c2:	b672      	cpsid	i
	while (1)
 80024c4:	e7fe      	b.n	80024c4 <main+0x1ac>
  huart2.Instance = USART2;
 80024c6:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <main+0x328>)
  huart2.Init.BaudRate = 115200;
 80024c8:	495e      	ldr	r1, [pc, #376]	; (8002644 <main+0x32c>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ca:	6118      	str	r0, [r3, #16]
  huart2.Init.BaudRate = 115200;
 80024cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d0:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d4:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart2.Init.BaudRate = 115200;
 80024d8:	e9c3 1200 	strd	r1, r2, [r3]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024dc:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024de:	220c      	movs	r2, #12
 80024e0:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024e2:	f003 f9a5 	bl	8005830 <HAL_UART_Init>
 80024e6:	bb40      	cbnz	r0, 800253a <main+0x222>
  hadc1.Instance = ADC1;
 80024e8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8002660 <main+0x348>
 80024ec:	9001      	str	r0, [sp, #4]
  MX_FATFS_Init();
 80024ee:	f003 fbb7 	bl	8005c60 <MX_FATFS_Init>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80024f2:	4a55      	ldr	r2, [pc, #340]	; (8002648 <main+0x330>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80024f4:	9801      	ldr	r0, [sp, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024f6:	f8c9 0008 	str.w	r0, [r9, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80024fa:	2301      	movs	r3, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024fc:	e9c9 3304 	strd	r3, r3, [r9, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002500:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002504:	e9c9 2300 	strd	r2, r3, [r9]
  hadc1.Init.NbrOfConversion = 3;
 8002508:	2303      	movs	r3, #3
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800250a:	4a50      	ldr	r2, [pc, #320]	; (800264c <main+0x334>)
  hadc1.Init.NbrOfConversion = 3;
 800250c:	f8c9 301c 	str.w	r3, [r9, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002510:	2300      	movs	r3, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002512:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002516:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  hadc1.Init.ContinuousConvMode = DISABLE;
 800251a:	f889 0018 	strb.w	r0, [r9, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800251e:	f889 0020 	strb.w	r0, [r9, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002522:	f8c9 000c 	str.w	r0, [r9, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002526:	f889 0030 	strb.w	r0, [r9, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800252a:	e9c9 230a 	strd	r2, r3, [r9, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800252e:	4648      	mov	r0, r9
 8002530:	f000 fdfa 	bl	8003128 <HAL_ADC_Init>
 8002534:	b118      	cbz	r0, 800253e <main+0x226>
 8002536:	b672      	cpsid	i
	while (1)
 8002538:	e7fe      	b.n	8002538 <main+0x220>
 800253a:	b672      	cpsid	i
 800253c:	e7fe      	b.n	800253c <main+0x224>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800253e:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_0;
 8002540:	2200      	movs	r2, #0
 8002542:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002544:	a90e      	add	r1, sp, #56	; 0x38
 8002546:	4648      	mov	r0, r9
  sConfig.Channel = ADC_CHANNEL_0;
 8002548:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800254c:	f000 ff8c 	bl	8003468 <HAL_ADC_ConfigChannel>
 8002550:	b108      	cbz	r0, 8002556 <main+0x23e>
 8002552:	b672      	cpsid	i
	while (1)
 8002554:	e7fe      	b.n	8002554 <main+0x23c>
  sConfig.Channel = ADC_CHANNEL_1;
 8002556:	2201      	movs	r2, #1
 8002558:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800255a:	a90e      	add	r1, sp, #56	; 0x38
 800255c:	4648      	mov	r0, r9
  sConfig.Channel = ADC_CHANNEL_1;
 800255e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002562:	f000 ff81 	bl	8003468 <HAL_ADC_ConfigChannel>
 8002566:	b108      	cbz	r0, 800256c <main+0x254>
 8002568:	b672      	cpsid	i
	while (1)
 800256a:	e7fe      	b.n	800256a <main+0x252>
  sConfig.Channel = ADC_CHANNEL_4;
 800256c:	2204      	movs	r2, #4
 800256e:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002570:	4648      	mov	r0, r9
 8002572:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 8002574:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002578:	f000 ff76 	bl	8003468 <HAL_ADC_ConfigChannel>
 800257c:	b108      	cbz	r0, 8002582 <main+0x26a>
 800257e:	b672      	cpsid	i
	while (1)
 8002580:	e7fe      	b.n	8002580 <main+0x268>
  hspi1.Instance = SPI1;
 8002582:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8002664 <main+0x34c>
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <main+0x338>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002588:	f8c9 801c 	str.w	r8, [r9, #28]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800258c:	e9c9 7001 	strd	r7, r0, [r9, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002590:	e9c9 0003 	strd	r0, r0, [r9, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002594:	e9c9 0505 	strd	r0, r5, [r9, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002598:	e9c9 0008 	strd	r0, r0, [r9, #32]
  hspi1.Init.CRCPolynomial = 10;
 800259c:	e9c9 040a 	strd	r0, r4, [r9, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025a0:	4648      	mov	r0, r9
  hspi1.Instance = SPI1;
 80025a2:	f8c9 3000 	str.w	r3, [r9]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025a6:	f002 fa4f 	bl	8004a48 <HAL_SPI_Init>
 80025aa:	b108      	cbz	r0, 80025b0 <main+0x298>
 80025ac:	b672      	cpsid	i
	while (1)
 80025ae:	e7fe      	b.n	80025ae <main+0x296>
  hspi3.Instance = SPI3;
 80025b0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8002668 <main+0x350>
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <main+0x33c>)
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025b6:	f8c8 0014 	str.w	r0, [r8, #20]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ba:	e9c8 0003 	strd	r0, r0, [r8, #12]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025be:	e9c8 0007 	strd	r0, r0, [r8, #28]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c2:	e9c8 0009 	strd	r0, r0, [r8, #36]	; 0x24
  hspi3.Instance = SPI3;
 80025c6:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80025ca:	4640      	mov	r0, r8
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80025cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80025d0:	f8c8 7004 	str.w	r7, [r8, #4]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80025d4:	f8c8 5018 	str.w	r5, [r8, #24]
  hspi3.Init.CRCPolynomial = 10;
 80025d8:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80025dc:	f8c8 3008 	str.w	r3, [r8, #8]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80025e0:	f002 fa32 	bl	8004a48 <HAL_SPI_Init>
 80025e4:	b108      	cbz	r0, 80025ea <main+0x2d2>
 80025e6:	b672      	cpsid	i
	while (1)
 80025e8:	e7fe      	b.n	80025e8 <main+0x2d0>
  htim2.Instance = TIM2;
 80025ea:	4d1b      	ldr	r5, [pc, #108]	; (8002658 <main+0x340>)
  htim2.Init.Period = 610000;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <main+0x344>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	60a8      	str	r0, [r5, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f0:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80025f4:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fc:	6128      	str	r0, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fe:	61a8      	str	r0, [r5, #24]
  htim2.Init.Period = 610000;
 8002600:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 8399;
 8002602:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8002606:	f242 03cf 	movw	r3, #8399	; 0x20cf
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800260a:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 8399;
 800260c:	e9c5 a300 	strd	sl, r3, [r5]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002610:	f002 fd1c 	bl	800504c <HAL_TIM_Base_Init>
 8002614:	b350      	cbz	r0, 800266c <main+0x354>
 8002616:	b672      	cpsid	i
	while (1)
 8002618:	e7fe      	b.n	8002618 <main+0x300>
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40020800 	.word	0x40020800
 8002624:	20002bb0 	.word	0x20002bb0
 8002628:	40020c00 	.word	0x40020c00
 800262c:	40020400 	.word	0x40020400
 8002630:	000186a0 	.word	0x000186a0
 8002634:	40005400 	.word	0x40005400
 8002638:	20002c5c 	.word	0x20002c5c
 800263c:	40003800 	.word	0x40003800
 8002640:	20002eb8 	.word	0x20002eb8
 8002644:	40004400 	.word	0x40004400
 8002648:	40012000 	.word	0x40012000
 800264c:	0f000001 	.word	0x0f000001
 8002650:	40013000 	.word	0x40013000
 8002654:	40003c00 	.word	0x40003c00
 8002658:	20002d9c 	.word	0x20002d9c
 800265c:	00094ed0 	.word	0x00094ed0
 8002660:	20002b08 	.word	0x20002b08
 8002664:	20002c04 	.word	0x20002c04
 8002668:	20002cb4 	.word	0x20002cb4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002670:	4892      	ldr	r0, [pc, #584]	; (80028bc <main+0x5a4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002672:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002674:	a90e      	add	r1, sp, #56	; 0x38
 8002676:	f002 ff39 	bl	80054ec <HAL_TIM_ConfigClockSource>
 800267a:	b108      	cbz	r0, 8002680 <main+0x368>
 800267c:	b672      	cpsid	i
	while (1)
 800267e:	e7fe      	b.n	800267e <main+0x366>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002680:	488e      	ldr	r0, [pc, #568]	; (80028bc <main+0x5a4>)
 8002682:	a90a      	add	r1, sp, #40	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002684:	f04f 0a00 	mov.w	sl, #0
 8002688:	f04f 0b00 	mov.w	fp, #0
 800268c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002690:	f003 f892 	bl	80057b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002694:	4603      	mov	r3, r0
 8002696:	b108      	cbz	r0, 800269c <main+0x384>
 8002698:	b672      	cpsid	i
	while (1)
 800269a:	e7fe      	b.n	800269a <main+0x382>
  huart1.Instance = USART1;
 800269c:	4888      	ldr	r0, [pc, #544]	; (80028c0 <main+0x5a8>)
  huart1.Init.BaudRate = 115200;
 800269e:	4c89      	ldr	r4, [pc, #548]	; (80028c4 <main+0x5ac>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80026a0:	6103      	str	r3, [r0, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a6:	61c3      	str	r3, [r0, #28]
  huart1.Init.BaudRate = 115200;
 80026a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80026ac:	e9c0 4300 	strd	r4, r3, [r0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80026b0:	f04f 0c0c 	mov.w	ip, #12
 80026b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026b8:	e9c0 c305 	strd	ip, r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026bc:	f003 f8b8 	bl	8005830 <HAL_UART_Init>
 80026c0:	b108      	cbz	r0, 80026c6 <main+0x3ae>
 80026c2:	b672      	cpsid	i
	while (1)
 80026c4:	e7fe      	b.n	80026c4 <main+0x3ac>
  htim3.Instance = TIM3;
 80026c6:	4c80      	ldr	r4, [pc, #512]	; (80028c8 <main+0x5b0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c8:	9008      	str	r0, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ca:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80026ce:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d2:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80026d6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 80026da:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
 80026de:	9014      	str	r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e0:	9009      	str	r0, [sp, #36]	; 0x24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e4:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e6:	61a0      	str	r0, [r4, #24]
  htim3.Init.Prescaler = 8399;
 80026e8:	4878      	ldr	r0, [pc, #480]	; (80028cc <main+0x5b4>)
 80026ea:	f242 03cf 	movw	r3, #8399	; 0x20cf
 80026ee:	e9c4 0300 	strd	r0, r3, [r4]
  htim3.Init.Period = 1000;
 80026f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026f6:	4620      	mov	r0, r4
  htim3.Init.Period = 1000;
 80026f8:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026fa:	f002 fca7 	bl	800504c <HAL_TIM_Base_Init>
 80026fe:	b108      	cbz	r0, 8002704 <main+0x3ec>
 8002700:	b672      	cpsid	i
	while (1)
 8002702:	e7fe      	b.n	8002702 <main+0x3ea>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002704:	a90a      	add	r1, sp, #40	; 0x28
 8002706:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002708:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800270a:	f002 feef 	bl	80054ec <HAL_TIM_ConfigClockSource>
 800270e:	b108      	cbz	r0, 8002714 <main+0x3fc>
 8002710:	b672      	cpsid	i
	while (1)
 8002712:	e7fe      	b.n	8002712 <main+0x3fa>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002714:	4620      	mov	r0, r4
 8002716:	f002 fd65 	bl	80051e4 <HAL_TIM_PWM_Init>
 800271a:	b108      	cbz	r0, 8002720 <main+0x408>
 800271c:	b672      	cpsid	i
	while (1)
 800271e:	e7fe      	b.n	800271e <main+0x406>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002720:	a908      	add	r1, sp, #32
 8002722:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	e9cd ab08 	strd	sl, fp, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002728:	f003 f846 	bl	80057b8 <HAL_TIMEx_MasterConfigSynchronization>
 800272c:	4602      	mov	r2, r0
 800272e:	b108      	cbz	r0, 8002734 <main+0x41c>
 8002730:	b672      	cpsid	i
	while (1)
 8002732:	e7fe      	b.n	8002732 <main+0x41a>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002734:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002736:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002738:	f04f 0a60 	mov.w	sl, #96	; 0x60
 800273c:	f04f 0b00 	mov.w	fp, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002740:	a90e      	add	r1, sp, #56	; 0x38
 8002742:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002744:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002748:	f002 fdca 	bl	80052e0 <HAL_TIM_PWM_ConfigChannel>
 800274c:	b108      	cbz	r0, 8002752 <main+0x43a>
 800274e:	b672      	cpsid	i
	while (1)
 8002750:	e7fe      	b.n	8002750 <main+0x438>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002752:	2204      	movs	r2, #4
 8002754:	a90e      	add	r1, sp, #56	; 0x38
 8002756:	4620      	mov	r0, r4
 8002758:	f002 fdc2 	bl	80052e0 <HAL_TIM_PWM_ConfigChannel>
 800275c:	b108      	cbz	r0, 8002762 <main+0x44a>
 800275e:	b672      	cpsid	i
	while (1)
 8002760:	e7fe      	b.n	8002760 <main+0x448>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002762:	2208      	movs	r2, #8
 8002764:	a90e      	add	r1, sp, #56	; 0x38
 8002766:	4620      	mov	r0, r4
 8002768:	f002 fdba 	bl	80052e0 <HAL_TIM_PWM_ConfigChannel>
 800276c:	b108      	cbz	r0, 8002772 <main+0x45a>
 800276e:	b672      	cpsid	i
	while (1)
 8002770:	e7fe      	b.n	8002770 <main+0x458>
  htim10.Instance = TIM10;
 8002772:	4f57      	ldr	r7, [pc, #348]	; (80028d0 <main+0x5b8>)
  HAL_TIM_MspPostInit(&htim3);
 8002774:	4854      	ldr	r0, [pc, #336]	; (80028c8 <main+0x5b0>)
 8002776:	f000 faa7 	bl	8002cc8 <HAL_TIM_MspPostInit>
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277a:	f242 0bcf 	movw	fp, #8399	; 0x20cf
 800277e:	2300      	movs	r3, #0
 8002780:	e9c7 b301 	strd	fp, r3, [r7, #4]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002784:	613b      	str	r3, [r7, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002786:	61bb      	str	r3, [r7, #24]
  htim10.Instance = TIM10;
 8002788:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <main+0x5bc>)
 800278a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800278c:	4638      	mov	r0, r7
  htim10.Init.Period = 20000;
 800278e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002792:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002794:	f002 fc5a 	bl	800504c <HAL_TIM_Base_Init>
 8002798:	b108      	cbz	r0, 800279e <main+0x486>
 800279a:	b672      	cpsid	i
	while (1)
 800279c:	e7fe      	b.n	800279c <main+0x484>
  htim4.Instance = TIM4;
 800279e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 800290c <main+0x5f4>
 80027a2:	4b4d      	ldr	r3, [pc, #308]	; (80028d8 <main+0x5c0>)
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a4:	f8ca 0010 	str.w	r0, [sl, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a8:	e9ca b001 	strd	fp, r0, [sl, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ac:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80027b0:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b8:	f8ca 0018 	str.w	r0, [sl, #24]
  htim4.Init.Period = 1000;
 80027bc:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027c0:	4650      	mov	r0, sl
  htim4.Instance = TIM4;
 80027c2:	f8ca 3000 	str.w	r3, [sl]
  htim4.Init.Period = 1000;
 80027c6:	f8ca b00c 	str.w	fp, [sl, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027ca:	f002 fc3f 	bl	800504c <HAL_TIM_Base_Init>
 80027ce:	b108      	cbz	r0, 80027d4 <main+0x4bc>
 80027d0:	b672      	cpsid	i
	while (1)
 80027d2:	e7fe      	b.n	80027d2 <main+0x4ba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027d8:	a90e      	add	r1, sp, #56	; 0x38
 80027da:	4650      	mov	r0, sl
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027dc:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027de:	f002 fe85 	bl	80054ec <HAL_TIM_ConfigClockSource>
 80027e2:	b108      	cbz	r0, 80027e8 <main+0x4d0>
 80027e4:	b672      	cpsid	i
	while (1)
 80027e6:	e7fe      	b.n	80027e6 <main+0x4ce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e8:	2300      	movs	r3, #0
 80027ea:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027ec:	a90a      	add	r1, sp, #40	; 0x28
 80027ee:	4650      	mov	r0, sl
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027f4:	f002 ffe0 	bl	80057b8 <HAL_TIMEx_MasterConfigSynchronization>
 80027f8:	4603      	mov	r3, r0
 80027fa:	b108      	cbz	r0, 8002800 <main+0x4e8>
 80027fc:	b672      	cpsid	i
	while (1)
 80027fe:	e7fe      	b.n	80027fe <main+0x4e6>
  htim11.Instance = TIM11;
 8002800:	4836      	ldr	r0, [pc, #216]	; (80028dc <main+0x5c4>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002802:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002806:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002808:	6183      	str	r3, [r0, #24]
  htim11.Instance = TIM11;
 800280a:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <main+0x5c8>)
 800280c:	6003      	str	r3, [r0, #0]
  htim11.Init.Period = 65535;
 800280e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002812:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002814:	f002 fc1a 	bl	800504c <HAL_TIM_Base_Init>
 8002818:	b108      	cbz	r0, 800281e <main+0x506>
 800281a:	b672      	cpsid	i
	while (1)
 800281c:	e7fe      	b.n	800281c <main+0x504>
	FIX_TIMER_TRIGGER(&htim10);
 800281e:	6839      	ldr	r1, [r7, #0]
	FIX_TIMER_TRIGGER(&htim3);
 8002820:	6824      	ldr	r4, [r4, #0]
	FIX_TIMER_TRIGGER(&htim4);
 8002822:	f8da 7000 	ldr.w	r7, [sl]
 8002826:	9001      	str	r0, [sp, #4]
	FIX_TIMER_TRIGGER(&htim2);
 8002828:	6828      	ldr	r0, [r5, #0]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 800282a:	4d2e      	ldr	r5, [pc, #184]	; (80028e4 <main+0x5cc>)
	FIX_TIMER_TRIGGER(&htim2);
 800282c:	f06f 0201 	mvn.w	r2, #1
 8002830:	6102      	str	r2, [r0, #16]
	FIX_TIMER_TRIGGER(&htim3);
 8002832:	6122      	str	r2, [r4, #16]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002834:	4628      	mov	r0, r5
	FIX_TIMER_TRIGGER(&htim4);
 8002836:	613a      	str	r2, [r7, #16]
	FIX_TIMER_TRIGGER(&htim10);
 8002838:	610a      	str	r2, [r1, #16]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 800283a:	2201      	movs	r2, #1
 800283c:	2110      	movs	r1, #16
 800283e:	f001 f9f3 	bl	8003c28 <HAL_GPIO_WritePin>
	uint8_t buf[1] = { 0x00 }; // dummy write
 8002842:	9b01      	ldr	r3, [sp, #4]
 8002844:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8002848:	a90e      	add	r1, sp, #56	; 0x38
 800284a:	2201      	movs	r2, #1
 800284c:	2364      	movs	r3, #100	; 0x64
 800284e:	4826      	ldr	r0, [pc, #152]	; (80028e8 <main+0x5d0>)
	audio.fs = &fs;
 8002850:	4c26      	ldr	r4, [pc, #152]	; (80028ec <main+0x5d4>)
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8002852:	f002 f95b 	bl	8004b0c <HAL_SPI_Transmit>
	ov5462.hi2c = &hi2c1;
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <main+0x5d8>)
	printf("program start!\r\n");
 8002858:	4826      	ldr	r0, [pc, #152]	; (80028f4 <main+0x5dc>)
	ov5462.hspi = &CAMERA_SPI;
 800285a:	e9c3 6900 	strd	r6, r9, [r3]
	printf("program start!\r\n");
 800285e:	f005 fdc5 	bl	80083ec <puts>
	HAL_Delay(1000);
 8002862:	4658      	mov	r0, fp
 8002864:	f000 fc4e 	bl	8003104 <HAL_Delay>
	Headlamp_Init();
 8002868:	f7ff fc5e 	bl	8002128 <Headlamp_Init>
	ext_dac.cs_port = GPIOD;
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <main+0x5e0>)
 800286e:	4a23      	ldr	r2, [pc, #140]	; (80028fc <main+0x5e4>)
 8002870:	605a      	str	r2, [r3, #4]
	ext_dac.cs_pin = GPIO_PIN_2;
 8002872:	2204      	movs	r2, #4
 8002874:	811a      	strh	r2, [r3, #8]
	audio.amp_enable_pin = GPIO_PIN_5;
 8002876:	2220      	movs	r2, #32
	ext_dac.hspi = &hspi3;
 8002878:	f8c3 8000 	str.w	r8, [r3]
	audio.ext_dac = &ext_dac;
 800287c:	60a3      	str	r3, [r4, #8]
	audio.amp_enable_pin = GPIO_PIN_5;
 800287e:	f8a4 2856 	strh.w	r2, [r4, #2134]	; 0x856
	audio.fil = &fil;
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <main+0x5e8>)
	audio.fs = &fs;
 8002884:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <main+0x5ec>)
	audio.htim = &htim4;
 8002886:	f8c4 a00c 	str.w	sl, [r4, #12]
	audio_init(&audio);
 800288a:	4620      	mov	r0, r4
	audio.fil = &fil;
 800288c:	e9c4 2300 	strd	r2, r3, [r4]
	audio.amp_enable_port = GPIOC;
 8002890:	6125      	str	r5, [r4, #16]
	audio_init(&audio);
 8002892:	f7fe fb13 	bl	8000ebc <audio_init>
	init_complete = 1;
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <main+0x5f0>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
		check_and_fill_audio_buf(&audio);
 800289c:	4620      	mov	r0, r4
 800289e:	f7fe fb19 	bl	8000ed4 <check_and_fill_audio_buf>
		toggle_headlamp();
 80028a2:	f7ff fc49 	bl	8002138 <toggle_headlamp>
		HAL_Delay(5000);
 80028a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80028aa:	f000 fc2b 	bl	8003104 <HAL_Delay>
		toggle_headlamp();
 80028ae:	f7ff fc43 	bl	8002138 <toggle_headlamp>
		HAL_Delay(5000);
 80028b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80028b6:	f000 fc25 	bl	8003104 <HAL_Delay>
	while (1)
 80028ba:	e7ef      	b.n	800289c <main+0x584>
 80028bc:	20002d9c 	.word	0x20002d9c
 80028c0:	20002e74 	.word	0x20002e74
 80028c4:	40011000 	.word	0x40011000
 80028c8:	20002de4 	.word	0x20002de4
 80028cc:	40000400 	.word	0x40000400
 80028d0:	20002d0c 	.word	0x20002d0c
 80028d4:	40014400 	.word	0x40014400
 80028d8:	40000800 	.word	0x40000800
 80028dc:	20002d54 	.word	0x20002d54
 80028e0:	40014800 	.word	0x40014800
 80028e4:	40020800 	.word	0x40020800
 80028e8:	20002c04 	.word	0x20002c04
 80028ec:	20000228 	.word	0x20000228
 80028f0:	20002f00 	.word	0x20002f00
 80028f4:	0800a3f8 	.word	0x0800a3f8
 80028f8:	20000a98 	.word	0x20000a98
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	20000aa4 	.word	0x20000aa4
 8002904:	20001ad4 	.word	0x20001ad4
 8002908:	20002efc 	.word	0x20002efc
 800290c:	20002e2c 	.word	0x20002e2c

08002910 <__io_putchar>:
{
 8002910:	b500      	push	{lr}
 8002912:	b083      	sub	sp, #12
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002914:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8002918:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800291a:	2201      	movs	r2, #1
 800291c:	a901      	add	r1, sp, #4
 800291e:	4803      	ldr	r0, [pc, #12]	; (800292c <__io_putchar+0x1c>)
 8002920:	f003 f820 	bl	8005964 <HAL_UART_Transmit>
}
 8002924:	9801      	ldr	r0, [sp, #4]
 8002926:	b003      	add	sp, #12
 8002928:	f85d fb04 	ldr.w	pc, [sp], #4
 800292c:	20002eb8 	.word	0x20002eb8

08002930 <Error_Handler>:
 8002930:	b672      	cpsid	i
	while (1)
 8002932:	e7fe      	b.n	8002932 <Error_Handler+0x2>

08002934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HAL_MspInit+0x38>)
 8002938:	2100      	movs	r1, #0
 800293a:	9100      	str	r1, [sp, #0]
 800293c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800293e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002942:	645a      	str	r2, [r3, #68]	; 0x44
 8002944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002946:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800294a:	9200      	str	r2, [sp, #0]
 800294c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	9101      	str	r1, [sp, #4]
 8002950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002952:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002962:	2005      	movs	r0, #5
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002964:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002966:	f000 be2d 	b.w	80035c4 <HAL_NVIC_SetPriorityGrouping>
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002970:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002972:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <HAL_ADC_MspInit+0x98>)
 8002974:	6802      	ldr	r2, [r0, #0]
{
 8002976:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800297a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002980:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002984:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8002986:	d001      	beq.n	800298c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002988:	b008      	add	sp, #32
 800298a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800298c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002990:	9400      	str	r4, [sp, #0]
 8002992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8002994:	4e1d      	ldr	r6, [pc, #116]	; (8002a0c <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
 800299c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800299e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80029a2:	9200      	str	r2, [sp, #0]
 80029a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	9401      	str	r4, [sp, #4]
 80029a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_Pin|ULTRA_LEFT_ADC_Pin|ULTRA_CENTER_ADC_Pin;
 80029b8:	2213      	movs	r2, #19
 80029ba:	2303      	movs	r3, #3
 80029bc:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	a902      	add	r1, sp, #8
 80029c0:	4813      	ldr	r0, [pc, #76]	; (8002a10 <HAL_ADC_MspInit+0xa0>)
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_Pin|ULTRA_LEFT_ADC_Pin|ULTRA_CENTER_ADC_Pin;
 80029c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f001 f83c 	bl	8003a44 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80029cc:	4a11      	ldr	r2, [pc, #68]	; (8002a14 <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ce:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80029d4:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029d8:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029e2:	e9c6 2305 	strd	r2, r3, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029e6:	4630      	mov	r0, r6
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80029e8:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ec:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029f0:	e9c6 3407 	strd	r3, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029f4:	f000 fe5e 	bl	80036b4 <HAL_DMA_Init>
 80029f8:	b918      	cbnz	r0, 8002a02 <HAL_ADC_MspInit+0x92>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029fa:	63ae      	str	r6, [r5, #56]	; 0x38
 80029fc:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80029fe:	b008      	add	sp, #32
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002a02:	f7ff ff95 	bl	8002930 <Error_Handler>
 8002a06:	e7f8      	b.n	80029fa <HAL_ADC_MspInit+0x8a>
 8002a08:	40012000 	.word	0x40012000
 8002a0c:	20002b50 	.word	0x20002b50
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40026410 	.word	0x40026410

08002a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a18:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_I2C_MspInit+0x64>)
 8002a1c:	6802      	ldr	r2, [r0, #0]
{
 8002a1e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8002a22:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002a28:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002a2c:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a30:	b009      	add	sp, #36	; 0x24
 8002a32:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a34:	4d12      	ldr	r5, [pc, #72]	; (8002a80 <HAL_I2C_MspInit+0x68>)
 8002a36:	9400      	str	r4, [sp, #0]
 8002a38:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	4812      	ldr	r0, [pc, #72]	; (8002a84 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	632b      	str	r3, [r5, #48]	; 0x30
 8002a42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a4a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a4e:	2312      	movs	r3, #18
 8002a50:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a58:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a60:	f000 fff0 	bl	8003a44 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a64:	9401      	str	r4, [sp, #4]
 8002a66:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a6c:	642b      	str	r3, [r5, #64]	; 0x40
 8002a6e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	9b01      	ldr	r3, [sp, #4]
}
 8002a78:	b009      	add	sp, #36	; 0x24
 8002a7a:	bd30      	pop	{r4, r5, pc}
 8002a7c:	40005400 	.word	0x40005400
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020400 	.word	0x40020400

08002a88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a88:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8002a8a:	6802      	ldr	r2, [r0, #0]
 8002a8c:	4949      	ldr	r1, [pc, #292]	; (8002bb4 <HAL_SPI_MspInit+0x12c>)
{
 8002a8e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8002a92:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8002a98:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8002a9c:	930c      	str	r3, [sp, #48]	; 0x30
  if(hspi->Instance==SPI1)
 8002a9e:	d007      	beq.n	8002ab0 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8002aa0:	4945      	ldr	r1, [pc, #276]	; (8002bb8 <HAL_SPI_MspInit+0x130>)
 8002aa2:	428a      	cmp	r2, r1
 8002aa4:	d027      	beq.n	8002af6 <HAL_SPI_MspInit+0x6e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8002aa6:	4945      	ldr	r1, [pc, #276]	; (8002bbc <HAL_SPI_MspInit+0x134>)
 8002aa8:	428a      	cmp	r2, r1
 8002aaa:	d05f      	beq.n	8002b6c <HAL_SPI_MspInit+0xe4>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002aac:	b00e      	add	sp, #56	; 0x38
 8002aae:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ab0:	4a43      	ldr	r2, [pc, #268]	; (8002bc0 <HAL_SPI_MspInit+0x138>)
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002ab6:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8002aba:	6450      	str	r0, [r2, #68]	; 0x44
 8002abc:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002abe:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8002ac2:	9001      	str	r0, [sp, #4]
 8002ac4:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	9302      	str	r3, [sp, #8]
 8002ac8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aca:	483e      	ldr	r0, [pc, #248]	; (8002bc4 <HAL_SPI_MspInit+0x13c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002adc:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ade:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = CAM_SCK_Pin|CAM_MISO_Pin|CAM_MOSI_Pin;
 8002ae0:	26e0      	movs	r6, #224	; 0xe0
 8002ae2:	2702      	movs	r7, #2
 8002ae4:	e9cd 6708 	strd	r6, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ae8:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aec:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aee:	f000 ffa9 	bl	8003a44 <HAL_GPIO_Init>
}
 8002af2:	b00e      	add	sp, #56	; 0x38
 8002af4:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002af6:	4a32      	ldr	r2, [pc, #200]	; (8002bc0 <HAL_SPI_MspInit+0x138>)
 8002af8:	9303      	str	r3, [sp, #12]
 8002afa:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afc:	4832      	ldr	r0, [pc, #200]	; (8002bc8 <HAL_SPI_MspInit+0x140>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002afe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002b02:	6411      	str	r1, [r2, #64]	; 0x40
 8002b04:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002b06:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002b0a:	9103      	str	r1, [sp, #12]
 8002b0c:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	9304      	str	r3, [sp, #16]
 8002b10:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b12:	f041 0104 	orr.w	r1, r1, #4
 8002b16:	6311      	str	r1, [r2, #48]	; 0x30
 8002b18:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b1a:	f001 0104 	and.w	r1, r1, #4
 8002b1e:	9104      	str	r1, [sp, #16]
 8002b20:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	9305      	str	r3, [sp, #20]
 8002b24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b34:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b36:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = SD_MISO_Pin|SD_MOSI_Pin;
 8002b38:	220c      	movs	r2, #12
 8002b3a:	2601      	movs	r6, #1
 8002b3c:	2703      	movs	r7, #3
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002b44:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b48:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b4a:	940c      	str	r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b4c:	f000 ff7a 	bl	8003a44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8002b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b54:	2302      	movs	r3, #2
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002b56:	481d      	ldr	r0, [pc, #116]	; (8002bcc <HAL_SPI_MspInit+0x144>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b58:	940c      	str	r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002b5a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8002b5c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8002b60:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002b64:	f000 ff6e 	bl	8003a44 <HAL_GPIO_Init>
}
 8002b68:	b00e      	add	sp, #56	; 0x38
 8002b6a:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b6c:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <HAL_SPI_MspInit+0x138>)
 8002b6e:	9306      	str	r3, [sp, #24]
 8002b70:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002b72:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002b76:	6410      	str	r0, [r2, #64]	; 0x40
 8002b78:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002b7a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 8002b7e:	9006      	str	r0, [sp, #24]
 8002b80:	9806      	ldr	r0, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b82:	9307      	str	r3, [sp, #28]
 8002b84:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b86:	4810      	ldr	r0, [pc, #64]	; (8002bc8 <HAL_SPI_MspInit+0x140>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b98:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b9a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = DAC_SCK_Pin|DAC_MOSI_Pin;
 8002b9c:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 8002ba0:	2702      	movs	r7, #2
 8002ba2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ba6:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002baa:	9c07      	ldr	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bac:	f000 ff4a 	bl	8003a44 <HAL_GPIO_Init>
}
 8002bb0:	b00e      	add	sp, #56	; 0x38
 8002bb2:	bdd0      	pop	{r4, r6, r7, pc}
 8002bb4:	40013000 	.word	0x40013000
 8002bb8:	40003800 	.word	0x40003800
 8002bbc:	40003c00 	.word	0x40003c00
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020400 	.word	0x40020400

08002bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bd0:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8002bd2:	6803      	ldr	r3, [r0, #0]
 8002bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002bd8:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8002bda:	d01d      	beq.n	8002c18 <HAL_TIM_Base_MspInit+0x48>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002bdc:	4a35      	ldr	r2, [pc, #212]	; (8002cb4 <HAL_TIM_Base_MspInit+0xe4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d031      	beq.n	8002c46 <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002be2:	4a35      	ldr	r2, [pc, #212]	; (8002cb8 <HAL_TIM_Base_MspInit+0xe8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d008      	beq.n	8002bfa <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8002be8:	4a34      	ldr	r2, [pc, #208]	; (8002cbc <HAL_TIM_Base_MspInit+0xec>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d050      	beq.n	8002c90 <HAL_TIM_Base_MspInit+0xc0>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8002bee:	4a34      	ldr	r2, [pc, #208]	; (8002cc0 <HAL_TIM_Base_MspInit+0xf0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d03e      	beq.n	8002c72 <HAL_TIM_Base_MspInit+0xa2>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002bf4:	b007      	add	sp, #28
 8002bf6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bfa:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <HAL_TIM_Base_MspInit+0xf4>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	9203      	str	r2, [sp, #12]
 8002c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c02:	f042 0204 	orr.w	r2, r2, #4
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	9303      	str	r3, [sp, #12]
 8002c10:	9b03      	ldr	r3, [sp, #12]
}
 8002c12:	b007      	add	sp, #28
 8002c14:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c18:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	9201      	str	r2, [sp, #4]
 8002c20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c22:	f041 0101 	orr.w	r1, r1, #1
 8002c26:	6419      	str	r1, [r3, #64]	; 0x40
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f003 0301 	and.w	r3, r3, #1
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002c2e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c30:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002c32:	2102      	movs	r1, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c34:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002c36:	f000 fcd7 	bl	80035e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c3a:	201c      	movs	r0, #28
}
 8002c3c:	b007      	add	sp, #28
 8002c3e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c42:	f000 bd0f 	b.w	8003664 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c46:	2200      	movs	r2, #0
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_TIM_Base_MspInit+0xf4>)
 8002c4a:	9202      	str	r2, [sp, #8]
 8002c4c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c4e:	f041 0102 	orr.w	r1, r1, #2
 8002c52:	6419      	str	r1, [r3, #64]	; 0x40
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c5c:	201d      	movs	r0, #29
 8002c5e:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c60:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c62:	f000 fcc1 	bl	80035e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c66:	201d      	movs	r0, #29
}
 8002c68:	b007      	add	sp, #28
 8002c6a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c6e:	f000 bcf9 	b.w	8003664 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c72:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_TIM_Base_MspInit+0xf4>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	9205      	str	r2, [sp, #20]
 8002c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c86:	9305      	str	r3, [sp, #20]
 8002c88:	9b05      	ldr	r3, [sp, #20]
}
 8002c8a:	b007      	add	sp, #28
 8002c8c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <HAL_TIM_Base_MspInit+0xf4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	9204      	str	r2, [sp, #16]
 8002c96:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c98:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002c9c:	6459      	str	r1, [r3, #68]	; 0x44
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002ca4:	2019      	movs	r0, #25
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002ca6:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002ca8:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002caa:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002cac:	f000 fc9c 	bl	80035e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002cb0:	2019      	movs	r0, #25
 8002cb2:	e7c3      	b.n	8002c3c <HAL_TIM_Base_MspInit+0x6c>
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cc8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8002cca:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <HAL_TIM_MspPostInit+0x58>)
 8002ccc:	6801      	ldr	r1, [r0, #0]
{
 8002cce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8002cd2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002cd8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002cdc:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM3)
 8002cde:	d002      	beq.n	8002ce6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ce0:	b009      	add	sp, #36	; 0x24
 8002ce2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce6:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8002cea:	9301      	str	r3, [sp, #4]
 8002cec:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cee:	480d      	ldr	r0, [pc, #52]	; (8002d24 <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = LEFT_HAPTIC_Pin|CENTER_HAPTIC_Pin|RIGHT_HAPTIC_Pin;
 8002cf8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8002d18 <HAL_TIM_MspPostInit+0x50>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d02:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d04:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = LEFT_HAPTIC_Pin|CENTER_HAPTIC_Pin|RIGHT_HAPTIC_Pin;
 8002d06:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d0c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0e:	f000 fe99 	bl	8003a44 <HAL_GPIO_Init>
}
 8002d12:	b009      	add	sp, #36	; 0x24
 8002d14:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d18:	000001c0 	.word	0x000001c0
 8002d1c:	00000002 	.word	0x00000002
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40020800 	.word	0x40020800

08002d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d28:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8002d2a:	6802      	ldr	r2, [r0, #0]
 8002d2c:	492e      	ldr	r1, [pc, #184]	; (8002de8 <HAL_UART_MspInit+0xc0>)
{
 8002d2e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 8002d32:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002d38:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002d3c:	9308      	str	r3, [sp, #32]
  if(huart->Instance==USART1)
 8002d3e:	d004      	beq.n	8002d4a <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002d40:	492a      	ldr	r1, [pc, #168]	; (8002dec <HAL_UART_MspInit+0xc4>)
 8002d42:	428a      	cmp	r2, r1
 8002d44:	d024      	beq.n	8002d90 <HAL_UART_MspInit+0x68>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d46:	b00a      	add	sp, #40	; 0x28
 8002d48:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d4a:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <HAL_UART_MspInit+0xc8>)
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002d50:	f040 0010 	orr.w	r0, r0, #16
 8002d54:	6450      	str	r0, [r2, #68]	; 0x44
 8002d56:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002d58:	f000 0010 	and.w	r0, r0, #16
 8002d5c:	9000      	str	r0, [sp, #0]
 8002d5e:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	4823      	ldr	r0, [pc, #140]	; (8002df4 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin|XBEE_CTS_Pin|XBEE_RTS_Pin;
 8002d6e:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8002dd8 <HAL_UART_MspInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d7a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin|XBEE_CTS_Pin|XBEE_RTS_Pin;
 8002d7e:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d82:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d88:	f000 fe5c 	bl	8003a44 <HAL_GPIO_Init>
}
 8002d8c:	b00a      	add	sp, #40	; 0x28
 8002d8e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d90:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_UART_MspInit+0xc8>)
 8002d92:	9302      	str	r3, [sp, #8]
 8002d94:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002d96:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8002d9a:	6410      	str	r0, [r2, #64]	; 0x40
 8002d9c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002d9e:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8002da2:	9002      	str	r0, [sp, #8]
 8002da4:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	9303      	str	r3, [sp, #12]
 8002da8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002daa:	4812      	ldr	r0, [pc, #72]	; (8002df4 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002db4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002de0 <HAL_UART_MspInit+0xb8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dc0:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002dc2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dc8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f000 fe3b 	bl	8003a44 <HAL_GPIO_Init>
}
 8002dce:	b00a      	add	sp, #40	; 0x28
 8002dd0:	bd10      	pop	{r4, pc}
 8002dd2:	bf00      	nop
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	00001e00 	.word	0x00001e00
 8002ddc:	00000002 	.word	0x00000002
 8002de0:	0000000c 	.word	0x0000000c
 8002de4:	00000002 	.word	0x00000002
 8002de8:	40011000 	.word	0x40011000
 8002dec:	40004400 	.word	0x40004400
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020000 	.word	0x40020000

08002df8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <NMI_Handler>
 8002dfa:	bf00      	nop

08002dfc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <HardFault_Handler>
 8002dfe:	bf00      	nop

08002e00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e00:	e7fe      	b.n	8002e00 <MemManage_Handler>
 8002e02:	bf00      	nop

08002e04 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e04:	e7fe      	b.n	8002e04 <BusFault_Handler>
 8002e06:	bf00      	nop

08002e08 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e08:	e7fe      	b.n	8002e08 <UsageFault_Handler>
 8002e0a:	bf00      	nop

08002e0c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop

08002e10 <DebugMon_Handler>:
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop

08002e14 <PendSV_Handler>:
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop

08002e18 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8002e18:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <SysTick_Handler+0x3c>)
 8002e1a:	7813      	ldrb	r3, [r2, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	7013      	strb	r3, [r2, #0]

	if (FatFsCnt >= 10) {
 8002e22:	7813      	ldrb	r3, [r2, #0]
 8002e24:	2b09      	cmp	r3, #9
 8002e26:	d801      	bhi.n	8002e2c <SysTick_Handler+0x14>
		FatFsCnt = 0;
		SDTimer_Handler();
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e28:	f000 b95a 	b.w	80030e0 <HAL_IncTick>
	if (Timer1 > 0) {
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <SysTick_Handler+0x40>)
		FatFsCnt = 0;
 8002e2e:	2100      	movs	r1, #0
 8002e30:	7011      	strb	r1, [r2, #0]
	if (Timer1 > 0) {
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	b11a      	cbz	r2, 8002e3e <SysTick_Handler+0x26>
		--Timer1;
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0) {
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <SysTick_Handler+0x44>)
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	2a00      	cmp	r2, #0
 8002e44:	d0f0      	beq.n	8002e28 <SysTick_Handler+0x10>
		--Timer2;
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	3a01      	subs	r2, #1
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]
  HAL_IncTick();
 8002e4e:	f000 b947 	b.w	80030e0 <HAL_IncTick>
 8002e52:	bf00      	nop
 8002e54:	20002f0c 	.word	0x20002f0c
 8002e58:	2000021e 	.word	0x2000021e
 8002e5c:	20000220 	.word	0x20000220

08002e60 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002e60:	4801      	ldr	r0, [pc, #4]	; (8002e68 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8002e62:	f002 bbfb 	b.w	800565c <HAL_TIM_IRQHandler>
 8002e66:	bf00      	nop
 8002e68:	20002d0c 	.word	0x20002d0c

08002e6c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e6c:	4801      	ldr	r0, [pc, #4]	; (8002e74 <TIM2_IRQHandler+0x8>)
 8002e6e:	f002 bbf5 	b.w	800565c <HAL_TIM_IRQHandler>
 8002e72:	bf00      	nop
 8002e74:	20002d9c 	.word	0x20002d9c

08002e78 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e78:	4801      	ldr	r0, [pc, #4]	; (8002e80 <TIM3_IRQHandler+0x8>)
 8002e7a:	f002 bbef 	b.w	800565c <HAL_TIM_IRQHandler>
 8002e7e:	bf00      	nop
 8002e80:	20002de4 	.word	0x20002de4

08002e84 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e88:	f000 bed2 	b.w	8003c30 <HAL_GPIO_EXTI_IRQHandler>

08002e8c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e8c:	4801      	ldr	r0, [pc, #4]	; (8002e94 <DMA2_Stream0_IRQHandler+0x8>)
 8002e8e:	f000 bce9 	b.w	8003864 <HAL_DMA_IRQHandler>
 8002e92:	bf00      	nop
 8002e94:	20002b50 	.word	0x20002b50

08002e98 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002e98:	2001      	movs	r0, #1
 8002e9a:	4770      	bx	lr

08002e9c <_kill>:

int _kill(int pid, int sig)
{
 8002e9c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002e9e:	f004 fc93 	bl	80077c8 <__errno>
 8002ea2:	2316      	movs	r3, #22
 8002ea4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eaa:	bd08      	pop	{r3, pc}

08002eac <_exit>:

void _exit (int status)
{
 8002eac:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002eae:	f004 fc8b 	bl	80077c8 <__errno>
 8002eb2:	2316      	movs	r3, #22
 8002eb4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002eb6:	e7fe      	b.n	8002eb6 <_exit+0xa>

08002eb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eb8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eba:	1e16      	subs	r6, r2, #0
 8002ebc:	dd07      	ble.n	8002ece <_read+0x16>
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002ec2:	f3af 8000 	nop.w
 8002ec6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eca:	42a5      	cmp	r5, r4
 8002ecc:	d1f9      	bne.n	8002ec2 <_read+0xa>
	}

return len;
}
 8002ece:	4630      	mov	r0, r6
 8002ed0:	bd70      	pop	{r4, r5, r6, pc}
 8002ed2:	bf00      	nop

08002ed4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ed4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	1e16      	subs	r6, r2, #0
 8002ed8:	dd07      	ble.n	8002eea <_write+0x16>
 8002eda:	460c      	mov	r4, r1
 8002edc:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002ede:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002ee2:	f7ff fd15 	bl	8002910 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee6:	42ac      	cmp	r4, r5
 8002ee8:	d1f9      	bne.n	8002ede <_write+0xa>
	}
	return len;
}
 8002eea:	4630      	mov	r0, r6
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	bf00      	nop

08002ef0 <_close>:

int _close(int file)
{
	return -1;
}
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop

08002ef8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002efc:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002efe:	2000      	movs	r0, #0
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop

08002f04 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002f04:	2001      	movs	r0, #1
 8002f06:	4770      	bx	lr

08002f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002f08:	2000      	movs	r0, #0
 8002f0a:	4770      	bx	lr

08002f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f0c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f0e:	4c0c      	ldr	r4, [pc, #48]	; (8002f40 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <_sbrk+0x38>)
 8002f12:	490d      	ldr	r1, [pc, #52]	; (8002f48 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8002f14:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f16:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8002f18:	b12a      	cbz	r2, 8002f26 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1a:	4410      	add	r0, r2
 8002f1c:	4288      	cmp	r0, r1
 8002f1e:	d807      	bhi.n	8002f30 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002f20:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8002f22:	4610      	mov	r0, r2
 8002f24:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <_sbrk+0x40>)
 8002f28:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002f2a:	4410      	add	r0, r2
 8002f2c:	4288      	cmp	r0, r1
 8002f2e:	d9f7      	bls.n	8002f20 <_sbrk+0x14>
    errno = ENOMEM;
 8002f30:	f004 fc4a 	bl	80077c8 <__errno>
 8002f34:	230c      	movs	r3, #12
    return (void *)-1;
 8002f36:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8002f3a:	6003      	str	r3, [r0, #0]
}
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	bd10      	pop	{r4, pc}
 8002f40:	20002f10 	.word	0x20002f10
 8002f44:	20018000 	.word	0x20018000
 8002f48:	00000400 	.word	0x00000400
 8002f4c:	20002f70 	.word	0x20002f70

08002f50 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f50:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <SystemInit+0x10>)
 8002f52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <XBee_Transmit_File>:
	}
	printf("Already transmitting file\n");
	return -1;
}

void XBee_Transmit_File() {
 8002f64:	b508      	push	{r3, lr}
	printf("Transmitting file\n");
 8002f66:	4807      	ldr	r0, [pc, #28]	; (8002f84 <XBee_Transmit_File+0x20>)
 8002f68:	f005 fa40 	bl	80083ec <puts>
	HAL_UART_Transmit_DMA(XBEE_UART, file_buf, fsize);
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <XBee_Transmit_File+0x24>)
 8002f6e:	4a07      	ldr	r2, [pc, #28]	; (8002f8c <XBee_Transmit_File+0x28>)
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	8812      	ldrh	r2, [r2, #0]
 8002f74:	4806      	ldr	r0, [pc, #24]	; (8002f90 <XBee_Transmit_File+0x2c>)
 8002f76:	f002 fda3 	bl	8005ac0 <HAL_UART_Transmit_DMA>
	transmitting_file = 2;
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <XBee_Transmit_File+0x30>)
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	601a      	str	r2, [r3, #0]
}
 8002f80:	bd08      	pop	{r3, pc}
 8002f82:	bf00      	nop
 8002f84:	0800a420 	.word	0x0800a420
 8002f88:	20002f14 	.word	0x20002f14
 8002f8c:	20002f18 	.word	0x20002f18
 8002f90:	20002e74 	.word	0x20002e74
 8002f94:	20002f1c 	.word	0x20002f1c

08002f98 <HAL_UART_ErrorCallback>:
	__HAL_TIM_SET_AUTORELOAD(FILE_TIMER, 5000);
	XBee_Receive(&XBee_Received);
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
	if (huart == XBEE_UART) {
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <HAL_UART_ErrorCallback+0x10>)
 8002f9a:	4283      	cmp	r3, r0
 8002f9c:	d000      	beq.n	8002fa0 <HAL_UART_ErrorCallback+0x8>
		printf("XBee Error\n");
	}
}
 8002f9e:	4770      	bx	lr
		printf("XBee Error\n");
 8002fa0:	4802      	ldr	r0, [pc, #8]	; (8002fac <HAL_UART_ErrorCallback+0x14>)
 8002fa2:	f005 ba23 	b.w	80083ec <puts>
 8002fa6:	bf00      	nop
 8002fa8:	20002e74 	.word	0x20002e74
 8002fac:	0800a434 	.word	0x0800a434

08002fb0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == XBEE_UART) {
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <HAL_UART_TxCpltCallback+0x4c>)
 8002fb2:	4283      	cmp	r3, r0
 8002fb4:	d000      	beq.n	8002fb8 <HAL_UART_TxCpltCallback+0x8>
 8002fb6:	4770      	bx	lr
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002fb8:	b510      	push	{r4, lr}
		if (transmitting_file == 1) {
 8002fba:	4c11      	ldr	r4, [pc, #68]	; (8003000 <HAL_UART_TxCpltCallback+0x50>)
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d003      	beq.n	8002fca <HAL_UART_TxCpltCallback+0x1a>
			while (HAL_TIM_Base_GetState(FILE_TIMER) != HAL_TIM_STATE_READY);
			FIX_TIMER_TRIGGER(FILE_TIMER);
			HAL_TIM_Base_Start_IT(FILE_TIMER);
		} else if (transmitting_file == 2) {
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d00f      	beq.n	8002fe8 <HAL_UART_TxCpltCallback+0x38>
			printf("Transmitted file\n");
			free(file_buf);
			transmitting_file = 0;
		}
	}
}
 8002fc8:	bd10      	pop	{r4, pc}
 8002fca:	4c0e      	ldr	r4, [pc, #56]	; (8003004 <HAL_UART_TxCpltCallback+0x54>)
			while (HAL_TIM_Base_GetState(FILE_TIMER) != HAL_TIM_STATE_READY);
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f002 fbef 	bl	80057b0 <HAL_TIM_Base_GetState>
 8002fd2:	2801      	cmp	r0, #1
 8002fd4:	d1fa      	bne.n	8002fcc <HAL_UART_TxCpltCallback+0x1c>
			FIX_TIMER_TRIGGER(FILE_TIMER);
 8002fd6:	6823      	ldr	r3, [r4, #0]
			HAL_TIM_Base_Start_IT(FILE_TIMER);
 8002fd8:	480a      	ldr	r0, [pc, #40]	; (8003004 <HAL_UART_TxCpltCallback+0x54>)
			FIX_TIMER_TRIGGER(FILE_TIMER);
 8002fda:	f06f 0201 	mvn.w	r2, #1
}
 8002fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			FIX_TIMER_TRIGGER(FILE_TIMER);
 8002fe2:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(FILE_TIMER);
 8002fe4:	f002 b8b0 	b.w	8005148 <HAL_TIM_Base_Start_IT>
			printf("Transmitted file\n");
 8002fe8:	4807      	ldr	r0, [pc, #28]	; (8003008 <HAL_UART_TxCpltCallback+0x58>)
 8002fea:	f005 f9ff 	bl	80083ec <puts>
			free(file_buf);
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_UART_TxCpltCallback+0x5c>)
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	f004 fc1b 	bl	800782c <free>
			transmitting_file = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6023      	str	r3, [r4, #0]
}
 8002ffa:	bd10      	pop	{r4, pc}
 8002ffc:	20002e74 	.word	0x20002e74
 8003000:	20002f1c 	.word	0x20002f1c
 8003004:	20002d54 	.word	0x20002d54
 8003008:	0800a440 	.word	0x0800a440
 800300c:	20002f14 	.word	0x20002f14

08003010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003014:	480d      	ldr	r0, [pc, #52]	; (800304c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003016:	490e      	ldr	r1, [pc, #56]	; (8003050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800301c:	e002      	b.n	8003024 <LoopCopyDataInit>

0800301e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003022:	3304      	adds	r3, #4

08003024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003028:	d3f9      	bcc.n	800301e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800302c:	4c0b      	ldr	r4, [pc, #44]	; (800305c <LoopFillZerobss+0x26>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003030:	e001      	b.n	8003036 <LoopFillZerobss>

08003032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003034:	3204      	adds	r2, #4

08003036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003038:	d3fb      	bcc.n	8003032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800303a:	f7ff ff89 	bl	8002f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800303e:	f004 fbc9 	bl	80077d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003042:	f7ff f969 	bl	8002318 <main>
  bx  lr    
 8003046:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003048:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800304c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003050:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003054:	0800a8d4 	.word	0x0800a8d4
  ldr r2, =_sbss
 8003058:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800305c:	20002f70 	.word	0x20002f70

08003060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003060:	e7fe      	b.n	8003060 <ADC_IRQHandler>
	...

08003064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003064:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <HAL_InitTick+0x3c>)
 8003068:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <HAL_InitTick+0x40>)
 800306a:	7812      	ldrb	r2, [r2, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
{
 800306e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003074:	fbb0 f0f2 	udiv	r0, r0, r2
 8003078:	fbb3 f0f0 	udiv	r0, r3, r0
 800307c:	f000 fb00 	bl	8003680 <HAL_SYSTICK_Config>
 8003080:	b908      	cbnz	r0, 8003086 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003082:	2d0f      	cmp	r5, #15
 8003084:	d901      	bls.n	800308a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003086:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003088:	bd38      	pop	{r3, r4, r5, pc}
 800308a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800308c:	4602      	mov	r2, r0
 800308e:	4629      	mov	r1, r5
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	f000 faa8 	bl	80035e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_InitTick+0x44>)
 800309a:	4620      	mov	r0, r4
 800309c:	601d      	str	r5, [r3, #0]
}
 800309e:	bd38      	pop	{r3, r4, r5, pc}
 80030a0:	2000000c 	.word	0x2000000c
 80030a4:	20000008 	.word	0x20000008
 80030a8:	20000010 	.word	0x20000010

080030ac <HAL_Init>:
{
 80030ac:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_Init+0x30>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c8:	2003      	movs	r0, #3
 80030ca:	f000 fa7b 	bl	80035c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7ff ffc8 	bl	8003064 <HAL_InitTick>
  HAL_MspInit();
 80030d4:	f7ff fc2e 	bl	8002934 <HAL_MspInit>
}
 80030d8:	2000      	movs	r0, #0
 80030da:	bd08      	pop	{r3, pc}
 80030dc:	40023c00 	.word	0x40023c00

080030e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030e0:	4a03      	ldr	r2, [pc, #12]	; (80030f0 <HAL_IncTick+0x10>)
 80030e2:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <HAL_IncTick+0x14>)
 80030e4:	6811      	ldr	r1, [r2, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	440b      	add	r3, r1
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20002f20 	.word	0x20002f20
 80030f4:	2000000c 	.word	0x2000000c

080030f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80030f8:	4b01      	ldr	r3, [pc, #4]	; (8003100 <HAL_GetTick+0x8>)
 80030fa:	6818      	ldr	r0, [r3, #0]
}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20002f20 	.word	0x20002f20

08003104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003104:	b538      	push	{r3, r4, r5, lr}
 8003106:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff fff6 	bl	80030f8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800310c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800310e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003110:	d002      	beq.n	8003118 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <HAL_Delay+0x20>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003118:	f7ff ffee 	bl	80030f8 <HAL_GetTick>
 800311c:	1b43      	subs	r3, r0, r5
 800311e:	42a3      	cmp	r3, r4
 8003120:	d3fa      	bcc.n	8003118 <HAL_Delay+0x14>
  {
  }
}
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	2000000c 	.word	0x2000000c

08003128 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003128:	2800      	cmp	r0, #0
 800312a:	f000 809f 	beq.w	800326c <HAL_ADC_Init+0x144>
{
 800312e:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003130:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003132:	4604      	mov	r4, r0
 8003134:	b13d      	cbz	r5, 8003146 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003138:	06db      	lsls	r3, r3, #27
 800313a:	d50c      	bpl.n	8003156 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800313c:	2300      	movs	r3, #0
 800313e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003142:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003144:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003146:	f7ff fc13 	bl	8002970 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800314a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800314c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800314e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003152:	06db      	lsls	r3, r3, #27
 8003154:	d4f2      	bmi.n	800313c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003156:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003158:	4a48      	ldr	r2, [pc, #288]	; (800327c <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 800315a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800315e:	f023 0302 	bic.w	r3, r3, #2
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003168:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800316a:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800316c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003170:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003172:	6851      	ldr	r1, [r2, #4]
 8003174:	6860      	ldr	r0, [r4, #4]
 8003176:	4301      	orrs	r1, r0
 8003178:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800317a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800317c:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800317e:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800318c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8003194:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	4302      	orrs	r2, r0
 800319a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800319c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800319e:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031a0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80031a4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031a6:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031aa:	4302      	orrs	r2, r0
 80031ac:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ae:	4a34      	ldr	r2, [pc, #208]	; (8003280 <HAL_ADC_Init+0x158>)
 80031b0:	4291      	cmp	r1, r2
 80031b2:	d052      	beq.n	800325a <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031b4:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031b6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031b8:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80031bc:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	4311      	orrs	r1, r2
 80031c2:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031c4:	6899      	ldr	r1, [r3, #8]
 80031c6:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80031ca:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	432a      	orrs	r2, r5
 80031d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	f022 0202 	bic.w	r2, r2, #2
 80031d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	7e21      	ldrb	r1, [r4, #24]
 80031de:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80031e2:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031e4:	f894 2020 	ldrb.w	r2, [r4, #32]
 80031e8:	2a00      	cmp	r2, #0
 80031ea:	d041      	beq.n	8003270 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031ec:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031f0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80031f4:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031f6:	6858      	ldr	r0, [r3, #4]
 80031f8:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80031fc:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031fe:	1e51      	subs	r1, r2, #1
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003206:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800320a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800320c:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800320e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003216:	3901      	subs	r1, #1
 8003218:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800321e:	6899      	ldr	r1, [r3, #8]
 8003220:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003224:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003226:	6899      	ldr	r1, [r3, #8]
 8003228:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800322c:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003230:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003238:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800323a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800323c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800323e:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003242:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003244:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003248:	f023 0303 	bic.w	r3, r3, #3
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003252:	2300      	movs	r3, #0
 8003254:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003258:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	e7b2      	b.n	80031d2 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 800326c:	2001      	movs	r0, #1
}
 800326e:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	e7c6      	b.n	8003208 <HAL_ADC_Init+0xe0>
 800327a:	bf00      	nop
 800327c:	40012300 	.word	0x40012300
 8003280:	0f000001 	.word	0x0f000001

08003284 <HAL_ADC_Start_DMA>:
{
 8003284:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003286:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800328a:	b082      	sub	sp, #8
 800328c:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 800328e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003290:	f04f 0000 	mov.w	r0, #0
 8003294:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003296:	f000 8087 	beq.w	80033a8 <HAL_ADC_Start_DMA+0x124>
 800329a:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800329c:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 800329e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032a2:	68b3      	ldr	r3, [r6, #8]
 80032a4:	07dc      	lsls	r4, r3, #31
 80032a6:	d414      	bmi.n	80032d2 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 80032a8:	68b3      	ldr	r3, [r6, #8]
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032b0:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <HAL_ADC_Start_DMA+0x12c>)
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_ADC_Start_DMA+0x130>)
 80032b6:	fba3 3000 	umull	r3, r0, r3, r0
 80032ba:	0c80      	lsrs	r0, r0, #18
 80032bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032c0:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80032c2:	9b01      	ldr	r3, [sp, #4]
 80032c4:	b12b      	cbz	r3, 80032d2 <HAL_ADC_Start_DMA+0x4e>
      counter--;
 80032c6:	9c01      	ldr	r4, [sp, #4]
 80032c8:	3c01      	subs	r4, #1
 80032ca:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 80032cc:	9801      	ldr	r0, [sp, #4]
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d1f9      	bne.n	80032c6 <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80032d2:	68b3      	ldr	r3, [r6, #8]
 80032d4:	05d8      	lsls	r0, r3, #23
 80032d6:	d503      	bpl.n	80032e0 <HAL_ADC_Start_DMA+0x5c>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80032d8:	68b3      	ldr	r3, [r6, #8]
 80032da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032de:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032e0:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80032e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032e4:	f010 0001 	ands.w	r0, r0, #1
 80032e8:	d042      	beq.n	8003370 <HAL_ADC_Start_DMA+0xec>
    ADC_STATE_CLR_SET(hadc->State,
 80032ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f6:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032f8:	6873      	ldr	r3, [r6, #4]
 80032fa:	055b      	lsls	r3, r3, #21
 80032fc:	d505      	bpl.n	800330a <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032fe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003300:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003304:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003308:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800330a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800330c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800330e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003312:	bf1c      	itt	ne
 8003314:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8003316:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800331a:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 800331c:	2400      	movs	r4, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800331e:	4613      	mov	r3, r2
 8003320:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003322:	4925      	ldr	r1, [pc, #148]	; (80033b8 <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);   
 8003324:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003328:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800332a:	4924      	ldr	r1, [pc, #144]	; (80033bc <HAL_ADC_Start_DMA+0x138>)
 800332c:	6401      	str	r1, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800332e:	4924      	ldr	r1, [pc, #144]	; (80033c0 <HAL_ADC_Start_DMA+0x13c>)
 8003330:	64c1      	str	r1, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003332:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8003336:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003338:	6871      	ldr	r1, [r6, #4]
 800333a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800333e:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003340:	68b1      	ldr	r1, [r6, #8]
 8003342:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003346:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003348:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 800334c:	f000 fa4a 	bl	80037e4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003350:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_ADC_Start_DMA+0x140>)
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	f012 021f 	ands.w	r2, r2, #31
 8003358:	d113      	bne.n	8003382 <HAL_ADC_Start_DMA+0xfe>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800335a:	6829      	ldr	r1, [r5, #0]
 800335c:	6888      	ldr	r0, [r1, #8]
 800335e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8003362:	d115      	bne.n	8003390 <HAL_ADC_Start_DMA+0x10c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003364:	688b      	ldr	r3, [r1, #8]
 8003366:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800336a:	608b      	str	r3, [r1, #8]
}
 800336c:	b002      	add	sp, #8
 800336e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003370:	f043 0310 	orr.w	r3, r3, #16
 8003374:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003376:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	646b      	str	r3, [r5, #68]	; 0x44
}
 800337e:	b002      	add	sp, #8
 8003380:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003382:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_ADC_Start_DMA+0x144>)
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	4293      	cmp	r3, r2
 8003388:	d005      	beq.n	8003396 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 800338a:	4620      	mov	r0, r4
}
 800338c:	b002      	add	sp, #8
 800338e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003390:	4610      	mov	r0, r2
}
 8003392:	b002      	add	sp, #8
 8003394:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003396:	6898      	ldr	r0, [r3, #8]
 8003398:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800339c:	d1f5      	bne.n	800338a <HAL_ADC_Start_DMA+0x106>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	e7ea      	b.n	800337e <HAL_ADC_Start_DMA+0xfa>
  __HAL_LOCK(hadc);
 80033a8:	2002      	movs	r0, #2
}
 80033aa:	b002      	add	sp, #8
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
 80033ae:	bf00      	nop
 80033b0:	20000008 	.word	0x20000008
 80033b4:	431bde83 	.word	0x431bde83
 80033b8:	080033fd 	.word	0x080033fd
 80033bc:	080033d5 	.word	0x080033d5
 80033c0:	080033e5 	.word	0x080033e5
 80033c4:	40012300 	.word	0x40012300
 80033c8:	40012000 	.word	0x40012000

080033cc <HAL_ADC_ConvCpltCallback>:
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop

080033d0 <HAL_ADC_ConvHalfCpltCallback>:
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop

080033d4 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033d4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80033d8:	f7ff fffa 	bl	80033d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033dc:	bd08      	pop	{r3, pc}
 80033de:	bf00      	nop

080033e0 <HAL_ADC_ErrorCallback>:
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop

080033e4 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80033e6:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80033e8:	2340      	movs	r3, #64	; 0x40
 80033ea:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033ee:	f043 0304 	orr.w	r3, r3, #4
 80033f2:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033f4:	f7ff fff4 	bl	80033e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033f8:	bd08      	pop	{r3, pc}
 80033fa:	bf00      	nop

080033fc <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003400:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8003404:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003408:	d123      	bne.n	8003452 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800340a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800340e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003412:	688a      	ldr	r2, [r1, #8]
 8003414:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8003418:	d117      	bne.n	800344a <ADC_DMAConvCplt+0x4e>
 800341a:	7e1a      	ldrb	r2, [r3, #24]
 800341c:	b9aa      	cbnz	r2, 800344a <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800341e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003420:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8003424:	d002      	beq.n	800342c <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003426:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003428:	0550      	lsls	r0, r2, #21
 800342a:	d40e      	bmi.n	800344a <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800342c:	684a      	ldr	r2, [r1, #4]
 800342e:	f022 0220 	bic.w	r2, r2, #32
 8003432:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800343c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343e:	04d1      	lsls	r1, r2, #19
 8003440:	d403      	bmi.n	800344a <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003444:	f042 0201 	orr.w	r2, r2, #1
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ffbe 	bl	80033cc <HAL_ADC_ConvCpltCallback>
}
 8003450:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003452:	06d2      	lsls	r2, r2, #27
 8003454:	d404      	bmi.n	8003460 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ffbd 	bl	80033e0 <HAL_ADC_ErrorCallback>
}
 8003466:	bd10      	pop	{r4, pc}

08003468 <HAL_ADC_ConfigChannel>:
{
 8003468:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800346a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800346e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003470:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003472:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003474:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003476:	f000 809c 	beq.w	80035b2 <HAL_ADC_ConfigChannel+0x14a>
 800347a:	2301      	movs	r3, #1
 800347c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003480:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003482:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003484:	2c09      	cmp	r4, #9
 8003486:	d82d      	bhi.n	80034e4 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003488:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800348a:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800348c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003490:	f04f 0c07 	mov.w	ip, #7
 8003494:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003498:	ea25 050c 	bic.w	r5, r5, ip
 800349c:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800349e:	691d      	ldr	r5, [r3, #16]
 80034a0:	fa02 f20e 	lsl.w	r2, r2, lr
 80034a4:	432a      	orrs	r2, r5
 80034a6:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 80034a8:	684a      	ldr	r2, [r1, #4]
 80034aa:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034ac:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 80034ae:	d82f      	bhi.n	8003510 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80034b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034b6:	3a05      	subs	r2, #5
 80034b8:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034bc:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034c0:	fa0e f202 	lsl.w	r2, lr, r2
 80034c4:	ea21 0202 	bic.w	r2, r1, r2
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034cc:	ea4c 0202 	orr.w	r2, ip, r2
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034d2:	4a39      	ldr	r2, [pc, #228]	; (80035b8 <HAL_ADC_ConfigChannel+0x150>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d030      	beq.n	800353a <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 80034d8:	2300      	movs	r3, #0
 80034da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80034de:	4618      	mov	r0, r3
}
 80034e0:	b003      	add	sp, #12
 80034e2:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034e4:	fa1f fc84 	uxth.w	ip, r4
 80034e8:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80034ec:	68dd      	ldr	r5, [r3, #12]
 80034ee:	f1a2 0e1e 	sub.w	lr, r2, #30
 80034f2:	2207      	movs	r2, #7
 80034f4:	fa02 f20e 	lsl.w	r2, r2, lr
 80034f8:	ea25 0202 	bic.w	r2, r5, r2
 80034fc:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034fe:	688a      	ldr	r2, [r1, #8]
 8003500:	68dd      	ldr	r5, [r3, #12]
 8003502:	fa02 f20e 	lsl.w	r2, r2, lr
 8003506:	432a      	orrs	r2, r5
 8003508:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800350a:	684a      	ldr	r2, [r1, #4]
 800350c:	2a06      	cmp	r2, #6
 800350e:	d9cf      	bls.n	80034b0 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8003510:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003512:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8003516:	d836      	bhi.n	8003586 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003518:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800351a:	3a23      	subs	r2, #35	; 0x23
 800351c:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800351e:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003522:	fa05 f202 	lsl.w	r2, r5, r2
 8003526:	ea21 0202 	bic.w	r2, r1, r2
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800352c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352e:	ea4c 0202 	orr.w	r2, ip, r2
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003534:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <HAL_ADC_ConfigChannel+0x150>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d1ce      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x70>
 800353a:	2c12      	cmp	r4, #18
 800353c:	d032      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800353e:	f1a4 0310 	sub.w	r3, r4, #16
 8003542:	2b01      	cmp	r3, #1
 8003544:	d8c8      	bhi.n	80034d8 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003546:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <HAL_ADC_ConfigChannel+0x154>)
 8003548:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800354a:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800354c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003550:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003552:	d1c1      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_ADC_ConfigChannel+0x158>)
 8003556:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8003560:	f202 3283 	addw	r2, r2, #899	; 0x383
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	0c9b      	lsrs	r3, r3, #18
 800356a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003572:	9b01      	ldr	r3, [sp, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0af      	beq.n	80034d8 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003578:	9b01      	ldr	r3, [sp, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800357e:	9b01      	ldr	r3, [sp, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f9      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x110>
 8003584:	e7a8      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003586:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003588:	3a41      	subs	r2, #65	; 0x41
 800358a:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800358c:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003590:	fa05 f202 	lsl.w	r2, r5, r2
 8003594:	ea21 0202 	bic.w	r2, r1, r2
 8003598:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800359a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359c:	ea4c 0202 	orr.w	r2, ip, r2
 80035a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80035a2:	e796      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035a4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80035a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035ac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035b0:	e792      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80035b2:	2002      	movs	r0, #2
}
 80035b4:	b003      	add	sp, #12
 80035b6:	bd30      	pop	{r4, r5, pc}
 80035b8:	40012000 	.word	0x40012000
 80035bc:	40012300 	.word	0x40012300
 80035c0:	20000008 	.word	0x20000008

080035c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035c4:	4907      	ldr	r1, [pc, #28]	; (80035e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80035c6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ca:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035d2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80035de:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e8:	4b1c      	ldr	r3, [pc, #112]	; (800365c <HAL_NVIC_SetPriority+0x74>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f2:	f1c3 0e07 	rsb	lr, r3, #7
 80035f6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035fe:	bf28      	it	cs
 8003600:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003604:	f1bc 0f06 	cmp.w	ip, #6
 8003608:	d91b      	bls.n	8003642 <HAL_NVIC_SetPriority+0x5a>
 800360a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800360c:	f04f 3cff 	mov.w	ip, #4294967295
 8003610:	fa0c fc03 	lsl.w	ip, ip, r3
 8003614:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	f04f 3cff 	mov.w	ip, #4294967295
 800361c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003620:	ea21 010c 	bic.w	r1, r1, ip
 8003624:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003626:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800362c:	db0c      	blt.n	8003648 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003632:	0109      	lsls	r1, r1, #4
 8003634:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003638:	b2c9      	uxtb	r1, r1
 800363a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800363e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003642:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003644:	4613      	mov	r3, r2
 8003646:	e7e7      	b.n	8003618 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_NVIC_SetPriority+0x78>)
 800364a:	f000 000f 	and.w	r0, r0, #15
 800364e:	0109      	lsls	r1, r1, #4
 8003650:	4403      	add	r3, r0
 8003652:	b2c9      	uxtb	r1, r1
 8003654:	7619      	strb	r1, [r3, #24]
 8003656:	f85d fb04 	ldr.w	pc, [sp], #4
 800365a:	bf00      	nop
 800365c:	e000ed00 	.word	0xe000ed00
 8003660:	e000ecfc 	.word	0xe000ecfc

08003664 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003664:	2800      	cmp	r0, #0
 8003666:	db08      	blt.n	800367a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003668:	0941      	lsrs	r1, r0, #5
 800366a:	4a04      	ldr	r2, [pc, #16]	; (800367c <HAL_NVIC_EnableIRQ+0x18>)
 800366c:	f000 001f 	and.w	r0, r0, #31
 8003670:	2301      	movs	r3, #1
 8003672:	fa03 f000 	lsl.w	r0, r3, r0
 8003676:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100

08003680 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003680:	3801      	subs	r0, #1
 8003682:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003686:	d210      	bcs.n	80036aa <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003688:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800368a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	4c08      	ldr	r4, [pc, #32]	; (80036b0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003690:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003692:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003696:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800369a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800369e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80036a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036a6:	6119      	str	r1, [r3, #16]
 80036a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80036aa:	2001      	movs	r0, #1
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80036b8:	f7ff fd1e 	bl	80030f8 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036bc:	2c00      	cmp	r4, #0
 80036be:	d052      	beq.n	8003766 <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036c0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80036c2:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80036c4:	2102      	movs	r1, #2
 80036c6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80036ca:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	4605      	mov	r5, r0
 80036d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d8:	e005      	b.n	80036e6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036da:	f7ff fd0d 	bl	80030f8 <HAL_GetTick>
 80036de:	1b43      	subs	r3, r0, r5
 80036e0:	2b05      	cmp	r3, #5
 80036e2:	d839      	bhi.n	8003758 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	07d1      	lsls	r1, r2, #31
 80036ea:	d4f6      	bmi.n	80036da <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ec:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80036f0:	68e1      	ldr	r1, [r4, #12]
 80036f2:	4302      	orrs	r2, r0
 80036f4:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f6:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fa:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fc:	432a      	orrs	r2, r5
 80036fe:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003700:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8003702:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003704:	4302      	orrs	r2, r0
 8003706:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003708:	4933      	ldr	r1, [pc, #204]	; (80037d8 <HAL_DMA_Init+0x124>)
 800370a:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800370c:	6a25      	ldr	r5, [r4, #32]
 800370e:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003710:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003712:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003714:	2904      	cmp	r1, #4
 8003716:	d028      	beq.n	800376a <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003718:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800371a:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800371c:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003720:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003722:	b2d8      	uxtb	r0, r3
 8003724:	4a2d      	ldr	r2, [pc, #180]	; (80037dc <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8003726:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003728:	3810      	subs	r0, #16
 800372a:	fba2 5200 	umull	r5, r2, r2, r0
 800372e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003730:	492b      	ldr	r1, [pc, #172]	; (80037e0 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003736:	5c89      	ldrb	r1, [r1, r2]
 8003738:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800373a:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 800373e:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003740:	bf88      	it	hi
 8003742:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003744:	223f      	movs	r2, #63	; 0x3f
 8003746:	408a      	lsls	r2, r1
 8003748:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374a:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374c:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800374e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003750:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003752:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003756:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003758:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800375a:	2220      	movs	r2, #32
 800375c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800375e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8003762:	4618      	mov	r0, r3
}
 8003764:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003766:	2001      	movs	r0, #1
}
 8003768:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800376a:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 800376e:	4329      	orrs	r1, r5
 8003770:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8003772:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003774:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8003776:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003778:	f021 0107 	bic.w	r1, r1, #7
 800377c:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800377e:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003782:	2d00      	cmp	r5, #0
 8003784:	d0cd      	beq.n	8003722 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003786:	b178      	cbz	r0, 80037a8 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003788:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800378c:	d016      	beq.n	80037bc <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800378e:	2a02      	cmp	r2, #2
 8003790:	d903      	bls.n	800379a <HAL_DMA_Init+0xe6>
 8003792:	2a03      	cmp	r2, #3
 8003794:	d1c5      	bne.n	8003722 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003796:	01ea      	lsls	r2, r5, #7
 8003798:	d5c3      	bpl.n	8003722 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 800379a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800379c:	2240      	movs	r2, #64	; 0x40
 800379e:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80037a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80037a4:	4618      	mov	r0, r3
}
 80037a6:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80037a8:	2a01      	cmp	r2, #1
 80037aa:	d003      	beq.n	80037b4 <HAL_DMA_Init+0x100>
 80037ac:	f032 0202 	bics.w	r2, r2, #2
 80037b0:	d1b7      	bne.n	8003722 <HAL_DMA_Init+0x6e>
 80037b2:	e7f0      	b.n	8003796 <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037b4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80037b8:	d1b3      	bne.n	8003722 <HAL_DMA_Init+0x6e>
 80037ba:	e7ee      	b.n	800379a <HAL_DMA_Init+0xe6>
    switch (tmp)
 80037bc:	2a03      	cmp	r2, #3
 80037be:	d8b0      	bhi.n	8003722 <HAL_DMA_Init+0x6e>
 80037c0:	a001      	add	r0, pc, #4	; (adr r0, 80037c8 <HAL_DMA_Init+0x114>)
 80037c2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	0800379b 	.word	0x0800379b
 80037cc:	08003797 	.word	0x08003797
 80037d0:	0800379b 	.word	0x0800379b
 80037d4:	080037b5 	.word	0x080037b5
 80037d8:	f010803f 	.word	0xf010803f
 80037dc:	aaaaaaab 	.word	0xaaaaaaab
 80037e0:	0800a454 	.word	0x0800a454

080037e4 <HAL_DMA_Start_IT>:
{
 80037e4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80037e6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ea:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80037ec:	2c01      	cmp	r4, #1
 80037ee:	d035      	beq.n	800385c <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 80037f0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80037f4:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80037f8:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 80037fa:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80037fe:	d005      	beq.n	800380c <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8003800:	2300      	movs	r3, #0
 8003802:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8003806:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8003808:	2002      	movs	r0, #2
}
 800380a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800380c:	2602      	movs	r6, #2
 800380e:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003812:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003814:	2600      	movs	r6, #0
 8003816:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003818:	6826      	ldr	r6, [r4, #0]
 800381a:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800381e:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8003820:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003822:	6883      	ldr	r3, [r0, #8]
 8003824:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8003826:	bf0e      	itee	eq
 8003828:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800382a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800382c:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8003830:	bf08      	it	eq
 8003832:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003834:	233f      	movs	r3, #63	; 0x3f
 8003836:	4093      	lsls	r3, r2
 8003838:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800383a:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800383c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800383e:	f043 0316 	orr.w	r3, r3, #22
 8003842:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003844:	b11a      	cbz	r2, 800384e <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	f043 0308 	orr.w	r3, r3, #8
 800384c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003856:	6023      	str	r3, [r4, #0]
}
 8003858:	bc70      	pop	{r4, r5, r6}
 800385a:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800385c:	2002      	movs	r0, #2
}
 800385e:	bc70      	pop	{r4, r5, r6}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop

08003864 <HAL_DMA_IRQHandler>:
{
 8003864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003868:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 800386a:	4a74      	ldr	r2, [pc, #464]	; (8003a3c <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800386e:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003874:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8003876:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003878:	2208      	movs	r2, #8
 800387a:	409a      	lsls	r2, r3
 800387c:	4222      	tst	r2, r4
{
 800387e:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003880:	d004      	beq.n	800388c <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003882:	6801      	ldr	r1, [r0, #0]
 8003884:	680f      	ldr	r7, [r1, #0]
 8003886:	0778      	lsls	r0, r7, #29
 8003888:	f100 808a 	bmi.w	80039a0 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800388c:	2201      	movs	r2, #1
 800388e:	409a      	lsls	r2, r3
 8003890:	4222      	tst	r2, r4
 8003892:	d004      	beq.n	800389e <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003894:	f8d8 1000 	ldr.w	r1, [r8]
 8003898:	6949      	ldr	r1, [r1, #20]
 800389a:	0609      	lsls	r1, r1, #24
 800389c:	d478      	bmi.n	8003990 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800389e:	2204      	movs	r2, #4
 80038a0:	409a      	lsls	r2, r3
 80038a2:	4222      	tst	r2, r4
 80038a4:	d004      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038a6:	f8d8 1000 	ldr.w	r1, [r8]
 80038aa:	6809      	ldr	r1, [r1, #0]
 80038ac:	078f      	lsls	r7, r1, #30
 80038ae:	d467      	bmi.n	8003980 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038b0:	2210      	movs	r2, #16
 80038b2:	409a      	lsls	r2, r3
 80038b4:	4222      	tst	r2, r4
 80038b6:	d004      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038b8:	f8d8 1000 	ldr.w	r1, [r8]
 80038bc:	680f      	ldr	r7, [r1, #0]
 80038be:	0738      	lsls	r0, r7, #28
 80038c0:	d449      	bmi.n	8003956 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038c2:	2220      	movs	r2, #32
 80038c4:	409a      	lsls	r2, r3
 80038c6:	4222      	tst	r2, r4
 80038c8:	d017      	beq.n	80038fa <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ca:	f8d8 1000 	ldr.w	r1, [r8]
 80038ce:	680c      	ldr	r4, [r1, #0]
 80038d0:	06e0      	lsls	r0, r4, #27
 80038d2:	d512      	bpl.n	80038fa <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038d4:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038d6:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80038da:	2a05      	cmp	r2, #5
 80038dc:	d073      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038de:	680b      	ldr	r3, [r1, #0]
 80038e0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038e4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038e6:	f000 8090 	beq.w	8003a0a <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ea:	0319      	lsls	r1, r3, #12
 80038ec:	f140 809b 	bpl.w	8003a26 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80038f0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80038f4:	b10b      	cbz	r3, 80038fa <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80038f6:	4640      	mov	r0, r8
 80038f8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038fa:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80038fe:	b33b      	cbz	r3, 8003950 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003900:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003904:	07da      	lsls	r2, r3, #31
 8003906:	d51b      	bpl.n	8003940 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8003908:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800390c:	494c      	ldr	r1, [pc, #304]	; (8003a40 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800390e:	2305      	movs	r3, #5
 8003910:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003914:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003916:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800391a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800391e:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e002      	b.n	800392a <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	07db      	lsls	r3, r3, #31
 8003928:	d504      	bpl.n	8003934 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800392a:	9b01      	ldr	r3, [sp, #4]
 800392c:	3301      	adds	r3, #1
 800392e:	42ab      	cmp	r3, r5
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	d9f7      	bls.n	8003924 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8003934:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8003936:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003938:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800393c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8003940:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8003944:	b123      	cbz	r3, 8003950 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8003946:	4640      	mov	r0, r8
}
 8003948:	b002      	add	sp, #8
 800394a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800394e:	4718      	bx	r3
}
 8003950:	b002      	add	sp, #8
 8003952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003956:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003958:	680a      	ldr	r2, [r1, #0]
 800395a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800395e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003960:	d12a      	bne.n	80039b8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003962:	05d7      	lsls	r7, r2, #23
 8003964:	d403      	bmi.n	800396e <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003966:	680a      	ldr	r2, [r1, #0]
 8003968:	f022 0208 	bic.w	r2, r2, #8
 800396c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800396e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8003972:	2a00      	cmp	r2, #0
 8003974:	d0a5      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8003976:	4640      	mov	r0, r8
 8003978:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800397a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800397e:	e7a0      	b.n	80038c2 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003980:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003982:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8003986:	f042 0204 	orr.w	r2, r2, #4
 800398a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800398e:	e78f      	b.n	80038b0 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003990:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003992:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8003996:	f042 0202 	orr.w	r2, r2, #2
 800399a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800399e:	e77e      	b.n	800389e <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039a0:	680f      	ldr	r7, [r1, #0]
 80039a2:	f027 0704 	bic.w	r7, r7, #4
 80039a6:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039a8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039aa:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80039b6:	e769      	b.n	800388c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039b8:	0312      	lsls	r2, r2, #12
 80039ba:	d5d8      	bpl.n	800396e <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039bc:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	d1d8      	bne.n	8003976 <HAL_DMA_IRQHandler+0x112>
 80039c4:	e77d      	b.n	80038c2 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039c6:	680a      	ldr	r2, [r1, #0]
 80039c8:	f022 0216 	bic.w	r2, r2, #22
 80039cc:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039ce:	694a      	ldr	r2, [r1, #20]
 80039d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d4:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039d6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80039da:	b352      	cbz	r2, 8003a32 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039dc:	680a      	ldr	r2, [r1, #0]
 80039de:	f022 0208 	bic.w	r2, r2, #8
 80039e2:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e4:	223f      	movs	r2, #63	; 0x3f
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80039ea:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ee:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80039f0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80039f2:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80039f4:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80039f8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80039fc:	2900      	cmp	r1, #0
 80039fe:	d0a7      	beq.n	8003950 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8003a00:	4640      	mov	r0, r8
}
 8003a02:	b002      	add	sp, #8
 8003a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8003a08:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a0a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003a0e:	f47f af6f 	bne.w	80038f0 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a12:	680a      	ldr	r2, [r1, #0]
 8003a14:	f022 0210 	bic.w	r2, r2, #16
 8003a18:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003a20:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8003a24:	e764      	b.n	80038f0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8003a26:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f47f af63 	bne.w	80038f6 <HAL_DMA_IRQHandler+0x92>
 8003a30:	e763      	b.n	80038fa <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a32:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	d1d0      	bne.n	80039dc <HAL_DMA_IRQHandler+0x178>
 8003a3a:	e7d3      	b.n	80039e4 <HAL_DMA_IRQHandler+0x180>
 8003a3c:	20000008 	.word	0x20000008
 8003a40:	1b4e81b5 	.word	0x1b4e81b5

08003a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a48:	2200      	movs	r2, #0
 8003a4a:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4c:	4e70      	ldr	r6, [pc, #448]	; (8003c10 <HAL_GPIO_Init+0x1cc>)
{
 8003a4e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a50:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8003a52:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a56:	4689      	mov	r9, r1
 8003a58:	e004      	b.n	8003a64 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	f102 0202 	add.w	r2, r2, #2
 8003a62:	d078      	beq.n	8003b56 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8003a64:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a68:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8003a6c:	43a1      	bics	r1, r4
 8003a6e:	d1f4      	bne.n	8003a5a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a70:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8003a74:	f00c 0103 	and.w	r1, ip, #3
 8003a78:	1e4d      	subs	r5, r1, #1
 8003a7a:	2d01      	cmp	r5, #1
 8003a7c:	d96e      	bls.n	8003b5c <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a7e:	2903      	cmp	r1, #3
 8003a80:	f040 80ae 	bne.w	8003be0 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a84:	4091      	lsls	r1, r2
 8003a86:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8003a88:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a8a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a8c:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a8e:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003a92:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a94:	d0e1      	beq.n	8003a5a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a96:	4d5f      	ldr	r5, [pc, #380]	; (8003c14 <HAL_GPIO_Init+0x1d0>)
 8003a98:	2100      	movs	r1, #0
 8003a9a:	9103      	str	r1, [sp, #12]
 8003a9c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8003a9e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003aa2:	6469      	str	r1, [r5, #68]	; 0x44
 8003aa4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8003aa6:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003aaa:	9103      	str	r1, [sp, #12]
 8003aac:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003aae:	f023 0103 	bic.w	r1, r3, #3
 8003ab2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003ab6:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aba:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003abe:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ac2:	00bf      	lsls	r7, r7, #2
 8003ac4:	250f      	movs	r5, #15
 8003ac6:	40bd      	lsls	r5, r7
 8003ac8:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003acc:	4d52      	ldr	r5, [pc, #328]	; (8003c18 <HAL_GPIO_Init+0x1d4>)
 8003ace:	42a8      	cmp	r0, r5
 8003ad0:	d017      	beq.n	8003b02 <HAL_GPIO_Init+0xbe>
 8003ad2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ad6:	42a8      	cmp	r0, r5
 8003ad8:	f000 8086 	beq.w	8003be8 <HAL_GPIO_Init+0x1a4>
 8003adc:	4d4f      	ldr	r5, [pc, #316]	; (8003c1c <HAL_GPIO_Init+0x1d8>)
 8003ade:	42a8      	cmp	r0, r5
 8003ae0:	f000 8087 	beq.w	8003bf2 <HAL_GPIO_Init+0x1ae>
 8003ae4:	4d4e      	ldr	r5, [pc, #312]	; (8003c20 <HAL_GPIO_Init+0x1dc>)
 8003ae6:	42a8      	cmp	r0, r5
 8003ae8:	f000 808a 	beq.w	8003c00 <HAL_GPIO_Init+0x1bc>
 8003aec:	4d4d      	ldr	r5, [pc, #308]	; (8003c24 <HAL_GPIO_Init+0x1e0>)
 8003aee:	42a8      	cmp	r0, r5
 8003af0:	bf0c      	ite	eq
 8003af2:	f04f 0e04 	moveq.w	lr, #4
 8003af6:	f04f 0e07 	movne.w	lr, #7
 8003afa:	fa0e f707 	lsl.w	r7, lr, r7
 8003afe:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b02:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8003b06:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b0c:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8003b10:	bf0c      	ite	eq
 8003b12:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8003b14:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8003b18:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8003b1a:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b1c:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8003b20:	bf0c      	ite	eq
 8003b22:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003b24:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8003b28:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8003b2a:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b2c:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003b30:	bf0c      	ite	eq
 8003b32:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003b34:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8003b38:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b3a:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b3c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b40:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8003b44:	bf0c      	ite	eq
 8003b46:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8003b48:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4c:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8003b4e:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b50:	f102 0202 	add.w	r2, r2, #2
 8003b54:	d186      	bne.n	8003a64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b56:	b005      	add	sp, #20
 8003b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b5c:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8003b60:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b62:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b66:	2503      	movs	r5, #3
 8003b68:	fa05 fe02 	lsl.w	lr, r5, r2
 8003b6c:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b70:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8003b74:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003b76:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b78:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b7c:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b80:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8003b84:	409f      	lsls	r7, r3
 8003b86:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003b8a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003b8c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b92:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8003b96:	4097      	lsls	r7, r2
 8003b98:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b9c:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8003b9e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba0:	fa01 f102 	lsl.w	r1, r1, r2
 8003ba4:	f47f af70 	bne.w	8003a88 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8003ba8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003bac:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bb0:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003bb4:	f8de 7020 	ldr.w	r7, [lr, #32]
 8003bb8:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bba:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bbe:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bc2:	fa07 f708 	lsl.w	r7, r7, r8
 8003bc6:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bc8:	270f      	movs	r7, #15
 8003bca:	fa07 f808 	lsl.w	r8, r7, r8
 8003bce:	9f00      	ldr	r7, [sp, #0]
 8003bd0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd4:	9f01      	ldr	r7, [sp, #4]
 8003bd6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8003bda:	f8ce 7020 	str.w	r7, [lr, #32]
 8003bde:	e753      	b.n	8003a88 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003be0:	2503      	movs	r5, #3
 8003be2:	4095      	lsls	r5, r2
 8003be4:	43ed      	mvns	r5, r5
 8003be6:	e7d1      	b.n	8003b8c <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003be8:	fa0a f707 	lsl.w	r7, sl, r7
 8003bec:	ea48 0807 	orr.w	r8, r8, r7
 8003bf0:	e787      	b.n	8003b02 <HAL_GPIO_Init+0xbe>
 8003bf2:	f04f 0e02 	mov.w	lr, #2
 8003bf6:	fa0e f707 	lsl.w	r7, lr, r7
 8003bfa:	ea48 0807 	orr.w	r8, r8, r7
 8003bfe:	e780      	b.n	8003b02 <HAL_GPIO_Init+0xbe>
 8003c00:	f04f 0e03 	mov.w	lr, #3
 8003c04:	fa0e f707 	lsl.w	r7, lr, r7
 8003c08:	ea48 0807 	orr.w	r8, r8, r7
 8003c0c:	e779      	b.n	8003b02 <HAL_GPIO_Init+0xbe>
 8003c0e:	bf00      	nop
 8003c10:	40013c00 	.word	0x40013c00
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40020000 	.word	0x40020000
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	40021000 	.word	0x40021000

08003c28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c28:	b902      	cbnz	r2, 8003c2c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c2a:	0409      	lsls	r1, r1, #16
 8003c2c:	6181      	str	r1, [r0, #24]
  }
}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c30:	4a04      	ldr	r2, [pc, #16]	; (8003c44 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003c32:	6951      	ldr	r1, [r2, #20]
 8003c34:	4201      	tst	r1, r0
 8003c36:	d100      	bne.n	8003c3a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003c38:	4770      	bx	lr
{
 8003c3a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c3c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c3e:	f7fe faf7 	bl	8002230 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c42:	bd08      	pop	{r3, pc}
 8003c44:	40013c00 	.word	0x40013c00

08003c48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4c:	6804      	ldr	r4, [r0, #0]
{
 8003c4e:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c56:	6023      	str	r3, [r4, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c58:	6823      	ldr	r3, [r4, #0]
{
 8003c5a:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003c60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003c64:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c68:	6023      	str	r3, [r4, #0]
{
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	468b      	mov	fp, r1
 8003c6e:	4617      	mov	r7, r2
 8003c70:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003c74:	d139      	bne.n	8003cea <I2C_RequestMemoryRead+0xa2>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c76:	6965      	ldr	r5, [r4, #20]
 8003c78:	07eb      	lsls	r3, r5, #31
 8003c7a:	d5fc      	bpl.n	8003c76 <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c7c:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 8003c80:	6123      	str	r3, [r4, #16]
 8003c82:	fa5f fb8b 	uxtb.w	fp, fp
 8003c86:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003c8a:	d003      	beq.n	8003c94 <I2C_RequestMemoryRead+0x4c>
 8003c8c:	e068      	b.n	8003d60 <I2C_RequestMemoryRead+0x118>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8e:	6961      	ldr	r1, [r4, #20]
 8003c90:	054a      	lsls	r2, r1, #21
 8003c92:	d450      	bmi.n	8003d36 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c94:	6961      	ldr	r1, [r4, #20]
 8003c96:	0789      	lsls	r1, r1, #30
 8003c98:	d5f9      	bpl.n	8003c8e <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	6963      	ldr	r3, [r4, #20]
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	69a3      	ldr	r3, [r4, #24]
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003cac:	f040 80b8 	bne.w	8003e20 <I2C_RequestMemoryRead+0x1d8>
 8003cb0:	6963      	ldr	r3, [r4, #20]
 8003cb2:	0618      	lsls	r0, r3, #24
 8003cb4:	d467      	bmi.n	8003d86 <I2C_RequestMemoryRead+0x13e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb6:	6963      	ldr	r3, [r4, #20]
 8003cb8:	0559      	lsls	r1, r3, #21
 8003cba:	d5f9      	bpl.n	8003cb0 <I2C_RequestMemoryRead+0x68>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbc:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cbe:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc0:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003cc4:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cc8:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ccc:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd0:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd2:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd6:	f043 0304 	orr.w	r3, r3, #4
 8003cda:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cdc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d06c      	beq.n	8003dbc <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 8003ce2:	2001      	movs	r0, #1
}
 8003ce4:	b003      	add	sp, #12
 8003ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cea:	6963      	ldr	r3, [r4, #20]
 8003cec:	07dd      	lsls	r5, r3, #31
 8003cee:	d4c5      	bmi.n	8003c7c <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf0:	f7ff fa02 	bl	80030f8 <HAL_GetTick>
 8003cf4:	eba0 0009 	sub.w	r0, r0, r9
 8003cf8:	4582      	cmp	sl, r0
 8003cfa:	d304      	bcc.n	8003d06 <I2C_RequestMemoryRead+0xbe>
 8003cfc:	f1ba 0f00 	cmp.w	sl, #0
 8003d00:	d001      	beq.n	8003d06 <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d02:	6834      	ldr	r4, [r6, #0]
 8003d04:	e7b4      	b.n	8003c70 <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d06:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d08:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d0a:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d0c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d10:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d14:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d16:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8003d18:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d1c:	f042 0220 	orr.w	r2, r2, #32
 8003d20:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d22:	680b      	ldr	r3, [r1, #0]
 8003d24:	05dc      	lsls	r4, r3, #23
 8003d26:	d502      	bpl.n	8003d2e <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d2c:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 8003d2e:	2003      	movs	r0, #3
}
 8003d30:	b003      	add	sp, #12
 8003d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d3c:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3e:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d40:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d42:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003d46:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d48:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d4a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d52:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003d54:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d58:	f043 0304 	orr.w	r3, r3, #4
 8003d5c:	6433      	str	r3, [r6, #64]	; 0x40
 8003d5e:	e7c0      	b.n	8003ce2 <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d60:	6963      	ldr	r3, [r4, #20]
 8003d62:	079b      	lsls	r3, r3, #30
 8003d64:	d499      	bmi.n	8003c9a <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d66:	6963      	ldr	r3, [r4, #20]
 8003d68:	0558      	lsls	r0, r3, #21
 8003d6a:	d4e4      	bmi.n	8003d36 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6c:	f7ff f9c4 	bl	80030f8 <HAL_GetTick>
 8003d70:	eba0 0009 	sub.w	r0, r0, r9
 8003d74:	4582      	cmp	sl, r0
 8003d76:	f0c0 808b 	bcc.w	8003e90 <I2C_RequestMemoryRead+0x248>
 8003d7a:	f1ba 0f00 	cmp.w	sl, #0
 8003d7e:	f000 8087 	beq.w	8003e90 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d82:	6834      	ldr	r4, [r6, #0]
 8003d84:	e77f      	b.n	8003c86 <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d86:	f1b8 0f01 	cmp.w	r8, #1
 8003d8a:	d10b      	bne.n	8003da4 <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8c:	b2ff      	uxtb	r7, r7
 8003d8e:	6127      	str	r7, [r4, #16]
 8003d90:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003d94:	d16a      	bne.n	8003e6c <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d96:	6963      	ldr	r3, [r4, #20]
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	d416      	bmi.n	8003dca <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d9c:	6963      	ldr	r3, [r4, #20]
 8003d9e:	055f      	lsls	r7, r3, #21
 8003da0:	d5f9      	bpl.n	8003d96 <I2C_RequestMemoryRead+0x14e>
 8003da2:	e78b      	b.n	8003cbc <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003da4:	0a3b      	lsrs	r3, r7, #8
 8003da6:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003da8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003dac:	d17f      	bne.n	8003eae <I2C_RequestMemoryRead+0x266>
 8003dae:	6963      	ldr	r3, [r4, #20]
 8003db0:	061d      	lsls	r5, r3, #24
 8003db2:	d4eb      	bmi.n	8003d8c <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db4:	6963      	ldr	r3, [r4, #20]
 8003db6:	0558      	lsls	r0, r3, #21
 8003db8:	d5f9      	bpl.n	8003dae <I2C_RequestMemoryRead+0x166>
 8003dba:	e77f      	b.n	8003cbc <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	6832      	ldr	r2, [r6, #0]
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 8003dc4:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	e78c      	b.n	8003ce4 <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003dd2:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003dd6:	d113      	bne.n	8003e00 <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd8:	6963      	ldr	r3, [r4, #20]
 8003dda:	07d8      	lsls	r0, r3, #31
 8003ddc:	d5fc      	bpl.n	8003dd8 <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dde:	f04b 0301 	orr.w	r3, fp, #1
 8003de2:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003de4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003de8:	d003      	beq.n	8003df2 <I2C_RequestMemoryRead+0x1aa>
 8003dea:	e02b      	b.n	8003e44 <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dec:	6963      	ldr	r3, [r4, #20]
 8003dee:	055b      	lsls	r3, r3, #21
 8003df0:	d4a1      	bmi.n	8003d36 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003df2:	6963      	ldr	r3, [r4, #20]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	f013 0302 	ands.w	r3, r3, #2
 8003dfa:	d1f7      	bne.n	8003dec <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	e771      	b.n	8003ce4 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e00:	6963      	ldr	r3, [r4, #20]
 8003e02:	07d9      	lsls	r1, r3, #31
 8003e04:	d4eb      	bmi.n	8003dde <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e06:	f7ff f977 	bl	80030f8 <HAL_GetTick>
 8003e0a:	eba0 0009 	sub.w	r0, r0, r9
 8003e0e:	4582      	cmp	sl, r0
 8003e10:	f4ff af79 	bcc.w	8003d06 <I2C_RequestMemoryRead+0xbe>
 8003e14:	f1ba 0f00 	cmp.w	sl, #0
 8003e18:	f43f af75 	beq.w	8003d06 <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e1c:	6834      	ldr	r4, [r6, #0]
 8003e1e:	e7d8      	b.n	8003dd2 <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e20:	6963      	ldr	r3, [r4, #20]
 8003e22:	061a      	lsls	r2, r3, #24
 8003e24:	d4af      	bmi.n	8003d86 <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e26:	6963      	ldr	r3, [r4, #20]
 8003e28:	055d      	lsls	r5, r3, #21
 8003e2a:	f53f af47 	bmi.w	8003cbc <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7ff f963 	bl	80030f8 <HAL_GetTick>
 8003e32:	eba0 0009 	sub.w	r0, r0, r9
 8003e36:	4582      	cmp	sl, r0
 8003e38:	d34c      	bcc.n	8003ed4 <I2C_RequestMemoryRead+0x28c>
 8003e3a:	f1ba 0f00 	cmp.w	sl, #0
 8003e3e:	d049      	beq.n	8003ed4 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e40:	6834      	ldr	r4, [r6, #0]
 8003e42:	e731      	b.n	8003ca8 <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e44:	6963      	ldr	r3, [r4, #20]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	f013 0302 	ands.w	r3, r3, #2
 8003e4c:	d0d6      	beq.n	8003dfc <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e4e:	6963      	ldr	r3, [r4, #20]
 8003e50:	055a      	lsls	r2, r3, #21
 8003e52:	f53f af70 	bmi.w	8003d36 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7ff f94f 	bl	80030f8 <HAL_GetTick>
 8003e5a:	eba0 0009 	sub.w	r0, r0, r9
 8003e5e:	4582      	cmp	sl, r0
 8003e60:	d316      	bcc.n	8003e90 <I2C_RequestMemoryRead+0x248>
 8003e62:	f1ba 0f00 	cmp.w	sl, #0
 8003e66:	d013      	beq.n	8003e90 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e68:	6834      	ldr	r4, [r6, #0]
 8003e6a:	e7bb      	b.n	8003de4 <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e6c:	6963      	ldr	r3, [r4, #20]
 8003e6e:	061d      	lsls	r5, r3, #24
 8003e70:	d4ab      	bmi.n	8003dca <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e72:	6963      	ldr	r3, [r4, #20]
 8003e74:	055a      	lsls	r2, r3, #21
 8003e76:	f53f af21 	bmi.w	8003cbc <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7ff f93d 	bl	80030f8 <HAL_GetTick>
 8003e7e:	eba0 0009 	sub.w	r0, r0, r9
 8003e82:	4582      	cmp	sl, r0
 8003e84:	d326      	bcc.n	8003ed4 <I2C_RequestMemoryRead+0x28c>
 8003e86:	f1ba 0f00 	cmp.w	sl, #0
 8003e8a:	d023      	beq.n	8003ed4 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e8c:	6834      	ldr	r4, [r6, #0]
 8003e8e:	e77f      	b.n	8003d90 <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e90:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e92:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e94:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e96:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9a:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e9e:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003ea0:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea4:	f043 0320 	orr.w	r3, r3, #32
 8003ea8:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8003eaa:	2001      	movs	r0, #1
 8003eac:	e71a      	b.n	8003ce4 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eae:	6963      	ldr	r3, [r4, #20]
 8003eb0:	0619      	lsls	r1, r3, #24
 8003eb2:	f53f af6b 	bmi.w	8003d8c <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eb6:	6963      	ldr	r3, [r4, #20]
 8003eb8:	055b      	lsls	r3, r3, #21
 8003eba:	f53f aeff 	bmi.w	8003cbc <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7ff f91b 	bl	80030f8 <HAL_GetTick>
 8003ec2:	eba0 0009 	sub.w	r0, r0, r9
 8003ec6:	4582      	cmp	sl, r0
 8003ec8:	d304      	bcc.n	8003ed4 <I2C_RequestMemoryRead+0x28c>
 8003eca:	f1ba 0f00 	cmp.w	sl, #0
 8003ece:	d001      	beq.n	8003ed4 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed0:	6834      	ldr	r4, [r6, #0]
 8003ed2:	e769      	b.n	8003da8 <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ed4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ed6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ed8:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eda:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ede:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ee2:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003ee4:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ee8:	f043 0320 	orr.w	r3, r3, #32
 8003eec:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003eee:	e6f5      	b.n	8003cdc <I2C_RequestMemoryRead+0x94>

08003ef0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	f000 80b9 	beq.w	8004068 <HAL_I2C_Init+0x178>
{
 8003ef6:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ef8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003efc:	4604      	mov	r4, r0
 8003efe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 8098 	beq.w	8004038 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8003f08:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f0a:	2224      	movs	r2, #36	; 0x24
 8003f0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f26:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f28:	f000 fd0e 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	494f      	ldr	r1, [pc, #316]	; (800406c <HAL_I2C_Init+0x17c>)
 8003f30:	428b      	cmp	r3, r1
 8003f32:	d84f      	bhi.n	8003fd4 <HAL_I2C_Init+0xe4>
 8003f34:	4a4e      	ldr	r2, [pc, #312]	; (8004070 <HAL_I2C_Init+0x180>)
 8003f36:	4290      	cmp	r0, r2
 8003f38:	d97c      	bls.n	8004034 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8003f3a:	4d4e      	ldr	r5, [pc, #312]	; (8004074 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f3c:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8003f3e:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f42:	1e43      	subs	r3, r0, #1
 8003f44:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	6850      	ldr	r0, [r2, #4]
 8003f4c:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003f50:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8003f54:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003f56:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f58:	f101 0c01 	add.w	ip, r1, #1
 8003f5c:	6a11      	ldr	r1, [r2, #32]
 8003f5e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003f62:	ea41 010c 	orr.w	r1, r1, ip
 8003f66:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f68:	69d1      	ldr	r1, [r2, #28]
 8003f6a:	f640 7efc 	movw	lr, #4092	; 0xffc
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003f74:	ea13 0f0e 	tst.w	r3, lr
 8003f78:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003f7c:	d161      	bne.n	8004042 <HAL_I2C_Init+0x152>
 8003f7e:	2304      	movs	r3, #4
 8003f80:	430b      	orrs	r3, r1
 8003f82:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f84:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003f88:	6811      	ldr	r1, [r2, #0]
 8003f8a:	4303      	orrs	r3, r0
 8003f8c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f94:	6891      	ldr	r1, [r2, #8]
 8003f96:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003f9a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003f9e:	4303      	orrs	r3, r0
 8003fa0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fa8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003fac:	68d1      	ldr	r1, [r2, #12]
 8003fae:	4303      	orrs	r3, r0
 8003fb0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003fb8:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fba:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8003fbc:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8003fc2:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc4:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fca:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fcc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8003fd0:	4618      	mov	r0, r3
}
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fd4:	4a28      	ldr	r2, [pc, #160]	; (8004078 <HAL_I2C_Init+0x188>)
 8003fd6:	4290      	cmp	r0, r2
 8003fd8:	d92c      	bls.n	8004034 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8003fda:	4d26      	ldr	r5, [pc, #152]	; (8004074 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fdc:	4e27      	ldr	r6, [pc, #156]	; (800407c <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003fde:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	6855      	ldr	r5, [r2, #4]
 8003fe6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003fea:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8003fee:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003ff0:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ff4:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8003ff8:	fb05 f101 	mul.w	r1, r5, r1
 8003ffc:	fba6 5101 	umull	r5, r1, r6, r1
 8004000:	6a15      	ldr	r5, [r2, #32]
 8004002:	0989      	lsrs	r1, r1, #6
 8004004:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004008:	3101      	adds	r1, #1
 800400a:	4329      	orrs	r1, r5
 800400c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800400e:	69d1      	ldr	r1, [r2, #28]
 8004010:	68a5      	ldr	r5, [r4, #8]
 8004012:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004016:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800401a:	b9ad      	cbnz	r5, 8004048 <HAL_I2C_Init+0x158>
 800401c:	3801      	subs	r0, #1
 800401e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004022:	fbb0 f3f3 	udiv	r3, r0, r3
 8004026:	3301      	adds	r3, #1
 8004028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402c:	b1d3      	cbz	r3, 8004064 <HAL_I2C_Init+0x174>
 800402e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004032:	e7a5      	b.n	8003f80 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004034:	2001      	movs	r0, #1
}
 8004036:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004038:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800403c:	f7fe fcec 	bl	8002a18 <HAL_I2C_MspInit>
 8004040:	e762      	b.n	8003f08 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004046:	e79b      	b.n	8003f80 <HAL_I2C_Init+0x90>
 8004048:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800404c:	3801      	subs	r0, #1
 800404e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004052:	fbb0 f3f3 	udiv	r3, r0, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405c:	b113      	cbz	r3, 8004064 <HAL_I2C_Init+0x174>
 800405e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004062:	e78d      	b.n	8003f80 <HAL_I2C_Init+0x90>
 8004064:	2301      	movs	r3, #1
 8004066:	e78b      	b.n	8003f80 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004068:	2001      	movs	r0, #1
}
 800406a:	4770      	bx	lr
 800406c:	000186a0 	.word	0x000186a0
 8004070:	001e847f 	.word	0x001e847f
 8004074:	431bde83 	.word	0x431bde83
 8004078:	003d08ff 	.word	0x003d08ff
 800407c:	10624dd3 	.word	0x10624dd3

08004080 <HAL_I2C_Mem_Read>:
{
 8004080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004084:	4604      	mov	r4, r0
 8004086:	b087      	sub	sp, #28
 8004088:	4699      	mov	r9, r3
 800408a:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 800408e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004090:	460f      	mov	r7, r1
 8004092:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004094:	f7ff f830 	bl	80030f8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004098:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800409c:	2b20      	cmp	r3, #32
 800409e:	d004      	beq.n	80040aa <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 80040a0:	2702      	movs	r7, #2
}
 80040a2:	4638      	mov	r0, r7
 80040a4:	b007      	add	sp, #28
 80040a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040aa:	4606      	mov	r6, r0
 80040ac:	e005      	b.n	80040ba <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7ff f823 	bl	80030f8 <HAL_GetTick>
 80040b2:	1b80      	subs	r0, r0, r6
 80040b4:	2819      	cmp	r0, #25
 80040b6:	f200 80d2 	bhi.w	800425e <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ba:	f8d4 c000 	ldr.w	ip, [r4]
 80040be:	f8dc 0018 	ldr.w	r0, [ip, #24]
 80040c2:	43c0      	mvns	r0, r0
 80040c4:	f010 0b02 	ands.w	fp, r0, #2
 80040c8:	d0f1      	beq.n	80040ae <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 80040ca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d0e6      	beq.n	80040a0 <HAL_I2C_Mem_Read+0x20>
 80040d2:	2301      	movs	r3, #1
 80040d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040d8:	f8dc 3000 	ldr.w	r3, [ip]
 80040dc:	07d9      	lsls	r1, r3, #31
 80040de:	d537      	bpl.n	8004150 <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e0:	f8dc 0000 	ldr.w	r0, [ip]
 80040e4:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80040e8:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 80040ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 80040ee:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040f0:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040f2:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040f6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040fa:	2040      	movs	r0, #64	; 0x40
 80040fc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004100:	2000      	movs	r0, #0
 8004102:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004104:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004108:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800410a:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800410c:	4893      	ldr	r0, [pc, #588]	; (800435c <HAL_I2C_Mem_Read+0x2dc>)
 800410e:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004110:	4639      	mov	r1, r7
 8004112:	464b      	mov	r3, r9
 8004114:	4642      	mov	r2, r8
 8004116:	4620      	mov	r0, r4
 8004118:	f7ff fd96 	bl	8003c48 <I2C_RequestMemoryRead>
 800411c:	4607      	mov	r7, r0
 800411e:	2800      	cmp	r0, #0
 8004120:	f040 80ab 	bne.w	800427a <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 8004124:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004126:	b9d2      	cbnz	r2, 800415e <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	9002      	str	r0, [sp, #8]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	9202      	str	r2, [sp, #8]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	9202      	str	r2, [sp, #8]
 8004134:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413c:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004140:	2220      	movs	r2, #32
 8004142:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004146:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800414a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800414e:	e7a8      	b.n	80040a2 <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 8004150:	f8dc 3000 	ldr.w	r3, [ip]
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	f8cc 3000 	str.w	r3, [ip]
 800415c:	e7c0      	b.n	80040e0 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 800415e:	2a01      	cmp	r2, #1
 8004160:	f000 812c 	beq.w	80043bc <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 8004164:	2a02      	cmp	r2, #2
 8004166:	f000 80bd 	beq.w	80042e4 <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	9005      	str	r0, [sp, #20]
 800416e:	6959      	ldr	r1, [r3, #20]
 8004170:	9105      	str	r1, [sp, #20]
 8004172:	6999      	ldr	r1, [r3, #24]
 8004174:	9105      	str	r1, [sp, #20]
 8004176:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8004178:	2a03      	cmp	r2, #3
 800417a:	d849      	bhi.n	8004210 <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 800417c:	2a01      	cmp	r2, #1
 800417e:	f000 80eb 	beq.w	8004358 <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 8004182:	2a02      	cmp	r2, #2
 8004184:	f000 8089 	beq.w	800429a <HAL_I2C_Mem_Read+0x21a>
 8004188:	1c69      	adds	r1, r5, #1
 800418a:	f040 80bb 	bne.w	8004304 <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	0752      	lsls	r2, r2, #29
 8004192:	d5fc      	bpl.n	800418e <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004194:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004196:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80041a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80041a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041a8:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80041aa:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80041ac:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80041ae:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80041b0:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041b2:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041b4:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80041b6:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b8:	6822      	ldr	r2, [r4, #0]
 80041ba:	f040 80af 	bne.w	800431c <HAL_I2C_Mem_Read+0x29c>
 80041be:	6953      	ldr	r3, [r2, #20]
 80041c0:	075b      	lsls	r3, r3, #29
 80041c2:	d5fc      	bpl.n	80041be <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c4:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041cc:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	6913      	ldr	r3, [r2, #16]
 80041d0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80041d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80041d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80041d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29b      	uxth	r3, r3
 80041de:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e0:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 80041e2:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 80041e4:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 80041e8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80041ea:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ee:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 80041f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80041f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041f6:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80041f8:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80041fa:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80041fc:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80041fe:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004200:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004202:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004204:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004206:	2a00      	cmp	r2, #0
 8004208:	d099      	beq.n	800413e <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 800420a:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800420c:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 800420e:	d9b5      	bls.n	800417c <HAL_I2C_Mem_Read+0xfc>
 8004210:	b95d      	cbnz	r5, 800422a <HAL_I2C_Mem_Read+0x1aa>
 8004212:	e0c5      	b.n	80043a0 <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	06d0      	lsls	r0, r2, #27
 8004218:	f100 80b2 	bmi.w	8004380 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421c:	f7fe ff6c 	bl	80030f8 <HAL_GetTick>
 8004220:	1b80      	subs	r0, r0, r6
 8004222:	4285      	cmp	r5, r0
 8004224:	f0c0 8086 	bcc.w	8004334 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	0652      	lsls	r2, r2, #25
 800422e:	d5f1      	bpl.n	8004214 <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8004236:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004238:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 800423a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800423c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800423e:	3b01      	subs	r3, #1
 8004240:	b29b      	uxth	r3, r3
 8004242:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004244:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8004246:	3a01      	subs	r2, #1
 8004248:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800424a:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800424e:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8004250:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004252:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004256:	d5d6      	bpl.n	8004206 <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004258:	6903      	ldr	r3, [r0, #16]
 800425a:	704b      	strb	r3, [r1, #1]
 800425c:	e036      	b.n	80042cc <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 800425e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004260:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004264:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004268:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800426c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800426e:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004272:	f043 0320 	orr.w	r3, r3, #32
 8004276:	6423      	str	r3, [r4, #64]	; 0x40
 8004278:	e712      	b.n	80040a0 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 800427a:	2701      	movs	r7, #1
}
 800427c:	4638      	mov	r0, r7
 800427e:	b007      	add	sp, #28
 8004280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	0750      	lsls	r0, r2, #29
 8004288:	d40c      	bmi.n	80042a4 <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fe ff35 	bl	80030f8 <HAL_GetTick>
 800428e:	1b80      	subs	r0, r0, r6
 8004290:	4285      	cmp	r5, r0
 8004292:	d34f      	bcc.n	8004334 <HAL_I2C_Mem_Read+0x2b4>
 8004294:	2d00      	cmp	r5, #0
 8004296:	d04d      	beq.n	8004334 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	1c69      	adds	r1, r5, #1
 800429c:	d1f2      	bne.n	8004284 <HAL_I2C_Mem_Read+0x204>
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	0752      	lsls	r2, r2, #29
 80042a2:	d5fc      	bpl.n	800429e <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042aa:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b0:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80042b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80042b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80042bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c2:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 80042c4:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c6:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 80042c8:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ca:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80042cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80042ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80042d0:	3301      	adds	r3, #1
 80042d2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80042d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80042d6:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80042d8:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80042da:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80042dc:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 80042de:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80042e0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80042e2:	e790      	b.n	8004206 <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	6819      	ldr	r1, [r3, #0]
 80042e8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80042ec:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80042f4:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f6:	9004      	str	r0, [sp, #16]
 80042f8:	6959      	ldr	r1, [r3, #20]
 80042fa:	9104      	str	r1, [sp, #16]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	9104      	str	r1, [sp, #16]
 8004300:	9904      	ldr	r1, [sp, #16]
 8004302:	e739      	b.n	8004178 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	0750      	lsls	r0, r2, #29
 8004308:	f53f af44 	bmi.w	8004194 <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430c:	f7fe fef4 	bl	80030f8 <HAL_GetTick>
 8004310:	1b80      	subs	r0, r0, r6
 8004312:	4285      	cmp	r5, r0
 8004314:	d30e      	bcc.n	8004334 <HAL_I2C_Mem_Read+0x2b4>
 8004316:	b16d      	cbz	r5, 8004334 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	e735      	b.n	8004188 <HAL_I2C_Mem_Read+0x108>
 800431c:	6953      	ldr	r3, [r2, #20]
 800431e:	0758      	lsls	r0, r3, #29
 8004320:	f53f af50 	bmi.w	80041c4 <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004324:	f7fe fee8 	bl	80030f8 <HAL_GetTick>
 8004328:	1b80      	subs	r0, r0, r6
 800432a:	4285      	cmp	r5, r0
 800432c:	d302      	bcc.n	8004334 <HAL_I2C_Mem_Read+0x2b4>
 800432e:	2d00      	cmp	r5, #0
 8004330:	f47f af41 	bne.w	80041b6 <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004334:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004336:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004338:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800433a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800433e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004342:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004344:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8004348:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	f043 0320 	orr.w	r3, r3, #32
}
 800434e:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004350:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004352:	b007      	add	sp, #28
 8004354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004358:	b95d      	cbnz	r5, 8004372 <HAL_I2C_Mem_Read+0x2f2>
 800435a:	e02b      	b.n	80043b4 <HAL_I2C_Mem_Read+0x334>
 800435c:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	06d2      	lsls	r2, r2, #27
 8004364:	d40c      	bmi.n	8004380 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fe fec7 	bl	80030f8 <HAL_GetTick>
 800436a:	1b80      	subs	r0, r0, r6
 800436c:	4285      	cmp	r5, r0
 800436e:	d3e1      	bcc.n	8004334 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	0651      	lsls	r1, r2, #25
 8004376:	d5f3      	bpl.n	8004360 <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800437c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800437e:	e7a5      	b.n	80042cc <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004380:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004382:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004386:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004388:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800438a:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800438c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004390:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004394:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004396:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004398:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800439c:	2701      	movs	r7, #1
 800439e:	e680      	b.n	80040a2 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	0652      	lsls	r2, r2, #25
 80043a4:	f53f af44 	bmi.w	8004230 <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	06d1      	lsls	r1, r2, #27
 80043ac:	d4e8      	bmi.n	8004380 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fe fea3 	bl	80030f8 <HAL_GetTick>
 80043b2:	e7bf      	b.n	8004334 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	0650      	lsls	r0, r2, #25
 80043b8:	d5f6      	bpl.n	80043a8 <HAL_I2C_Mem_Read+0x328>
 80043ba:	e7dd      	b.n	8004378 <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80043c4:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c6:	9003      	str	r0, [sp, #12]
 80043c8:	6959      	ldr	r1, [r3, #20]
 80043ca:	9103      	str	r1, [sp, #12]
 80043cc:	6999      	ldr	r1, [r3, #24]
 80043ce:	9103      	str	r1, [sp, #12]
 80043d0:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80043d8:	6019      	str	r1, [r3, #0]
 80043da:	e6cd      	b.n	8004178 <HAL_I2C_Mem_Read+0xf8>

080043dc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043dc:	2800      	cmp	r0, #0
 80043de:	f000 81a2 	beq.w	8004726 <HAL_RCC_OscConfig+0x34a>
{
 80043e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e6:	6803      	ldr	r3, [r0, #0]
 80043e8:	07dd      	lsls	r5, r3, #31
{
 80043ea:	b082      	sub	sp, #8
 80043ec:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ee:	d52f      	bpl.n	8004450 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043f0:	499e      	ldr	r1, [pc, #632]	; (800466c <HAL_RCC_OscConfig+0x290>)
 80043f2:	688a      	ldr	r2, [r1, #8]
 80043f4:	f002 020c 	and.w	r2, r2, #12
 80043f8:	2a04      	cmp	r2, #4
 80043fa:	f000 80ed 	beq.w	80045d8 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043fe:	688a      	ldr	r2, [r1, #8]
 8004400:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004404:	2a08      	cmp	r2, #8
 8004406:	f000 80e3 	beq.w	80045d0 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800440a:	6863      	ldr	r3, [r4, #4]
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004410:	f000 80ec 	beq.w	80045ec <HAL_RCC_OscConfig+0x210>
 8004414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004418:	f000 8175 	beq.w	8004706 <HAL_RCC_OscConfig+0x32a>
 800441c:	4d93      	ldr	r5, [pc, #588]	; (800466c <HAL_RCC_OscConfig+0x290>)
 800441e:	682a      	ldr	r2, [r5, #0]
 8004420:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004424:	602a      	str	r2, [r5, #0]
 8004426:	682a      	ldr	r2, [r5, #0]
 8004428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800442c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 80e1 	bne.w	80045f6 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fe fe60 	bl	80030f8 <HAL_GetTick>
 8004438:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443a:	e005      	b.n	8004448 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800443c:	f7fe fe5c 	bl	80030f8 <HAL_GetTick>
 8004440:	1b80      	subs	r0, r0, r6
 8004442:	2864      	cmp	r0, #100	; 0x64
 8004444:	f200 8101 	bhi.w	800464a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	039b      	lsls	r3, r3, #14
 800444c:	d4f6      	bmi.n	800443c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	079f      	lsls	r7, r3, #30
 8004452:	d528      	bpl.n	80044a6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004454:	4a85      	ldr	r2, [pc, #532]	; (800466c <HAL_RCC_OscConfig+0x290>)
 8004456:	6891      	ldr	r1, [r2, #8]
 8004458:	f011 0f0c 	tst.w	r1, #12
 800445c:	f000 8090 	beq.w	8004580 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004460:	6891      	ldr	r1, [r2, #8]
 8004462:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004466:	2908      	cmp	r1, #8
 8004468:	f000 8086 	beq.w	8004578 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800446c:	68e3      	ldr	r3, [r4, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 810e 	beq.w	8004690 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004474:	4b7e      	ldr	r3, [pc, #504]	; (8004670 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004476:	4e7d      	ldr	r6, [pc, #500]	; (800466c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800447c:	f7fe fe3c 	bl	80030f8 <HAL_GetTick>
 8004480:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004482:	e005      	b.n	8004490 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004484:	f7fe fe38 	bl	80030f8 <HAL_GetTick>
 8004488:	1b40      	subs	r0, r0, r5
 800448a:	2802      	cmp	r0, #2
 800448c:	f200 80dd 	bhi.w	800464a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	6833      	ldr	r3, [r6, #0]
 8004492:	0798      	lsls	r0, r3, #30
 8004494:	d5f6      	bpl.n	8004484 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004496:	6833      	ldr	r3, [r6, #0]
 8004498:	6922      	ldr	r2, [r4, #16]
 800449a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800449e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80044a2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	071a      	lsls	r2, r3, #28
 80044a8:	d451      	bmi.n	800454e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044aa:	0758      	lsls	r0, r3, #29
 80044ac:	d52f      	bpl.n	800450e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ae:	4a6f      	ldr	r2, [pc, #444]	; (800466c <HAL_RCC_OscConfig+0x290>)
 80044b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80044b2:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80044b6:	d07f      	beq.n	80045b8 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 80044b8:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	4e6e      	ldr	r6, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80044bc:	6833      	ldr	r3, [r6, #0]
 80044be:	05d9      	lsls	r1, r3, #23
 80044c0:	f140 80b3 	bpl.w	800462a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	f000 80c3 	beq.w	8004652 <HAL_RCC_OscConfig+0x276>
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	f000 812c 	beq.w	800472a <HAL_RCC_OscConfig+0x34e>
 80044d2:	4e66      	ldr	r6, [pc, #408]	; (800466c <HAL_RCC_OscConfig+0x290>)
 80044d4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80044d6:	f022 0201 	bic.w	r2, r2, #1
 80044da:	6732      	str	r2, [r6, #112]	; 0x70
 80044dc:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80044de:	f022 0204 	bic.w	r2, r2, #4
 80044e2:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 80b9 	bne.w	800465c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ea:	f7fe fe05 	bl	80030f8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ee:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80044f2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f4:	e005      	b.n	8004502 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7fe fdff 	bl	80030f8 <HAL_GetTick>
 80044fa:	1bc0      	subs	r0, r0, r7
 80044fc:	4540      	cmp	r0, r8
 80044fe:	f200 80a4 	bhi.w	800464a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004502:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004504:	0798      	lsls	r0, r3, #30
 8004506:	d4f6      	bmi.n	80044f6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004508:	2d00      	cmp	r5, #0
 800450a:	f040 8106 	bne.w	800471a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800450e:	69a0      	ldr	r0, [r4, #24]
 8004510:	b1c8      	cbz	r0, 8004546 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004512:	4d56      	ldr	r5, [pc, #344]	; (800466c <HAL_RCC_OscConfig+0x290>)
 8004514:	68ab      	ldr	r3, [r5, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b08      	cmp	r3, #8
 800451c:	f000 80c9 	beq.w	80046b2 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004520:	4b53      	ldr	r3, [pc, #332]	; (8004670 <HAL_RCC_OscConfig+0x294>)
 8004522:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004524:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004526:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004528:	f000 8109 	beq.w	800473e <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fe fde4 	bl	80030f8 <HAL_GetTick>
 8004530:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e005      	b.n	8004540 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe fde0 	bl	80030f8 <HAL_GetTick>
 8004538:	1b00      	subs	r0, r0, r4
 800453a:	2802      	cmp	r0, #2
 800453c:	f200 8085 	bhi.w	800464a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	019b      	lsls	r3, r3, #6
 8004544:	d4f6      	bmi.n	8004534 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2000      	movs	r0, #0
}
 8004548:	b002      	add	sp, #8
 800454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800454e:	6963      	ldr	r3, [r4, #20]
 8004550:	b30b      	cbz	r3, 8004596 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8004552:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004554:	4e45      	ldr	r6, [pc, #276]	; (800466c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8004556:	2201      	movs	r2, #1
 8004558:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800455c:	f7fe fdcc 	bl	80030f8 <HAL_GetTick>
 8004560:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	e004      	b.n	800456e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004564:	f7fe fdc8 	bl	80030f8 <HAL_GetTick>
 8004568:	1b40      	subs	r0, r0, r5
 800456a:	2802      	cmp	r0, #2
 800456c:	d86d      	bhi.n	800464a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004570:	079b      	lsls	r3, r3, #30
 8004572:	d5f7      	bpl.n	8004564 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	e798      	b.n	80044aa <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004578:	6852      	ldr	r2, [r2, #4]
 800457a:	0256      	lsls	r6, r2, #9
 800457c:	f53f af76 	bmi.w	800446c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004580:	4a3a      	ldr	r2, [pc, #232]	; (800466c <HAL_RCC_OscConfig+0x290>)
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	0795      	lsls	r5, r2, #30
 8004586:	d544      	bpl.n	8004612 <HAL_RCC_OscConfig+0x236>
 8004588:	68e2      	ldr	r2, [r4, #12]
 800458a:	2a01      	cmp	r2, #1
 800458c:	d041      	beq.n	8004612 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 800458e:	2001      	movs	r0, #1
}
 8004590:	b002      	add	sp, #8
 8004592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004596:	4a36      	ldr	r2, [pc, #216]	; (8004670 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	4e34      	ldr	r6, [pc, #208]	; (800466c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 800459a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800459e:	f7fe fdab 	bl	80030f8 <HAL_GetTick>
 80045a2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a4:	e004      	b.n	80045b0 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a6:	f7fe fda7 	bl	80030f8 <HAL_GetTick>
 80045aa:	1b40      	subs	r0, r0, r5
 80045ac:	2802      	cmp	r0, #2
 80045ae:	d84c      	bhi.n	800464a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80045b2:	079f      	lsls	r7, r3, #30
 80045b4:	d4f7      	bmi.n	80045a6 <HAL_RCC_OscConfig+0x1ca>
 80045b6:	e7dd      	b.n	8004574 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
 80045c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80045c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80045cc:	2501      	movs	r5, #1
 80045ce:	e774      	b.n	80044ba <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045d0:	684a      	ldr	r2, [r1, #4]
 80045d2:	0250      	lsls	r0, r2, #9
 80045d4:	f57f af19 	bpl.w	800440a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d8:	4a24      	ldr	r2, [pc, #144]	; (800466c <HAL_RCC_OscConfig+0x290>)
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	0391      	lsls	r1, r2, #14
 80045de:	f57f af37 	bpl.w	8004450 <HAL_RCC_OscConfig+0x74>
 80045e2:	6862      	ldr	r2, [r4, #4]
 80045e4:	2a00      	cmp	r2, #0
 80045e6:	f47f af33 	bne.w	8004450 <HAL_RCC_OscConfig+0x74>
 80045ea:	e7d0      	b.n	800458e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ec:	4a1f      	ldr	r2, [pc, #124]	; (800466c <HAL_RCC_OscConfig+0x290>)
 80045ee:	6813      	ldr	r3, [r2, #0]
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80045f6:	f7fe fd7f 	bl	80030f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4e1c      	ldr	r6, [pc, #112]	; (800466c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80045fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	e004      	b.n	800460a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004600:	f7fe fd7a 	bl	80030f8 <HAL_GetTick>
 8004604:	1b40      	subs	r0, r0, r5
 8004606:	2864      	cmp	r0, #100	; 0x64
 8004608:	d81f      	bhi.n	800464a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	6833      	ldr	r3, [r6, #0]
 800460c:	039a      	lsls	r2, r3, #14
 800460e:	d5f7      	bpl.n	8004600 <HAL_RCC_OscConfig+0x224>
 8004610:	e71d      	b.n	800444e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4916      	ldr	r1, [pc, #88]	; (800466c <HAL_RCC_OscConfig+0x290>)
 8004614:	6920      	ldr	r0, [r4, #16]
 8004616:	680a      	ldr	r2, [r1, #0]
 8004618:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800461c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004620:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004622:	071a      	lsls	r2, r3, #28
 8004624:	f57f af41 	bpl.w	80044aa <HAL_RCC_OscConfig+0xce>
 8004628:	e791      	b.n	800454e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462a:	6833      	ldr	r3, [r6, #0]
 800462c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004630:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004632:	f7fe fd61 	bl	80030f8 <HAL_GetTick>
 8004636:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004638:	6833      	ldr	r3, [r6, #0]
 800463a:	05da      	lsls	r2, r3, #23
 800463c:	f53f af42 	bmi.w	80044c4 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004640:	f7fe fd5a 	bl	80030f8 <HAL_GetTick>
 8004644:	1bc0      	subs	r0, r0, r7
 8004646:	2802      	cmp	r0, #2
 8004648:	d9f6      	bls.n	8004638 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800464a:	2003      	movs	r0, #3
}
 800464c:	b002      	add	sp, #8
 800464e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004652:	4a06      	ldr	r2, [pc, #24]	; (800466c <HAL_RCC_OscConfig+0x290>)
 8004654:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800465c:	f7fe fd4c 	bl	80030f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	4f02      	ldr	r7, [pc, #8]	; (800466c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8004662:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004668:	e00b      	b.n	8004682 <HAL_RCC_OscConfig+0x2a6>
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	42470000 	.word	0x42470000
 8004674:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fe fd3e 	bl	80030f8 <HAL_GetTick>
 800467c:	1b80      	subs	r0, r0, r6
 800467e:	4540      	cmp	r0, r8
 8004680:	d8e3      	bhi.n	800464a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004684:	079b      	lsls	r3, r3, #30
 8004686:	d5f7      	bpl.n	8004678 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8004688:	2d00      	cmp	r5, #0
 800468a:	f43f af40 	beq.w	800450e <HAL_RCC_OscConfig+0x132>
 800468e:	e044      	b.n	800471a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8004690:	4a42      	ldr	r2, [pc, #264]	; (800479c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	4e43      	ldr	r6, [pc, #268]	; (80047a0 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8004694:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004696:	f7fe fd2f 	bl	80030f8 <HAL_GetTick>
 800469a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469c:	e004      	b.n	80046a8 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800469e:	f7fe fd2b 	bl	80030f8 <HAL_GetTick>
 80046a2:	1b40      	subs	r0, r0, r5
 80046a4:	2802      	cmp	r0, #2
 80046a6:	d8d0      	bhi.n	800464a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a8:	6833      	ldr	r3, [r6, #0]
 80046aa:	0799      	lsls	r1, r3, #30
 80046ac:	d4f7      	bmi.n	800469e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	e6f9      	b.n	80044a6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b2:	2801      	cmp	r0, #1
 80046b4:	f43f af48 	beq.w	8004548 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 80046b8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ba:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046bc:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c0:	4291      	cmp	r1, r2
 80046c2:	f47f af64 	bne.w	800458e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c8:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046cc:	4291      	cmp	r1, r2
 80046ce:	f47f af5e 	bne.w	800458e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80046d4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80046d8:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046da:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80046de:	f47f af56 	bne.w	800458e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80046e4:	0852      	lsrs	r2, r2, #1
 80046e6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80046ea:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ec:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80046f0:	f47f af4d 	bne.w	800458e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80046f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046fa:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 80046fe:	bf14      	ite	ne
 8004700:	2001      	movne	r0, #1
 8004702:	2000      	moveq	r0, #0
 8004704:	e720      	b.n	8004548 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004706:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <HAL_RCC_OscConfig+0x3c4>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004716:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004718:	e76d      	b.n	80045f6 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800471a:	4a21      	ldr	r2, [pc, #132]	; (80047a0 <HAL_RCC_OscConfig+0x3c4>)
 800471c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800471e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004722:	6413      	str	r3, [r2, #64]	; 0x40
 8004724:	e6f3      	b.n	800450e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8004726:	2001      	movs	r0, #1
}
 8004728:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800472a:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <HAL_RCC_OscConfig+0x3c4>)
 800472c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800472e:	f042 0204 	orr.w	r2, r2, #4
 8004732:	671a      	str	r2, [r3, #112]	; 0x70
 8004734:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800473c:	e78e      	b.n	800465c <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 800473e:	f7fe fcdb 	bl	80030f8 <HAL_GetTick>
 8004742:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004744:	e005      	b.n	8004752 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004746:	f7fe fcd7 	bl	80030f8 <HAL_GetTick>
 800474a:	1b80      	subs	r0, r0, r6
 800474c:	2802      	cmp	r0, #2
 800474e:	f63f af7c 	bhi.w	800464a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	682b      	ldr	r3, [r5, #0]
 8004754:	0199      	lsls	r1, r3, #6
 8004756:	d4f6      	bmi.n	8004746 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004758:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800475c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800475e:	430b      	orrs	r3, r1
 8004760:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004764:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8004768:	0852      	lsrs	r2, r2, #1
 800476a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800476e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004770:	490a      	ldr	r1, [pc, #40]	; (800479c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004772:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004776:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004778:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800477a:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800477c:	f7fe fcbc 	bl	80030f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004780:	4d07      	ldr	r5, [pc, #28]	; (80047a0 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8004782:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004784:	e005      	b.n	8004792 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fe fcb7 	bl	80030f8 <HAL_GetTick>
 800478a:	1b00      	subs	r0, r0, r4
 800478c:	2802      	cmp	r0, #2
 800478e:	f63f af5c 	bhi.w	800464a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	682b      	ldr	r3, [r5, #0]
 8004794:	019a      	lsls	r2, r3, #6
 8004796:	d5f6      	bpl.n	8004786 <HAL_RCC_OscConfig+0x3aa>
 8004798:	e6d5      	b.n	8004546 <HAL_RCC_OscConfig+0x16a>
 800479a:	bf00      	nop
 800479c:	42470000 	.word	0x42470000
 80047a0:	40023800 	.word	0x40023800

080047a4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a4:	4916      	ldr	r1, [pc, #88]	; (8004800 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80047a6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a8:	688b      	ldr	r3, [r1, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d01b      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x46>
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d117      	bne.n	80047e6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047b6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047b8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047c4:	d113      	bne.n	80047ee <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c6:	480f      	ldr	r0, [pc, #60]	; (8004804 <HAL_RCC_GetSysClockFreq+0x60>)
 80047c8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80047cc:	fba1 0100 	umull	r0, r1, r1, r0
 80047d0:	f7fc f9f2 	bl	8000bb8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <HAL_RCC_GetSysClockFreq+0x5c>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80047dc:	3301      	adds	r3, #1
 80047de:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80047e0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80047e4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80047e6:	4807      	ldr	r0, [pc, #28]	; (8004804 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80047e8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ea:	4807      	ldr	r0, [pc, #28]	; (8004808 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80047ec:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ee:	4806      	ldr	r0, [pc, #24]	; (8004808 <HAL_RCC_GetSysClockFreq+0x64>)
 80047f0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80047f4:	2300      	movs	r3, #0
 80047f6:	fba1 0100 	umull	r0, r1, r1, r0
 80047fa:	f7fc f9dd 	bl	8000bb8 <__aeabi_uldivmod>
 80047fe:	e7e9      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x30>
 8004800:	40023800 	.word	0x40023800
 8004804:	00f42400 	.word	0x00f42400
 8004808:	007a1200 	.word	0x007a1200

0800480c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800480c:	2800      	cmp	r0, #0
 800480e:	f000 8087 	beq.w	8004920 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004812:	4a48      	ldr	r2, [pc, #288]	; (8004934 <HAL_RCC_ClockConfig+0x128>)
 8004814:	6813      	ldr	r3, [r2, #0]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	428b      	cmp	r3, r1
{
 800481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004820:	460d      	mov	r5, r1
 8004822:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004824:	d209      	bcs.n	800483a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	b2cb      	uxtb	r3, r1
 8004828:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	6813      	ldr	r3, [r2, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	428b      	cmp	r3, r1
 8004832:	d002      	beq.n	800483a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004834:	2001      	movs	r0, #1
}
 8004836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	0798      	lsls	r0, r3, #30
 800483e:	d514      	bpl.n	800486a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	0759      	lsls	r1, r3, #29
 8004842:	d504      	bpl.n	800484e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004844:	493c      	ldr	r1, [pc, #240]	; (8004938 <HAL_RCC_ClockConfig+0x12c>)
 8004846:	688a      	ldr	r2, [r1, #8]
 8004848:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800484c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800484e:	071a      	lsls	r2, r3, #28
 8004850:	d504      	bpl.n	800485c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004852:	4939      	ldr	r1, [pc, #228]	; (8004938 <HAL_RCC_ClockConfig+0x12c>)
 8004854:	688a      	ldr	r2, [r1, #8]
 8004856:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800485a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485c:	4936      	ldr	r1, [pc, #216]	; (8004938 <HAL_RCC_ClockConfig+0x12c>)
 800485e:	68a0      	ldr	r0, [r4, #8]
 8004860:	688a      	ldr	r2, [r1, #8]
 8004862:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004866:	4302      	orrs	r2, r0
 8004868:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486a:	07df      	lsls	r7, r3, #31
 800486c:	d521      	bpl.n	80048b2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486e:	6862      	ldr	r2, [r4, #4]
 8004870:	2a01      	cmp	r2, #1
 8004872:	d057      	beq.n	8004924 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004874:	1e93      	subs	r3, r2, #2
 8004876:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004878:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <HAL_RCC_ClockConfig+0x12c>)
 800487a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800487c:	d94d      	bls.n	800491a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	0799      	lsls	r1, r3, #30
 8004880:	d5d8      	bpl.n	8004834 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4e2d      	ldr	r6, [pc, #180]	; (8004938 <HAL_RCC_ClockConfig+0x12c>)
 8004884:	68b3      	ldr	r3, [r6, #8]
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	4313      	orrs	r3, r2
 800488c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800488e:	f7fe fc33 	bl	80030f8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004892:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004896:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004898:	e004      	b.n	80048a4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489a:	f7fe fc2d 	bl	80030f8 <HAL_GetTick>
 800489e:	1bc0      	subs	r0, r0, r7
 80048a0:	4540      	cmp	r0, r8
 80048a2:	d844      	bhi.n	800492e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a4:	68b3      	ldr	r3, [r6, #8]
 80048a6:	6862      	ldr	r2, [r4, #4]
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80048b0:	d1f3      	bne.n	800489a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b2:	4a20      	ldr	r2, [pc, #128]	; (8004934 <HAL_RCC_ClockConfig+0x128>)
 80048b4:	6813      	ldr	r3, [r2, #0]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	42ab      	cmp	r3, r5
 80048bc:	d906      	bls.n	80048cc <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048be:	b2eb      	uxtb	r3, r5
 80048c0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	42ab      	cmp	r3, r5
 80048ca:	d1b3      	bne.n	8004834 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	075a      	lsls	r2, r3, #29
 80048d0:	d506      	bpl.n	80048e0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d2:	4919      	ldr	r1, [pc, #100]	; (8004938 <HAL_RCC_ClockConfig+0x12c>)
 80048d4:	68e0      	ldr	r0, [r4, #12]
 80048d6:	688a      	ldr	r2, [r1, #8]
 80048d8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80048dc:	4302      	orrs	r2, r0
 80048de:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e0:	071b      	lsls	r3, r3, #28
 80048e2:	d507      	bpl.n	80048f4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e4:	4a14      	ldr	r2, [pc, #80]	; (8004938 <HAL_RCC_ClockConfig+0x12c>)
 80048e6:	6921      	ldr	r1, [r4, #16]
 80048e8:	6893      	ldr	r3, [r2, #8]
 80048ea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80048ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80048f2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048f4:	f7ff ff56 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 80048f8:	4a0f      	ldr	r2, [pc, #60]	; (8004938 <HAL_RCC_ClockConfig+0x12c>)
 80048fa:	4c10      	ldr	r4, [pc, #64]	; (800493c <HAL_RCC_ClockConfig+0x130>)
 80048fc:	6892      	ldr	r2, [r2, #8]
 80048fe:	4910      	ldr	r1, [pc, #64]	; (8004940 <HAL_RCC_ClockConfig+0x134>)
 8004900:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004904:	4603      	mov	r3, r0
 8004906:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004908:	480e      	ldr	r0, [pc, #56]	; (8004944 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800490a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800490c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800490e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004910:	f7fe fba8 	bl	8003064 <HAL_InitTick>
  return HAL_OK;
 8004914:	2000      	movs	r0, #0
}
 8004916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491a:	0198      	lsls	r0, r3, #6
 800491c:	d4b1      	bmi.n	8004882 <HAL_RCC_ClockConfig+0x76>
 800491e:	e789      	b.n	8004834 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
}
 8004922:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <HAL_RCC_ClockConfig+0x12c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	039e      	lsls	r6, r3, #14
 800492a:	d4aa      	bmi.n	8004882 <HAL_RCC_ClockConfig+0x76>
 800492c:	e782      	b.n	8004834 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800492e:	2003      	movs	r0, #3
 8004930:	e781      	b.n	8004836 <HAL_RCC_ClockConfig+0x2a>
 8004932:	bf00      	nop
 8004934:	40023c00 	.word	0x40023c00
 8004938:	40023800 	.word	0x40023800
 800493c:	0800a408 	.word	0x0800a408
 8004940:	20000008 	.word	0x20000008
 8004944:	20000010 	.word	0x20000010

08004948 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800494a:	4905      	ldr	r1, [pc, #20]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4a05      	ldr	r2, [pc, #20]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004950:	6808      	ldr	r0, [r1, #0]
 8004952:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004956:	5cd3      	ldrb	r3, [r2, r3]
}
 8004958:	40d8      	lsrs	r0, r3
 800495a:	4770      	bx	lr
 800495c:	40023800 	.word	0x40023800
 8004960:	20000008 	.word	0x20000008
 8004964:	0800a418 	.word	0x0800a418

08004968 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004968:	4b04      	ldr	r3, [pc, #16]	; (800497c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800496a:	4905      	ldr	r1, [pc, #20]	; (8004980 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	4a05      	ldr	r2, [pc, #20]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004970:	6808      	ldr	r0, [r1, #0]
 8004972:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004976:	5cd3      	ldrb	r3, [r2, r3]
}
 8004978:	40d8      	lsrs	r0, r3
 800497a:	4770      	bx	lr
 800497c:	40023800 	.word	0x40023800
 8004980:	20000008 	.word	0x20000008
 8004984:	0800a418 	.word	0x0800a418

08004988 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	461d      	mov	r5, r3
 8004990:	4616      	mov	r6, r2
 8004992:	460c      	mov	r4, r1
 8004994:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004996:	f7fe fbaf 	bl	80030f8 <HAL_GetTick>
 800499a:	4435      	add	r5, r6
 800499c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800499e:	f7fe fbab 	bl	80030f8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049a2:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80049aa:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 80049ae:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049b0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049b2:	1c73      	adds	r3, r6, #1
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	d107      	bne.n	80049c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
 80049b8:	688b      	ldr	r3, [r1, #8]
 80049ba:	ea34 0303 	bics.w	r3, r4, r3
 80049be:	d0fb      	beq.n	80049b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 80049c0:	2000      	movs	r0, #0
}
 80049c2:	b002      	add	sp, #8
 80049c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049c8:	688b      	ldr	r3, [r1, #8]
 80049ca:	ea34 0303 	bics.w	r3, r4, r3
 80049ce:	d1f7      	bne.n	80049c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049d0:	f7fe fb92 	bl	80030f8 <HAL_GetTick>
 80049d4:	eba0 0008 	sub.w	r0, r0, r8
 80049d8:	42a8      	cmp	r0, r5
 80049da:	d208      	bcs.n	80049ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
      if (count == 0U)
 80049dc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80049de:	2b00      	cmp	r3, #0
      count--;
 80049e0:	9b01      	ldr	r3, [sp, #4]
 80049e2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80049e6:	bf08      	it	eq
 80049e8:	2500      	moveq	r5, #0
      count--;
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	e7e1      	b.n	80049b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ee:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049f2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049fc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049fe:	d014      	beq.n	8004a2a <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a02:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004a06:	d007      	beq.n	8004a18 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 8004a08:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004a0a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8004a0c:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004a10:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8004a14:	2003      	movs	r0, #3
 8004a16:	e7d4      	b.n	80049c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e7ee      	b.n	8004a08 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004a30:	d002      	beq.n	8004a38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a32:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004a36:	d1e3      	bne.n	8004a00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e7de      	b.n	8004a00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
 8004a42:	bf00      	nop
 8004a44:	20000008 	.word	0x20000008

08004a48 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d05c      	beq.n	8004b06 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a4c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8004a4e:	b570      	push	{r4, r5, r6, lr}
 8004a50:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a52:	2900      	cmp	r1, #0
 8004a54:	d047      	beq.n	8004ae6 <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a56:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a58:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a5c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a64:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8004a68:	2a00      	cmp	r2, #0
 8004a6a:	d042      	beq.n	8004af2 <HAL_SPI_Init+0xaa>
 8004a6c:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 8004a6e:	6825      	ldr	r5, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a70:	68a2      	ldr	r2, [r4, #8]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004a72:	2302      	movs	r3, #2
 8004a74:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7e:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a80:	6863      	ldr	r3, [r4, #4]
 8004a82:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8004a86:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	68e2      	ldr	r2, [r4, #12]
 8004a8e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004a92:	4313      	orrs	r3, r2
 8004a94:	6922      	ldr	r2, [r4, #16]
 8004a96:	f002 0202 	and.w	r2, r2, #2
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	6962      	ldr	r2, [r4, #20]
 8004a9e:	f002 0201 	and.w	r2, r2, #1
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004aa6:	f001 0010 	and.w	r0, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aaa:	f003 0638 	and.w	r6, r3, #56	; 0x38
 8004aae:	69a1      	ldr	r1, [r4, #24]
 8004ab0:	6a23      	ldr	r3, [r4, #32]
 8004ab2:	f003 0e80 	and.w	lr, r3, #128	; 0x80
 8004ab6:	f401 7300 	and.w	r3, r1, #512	; 0x200
 8004aba:	4313      	orrs	r3, r2
 8004abc:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004abe:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac0:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ac4:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac8:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004acc:	4301      	orrs	r1, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ace:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ad0:	6069      	str	r1, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ad2:	69eb      	ldr	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ad4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004ada:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004adc:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ade:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ae0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 8004ae4:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ae6:	6843      	ldr	r3, [r0, #4]
 8004ae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aec:	d0b6      	beq.n	8004a5c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aee:	61c1      	str	r1, [r0, #28]
 8004af0:	e7b4      	b.n	8004a5c <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8004af2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004af6:	4620      	mov	r0, r4
 8004af8:	f7fd ffc6 	bl	8002a88 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004afc:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b00:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8004b04:	e7b3      	b.n	8004a6e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8004b06:	2001      	movs	r0, #1
}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop

08004b0c <HAL_SPI_Transmit>:
{
 8004b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b10:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004b12:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8004b16:	2801      	cmp	r0, #1
{
 8004b18:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004b1a:	f000 8087 	beq.w	8004c2c <HAL_SPI_Transmit+0x120>
 8004b1e:	461d      	mov	r5, r3
 8004b20:	2301      	movs	r3, #1
 8004b22:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004b26:	4688      	mov	r8, r1
 8004b28:	4617      	mov	r7, r2
 8004b2a:	f7fe fae5 	bl	80030f8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004b2e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004b32:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004b34:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004b36:	b2d8      	uxtb	r0, r3
 8004b38:	d009      	beq.n	8004b4e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8004b3a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004b3c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004b3e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004b40:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b44:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004b48:	b002      	add	sp, #8
 8004b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004b4e:	f1b8 0f00 	cmp.w	r8, #0
 8004b52:	d0f3      	beq.n	8004b3c <HAL_SPI_Transmit+0x30>
 8004b54:	2f00      	cmp	r7, #0
 8004b56:	d0f1      	beq.n	8004b3c <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b58:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004b5a:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b5c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b60:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b62:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b64:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b68:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
 8004b6c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b70:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 8004b72:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b74:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b76:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b78:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7c:	f000 8083 	beq.w	8004c86 <HAL_SPI_Transmit+0x17a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b80:	6803      	ldr	r3, [r0, #0]
 8004b82:	065b      	lsls	r3, r3, #25
    __HAL_SPI_DISABLE(hspi);
 8004b84:	4684      	mov	ip, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b86:	d403      	bmi.n	8004b90 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8004b88:	6803      	ldr	r3, [r0, #0]
 8004b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8e:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b90:	68e3      	ldr	r3, [r4, #12]
 8004b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b96:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b98:	d04c      	beq.n	8004c34 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8095 	beq.w	8004cca <HAL_SPI_Transmit+0x1be>
 8004ba0:	2f01      	cmp	r7, #1
 8004ba2:	f000 8092 	beq.w	8004cca <HAL_SPI_Transmit+0x1be>
    while (hspi->TxXferCount > 0U)
 8004ba6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	b1bb      	cbz	r3, 8004bdc <HAL_SPI_Transmit+0xd0>
 8004bac:	2d00      	cmp	r5, #0
 8004bae:	f000 80cb 	beq.w	8004d48 <HAL_SPI_Transmit+0x23c>
 8004bb2:	1c6f      	adds	r7, r5, #1
 8004bb4:	d17e      	bne.n	8004cb4 <HAL_SPI_Transmit+0x1a8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	0790      	lsls	r0, r2, #30
 8004bbc:	f140 8090 	bpl.w	8004ce0 <HAL_SPI_Transmit+0x1d4>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004bc2:	7812      	ldrb	r2, [r2, #0]
 8004bc4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004bc6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004bca:	3901      	subs	r1, #1
 8004bcc:	b289      	uxth	r1, r1
 8004bce:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004bd0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bd2:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 8004bd4:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bd6:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	d1ec      	bne.n	8004bb6 <HAL_SPI_Transmit+0xaa>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bdc:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bde:	4b72      	ldr	r3, [pc, #456]	; (8004da8 <HAL_SPI_Transmit+0x29c>)
 8004be0:	4972      	ldr	r1, [pc, #456]	; (8004dac <HAL_SPI_Transmit+0x2a0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	fba1 1303 	umull	r1, r3, r1, r3
 8004be8:	0d5b      	lsrs	r3, r3, #21
 8004bea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bf6:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf8:	d107      	bne.n	8004c0a <HAL_SPI_Transmit+0xfe>
 8004bfa:	e0c6      	b.n	8004d8a <HAL_SPI_Transmit+0x27e>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8004bfc:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004bfe:	6822      	ldr	r2, [r4, #0]
      count--;
 8004c00:	3b01      	subs	r3, #1
 8004c02:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c04:	6893      	ldr	r3, [r2, #8]
 8004c06:	061b      	lsls	r3, r3, #24
 8004c08:	d502      	bpl.n	8004c10 <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 8004c0a:	9b01      	ldr	r3, [sp, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f5      	bne.n	8004bfc <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c10:	68a3      	ldr	r3, [r4, #8]
 8004c12:	b933      	cbnz	r3, 8004c22 <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c14:	6822      	ldr	r2, [r4, #0]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	68d3      	ldr	r3, [r2, #12]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	6893      	ldr	r3, [r2, #8]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c22:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004c24:	3800      	subs	r0, #0
 8004c26:	bf18      	it	ne
 8004c28:	2001      	movne	r0, #1
error:
 8004c2a:	e787      	b.n	8004b3c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8004c2c:	2002      	movs	r0, #2
}
 8004c2e:	b002      	add	sp, #8
 8004c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c34:	461a      	mov	r2, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d174      	bne.n	8004d24 <HAL_SPI_Transmit+0x218>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	f831 7b02 	ldrh.w	r7, [r1], #2
 8004c40:	60c7      	str	r7, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c42:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004c44:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8004c46:	3901      	subs	r1, #1
 8004c48:	b289      	uxth	r1, r1
 8004c4a:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004c4c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8004c4e:	b289      	uxth	r1, r1
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d0c4      	beq.n	8004bde <HAL_SPI_Transmit+0xd2>
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	f000 808b 	beq.w	8004d70 <HAL_SPI_Transmit+0x264>
 8004c5a:	1c69      	adds	r1, r5, #1
 8004c5c:	d158      	bne.n	8004d10 <HAL_SPI_Transmit+0x204>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c5e:	6883      	ldr	r3, [r0, #8]
 8004c60:	079a      	lsls	r2, r3, #30
 8004c62:	f140 8089 	bpl.w	8004d78 <HAL_SPI_Transmit+0x26c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c68:	f832 3b02 	ldrh.w	r3, [r2], #2
 8004c6c:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8004c6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c70:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004c78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1ee      	bne.n	8004c5e <HAL_SPI_Transmit+0x152>
 8004c80:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c82:	461a      	mov	r2, r3
 8004c84:	e7ab      	b.n	8004bde <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 8004c86:	6803      	ldr	r3, [r0, #0]
 8004c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8c:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8004c8e:	6803      	ldr	r3, [r0, #0]
 8004c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c94:	6003      	str	r3, [r0, #0]
 8004c96:	e773      	b.n	8004b80 <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004c9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ca0:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004ca2:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ca4:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004caa:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8004cac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d093      	beq.n	8004bdc <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	0791      	lsls	r1, r2, #30
 8004cba:	d4ed      	bmi.n	8004c98 <HAL_SPI_Transmit+0x18c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cbc:	f7fe fa1c 	bl	80030f8 <HAL_GetTick>
 8004cc0:	1b80      	subs	r0, r0, r6
 8004cc2:	4285      	cmp	r5, r0
 8004cc4:	d8f2      	bhi.n	8004cac <HAL_SPI_Transmit+0x1a0>
          errorcode = HAL_TIMEOUT;
 8004cc6:	2003      	movs	r0, #3
 8004cc8:	e738      	b.n	8004b3c <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cca:	f898 3000 	ldrb.w	r3, [r8]
 8004cce:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8004cd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004cd4:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cd6:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004cd8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cda:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004cdc:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004cde:	e762      	b.n	8004ba6 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ce0:	f7fe fa0a 	bl	80030f8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8004ce4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f47f af64 	bne.w	8004bb6 <HAL_SPI_Transmit+0xaa>
 8004cee:	e775      	b.n	8004bdc <HAL_SPI_Transmit+0xd0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004cf2:	f832 3b02 	ldrh.w	r3, [r2], #2
 8004cf6:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 8004cfa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cfc:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004d04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0b9      	beq.n	8004c80 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d0c:	f8d4 c000 	ldr.w	ip, [r4]
 8004d10:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8004d14:	079b      	lsls	r3, r3, #30
 8004d16:	d4eb      	bmi.n	8004cf0 <HAL_SPI_Transmit+0x1e4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d18:	f7fe f9ee 	bl	80030f8 <HAL_GetTick>
 8004d1c:	1b80      	subs	r0, r0, r6
 8004d1e:	4285      	cmp	r5, r0
 8004d20:	d9d1      	bls.n	8004cc6 <HAL_SPI_Transmit+0x1ba>
 8004d22:	e7ef      	b.n	8004d04 <HAL_SPI_Transmit+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d24:	2f01      	cmp	r7, #1
 8004d26:	d191      	bne.n	8004c4c <HAL_SPI_Transmit+0x140>
 8004d28:	e787      	b.n	8004c3a <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004d30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d32:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004d3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d3c:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 8004d3e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d40:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f43f af4a 	beq.w	8004bdc <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	0792      	lsls	r2, r2, #30
 8004d4e:	d4ec      	bmi.n	8004d2a <HAL_SPI_Transmit+0x21e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d50:	f7fe f9d2 	bl	80030f8 <HAL_GetTick>
 8004d54:	e7b7      	b.n	8004cc6 <HAL_SPI_Transmit+0x1ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d56:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d58:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004d5c:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 8004d5e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d60:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d62:	3a01      	subs	r2, #1
 8004d64:	b292      	uxth	r2, r2
 8004d66:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004d68:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004d6a:	b292      	uxth	r2, r2
 8004d6c:	2a00      	cmp	r2, #0
 8004d6e:	d088      	beq.n	8004c82 <HAL_SPI_Transmit+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d70:	6882      	ldr	r2, [r0, #8]
 8004d72:	0797      	lsls	r7, r2, #30
 8004d74:	d5ec      	bpl.n	8004d50 <HAL_SPI_Transmit+0x244>
 8004d76:	e7ee      	b.n	8004d56 <HAL_SPI_Transmit+0x24a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d78:	f7fe f9be 	bl	80030f8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8004d7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f43f af7d 	beq.w	8004c80 <HAL_SPI_Transmit+0x174>
 8004d86:	6820      	ldr	r0, [r4, #0]
 8004d88:	e769      	b.n	8004c5e <HAL_SPI_Transmit+0x152>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8a:	4633      	mov	r3, r6
 8004d8c:	462a      	mov	r2, r5
 8004d8e:	2180      	movs	r1, #128	; 0x80
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7ff fdf9 	bl	8004988 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f43f af3a 	beq.w	8004c10 <HAL_SPI_Transmit+0x104>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d9e:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da0:	4313      	orrs	r3, r2
 8004da2:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004da4:	6562      	str	r2, [r4, #84]	; 0x54
 8004da6:	e733      	b.n	8004c10 <HAL_SPI_Transmit+0x104>
 8004da8:	20000008 	.word	0x20000008
 8004dac:	165e9f81 	.word	0x165e9f81

08004db0 <HAL_SPI_TransmitReceive>:
{
 8004db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004db4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004db6:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 8004dba:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8004dbc:	2801      	cmp	r0, #1
{
 8004dbe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004dc0:	f000 8083 	beq.w	8004eca <HAL_SPI_TransmitReceive+0x11a>
 8004dc4:	461f      	mov	r7, r3
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004dcc:	4689      	mov	r9, r1
 8004dce:	4690      	mov	r8, r2
 8004dd0:	f7fe f992 	bl	80030f8 <HAL_GetTick>
 8004dd4:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8004dd6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8004dda:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ddc:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8004dde:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004de0:	d011      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x56>
 8004de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de6:	d009      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8004de8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004dea:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004dec:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004dee:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004df2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004df6:	b003      	add	sp, #12
 8004df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dfc:	68a2      	ldr	r2, [r4, #8]
 8004dfe:	2a00      	cmp	r2, #0
 8004e00:	d1f2      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x38>
 8004e02:	2904      	cmp	r1, #4
 8004e04:	d1f0      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e06:	f1b9 0f00 	cmp.w	r9, #0
 8004e0a:	d062      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x122>
 8004e0c:	f1b8 0f00 	cmp.w	r8, #0
 8004e10:	d05f      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x122>
 8004e12:	2f00      	cmp	r7, #0
 8004e14:	d05d      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e16:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e1a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e1e:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e20:	bf1c      	itt	ne
 8004e22:	2205      	movne	r2, #5
 8004e24:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e28:	2200      	movs	r2, #0
 8004e2a:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004e2c:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e30:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8004e32:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004e34:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e36:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 8004e38:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e3a:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e3c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e40:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e42:	d403      	bmi.n	8004e4c <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004e4a:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e4c:	68e1      	ldr	r1, [r4, #12]
 8004e4e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004e52:	d04e      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d03e      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x126>
 8004e58:	2f01      	cmp	r7, #1
 8004e5a:	d03c      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 8004e5c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	b91b      	cbnz	r3, 8004e6c <HAL_SPI_TransmitReceive+0xbc>
 8004e64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d07f      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	6893      	ldr	r3, [r2, #8]
 8004e70:	0799      	lsls	r1, r3, #30
 8004e72:	d50f      	bpl.n	8004e94 <HAL_SPI_TransmitReceive+0xe4>
 8004e74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	b163      	cbz	r3, 8004e94 <HAL_SPI_TransmitReceive+0xe4>
 8004e7a:	b15f      	cbz	r7, 8004e94 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8004e82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004e84:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004e86:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8004e88:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8004e8a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004e8c:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e8e:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8004e90:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004e92:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e94:	6893      	ldr	r3, [r2, #8]
 8004e96:	f013 0301 	ands.w	r3, r3, #1
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_SPI_TransmitReceive+0x108>
 8004e9c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004e9e:	b289      	uxth	r1, r1
 8004ea0:	b151      	cbz	r1, 8004eb8 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 8004ea2:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ea6:	68d2      	ldr	r2, [r2, #12]
 8004ea8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eac:	3301      	adds	r3, #1
 8004eae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004eb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eb8:	f7fe f91e 	bl	80030f8 <HAL_GetTick>
 8004ebc:	1b80      	subs	r0, r0, r6
 8004ebe:	42a8      	cmp	r0, r5
 8004ec0:	d314      	bcc.n	8004eec <HAL_SPI_TransmitReceive+0x13c>
 8004ec2:	1c6a      	adds	r2, r5, #1
 8004ec4:	d0cb      	beq.n	8004e5e <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8004ec6:	2003      	movs	r0, #3
 8004ec8:	e78f      	b.n	8004dea <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8004eca:	2002      	movs	r0, #2
}
 8004ecc:	b003      	add	sp, #12
 8004ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	e789      	b.n	8004dea <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed6:	f899 3000 	ldrb.w	r3, [r9]
 8004eda:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 8004edc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ede:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004ee0:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ee2:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004ee4:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ee6:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004ee8:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004eea:	e7b7      	b.n	8004e5c <HAL_SPI_TransmitReceive+0xac>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	d1b6      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0xae>
 8004ef0:	e7e9      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d16c      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x220>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004efc:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8004efe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f00:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004f08:	1c6a      	adds	r2, r5, #1
{
 8004f0a:	f04f 0701 	mov.w	r7, #1
 8004f0e:	d025      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x1ac>
 8004f10:	e061      	b.n	8004fd6 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	6893      	ldr	r3, [r2, #8]
 8004f16:	079b      	lsls	r3, r3, #30
 8004f18:	d50d      	bpl.n	8004f36 <HAL_SPI_TransmitReceive+0x186>
 8004f1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	b153      	cbz	r3, 8004f36 <HAL_SPI_TransmitReceive+0x186>
 8004f20:	b14f      	cbz	r7, 8004f36 <HAL_SPI_TransmitReceive+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f24:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004f28:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8004f2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f2c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8004f32:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8004f34:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f36:	6893      	ldr	r3, [r2, #8]
 8004f38:	f013 0301 	ands.w	r3, r3, #1
 8004f3c:	d00c      	beq.n	8004f58 <HAL_SPI_TransmitReceive+0x1a8>
 8004f3e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004f40:	b289      	uxth	r1, r1
 8004f42:	b149      	cbz	r1, 8004f58 <HAL_SPI_TransmitReceive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f44:	68d1      	ldr	r1, [r2, #12]
 8004f46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f48:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8004f4c:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8004f4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f50:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f58:	f7fe f8ce 	bl	80030f8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1d6      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x162>
 8004f64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1d2      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x162>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f6c:	4b33      	ldr	r3, [pc, #204]	; (800503c <HAL_SPI_TransmitReceive+0x28c>)
 8004f6e:	4a34      	ldr	r2, [pc, #208]	; (8005040 <HAL_SPI_TransmitReceive+0x290>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	0d5b      	lsrs	r3, r3, #21
 8004f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f7c:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f80:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f82:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f84:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004f88:	d114      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x204>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f8a:	4633      	mov	r3, r6
 8004f8c:	462a      	mov	r2, r5
 8004f8e:	2180      	movs	r1, #128	; 0x80
 8004f90:	4620      	mov	r0, r4
 8004f92:	f7ff fcf9 	bl	8004988 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004f96:	b180      	cbz	r0, 8004fba <HAL_SPI_TransmitReceive+0x20a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f98:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f9a:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004fa0:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa2:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8004fa4:	e721      	b.n	8004dea <HAL_SPI_TransmitReceive+0x3a>
      count--;
 8004fa6:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fa8:	6822      	ldr	r2, [r4, #0]
      count--;
 8004faa:	3b01      	subs	r3, #1
 8004fac:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fae:	6893      	ldr	r3, [r2, #8]
 8004fb0:	061b      	lsls	r3, r3, #24
 8004fb2:	d502      	bpl.n	8004fba <HAL_SPI_TransmitReceive+0x20a>
      if (count == 0U)
 8004fb4:	9b01      	ldr	r3, [sp, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f5      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fba:	68a0      	ldr	r0, [r4, #8]
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d13a      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x286>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	9000      	str	r0, [sp, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	9200      	str	r2, [sp, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	9b00      	ldr	r3, [sp, #0]
 8004fce:	e70c      	b.n	8004dea <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd0:	2f01      	cmp	r7, #1
 8004fd2:	d199      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x158>
 8004fd4:	e78f      	b.n	8004ef6 <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	b91b      	cbnz	r3, 8004fe4 <HAL_SPI_TransmitReceive+0x234>
 8004fdc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0c3      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fe4:	6822      	ldr	r2, [r4, #0]
 8004fe6:	6893      	ldr	r3, [r2, #8]
 8004fe8:	0798      	lsls	r0, r3, #30
 8004fea:	d50d      	bpl.n	8005008 <HAL_SPI_TransmitReceive+0x258>
 8004fec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	b153      	cbz	r3, 8005008 <HAL_SPI_TransmitReceive+0x258>
 8004ff2:	b14f      	cbz	r7, 8005008 <HAL_SPI_TransmitReceive+0x258>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ff6:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004ffa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004ffe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005000:	3b01      	subs	r3, #1
 8005002:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8005004:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8005006:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005008:	6893      	ldr	r3, [r2, #8]
 800500a:	f013 0301 	ands.w	r3, r3, #1
 800500e:	d00c      	beq.n	800502a <HAL_SPI_TransmitReceive+0x27a>
 8005010:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005012:	b289      	uxth	r1, r1
 8005014:	b149      	cbz	r1, 800502a <HAL_SPI_TransmitReceive+0x27a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005016:	68d1      	ldr	r1, [r2, #12]
 8005018:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800501a:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800501e:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8005020:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005022:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005024:	3b01      	subs	r3, #1
 8005026:	b29b      	uxth	r3, r3
 8005028:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800502a:	f7fe f865 	bl	80030f8 <HAL_GetTick>
 800502e:	1b80      	subs	r0, r0, r6
 8005030:	42a8      	cmp	r0, r5
 8005032:	d3d0      	bcc.n	8004fd6 <HAL_SPI_TransmitReceive+0x226>
 8005034:	e747      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x116>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005036:	2000      	movs	r0, #0
 8005038:	e6d7      	b.n	8004dea <HAL_SPI_TransmitReceive+0x3a>
 800503a:	bf00      	nop
 800503c:	20000008 	.word	0x20000008
 8005040:	165e9f81 	.word	0x165e9f81

08005044 <HAL_SPI_GetState>:
  return hspi->State;
 8005044:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop

0800504c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504c:	2800      	cmp	r0, #0
 800504e:	d076      	beq.n	800513e <HAL_TIM_Base_Init+0xf2>
{
 8005050:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005056:	4604      	mov	r4, r0
 8005058:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800505c:	2b00      	cmp	r3, #0
 800505e:	d055      	beq.n	800510c <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005060:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005062:	4938      	ldr	r1, [pc, #224]	; (8005144 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	2302      	movs	r3, #2
 8005066:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800506a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800506c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800506e:	d052      	beq.n	8005116 <HAL_TIM_Base_Init+0xca>
 8005070:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005074:	d021      	beq.n	80050ba <HAL_TIM_Base_Init+0x6e>
 8005076:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800507a:	428a      	cmp	r2, r1
 800507c:	d01d      	beq.n	80050ba <HAL_TIM_Base_Init+0x6e>
 800507e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005082:	428a      	cmp	r2, r1
 8005084:	d019      	beq.n	80050ba <HAL_TIM_Base_Init+0x6e>
 8005086:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800508a:	428a      	cmp	r2, r1
 800508c:	d015      	beq.n	80050ba <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800508e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8005092:	428a      	cmp	r2, r1
 8005094:	d015      	beq.n	80050c2 <HAL_TIM_Base_Init+0x76>
 8005096:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800509a:	428a      	cmp	r2, r1
 800509c:	d011      	beq.n	80050c2 <HAL_TIM_Base_Init+0x76>
 800509e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050a2:	428a      	cmp	r2, r1
 80050a4:	d00d      	beq.n	80050c2 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a6:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ae:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80050b0:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050b4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050b6:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b8:	e010      	b.n	80050dc <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80050ba:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80050c0:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80050d4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80050d6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050da:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050dc:	2301      	movs	r3, #1
 80050de:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80050e8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80050ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80050f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005100:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005104:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005108:	2000      	movs	r0, #0
}
 800510a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800510c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005110:	f7fd fd5e 	bl	8002bd0 <HAL_TIM_Base_MspInit>
 8005114:	e7a4      	b.n	8005060 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005116:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005118:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800511e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005124:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005126:	69a1      	ldr	r1, [r4, #24]
 8005128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800512c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800512e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005130:	68e3      	ldr	r3, [r4, #12]
 8005132:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005134:	6863      	ldr	r3, [r4, #4]
 8005136:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005138:	6963      	ldr	r3, [r4, #20]
 800513a:	6313      	str	r3, [r2, #48]	; 0x30
 800513c:	e7ce      	b.n	80050dc <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 800513e:	2001      	movs	r0, #1
}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40010000 	.word	0x40010000

08005148 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005148:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800514c:	2b01      	cmp	r3, #1
 800514e:	d127      	bne.n	80051a0 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005150:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005152:	4915      	ldr	r1, [pc, #84]	; (80051a8 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	2202      	movs	r2, #2
 8005156:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800515a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005164:	d011      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x42>
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516a:	d00e      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x42>
 800516c:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <HAL_TIM_Base_Start_IT+0x64>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00b      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x42>
 8005172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005176:	4293      	cmp	r3, r2
 8005178:	d007      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x42>
 800517a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x42>
 8005182:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005186:	4293      	cmp	r3, r2
 8005188:	d104      	bne.n	8005194 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	2a06      	cmp	r2, #6
 8005192:	d007      	beq.n	80051a4 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800519a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	4770      	bx	lr
    return HAL_ERROR;
 80051a0:	2001      	movs	r0, #1
 80051a2:	4770      	bx	lr
  return HAL_OK;
 80051a4:	2000      	movs	r0, #0
}
 80051a6:	4770      	bx	lr
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40000400 	.word	0x40000400

080051b0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80051b0:	6803      	ldr	r3, [r0, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	f022 0201 	bic.w	r2, r2, #1
 80051b8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	f241 1111 	movw	r1, #4369	; 0x1111
 80051c0:	420a      	tst	r2, r1
 80051c2:	d108      	bne.n	80051d6 <HAL_TIM_Base_Stop_IT+0x26>
 80051c4:	6a19      	ldr	r1, [r3, #32]
 80051c6:	f240 4244 	movw	r2, #1092	; 0x444
 80051ca:	4211      	tst	r1, r2
 80051cc:	d103      	bne.n	80051d6 <HAL_TIM_Base_Stop_IT+0x26>
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	f022 0201 	bic.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80051dc:	2000      	movs	r0, #0
 80051de:	4770      	bx	lr

080051e0 <HAL_TIM_PWM_MspInit>:
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop

080051e4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d076      	beq.n	80052d6 <HAL_TIM_PWM_Init+0xf2>
{
 80051e8:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051ee:	4604      	mov	r4, r0
 80051f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d055      	beq.n	80052a4 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f8:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051fa:	4938      	ldr	r1, [pc, #224]	; (80052dc <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	2302      	movs	r3, #2
 80051fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005202:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005204:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005206:	d052      	beq.n	80052ae <HAL_TIM_PWM_Init+0xca>
 8005208:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800520c:	d021      	beq.n	8005252 <HAL_TIM_PWM_Init+0x6e>
 800520e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005212:	428a      	cmp	r2, r1
 8005214:	d01d      	beq.n	8005252 <HAL_TIM_PWM_Init+0x6e>
 8005216:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800521a:	428a      	cmp	r2, r1
 800521c:	d019      	beq.n	8005252 <HAL_TIM_PWM_Init+0x6e>
 800521e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005222:	428a      	cmp	r2, r1
 8005224:	d015      	beq.n	8005252 <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005226:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800522a:	428a      	cmp	r2, r1
 800522c:	d015      	beq.n	800525a <HAL_TIM_PWM_Init+0x76>
 800522e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005232:	428a      	cmp	r2, r1
 8005234:	d011      	beq.n	800525a <HAL_TIM_PWM_Init+0x76>
 8005236:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800523a:	428a      	cmp	r2, r1
 800523c:	d00d      	beq.n	800525a <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800523e:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005240:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005246:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005248:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800524a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800524c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800524e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005250:	e010      	b.n	8005274 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005252:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005258:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800525c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800525e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005262:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005268:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800526a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800526c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800526e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005270:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005272:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005274:	2301      	movs	r3, #1
 8005276:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005278:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005280:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005284:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005288:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005294:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800529c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80052a0:	2000      	movs	r0, #0
}
 80052a2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80052a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80052a8:	f7ff ff9a 	bl	80051e0 <HAL_TIM_PWM_MspInit>
 80052ac:	e7a4      	b.n	80051f8 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80052ae:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80052b6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80052b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052bc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052be:	69a1      	ldr	r1, [r4, #24]
 80052c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80052c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c8:	68e3      	ldr	r3, [r4, #12]
 80052ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80052d0:	6963      	ldr	r3, [r4, #20]
 80052d2:	6313      	str	r3, [r2, #48]	; 0x30
 80052d4:	e7ce      	b.n	8005274 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 80052d6:	2001      	movs	r0, #1
}
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000

080052e0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80052e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	f000 80ca 	beq.w	800547e <HAL_TIM_PWM_ConfigChannel+0x19e>
 80052ea:	2301      	movs	r3, #1
{
 80052ec:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80052ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80052f2:	2a0c      	cmp	r2, #12
 80052f4:	d808      	bhi.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x28>
 80052f6:	e8df f002 	tbb	[pc, r2]
 80052fa:	073d      	.short	0x073d
 80052fc:	07680707 	.word	0x07680707
 8005300:	07960707 	.word	0x07960707
 8005304:	0707      	.short	0x0707
 8005306:	0e          	.byte	0x0e
 8005307:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005308:	2300      	movs	r3, #0
 800530a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800530e:	2201      	movs	r2, #1
}
 8005310:	4610      	mov	r0, r2
 8005312:	bcf0      	pop	{r4, r5, r6, r7}
 8005314:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005316:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005318:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800531a:	6a1a      	ldr	r2, [r3, #32]
 800531c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005320:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005322:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005324:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005326:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005328:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800532c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005330:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005336:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533a:	4e6b      	ldr	r6, [pc, #428]	; (80054e8 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800533c:	42b3      	cmp	r3, r6
 800533e:	f000 80bd 	beq.w	80054bc <HAL_TIM_PWM_ConfigChannel+0x1dc>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005342:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005344:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005346:	684c      	ldr	r4, [r1, #4]
 8005348:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800534c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800534e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005356:	69dc      	ldr	r4, [r3, #28]
 8005358:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800535c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800535e:	69d9      	ldr	r1, [r3, #28]
 8005360:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005364:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8005366:	2300      	movs	r3, #0
 8005368:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2200      	movs	r2, #0
}
 800536e:	4610      	mov	r0, r2
 8005370:	bcf0      	pop	{r4, r5, r6, r7}
 8005372:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005374:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005376:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005378:	6a1a      	ldr	r2, [r3, #32]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005380:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005382:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005384:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005386:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800538a:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 800538c:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800538e:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8005392:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005394:	4e54      	ldr	r6, [pc, #336]	; (80054e8 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8005396:	42b3      	cmp	r3, r6
 8005398:	d074      	beq.n	8005484 <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 800539a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800539c:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800539e:	684c      	ldr	r4, [r1, #4]
 80053a0:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80053a2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a4:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a8:	f042 0208 	orr.w	r2, r2, #8
 80053ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ae:	699c      	ldr	r4, [r3, #24]
 80053b0:	f024 0404 	bic.w	r4, r4, #4
 80053b4:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b6:	6999      	ldr	r1, [r3, #24]
 80053b8:	4329      	orrs	r1, r5
 80053ba:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 80053bc:	2300      	movs	r3, #0
 80053be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2200      	movs	r2, #0
}
 80053c4:	4610      	mov	r0, r2
 80053c6:	bcf0      	pop	{r4, r5, r6, r7}
 80053c8:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ca:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053cc:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ce:	6a1a      	ldr	r2, [r3, #32]
 80053d0:	f022 0210 	bic.w	r2, r2, #16
 80053d4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80053d6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80053d8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80053da:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053dc:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053e4:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80053e6:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ea:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053ee:	4e3e      	ldr	r6, [pc, #248]	; (80054e8 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80053f0:	42b3      	cmp	r3, r6
 80053f2:	d054      	beq.n	800549e <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 80053f4:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80053f6:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80053f8:	684c      	ldr	r4, [r1, #4]
 80053fa:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80053fc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053fe:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005400:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005408:	699c      	ldr	r4, [r3, #24]
 800540a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800540e:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005410:	6999      	ldr	r1, [r3, #24]
 8005412:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005416:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8005418:	2300      	movs	r3, #0
 800541a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2200      	movs	r2, #0
}
 8005420:	4610      	mov	r0, r2
 8005422:	bcf0      	pop	{r4, r5, r6, r7}
 8005424:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005426:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005428:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800542a:	6a1a      	ldr	r2, [r3, #32]
 800542c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005430:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005432:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005434:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005436:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005438:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800543c:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800543e:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005440:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005444:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005448:	4e27      	ldr	r6, [pc, #156]	; (80054e8 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800544a:	42b3      	cmp	r3, r6
 800544c:	d03c      	beq.n	80054c8 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 800544e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005450:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005452:	684c      	ldr	r4, [r1, #4]
 8005454:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005456:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005458:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800545a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800545c:	f042 0208 	orr.w	r2, r2, #8
 8005460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005462:	69dc      	ldr	r4, [r3, #28]
 8005464:	f024 0404 	bic.w	r4, r4, #4
 8005468:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	4329      	orrs	r1, r5
 800546e:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8005470:	2300      	movs	r3, #0
 8005472:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005476:	2200      	movs	r2, #0
}
 8005478:	4610      	mov	r0, r2
 800547a:	bcf0      	pop	{r4, r5, r6, r7}
 800547c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800547e:	2202      	movs	r2, #2
}
 8005480:	4610      	mov	r0, r2
 8005482:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005484:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005486:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800548a:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800548c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005490:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005494:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8005496:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800549a:	4335      	orrs	r5, r6
 800549c:	e77d      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800549e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80054a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054a4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a8:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054ac:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054b0:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80054b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054b6:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80054ba:	e79b      	b.n	80053f4 <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054bc:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054be:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054c2:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 80054c6:	e73c      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054c8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ce:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054d2:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054d6:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054da:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80054dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054e0:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 80054e4:	e7b3      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x16e>
 80054e6:	bf00      	nop
 80054e8:	40010000 	.word	0x40010000

080054ec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80054ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d075      	beq.n	80055e0 <HAL_TIM_ConfigClockSource+0xf4>
 80054f4:	4602      	mov	r2, r0
{
 80054f6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80054fa:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005500:	2001      	movs	r0, #1
 8005502:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005506:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005508:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800550c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005510:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005512:	680b      	ldr	r3, [r1, #0]
 8005514:	2b60      	cmp	r3, #96	; 0x60
 8005516:	d065      	beq.n	80055e4 <HAL_TIM_ConfigClockSource+0xf8>
 8005518:	d824      	bhi.n	8005564 <HAL_TIM_ConfigClockSource+0x78>
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	d07c      	beq.n	8005618 <HAL_TIM_ConfigClockSource+0x12c>
 800551e:	d94b      	bls.n	80055b8 <HAL_TIM_ConfigClockSource+0xcc>
 8005520:	2b50      	cmp	r3, #80	; 0x50
 8005522:	d117      	bne.n	8005554 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005524:	6848      	ldr	r0, [r1, #4]
 8005526:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005528:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800552a:	6a23      	ldr	r3, [r4, #32]
 800552c:	f023 0301 	bic.w	r3, r3, #1
 8005530:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005532:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005534:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005538:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800553c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800553e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005542:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005544:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005546:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800554c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8005550:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005552:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005554:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005556:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005558:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800555c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005560:	bc30      	pop	{r4, r5}
 8005562:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005568:	d038      	beq.n	80055dc <HAL_TIM_ConfigClockSource+0xf0>
 800556a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556e:	d110      	bne.n	8005592 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005570:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005574:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005576:	432b      	orrs	r3, r5
 8005578:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800557a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800557e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005582:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005584:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005586:	68a3      	ldr	r3, [r4, #8]
 8005588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 800558c:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800558e:	60a3      	str	r3, [r4, #8]
      break;
 8005590:	e7e0      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005592:	2b70      	cmp	r3, #112	; 0x70
 8005594:	d1de      	bne.n	8005554 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005596:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800559a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800559c:	432b      	orrs	r3, r5
 800559e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a0:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055a4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80055a8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80055aa:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80055ac:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80055b2:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 80055b4:	60a3      	str	r3, [r4, #8]
      break;
 80055b6:	e7cd      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d002      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0xd6>
 80055bc:	d90a      	bls.n	80055d4 <HAL_TIM_ConfigClockSource+0xe8>
 80055be:	2b30      	cmp	r3, #48	; 0x30
 80055c0:	d1c8      	bne.n	8005554 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80055c2:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80055c4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c8:	430b      	orrs	r3, r1
 80055ca:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80055ce:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80055d0:	60a3      	str	r3, [r4, #8]
}
 80055d2:	e7bf      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80055d4:	f033 0110 	bics.w	r1, r3, #16
 80055d8:	d1bc      	bne.n	8005554 <HAL_TIM_ConfigClockSource+0x68>
 80055da:	e7f2      	b.n	80055c2 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80055dc:	2000      	movs	r0, #0
 80055de:	e7b9      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 80055e0:	2002      	movs	r0, #2
}
 80055e2:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e4:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e6:	68cb      	ldr	r3, [r1, #12]
 80055e8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ea:	f020 0010 	bic.w	r0, r0, #16
 80055ee:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f0:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f6:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 80055fa:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80055fc:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005602:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8005606:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005608:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800560e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8005612:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005614:	60a3      	str	r3, [r4, #8]
}
 8005616:	e79d      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005618:	6848      	ldr	r0, [r1, #4]
 800561a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800561c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800561e:	6a23      	ldr	r3, [r4, #32]
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005626:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005628:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800562c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005630:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005632:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005636:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005638:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800563a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005640:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8005644:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005646:	60a3      	str	r3, [r4, #8]
}
 8005648:	e784      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x68>
 800564a:	bf00      	nop

0800564c <HAL_TIM_OC_DelayElapsedCallback>:
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop

08005650 <HAL_TIM_IC_CaptureCallback>:
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop

08005654 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop

08005658 <HAL_TIM_TriggerCallback>:
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop

0800565c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800565c:	6803      	ldr	r3, [r0, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	0791      	lsls	r1, r2, #30
{
 8005662:	b510      	push	{r4, lr}
 8005664:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005666:	d502      	bpl.n	800566e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	0792      	lsls	r2, r2, #30
 800566c:	d45f      	bmi.n	800572e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	0750      	lsls	r0, r2, #29
 8005672:	d502      	bpl.n	800567a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	0751      	lsls	r1, r2, #29
 8005678:	d446      	bmi.n	8005708 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	0712      	lsls	r2, r2, #28
 800567e:	d502      	bpl.n	8005686 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	0710      	lsls	r0, r2, #28
 8005684:	d42e      	bmi.n	80056e4 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	06d2      	lsls	r2, r2, #27
 800568a:	d502      	bpl.n	8005692 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	06d0      	lsls	r0, r2, #27
 8005690:	d418      	bmi.n	80056c4 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	07d1      	lsls	r1, r2, #31
 8005696:	d502      	bpl.n	800569e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	07d2      	lsls	r2, r2, #31
 800569c:	d45d      	bmi.n	800575a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	0610      	lsls	r0, r2, #24
 80056a2:	d502      	bpl.n	80056aa <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	0611      	lsls	r1, r2, #24
 80056a8:	d45f      	bmi.n	800576a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	0652      	lsls	r2, r2, #25
 80056ae:	d502      	bpl.n	80056b6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	0650      	lsls	r0, r2, #25
 80056b4:	d461      	bmi.n	800577a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	0691      	lsls	r1, r2, #26
 80056ba:	d502      	bpl.n	80056c2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	0692      	lsls	r2, r2, #26
 80056c0:	d443      	bmi.n	800574a <HAL_TIM_IRQHandler+0xee>
}
 80056c2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056c4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c8:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056ca:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056cc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80056d4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d6:	d064      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80056d8:	f7ff ffba 	bl	8005650 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056dc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056de:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e0:	7722      	strb	r2, [r4, #28]
 80056e2:	e7d6      	b.n	8005692 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e4:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056e8:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ea:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80056f2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f4:	d152      	bne.n	800579c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	f7ff ffa9 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fa:	4620      	mov	r0, r4
 80056fc:	f7ff ffaa 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005700:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005702:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005704:	7722      	strb	r2, [r4, #28]
 8005706:	e7be      	b.n	8005686 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005708:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800570c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800570e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005710:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005718:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800571a:	d13c      	bne.n	8005796 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571c:	f7ff ff96 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	4620      	mov	r0, r4
 8005722:	f7ff ff97 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005728:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	7722      	strb	r2, [r4, #28]
 800572c:	e7a5      	b.n	800567a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800572e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005732:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005734:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005736:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	079b      	lsls	r3, r3, #30
 800573c:	d025      	beq.n	800578a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800573e:	f7ff ff87 	bl	8005650 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005744:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005746:	7722      	strb	r2, [r4, #28]
 8005748:	e791      	b.n	800566e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800574a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800574e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005750:	611a      	str	r2, [r3, #16]
}
 8005752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005756:	f000 b867 	b.w	8005828 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800575a:	f06f 0201 	mvn.w	r2, #1
 800575e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005760:	4620      	mov	r0, r4
 8005762:	f7fc fd21 	bl	80021a8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	e799      	b.n	800569e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800576a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800576e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005770:	4620      	mov	r0, r4
 8005772:	f000 f85b 	bl	800582c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	e797      	b.n	80056aa <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800577a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800577e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005780:	4620      	mov	r0, r4
 8005782:	f7ff ff69 	bl	8005658 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	e795      	b.n	80056b6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	f7ff ff5f 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578e:	4620      	mov	r0, r4
 8005790:	f7ff ff60 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
 8005794:	e7d5      	b.n	8005742 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005796:	f7ff ff5b 	bl	8005650 <HAL_TIM_IC_CaptureCallback>
 800579a:	e7c4      	b.n	8005726 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800579c:	f7ff ff58 	bl	8005650 <HAL_TIM_IC_CaptureCallback>
 80057a0:	e7ae      	b.n	8005700 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	f7ff ff53 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a6:	4620      	mov	r0, r4
 80057a8:	f7ff ff54 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
 80057ac:	e796      	b.n	80056dc <HAL_TIM_IRQHandler+0x80>
 80057ae:	bf00      	nop

080057b0 <HAL_TIM_Base_GetState>:
  return htim->State;
 80057b0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop

080057b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d02f      	beq.n	8005820 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c0:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80057c2:	2202      	movs	r2, #2
{
 80057c4:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80057c6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80057ca:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057cc:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80057ce:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d8:	4a12      	ldr	r2, [pc, #72]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d012      	beq.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e2:	d00f      	beq.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057e4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057fc:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005800:	4293      	cmp	r3, r2
 8005802:	d104      	bne.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005804:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005806:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800580a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800580c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800580e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005810:	2201      	movs	r2, #1
 8005812:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005816:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800581a:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800581c:	4618      	mov	r0, r3
}
 800581e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005820:	2002      	movs	r0, #2
}
 8005822:	4770      	bx	lr
 8005824:	40010000 	.word	0x40010000

08005828 <HAL_TIMEx_CommutCallback>:
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop

0800582c <HAL_TIMEx_BreakCallback>:
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop

08005830 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005830:	2800      	cmp	r0, #0
 8005832:	f000 808f 	beq.w	8005954 <HAL_UART_Init+0x124>
{
 8005836:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005838:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800583c:	4604      	mov	r4, r0
 800583e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8081 	beq.w	800594a <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005848:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800584a:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 800584c:	2224      	movs	r2, #36	; 0x24
 800584e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005858:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800585a:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800585c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800585e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005862:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005864:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005866:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005868:	4302      	orrs	r2, r0
 800586a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800586c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800586e:	4302      	orrs	r2, r0
 8005870:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005872:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8005876:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800587a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800587c:	430a      	orrs	r2, r1
 800587e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005884:	4934      	ldr	r1, [pc, #208]	; (8005958 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005886:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800588a:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800588c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800588e:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005890:	d035      	beq.n	80058fe <HAL_UART_Init+0xce>
 8005892:	4a32      	ldr	r2, [pc, #200]	; (800595c <HAL_UART_Init+0x12c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d032      	beq.n	80058fe <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005898:	f7ff f856 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589c:	69e3      	ldr	r3, [r4, #28]
 800589e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a2:	d032      	beq.n	800590a <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058a4:	6863      	ldr	r3, [r4, #4]
 80058a6:	2119      	movs	r1, #25
 80058a8:	009a      	lsls	r2, r3, #2
 80058aa:	fba0 0101 	umull	r0, r1, r0, r1
 80058ae:	0f9b      	lsrs	r3, r3, #30
 80058b0:	f7fb f982 	bl	8000bb8 <__aeabi_uldivmod>
 80058b4:	492a      	ldr	r1, [pc, #168]	; (8005960 <HAL_UART_Init+0x130>)
 80058b6:	fba1 3200 	umull	r3, r2, r1, r0
 80058ba:	0952      	lsrs	r2, r2, #5
 80058bc:	2564      	movs	r5, #100	; 0x64
 80058be:	fb05 0012 	mls	r0, r5, r2, r0
 80058c2:	0100      	lsls	r0, r0, #4
 80058c4:	3032      	adds	r0, #50	; 0x32
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	fba1 1000 	umull	r1, r0, r1, r0
 80058cc:	0112      	lsls	r2, r2, #4
 80058ce:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 80058d2:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80058e4:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80058e8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80058ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ee:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f0:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058f2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058f6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80058fa:	4628      	mov	r0, r5
}
 80058fc:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80058fe:	f7ff f833 	bl	8004968 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005902:	69e3      	ldr	r3, [r4, #28]
 8005904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005908:	d1cc      	bne.n	80058a4 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800590a:	6862      	ldr	r2, [r4, #4]
 800590c:	2119      	movs	r1, #25
 800590e:	1892      	adds	r2, r2, r2
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	415b      	adcs	r3, r3
 8005916:	fba0 0101 	umull	r0, r1, r0, r1
 800591a:	f7fb f94d 	bl	8000bb8 <__aeabi_uldivmod>
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <HAL_UART_Init+0x130>)
 8005920:	fba3 2100 	umull	r2, r1, r3, r0
 8005924:	094d      	lsrs	r5, r1, #5
 8005926:	2264      	movs	r2, #100	; 0x64
 8005928:	fb02 0215 	mls	r2, r2, r5, r0
 800592c:	00d2      	lsls	r2, r2, #3
 800592e:	3232      	adds	r2, #50	; 0x32
 8005930:	fba3 3202 	umull	r3, r2, r3, r2
 8005934:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8005938:	0912      	lsrs	r2, r2, #4
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8005940:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005944:	440a      	add	r2, r1
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	e7c4      	b.n	80058d4 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800594a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800594e:	f7fd f9eb 	bl	8002d28 <HAL_UART_MspInit>
 8005952:	e779      	b.n	8005848 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8005954:	2001      	movs	r0, #1
}
 8005956:	4770      	bx	lr
 8005958:	40011000 	.word	0x40011000
 800595c:	40011400 	.word	0x40011400
 8005960:	51eb851f 	.word	0x51eb851f

08005964 <HAL_UART_Transmit>:
{
 8005964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005968:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800596a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800596e:	2820      	cmp	r0, #32
 8005970:	d177      	bne.n	8005a62 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8005972:	4689      	mov	r9, r1
 8005974:	2900      	cmp	r1, #0
 8005976:	d040      	beq.n	80059fa <HAL_UART_Transmit+0x96>
 8005978:	4614      	mov	r4, r2
 800597a:	2a00      	cmp	r2, #0
 800597c:	d03d      	beq.n	80059fa <HAL_UART_Transmit+0x96>
 800597e:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8005980:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d06c      	beq.n	8005a62 <HAL_UART_Transmit+0xfe>
 8005988:	2301      	movs	r3, #1
 800598a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598e:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005992:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005994:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005998:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800599c:	f7fd fbac 	bl	80030f8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a0:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 80059a2:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80059a8:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 80059aa:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ac:	d05c      	beq.n	8005a68 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 80059ae:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80059b0:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80059b2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80059b4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d07e      	beq.n	8005aba <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059bc:	682c      	ldr	r4, [r5, #0]
 80059be:	1c72      	adds	r2, r6, #1
 80059c0:	d11e      	bne.n	8005a00 <HAL_UART_Transmit+0x9c>
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	0613      	lsls	r3, r2, #24
 80059c6:	d5fc      	bpl.n	80059c2 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 80059c8:	f1b9 0f00 	cmp.w	r9, #0
 80059cc:	d044      	beq.n	8005a58 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ce:	f819 3b01 	ldrb.w	r3, [r9], #1
 80059d2:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 80059d4:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29b      	uxth	r3, r3
 80059da:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059dc:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ec      	bne.n	80059be <HAL_UART_Transmit+0x5a>
 80059e4:	1c71      	adds	r1, r6, #1
 80059e6:	d145      	bne.n	8005a74 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	065a      	lsls	r2, r3, #25
 80059ec:	d5fc      	bpl.n	80059e8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80059ee:	2320      	movs	r3, #32
 80059f0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 80059f4:	2000      	movs	r0, #0
}
 80059f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80059fa:	2001      	movs	r0, #1
}
 80059fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	0618      	lsls	r0, r3, #24
 8005a04:	d4e0      	bmi.n	80059c8 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a06:	b12e      	cbz	r6, 8005a14 <HAL_UART_Transmit+0xb0>
 8005a08:	f7fd fb76 	bl	80030f8 <HAL_GetTick>
 8005a0c:	1bc0      	subs	r0, r0, r7
 8005a0e:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a10:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a12:	d2d4      	bcs.n	80059be <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	f104 030c 	add.w	r3, r4, #12
 8005a18:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	f104 010c 	add.w	r1, r4, #12
 8005a24:	e841 3200 	strex	r2, r3, [r1]
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	d1f3      	bne.n	8005a14 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	f104 0314 	add.w	r3, r4, #20
 8005a30:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a34:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	f104 0114 	add.w	r1, r4, #20
 8005a3c:	e841 3200 	strex	r2, r3, [r1]
 8005a40:	2a00      	cmp	r2, #0
 8005a42:	d1f3      	bne.n	8005a2c <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8005a44:	2320      	movs	r3, #32
 8005a46:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8005a4a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8005a52:	2003      	movs	r0, #3
}
 8005a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a58:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a60:	e7b7      	b.n	80059d2 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8005a62:	2002      	movs	r0, #2
}
 8005a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a68:	692b      	ldr	r3, [r5, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d19f      	bne.n	80059ae <HAL_UART_Transmit+0x4a>
 8005a6e:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8005a70:	4699      	mov	r9, r3
 8005a72:	e79c      	b.n	80059ae <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	065b      	lsls	r3, r3, #25
 8005a78:	d4b9      	bmi.n	80059ee <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a7a:	b12e      	cbz	r6, 8005a88 <HAL_UART_Transmit+0x124>
 8005a7c:	f7fd fb3c 	bl	80030f8 <HAL_GetTick>
 8005a80:	1bc0      	subs	r0, r0, r7
 8005a82:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a84:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a86:	d2ad      	bcs.n	80059e4 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	f104 030c 	add.w	r3, r4, #12
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	f104 010c 	add.w	r1, r4, #12
 8005a98:	e841 3200 	strex	r2, r3, [r1]
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	d1f3      	bne.n	8005a88 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	f104 0314 	add.w	r3, r4, #20
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	f104 0114 	add.w	r1, r4, #20
 8005ab0:	e841 3200 	strex	r2, r3, [r1]
 8005ab4:	2a00      	cmp	r2, #0
 8005ab6:	d1f3      	bne.n	8005aa0 <HAL_UART_Transmit+0x13c>
 8005ab8:	e7c4      	b.n	8005a44 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aba:	682c      	ldr	r4, [r5, #0]
 8005abc:	e792      	b.n	80059e4 <HAL_UART_Transmit+0x80>
 8005abe:	bf00      	nop

08005ac0 <HAL_UART_Transmit_DMA>:
{
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8005ac8:	2820      	cmp	r0, #32
 8005aca:	d135      	bne.n	8005b38 <HAL_UART_Transmit_DMA+0x78>
    if ((pData == NULL) || (Size == 0U))
 8005acc:	b391      	cbz	r1, 8005b34 <HAL_UART_Transmit_DMA+0x74>
 8005ace:	b38a      	cbz	r2, 8005b34 <HAL_UART_Transmit_DMA+0x74>
    __HAL_LOCK(huart);
 8005ad0:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8005ad4:	2801      	cmp	r0, #1
 8005ad6:	d02f      	beq.n	8005b38 <HAL_UART_Transmit_DMA+0x78>
 8005ad8:	2001      	movs	r0, #1
    huart->TxXferCount = Size;
 8005ada:	84e2      	strh	r2, [r4, #38]	; 0x26
    __HAL_LOCK(huart);
 8005adc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    huart->TxXferSize = Size;
 8005ae0:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ae2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005ae4:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8005b44 <HAL_UART_Transmit_DMA+0x84>
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ae8:	4f14      	ldr	r7, [pc, #80]	; (8005b3c <HAL_UART_Transmit_DMA+0x7c>)
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005aea:	4e15      	ldr	r6, [pc, #84]	; (8005b40 <HAL_UART_Transmit_DMA+0x80>)
    huart->pTxBuffPtr = pData;
 8005aec:	6221      	str	r1, [r4, #32]
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005aee:	4613      	mov	r3, r2
 8005af0:	6822      	ldr	r2, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af2:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005af4:	f04f 0e21 	mov.w	lr, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	6425      	str	r5, [r4, #64]	; 0x40
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005afa:	3204      	adds	r2, #4
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afc:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b00:	e9c0 c70f 	strd	ip, r7, [r0, #60]	; 0x3c
    huart->hdmatx->XferAbortCallback = NULL;
 8005b04:	e9c0 6513 	strd	r6, r5, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005b08:	f7fd fe6c 	bl	80037e4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005b0c:	6822      	ldr	r2, [r4, #0]
 8005b0e:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8005b12:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8005b14:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	f102 0314 	add.w	r3, r2, #20
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	f102 0014 	add.w	r0, r2, #20
 8005b28:	e840 3100 	strex	r1, r3, [r0]
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	d1f3      	bne.n	8005b18 <HAL_UART_Transmit_DMA+0x58>
    return HAL_OK;
 8005b30:	2000      	movs	r0, #0
}
 8005b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8005b34:	2001      	movs	r0, #1
}
 8005b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005b38:	2002      	movs	r0, #2
}
 8005b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b3c:	08005b99 	.word	0x08005b99
 8005b40:	08005ba5 	.word	0x08005ba5
 8005b44:	08005b49 	.word	0x08005b49

08005b48 <UART_DMATransmitCplt>:
{
 8005b48:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b4a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b4c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005b54:	d11a      	bne.n	8005b8c <UART_DMATransmitCplt+0x44>
    huart->TxXferCount = 0x00U;
 8005b56:	6802      	ldr	r2, [r0, #0]
 8005b58:	84c3      	strh	r3, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	f102 0314 	add.w	r3, r2, #20
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	f102 0014 	add.w	r0, r2, #20
 8005b6a:	e840 3100 	strex	r1, r3, [r0]
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	d1f3      	bne.n	8005b5a <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	f102 030c 	add.w	r3, r2, #12
 8005b76:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	f102 000c 	add.w	r0, r2, #12
 8005b82:	e840 3100 	strex	r1, r3, [r0]
 8005b86:	2900      	cmp	r1, #0
 8005b88:	d1f3      	bne.n	8005b72 <UART_DMATransmitCplt+0x2a>
}
 8005b8a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005b8c:	f7fd fa10 	bl	8002fb0 <HAL_UART_TxCpltCallback>
}
 8005b90:	bd08      	pop	{r3, pc}
 8005b92:	bf00      	nop

08005b94 <HAL_UART_TxHalfCpltCallback>:
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop

08005b98 <UART_DMATxHalfCplt>:
{
 8005b98:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005b9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005b9c:	f7ff fffa 	bl	8005b94 <HAL_UART_TxHalfCpltCallback>
}
 8005ba0:	bd08      	pop	{r3, pc}
 8005ba2:	bf00      	nop

08005ba4 <UART_DMAError>:
{
 8005ba4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ba6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ba8:	6803      	ldr	r3, [r0, #0]
 8005baa:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bac:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8005bb0:	2a21      	cmp	r2, #33	; 0x21
 8005bb2:	d00b      	beq.n	8005bcc <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb4:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005bb6:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8005bba:	2a22      	cmp	r2, #34	; 0x22
 8005bbc:	d01e      	beq.n	8005bfc <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bbe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005bc0:	f043 0310 	orr.w	r3, r3, #16
 8005bc4:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8005bc6:	f7fd f9e7 	bl	8002f98 <HAL_UART_ErrorCallback>
}
 8005bca:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bcc:	0609      	lsls	r1, r1, #24
 8005bce:	d5f1      	bpl.n	8005bb4 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	f103 020c 	add.w	r2, r3, #12
 8005bd8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bdc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	f103 0c0c 	add.w	ip, r3, #12
 8005be4:	e84c 2100 	strex	r1, r2, [ip]
 8005be8:	2900      	cmp	r1, #0
 8005bea:	d1f3      	bne.n	8005bd4 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8005bec:	2220      	movs	r2, #32
 8005bee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf2:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005bf4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8005bf8:	2a22      	cmp	r2, #34	; 0x22
 8005bfa:	d1e0      	bne.n	8005bbe <UART_DMAError+0x1a>
 8005bfc:	064a      	lsls	r2, r1, #25
 8005bfe:	d5de      	bpl.n	8005bbe <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8005c00:	2200      	movs	r2, #0
 8005c02:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	f103 020c 	add.w	r2, r3, #12
 8005c08:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	f103 0c0c 	add.w	ip, r3, #12
 8005c14:	e84c 2100 	strex	r1, r2, [ip]
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	d1f3      	bne.n	8005c04 <UART_DMAError+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	f103 0214 	add.w	r2, r3, #20
 8005c20:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	f103 0c14 	add.w	ip, r3, #20
 8005c2c:	e84c 2100 	strex	r1, r2, [ip]
 8005c30:	2900      	cmp	r1, #0
 8005c32:	d1f3      	bne.n	8005c1c <UART_DMAError+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c34:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005c36:	2a01      	cmp	r2, #1
 8005c38:	d005      	beq.n	8005c46 <UART_DMAError+0xa2>
  huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005c3e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c42:	6303      	str	r3, [r0, #48]	; 0x30
}
 8005c44:	e7bb      	b.n	8005bbe <UART_DMAError+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	f103 020c 	add.w	r2, r3, #12
 8005c4a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c4e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	f103 0c0c 	add.w	ip, r3, #12
 8005c56:	e84c 2100 	strex	r1, r2, [ip]
 8005c5a:	2900      	cmp	r1, #0
 8005c5c:	d1f3      	bne.n	8005c46 <UART_DMAError+0xa2>
 8005c5e:	e7ec      	b.n	8005c3a <UART_DMAError+0x96>

08005c60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c60:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005c62:	4903      	ldr	r1, [pc, #12]	; (8005c70 <MX_FATFS_Init+0x10>)
 8005c64:	4803      	ldr	r0, [pc, #12]	; (8005c74 <MX_FATFS_Init+0x14>)
 8005c66:	f001 fd8b 	bl	8007780 <FATFS_LinkDriver>
 8005c6a:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <MX_FATFS_Init+0x18>)
 8005c6c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c6e:	bd08      	pop	{r3, pc}
 8005c70:	20002f24 	.word	0x20002f24
 8005c74:	20000014 	.word	0x20000014
 8005c78:	20002f28 	.word	0x20002f28

08005c7c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	4770      	bx	lr

08005c80 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8005c80:	f7fb bcda 	b.w	8001638 <SD_disk_initialize>

08005c84 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8005c84:	f7fb bde8 	b.w	8001858 <SD_disk_status>

08005c88 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005c88:	f7fb bdf0 	b.w	800186c <SD_disk_read>

08005c8c <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8005c8c:	f7fb bf38 	b.w	8001b00 <SD_disk_write>

08005c90 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8005c90:	f7fc b92a 	b.w	8001ee8 <SD_disk_ioctl>

08005c94 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c94:	4b03      	ldr	r3, [pc, #12]	; (8005ca4 <disk_status+0x10>)
 8005c96:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005c9a:	4403      	add	r3, r0
 8005c9c:	6852      	ldr	r2, [r2, #4]
 8005c9e:	7a18      	ldrb	r0, [r3, #8]
 8005ca0:	6853      	ldr	r3, [r2, #4]
 8005ca2:	4718      	bx	r3
 8005ca4:	20002f54 	.word	0x20002f54

08005ca8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <disk_initialize+0x1c>)
 8005caa:	5c1a      	ldrb	r2, [r3, r0]
 8005cac:	b942      	cbnz	r2, 8005cc0 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005cae:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005cb6:	6852      	ldr	r2, [r2, #4]
 8005cb8:	4418      	add	r0, r3
 8005cba:	6813      	ldr	r3, [r2, #0]
 8005cbc:	7a00      	ldrb	r0, [r0, #8]
 8005cbe:	4718      	bx	r3
  }
  return stat;
}
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	4770      	bx	lr
 8005cc4:	20002f54 	.word	0x20002f54

08005cc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005cc8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005cca:	4c05      	ldr	r4, [pc, #20]	; (8005ce0 <disk_read+0x18>)
 8005ccc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8005cd0:	4404      	add	r4, r0
 8005cd2:	686d      	ldr	r5, [r5, #4]
 8005cd4:	7a20      	ldrb	r0, [r4, #8]
 8005cd6:	68ac      	ldr	r4, [r5, #8]
 8005cd8:	46a4      	mov	ip, r4
  return res;
}
 8005cda:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005cdc:	4760      	bx	ip
 8005cde:	bf00      	nop
 8005ce0:	20002f54 	.word	0x20002f54

08005ce4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005ce4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ce6:	4c05      	ldr	r4, [pc, #20]	; (8005cfc <disk_write+0x18>)
 8005ce8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8005cec:	4404      	add	r4, r0
 8005cee:	686d      	ldr	r5, [r5, #4]
 8005cf0:	7a20      	ldrb	r0, [r4, #8]
 8005cf2:	68ec      	ldr	r4, [r5, #12]
 8005cf4:	46a4      	mov	ip, r4
  return res;
}
 8005cf6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005cf8:	4760      	bx	ip
 8005cfa:	bf00      	nop
 8005cfc:	20002f54 	.word	0x20002f54

08005d00 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <disk_ioctl+0x14>)
 8005d02:	eb03 0c00 	add.w	ip, r3, r0
 8005d06:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005d0a:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	4718      	bx	r3
 8005d14:	20002f54 	.word	0x20002f54

08005d18 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8005d18:	4b2a      	ldr	r3, [pc, #168]	; (8005dc4 <inc_lock+0xac>)
{
 8005d1a:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	6805      	ldr	r5, [r0, #0]
 8005d20:	4295      	cmp	r5, r2
 8005d22:	d01d      	beq.n	8005d60 <inc_lock+0x48>
 8005d24:	691c      	ldr	r4, [r3, #16]
 8005d26:	42ac      	cmp	r4, r5
 8005d28:	d007      	beq.n	8005d3a <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d2a:	2a00      	cmp	r2, #0
 8005d2c:	d02e      	beq.n	8005d8c <inc_lock+0x74>
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d044      	beq.n	8005dbc <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005d32:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 8005d34:	4620      	mov	r0, r4
 8005d36:	bcf0      	pop	{r4, r5, r6, r7}
 8005d38:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 8005d3a:	695e      	ldr	r6, [r3, #20]
 8005d3c:	6887      	ldr	r7, [r0, #8]
 8005d3e:	42be      	cmp	r6, r7
 8005d40:	d1f3      	bne.n	8005d2a <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 8005d42:	699e      	ldr	r6, [r3, #24]
 8005d44:	6947      	ldr	r7, [r0, #20]
 8005d46:	42be      	cmp	r6, r7
 8005d48:	d1ef      	bne.n	8005d2a <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d4a:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d4c:	b999      	cbnz	r1, 8005d76 <inc_lock+0x5e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d4e:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 8005d52:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8005d56:	8989      	ldrh	r1, [r1, #12]
	return i + 1;
 8005d58:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d5a:	1c4a      	adds	r2, r1, #1
 8005d5c:	b292      	uxth	r2, r2
 8005d5e:	e028      	b.n	8005db2 <inc_lock+0x9a>
		if (Files[i].fs == dp->obj.fs &&
 8005d60:	6884      	ldr	r4, [r0, #8]
 8005d62:	685e      	ldr	r6, [r3, #4]
 8005d64:	42a6      	cmp	r6, r4
 8005d66:	d1dd      	bne.n	8005d24 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 8005d68:	689c      	ldr	r4, [r3, #8]
 8005d6a:	6946      	ldr	r6, [r0, #20]
 8005d6c:	42a6      	cmp	r6, r4
 8005d6e:	d1d9      	bne.n	8005d24 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d70:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d72:	2900      	cmp	r1, #0
 8005d74:	d0eb      	beq.n	8005d4e <inc_lock+0x36>
 8005d76:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 8005d7a:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8005d7e:	8989      	ldrh	r1, [r1, #12]
 8005d80:	2900      	cmp	r1, #0
 8005d82:	d1d6      	bne.n	8005d32 <inc_lock+0x1a>
	return i + 1;
 8005d84:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d8a:	e012      	b.n	8005db2 <inc_lock+0x9a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d8c:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d8e:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 8005d90:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8005d94:	eb03 1102 	add.w	r1, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 8005d98:	6942      	ldr	r2, [r0, #20]
 8005d9a:	6880      	ldr	r0, [r0, #8]
		Files[i].fs = dp->obj.fs;
 8005d9c:	f843 500c 	str.w	r5, [r3, ip]
		Files[i].clu = dp->obj.sclust;
 8005da0:	e9c1 0201 	strd	r0, r2, [r1, #4]
		Files[i].ctr = 0;
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005daa:	bf14      	ite	ne
 8005dac:	f44f 7280 	movne.w	r2, #256	; 0x100
 8005db0:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005db2:	4463      	add	r3, ip
}
 8005db4:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005db6:	819a      	strh	r2, [r3, #12]
}
 8005db8:	bcf0      	pop	{r4, r5, r6, r7}
 8005dba:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005dbc:	2402      	movs	r4, #2
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	e7e5      	b.n	8005d8e <inc_lock+0x76>
 8005dc2:	bf00      	nop
 8005dc4:	20002f30 	.word	0x20002f30

08005dc8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005dc8:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005dca:	f04f 36ff 	mov.w	r6, #4294967295
 8005dce:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dd0:	42b1      	cmp	r1, r6
{
 8005dd2:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005dd4:	70c3      	strb	r3, [r0, #3]
 8005dd6:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dd8:	d00c      	beq.n	8005df4 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005dda:	460d      	mov	r5, r1
 8005ddc:	460a      	mov	r2, r1
 8005dde:	7840      	ldrb	r0, [r0, #1]
 8005de0:	2301      	movs	r3, #1
 8005de2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8005de6:	f7ff ff6f 	bl	8005cc8 <disk_read>
 8005dea:	b110      	cbz	r0, 8005df2 <check_fs+0x2a>
			fs->winsect = sector;
 8005dec:	6326      	str	r6, [r4, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005dee:	2004      	movs	r0, #4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8005df0:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8005df2:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005df4:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8005df8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d11a      	bne.n	8005e36 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005e00:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005e04:	2be9      	cmp	r3, #233	; 0xe9
 8005e06:	d007      	beq.n	8005e18 <check_fs+0x50>
 8005e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e0a:	4a0d      	ldr	r2, [pc, #52]	; (8005e40 <check_fs+0x78>)
 8005e0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d001      	beq.n	8005e18 <check_fs+0x50>
	return 2;
 8005e14:	2002      	movs	r0, #2
}
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 8005e18:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005e1c:	4a09      	ldr	r2, [pc, #36]	; (8005e44 <check_fs+0x7c>)
 8005e1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d009      	beq.n	8005e3a <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 8005e26:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005e2a:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <check_fs+0x80>)
 8005e2c:	4298      	cmp	r0, r3
 8005e2e:	bf14      	ite	ne
 8005e30:	2002      	movne	r0, #2
 8005e32:	2000      	moveq	r0, #0
}
 8005e34:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005e36:	2003      	movs	r0, #3
}
 8005e38:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005e3a:	2000      	movs	r0, #0
}
 8005e3c:	bd70      	pop	{r4, r5, r6, pc}
 8005e3e:	bf00      	nop
 8005e40:	009000eb 	.word	0x009000eb
 8005e44:	00544146 	.word	0x00544146
 8005e48:	33544146 	.word	0x33544146

08005e4c <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8005e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e4e:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8005e50:	b083      	sub	sp, #12
 8005e52:	4604      	mov	r4, r0
 8005e54:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e56:	b973      	cbnz	r3, 8005e76 <move_window.part.0+0x2a>
 8005e58:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e5c:	462a      	mov	r2, r5
 8005e5e:	7860      	ldrb	r0, [r4, #1]
 8005e60:	2301      	movs	r3, #1
 8005e62:	f7ff ff31 	bl	8005cc8 <disk_read>
				res = FR_DISK_ERR;
 8005e66:	2800      	cmp	r0, #0
 8005e68:	bf1c      	itt	ne
 8005e6a:	2001      	movne	r0, #1
 8005e6c:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 8005e70:	6325      	str	r5, [r4, #48]	; 0x30
}
 8005e72:	b003      	add	sp, #12
 8005e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8005e76:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e78:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	7840      	ldrb	r0, [r0, #1]
 8005e80:	9101      	str	r1, [sp, #4]
 8005e82:	4632      	mov	r2, r6
 8005e84:	f7ff ff2e 	bl	8005ce4 <disk_write>
 8005e88:	b9b8      	cbnz	r0, 8005eba <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e8c:	69e3      	ldr	r3, [r4, #28]
 8005e8e:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 8005e90:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e92:	1ab2      	subs	r2, r6, r2
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d2e1      	bcs.n	8005e5c <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e98:	78a7      	ldrb	r7, [r4, #2]
 8005e9a:	2f01      	cmp	r7, #1
 8005e9c:	d801      	bhi.n	8005ea2 <move_window.part.0+0x56>
 8005e9e:	e7dd      	b.n	8005e5c <move_window.part.0+0x10>
					wsect += fs->fsize;
 8005ea0:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005ea2:	7860      	ldrb	r0, [r4, #1]
 8005ea4:	9101      	str	r1, [sp, #4]
					wsect += fs->fsize;
 8005ea6:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005eac:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8005eae:	f7ff ff19 	bl	8005ce4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005eb2:	2f01      	cmp	r7, #1
 8005eb4:	9901      	ldr	r1, [sp, #4]
 8005eb6:	d1f3      	bne.n	8005ea0 <move_window.part.0+0x54>
 8005eb8:	e7d0      	b.n	8005e5c <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8005eba:	2001      	movs	r0, #1
}
 8005ebc:	b003      	add	sp, #12
 8005ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ec0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (*path) {	/* If the pointer is not a null */
 8005ec4:	6805      	ldr	r5, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8005eca:	b175      	cbz	r5, 8005eea <find_volume+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005ecc:	782c      	ldrb	r4, [r5, #0]
 8005ece:	2c20      	cmp	r4, #32
 8005ed0:	d914      	bls.n	8005efc <find_volume+0x3c>
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	46ac      	mov	ip, r5
 8005ed6:	e003      	b.n	8005ee0 <find_volume+0x20>
 8005ed8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d90d      	bls.n	8005efc <find_volume+0x3c>
 8005ee0:	2b3a      	cmp	r3, #58	; 0x3a
 8005ee2:	d1f9      	bne.n	8005ed8 <find_volume+0x18>
			i = *tp++ - '0';
 8005ee4:	3501      	adds	r5, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005ee6:	45ac      	cmp	ip, r5
 8005ee8:	d003      	beq.n	8005ef2 <find_volume+0x32>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8005eea:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8005eec:	4620      	mov	r0, r4
 8005eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005ef2:	2c30      	cmp	r4, #48	; 0x30
 8005ef4:	d1f9      	bne.n	8005eea <find_volume+0x2a>
					*path = ++tt;
 8005ef6:	f10c 0301 	add.w	r3, ip, #1
 8005efa:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005efc:	4bb5      	ldr	r3, [pc, #724]	; (80061d4 <find_volume+0x314>)
 8005efe:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	f000 80f8 	beq.w	80060f6 <find_volume+0x236>
	*rfs = fs;							/* Return pointer to the file system object */
 8005f06:	600d      	str	r5, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005f08:	782b      	ldrb	r3, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005f0a:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005f0e:	b17b      	cbz	r3, 8005f30 <find_volume+0x70>
		stat = disk_status(fs->drv);
 8005f10:	7868      	ldrb	r0, [r5, #1]
 8005f12:	f7ff febf 	bl	8005c94 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005f16:	07c1      	lsls	r1, r0, #31
 8005f18:	d40a      	bmi.n	8005f30 <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005f1a:	2c00      	cmp	r4, #0
 8005f1c:	f000 80e4 	beq.w	80060e8 <find_volume+0x228>
 8005f20:	f010 0404 	ands.w	r4, r0, #4
 8005f24:	f000 80e0 	beq.w	80060e8 <find_volume+0x228>
				return FR_WRITE_PROTECTED;
 8005f28:	240a      	movs	r4, #10
}
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8005f30:	2000      	movs	r0, #0
 8005f32:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005f34:	f7ff feb8 	bl	8005ca8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005f38:	07c2      	lsls	r2, r0, #31
 8005f3a:	f100 80d8 	bmi.w	80060ee <find_volume+0x22e>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005f3e:	b10c      	cbz	r4, 8005f44 <find_volume+0x84>
 8005f40:	0743      	lsls	r3, r0, #29
 8005f42:	d4f1      	bmi.n	8005f28 <find_volume+0x68>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005f44:	7868      	ldrb	r0, [r5, #1]
 8005f46:	f105 020c 	add.w	r2, r5, #12
 8005f4a:	2102      	movs	r1, #2
 8005f4c:	f7ff fed8 	bl	8005d00 <disk_ioctl>
 8005f50:	4604      	mov	r4, r0
 8005f52:	2800      	cmp	r0, #0
 8005f54:	f040 80c7 	bne.w	80060e6 <find_volume+0x226>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005f58:	89ab      	ldrh	r3, [r5, #12]
 8005f5a:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8005f5e:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8005f62:	f200 80c0 	bhi.w	80060e6 <find_volume+0x226>
 8005f66:	1e5a      	subs	r2, r3, #1
 8005f68:	421a      	tst	r2, r3
 8005f6a:	f040 80bc 	bne.w	80060e6 <find_volume+0x226>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005f6e:	4601      	mov	r1, r0
 8005f70:	4628      	mov	r0, r5
 8005f72:	f7ff ff29 	bl	8005dc8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f76:	2802      	cmp	r0, #2
 8005f78:	f000 808e 	beq.w	8006098 <find_volume+0x1d8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005f7c:	2804      	cmp	r0, #4
 8005f7e:	f000 80b2 	beq.w	80060e6 <find_volume+0x226>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005f82:	2801      	cmp	r0, #1
	bsect = 0;
 8005f84:	bf98      	it	ls
 8005f86:	4626      	movls	r6, r4
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005f88:	f200 80b7 	bhi.w	80060fa <find_volume+0x23a>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005f8c:	89a8      	ldrh	r0, [r5, #12]
 8005f8e:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 8005f92:	4283      	cmp	r3, r0
 8005f94:	f040 80b1 	bne.w	80060fa <find_volume+0x23a>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005f98:	f8b5 c04a 	ldrh.w	ip, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005f9c:	f1bc 0f00 	cmp.w	ip, #0
 8005fa0:	d101      	bne.n	8005fa6 <find_volume+0xe6>
	rv = rv << 8 | ptr[0];
 8005fa2:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005fa6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 8005faa:	f8c5 c01c 	str.w	ip, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005fae:	1e5a      	subs	r2, r3, #1
 8005fb0:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005fb2:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005fb4:	f200 80a1 	bhi.w	80060fa <find_volume+0x23a>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005fb8:	f895 8041 	ldrb.w	r8, [r5, #65]	; 0x41
 8005fbc:	fa1f f288 	uxth.w	r2, r8
 8005fc0:	816a      	strh	r2, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005fc2:	2a00      	cmp	r2, #0
 8005fc4:	f000 8099 	beq.w	80060fa <find_volume+0x23a>
 8005fc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8005fcc:	ea12 0f08 	tst.w	r2, r8
 8005fd0:	f040 8093 	bne.w	80060fa <find_volume+0x23a>
	rv = ptr[1];
 8005fd4:	f8b5 e045 	ldrh.w	lr, [r5, #69]	; 0x45
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005fd8:	f8a5 e008 	strh.w	lr, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005fdc:	0942      	lsrs	r2, r0, #5
 8005fde:	fbbe faf2 	udiv	sl, lr, r2
 8005fe2:	fb02 e21a 	mls	r2, r2, sl, lr
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	f040 8086 	bne.w	80060fa <find_volume+0x23a>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005fee:	f8b5 9047 	ldrh.w	r9, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005ff2:	f1b9 0f00 	cmp.w	r9, #0
 8005ff6:	d101      	bne.n	8005ffc <find_volume+0x13c>
	rv = rv << 8 | ptr[0];
 8005ff8:	f8d5 9054 	ldr.w	r9, [r5, #84]	; 0x54
	rv = ptr[1];
 8005ffc:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006000:	2900      	cmp	r1, #0
 8006002:	d07a      	beq.n	80060fa <find_volume+0x23a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006004:	fb0c f703 	mul.w	r7, ip, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006008:	eb0a 0201 	add.w	r2, sl, r1
 800600c:	443a      	add	r2, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800600e:	4591      	cmp	r9, r2
 8006010:	d373      	bcc.n	80060fa <find_volume+0x23a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006012:	eba9 0902 	sub.w	r9, r9, r2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006016:	45c1      	cmp	r9, r8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006018:	fbb9 f3f8 	udiv	r3, r9, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800601c:	d36d      	bcc.n	80060fa <find_volume+0x23a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800601e:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 8006022:	4543      	cmp	r3, r8
 8006024:	f200 8087 	bhi.w	8006136 <find_volume+0x276>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006028:	f640 78f5 	movw	r8, #4085	; 0xff5
 800602c:	4543      	cmp	r3, r8
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800602e:	4431      	add	r1, r6
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006030:	f103 0302 	add.w	r3, r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8006034:	4432      	add	r2, r6
		fs->volbase = bsect;							/* Volume start sector */
 8006036:	622e      	str	r6, [r5, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006038:	62ea      	str	r2, [r5, #44]	; 0x2c
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800603a:	61ab      	str	r3, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800603c:	6269      	str	r1, [r5, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800603e:	f200 809b 	bhi.w	8006178 <find_volume+0x2b8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006042:	f1be 0f00 	cmp.w	lr, #0
 8006046:	d058      	beq.n	80060fa <find_volume+0x23a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006048:	4439      	add	r1, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800604a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800604e:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006052:	62a9      	str	r1, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006054:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006058:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800605a:	1e42      	subs	r2, r0, #1
 800605c:	4413      	add	r3, r2
 800605e:	fbb3 f0f0 	udiv	r0, r3, r0
 8006062:	4584      	cmp	ip, r0
 8006064:	d349      	bcc.n	80060fa <find_volume+0x23a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006066:	f04f 33ff 	mov.w	r3, #4294967295
 800606a:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 800606e:	2280      	movs	r2, #128	; 0x80
 8006070:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8006072:	4859      	ldr	r0, [pc, #356]	; (80061d8 <find_volume+0x318>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006074:	4a59      	ldr	r2, [pc, #356]	; (80061dc <find_volume+0x31c>)
	fs->id = ++Fsid;		/* File system mount ID */
 8006076:	8803      	ldrh	r3, [r0, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 8006078:	7029      	strb	r1, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800607a:	3301      	adds	r3, #1
 800607c:	b29b      	uxth	r3, r3
 800607e:	8003      	strh	r3, [r0, #0]
 8006080:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	42ab      	cmp	r3, r5
 8006086:	bf04      	itt	eq
 8006088:	2300      	moveq	r3, #0
 800608a:	6013      	streq	r3, [r2, #0]
 800608c:	6913      	ldr	r3, [r2, #16]
 800608e:	429d      	cmp	r5, r3
 8006090:	d12a      	bne.n	80060e8 <find_volume+0x228>
 8006092:	2300      	movs	r3, #0
 8006094:	6113      	str	r3, [r2, #16]
 8006096:	e027      	b.n	80060e8 <find_volume+0x228>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006098:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
 800609c:	2b00      	cmp	r3, #0
 800609e:	d048      	beq.n	8006132 <find_volume+0x272>
	rv = rv << 8 | ptr[0];
 80060a0:	f8d5 91fa 	ldr.w	r9, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80060a4:	f895 3206 	ldrb.w	r3, [r5, #518]	; 0x206
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d040      	beq.n	800612e <find_volume+0x26e>
	rv = rv << 8 | ptr[0];
 80060ac:	f8d5 820a 	ldr.w	r8, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80060b0:	f895 7216 	ldrb.w	r7, [r5, #534]	; 0x216
 80060b4:	b10f      	cbz	r7, 80060ba <find_volume+0x1fa>
	rv = rv << 8 | ptr[0];
 80060b6:	f8d5 721a 	ldr.w	r7, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80060ba:	f895 6226 	ldrb.w	r6, [r5, #550]	; 0x226
 80060be:	b10e      	cbz	r6, 80060c4 <find_volume+0x204>
	rv = rv << 8 | ptr[0];
 80060c0:	f8d5 622a 	ldr.w	r6, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80060c4:	f1b9 0f00 	cmp.w	r9, #0
 80060c8:	d121      	bne.n	800610e <find_volume+0x24e>
 80060ca:	f1b8 0f00 	cmp.w	r8, #0
 80060ce:	d116      	bne.n	80060fe <find_volume+0x23e>
 80060d0:	bb2f      	cbnz	r7, 800611e <find_volume+0x25e>
 80060d2:	b196      	cbz	r6, 80060fa <find_volume+0x23a>
 80060d4:	4631      	mov	r1, r6
 80060d6:	4628      	mov	r0, r5
 80060d8:	f7ff fe76 	bl	8005dc8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80060dc:	2801      	cmp	r0, #1
 80060de:	f67f af55 	bls.w	8005f8c <find_volume+0xcc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80060e2:	2804      	cmp	r0, #4
 80060e4:	d109      	bne.n	80060fa <find_volume+0x23a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80060e6:	2401      	movs	r4, #1
}
 80060e8:	4620      	mov	r0, r4
 80060ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80060ee:	2403      	movs	r4, #3
}
 80060f0:	4620      	mov	r0, r4
 80060f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80060f6:	240c      	movs	r4, #12
 80060f8:	e7f6      	b.n	80060e8 <find_volume+0x228>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80060fa:	240d      	movs	r4, #13
 80060fc:	e7f4      	b.n	80060e8 <find_volume+0x228>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80060fe:	4641      	mov	r1, r8
 8006100:	4628      	mov	r0, r5
 8006102:	f7ff fe61 	bl	8005dc8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006106:	2801      	cmp	r0, #1
 8006108:	d8e2      	bhi.n	80060d0 <find_volume+0x210>
 800610a:	4646      	mov	r6, r8
 800610c:	e73e      	b.n	8005f8c <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800610e:	4649      	mov	r1, r9
 8006110:	4628      	mov	r0, r5
 8006112:	f7ff fe59 	bl	8005dc8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006116:	2801      	cmp	r0, #1
 8006118:	d8d7      	bhi.n	80060ca <find_volume+0x20a>
 800611a:	464e      	mov	r6, r9
 800611c:	e736      	b.n	8005f8c <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800611e:	4639      	mov	r1, r7
 8006120:	4628      	mov	r0, r5
 8006122:	f7ff fe51 	bl	8005dc8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006126:	2801      	cmp	r0, #1
 8006128:	d8d3      	bhi.n	80060d2 <find_volume+0x212>
 800612a:	463e      	mov	r6, r7
 800612c:	e72e      	b.n	8005f8c <find_volume+0xcc>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800612e:	4698      	mov	r8, r3
 8006130:	e7be      	b.n	80060b0 <find_volume+0x1f0>
 8006132:	46a1      	mov	r9, r4
 8006134:	e7b6      	b.n	80060a4 <find_volume+0x1e4>
		fs->database = bsect + sysect;					/* Data start sector */
 8006136:	4432      	add	r2, r6
 8006138:	62ea      	str	r2, [r5, #44]	; 0x2c
	rv = rv << 8 | ptr[0];
 800613a:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
		fs->volbase = bsect;							/* Volume start sector */
 800613e:	622e      	str	r6, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006140:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006142:	4431      	add	r1, r6
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006144:	ea52 020e 	orrs.w	r2, r2, lr
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006148:	6269      	str	r1, [r5, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800614a:	61ab      	str	r3, [r5, #24]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800614c:	d1d5      	bne.n	80060fa <find_volume+0x23a>
	rv = rv << 8 | ptr[0];
 800614e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006150:	62aa      	str	r2, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006152:	1e42      	subs	r2, r0, #1
 8006154:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006158:	fbb3 f0f0 	udiv	r0, r3, r0
 800615c:	4584      	cmp	ip, r0
 800615e:	d3cc      	bcc.n	80060fa <find_volume+0x23a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006160:	f04f 33ff 	mov.w	r3, #4294967295
 8006164:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006168:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
		fs->fsi_flag = 0x80;
 800616c:	2280      	movs	r2, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800616e:	2b01      	cmp	r3, #1
		fs->fsi_flag = 0x80;
 8006170:	712a      	strb	r2, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006172:	d009      	beq.n	8006188 <find_volume+0x2c8>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006174:	2103      	movs	r1, #3
 8006176:	e77c      	b.n	8006072 <find_volume+0x1b2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006178:	f1be 0f00 	cmp.w	lr, #0
 800617c:	d0bd      	beq.n	80060fa <find_volume+0x23a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800617e:	4439      	add	r1, r7
 8006180:	62a9      	str	r1, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	2102      	movs	r1, #2
 8006186:	e768      	b.n	800605a <find_volume+0x19a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006188:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			&& move_window(fs, bsect + 1) == FR_OK)
 800618a:	1c71      	adds	r1, r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800618c:	4299      	cmp	r1, r3
 800618e:	d004      	beq.n	800619a <find_volume+0x2da>
 8006190:	4628      	mov	r0, r5
 8006192:	f7ff fe5b 	bl	8005e4c <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006196:	2800      	cmp	r0, #0
 8006198:	d1ec      	bne.n	8006174 <find_volume+0x2b4>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800619a:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
 800619e:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 80061a2:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80061a4:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 80061a6:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80061a8:	d1e4      	bne.n	8006174 <find_volume+0x2b4>
	rv = rv << 8 | ptr[0];
 80061aa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80061ac:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <find_volume+0x320>)
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d1e0      	bne.n	8006174 <find_volume+0x2b4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80061b2:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 80061b6:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80061ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80061be:	3320      	adds	r3, #32
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d1d7      	bne.n	8006174 <find_volume+0x2b4>
	rv = rv << 8 | ptr[0];
 80061c4:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80061c8:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 80061cc:	e9c5 2304 	strd	r2, r3, [r5, #16]
 80061d0:	e7d0      	b.n	8006174 <find_volume+0x2b4>
 80061d2:	bf00      	nop
 80061d4:	20002f2c 	.word	0x20002f2c
 80061d8:	20002f50 	.word	0x20002f50
 80061dc:	20002f30 	.word	0x20002f30
 80061e0:	41615252 	.word	0x41615252

080061e4 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 80061e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 80061e8:	7803      	ldrb	r3, [r0, #0]
 80061ea:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 80061ec:	4604      	mov	r4, r0
 80061ee:	460d      	mov	r5, r1
 80061f0:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 80061f2:	d006      	beq.n	8006202 <put_fat.part.0+0x1e>
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d05f      	beq.n	80062b8 <put_fat.part.0+0xd4>
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d021      	beq.n	8006240 <put_fat.part.0+0x5c>
 80061fc:	2002      	movs	r0, #2
}
 80061fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006202:	8987      	ldrh	r7, [r0, #12]
 8006204:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006206:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006208:	0879      	lsrs	r1, r7, #1
 800620a:	fbb5 f1f1 	udiv	r1, r5, r1
 800620e:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006210:	4299      	cmp	r1, r3
 8006212:	d004      	beq.n	800621e <put_fat.part.0+0x3a>
 8006214:	f7ff fe1a 	bl	8005e4c <move_window.part.0>
			if (res != FR_OK) break;
 8006218:	2800      	cmp	r0, #0
 800621a:	d1f0      	bne.n	80061fe <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800621c:	89a7      	ldrh	r7, [r4, #12]
 800621e:	006d      	lsls	r5, r5, #1
 8006220:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8006224:	fbb5 f2f7 	udiv	r2, r5, r7
 8006228:	fb07 5512 	mls	r5, r7, r2, r5
 800622c:	1959      	adds	r1, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800622e:	555e      	strb	r6, [r3, r5]
 8006230:	f3c6 2607 	ubfx	r6, r6, #8, #8
			fs->wflag = 1;
 8006234:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8006236:	704e      	strb	r6, [r1, #1]
			fs->wflag = 1;
 8006238:	70e3      	strb	r3, [r4, #3]
			break;
 800623a:	2000      	movs	r0, #0
}
 800623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bc = (UINT)clst; bc += bc / 2;
 8006240:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006244:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006246:	6b02      	ldr	r2, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006248:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800624c:	fbb7 f3fc 	udiv	r3, r7, ip
 8006250:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006252:	4291      	cmp	r1, r2
 8006254:	d007      	beq.n	8006266 <put_fat.part.0+0x82>
 8006256:	f7ff fdf9 	bl	8005e4c <move_window.part.0>
			if (res != FR_OK) break;
 800625a:	2800      	cmp	r0, #0
 800625c:	d1cf      	bne.n	80061fe <put_fat.part.0+0x1a>
			p = fs->win + bc++ % SS(fs);
 800625e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8006262:	fbb7 f3fc 	udiv	r3, r7, ip
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006266:	07ea      	lsls	r2, r5, #31
			p = fs->win + bc++ % SS(fs);
 8006268:	fb0c 7313 	mls	r3, ip, r3, r7
 800626c:	f104 0834 	add.w	r8, r4, #52	; 0x34
 8006270:	f107 0701 	add.w	r7, r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006274:	d548      	bpl.n	8006308 <put_fat.part.0+0x124>
 8006276:	f818 2003 	ldrb.w	r2, [r8, r3]
 800627a:	f002 020f 	and.w	r2, r2, #15
 800627e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8006282:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006286:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006288:	6b22      	ldr	r2, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800628a:	89a0      	ldrh	r0, [r4, #12]
			fs->wflag = 1;
 800628c:	2301      	movs	r3, #1
 800628e:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006290:	fbb7 f3f0 	udiv	r3, r7, r0
 8006294:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006296:	4291      	cmp	r1, r2
 8006298:	d05b      	beq.n	8006352 <put_fat.part.0+0x16e>
 800629a:	4620      	mov	r0, r4
 800629c:	f7ff fdd6 	bl	8005e4c <move_window.part.0>
			if (res != FR_OK) break;
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d1ac      	bne.n	80061fe <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 80062a4:	89a2      	ldrh	r2, [r4, #12]
 80062a6:	fbb7 f3f2 	udiv	r3, r7, r2
 80062aa:	fb02 7713 	mls	r7, r2, r3, r7
 80062ae:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80062b2:	f3c6 1607 	ubfx	r6, r6, #4, #8
 80062b6:	e046      	b.n	8006346 <put_fat.part.0+0x162>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062b8:	8987      	ldrh	r7, [r0, #12]
 80062ba:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80062bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062be:	08b9      	lsrs	r1, r7, #2
 80062c0:	fbb5 f1f1 	udiv	r1, r5, r1
 80062c4:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80062c6:	4299      	cmp	r1, r3
 80062c8:	d004      	beq.n	80062d4 <put_fat.part.0+0xf0>
 80062ca:	f7ff fdbf 	bl	8005e4c <move_window.part.0>
			if (res != FR_OK) break;
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d195      	bne.n	80061fe <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062d2:	89a7      	ldrh	r7, [r4, #12]
 80062d4:	00ad      	lsls	r5, r5, #2
 80062d6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80062da:	fbb5 f3f7 	udiv	r3, r5, r7
 80062de:	fb07 5513 	mls	r5, r7, r3, r5
 80062e2:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[0];
 80062e6:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062ec:	1941      	adds	r1, r0, r5
 80062ee:	431e      	orrs	r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80062f0:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80062f2:	5546      	strb	r6, [r0, r5]
 80062f4:	0a32      	lsrs	r2, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80062f6:	708b      	strb	r3, [r1, #2]
 80062f8:	0e36      	lsrs	r6, r6, #24
			fs->wflag = 1;
 80062fa:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80062fc:	704a      	strb	r2, [r1, #1]
	*ptr++ = (BYTE)val;
 80062fe:	70ce      	strb	r6, [r1, #3]
			fs->wflag = 1;
 8006300:	70e3      	strb	r3, [r4, #3]
			break;
 8006302:	2000      	movs	r0, #0
}
 8006304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006308:	f808 6003 	strb.w	r6, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800630c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800630e:	6b20      	ldr	r0, [r4, #48]	; 0x30
			fs->wflag = 1;
 8006310:	2301      	movs	r3, #1
 8006312:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	fbb7 f2f3 	udiv	r2, r7, r3
 800631a:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800631c:	4288      	cmp	r0, r1
 800631e:	d008      	beq.n	8006332 <put_fat.part.0+0x14e>
 8006320:	4620      	mov	r0, r4
 8006322:	f7ff fd93 	bl	8005e4c <move_window.part.0>
			if (res != FR_OK) break;
 8006326:	2800      	cmp	r0, #0
 8006328:	f47f af69 	bne.w	80061fe <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800632c:	89a2      	ldrh	r2, [r4, #12]
 800632e:	fbb7 f3f2 	udiv	r3, r7, r2
 8006332:	fb02 7713 	mls	r7, r2, r3, r7
 8006336:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800633a:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800633e:	7819      	ldrb	r1, [r3, #0]
 8006340:	f021 060f 	bic.w	r6, r1, #15
 8006344:	4316      	orrs	r6, r2
			fs->wflag = 1;
 8006346:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006348:	701e      	strb	r6, [r3, #0]
			fs->wflag = 1;
 800634a:	70e2      	strb	r2, [r4, #3]
			break;
 800634c:	2000      	movs	r0, #0
}
 800634e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p = fs->win + bc % SS(fs);
 8006352:	fb00 7313 	mls	r3, r0, r3, r7
 8006356:	4443      	add	r3, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006358:	e7ab      	b.n	80062b2 <put_fat.part.0+0xce>
 800635a:	bf00      	nop

0800635c <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800635c:	2901      	cmp	r1, #1
 800635e:	d90e      	bls.n	800637e <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006362:	6983      	ldr	r3, [r0, #24]
 8006364:	4299      	cmp	r1, r3
 8006366:	460c      	mov	r4, r1
 8006368:	4605      	mov	r5, r0
 800636a:	d206      	bcs.n	800637a <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800636c:	7803      	ldrb	r3, [r0, #0]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d056      	beq.n	8006420 <get_fat.isra.0+0xc4>
 8006372:	2b03      	cmp	r3, #3
 8006374:	d03d      	beq.n	80063f2 <get_fat.isra.0+0x96>
 8006376:	2b01      	cmp	r3, #1
 8006378:	d003      	beq.n	8006382 <get_fat.isra.0+0x26>
 800637a:	2001      	movs	r0, #1
}
 800637c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800637e:	2001      	movs	r0, #1
}
 8006380:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006382:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006384:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006388:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 800638c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006390:	fbb7 f3fc 	udiv	r3, r7, ip
 8006394:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006396:	4571      	cmp	r1, lr
 8006398:	d00a      	beq.n	80063b0 <get_fat.isra.0+0x54>
 800639a:	f7ff fd57 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800639e:	2800      	cmp	r0, #0
 80063a0:	d153      	bne.n	800644a <get_fat.isra.0+0xee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063a4:	f8d5 e030 	ldr.w	lr, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80063a8:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 80063ac:	fbb7 f3fc 	udiv	r3, r7, ip
 80063b0:	fb0c 7313 	mls	r3, ip, r3, r7
 80063b4:	442b      	add	r3, r5
 80063b6:	3701      	adds	r7, #1
 80063b8:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063bc:	fbb7 f3fc 	udiv	r3, r7, ip
 80063c0:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063c2:	4571      	cmp	r1, lr
 80063c4:	d008      	beq.n	80063d8 <get_fat.isra.0+0x7c>
 80063c6:	4628      	mov	r0, r5
 80063c8:	f7ff fd40 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d13c      	bne.n	800644a <get_fat.isra.0+0xee>
			wc |= fs->win[bc % SS(fs)] << 8;
 80063d0:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 80063d4:	fbb7 f3fc 	udiv	r3, r7, ip
 80063d8:	fb0c 7713 	mls	r7, ip, r3, r7
 80063dc:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80063de:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80063e0:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80063e4:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80063e8:	bf4c      	ite	mi
 80063ea:	0900      	lsrmi	r0, r0, #4
 80063ec:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 80063f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80063f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80063f4:	8983      	ldrh	r3, [r0, #12]
 80063f6:	0899      	lsrs	r1, r3, #2
 80063f8:	fbb4 f1f1 	udiv	r1, r4, r1
 80063fc:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063fe:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006400:	4291      	cmp	r1, r2
 8006402:	d003      	beq.n	800640c <get_fat.isra.0+0xb0>
 8006404:	f7ff fd22 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006408:	b9f8      	cbnz	r0, 800644a <get_fat.isra.0+0xee>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800640a:	89ab      	ldrh	r3, [r5, #12]
 800640c:	00a4      	lsls	r4, r4, #2
 800640e:	fbb4 f2f3 	udiv	r2, r4, r3
 8006412:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 8006416:	442c      	add	r4, r5
 8006418:	6b60      	ldr	r0, [r4, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800641a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800641e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006420:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006422:	8983      	ldrh	r3, [r0, #12]
 8006424:	0859      	lsrs	r1, r3, #1
 8006426:	fbb4 f1f1 	udiv	r1, r4, r1
 800642a:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800642c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800642e:	4291      	cmp	r1, r2
 8006430:	d003      	beq.n	800643a <get_fat.isra.0+0xde>
 8006432:	f7ff fd0b 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006436:	b940      	cbnz	r0, 800644a <get_fat.isra.0+0xee>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006438:	89ab      	ldrh	r3, [r5, #12]
 800643a:	0064      	lsls	r4, r4, #1
 800643c:	fbb4 f2f3 	udiv	r2, r4, r3
 8006440:	fb03 4412 	mls	r4, r3, r2, r4
 8006444:	4425      	add	r5, r4
 8006446:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 8006448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800644a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800644e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006450 <sync_fs>:
{
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006452:	78c3      	ldrb	r3, [r0, #3]
{
 8006454:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006456:	b95b      	cbnz	r3, 8006470 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006458:	7823      	ldrb	r3, [r4, #0]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d029      	beq.n	80064b2 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800645e:	2200      	movs	r2, #0
 8006460:	7860      	ldrb	r0, [r4, #1]
 8006462:	4611      	mov	r1, r2
 8006464:	f7ff fc4c 	bl	8005d00 <disk_ioctl>
			res = FR_DISK_ERR;
 8006468:	3800      	subs	r0, #0
 800646a:	bf18      	it	ne
 800646c:	2001      	movne	r0, #1
}
 800646e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8006470:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006472:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8006476:	2301      	movs	r3, #1
 8006478:	7840      	ldrb	r0, [r0, #1]
 800647a:	462a      	mov	r2, r5
 800647c:	4639      	mov	r1, r7
 800647e:	f7ff fc31 	bl	8005ce4 <disk_write>
 8006482:	2800      	cmp	r0, #0
 8006484:	d14f      	bne.n	8006526 <sync_fs+0xd6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006486:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006488:	69e3      	ldr	r3, [r4, #28]
			fs->wflag = 0;
 800648a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800648c:	1aaa      	subs	r2, r5, r2
 800648e:	429a      	cmp	r2, r3
 8006490:	d2e2      	bcs.n	8006458 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006492:	78a6      	ldrb	r6, [r4, #2]
 8006494:	2e01      	cmp	r6, #1
 8006496:	d801      	bhi.n	800649c <sync_fs+0x4c>
 8006498:	e7de      	b.n	8006458 <sync_fs+0x8>
					wsect += fs->fsize;
 800649a:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800649c:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800649e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80064a0:	462a      	mov	r2, r5
 80064a2:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064a4:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80064a6:	4639      	mov	r1, r7
 80064a8:	f7ff fc1c 	bl	8005ce4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064ac:	2e01      	cmp	r6, #1
 80064ae:	d1f4      	bne.n	800649a <sync_fs+0x4a>
 80064b0:	e7d2      	b.n	8006458 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80064b2:	7926      	ldrb	r6, [r4, #4]
 80064b4:	2e01      	cmp	r6, #1
 80064b6:	d1d2      	bne.n	800645e <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 80064b8:	f104 0734 	add.w	r7, r4, #52	; 0x34
		*d++ = (BYTE)val;
 80064bc:	89a2      	ldrh	r2, [r4, #12]
 80064be:	2100      	movs	r1, #0
 80064c0:	4638      	mov	r0, r7
 80064c2:	f001 f9bb 	bl	800783c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 80064c6:	4b19      	ldr	r3, [pc, #100]	; (800652c <sync_fs+0xdc>)
 80064c8:	6363      	str	r3, [r4, #52]	; 0x34
 80064ca:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80064ce:	6962      	ldr	r2, [r4, #20]
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80064d0:	6925      	ldr	r5, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80064d2:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 80064d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064da:	3320      	adds	r3, #32
 80064dc:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 80064e0:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80064e2:	f884 321d 	strb.w	r3, [r4, #541]	; 0x21d
 80064e6:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80064e8:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val;
 80064ea:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
			fs->winsect = fs->volbase + 1;
 80064ee:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 80064f0:	f884 5220 	strb.w	r5, [r4, #544]	; 0x220
 80064f4:	0a28      	lsrs	r0, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80064f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
			fs->winsect = fs->volbase + 1;
 80064fa:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80064fc:	f884 0221 	strb.w	r0, [r4, #545]	; 0x221
 8006500:	0c28      	lsrs	r0, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006502:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8006504:	f8a4 1232 	strh.w	r1, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val; val >>= 8;
 8006508:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
 800650c:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006510:	4633      	mov	r3, r6
 8006512:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8006514:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006516:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val;
 8006518:	f884 5223 	strb.w	r5, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800651c:	f7ff fbe2 	bl	8005ce4 <disk_write>
			fs->fsi_flag = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	7123      	strb	r3, [r4, #4]
 8006524:	e79b      	b.n	800645e <sync_fs+0xe>
			res = FR_DISK_ERR;
 8006526:	2001      	movs	r0, #1
}
 8006528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800652a:	bf00      	nop
 800652c:	41615252 	.word	0x41615252

08006530 <create_chain>:
{
 8006530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8006534:	f8d0 8000 	ldr.w	r8, [r0]
{
 8006538:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800653a:	4689      	mov	r9, r1
 800653c:	2900      	cmp	r1, #0
 800653e:	f040 80a5 	bne.w	800668c <create_chain+0x15c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006542:	f8d8 6010 	ldr.w	r6, [r8, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006546:	f8d8 3018 	ldr.w	r3, [r8, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800654a:	b9be      	cbnz	r6, 800657c <create_chain+0x4c>
 800654c:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 800654e:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8006550:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006552:	429c      	cmp	r4, r3
 8006554:	d316      	bcc.n	8006584 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8006556:	2e01      	cmp	r6, #1
 8006558:	f000 80a8 	beq.w	80066ac <create_chain+0x17c>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800655c:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 800655e:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006560:	69ab      	ldr	r3, [r5, #24]
 8006562:	42a3      	cmp	r3, r4
 8006564:	d906      	bls.n	8006574 <create_chain+0x44>
		switch (fs->fs_type) {
 8006566:	782b      	ldrb	r3, [r5, #0]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d078      	beq.n	800665e <create_chain+0x12e>
 800656c:	2b03      	cmp	r3, #3
 800656e:	d05d      	beq.n	800662c <create_chain+0xfc>
 8006570:	2b01      	cmp	r3, #1
 8006572:	d00b      	beq.n	800658c <create_chain+0x5c>
 8006574:	2401      	movs	r4, #1
}
 8006576:	4620      	mov	r0, r4
 8006578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800657c:	42b3      	cmp	r3, r6
 800657e:	bf98      	it	ls
 8006580:	2601      	movls	r6, #1
 8006582:	e7e4      	b.n	800654e <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006584:	2c01      	cmp	r4, #1
 8006586:	683d      	ldr	r5, [r7, #0]
 8006588:	d9f4      	bls.n	8006574 <create_chain+0x44>
 800658a:	e7e9      	b.n	8006560 <create_chain+0x30>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800658c:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800658e:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006592:	89aa      	ldrh	r2, [r5, #12]
			bc = (UINT)clst; bc += bc / 2;
 8006594:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006598:	fbbb f3f2 	udiv	r3, fp, r2
 800659c:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800659e:	4561      	cmp	r1, ip
 80065a0:	d00a      	beq.n	80065b8 <create_chain+0x88>
 80065a2:	4628      	mov	r0, r5
 80065a4:	f7ff fc52 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d13a      	bne.n	8006622 <create_chain+0xf2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065ac:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80065ae:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80065b2:	89aa      	ldrh	r2, [r5, #12]
 80065b4:	fbbb f3f2 	udiv	r3, fp, r2
 80065b8:	fb02 b313 	mls	r3, r2, r3, fp
 80065bc:	442b      	add	r3, r5
 80065be:	f10b 0b01 	add.w	fp, fp, #1
 80065c2:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065c6:	fbbb f3f2 	udiv	r3, fp, r2
 80065ca:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80065cc:	4561      	cmp	r1, ip
 80065ce:	d006      	beq.n	80065de <create_chain+0xae>
 80065d0:	4628      	mov	r0, r5
 80065d2:	f7ff fc3b 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065d6:	bb20      	cbnz	r0, 8006622 <create_chain+0xf2>
			wc |= fs->win[bc % SS(fs)] << 8;
 80065d8:	89aa      	ldrh	r2, [r5, #12]
 80065da:	fbbb f3f2 	udiv	r3, fp, r2
 80065de:	fb02 b213 	mls	r2, r2, r3, fp
 80065e2:	4415      	add	r5, r2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80065e4:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80065e6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80065ea:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80065ee:	bf4c      	ite	mi
 80065f0:	091b      	lsrmi	r3, r3, #4
 80065f2:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 80065f6:	b133      	cbz	r3, 8006606 <create_chain+0xd6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d0bb      	beq.n	8006574 <create_chain+0x44>
			if (ncl == scl) return 0;		/* No free cluster */
 80065fc:	42a6      	cmp	r6, r4
 80065fe:	d055      	beq.n	80066ac <create_chain+0x17c>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006600:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006604:	e7a4      	b.n	8006550 <create_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006606:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800660a:	42a3      	cmp	r3, r4
 800660c:	d9b2      	bls.n	8006574 <create_chain+0x44>
 800660e:	f04f 32ff 	mov.w	r2, #4294967295
 8006612:	4621      	mov	r1, r4
 8006614:	4640      	mov	r0, r8
 8006616:	f7ff fde5 	bl	80061e4 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800661a:	2800      	cmp	r0, #0
 800661c:	d04a      	beq.n	80066b4 <create_chain+0x184>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800661e:	2801      	cmp	r0, #1
 8006620:	d1a8      	bne.n	8006574 <create_chain+0x44>
 8006622:	f04f 34ff 	mov.w	r4, #4294967295
}
 8006626:	4620      	mov	r0, r4
 8006628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800662c:	89a8      	ldrh	r0, [r5, #12]
 800662e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006630:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006632:	0881      	lsrs	r1, r0, #2
 8006634:	fbb4 f1f1 	udiv	r1, r4, r1
 8006638:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800663a:	4299      	cmp	r1, r3
 800663c:	d005      	beq.n	800664a <create_chain+0x11a>
 800663e:	4628      	mov	r0, r5
 8006640:	f7ff fc04 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006644:	2800      	cmp	r0, #0
 8006646:	d1ec      	bne.n	8006622 <create_chain+0xf2>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006648:	89a8      	ldrh	r0, [r5, #12]
 800664a:	00a3      	lsls	r3, r4, #2
 800664c:	fbb3 f2f0 	udiv	r2, r3, r0
 8006650:	fb00 3312 	mls	r3, r0, r2, r3
	rv = rv << 8 | ptr[0];
 8006654:	441d      	add	r5, r3
 8006656:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006658:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			break;
 800665c:	e7cb      	b.n	80065f6 <create_chain+0xc6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800665e:	89a8      	ldrh	r0, [r5, #12]
 8006660:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006662:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006664:	0841      	lsrs	r1, r0, #1
 8006666:	fbb4 f1f1 	udiv	r1, r4, r1
 800666a:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800666c:	4299      	cmp	r1, r3
 800666e:	d005      	beq.n	800667c <create_chain+0x14c>
 8006670:	4628      	mov	r0, r5
 8006672:	f7ff fbeb 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006676:	2800      	cmp	r0, #0
 8006678:	d1d3      	bne.n	8006622 <create_chain+0xf2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800667a:	89a8      	ldrh	r0, [r5, #12]
 800667c:	0063      	lsls	r3, r4, #1
 800667e:	fbb3 f2f0 	udiv	r2, r3, r0
 8006682:	fb00 3312 	mls	r3, r0, r2, r3
 8006686:	441d      	add	r5, r3
 8006688:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 800668a:	e7b4      	b.n	80065f6 <create_chain+0xc6>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800668c:	4640      	mov	r0, r8
 800668e:	f7ff fe65 	bl	800635c <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006692:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006694:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006696:	f67f af6d 	bls.w	8006574 <create_chain+0x44>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800669a:	1c41      	adds	r1, r0, #1
 800669c:	d0c1      	beq.n	8006622 <create_chain+0xf2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800669e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80066a2:	4283      	cmp	r3, r0
 80066a4:	f63f af67 	bhi.w	8006576 <create_chain+0x46>
 80066a8:	464e      	mov	r6, r9
 80066aa:	e750      	b.n	800654e <create_chain+0x1e>
				if (ncl > scl) return 0;	/* No free cluster */
 80066ac:	2400      	movs	r4, #0
}
 80066ae:	4620      	mov	r0, r4
 80066b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK && clst != 0) {
 80066b4:	f1b9 0f00 	cmp.w	r9, #0
 80066b8:	d00f      	beq.n	80066da <create_chain+0x1aa>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80066ba:	f1b9 0f01 	cmp.w	r9, #1
 80066be:	f43f af59 	beq.w	8006574 <create_chain+0x44>
 80066c2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80066c6:	4599      	cmp	r9, r3
 80066c8:	f4bf af54 	bcs.w	8006574 <create_chain+0x44>
 80066cc:	4622      	mov	r2, r4
 80066ce:	4649      	mov	r1, r9
 80066d0:	4640      	mov	r0, r8
 80066d2:	f7ff fd87 	bl	80061e4 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d1a1      	bne.n	800661e <create_chain+0xee>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80066da:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 80066de:	3b02      	subs	r3, #2
 80066e0:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 80066e2:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80066e6:	d802      	bhi.n	80066ee <create_chain+0x1be>
 80066e8:	3a01      	subs	r2, #1
 80066ea:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 80066ee:	f898 3004 	ldrb.w	r3, [r8, #4]
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	f888 3004 	strb.w	r3, [r8, #4]
 80066fa:	e73c      	b.n	8006576 <create_chain+0x46>

080066fc <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80066fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006700:	6884      	ldr	r4, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8006702:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8006704:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8006706:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 8006708:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800670a:	b9bc      	cbnz	r4, 800673c <dir_sdi.constprop.0+0x40>
 800670c:	783b      	ldrb	r3, [r7, #0]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d810      	bhi.n	8006734 <dir_sdi.constprop.0+0x38>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006712:	893b      	ldrh	r3, [r7, #8]
 8006714:	b15b      	cbz	r3, 800672e <dir_sdi.constprop.0+0x32>
		dp->sect = fs->dirbase;
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800671a:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800671c:	b13b      	cbz	r3, 800672e <dir_sdi.constprop.0+0x32>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800671e:	3734      	adds	r7, #52	; 0x34
 8006720:	6237      	str	r7, [r6, #32]
	return FR_OK;
 8006722:	2000      	movs	r0, #0
}
 8006724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		dp->sect = clust2sect(fs, clst);
 8006728:	2300      	movs	r3, #0
	dp->clust = clst;					/* Current cluster# */
 800672a:	e9c6 4306 	strd	r4, r3, [r6, #24]
		switch (fs->fs_type) {
 800672e:	2002      	movs	r0, #2
}
 8006730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0eb      	beq.n	8006712 <dir_sdi.constprop.0+0x16>
 800673a:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800673c:	897a      	ldrh	r2, [r7, #10]
 800673e:	89bb      	ldrh	r3, [r7, #12]
 8006740:	fb02 f303 	mul.w	r3, r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8006744:	2b00      	cmp	r3, #0
 8006746:	d179      	bne.n	800683c <dir_sdi.constprop.0+0x140>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006748:	2c01      	cmp	r4, #1
 800674a:	d9f0      	bls.n	800672e <dir_sdi.constprop.0+0x32>
 800674c:	6835      	ldr	r5, [r6, #0]
 800674e:	69ab      	ldr	r3, [r5, #24]
 8006750:	429c      	cmp	r4, r3
 8006752:	d2ec      	bcs.n	800672e <dir_sdi.constprop.0+0x32>
		switch (fs->fs_type) {
 8006754:	782b      	ldrb	r3, [r5, #0]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d058      	beq.n	800680c <dir_sdi.constprop.0+0x110>
 800675a:	2b03      	cmp	r3, #3
 800675c:	d039      	beq.n	80067d2 <dir_sdi.constprop.0+0xd6>
 800675e:	2b01      	cmp	r3, #1
 8006760:	d1e5      	bne.n	800672e <dir_sdi.constprop.0+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006762:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006764:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006768:	89aa      	ldrh	r2, [r5, #12]
			bc = (UINT)clst; bc += bc / 2;
 800676a:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800676e:	fbb8 f3f2 	udiv	r3, r8, r2
 8006772:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006774:	4561      	cmp	r1, ip
 8006776:	d00a      	beq.n	800678e <dir_sdi.constprop.0+0x92>
 8006778:	4628      	mov	r0, r5
 800677a:	f7ff fb67 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800677e:	2800      	cmp	r0, #0
 8006780:	d15a      	bne.n	8006838 <dir_sdi.constprop.0+0x13c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006782:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006784:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8006788:	89aa      	ldrh	r2, [r5, #12]
 800678a:	fbb8 f3f2 	udiv	r3, r8, r2
 800678e:	fb02 8313 	mls	r3, r2, r3, r8
 8006792:	442b      	add	r3, r5
 8006794:	f108 0801 	add.w	r8, r8, #1
 8006798:	f893 9034 	ldrb.w	r9, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800679c:	fbb8 f3f2 	udiv	r3, r8, r2
 80067a0:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067a2:	4561      	cmp	r1, ip
 80067a4:	d007      	beq.n	80067b6 <dir_sdi.constprop.0+0xba>
 80067a6:	4628      	mov	r0, r5
 80067a8:	f7ff fb50 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d143      	bne.n	8006838 <dir_sdi.constprop.0+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80067b0:	89aa      	ldrh	r2, [r5, #12]
 80067b2:	fbb8 f3f2 	udiv	r3, r8, r2
 80067b6:	fb02 8813 	mls	r8, r2, r3, r8
 80067ba:	4445      	add	r5, r8
 80067bc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80067c0:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80067c4:	07e3      	lsls	r3, r4, #31
 80067c6:	bf4c      	ite	mi
 80067c8:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 80067cc:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
 80067d0:	e016      	b.n	8006800 <dir_sdi.constprop.0+0x104>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067d2:	89a8      	ldrh	r0, [r5, #12]
 80067d4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067d8:	0881      	lsrs	r1, r0, #2
 80067da:	fbb4 f1f1 	udiv	r1, r4, r1
 80067de:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067e0:	4299      	cmp	r1, r3
 80067e2:	d004      	beq.n	80067ee <dir_sdi.constprop.0+0xf2>
 80067e4:	4628      	mov	r0, r5
 80067e6:	f7ff fb31 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067ea:	bb28      	cbnz	r0, 8006838 <dir_sdi.constprop.0+0x13c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80067ec:	89a8      	ldrh	r0, [r5, #12]
 80067ee:	00a4      	lsls	r4, r4, #2
 80067f0:	fbb4 f3f0 	udiv	r3, r4, r0
 80067f4:	fb00 4413 	mls	r4, r0, r3, r4
	rv = rv << 8 | ptr[0];
 80067f8:	4425      	add	r5, r4
 80067fa:	6b6c      	ldr	r4, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80067fc:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006800:	2c01      	cmp	r4, #1
 8006802:	d994      	bls.n	800672e <dir_sdi.constprop.0+0x32>
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	42a3      	cmp	r3, r4
 8006808:	d89e      	bhi.n	8006748 <dir_sdi.constprop.0+0x4c>
 800680a:	e790      	b.n	800672e <dir_sdi.constprop.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800680c:	89a8      	ldrh	r0, [r5, #12]
 800680e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006810:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006812:	0841      	lsrs	r1, r0, #1
 8006814:	fbb4 f1f1 	udiv	r1, r4, r1
 8006818:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800681a:	4299      	cmp	r1, r3
 800681c:	d004      	beq.n	8006828 <dir_sdi.constprop.0+0x12c>
 800681e:	4628      	mov	r0, r5
 8006820:	f7ff fb14 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006824:	b940      	cbnz	r0, 8006838 <dir_sdi.constprop.0+0x13c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006826:	89a8      	ldrh	r0, [r5, #12]
 8006828:	0064      	lsls	r4, r4, #1
 800682a:	fbb4 f3f0 	udiv	r3, r4, r0
 800682e:	fb00 4413 	mls	r4, r0, r3, r4
 8006832:	4425      	add	r5, r4
 8006834:	8eac      	ldrh	r4, [r5, #52]	; 0x34
			break;
 8006836:	e7e3      	b.n	8006800 <dir_sdi.constprop.0+0x104>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006838:	2001      	movs	r0, #1
 800683a:	e773      	b.n	8006724 <dir_sdi.constprop.0+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800683c:	69b9      	ldr	r1, [r7, #24]
	clst -= 2;
 800683e:	1ea0      	subs	r0, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006840:	3902      	subs	r1, #2
 8006842:	4288      	cmp	r0, r1
 8006844:	f4bf af70 	bcs.w	8006728 <dir_sdi.constprop.0+0x2c>
	return clst * fs->csize + fs->database;
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	fb00 3302 	mla	r3, r0, r2, r3
		dp->sect = clust2sect(fs, clst);
 800684e:	61f3      	str	r3, [r6, #28]
 8006850:	e763      	b.n	800671a <dir_sdi.constprop.0+0x1e>
 8006852:	bf00      	nop

08006854 <follow_path>:
{
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8006858:	f8d0 a000 	ldr.w	sl, [r0]
{
 800685c:	b083      	sub	sp, #12
 800685e:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006860:	780b      	ldrb	r3, [r1, #0]
 8006862:	2b2f      	cmp	r3, #47	; 0x2f
 8006864:	4689      	mov	r9, r1
 8006866:	f101 0101 	add.w	r1, r1, #1
 800686a:	d0f9      	beq.n	8006860 <follow_path+0xc>
 800686c:	2b5c      	cmp	r3, #92	; 0x5c
 800686e:	d0f7      	beq.n	8006860 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8006870:	2300      	movs	r3, #0
 8006872:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006874:	f899 3000 	ldrb.w	r3, [r9]
 8006878:	2b1f      	cmp	r3, #31
 800687a:	f240 8172 	bls.w	8006b62 <follow_path+0x30e>
	p = *path; sfn = dp->fn;
 800687e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8006882:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 8006884:	2320      	movs	r3, #32
 8006886:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 800688a:	6262      	str	r2, [r4, #36]	; 0x24
 800688c:	62a2      	str	r2, [r4, #40]	; 0x28
 800688e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8006892:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8006896:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		c = (BYTE)p[si++];
 800689a:	f899 3000 	ldrb.w	r3, [r9]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d90b      	bls.n	80068ba <follow_path+0x66>
 80068a2:	464f      	mov	r7, r9
	si = i = 0; ni = 8;
 80068a4:	2500      	movs	r5, #0
 80068a6:	2608      	movs	r6, #8
		c = (BYTE)p[si++];
 80068a8:	2101      	movs	r1, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80068aa:	2b2f      	cmp	r3, #47	; 0x2f
 80068ac:	d03e      	beq.n	800692c <follow_path+0xd8>
 80068ae:	2b5c      	cmp	r3, #92	; 0x5c
 80068b0:	d03c      	beq.n	800692c <follow_path+0xd8>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80068b2:	2b2e      	cmp	r3, #46	; 0x2e
 80068b4:	d005      	beq.n	80068c2 <follow_path+0x6e>
 80068b6:	42b5      	cmp	r5, r6
 80068b8:	d321      	bcc.n	80068fe <follow_path+0xaa>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80068ba:	2006      	movs	r0, #6
}
 80068bc:	b003      	add	sp, #12
 80068be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80068c2:	2e0b      	cmp	r6, #11
 80068c4:	d0f9      	beq.n	80068ba <follow_path+0x66>
			i = 8; ni = 11;				/* Goto extension */
 80068c6:	2508      	movs	r5, #8
 80068c8:	260b      	movs	r6, #11
		c = (BYTE)p[si++];
 80068ca:	f817 3f01 	ldrb.w	r3, [r7, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80068ce:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 80068d0:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 80068d4:	d8e9      	bhi.n	80068aa <follow_path+0x56>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80068d6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80068da:	2be5      	cmp	r3, #229	; 0xe5
	*path = p + si;						/* Return pointer to the next segment */
 80068dc:	4489      	add	r9, r1
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80068de:	f000 814b 	beq.w	8006b78 <follow_path+0x324>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80068e2:	2304      	movs	r3, #4
 80068e4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80068e8:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 80068ea:	6827      	ldr	r7, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80068ec:	f7ff ff06 	bl	80066fc <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d035      	beq.n	8006960 <follow_path+0x10c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80068f4:	2804      	cmp	r0, #4
			ns = dp->fn[NSFLAG];
 80068f6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 80068fa:	d1df      	bne.n	80068bc <follow_path+0x68>
 80068fc:	e0d2      	b.n	8006aa4 <follow_path+0x250>
		if (c >= 0x80) {				/* Extended character? */
 80068fe:	061a      	lsls	r2, r3, #24
 8006900:	d502      	bpl.n	8006908 <follow_path+0xb4>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006902:	4aa2      	ldr	r2, [pc, #648]	; (8006b8c <follow_path+0x338>)
 8006904:	3b80      	subs	r3, #128	; 0x80
 8006906:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 8006908:	48a1      	ldr	r0, [pc, #644]	; (8006b90 <follow_path+0x33c>)
 800690a:	2222      	movs	r2, #34	; 0x22
 800690c:	4293      	cmp	r3, r2
 800690e:	d0d4      	beq.n	80068ba <follow_path+0x66>
 8006910:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006914:	2a00      	cmp	r2, #0
 8006916:	d1f9      	bne.n	800690c <follow_path+0xb8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006918:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800691c:	2a19      	cmp	r2, #25
 800691e:	d801      	bhi.n	8006924 <follow_path+0xd0>
 8006920:	3b20      	subs	r3, #32
 8006922:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8006924:	9a01      	ldr	r2, [sp, #4]
 8006926:	5553      	strb	r3, [r2, r5]
 8006928:	3501      	adds	r5, #1
 800692a:	e7ce      	b.n	80068ca <follow_path+0x76>
 800692c:	eb09 0301 	add.w	r3, r9, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	2a2f      	cmp	r2, #47	; 0x2f
 8006934:	4699      	mov	r9, r3
 8006936:	f103 0301 	add.w	r3, r3, #1
 800693a:	d0f9      	beq.n	8006930 <follow_path+0xdc>
 800693c:	2a5c      	cmp	r2, #92	; 0x5c
 800693e:	d0f7      	beq.n	8006930 <follow_path+0xdc>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006940:	2d00      	cmp	r5, #0
 8006942:	d0ba      	beq.n	80068ba <follow_path+0x66>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006944:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006948:	2be5      	cmp	r3, #229	; 0xe5
 800694a:	f000 8119 	beq.w	8006b80 <follow_path+0x32c>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800694e:	2300      	movs	r3, #0
 8006950:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006954:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 8006956:	6827      	ldr	r7, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006958:	f7ff fed0 	bl	80066fc <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800695c:	2800      	cmp	r0, #0
 800695e:	d1c9      	bne.n	80068f4 <follow_path+0xa0>
		res = move_window(fs, dp->sect);
 8006960:	f8d4 b01c 	ldr.w	fp, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006964:	465b      	mov	r3, fp
 8006966:	f107 0634 	add.w	r6, r7, #52	; 0x34
 800696a:	46bb      	mov	fp, r7
 800696c:	461f      	mov	r7, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800696e:	f8db 5030 	ldr.w	r5, [fp, #48]	; 0x30
 8006972:	42bd      	cmp	r5, r7
 8006974:	d016      	beq.n	80069a4 <follow_path+0x150>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006976:	f89b 3003 	ldrb.w	r3, [fp, #3]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f040 8096 	bne.w	8006aac <follow_path+0x258>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006980:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006984:	2301      	movs	r3, #1
 8006986:	463a      	mov	r2, r7
 8006988:	4631      	mov	r1, r6
 800698a:	f7ff f99d 	bl	8005cc8 <disk_read>
 800698e:	b138      	cbz	r0, 80069a0 <follow_path+0x14c>
			fs->winsect = sector;
 8006990:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8006994:	2001      	movs	r0, #1
			fs->winsect = sector;
 8006996:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
}
 800699a:	b003      	add	sp, #12
 800699c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80069a0:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
		c = dp->dir[DIR_Name];
 80069a4:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80069a6:	781a      	ldrb	r2, [r3, #0]
 80069a8:	2a00      	cmp	r2, #0
 80069aa:	d079      	beq.n	8006aa0 <follow_path+0x24c>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80069ac:	7ad9      	ldrb	r1, [r3, #11]
 80069ae:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 80069b2:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80069b4:	7ada      	ldrb	r2, [r3, #11]
 80069b6:	f012 0208 	ands.w	r2, r2, #8
 80069ba:	d01e      	beq.n	80069fa <follow_path+0x1a6>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80069bc:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80069be:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80069c0:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80069c2:	2f00      	cmp	r7, #0
 80069c4:	d06c      	beq.n	8006aa0 <follow_path+0x24c>
 80069c6:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80069ca:	d269      	bcs.n	8006aa0 <follow_path+0x24c>
	FATFS *fs = dp->obj.fs;
 80069cc:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80069ce:	899a      	ldrh	r2, [r3, #12]
 80069d0:	fbb5 f0f2 	udiv	r0, r5, r2
 80069d4:	fb02 5210 	mls	r2, r2, r0, r5
 80069d8:	b952      	cbnz	r2, 80069f0 <follow_path+0x19c>
		if (!dp->clust) {		/* Static table */
 80069da:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80069dc:	3701      	adds	r7, #1
 80069de:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80069e0:	2900      	cmp	r1, #0
 80069e2:	f040 808b 	bne.w	8006afc <follow_path+0x2a8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80069e6:	8918      	ldrh	r0, [r3, #8]
 80069e8:	ebb0 1f55 	cmp.w	r0, r5, lsr #5
 80069ec:	f240 80a1 	bls.w	8006b32 <follow_path+0x2de>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069f0:	3334      	adds	r3, #52	; 0x34
 80069f2:	4413      	add	r3, r2
	dp->dptr = ofs;						/* Current entry */
 80069f4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069f6:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 80069f8:	e7b9      	b.n	800696e <follow_path+0x11a>
	} while (--cnt && r == 0);
 80069fa:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 80069fe:	7818      	ldrb	r0, [r3, #0]
 8006a00:	4285      	cmp	r5, r0
 8006a02:	d1db      	bne.n	80069bc <follow_path+0x168>
 8006a04:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 8006a08:	7858      	ldrb	r0, [r3, #1]
 8006a0a:	4285      	cmp	r5, r0
 8006a0c:	d1d6      	bne.n	80069bc <follow_path+0x168>
 8006a0e:	789d      	ldrb	r5, [r3, #2]
 8006a10:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8006a14:	4285      	cmp	r5, r0
 8006a16:	d1d1      	bne.n	80069bc <follow_path+0x168>
 8006a18:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 8006a1c:	78d8      	ldrb	r0, [r3, #3]
 8006a1e:	4285      	cmp	r5, r0
 8006a20:	d1cc      	bne.n	80069bc <follow_path+0x168>
 8006a22:	791d      	ldrb	r5, [r3, #4]
 8006a24:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8006a28:	4285      	cmp	r5, r0
 8006a2a:	d1c7      	bne.n	80069bc <follow_path+0x168>
 8006a2c:	795d      	ldrb	r5, [r3, #5]
 8006a2e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8006a32:	4285      	cmp	r5, r0
 8006a34:	d1c2      	bne.n	80069bc <follow_path+0x168>
 8006a36:	799d      	ldrb	r5, [r3, #6]
 8006a38:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8006a3c:	4285      	cmp	r5, r0
 8006a3e:	d1bd      	bne.n	80069bc <follow_path+0x168>
 8006a40:	79dd      	ldrb	r5, [r3, #7]
 8006a42:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 8006a46:	4285      	cmp	r5, r0
 8006a48:	d1b8      	bne.n	80069bc <follow_path+0x168>
 8006a4a:	7a1d      	ldrb	r5, [r3, #8]
 8006a4c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8006a50:	4285      	cmp	r5, r0
 8006a52:	d1b3      	bne.n	80069bc <follow_path+0x168>
 8006a54:	7a5d      	ldrb	r5, [r3, #9]
 8006a56:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8006a5a:	4285      	cmp	r5, r0
 8006a5c:	d1ae      	bne.n	80069bc <follow_path+0x168>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006a5e:	7a98      	ldrb	r0, [r3, #10]
 8006a60:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8006a64:	4298      	cmp	r0, r3
 8006a66:	d1a9      	bne.n	80069bc <follow_path+0x168>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a68:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8006a6c:	075b      	lsls	r3, r3, #29
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f53f af24 	bmi.w	80068bc <follow_path+0x68>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006a74:	06ca      	lsls	r2, r1, #27
 8006a76:	d517      	bpl.n	8006aa8 <follow_path+0x254>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006a78:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 8006a7c:	6962      	ldr	r2, [r4, #20]
 8006a7e:	fbb2 f0f1 	udiv	r0, r2, r1
 8006a82:	f10a 0334 	add.w	r3, sl, #52	; 0x34
 8006a86:	fb01 2210 	mls	r2, r1, r0, r2
	if (fs->fs_type == FS_FAT32) {
 8006a8a:	f89a 1000 	ldrb.w	r1, [sl]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006a8e:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 8006a90:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8006a92:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a94:	bf04      	itt	eq
 8006a96:	8a9b      	ldrheq	r3, [r3, #20]
 8006a98:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006a9c:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a9e:	e6f1      	b.n	8006884 <follow_path+0x30>
			ns = dp->fn[NSFLAG];
 8006aa0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006aa4:	0759      	lsls	r1, r3, #29
 8006aa6:	d465      	bmi.n	8006b74 <follow_path+0x320>
 8006aa8:	2005      	movs	r0, #5
 8006aaa:	e707      	b.n	80068bc <follow_path+0x68>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006aac:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	462a      	mov	r2, r5
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	f7ff f915 	bl	8005ce4 <disk_write>
 8006aba:	bbc0      	cbnz	r0, 8006b2e <follow_path+0x2da>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006abc:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8006ac0:	f8db 301c 	ldr.w	r3, [fp, #28]
			fs->wflag = 0;
 8006ac4:	f88b 0003 	strb.w	r0, [fp, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006ac8:	1aaa      	subs	r2, r5, r2
 8006aca:	429a      	cmp	r2, r3
 8006acc:	f4bf af58 	bcs.w	8006980 <follow_path+0x12c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ad0:	f89b 8002 	ldrb.w	r8, [fp, #2]
 8006ad4:	f1b8 0f01 	cmp.w	r8, #1
 8006ad8:	d802      	bhi.n	8006ae0 <follow_path+0x28c>
 8006ada:	e751      	b.n	8006980 <follow_path+0x12c>
					wsect += fs->fsize;
 8006adc:	f8db 301c 	ldr.w	r3, [fp, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006ae0:	f89b 0001 	ldrb.w	r0, [fp, #1]
					wsect += fs->fsize;
 8006ae4:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006ae6:	462a      	mov	r2, r5
 8006ae8:	2301      	movs	r3, #1
 8006aea:	4631      	mov	r1, r6
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006aec:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8006af0:	f7ff f8f8 	bl	8005ce4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006af4:	f1b8 0f01 	cmp.w	r8, #1
 8006af8:	d1f0      	bne.n	8006adc <follow_path+0x288>
 8006afa:	e741      	b.n	8006980 <follow_path+0x12c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006afc:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 8006b00:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b04:	ea1c 0800 	ands.w	r8, ip, r0
 8006b08:	f47f af72 	bne.w	80069f0 <follow_path+0x19c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	f7ff fc24 	bl	800635c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b14:	2801      	cmp	r0, #1
 8006b16:	d922      	bls.n	8006b5e <follow_path+0x30a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006b18:	1c47      	adds	r7, r0, #1
 8006b1a:	d008      	beq.n	8006b2e <follow_path+0x2da>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006b1c:	9b00      	ldr	r3, [sp, #0]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	4290      	cmp	r0, r2
 8006b22:	d30a      	bcc.n	8006b3a <follow_path+0x2e6>
			ns = dp->fn[NSFLAG];
 8006b24:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
						dp->sect = 0; return FR_NO_FILE;
 8006b28:	f8c4 801c 	str.w	r8, [r4, #28]
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006b2c:	e7ba      	b.n	8006aa4 <follow_path+0x250>
			res = FR_DISK_ERR;
 8006b2e:	2001      	movs	r0, #1
 8006b30:	e6c4      	b.n	80068bc <follow_path+0x68>
			ns = dp->fn[NSFLAG];
 8006b32:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
				dp->sect = 0; return FR_NO_FILE;
 8006b36:	61e1      	str	r1, [r4, #28]
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006b38:	e7b4      	b.n	8006aa4 <follow_path+0x250>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006b3a:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8006b3c:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8006b3e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006b40:	4290      	cmp	r0, r2
	return clst * fs->csize + fs->database;
 8006b42:	bf3e      	ittt	cc
 8006b44:	895a      	ldrhcc	r2, [r3, #10]
 8006b46:	6adf      	ldrcc	r7, [r3, #44]	; 0x2c
 8006b48:	fb00 7702 	mlacc	r7, r0, r2, r7
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006b4c:	899a      	ldrh	r2, [r3, #12]
 8006b4e:	fbb5 f1f2 	udiv	r1, r5, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006b52:	bf28      	it	cs
 8006b54:	4647      	movcs	r7, r8
				dp->sect = clust2sect(fs, clst);
 8006b56:	61e7      	str	r7, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006b58:	fb02 5211 	mls	r2, r2, r1, r5
 8006b5c:	e748      	b.n	80069f0 <follow_path+0x19c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b5e:	2002      	movs	r0, #2
	return res;
 8006b60:	e6ac      	b.n	80068bc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8006b62:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8006b64:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 8006b66:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 8006b6a:	b003      	add	sp, #12
 8006b6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8006b70:	f7ff bdc4 	b.w	80066fc <dir_sdi.constprop.0>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006b74:	2004      	movs	r0, #4
 8006b76:	e6a1      	b.n	80068bc <follow_path+0x68>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006b78:	2305      	movs	r3, #5
 8006b7a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8006b7e:	e6b0      	b.n	80068e2 <follow_path+0x8e>
 8006b80:	2305      	movs	r3, #5
 8006b82:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006b86:	2300      	movs	r3, #0
 8006b88:	e6e2      	b.n	8006950 <follow_path+0xfc>
 8006b8a:	bf00      	nop
 8006b8c:	0800a46c 	.word	0x0800a46c
 8006b90:	0800a45c 	.word	0x0800a45c

08006b94 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006b94:	2901      	cmp	r1, #1
{
 8006b96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8006b9a:	6806      	ldr	r6, [r0, #0]
{
 8006b9c:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006b9e:	d910      	bls.n	8006bc2 <remove_chain+0x2e>
 8006ba0:	69b3      	ldr	r3, [r6, #24]
 8006ba2:	428b      	cmp	r3, r1
 8006ba4:	d90d      	bls.n	8006bc2 <remove_chain+0x2e>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	4611      	mov	r1, r2
 8006baa:	b96a      	cbnz	r2, 8006bc8 <remove_chain+0x34>
 8006bac:	4637      	mov	r7, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006bae:	429c      	cmp	r4, r3
 8006bb0:	d207      	bcs.n	8006bc2 <remove_chain+0x2e>
		switch (fs->fs_type) {
 8006bb2:	783b      	ldrb	r3, [r7, #0]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	f000 8089 	beq.w	8006ccc <remove_chain+0x138>
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d06a      	beq.n	8006c94 <remove_chain+0x100>
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d010      	beq.n	8006be4 <remove_chain+0x50>
 8006bc2:	2002      	movs	r0, #2
}
 8006bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006bc8:	2a01      	cmp	r2, #1
 8006bca:	d0fa      	beq.n	8006bc2 <remove_chain+0x2e>
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d9f8      	bls.n	8006bc2 <remove_chain+0x2e>
 8006bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f7ff fb05 	bl	80061e4 <put_fat.part.0>
		if (res != FR_OK) return res;
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d1f2      	bne.n	8006bc4 <remove_chain+0x30>
 8006bde:	682f      	ldr	r7, [r5, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	e7e4      	b.n	8006bae <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006be6:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bea:	89ba      	ldrh	r2, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 8006bec:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bf0:	fbb8 f3f2 	udiv	r3, r8, r2
 8006bf4:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006bf6:	4561      	cmp	r1, ip
 8006bf8:	d00a      	beq.n	8006c10 <remove_chain+0x7c>
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f7ff f926 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d17d      	bne.n	8006d00 <remove_chain+0x16c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c06:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8006c0a:	89ba      	ldrh	r2, [r7, #12]
 8006c0c:	fbb8 f3f2 	udiv	r3, r8, r2
 8006c10:	fb02 8313 	mls	r3, r2, r3, r8
 8006c14:	443b      	add	r3, r7
 8006c16:	f108 0801 	add.w	r8, r8, #1
 8006c1a:	f893 9034 	ldrb.w	r9, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c1e:	fbb8 f3f2 	udiv	r3, r8, r2
 8006c22:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c24:	4561      	cmp	r1, ip
 8006c26:	d007      	beq.n	8006c38 <remove_chain+0xa4>
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f7ff f90f 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d166      	bne.n	8006d00 <remove_chain+0x16c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006c32:	89ba      	ldrh	r2, [r7, #12]
 8006c34:	fbb8 f3f2 	udiv	r3, r8, r2
 8006c38:	fb02 8813 	mls	r8, r2, r3, r8
 8006c3c:	4447      	add	r7, r8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c3e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8006c40:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
 8006c44:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c48:	bf4c      	ite	mi
 8006c4a:	ea4f 1818 	movmi.w	r8, r8, lsr #4
 8006c4e:	f3c8 080b 	ubfxpl	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 8006c52:	f1b8 0f00 	cmp.w	r8, #0
 8006c56:	d055      	beq.n	8006d04 <remove_chain+0x170>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006c58:	f1b8 0f01 	cmp.w	r8, #1
 8006c5c:	d0b1      	beq.n	8006bc2 <remove_chain+0x2e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c5e:	69b3      	ldr	r3, [r6, #24]
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	d9ae      	bls.n	8006bc2 <remove_chain+0x2e>
 8006c64:	2200      	movs	r2, #0
 8006c66:	4621      	mov	r1, r4
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f7ff fabb 	bl	80061e4 <put_fat.part.0>
			if (res != FR_OK) return res;
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d1a8      	bne.n	8006bc4 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006c72:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
 8006c76:	1e91      	subs	r1, r2, #2
 8006c78:	428b      	cmp	r3, r1
 8006c7a:	d205      	bcs.n	8006c88 <remove_chain+0xf4>
			fs->free_clst++;
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	6173      	str	r3, [r6, #20]
			fs->fsi_flag |= 1;
 8006c80:	7933      	ldrb	r3, [r6, #4]
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006c88:	4542      	cmp	r2, r8
 8006c8a:	d93b      	bls.n	8006d04 <remove_chain+0x170>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006c8c:	682f      	ldr	r7, [r5, #0]
 8006c8e:	4644      	mov	r4, r8
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	e78c      	b.n	8006bae <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c94:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8006c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c9c:	ea4f 019c 	mov.w	r1, ip, lsr #2
 8006ca0:	fbb4 f1f1 	udiv	r1, r4, r1
 8006ca4:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ca6:	4291      	cmp	r1, r2
 8006ca8:	d005      	beq.n	8006cb6 <remove_chain+0x122>
 8006caa:	4638      	mov	r0, r7
 8006cac:	f7ff f8ce 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006cb0:	bb30      	cbnz	r0, 8006d00 <remove_chain+0x16c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006cb2:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8006cb6:	00a3      	lsls	r3, r4, #2
 8006cb8:	fbb3 f2fc 	udiv	r2, r3, ip
 8006cbc:	fb0c 3312 	mls	r3, ip, r2, r3
	rv = rv << 8 | ptr[0];
 8006cc0:	441f      	add	r7, r3
 8006cc2:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006cc6:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8006cca:	e7c2      	b.n	8006c52 <remove_chain+0xbe>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ccc:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8006cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006cd4:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8006cd8:	fbb4 f1f1 	udiv	r1, r4, r1
 8006cdc:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006cde:	4291      	cmp	r1, r2
 8006ce0:	d005      	beq.n	8006cee <remove_chain+0x15a>
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	f7ff f8b2 	bl	8005e4c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ce8:	b950      	cbnz	r0, 8006d00 <remove_chain+0x16c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006cea:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8006cee:	0063      	lsls	r3, r4, #1
 8006cf0:	fbb3 f2fc 	udiv	r2, r3, ip
 8006cf4:	fb0c 3312 	mls	r3, ip, r2, r3
 8006cf8:	441f      	add	r7, r3
 8006cfa:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 8006cfe:	e7a8      	b.n	8006c52 <remove_chain+0xbe>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006d00:	2001      	movs	r0, #1
 8006d02:	e75f      	b.n	8006bc4 <remove_chain+0x30>
	return FR_OK;
 8006d04:	2000      	movs	r0, #0
 8006d06:	e75d      	b.n	8006bc4 <remove_chain+0x30>

08006d08 <dir_register>:
{
 8006d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0c:	ed2d 8b02 	vpush	{d8}
 8006d10:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8006d12:	6806      	ldr	r6, [r0, #0]
{
 8006d14:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);
 8006d16:	f7ff fcf1 	bl	80066fc <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8006d1a:	9001      	str	r0, [sp, #4]
 8006d1c:	b310      	cbz	r0, 8006d64 <dir_register+0x5c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006d1e:	9b01      	ldr	r3, [sp, #4]
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d119      	bne.n	8006d58 <dir_register+0x50>
 8006d24:	2307      	movs	r3, #7
 8006d26:	9301      	str	r3, [sp, #4]
 8006d28:	4618      	mov	r0, r3
}
 8006d2a:	b005      	add	sp, #20
 8006d2c:	ecbd 8b02 	vpop	{d8}
 8006d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006d34:	f8b8 700a 	ldrh.w	r7, [r8, #10]
 8006d38:	3f01      	subs	r7, #1
 8006d3a:	4217      	tst	r7, r2
 8006d3c:	f040 8084 	bne.w	8006e48 <dir_register+0x140>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006d40:	4640      	mov	r0, r8
 8006d42:	f7ff fb0b 	bl	800635c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006d46:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006d48:	9002      	str	r0, [sp, #8]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006d4a:	f240 8150 	bls.w	8006fee <dir_register+0x2e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006d4e:	1c43      	adds	r3, r0, #1
 8006d50:	f040 809f 	bne.w	8006e92 <dir_register+0x18a>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d54:	2301      	movs	r3, #1
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	4618      	mov	r0, r3
}
 8006d5a:	b005      	add	sp, #20
 8006d5c:	ecbd 8b02 	vpop	{d8}
 8006d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 8006d64:	f8d4 901c 	ldr.w	r9, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d68:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006d6c:	f106 0b34 	add.w	fp, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d70:	45d1      	cmp	r9, sl
 8006d72:	d018      	beq.n	8006da6 <dir_register+0x9e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006d74:	78f3      	ldrb	r3, [r6, #3]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d16b      	bne.n	8006e52 <dir_register+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006d7a:	7870      	ldrb	r0, [r6, #1]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	464a      	mov	r2, r9
 8006d80:	4659      	mov	r1, fp
 8006d82:	f7fe ffa1 	bl	8005cc8 <disk_read>
 8006d86:	b150      	cbz	r0, 8006d9e <dir_register+0x96>
			fs->winsect = sector;
 8006d88:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8c:	6333      	str	r3, [r6, #48]	; 0x30
				res = FR_DISK_ERR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4618      	mov	r0, r3
 8006d92:	9301      	str	r3, [sp, #4]
}
 8006d94:	b005      	add	sp, #20
 8006d96:	ecbd 8b02 	vpop	{d8}
 8006d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d9e:	f8d4 a01c 	ldr.w	sl, [r4, #28]
			fs->winsect = sector;
 8006da2:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006da6:	6a20      	ldr	r0, [r4, #32]
 8006da8:	7803      	ldrb	r3, [r0, #0]
 8006daa:	2be5      	cmp	r3, #229	; 0xe5
 8006dac:	d000      	beq.n	8006db0 <dir_register+0xa8>
 8006dae:	bb2b      	cbnz	r3, 8006dfc <dir_register+0xf4>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006db0:	45d1      	cmp	r9, sl
 8006db2:	d007      	beq.n	8006dc4 <dir_register+0xbc>
 8006db4:	4651      	mov	r1, sl
 8006db6:	4630      	mov	r0, r6
 8006db8:	f7ff f848 	bl	8005e4c <move_window.part.0>
		if (res == FR_OK) {
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f040 808a 	bne.w	8006ed6 <dir_register+0x1ce>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006dc2:	6a20      	ldr	r0, [r4, #32]
		*d++ = (BYTE)val;
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	f000 fd38 	bl	800783c <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006dcc:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006dce:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8006dd2:	1a9a      	subs	r2, r3, r2
 8006dd4:	2a02      	cmp	r2, #2
 8006dd6:	f240 80f1 	bls.w	8006fbc <dir_register+0x2b4>
			*d++ = *s++;
 8006dda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8006de6:	721a      	strb	r2, [r3, #8]
 8006de8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8006dec:	725a      	strb	r2, [r3, #9]
 8006dee:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8006df2:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8006df4:	2301      	movs	r3, #1
 8006df6:	9801      	ldr	r0, [sp, #4]
 8006df8:	70f3      	strb	r3, [r6, #3]
 8006dfa:	e796      	b.n	8006d2a <dir_register+0x22>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006dfc:	6965      	ldr	r5, [r4, #20]
 8006dfe:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006e00:	f1ba 0f00 	cmp.w	sl, #0
 8006e04:	d08e      	beq.n	8006d24 <dir_register+0x1c>
 8006e06:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8006e0a:	d28b      	bcs.n	8006d24 <dir_register+0x1c>
	FATFS *fs = dp->obj.fs;
 8006e0c:	f8d4 8000 	ldr.w	r8, [r4]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006e10:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006e14:	fbb5 f2f3 	udiv	r2, r5, r3
 8006e18:	fb03 5312 	mls	r3, r3, r2, r5
 8006e1c:	b143      	cbz	r3, 8006e30 <dir_register+0x128>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e1e:	464a      	mov	r2, r9
 8006e20:	f108 0734 	add.w	r7, r8, #52	; 0x34
 8006e24:	46d1      	mov	r9, sl
 8006e26:	4692      	mov	sl, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006e28:	443b      	add	r3, r7
	dp->dptr = ofs;						/* Current entry */
 8006e2a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006e2c:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006e2e:	e79f      	b.n	8006d70 <dir_register+0x68>
		if (!dp->clust) {		/* Static table */
 8006e30:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8006e32:	f10a 0001 	add.w	r0, sl, #1
 8006e36:	61e0      	str	r0, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	f47f af7b 	bne.w	8006d34 <dir_register+0x2c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006e3e:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8006e42:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8006e46:	d948      	bls.n	8006eda <dir_register+0x1d2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e48:	46ca      	mov	sl, r9
 8006e4a:	f108 0734 	add.w	r7, r8, #52	; 0x34
 8006e4e:	4681      	mov	r9, r0
 8006e50:	e7ea      	b.n	8006e28 <dir_register+0x120>
 8006e52:	7870      	ldrb	r0, [r6, #1]
 8006e54:	2301      	movs	r3, #1
 8006e56:	4652      	mov	r2, sl
 8006e58:	4659      	mov	r1, fp
 8006e5a:	f7fe ff43 	bl	8005ce4 <disk_write>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f47f af78 	bne.w	8006d54 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e64:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 8006e66:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e68:	ebaa 0203 	sub.w	r2, sl, r3
 8006e6c:	69f3      	ldr	r3, [r6, #28]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d283      	bcs.n	8006d7a <dir_register+0x72>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e72:	78b5      	ldrb	r5, [r6, #2]
 8006e74:	2d01      	cmp	r5, #1
 8006e76:	d801      	bhi.n	8006e7c <dir_register+0x174>
 8006e78:	e77f      	b.n	8006d7a <dir_register+0x72>
					wsect += fs->fsize;
 8006e7a:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e7c:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8006e7e:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e80:	4652      	mov	r2, sl
 8006e82:	2301      	movs	r3, #1
 8006e84:	4659      	mov	r1, fp
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e86:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e88:	f7fe ff2c 	bl	8005ce4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e8c:	2d01      	cmp	r5, #1
 8006e8e:	d1f4      	bne.n	8006e7a <dir_register+0x172>
 8006e90:	e773      	b.n	8006d7a <dir_register+0x72>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006e92:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006e96:	4298      	cmp	r0, r3
 8006e98:	d221      	bcs.n	8006ede <dir_register+0x1d6>
	clst -= 2;
 8006e9a:	1e82      	subs	r2, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e9c:	3b02      	subs	r3, #2
	clst -= 2;
 8006e9e:	9203      	str	r2, [sp, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006ea0:	f108 0734 	add.w	r7, r8, #52	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8006ea4:	9a02      	ldr	r2, [sp, #8]
 8006ea6:	61a2      	str	r2, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ea8:	9a03      	ldr	r2, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006eaa:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006eae:	4293      	cmp	r3, r2
	return clst * fs->csize + fs->database;
 8006eb0:	bf82      	ittt	hi
 8006eb2:	f8d8 302c 	ldrhi.w	r3, [r8, #44]	; 0x2c
 8006eb6:	f8b8 900a 	ldrhhi.w	r9, [r8, #10]
 8006eba:	fb02 3909 	mlahi	r9, r2, r9, r3
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ebe:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006ec2:	fbb5 f2f3 	udiv	r2, r5, r3
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ec6:	bf98      	it	ls
 8006ec8:	f04f 0900 	movls.w	r9, #0
				dp->sect = clust2sect(fs, clst);
 8006ecc:	f8c4 901c 	str.w	r9, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ed0:	fb03 5312 	mls	r3, r3, r2, r5
 8006ed4:	e7a8      	b.n	8006e28 <dir_register+0x120>
 8006ed6:	9001      	str	r0, [sp, #4]
 8006ed8:	e727      	b.n	8006d2a <dir_register+0x22>
				dp->sect = 0; return FR_NO_FILE;
 8006eda:	61e1      	str	r1, [r4, #28]
 8006edc:	e722      	b.n	8006d24 <dir_register+0x1c>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006ede:	69a1      	ldr	r1, [r4, #24]
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f7ff fb25 	bl	8006530 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	9002      	str	r0, [sp, #8]
 8006eea:	2800      	cmp	r0, #0
 8006eec:	f43f af1a 	beq.w	8006d24 <dir_register+0x1c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006ef0:	2801      	cmp	r0, #1
 8006ef2:	d07c      	beq.n	8006fee <dir_register+0x2e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	f43f af2d 	beq.w	8006d54 <dir_register+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006efa:	f898 3003 	ldrb.w	r3, [r8, #3]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d179      	bne.n	8006ff6 <dir_register+0x2ee>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f02:	f108 0734 	add.w	r7, r8, #52	; 0x34
		*d++ = (BYTE)val;
 8006f06:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f000 fc95 	bl	800783c <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f12:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 8006f16:	9a02      	ldr	r2, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f18:	3b02      	subs	r3, #2
	clst -= 2;
 8006f1a:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f1c:	429a      	cmp	r2, r3
	clst -= 2;
 8006f1e:	9203      	str	r2, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f20:	f080 80a4 	bcs.w	800706c <dir_register+0x364>
	return clst * fs->csize + fs->database;
 8006f24:	4610      	mov	r0, r2
 8006f26:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8006f2a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8006f2e:	fb00 2a01 	mla	sl, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f32:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
 8006f36:	2900      	cmp	r1, #0
 8006f38:	f000 8095 	beq.w	8007066 <dir_register+0x35e>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	ee08 ba10 	vmov	s16, fp
 8006f42:	46bb      	mov	fp, r7
 8006f44:	4627      	mov	r7, r4
 8006f46:	4654      	mov	r4, sl
 8006f48:	469a      	mov	sl, r3
						fs->wflag = 1;
 8006f4a:	f04f 0301 	mov.w	r3, #1
 8006f4e:	f888 3003 	strb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f52:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006f56:	2301      	movs	r3, #1
 8006f58:	4622      	mov	r2, r4
 8006f5a:	4659      	mov	r1, fp
 8006f5c:	f7fe fec2 	bl	8005ce4 <disk_write>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	f47f aef7 	bne.w	8006d54 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f66:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8006f6a:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f6e:	1ae2      	subs	r2, r4, r3
 8006f70:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d214      	bcs.n	8006fa2 <dir_register+0x29a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f78:	f898 9002 	ldrb.w	r9, [r8, #2]
 8006f7c:	f1b9 0f01 	cmp.w	r9, #1
 8006f80:	d802      	bhi.n	8006f88 <dir_register+0x280>
 8006f82:	e00e      	b.n	8006fa2 <dir_register+0x29a>
					wsect += fs->fsize;
 8006f84:	f8d8 301c 	ldr.w	r3, [r8, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f88:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 8006f8c:	441c      	add	r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f8e:	4622      	mov	r2, r4
 8006f90:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f92:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f96:	4659      	mov	r1, fp
 8006f98:	f7fe fea4 	bl	8005ce4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f9c:	f1b9 0f01 	cmp.w	r9, #1
 8006fa0:	d1f0      	bne.n	8006f84 <dir_register+0x27c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006fa2:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
 8006fa6:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8006faa:	f10a 0301 	add.w	r3, sl, #1
 8006fae:	1c4c      	adds	r4, r1, #1
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	f8c8 4030 	str.w	r4, [r8, #48]	; 0x30
 8006fb6:	d24d      	bcs.n	8007054 <dir_register+0x34c>
 8006fb8:	469a      	mov	sl, r3
 8006fba:	e7c6      	b.n	8006f4a <dir_register+0x242>
			*d++ = *s++;
 8006fbc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8006fc6:	705a      	strb	r2, [r3, #1]
 8006fc8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8006fcc:	709a      	strb	r2, [r3, #2]
 8006fce:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8006fd2:	70da      	strb	r2, [r3, #3]
 8006fd4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006fd8:	711a      	strb	r2, [r3, #4]
 8006fda:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8006fde:	715a      	strb	r2, [r3, #5]
 8006fe0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8006fe4:	719a      	strb	r2, [r3, #6]
 8006fe6:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8006fea:	71da      	strb	r2, [r3, #7]
 8006fec:	e6f9      	b.n	8006de2 <dir_register+0xda>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006fee:	2302      	movs	r3, #2
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	e699      	b.n	8006d2a <dir_register+0x22>
		wsect = fs->winsect;	/* Current sector number */
 8006ff6:	f8d8 a030 	ldr.w	sl, [r8, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006ffa:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006ffe:	f108 0734 	add.w	r7, r8, #52	; 0x34
 8007002:	2301      	movs	r3, #1
 8007004:	4652      	mov	r2, sl
 8007006:	4639      	mov	r1, r7
 8007008:	f7fe fe6c 	bl	8005ce4 <disk_write>
 800700c:	2800      	cmp	r0, #0
 800700e:	f47f aea1 	bne.w	8006d54 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007012:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8007016:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800701a:	ebaa 0103 	sub.w	r1, sl, r3
 800701e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007022:	4299      	cmp	r1, r3
 8007024:	f4bf af6f 	bcs.w	8006f06 <dir_register+0x1fe>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007028:	f898 9002 	ldrb.w	r9, [r8, #2]
 800702c:	f1b9 0f01 	cmp.w	r9, #1
 8007030:	d802      	bhi.n	8007038 <dir_register+0x330>
 8007032:	e768      	b.n	8006f06 <dir_register+0x1fe>
					wsect += fs->fsize;
 8007034:	f8d8 301c 	ldr.w	r3, [r8, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007038:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 800703c:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800703e:	4652      	mov	r2, sl
 8007040:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007042:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8007046:	4639      	mov	r1, r7
 8007048:	f7fe fe4c 	bl	8005ce4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800704c:	f1b9 0f01 	cmp.w	r9, #1
 8007050:	d1f0      	bne.n	8007034 <dir_register+0x32c>
 8007052:	e758      	b.n	8006f06 <dir_register+0x1fe>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007054:	f8d8 3018 	ldr.w	r3, [r8, #24]
					fs->winsect -= n;							/* Restore window offset */
 8007058:	463c      	mov	r4, r7
 800705a:	465f      	mov	r7, fp
 800705c:	ee18 ba10 	vmov	fp, s16
 8007060:	eba1 0a0a 	sub.w	sl, r1, sl
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007064:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8007066:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
 800706a:	e71b      	b.n	8006ea4 <dir_register+0x19c>
	return clst * fs->csize + fs->database;
 800706c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007070:	f04f 0a00 	mov.w	sl, #0
 8007074:	e75d      	b.n	8006f32 <dir_register+0x22a>
 8007076:	bf00      	nop

08007078 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800707c:	b090      	sub	sp, #64	; 0x40
 800707e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007080:	2800      	cmp	r0, #0
 8007082:	f000 809c 	beq.w	80071be <f_open+0x146>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007086:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800708a:	4616      	mov	r6, r2
 800708c:	4604      	mov	r4, r0
 800708e:	463a      	mov	r2, r7
 8007090:	a903      	add	r1, sp, #12
 8007092:	a801      	add	r0, sp, #4
 8007094:	f7fe ff14 	bl	8005ec0 <find_volume>
	if (res == FR_OK) {
 8007098:	4605      	mov	r5, r0
 800709a:	b128      	cbz	r0, 80070a8 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800709c:	2300      	movs	r3, #0
 800709e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 80070a0:	4628      	mov	r0, r5
 80070a2:	b010      	add	sp, #64	; 0x40
 80070a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 80070a8:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80070aa:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 80070ac:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80070ae:	a804      	add	r0, sp, #16
 80070b0:	f7ff fbd0 	bl	8006854 <follow_path>
		if (res == FR_OK) {
 80070b4:	bb00      	cbnz	r0, 80070f8 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80070b6:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f2c0 8086 	blt.w	80071cc <f_open+0x154>
		if (Files[i].fs) {	/* Existing entry */
 80070c0:	4baa      	ldr	r3, [pc, #680]	; (800736c <f_open+0x2f4>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80070c2:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 80070c4:	f8d3 8000 	ldr.w	r8, [r3]
				Files[i].clu == dp->obj.sclust &&
 80070c8:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 80070cc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80070d0:	f027 0201 	bic.w	r2, r7, #1
 80070d4:	4611      	mov	r1, r2
		if (Files[i].fs) {	/* Existing entry */
 80070d6:	f1b8 0f00 	cmp.w	r8, #0
 80070da:	f000 80fb 	beq.w	80072d4 <f_open+0x25c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80070de:	4580      	cmp	r8, r0
 80070e0:	d076      	beq.n	80071d0 <f_open+0x158>
		if (Files[i].fs) {	/* Existing entry */
 80070e2:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80070e6:	f1b8 0f00 	cmp.w	r8, #0
 80070ea:	f000 8088 	beq.w	80071fe <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80070ee:	4580      	cmp	r8, r0
 80070f0:	f000 8129 	beq.w	8007346 <f_open+0x2ce>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80070f4:	2512      	movs	r5, #18
 80070f6:	e7d1      	b.n	800709c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80070f8:	f016 0f1c 	tst.w	r6, #28
 80070fc:	d064      	beq.n	80071c8 <f_open+0x150>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80070fe:	2804      	cmp	r0, #4
 8007100:	d162      	bne.n	80071c8 <f_open+0x150>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007102:	4b9a      	ldr	r3, [pc, #616]	; (800736c <f_open+0x2f4>)
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	b112      	cbz	r2, 800710e <f_open+0x96>
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f2      	bne.n	80070f4 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800710e:	a804      	add	r0, sp, #16
 8007110:	f7ff fdfa 	bl	8006d08 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007114:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007118:	2800      	cmp	r0, #0
 800711a:	d155      	bne.n	80071c8 <f_open+0x150>
				dw = GET_FATTIME();
 800711c:	f7fe fdae 	bl	8005c7c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8007122:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8007124:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007128:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 800712c:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800712e:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val;
 8007130:	7458      	strb	r0, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8007132:	739e      	strb	r6, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8007134:	741a      	strb	r2, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8007138:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val;
 800713a:	7658      	strb	r0, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 800713c:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800713e:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007142:	9b03      	ldr	r3, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007144:	2120      	movs	r1, #32
 8007146:	72d1      	strb	r1, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
 8007148:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800714a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800714c:	2903      	cmp	r1, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800714e:	bf08      	it	eq
 8007150:	8a91      	ldrheq	r1, [r2, #20]
	cl = ld_word(dir + DIR_FstClusLO);
 8007152:	8b56      	ldrh	r6, [r2, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007154:	bf08      	it	eq
 8007156:	ea46 4601 	orreq.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800715a:	2100      	movs	r1, #0
 800715c:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800715e:	7818      	ldrb	r0, [r3, #0]
 8007160:	2803      	cmp	r0, #3
 8007162:	d100      	bne.n	8007166 <f_open+0xee>
	*ptr++ = (BYTE)val; val >>= 8;
 8007164:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8007166:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8007168:	2200      	movs	r2, #0
 800716a:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 800716c:	2101      	movs	r1, #1
 800716e:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8007170:	b19e      	cbz	r6, 800719a <f_open+0x122>
						res = remove_chain(&dj.obj, cl, 0);
 8007172:	4631      	mov	r1, r6
 8007174:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8007176:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800717a:	f7ff fd0b 	bl	8006b94 <remove_chain>
						if (res == FR_OK) {
 800717e:	bb18      	cbnz	r0, 80071c8 <f_open+0x150>
							res = move_window(fs, dw);
 8007180:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007184:	4590      	cmp	r8, r2
 8007186:	f000 80eb 	beq.w	8007360 <f_open+0x2e8>
 800718a:	4618      	mov	r0, r3
 800718c:	4641      	mov	r1, r8
 800718e:	f7fe fe5d 	bl	8005e4c <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	3e01      	subs	r6, #1
 8007196:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8007198:	b9b0      	cbnz	r0, 80071c8 <f_open+0x150>
				mode |= FA_MODIFIED;
 800719a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800719e:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80071a6:	3900      	subs	r1, #0
			fp->dir_ptr = dj.dir;
 80071a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071aa:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80071ac:	bf18      	it	ne
 80071ae:	2101      	movne	r1, #1
 80071b0:	a804      	add	r0, sp, #16
 80071b2:	f7fe fdb1 	bl	8005d18 <inc_lock>
 80071b6:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80071b8:	bb68      	cbnz	r0, 8007216 <f_open+0x19e>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80071ba:	2502      	movs	r5, #2
 80071bc:	e76e      	b.n	800709c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80071be:	2509      	movs	r5, #9
}
 80071c0:	4628      	mov	r0, r5
 80071c2:	b010      	add	sp, #64	; 0x40
 80071c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c8:	4605      	mov	r5, r0
 80071ca:	e767      	b.n	800709c <f_open+0x24>
				res = FR_INVALID_NAME;
 80071cc:	2506      	movs	r5, #6
 80071ce:	e765      	b.n	800709c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80071d0:	6858      	ldr	r0, [r3, #4]
 80071d2:	4560      	cmp	r0, ip
 80071d4:	f000 80bc 	beq.w	8007350 <f_open+0x2d8>
		if (Files[i].fs) {	/* Existing entry */
 80071d8:	6918      	ldr	r0, [r3, #16]
 80071da:	b180      	cbz	r0, 80071fe <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80071dc:	4540      	cmp	r0, r8
 80071de:	d189      	bne.n	80070f4 <f_open+0x7c>
 80071e0:	6958      	ldr	r0, [r3, #20]
 80071e2:	4584      	cmp	ip, r0
 80071e4:	d186      	bne.n	80070f4 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 80071e6:	6998      	ldr	r0, [r3, #24]
 80071e8:	4570      	cmp	r0, lr
 80071ea:	d183      	bne.n	80070f4 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80071ec:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	d167      	bne.n	80072c2 <f_open+0x24a>
 80071f2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80071f6:	899b      	ldrh	r3, [r3, #12]
 80071f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071fc:	d061      	beq.n	80072c2 <f_open+0x24a>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80071fe:	f016 0f1c 	tst.w	r6, #28
 8007202:	d04c      	beq.n	800729e <f_open+0x226>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007204:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007208:	f013 0f11 	tst.w	r3, #17
 800720c:	d160      	bne.n	80072d0 <f_open+0x258>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800720e:	0773      	lsls	r3, r6, #29
 8007210:	d559      	bpl.n	80072c6 <f_open+0x24e>
 8007212:	2508      	movs	r5, #8
 8007214:	e742      	b.n	800709c <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007216:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800721a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800721c:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 8007220:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8007222:	2a03      	cmp	r2, #3
 8007224:	d102      	bne.n	800722c <f_open+0x1b4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007226:	8a9a      	ldrh	r2, [r3, #20]
 8007228:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800722c:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 800722e:	f8d3 801c 	ldr.w	r8, [r3, #28]
			fp->obj.id = fs->id;
 8007232:	f8b9 3006 	ldrh.w	r3, [r9, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007236:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800723a:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800723c:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->flag = mode;		/* Set file access mode */
 8007240:	7527      	strb	r7, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007242:	f8c4 9000 	str.w	r9, [r4]
			fp->obj.id = fs->id;
 8007246:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007248:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 800724a:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800724c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800724e:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 8007250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007254:	4650      	mov	r0, sl
 8007256:	f000 faf1 	bl	800783c <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800725a:	06bf      	lsls	r7, r7, #26
 800725c:	f57f af20 	bpl.w	80070a0 <f_open+0x28>
 8007260:	f1b8 0f00 	cmp.w	r8, #0
 8007264:	f43f af1c 	beq.w	80070a0 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007268:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800726c:	f8b9 700a 	ldrh.w	r7, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007270:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007274:	fb03 f707 	mul.w	r7, r3, r7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007278:	4547      	cmp	r7, r8
 800727a:	d306      	bcc.n	800728a <f_open+0x212>
 800727c:	e03e      	b.n	80072fc <f_open+0x284>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800727e:	1c70      	adds	r0, r6, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007280:	eba8 0807 	sub.w	r8, r8, r7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007284:	d01b      	beq.n	80072be <f_open+0x246>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007286:	4547      	cmp	r7, r8
 8007288:	d234      	bcs.n	80072f4 <f_open+0x27c>
					clst = get_fat(&fp->obj, clst);
 800728a:	4631      	mov	r1, r6
 800728c:	6820      	ldr	r0, [r4, #0]
 800728e:	f7ff f865 	bl	800635c <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8007292:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8007294:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 8007296:	d8f2      	bhi.n	800727e <f_open+0x206>
 8007298:	2502      	movs	r5, #2
				fp->clust = clst;
 800729a:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800729c:	e6fe      	b.n	800709c <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800729e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80072a2:	06d9      	lsls	r1, r3, #27
 80072a4:	d424      	bmi.n	80072f0 <f_open+0x278>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80072a6:	07b1      	lsls	r1, r6, #30
 80072a8:	d501      	bpl.n	80072ae <f_open+0x236>
 80072aa:	07db      	lsls	r3, r3, #31
 80072ac:	d410      	bmi.n	80072d0 <f_open+0x258>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80072ae:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80072b2:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80072b4:	2e00      	cmp	r6, #0
 80072b6:	f47f af70 	bne.w	800719a <f_open+0x122>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80072ba:	4611      	mov	r1, r2
 80072bc:	e771      	b.n	80071a2 <f_open+0x12a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80072be:	2501      	movs	r5, #1
 80072c0:	e7eb      	b.n	800729a <f_open+0x222>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80072c2:	2510      	movs	r5, #16
 80072c4:	e6ea      	b.n	800709c <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80072c6:	0730      	lsls	r0, r6, #28
 80072c8:	f53f af28 	bmi.w	800711c <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	e768      	b.n	80071a2 <f_open+0x12a>
						res = FR_DENIED;
 80072d0:	2507      	movs	r5, #7
 80072d2:	e6e3      	b.n	800709c <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 80072d4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80072d8:	f1b8 0f00 	cmp.w	r8, #0
 80072dc:	d08f      	beq.n	80071fe <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80072de:	4540      	cmp	r0, r8
 80072e0:	d18d      	bne.n	80071fe <f_open+0x186>
 80072e2:	6958      	ldr	r0, [r3, #20]
 80072e4:	4560      	cmp	r0, ip
 80072e6:	d18a      	bne.n	80071fe <f_open+0x186>
				Files[i].clu == dp->obj.sclust &&
 80072e8:	6998      	ldr	r0, [r3, #24]
 80072ea:	4570      	cmp	r0, lr
 80072ec:	d187      	bne.n	80071fe <f_open+0x186>
 80072ee:	e77d      	b.n	80071ec <f_open+0x174>
					res = FR_NO_FILE;
 80072f0:	2504      	movs	r5, #4
 80072f2:	e6d3      	b.n	800709c <f_open+0x24>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80072f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80072f8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80072fc:	fbb8 f2f3 	udiv	r2, r8, r3
 8007300:	fb03 8312 	mls	r3, r3, r2, r8
				fp->clust = clst;
 8007304:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007306:	2b00      	cmp	r3, #0
 8007308:	f43f aeca 	beq.w	80070a0 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800730c:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8007310:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007312:	3b02      	subs	r3, #2
 8007314:	429e      	cmp	r6, r3
 8007316:	f4bf af50 	bcs.w	80071ba <f_open+0x142>
	return clst * fs->csize + fs->database;
 800731a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800731e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8007322:	fb06 3301 	mla	r3, r6, r1, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007326:	2b00      	cmp	r3, #0
 8007328:	f43f af47 	beq.w	80071ba <f_open+0x142>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800732c:	441a      	add	r2, r3
 800732e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007330:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007334:	4651      	mov	r1, sl
 8007336:	2301      	movs	r3, #1
 8007338:	f7fe fcc6 	bl	8005cc8 <disk_read>
 800733c:	2800      	cmp	r0, #0
 800733e:	f43f aeaf 	beq.w	80070a0 <f_open+0x28>
 8007342:	2501      	movs	r5, #1
 8007344:	e6aa      	b.n	800709c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007346:	6958      	ldr	r0, [r3, #20]
 8007348:	4560      	cmp	r0, ip
 800734a:	f47f aed3 	bne.w	80070f4 <f_open+0x7c>
 800734e:	e74a      	b.n	80071e6 <f_open+0x16e>
				Files[i].clu == dp->obj.sclust &&
 8007350:	6898      	ldr	r0, [r3, #8]
 8007352:	4570      	cmp	r0, lr
 8007354:	d007      	beq.n	8007366 <f_open+0x2ee>
		if (Files[i].fs) {	/* Existing entry */
 8007356:	6918      	ldr	r0, [r3, #16]
 8007358:	2800      	cmp	r0, #0
 800735a:	f47f aec8 	bne.w	80070ee <f_open+0x76>
 800735e:	e74e      	b.n	80071fe <f_open+0x186>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007360:	3e01      	subs	r6, #1
 8007362:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8007364:	e719      	b.n	800719a <f_open+0x122>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007366:	4628      	mov	r0, r5
 8007368:	e741      	b.n	80071ee <f_open+0x176>
 800736a:	bf00      	nop
 800736c:	20002f30 	.word	0x20002f30

08007370 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8007376:	2300      	movs	r3, #0
{
 8007378:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 800737a:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800737c:	b150      	cbz	r0, 8007394 <f_read+0x24>
 800737e:	6803      	ldr	r3, [r0, #0]
 8007380:	4604      	mov	r4, r0
 8007382:	b13b      	cbz	r3, 8007394 <f_read+0x24>
 8007384:	4690      	mov	r8, r2
 8007386:	781a      	ldrb	r2, [r3, #0]
 8007388:	b122      	cbz	r2, 8007394 <f_read+0x24>
 800738a:	88da      	ldrh	r2, [r3, #6]
 800738c:	460e      	mov	r6, r1
 800738e:	8881      	ldrh	r1, [r0, #4]
 8007390:	4291      	cmp	r1, r2
 8007392:	d005      	beq.n	80073a0 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8007394:	f04f 0909 	mov.w	r9, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8007398:	4648      	mov	r0, r9
 800739a:	b005      	add	sp, #20
 800739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80073a0:	7858      	ldrb	r0, [r3, #1]
 80073a2:	f7fe fc77 	bl	8005c94 <disk_status>
 80073a6:	07c2      	lsls	r2, r0, #31
 80073a8:	d4f4      	bmi.n	8007394 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80073aa:	f894 9015 	ldrb.w	r9, [r4, #21]
 80073ae:	f1b9 0f00 	cmp.w	r9, #0
 80073b2:	d1f1      	bne.n	8007398 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80073b4:	7d23      	ldrb	r3, [r4, #20]
 80073b6:	f013 0301 	ands.w	r3, r3, #1
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	f000 80f1 	beq.w	80075a2 <f_read+0x232>
	remain = fp->obj.objsize - fp->fptr;
 80073c0:	69a1      	ldr	r1, [r4, #24]
 80073c2:	68e3      	ldr	r3, [r4, #12]
 80073c4:	1a5b      	subs	r3, r3, r1
 80073c6:	4598      	cmp	r8, r3
 80073c8:	bf28      	it	cs
 80073ca:	4698      	movcs	r8, r3
	for ( ;  btr;								/* Repeat until all data read */
 80073cc:	f1b8 0f00 	cmp.w	r8, #0
 80073d0:	d0e2      	beq.n	8007398 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80073d2:	46a3      	mov	fp, r4
 80073d4:	f104 0331 	add.w	r3, r4, #49	; 0x31
 80073d8:	f85b ab30 	ldr.w	sl, [fp], #48
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80073e2:	4618      	mov	r0, r3
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80073e4:	fbb1 f3f0 	udiv	r3, r1, r0
 80073e8:	fb00 1513 	mls	r5, r0, r3, r1
 80073ec:	2d00      	cmp	r5, #0
 80073ee:	d147      	bne.n	8007480 <f_read+0x110>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80073f0:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 80073f4:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80073f6:	401a      	ands	r2, r3
 80073f8:	d07a      	beq.n	80074f0 <f_read+0x180>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80073fa:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073fc:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 8007400:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007402:	3b02      	subs	r3, #2
 8007404:	4298      	cmp	r0, r3
 8007406:	f080 8081 	bcs.w	800750c <f_read+0x19c>
	return clst * fs->csize + fs->database;
 800740a:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800740e:	f8da 502c 	ldr.w	r5, [sl, #44]	; 0x2c
 8007412:	fb01 5500 	mla	r5, r1, r0, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007416:	2d00      	cmp	r5, #0
 8007418:	d078      	beq.n	800750c <f_read+0x19c>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800741a:	f8ba 000c 	ldrh.w	r0, [sl, #12]
			if (cc) {							/* Read maximum contiguous sectors directly */
 800741e:	4540      	cmp	r0, r8
			sect += csect;
 8007420:	4415      	add	r5, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007422:	d87b      	bhi.n	800751c <f_read+0x1ac>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007424:	fbb8 f3f0 	udiv	r3, r8, r0
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007428:	18d0      	adds	r0, r2, r3
 800742a:	4288      	cmp	r0, r1
					cc = fs->csize - csect;
 800742c:	bf88      	it	hi
 800742e:	1a8b      	subhi	r3, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007430:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8007434:	9302      	str	r3, [sp, #8]
 8007436:	462a      	mov	r2, r5
 8007438:	4631      	mov	r1, r6
 800743a:	f7fe fc45 	bl	8005cc8 <disk_read>
 800743e:	2800      	cmp	r0, #0
 8007440:	f040 80a7 	bne.w	8007592 <f_read+0x222>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007444:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8007448:	9b02      	ldr	r3, [sp, #8]
 800744a:	2a00      	cmp	r2, #0
 800744c:	f2c0 80c1 	blt.w	80075d2 <f_read+0x262>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007450:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007454:	69a1      	ldr	r1, [r4, #24]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007456:	fb00 f303 	mul.w	r3, r0, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800745a:	441e      	add	r6, r3
 800745c:	eba8 0803 	sub.w	r8, r8, r3
 8007460:	4419      	add	r1, r3
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	61a1      	str	r1, [r4, #24]
 8007466:	4413      	add	r3, r2
 8007468:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800746a:	f1b8 0f00 	cmp.w	r8, #0
 800746e:	d093      	beq.n	8007398 <f_read+0x28>
 8007470:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007474:	fbb1 f3f0 	udiv	r3, r1, r0
 8007478:	fb00 1513 	mls	r5, r0, r3, r1
 800747c:	2d00      	cmp	r5, #0
 800747e:	d0b7      	beq.n	80073f0 <f_read+0x80>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007480:	1b43      	subs	r3, r0, r5
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007482:	4543      	cmp	r3, r8
 8007484:	bf28      	it	cs
 8007486:	4643      	movcs	r3, r8
	if (cnt) {
 8007488:	b383      	cbz	r3, 80074ec <f_read+0x17c>
 800748a:	1c6a      	adds	r2, r5, #1
 800748c:	445a      	add	r2, fp
 800748e:	1ab2      	subs	r2, r6, r2
 8007490:	2a02      	cmp	r2, #2
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007492:	445d      	add	r5, fp
 8007494:	f103 3eff 	add.w	lr, r3, #4294967295
 8007498:	f240 8086 	bls.w	80075a8 <f_read+0x238>
 800749c:	f1be 0f07 	cmp.w	lr, #7
 80074a0:	f240 8082 	bls.w	80075a8 <f_read+0x238>
 80074a4:	f023 0c03 	bic.w	ip, r3, #3
 80074a8:	44ac      	add	ip, r5
 80074aa:	462a      	mov	r2, r5
 80074ac:	4631      	mov	r1, r6
			*d++ = *s++;
 80074ae:	f852 0b04 	ldr.w	r0, [r2], #4
 80074b2:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
 80074b6:	4562      	cmp	r2, ip
 80074b8:	d1f9      	bne.n	80074ae <f_read+0x13e>
 80074ba:	f023 0203 	bic.w	r2, r3, #3
 80074be:	4293      	cmp	r3, r2
 80074c0:	eb06 0102 	add.w	r1, r6, r2
 80074c4:	eb05 0002 	add.w	r0, r5, r2
 80074c8:	d00a      	beq.n	80074e0 <f_read+0x170>
			*d++ = *s++;
 80074ca:	5cad      	ldrb	r5, [r5, r2]
 80074cc:	54b5      	strb	r5, [r6, r2]
		} while (--cnt);
 80074ce:	ebbe 0202 	subs.w	r2, lr, r2
 80074d2:	d005      	beq.n	80074e0 <f_read+0x170>
			*d++ = *s++;
 80074d4:	7845      	ldrb	r5, [r0, #1]
 80074d6:	704d      	strb	r5, [r1, #1]
		} while (--cnt);
 80074d8:	2a01      	cmp	r2, #1
 80074da:	d001      	beq.n	80074e0 <f_read+0x170>
			*d++ = *s++;
 80074dc:	7882      	ldrb	r2, [r0, #2]
 80074de:	708a      	strb	r2, [r1, #2]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80074e0:	69a1      	ldr	r1, [r4, #24]
 80074e2:	441e      	add	r6, r3
 80074e4:	eba8 0803 	sub.w	r8, r8, r3
 80074e8:	4419      	add	r1, r3
 80074ea:	e7ba      	b.n	8007462 <f_read+0xf2>
 80074ec:	61a1      	str	r1, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 80074ee:	e779      	b.n	80073e4 <f_read+0x74>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80074f0:	bb61      	cbnz	r1, 800754c <f_read+0x1dc>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80074f2:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80074f4:	2801      	cmp	r0, #1
 80074f6:	d909      	bls.n	800750c <f_read+0x19c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d04a      	beq.n	8007592 <f_read+0x222>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074fc:	f8da 3018 	ldr.w	r3, [sl, #24]
				fp->clust = clst;				/* Update current cluster */
 8007500:	61e0      	str	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007502:	3b02      	subs	r3, #2
	clst -= 2;
 8007504:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007506:	4298      	cmp	r0, r3
 8007508:	f4ff af7f 	bcc.w	800740a <f_read+0x9a>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800750c:	f04f 0902 	mov.w	r9, #2
}
 8007510:	4648      	mov	r0, r9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007512:	f884 9015 	strb.w	r9, [r4, #21]
}
 8007516:	b005      	add	sp, #20
 8007518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800751c:	6a22      	ldr	r2, [r4, #32]
 800751e:	42aa      	cmp	r2, r5
 8007520:	d00d      	beq.n	800753e <f_read+0x1ce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007522:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	db2c      	blt.n	8007584 <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800752a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800752e:	2301      	movs	r3, #1
 8007530:	462a      	mov	r2, r5
 8007532:	4659      	mov	r1, fp
 8007534:	f7fe fbc8 	bl	8005cc8 <disk_read>
 8007538:	bb58      	cbnz	r0, 8007592 <f_read+0x222>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800753a:	f8ba 000c 	ldrh.w	r0, [sl, #12]
 800753e:	69a1      	ldr	r1, [r4, #24]
			fp->sect = sect;
 8007540:	6225      	str	r5, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007542:	fbb1 f5f0 	udiv	r5, r1, r0
 8007546:	fb00 1515 	mls	r5, r0, r5, r1
 800754a:	e799      	b.n	8007480 <f_read+0x110>
					if (fp->cltbl) {
 800754c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800754e:	b3a5      	cbz	r5, 80075ba <f_read+0x24a>
	FATFS *fs = fp->obj.fs;
 8007550:	f8d4 c000 	ldr.w	ip, [r4]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007554:	6868      	ldr	r0, [r5, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007556:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 800755a:	fbb1 f3f3 	udiv	r3, r1, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800755e:	3504      	adds	r5, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007560:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 8007564:	fbb3 f3f1 	udiv	r3, r3, r1
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007568:	2800      	cmp	r0, #0
 800756a:	d0cf      	beq.n	800750c <f_read+0x19c>
 800756c:	4629      	mov	r1, r5
 800756e:	e004      	b.n	800757a <f_read+0x20a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007570:	1a1b      	subs	r3, r3, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007572:	f851 0f08 	ldr.w	r0, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007576:	2800      	cmp	r0, #0
 8007578:	d0c8      	beq.n	800750c <f_read+0x19c>
		if (cl < ncl) break;	/* In this fragment? */
 800757a:	4283      	cmp	r3, r0
 800757c:	d2f8      	bcs.n	8007570 <f_read+0x200>
	return cl + *tbl;	/* Return the cluster number */
 800757e:	6848      	ldr	r0, [r1, #4]
 8007580:	4418      	add	r0, r3
 8007582:	e7b7      	b.n	80074f4 <f_read+0x184>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007584:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8007588:	2301      	movs	r3, #1
 800758a:	4659      	mov	r1, fp
 800758c:	f7fe fbaa 	bl	8005ce4 <disk_write>
 8007590:	b1d0      	cbz	r0, 80075c8 <f_read+0x258>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007592:	f8dd 9000 	ldr.w	r9, [sp]
 8007596:	2301      	movs	r3, #1
}
 8007598:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800759a:	7563      	strb	r3, [r4, #21]
}
 800759c:	b005      	add	sp, #20
 800759e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80075a2:	f04f 0907 	mov.w	r9, #7
 80075a6:	e6f7      	b.n	8007398 <f_read+0x28>
 80075a8:	1e72      	subs	r2, r6, #1
 80075aa:	18e8      	adds	r0, r5, r3
			*d++ = *s++;
 80075ac:	f815 1b01 	ldrb.w	r1, [r5], #1
 80075b0:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 80075b4:	4285      	cmp	r5, r0
 80075b6:	d1f9      	bne.n	80075ac <f_read+0x23c>
 80075b8:	e792      	b.n	80074e0 <f_read+0x170>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80075ba:	69e1      	ldr	r1, [r4, #28]
 80075bc:	6820      	ldr	r0, [r4, #0]
 80075be:	9202      	str	r2, [sp, #8]
 80075c0:	f7fe fecc 	bl	800635c <get_fat.isra.0>
 80075c4:	9a02      	ldr	r2, [sp, #8]
 80075c6:	e795      	b.n	80074f4 <f_read+0x184>
					fp->flag &= (BYTE)~FA_DIRTY;
 80075c8:	7d23      	ldrb	r3, [r4, #20]
 80075ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ce:	7523      	strb	r3, [r4, #20]
 80075d0:	e7ab      	b.n	800752a <f_read+0x1ba>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80075d2:	6a22      	ldr	r2, [r4, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80075d4:	f8ba 000c 	ldrh.w	r0, [sl, #12]
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80075d8:	1b55      	subs	r5, r2, r5
 80075da:	429d      	cmp	r5, r3
 80075dc:	f4bf af3a 	bcs.w	8007454 <f_read+0xe4>
	if (cnt) {
 80075e0:	2800      	cmp	r0, #0
 80075e2:	f43f af37 	beq.w	8007454 <f_read+0xe4>
 80075e6:	9a01      	ldr	r2, [sp, #4]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80075e8:	fb00 6105 	mla	r1, r0, r5, r6
 80075ec:	1a8a      	subs	r2, r1, r2
 80075ee:	1e45      	subs	r5, r0, #1
 80075f0:	2a02      	cmp	r2, #2
 80075f2:	9102      	str	r1, [sp, #8]
 80075f4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80075f8:	9503      	str	r5, [sp, #12]
 80075fa:	d928      	bls.n	800764e <f_read+0x2de>
 80075fc:	2d07      	cmp	r5, #7
 80075fe:	d926      	bls.n	800764e <f_read+0x2de>
 8007600:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8007604:	460a      	mov	r2, r1
 8007606:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 800760a:	4671      	mov	r1, lr
			*d++ = *s++;
 800760c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007610:	f842 5b04 	str.w	r5, [r2], #4
		} while (--cnt);
 8007614:	4562      	cmp	r2, ip
 8007616:	d1f9      	bne.n	800760c <f_read+0x29c>
 8007618:	f020 0203 	bic.w	r2, r0, #3
 800761c:	9902      	ldr	r1, [sp, #8]
 800761e:	4290      	cmp	r0, r2
 8007620:	eb01 0c02 	add.w	ip, r1, r2
 8007624:	eb0e 0502 	add.w	r5, lr, r2
 8007628:	f43f af12 	beq.w	8007450 <f_read+0xe0>
			*d++ = *s++;
 800762c:	f81e 0002 	ldrb.w	r0, [lr, r2]
 8007630:	5488      	strb	r0, [r1, r2]
		} while (--cnt);
 8007632:	9903      	ldr	r1, [sp, #12]
 8007634:	1a8a      	subs	r2, r1, r2
 8007636:	f43f af0b 	beq.w	8007450 <f_read+0xe0>
			*d++ = *s++;
 800763a:	7868      	ldrb	r0, [r5, #1]
 800763c:	f88c 0001 	strb.w	r0, [ip, #1]
		} while (--cnt);
 8007640:	2a01      	cmp	r2, #1
 8007642:	f43f af05 	beq.w	8007450 <f_read+0xe0>
			*d++ = *s++;
 8007646:	78aa      	ldrb	r2, [r5, #2]
 8007648:	f88c 2002 	strb.w	r2, [ip, #2]
		} while (--cnt);
 800764c:	e700      	b.n	8007450 <f_read+0xe0>
 800764e:	9a02      	ldr	r2, [sp, #8]
 8007650:	4410      	add	r0, r2
			*d++ = *s++;
 8007652:	f81e 1b01 	ldrb.w	r1, [lr], #1
 8007656:	f802 1b01 	strb.w	r1, [r2], #1
		} while (--cnt);
 800765a:	4290      	cmp	r0, r2
 800765c:	d1f9      	bne.n	8007652 <f_read+0x2e2>
 800765e:	e6f7      	b.n	8007450 <f_read+0xe0>

08007660 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007660:	b158      	cbz	r0, 800767a <f_close+0x1a>
 8007662:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007668:	b12b      	cbz	r3, 8007676 <f_close+0x16>
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	b11a      	cbz	r2, 8007676 <f_close+0x16>
 800766e:	8881      	ldrh	r1, [r0, #4]
 8007670:	88da      	ldrh	r2, [r3, #6]
 8007672:	4291      	cmp	r1, r2
 8007674:	d003      	beq.n	800767e <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8007676:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8007678:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800767a:	2009      	movs	r0, #9
}
 800767c:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800767e:	7858      	ldrb	r0, [r3, #1]
 8007680:	f7fe fb08 	bl	8005c94 <disk_status>
 8007684:	07c1      	lsls	r1, r0, #31
 8007686:	d4f6      	bmi.n	8007676 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007688:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800768a:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800768c:	065a      	lsls	r2, r3, #25
 800768e:	d53c      	bpl.n	800770a <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007690:	061b      	lsls	r3, r3, #24
 8007692:	d45d      	bmi.n	8007750 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 8007694:	f7fe faf2 	bl	8005c7c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8007698:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800769a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800769c:	4299      	cmp	r1, r3
			tm = GET_FATTIME();				/* Modified time */
 800769e:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80076a0:	d004      	beq.n	80076ac <f_close+0x4c>
 80076a2:	4628      	mov	r0, r5
 80076a4:	f7fe fbd2 	bl	8005e4c <move_window.part.0>
				if (res == FR_OK) {
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d1e5      	bne.n	8007678 <f_close+0x18>
					dir = fp->dir_ptr;
 80076ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80076ae:	7ad3      	ldrb	r3, [r2, #11]
 80076b0:	f043 0320 	orr.w	r3, r3, #32
 80076b4:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80076ba:	7693      	strb	r3, [r2, #26]
 80076bc:	f3c3 2007 	ubfx	r0, r3, #8, #8
	*ptr++ = (BYTE)val;
 80076c0:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 80076c2:	7809      	ldrb	r1, [r1, #0]
 80076c4:	2903      	cmp	r1, #3
 80076c6:	d103      	bne.n	80076d0 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80076c8:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80076ca:	7513      	strb	r3, [r2, #20]
 80076cc:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 80076ce:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80076d0:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80076d2:	7713      	strb	r3, [r2, #28]
 80076d4:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80076d6:	7751      	strb	r1, [r2, #29]
 80076d8:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80076da:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val;
 80076dc:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 80076de:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80076e0:	75d3      	strb	r3, [r2, #23]
 80076e2:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80076e4:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 80076e6:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80076e8:	7596      	strb	r6, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80076ea:	8253      	strh	r3, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 80076ec:	0e36      	lsrs	r6, r6, #24
					fs->wflag = 1;
 80076ee:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80076f0:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 80076f2:	7656      	strb	r6, [r2, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 80076f4:	4628      	mov	r0, r5
					fs->wflag = 1;
 80076f6:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80076f8:	f7fe feaa 	bl	8006450 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80076fc:	7d23      	ldrb	r3, [r4, #20]
 80076fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007702:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8007704:	2800      	cmp	r0, #0
 8007706:	d1b7      	bne.n	8007678 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007708:	6825      	ldr	r5, [r4, #0]
 800770a:	2d00      	cmp	r5, #0
 800770c:	d0b3      	beq.n	8007676 <f_close+0x16>
 800770e:	782b      	ldrb	r3, [r5, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0b0      	beq.n	8007676 <f_close+0x16>
 8007714:	88a2      	ldrh	r2, [r4, #4]
 8007716:	88eb      	ldrh	r3, [r5, #6]
 8007718:	429a      	cmp	r2, r3
 800771a:	d1ac      	bne.n	8007676 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800771c:	7868      	ldrb	r0, [r5, #1]
 800771e:	f7fe fab9 	bl	8005c94 <disk_status>
 8007722:	f010 0001 	ands.w	r0, r0, #1
 8007726:	d1a6      	bne.n	8007676 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007728:	6923      	ldr	r3, [r4, #16]
 800772a:	3b01      	subs	r3, #1
 800772c:	2b01      	cmp	r3, #1
 800772e:	d81c      	bhi.n	800776a <f_close+0x10a>
		n = Files[i].ctr;
 8007730:	4912      	ldr	r1, [pc, #72]	; (800777c <f_close+0x11c>)
 8007732:	011d      	lsls	r5, r3, #4
 8007734:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8007738:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800773a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800773e:	d016      	beq.n	800776e <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8007740:	b1b2      	cbz	r2, 8007770 <f_close+0x110>
 8007742:	3a01      	subs	r2, #1
 8007744:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8007746:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007748:	b192      	cbz	r2, 8007770 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 800774a:	2300      	movs	r3, #0
 800774c:	6023      	str	r3, [r4, #0]
}
 800774e:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007750:	6a22      	ldr	r2, [r4, #32]
 8007752:	7868      	ldrb	r0, [r5, #1]
 8007754:	2301      	movs	r3, #1
 8007756:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800775a:	f7fe fac3 	bl	8005ce4 <disk_write>
 800775e:	b950      	cbnz	r0, 8007776 <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007760:	7d23      	ldrb	r3, [r4, #20]
 8007762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007766:	7523      	strb	r3, [r4, #20]
 8007768:	e794      	b.n	8007694 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800776a:	2002      	movs	r0, #2
}
 800776c:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800776e:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007770:	2300      	movs	r3, #0
 8007772:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8007774:	e7e9      	b.n	800774a <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007776:	2001      	movs	r0, #1
}
 8007778:	bd70      	pop	{r4, r5, r6, pc}
 800777a:	bf00      	nop
 800777c:	20002f30 	.word	0x20002f30

08007780 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007780:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8007782:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <FATFS_LinkDriver+0x44>)
 8007784:	7a5c      	ldrb	r4, [r3, #9]
 8007786:	b9cc      	cbnz	r4, 80077bc <FATFS_LinkDriver+0x3c>
 8007788:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800778a:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 800778e:	7a5c      	ldrb	r4, [r3, #9]
 8007790:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8007792:	7a5c      	ldrb	r4, [r3, #9]
 8007794:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007798:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800779a:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800779c:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800779e:	441c      	add	r4, r3
 80077a0:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 80077a2:	1c54      	adds	r4, r2, #1
 80077a4:	b2e4      	uxtb	r4, r4
 80077a6:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 80077a8:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 80077aa:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 80077ac:	232f      	movs	r3, #47	; 0x2f
    path[1] = ':';
 80077ae:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 80077b0:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80077b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 80077b6:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80077b8:	70c8      	strb	r0, [r1, #3]
}
 80077ba:	4770      	bx	lr
  uint8_t ret = 1;
 80077bc:	2001      	movs	r0, #1
}
 80077be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	20002f54 	.word	0x20002f54

080077c8 <__errno>:
 80077c8:	4b01      	ldr	r3, [pc, #4]	; (80077d0 <__errno+0x8>)
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	20000028 	.word	0x20000028

080077d4 <__libc_init_array>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4d0d      	ldr	r5, [pc, #52]	; (800780c <__libc_init_array+0x38>)
 80077d8:	4c0d      	ldr	r4, [pc, #52]	; (8007810 <__libc_init_array+0x3c>)
 80077da:	1b64      	subs	r4, r4, r5
 80077dc:	10a4      	asrs	r4, r4, #2
 80077de:	2600      	movs	r6, #0
 80077e0:	42a6      	cmp	r6, r4
 80077e2:	d109      	bne.n	80077f8 <__libc_init_array+0x24>
 80077e4:	4d0b      	ldr	r5, [pc, #44]	; (8007814 <__libc_init_array+0x40>)
 80077e6:	4c0c      	ldr	r4, [pc, #48]	; (8007818 <__libc_init_array+0x44>)
 80077e8:	f002 fdcc 	bl	800a384 <_init>
 80077ec:	1b64      	subs	r4, r4, r5
 80077ee:	10a4      	asrs	r4, r4, #2
 80077f0:	2600      	movs	r6, #0
 80077f2:	42a6      	cmp	r6, r4
 80077f4:	d105      	bne.n	8007802 <__libc_init_array+0x2e>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fc:	4798      	blx	r3
 80077fe:	3601      	adds	r6, #1
 8007800:	e7ee      	b.n	80077e0 <__libc_init_array+0xc>
 8007802:	f855 3b04 	ldr.w	r3, [r5], #4
 8007806:	4798      	blx	r3
 8007808:	3601      	adds	r6, #1
 800780a:	e7f2      	b.n	80077f2 <__libc_init_array+0x1e>
 800780c:	0800a8cc 	.word	0x0800a8cc
 8007810:	0800a8cc 	.word	0x0800a8cc
 8007814:	0800a8cc 	.word	0x0800a8cc
 8007818:	0800a8d0 	.word	0x0800a8d0

0800781c <malloc>:
 800781c:	4b02      	ldr	r3, [pc, #8]	; (8007828 <malloc+0xc>)
 800781e:	4601      	mov	r1, r0
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	f000 b87f 	b.w	8007924 <_malloc_r>
 8007826:	bf00      	nop
 8007828:	20000028 	.word	0x20000028

0800782c <free>:
 800782c:	4b02      	ldr	r3, [pc, #8]	; (8007838 <free+0xc>)
 800782e:	4601      	mov	r1, r0
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	f000 b80b 	b.w	800784c <_free_r>
 8007836:	bf00      	nop
 8007838:	20000028 	.word	0x20000028

0800783c <memset>:
 800783c:	4402      	add	r2, r0
 800783e:	4603      	mov	r3, r0
 8007840:	4293      	cmp	r3, r2
 8007842:	d100      	bne.n	8007846 <memset+0xa>
 8007844:	4770      	bx	lr
 8007846:	f803 1b01 	strb.w	r1, [r3], #1
 800784a:	e7f9      	b.n	8007840 <memset+0x4>

0800784c <_free_r>:
 800784c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800784e:	2900      	cmp	r1, #0
 8007850:	d044      	beq.n	80078dc <_free_r+0x90>
 8007852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007856:	9001      	str	r0, [sp, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f1a1 0404 	sub.w	r4, r1, #4
 800785e:	bfb8      	it	lt
 8007860:	18e4      	addlt	r4, r4, r3
 8007862:	f001 ff49 	bl	80096f8 <__malloc_lock>
 8007866:	4a1e      	ldr	r2, [pc, #120]	; (80078e0 <_free_r+0x94>)
 8007868:	9801      	ldr	r0, [sp, #4]
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	b933      	cbnz	r3, 800787c <_free_r+0x30>
 800786e:	6063      	str	r3, [r4, #4]
 8007870:	6014      	str	r4, [r2, #0]
 8007872:	b003      	add	sp, #12
 8007874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007878:	f001 bf44 	b.w	8009704 <__malloc_unlock>
 800787c:	42a3      	cmp	r3, r4
 800787e:	d908      	bls.n	8007892 <_free_r+0x46>
 8007880:	6825      	ldr	r5, [r4, #0]
 8007882:	1961      	adds	r1, r4, r5
 8007884:	428b      	cmp	r3, r1
 8007886:	bf01      	itttt	eq
 8007888:	6819      	ldreq	r1, [r3, #0]
 800788a:	685b      	ldreq	r3, [r3, #4]
 800788c:	1949      	addeq	r1, r1, r5
 800788e:	6021      	streq	r1, [r4, #0]
 8007890:	e7ed      	b.n	800786e <_free_r+0x22>
 8007892:	461a      	mov	r2, r3
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	b10b      	cbz	r3, 800789c <_free_r+0x50>
 8007898:	42a3      	cmp	r3, r4
 800789a:	d9fa      	bls.n	8007892 <_free_r+0x46>
 800789c:	6811      	ldr	r1, [r2, #0]
 800789e:	1855      	adds	r5, r2, r1
 80078a0:	42a5      	cmp	r5, r4
 80078a2:	d10b      	bne.n	80078bc <_free_r+0x70>
 80078a4:	6824      	ldr	r4, [r4, #0]
 80078a6:	4421      	add	r1, r4
 80078a8:	1854      	adds	r4, r2, r1
 80078aa:	42a3      	cmp	r3, r4
 80078ac:	6011      	str	r1, [r2, #0]
 80078ae:	d1e0      	bne.n	8007872 <_free_r+0x26>
 80078b0:	681c      	ldr	r4, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	6053      	str	r3, [r2, #4]
 80078b6:	4421      	add	r1, r4
 80078b8:	6011      	str	r1, [r2, #0]
 80078ba:	e7da      	b.n	8007872 <_free_r+0x26>
 80078bc:	d902      	bls.n	80078c4 <_free_r+0x78>
 80078be:	230c      	movs	r3, #12
 80078c0:	6003      	str	r3, [r0, #0]
 80078c2:	e7d6      	b.n	8007872 <_free_r+0x26>
 80078c4:	6825      	ldr	r5, [r4, #0]
 80078c6:	1961      	adds	r1, r4, r5
 80078c8:	428b      	cmp	r3, r1
 80078ca:	bf04      	itt	eq
 80078cc:	6819      	ldreq	r1, [r3, #0]
 80078ce:	685b      	ldreq	r3, [r3, #4]
 80078d0:	6063      	str	r3, [r4, #4]
 80078d2:	bf04      	itt	eq
 80078d4:	1949      	addeq	r1, r1, r5
 80078d6:	6021      	streq	r1, [r4, #0]
 80078d8:	6054      	str	r4, [r2, #4]
 80078da:	e7ca      	b.n	8007872 <_free_r+0x26>
 80078dc:	b003      	add	sp, #12
 80078de:	bd30      	pop	{r4, r5, pc}
 80078e0:	20002f60 	.word	0x20002f60

080078e4 <sbrk_aligned>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	4e0e      	ldr	r6, [pc, #56]	; (8007920 <sbrk_aligned+0x3c>)
 80078e8:	460c      	mov	r4, r1
 80078ea:	6831      	ldr	r1, [r6, #0]
 80078ec:	4605      	mov	r5, r0
 80078ee:	b911      	cbnz	r1, 80078f6 <sbrk_aligned+0x12>
 80078f0:	f000 fd84 	bl	80083fc <_sbrk_r>
 80078f4:	6030      	str	r0, [r6, #0]
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 fd7f 	bl	80083fc <_sbrk_r>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	d00a      	beq.n	8007918 <sbrk_aligned+0x34>
 8007902:	1cc4      	adds	r4, r0, #3
 8007904:	f024 0403 	bic.w	r4, r4, #3
 8007908:	42a0      	cmp	r0, r4
 800790a:	d007      	beq.n	800791c <sbrk_aligned+0x38>
 800790c:	1a21      	subs	r1, r4, r0
 800790e:	4628      	mov	r0, r5
 8007910:	f000 fd74 	bl	80083fc <_sbrk_r>
 8007914:	3001      	adds	r0, #1
 8007916:	d101      	bne.n	800791c <sbrk_aligned+0x38>
 8007918:	f04f 34ff 	mov.w	r4, #4294967295
 800791c:	4620      	mov	r0, r4
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	20002f64 	.word	0x20002f64

08007924 <_malloc_r>:
 8007924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007928:	1ccd      	adds	r5, r1, #3
 800792a:	f025 0503 	bic.w	r5, r5, #3
 800792e:	3508      	adds	r5, #8
 8007930:	2d0c      	cmp	r5, #12
 8007932:	bf38      	it	cc
 8007934:	250c      	movcc	r5, #12
 8007936:	2d00      	cmp	r5, #0
 8007938:	4607      	mov	r7, r0
 800793a:	db01      	blt.n	8007940 <_malloc_r+0x1c>
 800793c:	42a9      	cmp	r1, r5
 800793e:	d905      	bls.n	800794c <_malloc_r+0x28>
 8007940:	230c      	movs	r3, #12
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	2600      	movs	r6, #0
 8007946:	4630      	mov	r0, r6
 8007948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800794c:	4e2e      	ldr	r6, [pc, #184]	; (8007a08 <_malloc_r+0xe4>)
 800794e:	f001 fed3 	bl	80096f8 <__malloc_lock>
 8007952:	6833      	ldr	r3, [r6, #0]
 8007954:	461c      	mov	r4, r3
 8007956:	bb34      	cbnz	r4, 80079a6 <_malloc_r+0x82>
 8007958:	4629      	mov	r1, r5
 800795a:	4638      	mov	r0, r7
 800795c:	f7ff ffc2 	bl	80078e4 <sbrk_aligned>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	4604      	mov	r4, r0
 8007964:	d14d      	bne.n	8007a02 <_malloc_r+0xde>
 8007966:	6834      	ldr	r4, [r6, #0]
 8007968:	4626      	mov	r6, r4
 800796a:	2e00      	cmp	r6, #0
 800796c:	d140      	bne.n	80079f0 <_malloc_r+0xcc>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	4631      	mov	r1, r6
 8007972:	4638      	mov	r0, r7
 8007974:	eb04 0803 	add.w	r8, r4, r3
 8007978:	f000 fd40 	bl	80083fc <_sbrk_r>
 800797c:	4580      	cmp	r8, r0
 800797e:	d13a      	bne.n	80079f6 <_malloc_r+0xd2>
 8007980:	6821      	ldr	r1, [r4, #0]
 8007982:	3503      	adds	r5, #3
 8007984:	1a6d      	subs	r5, r5, r1
 8007986:	f025 0503 	bic.w	r5, r5, #3
 800798a:	3508      	adds	r5, #8
 800798c:	2d0c      	cmp	r5, #12
 800798e:	bf38      	it	cc
 8007990:	250c      	movcc	r5, #12
 8007992:	4629      	mov	r1, r5
 8007994:	4638      	mov	r0, r7
 8007996:	f7ff ffa5 	bl	80078e4 <sbrk_aligned>
 800799a:	3001      	adds	r0, #1
 800799c:	d02b      	beq.n	80079f6 <_malloc_r+0xd2>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	442b      	add	r3, r5
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	e00e      	b.n	80079c4 <_malloc_r+0xa0>
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	1b52      	subs	r2, r2, r5
 80079aa:	d41e      	bmi.n	80079ea <_malloc_r+0xc6>
 80079ac:	2a0b      	cmp	r2, #11
 80079ae:	d916      	bls.n	80079de <_malloc_r+0xba>
 80079b0:	1961      	adds	r1, r4, r5
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	6025      	str	r5, [r4, #0]
 80079b6:	bf18      	it	ne
 80079b8:	6059      	strne	r1, [r3, #4]
 80079ba:	6863      	ldr	r3, [r4, #4]
 80079bc:	bf08      	it	eq
 80079be:	6031      	streq	r1, [r6, #0]
 80079c0:	5162      	str	r2, [r4, r5]
 80079c2:	604b      	str	r3, [r1, #4]
 80079c4:	4638      	mov	r0, r7
 80079c6:	f104 060b 	add.w	r6, r4, #11
 80079ca:	f001 fe9b 	bl	8009704 <__malloc_unlock>
 80079ce:	f026 0607 	bic.w	r6, r6, #7
 80079d2:	1d23      	adds	r3, r4, #4
 80079d4:	1af2      	subs	r2, r6, r3
 80079d6:	d0b6      	beq.n	8007946 <_malloc_r+0x22>
 80079d8:	1b9b      	subs	r3, r3, r6
 80079da:	50a3      	str	r3, [r4, r2]
 80079dc:	e7b3      	b.n	8007946 <_malloc_r+0x22>
 80079de:	6862      	ldr	r2, [r4, #4]
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	bf0c      	ite	eq
 80079e4:	6032      	streq	r2, [r6, #0]
 80079e6:	605a      	strne	r2, [r3, #4]
 80079e8:	e7ec      	b.n	80079c4 <_malloc_r+0xa0>
 80079ea:	4623      	mov	r3, r4
 80079ec:	6864      	ldr	r4, [r4, #4]
 80079ee:	e7b2      	b.n	8007956 <_malloc_r+0x32>
 80079f0:	4634      	mov	r4, r6
 80079f2:	6876      	ldr	r6, [r6, #4]
 80079f4:	e7b9      	b.n	800796a <_malloc_r+0x46>
 80079f6:	230c      	movs	r3, #12
 80079f8:	603b      	str	r3, [r7, #0]
 80079fa:	4638      	mov	r0, r7
 80079fc:	f001 fe82 	bl	8009704 <__malloc_unlock>
 8007a00:	e7a1      	b.n	8007946 <_malloc_r+0x22>
 8007a02:	6025      	str	r5, [r4, #0]
 8007a04:	e7de      	b.n	80079c4 <_malloc_r+0xa0>
 8007a06:	bf00      	nop
 8007a08:	20002f60 	.word	0x20002f60

08007a0c <__cvt>:
 8007a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a10:	ec55 4b10 	vmov	r4, r5, d0
 8007a14:	2d00      	cmp	r5, #0
 8007a16:	460e      	mov	r6, r1
 8007a18:	4619      	mov	r1, r3
 8007a1a:	462b      	mov	r3, r5
 8007a1c:	bfbb      	ittet	lt
 8007a1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a22:	461d      	movlt	r5, r3
 8007a24:	2300      	movge	r3, #0
 8007a26:	232d      	movlt	r3, #45	; 0x2d
 8007a28:	700b      	strb	r3, [r1, #0]
 8007a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a30:	4691      	mov	r9, r2
 8007a32:	f023 0820 	bic.w	r8, r3, #32
 8007a36:	bfbc      	itt	lt
 8007a38:	4622      	movlt	r2, r4
 8007a3a:	4614      	movlt	r4, r2
 8007a3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a40:	d005      	beq.n	8007a4e <__cvt+0x42>
 8007a42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a46:	d100      	bne.n	8007a4a <__cvt+0x3e>
 8007a48:	3601      	adds	r6, #1
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	e000      	b.n	8007a50 <__cvt+0x44>
 8007a4e:	2103      	movs	r1, #3
 8007a50:	ab03      	add	r3, sp, #12
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	ab02      	add	r3, sp, #8
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	ec45 4b10 	vmov	d0, r4, r5
 8007a5c:	4653      	mov	r3, sl
 8007a5e:	4632      	mov	r2, r6
 8007a60:	f000 fe2a 	bl	80086b8 <_dtoa_r>
 8007a64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a68:	4607      	mov	r7, r0
 8007a6a:	d102      	bne.n	8007a72 <__cvt+0x66>
 8007a6c:	f019 0f01 	tst.w	r9, #1
 8007a70:	d022      	beq.n	8007ab8 <__cvt+0xac>
 8007a72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a76:	eb07 0906 	add.w	r9, r7, r6
 8007a7a:	d110      	bne.n	8007a9e <__cvt+0x92>
 8007a7c:	783b      	ldrb	r3, [r7, #0]
 8007a7e:	2b30      	cmp	r3, #48	; 0x30
 8007a80:	d10a      	bne.n	8007a98 <__cvt+0x8c>
 8007a82:	2200      	movs	r2, #0
 8007a84:	2300      	movs	r3, #0
 8007a86:	4620      	mov	r0, r4
 8007a88:	4629      	mov	r1, r5
 8007a8a:	f7f9 f825 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a8e:	b918      	cbnz	r0, 8007a98 <__cvt+0x8c>
 8007a90:	f1c6 0601 	rsb	r6, r6, #1
 8007a94:	f8ca 6000 	str.w	r6, [sl]
 8007a98:	f8da 3000 	ldr.w	r3, [sl]
 8007a9c:	4499      	add	r9, r3
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7f9 f817 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aaa:	b108      	cbz	r0, 8007ab0 <__cvt+0xa4>
 8007aac:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ab0:	2230      	movs	r2, #48	; 0x30
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	454b      	cmp	r3, r9
 8007ab6:	d307      	bcc.n	8007ac8 <__cvt+0xbc>
 8007ab8:	9b03      	ldr	r3, [sp, #12]
 8007aba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007abc:	1bdb      	subs	r3, r3, r7
 8007abe:	4638      	mov	r0, r7
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	b004      	add	sp, #16
 8007ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac8:	1c59      	adds	r1, r3, #1
 8007aca:	9103      	str	r1, [sp, #12]
 8007acc:	701a      	strb	r2, [r3, #0]
 8007ace:	e7f0      	b.n	8007ab2 <__cvt+0xa6>

08007ad0 <__exponent>:
 8007ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	bfb8      	it	lt
 8007ad8:	4249      	neglt	r1, r1
 8007ada:	f803 2b02 	strb.w	r2, [r3], #2
 8007ade:	bfb4      	ite	lt
 8007ae0:	222d      	movlt	r2, #45	; 0x2d
 8007ae2:	222b      	movge	r2, #43	; 0x2b
 8007ae4:	2909      	cmp	r1, #9
 8007ae6:	7042      	strb	r2, [r0, #1]
 8007ae8:	dd2a      	ble.n	8007b40 <__exponent+0x70>
 8007aea:	f10d 0407 	add.w	r4, sp, #7
 8007aee:	46a4      	mov	ip, r4
 8007af0:	270a      	movs	r7, #10
 8007af2:	46a6      	mov	lr, r4
 8007af4:	460a      	mov	r2, r1
 8007af6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007afa:	fb07 1516 	mls	r5, r7, r6, r1
 8007afe:	3530      	adds	r5, #48	; 0x30
 8007b00:	2a63      	cmp	r2, #99	; 0x63
 8007b02:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	dcf1      	bgt.n	8007af2 <__exponent+0x22>
 8007b0e:	3130      	adds	r1, #48	; 0x30
 8007b10:	f1ae 0502 	sub.w	r5, lr, #2
 8007b14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b18:	1c44      	adds	r4, r0, #1
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4561      	cmp	r1, ip
 8007b1e:	d30a      	bcc.n	8007b36 <__exponent+0x66>
 8007b20:	f10d 0209 	add.w	r2, sp, #9
 8007b24:	eba2 020e 	sub.w	r2, r2, lr
 8007b28:	4565      	cmp	r5, ip
 8007b2a:	bf88      	it	hi
 8007b2c:	2200      	movhi	r2, #0
 8007b2e:	4413      	add	r3, r2
 8007b30:	1a18      	subs	r0, r3, r0
 8007b32:	b003      	add	sp, #12
 8007b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b3e:	e7ed      	b.n	8007b1c <__exponent+0x4c>
 8007b40:	2330      	movs	r3, #48	; 0x30
 8007b42:	3130      	adds	r1, #48	; 0x30
 8007b44:	7083      	strb	r3, [r0, #2]
 8007b46:	70c1      	strb	r1, [r0, #3]
 8007b48:	1d03      	adds	r3, r0, #4
 8007b4a:	e7f1      	b.n	8007b30 <__exponent+0x60>

08007b4c <_printf_float>:
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	ed2d 8b02 	vpush	{d8}
 8007b54:	b08d      	sub	sp, #52	; 0x34
 8007b56:	460c      	mov	r4, r1
 8007b58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	461f      	mov	r7, r3
 8007b60:	4605      	mov	r5, r0
 8007b62:	f001 fd4f 	bl	8009604 <_localeconv_r>
 8007b66:	f8d0 a000 	ldr.w	sl, [r0]
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	f7f8 fb38 	bl	80001e0 <strlen>
 8007b70:	2300      	movs	r3, #0
 8007b72:	930a      	str	r3, [sp, #40]	; 0x28
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	9305      	str	r3, [sp, #20]
 8007b78:	f8d8 3000 	ldr.w	r3, [r8]
 8007b7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b80:	3307      	adds	r3, #7
 8007b82:	f023 0307 	bic.w	r3, r3, #7
 8007b86:	f103 0208 	add.w	r2, r3, #8
 8007b8a:	f8c8 2000 	str.w	r2, [r8]
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b9e:	9307      	str	r3, [sp, #28]
 8007ba0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ba4:	ee08 0a10 	vmov	s16, r0
 8007ba8:	4b9f      	ldr	r3, [pc, #636]	; (8007e28 <_printf_float+0x2dc>)
 8007baa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bae:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb2:	f7f8 ffc3 	bl	8000b3c <__aeabi_dcmpun>
 8007bb6:	bb88      	cbnz	r0, 8007c1c <_printf_float+0xd0>
 8007bb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bbc:	4b9a      	ldr	r3, [pc, #616]	; (8007e28 <_printf_float+0x2dc>)
 8007bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc2:	f7f8 ff9d 	bl	8000b00 <__aeabi_dcmple>
 8007bc6:	bb48      	cbnz	r0, 8007c1c <_printf_float+0xd0>
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4640      	mov	r0, r8
 8007bce:	4649      	mov	r1, r9
 8007bd0:	f7f8 ff8c 	bl	8000aec <__aeabi_dcmplt>
 8007bd4:	b110      	cbz	r0, 8007bdc <_printf_float+0x90>
 8007bd6:	232d      	movs	r3, #45	; 0x2d
 8007bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bdc:	4b93      	ldr	r3, [pc, #588]	; (8007e2c <_printf_float+0x2e0>)
 8007bde:	4894      	ldr	r0, [pc, #592]	; (8007e30 <_printf_float+0x2e4>)
 8007be0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007be4:	bf94      	ite	ls
 8007be6:	4698      	movls	r8, r3
 8007be8:	4680      	movhi	r8, r0
 8007bea:	2303      	movs	r3, #3
 8007bec:	6123      	str	r3, [r4, #16]
 8007bee:	9b05      	ldr	r3, [sp, #20]
 8007bf0:	f023 0204 	bic.w	r2, r3, #4
 8007bf4:	6022      	str	r2, [r4, #0]
 8007bf6:	f04f 0900 	mov.w	r9, #0
 8007bfa:	9700      	str	r7, [sp, #0]
 8007bfc:	4633      	mov	r3, r6
 8007bfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c00:	4621      	mov	r1, r4
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 f9d8 	bl	8007fb8 <_printf_common>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	f040 8090 	bne.w	8007d2e <_printf_float+0x1e2>
 8007c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c12:	b00d      	add	sp, #52	; 0x34
 8007c14:	ecbd 8b02 	vpop	{d8}
 8007c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1c:	4642      	mov	r2, r8
 8007c1e:	464b      	mov	r3, r9
 8007c20:	4640      	mov	r0, r8
 8007c22:	4649      	mov	r1, r9
 8007c24:	f7f8 ff8a 	bl	8000b3c <__aeabi_dcmpun>
 8007c28:	b140      	cbz	r0, 8007c3c <_printf_float+0xf0>
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	bfbc      	itt	lt
 8007c30:	232d      	movlt	r3, #45	; 0x2d
 8007c32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c36:	487f      	ldr	r0, [pc, #508]	; (8007e34 <_printf_float+0x2e8>)
 8007c38:	4b7f      	ldr	r3, [pc, #508]	; (8007e38 <_printf_float+0x2ec>)
 8007c3a:	e7d1      	b.n	8007be0 <_printf_float+0x94>
 8007c3c:	6863      	ldr	r3, [r4, #4]
 8007c3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c42:	9206      	str	r2, [sp, #24]
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	d13f      	bne.n	8007cc8 <_printf_float+0x17c>
 8007c48:	2306      	movs	r3, #6
 8007c4a:	6063      	str	r3, [r4, #4]
 8007c4c:	9b05      	ldr	r3, [sp, #20]
 8007c4e:	6861      	ldr	r1, [r4, #4]
 8007c50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c54:	2300      	movs	r3, #0
 8007c56:	9303      	str	r3, [sp, #12]
 8007c58:	ab0a      	add	r3, sp, #40	; 0x28
 8007c5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c5e:	ab09      	add	r3, sp, #36	; 0x24
 8007c60:	ec49 8b10 	vmov	d0, r8, r9
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	6022      	str	r2, [r4, #0]
 8007c68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f7ff fecd 	bl	8007a0c <__cvt>
 8007c72:	9b06      	ldr	r3, [sp, #24]
 8007c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c76:	2b47      	cmp	r3, #71	; 0x47
 8007c78:	4680      	mov	r8, r0
 8007c7a:	d108      	bne.n	8007c8e <_printf_float+0x142>
 8007c7c:	1cc8      	adds	r0, r1, #3
 8007c7e:	db02      	blt.n	8007c86 <_printf_float+0x13a>
 8007c80:	6863      	ldr	r3, [r4, #4]
 8007c82:	4299      	cmp	r1, r3
 8007c84:	dd41      	ble.n	8007d0a <_printf_float+0x1be>
 8007c86:	f1ab 0b02 	sub.w	fp, fp, #2
 8007c8a:	fa5f fb8b 	uxtb.w	fp, fp
 8007c8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c92:	d820      	bhi.n	8007cd6 <_printf_float+0x18a>
 8007c94:	3901      	subs	r1, #1
 8007c96:	465a      	mov	r2, fp
 8007c98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c9c:	9109      	str	r1, [sp, #36]	; 0x24
 8007c9e:	f7ff ff17 	bl	8007ad0 <__exponent>
 8007ca2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ca4:	1813      	adds	r3, r2, r0
 8007ca6:	2a01      	cmp	r2, #1
 8007ca8:	4681      	mov	r9, r0
 8007caa:	6123      	str	r3, [r4, #16]
 8007cac:	dc02      	bgt.n	8007cb4 <_printf_float+0x168>
 8007cae:	6822      	ldr	r2, [r4, #0]
 8007cb0:	07d2      	lsls	r2, r2, #31
 8007cb2:	d501      	bpl.n	8007cb8 <_printf_float+0x16c>
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	6123      	str	r3, [r4, #16]
 8007cb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d09c      	beq.n	8007bfa <_printf_float+0xae>
 8007cc0:	232d      	movs	r3, #45	; 0x2d
 8007cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cc6:	e798      	b.n	8007bfa <_printf_float+0xae>
 8007cc8:	9a06      	ldr	r2, [sp, #24]
 8007cca:	2a47      	cmp	r2, #71	; 0x47
 8007ccc:	d1be      	bne.n	8007c4c <_printf_float+0x100>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1bc      	bne.n	8007c4c <_printf_float+0x100>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e7b9      	b.n	8007c4a <_printf_float+0xfe>
 8007cd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007cda:	d118      	bne.n	8007d0e <_printf_float+0x1c2>
 8007cdc:	2900      	cmp	r1, #0
 8007cde:	6863      	ldr	r3, [r4, #4]
 8007ce0:	dd0b      	ble.n	8007cfa <_printf_float+0x1ae>
 8007ce2:	6121      	str	r1, [r4, #16]
 8007ce4:	b913      	cbnz	r3, 8007cec <_printf_float+0x1a0>
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	07d0      	lsls	r0, r2, #31
 8007cea:	d502      	bpl.n	8007cf2 <_printf_float+0x1a6>
 8007cec:	3301      	adds	r3, #1
 8007cee:	440b      	add	r3, r1
 8007cf0:	6123      	str	r3, [r4, #16]
 8007cf2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007cf4:	f04f 0900 	mov.w	r9, #0
 8007cf8:	e7de      	b.n	8007cb8 <_printf_float+0x16c>
 8007cfa:	b913      	cbnz	r3, 8007d02 <_printf_float+0x1b6>
 8007cfc:	6822      	ldr	r2, [r4, #0]
 8007cfe:	07d2      	lsls	r2, r2, #31
 8007d00:	d501      	bpl.n	8007d06 <_printf_float+0x1ba>
 8007d02:	3302      	adds	r3, #2
 8007d04:	e7f4      	b.n	8007cf0 <_printf_float+0x1a4>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e7f2      	b.n	8007cf0 <_printf_float+0x1a4>
 8007d0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d10:	4299      	cmp	r1, r3
 8007d12:	db05      	blt.n	8007d20 <_printf_float+0x1d4>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	6121      	str	r1, [r4, #16]
 8007d18:	07d8      	lsls	r0, r3, #31
 8007d1a:	d5ea      	bpl.n	8007cf2 <_printf_float+0x1a6>
 8007d1c:	1c4b      	adds	r3, r1, #1
 8007d1e:	e7e7      	b.n	8007cf0 <_printf_float+0x1a4>
 8007d20:	2900      	cmp	r1, #0
 8007d22:	bfd4      	ite	le
 8007d24:	f1c1 0202 	rsble	r2, r1, #2
 8007d28:	2201      	movgt	r2, #1
 8007d2a:	4413      	add	r3, r2
 8007d2c:	e7e0      	b.n	8007cf0 <_printf_float+0x1a4>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	055a      	lsls	r2, r3, #21
 8007d32:	d407      	bmi.n	8007d44 <_printf_float+0x1f8>
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	4642      	mov	r2, r8
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	47b8      	blx	r7
 8007d3e:	3001      	adds	r0, #1
 8007d40:	d12c      	bne.n	8007d9c <_printf_float+0x250>
 8007d42:	e764      	b.n	8007c0e <_printf_float+0xc2>
 8007d44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d48:	f240 80e0 	bls.w	8007f0c <_printf_float+0x3c0>
 8007d4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d50:	2200      	movs	r2, #0
 8007d52:	2300      	movs	r3, #0
 8007d54:	f7f8 fec0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d034      	beq.n	8007dc6 <_printf_float+0x27a>
 8007d5c:	4a37      	ldr	r2, [pc, #220]	; (8007e3c <_printf_float+0x2f0>)
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4631      	mov	r1, r6
 8007d62:	4628      	mov	r0, r5
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	f43f af51 	beq.w	8007c0e <_printf_float+0xc2>
 8007d6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d70:	429a      	cmp	r2, r3
 8007d72:	db02      	blt.n	8007d7a <_printf_float+0x22e>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	07d8      	lsls	r0, r3, #31
 8007d78:	d510      	bpl.n	8007d9c <_printf_float+0x250>
 8007d7a:	ee18 3a10 	vmov	r3, s16
 8007d7e:	4652      	mov	r2, sl
 8007d80:	4631      	mov	r1, r6
 8007d82:	4628      	mov	r0, r5
 8007d84:	47b8      	blx	r7
 8007d86:	3001      	adds	r0, #1
 8007d88:	f43f af41 	beq.w	8007c0e <_printf_float+0xc2>
 8007d8c:	f04f 0800 	mov.w	r8, #0
 8007d90:	f104 091a 	add.w	r9, r4, #26
 8007d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d96:	3b01      	subs	r3, #1
 8007d98:	4543      	cmp	r3, r8
 8007d9a:	dc09      	bgt.n	8007db0 <_printf_float+0x264>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	079b      	lsls	r3, r3, #30
 8007da0:	f100 8105 	bmi.w	8007fae <_printf_float+0x462>
 8007da4:	68e0      	ldr	r0, [r4, #12]
 8007da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da8:	4298      	cmp	r0, r3
 8007daa:	bfb8      	it	lt
 8007dac:	4618      	movlt	r0, r3
 8007dae:	e730      	b.n	8007c12 <_printf_float+0xc6>
 8007db0:	2301      	movs	r3, #1
 8007db2:	464a      	mov	r2, r9
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b8      	blx	r7
 8007dba:	3001      	adds	r0, #1
 8007dbc:	f43f af27 	beq.w	8007c0e <_printf_float+0xc2>
 8007dc0:	f108 0801 	add.w	r8, r8, #1
 8007dc4:	e7e6      	b.n	8007d94 <_printf_float+0x248>
 8007dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dc39      	bgt.n	8007e40 <_printf_float+0x2f4>
 8007dcc:	4a1b      	ldr	r2, [pc, #108]	; (8007e3c <_printf_float+0x2f0>)
 8007dce:	2301      	movs	r3, #1
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	47b8      	blx	r7
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	f43f af19 	beq.w	8007c0e <_printf_float+0xc2>
 8007ddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007de0:	4313      	orrs	r3, r2
 8007de2:	d102      	bne.n	8007dea <_printf_float+0x29e>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	07d9      	lsls	r1, r3, #31
 8007de8:	d5d8      	bpl.n	8007d9c <_printf_float+0x250>
 8007dea:	ee18 3a10 	vmov	r3, s16
 8007dee:	4652      	mov	r2, sl
 8007df0:	4631      	mov	r1, r6
 8007df2:	4628      	mov	r0, r5
 8007df4:	47b8      	blx	r7
 8007df6:	3001      	adds	r0, #1
 8007df8:	f43f af09 	beq.w	8007c0e <_printf_float+0xc2>
 8007dfc:	f04f 0900 	mov.w	r9, #0
 8007e00:	f104 0a1a 	add.w	sl, r4, #26
 8007e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e06:	425b      	negs	r3, r3
 8007e08:	454b      	cmp	r3, r9
 8007e0a:	dc01      	bgt.n	8007e10 <_printf_float+0x2c4>
 8007e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e0e:	e792      	b.n	8007d36 <_printf_float+0x1ea>
 8007e10:	2301      	movs	r3, #1
 8007e12:	4652      	mov	r2, sl
 8007e14:	4631      	mov	r1, r6
 8007e16:	4628      	mov	r0, r5
 8007e18:	47b8      	blx	r7
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	f43f aef7 	beq.w	8007c0e <_printf_float+0xc2>
 8007e20:	f109 0901 	add.w	r9, r9, #1
 8007e24:	e7ee      	b.n	8007e04 <_printf_float+0x2b8>
 8007e26:	bf00      	nop
 8007e28:	7fefffff 	.word	0x7fefffff
 8007e2c:	0800a4f0 	.word	0x0800a4f0
 8007e30:	0800a4f4 	.word	0x0800a4f4
 8007e34:	0800a4fc 	.word	0x0800a4fc
 8007e38:	0800a4f8 	.word	0x0800a4f8
 8007e3c:	0800a500 	.word	0x0800a500
 8007e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e44:	429a      	cmp	r2, r3
 8007e46:	bfa8      	it	ge
 8007e48:	461a      	movge	r2, r3
 8007e4a:	2a00      	cmp	r2, #0
 8007e4c:	4691      	mov	r9, r2
 8007e4e:	dc37      	bgt.n	8007ec0 <_printf_float+0x374>
 8007e50:	f04f 0b00 	mov.w	fp, #0
 8007e54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e58:	f104 021a 	add.w	r2, r4, #26
 8007e5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e5e:	9305      	str	r3, [sp, #20]
 8007e60:	eba3 0309 	sub.w	r3, r3, r9
 8007e64:	455b      	cmp	r3, fp
 8007e66:	dc33      	bgt.n	8007ed0 <_printf_float+0x384>
 8007e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	db3b      	blt.n	8007ee8 <_printf_float+0x39c>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	07da      	lsls	r2, r3, #31
 8007e74:	d438      	bmi.n	8007ee8 <_printf_float+0x39c>
 8007e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e78:	9a05      	ldr	r2, [sp, #20]
 8007e7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e7c:	1a9a      	subs	r2, r3, r2
 8007e7e:	eba3 0901 	sub.w	r9, r3, r1
 8007e82:	4591      	cmp	r9, r2
 8007e84:	bfa8      	it	ge
 8007e86:	4691      	movge	r9, r2
 8007e88:	f1b9 0f00 	cmp.w	r9, #0
 8007e8c:	dc35      	bgt.n	8007efa <_printf_float+0x3ae>
 8007e8e:	f04f 0800 	mov.w	r8, #0
 8007e92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e96:	f104 0a1a 	add.w	sl, r4, #26
 8007e9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	eba3 0309 	sub.w	r3, r3, r9
 8007ea4:	4543      	cmp	r3, r8
 8007ea6:	f77f af79 	ble.w	8007d9c <_printf_float+0x250>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4652      	mov	r2, sl
 8007eae:	4631      	mov	r1, r6
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	47b8      	blx	r7
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	f43f aeaa 	beq.w	8007c0e <_printf_float+0xc2>
 8007eba:	f108 0801 	add.w	r8, r8, #1
 8007ebe:	e7ec      	b.n	8007e9a <_printf_float+0x34e>
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	47b8      	blx	r7
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d1c0      	bne.n	8007e50 <_printf_float+0x304>
 8007ece:	e69e      	b.n	8007c0e <_printf_float+0xc2>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	9205      	str	r2, [sp, #20]
 8007ed8:	47b8      	blx	r7
 8007eda:	3001      	adds	r0, #1
 8007edc:	f43f ae97 	beq.w	8007c0e <_printf_float+0xc2>
 8007ee0:	9a05      	ldr	r2, [sp, #20]
 8007ee2:	f10b 0b01 	add.w	fp, fp, #1
 8007ee6:	e7b9      	b.n	8007e5c <_printf_float+0x310>
 8007ee8:	ee18 3a10 	vmov	r3, s16
 8007eec:	4652      	mov	r2, sl
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d1be      	bne.n	8007e76 <_printf_float+0x32a>
 8007ef8:	e689      	b.n	8007c0e <_printf_float+0xc2>
 8007efa:	9a05      	ldr	r2, [sp, #20]
 8007efc:	464b      	mov	r3, r9
 8007efe:	4442      	add	r2, r8
 8007f00:	4631      	mov	r1, r6
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	d1c1      	bne.n	8007e8e <_printf_float+0x342>
 8007f0a:	e680      	b.n	8007c0e <_printf_float+0xc2>
 8007f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f0e:	2a01      	cmp	r2, #1
 8007f10:	dc01      	bgt.n	8007f16 <_printf_float+0x3ca>
 8007f12:	07db      	lsls	r3, r3, #31
 8007f14:	d538      	bpl.n	8007f88 <_printf_float+0x43c>
 8007f16:	2301      	movs	r3, #1
 8007f18:	4642      	mov	r2, r8
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	47b8      	blx	r7
 8007f20:	3001      	adds	r0, #1
 8007f22:	f43f ae74 	beq.w	8007c0e <_printf_float+0xc2>
 8007f26:	ee18 3a10 	vmov	r3, s16
 8007f2a:	4652      	mov	r2, sl
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b8      	blx	r7
 8007f32:	3001      	adds	r0, #1
 8007f34:	f43f ae6b 	beq.w	8007c0e <_printf_float+0xc2>
 8007f38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f7f8 fdca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f44:	b9d8      	cbnz	r0, 8007f7e <_printf_float+0x432>
 8007f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f48:	f108 0201 	add.w	r2, r8, #1
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4628      	mov	r0, r5
 8007f52:	47b8      	blx	r7
 8007f54:	3001      	adds	r0, #1
 8007f56:	d10e      	bne.n	8007f76 <_printf_float+0x42a>
 8007f58:	e659      	b.n	8007c0e <_printf_float+0xc2>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	4652      	mov	r2, sl
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4628      	mov	r0, r5
 8007f62:	47b8      	blx	r7
 8007f64:	3001      	adds	r0, #1
 8007f66:	f43f ae52 	beq.w	8007c0e <_printf_float+0xc2>
 8007f6a:	f108 0801 	add.w	r8, r8, #1
 8007f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f70:	3b01      	subs	r3, #1
 8007f72:	4543      	cmp	r3, r8
 8007f74:	dcf1      	bgt.n	8007f5a <_printf_float+0x40e>
 8007f76:	464b      	mov	r3, r9
 8007f78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f7c:	e6dc      	b.n	8007d38 <_printf_float+0x1ec>
 8007f7e:	f04f 0800 	mov.w	r8, #0
 8007f82:	f104 0a1a 	add.w	sl, r4, #26
 8007f86:	e7f2      	b.n	8007f6e <_printf_float+0x422>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	4642      	mov	r2, r8
 8007f8c:	e7df      	b.n	8007f4e <_printf_float+0x402>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	464a      	mov	r2, r9
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	f43f ae38 	beq.w	8007c0e <_printf_float+0xc2>
 8007f9e:	f108 0801 	add.w	r8, r8, #1
 8007fa2:	68e3      	ldr	r3, [r4, #12]
 8007fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fa6:	1a5b      	subs	r3, r3, r1
 8007fa8:	4543      	cmp	r3, r8
 8007faa:	dcf0      	bgt.n	8007f8e <_printf_float+0x442>
 8007fac:	e6fa      	b.n	8007da4 <_printf_float+0x258>
 8007fae:	f04f 0800 	mov.w	r8, #0
 8007fb2:	f104 0919 	add.w	r9, r4, #25
 8007fb6:	e7f4      	b.n	8007fa2 <_printf_float+0x456>

08007fb8 <_printf_common>:
 8007fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbc:	4616      	mov	r6, r2
 8007fbe:	4699      	mov	r9, r3
 8007fc0:	688a      	ldr	r2, [r1, #8]
 8007fc2:	690b      	ldr	r3, [r1, #16]
 8007fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	bfb8      	it	lt
 8007fcc:	4613      	movlt	r3, r2
 8007fce:	6033      	str	r3, [r6, #0]
 8007fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fd4:	4607      	mov	r7, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	b10a      	cbz	r2, 8007fde <_printf_common+0x26>
 8007fda:	3301      	adds	r3, #1
 8007fdc:	6033      	str	r3, [r6, #0]
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	0699      	lsls	r1, r3, #26
 8007fe2:	bf42      	ittt	mi
 8007fe4:	6833      	ldrmi	r3, [r6, #0]
 8007fe6:	3302      	addmi	r3, #2
 8007fe8:	6033      	strmi	r3, [r6, #0]
 8007fea:	6825      	ldr	r5, [r4, #0]
 8007fec:	f015 0506 	ands.w	r5, r5, #6
 8007ff0:	d106      	bne.n	8008000 <_printf_common+0x48>
 8007ff2:	f104 0a19 	add.w	sl, r4, #25
 8007ff6:	68e3      	ldr	r3, [r4, #12]
 8007ff8:	6832      	ldr	r2, [r6, #0]
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	42ab      	cmp	r3, r5
 8007ffe:	dc26      	bgt.n	800804e <_printf_common+0x96>
 8008000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008004:	1e13      	subs	r3, r2, #0
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	bf18      	it	ne
 800800a:	2301      	movne	r3, #1
 800800c:	0692      	lsls	r2, r2, #26
 800800e:	d42b      	bmi.n	8008068 <_printf_common+0xb0>
 8008010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008014:	4649      	mov	r1, r9
 8008016:	4638      	mov	r0, r7
 8008018:	47c0      	blx	r8
 800801a:	3001      	adds	r0, #1
 800801c:	d01e      	beq.n	800805c <_printf_common+0xa4>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	68e5      	ldr	r5, [r4, #12]
 8008022:	6832      	ldr	r2, [r6, #0]
 8008024:	f003 0306 	and.w	r3, r3, #6
 8008028:	2b04      	cmp	r3, #4
 800802a:	bf08      	it	eq
 800802c:	1aad      	subeq	r5, r5, r2
 800802e:	68a3      	ldr	r3, [r4, #8]
 8008030:	6922      	ldr	r2, [r4, #16]
 8008032:	bf0c      	ite	eq
 8008034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008038:	2500      	movne	r5, #0
 800803a:	4293      	cmp	r3, r2
 800803c:	bfc4      	itt	gt
 800803e:	1a9b      	subgt	r3, r3, r2
 8008040:	18ed      	addgt	r5, r5, r3
 8008042:	2600      	movs	r6, #0
 8008044:	341a      	adds	r4, #26
 8008046:	42b5      	cmp	r5, r6
 8008048:	d11a      	bne.n	8008080 <_printf_common+0xc8>
 800804a:	2000      	movs	r0, #0
 800804c:	e008      	b.n	8008060 <_printf_common+0xa8>
 800804e:	2301      	movs	r3, #1
 8008050:	4652      	mov	r2, sl
 8008052:	4649      	mov	r1, r9
 8008054:	4638      	mov	r0, r7
 8008056:	47c0      	blx	r8
 8008058:	3001      	adds	r0, #1
 800805a:	d103      	bne.n	8008064 <_printf_common+0xac>
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008064:	3501      	adds	r5, #1
 8008066:	e7c6      	b.n	8007ff6 <_printf_common+0x3e>
 8008068:	18e1      	adds	r1, r4, r3
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	2030      	movs	r0, #48	; 0x30
 800806e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008072:	4422      	add	r2, r4
 8008074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800807c:	3302      	adds	r3, #2
 800807e:	e7c7      	b.n	8008010 <_printf_common+0x58>
 8008080:	2301      	movs	r3, #1
 8008082:	4622      	mov	r2, r4
 8008084:	4649      	mov	r1, r9
 8008086:	4638      	mov	r0, r7
 8008088:	47c0      	blx	r8
 800808a:	3001      	adds	r0, #1
 800808c:	d0e6      	beq.n	800805c <_printf_common+0xa4>
 800808e:	3601      	adds	r6, #1
 8008090:	e7d9      	b.n	8008046 <_printf_common+0x8e>
	...

08008094 <_printf_i>:
 8008094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	7e0f      	ldrb	r7, [r1, #24]
 800809a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800809c:	2f78      	cmp	r7, #120	; 0x78
 800809e:	4691      	mov	r9, r2
 80080a0:	4680      	mov	r8, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	469a      	mov	sl, r3
 80080a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080aa:	d807      	bhi.n	80080bc <_printf_i+0x28>
 80080ac:	2f62      	cmp	r7, #98	; 0x62
 80080ae:	d80a      	bhi.n	80080c6 <_printf_i+0x32>
 80080b0:	2f00      	cmp	r7, #0
 80080b2:	f000 80d8 	beq.w	8008266 <_printf_i+0x1d2>
 80080b6:	2f58      	cmp	r7, #88	; 0x58
 80080b8:	f000 80a3 	beq.w	8008202 <_printf_i+0x16e>
 80080bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080c4:	e03a      	b.n	800813c <_printf_i+0xa8>
 80080c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080ca:	2b15      	cmp	r3, #21
 80080cc:	d8f6      	bhi.n	80080bc <_printf_i+0x28>
 80080ce:	a101      	add	r1, pc, #4	; (adr r1, 80080d4 <_printf_i+0x40>)
 80080d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080d4:	0800812d 	.word	0x0800812d
 80080d8:	08008141 	.word	0x08008141
 80080dc:	080080bd 	.word	0x080080bd
 80080e0:	080080bd 	.word	0x080080bd
 80080e4:	080080bd 	.word	0x080080bd
 80080e8:	080080bd 	.word	0x080080bd
 80080ec:	08008141 	.word	0x08008141
 80080f0:	080080bd 	.word	0x080080bd
 80080f4:	080080bd 	.word	0x080080bd
 80080f8:	080080bd 	.word	0x080080bd
 80080fc:	080080bd 	.word	0x080080bd
 8008100:	0800824d 	.word	0x0800824d
 8008104:	08008171 	.word	0x08008171
 8008108:	0800822f 	.word	0x0800822f
 800810c:	080080bd 	.word	0x080080bd
 8008110:	080080bd 	.word	0x080080bd
 8008114:	0800826f 	.word	0x0800826f
 8008118:	080080bd 	.word	0x080080bd
 800811c:	08008171 	.word	0x08008171
 8008120:	080080bd 	.word	0x080080bd
 8008124:	080080bd 	.word	0x080080bd
 8008128:	08008237 	.word	0x08008237
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	1d1a      	adds	r2, r3, #4
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	602a      	str	r2, [r5, #0]
 8008134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800813c:	2301      	movs	r3, #1
 800813e:	e0a3      	b.n	8008288 <_printf_i+0x1f4>
 8008140:	6820      	ldr	r0, [r4, #0]
 8008142:	6829      	ldr	r1, [r5, #0]
 8008144:	0606      	lsls	r6, r0, #24
 8008146:	f101 0304 	add.w	r3, r1, #4
 800814a:	d50a      	bpl.n	8008162 <_printf_i+0xce>
 800814c:	680e      	ldr	r6, [r1, #0]
 800814e:	602b      	str	r3, [r5, #0]
 8008150:	2e00      	cmp	r6, #0
 8008152:	da03      	bge.n	800815c <_printf_i+0xc8>
 8008154:	232d      	movs	r3, #45	; 0x2d
 8008156:	4276      	negs	r6, r6
 8008158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800815c:	485e      	ldr	r0, [pc, #376]	; (80082d8 <_printf_i+0x244>)
 800815e:	230a      	movs	r3, #10
 8008160:	e019      	b.n	8008196 <_printf_i+0x102>
 8008162:	680e      	ldr	r6, [r1, #0]
 8008164:	602b      	str	r3, [r5, #0]
 8008166:	f010 0f40 	tst.w	r0, #64	; 0x40
 800816a:	bf18      	it	ne
 800816c:	b236      	sxthne	r6, r6
 800816e:	e7ef      	b.n	8008150 <_printf_i+0xbc>
 8008170:	682b      	ldr	r3, [r5, #0]
 8008172:	6820      	ldr	r0, [r4, #0]
 8008174:	1d19      	adds	r1, r3, #4
 8008176:	6029      	str	r1, [r5, #0]
 8008178:	0601      	lsls	r1, r0, #24
 800817a:	d501      	bpl.n	8008180 <_printf_i+0xec>
 800817c:	681e      	ldr	r6, [r3, #0]
 800817e:	e002      	b.n	8008186 <_printf_i+0xf2>
 8008180:	0646      	lsls	r6, r0, #25
 8008182:	d5fb      	bpl.n	800817c <_printf_i+0xe8>
 8008184:	881e      	ldrh	r6, [r3, #0]
 8008186:	4854      	ldr	r0, [pc, #336]	; (80082d8 <_printf_i+0x244>)
 8008188:	2f6f      	cmp	r7, #111	; 0x6f
 800818a:	bf0c      	ite	eq
 800818c:	2308      	moveq	r3, #8
 800818e:	230a      	movne	r3, #10
 8008190:	2100      	movs	r1, #0
 8008192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008196:	6865      	ldr	r5, [r4, #4]
 8008198:	60a5      	str	r5, [r4, #8]
 800819a:	2d00      	cmp	r5, #0
 800819c:	bfa2      	ittt	ge
 800819e:	6821      	ldrge	r1, [r4, #0]
 80081a0:	f021 0104 	bicge.w	r1, r1, #4
 80081a4:	6021      	strge	r1, [r4, #0]
 80081a6:	b90e      	cbnz	r6, 80081ac <_printf_i+0x118>
 80081a8:	2d00      	cmp	r5, #0
 80081aa:	d04d      	beq.n	8008248 <_printf_i+0x1b4>
 80081ac:	4615      	mov	r5, r2
 80081ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80081b2:	fb03 6711 	mls	r7, r3, r1, r6
 80081b6:	5dc7      	ldrb	r7, [r0, r7]
 80081b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081bc:	4637      	mov	r7, r6
 80081be:	42bb      	cmp	r3, r7
 80081c0:	460e      	mov	r6, r1
 80081c2:	d9f4      	bls.n	80081ae <_printf_i+0x11a>
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d10b      	bne.n	80081e0 <_printf_i+0x14c>
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	07de      	lsls	r6, r3, #31
 80081cc:	d508      	bpl.n	80081e0 <_printf_i+0x14c>
 80081ce:	6923      	ldr	r3, [r4, #16]
 80081d0:	6861      	ldr	r1, [r4, #4]
 80081d2:	4299      	cmp	r1, r3
 80081d4:	bfde      	ittt	le
 80081d6:	2330      	movle	r3, #48	; 0x30
 80081d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081e0:	1b52      	subs	r2, r2, r5
 80081e2:	6122      	str	r2, [r4, #16]
 80081e4:	f8cd a000 	str.w	sl, [sp]
 80081e8:	464b      	mov	r3, r9
 80081ea:	aa03      	add	r2, sp, #12
 80081ec:	4621      	mov	r1, r4
 80081ee:	4640      	mov	r0, r8
 80081f0:	f7ff fee2 	bl	8007fb8 <_printf_common>
 80081f4:	3001      	adds	r0, #1
 80081f6:	d14c      	bne.n	8008292 <_printf_i+0x1fe>
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	b004      	add	sp, #16
 80081fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008202:	4835      	ldr	r0, [pc, #212]	; (80082d8 <_printf_i+0x244>)
 8008204:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008208:	6829      	ldr	r1, [r5, #0]
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008210:	6029      	str	r1, [r5, #0]
 8008212:	061d      	lsls	r5, r3, #24
 8008214:	d514      	bpl.n	8008240 <_printf_i+0x1ac>
 8008216:	07df      	lsls	r7, r3, #31
 8008218:	bf44      	itt	mi
 800821a:	f043 0320 	orrmi.w	r3, r3, #32
 800821e:	6023      	strmi	r3, [r4, #0]
 8008220:	b91e      	cbnz	r6, 800822a <_printf_i+0x196>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	f023 0320 	bic.w	r3, r3, #32
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	2310      	movs	r3, #16
 800822c:	e7b0      	b.n	8008190 <_printf_i+0xfc>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	f043 0320 	orr.w	r3, r3, #32
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	2378      	movs	r3, #120	; 0x78
 8008238:	4828      	ldr	r0, [pc, #160]	; (80082dc <_printf_i+0x248>)
 800823a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800823e:	e7e3      	b.n	8008208 <_printf_i+0x174>
 8008240:	0659      	lsls	r1, r3, #25
 8008242:	bf48      	it	mi
 8008244:	b2b6      	uxthmi	r6, r6
 8008246:	e7e6      	b.n	8008216 <_printf_i+0x182>
 8008248:	4615      	mov	r5, r2
 800824a:	e7bb      	b.n	80081c4 <_printf_i+0x130>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	6826      	ldr	r6, [r4, #0]
 8008250:	6961      	ldr	r1, [r4, #20]
 8008252:	1d18      	adds	r0, r3, #4
 8008254:	6028      	str	r0, [r5, #0]
 8008256:	0635      	lsls	r5, r6, #24
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	d501      	bpl.n	8008260 <_printf_i+0x1cc>
 800825c:	6019      	str	r1, [r3, #0]
 800825e:	e002      	b.n	8008266 <_printf_i+0x1d2>
 8008260:	0670      	lsls	r0, r6, #25
 8008262:	d5fb      	bpl.n	800825c <_printf_i+0x1c8>
 8008264:	8019      	strh	r1, [r3, #0]
 8008266:	2300      	movs	r3, #0
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	4615      	mov	r5, r2
 800826c:	e7ba      	b.n	80081e4 <_printf_i+0x150>
 800826e:	682b      	ldr	r3, [r5, #0]
 8008270:	1d1a      	adds	r2, r3, #4
 8008272:	602a      	str	r2, [r5, #0]
 8008274:	681d      	ldr	r5, [r3, #0]
 8008276:	6862      	ldr	r2, [r4, #4]
 8008278:	2100      	movs	r1, #0
 800827a:	4628      	mov	r0, r5
 800827c:	f7f7 ffb8 	bl	80001f0 <memchr>
 8008280:	b108      	cbz	r0, 8008286 <_printf_i+0x1f2>
 8008282:	1b40      	subs	r0, r0, r5
 8008284:	6060      	str	r0, [r4, #4]
 8008286:	6863      	ldr	r3, [r4, #4]
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	2300      	movs	r3, #0
 800828c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008290:	e7a8      	b.n	80081e4 <_printf_i+0x150>
 8008292:	6923      	ldr	r3, [r4, #16]
 8008294:	462a      	mov	r2, r5
 8008296:	4649      	mov	r1, r9
 8008298:	4640      	mov	r0, r8
 800829a:	47d0      	blx	sl
 800829c:	3001      	adds	r0, #1
 800829e:	d0ab      	beq.n	80081f8 <_printf_i+0x164>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	079b      	lsls	r3, r3, #30
 80082a4:	d413      	bmi.n	80082ce <_printf_i+0x23a>
 80082a6:	68e0      	ldr	r0, [r4, #12]
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	4298      	cmp	r0, r3
 80082ac:	bfb8      	it	lt
 80082ae:	4618      	movlt	r0, r3
 80082b0:	e7a4      	b.n	80081fc <_printf_i+0x168>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4632      	mov	r2, r6
 80082b6:	4649      	mov	r1, r9
 80082b8:	4640      	mov	r0, r8
 80082ba:	47d0      	blx	sl
 80082bc:	3001      	adds	r0, #1
 80082be:	d09b      	beq.n	80081f8 <_printf_i+0x164>
 80082c0:	3501      	adds	r5, #1
 80082c2:	68e3      	ldr	r3, [r4, #12]
 80082c4:	9903      	ldr	r1, [sp, #12]
 80082c6:	1a5b      	subs	r3, r3, r1
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	dcf2      	bgt.n	80082b2 <_printf_i+0x21e>
 80082cc:	e7eb      	b.n	80082a6 <_printf_i+0x212>
 80082ce:	2500      	movs	r5, #0
 80082d0:	f104 0619 	add.w	r6, r4, #25
 80082d4:	e7f5      	b.n	80082c2 <_printf_i+0x22e>
 80082d6:	bf00      	nop
 80082d8:	0800a502 	.word	0x0800a502
 80082dc:	0800a513 	.word	0x0800a513

080082e0 <iprintf>:
 80082e0:	b40f      	push	{r0, r1, r2, r3}
 80082e2:	4b0a      	ldr	r3, [pc, #40]	; (800830c <iprintf+0x2c>)
 80082e4:	b513      	push	{r0, r1, r4, lr}
 80082e6:	681c      	ldr	r4, [r3, #0]
 80082e8:	b124      	cbz	r4, 80082f4 <iprintf+0x14>
 80082ea:	69a3      	ldr	r3, [r4, #24]
 80082ec:	b913      	cbnz	r3, 80082f4 <iprintf+0x14>
 80082ee:	4620      	mov	r0, r4
 80082f0:	f001 f8ea 	bl	80094c8 <__sinit>
 80082f4:	ab05      	add	r3, sp, #20
 80082f6:	9a04      	ldr	r2, [sp, #16]
 80082f8:	68a1      	ldr	r1, [r4, #8]
 80082fa:	9301      	str	r3, [sp, #4]
 80082fc:	4620      	mov	r0, r4
 80082fe:	f001 fdcb 	bl	8009e98 <_vfiprintf_r>
 8008302:	b002      	add	sp, #8
 8008304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008308:	b004      	add	sp, #16
 800830a:	4770      	bx	lr
 800830c:	20000028 	.word	0x20000028

08008310 <_puts_r>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	460e      	mov	r6, r1
 8008314:	4605      	mov	r5, r0
 8008316:	b118      	cbz	r0, 8008320 <_puts_r+0x10>
 8008318:	6983      	ldr	r3, [r0, #24]
 800831a:	b90b      	cbnz	r3, 8008320 <_puts_r+0x10>
 800831c:	f001 f8d4 	bl	80094c8 <__sinit>
 8008320:	69ab      	ldr	r3, [r5, #24]
 8008322:	68ac      	ldr	r4, [r5, #8]
 8008324:	b913      	cbnz	r3, 800832c <_puts_r+0x1c>
 8008326:	4628      	mov	r0, r5
 8008328:	f001 f8ce 	bl	80094c8 <__sinit>
 800832c:	4b2c      	ldr	r3, [pc, #176]	; (80083e0 <_puts_r+0xd0>)
 800832e:	429c      	cmp	r4, r3
 8008330:	d120      	bne.n	8008374 <_puts_r+0x64>
 8008332:	686c      	ldr	r4, [r5, #4]
 8008334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008336:	07db      	lsls	r3, r3, #31
 8008338:	d405      	bmi.n	8008346 <_puts_r+0x36>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	0598      	lsls	r0, r3, #22
 800833e:	d402      	bmi.n	8008346 <_puts_r+0x36>
 8008340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008342:	f001 f964 	bl	800960e <__retarget_lock_acquire_recursive>
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	0719      	lsls	r1, r3, #28
 800834a:	d51d      	bpl.n	8008388 <_puts_r+0x78>
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	b1db      	cbz	r3, 8008388 <_puts_r+0x78>
 8008350:	3e01      	subs	r6, #1
 8008352:	68a3      	ldr	r3, [r4, #8]
 8008354:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008358:	3b01      	subs	r3, #1
 800835a:	60a3      	str	r3, [r4, #8]
 800835c:	bb39      	cbnz	r1, 80083ae <_puts_r+0x9e>
 800835e:	2b00      	cmp	r3, #0
 8008360:	da38      	bge.n	80083d4 <_puts_r+0xc4>
 8008362:	4622      	mov	r2, r4
 8008364:	210a      	movs	r1, #10
 8008366:	4628      	mov	r0, r5
 8008368:	f000 f858 	bl	800841c <__swbuf_r>
 800836c:	3001      	adds	r0, #1
 800836e:	d011      	beq.n	8008394 <_puts_r+0x84>
 8008370:	250a      	movs	r5, #10
 8008372:	e011      	b.n	8008398 <_puts_r+0x88>
 8008374:	4b1b      	ldr	r3, [pc, #108]	; (80083e4 <_puts_r+0xd4>)
 8008376:	429c      	cmp	r4, r3
 8008378:	d101      	bne.n	800837e <_puts_r+0x6e>
 800837a:	68ac      	ldr	r4, [r5, #8]
 800837c:	e7da      	b.n	8008334 <_puts_r+0x24>
 800837e:	4b1a      	ldr	r3, [pc, #104]	; (80083e8 <_puts_r+0xd8>)
 8008380:	429c      	cmp	r4, r3
 8008382:	bf08      	it	eq
 8008384:	68ec      	ldreq	r4, [r5, #12]
 8008386:	e7d5      	b.n	8008334 <_puts_r+0x24>
 8008388:	4621      	mov	r1, r4
 800838a:	4628      	mov	r0, r5
 800838c:	f000 f898 	bl	80084c0 <__swsetup_r>
 8008390:	2800      	cmp	r0, #0
 8008392:	d0dd      	beq.n	8008350 <_puts_r+0x40>
 8008394:	f04f 35ff 	mov.w	r5, #4294967295
 8008398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800839a:	07da      	lsls	r2, r3, #31
 800839c:	d405      	bmi.n	80083aa <_puts_r+0x9a>
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	059b      	lsls	r3, r3, #22
 80083a2:	d402      	bmi.n	80083aa <_puts_r+0x9a>
 80083a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083a6:	f001 f933 	bl	8009610 <__retarget_lock_release_recursive>
 80083aa:	4628      	mov	r0, r5
 80083ac:	bd70      	pop	{r4, r5, r6, pc}
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	da04      	bge.n	80083bc <_puts_r+0xac>
 80083b2:	69a2      	ldr	r2, [r4, #24]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	dc06      	bgt.n	80083c6 <_puts_r+0xb6>
 80083b8:	290a      	cmp	r1, #10
 80083ba:	d004      	beq.n	80083c6 <_puts_r+0xb6>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	6022      	str	r2, [r4, #0]
 80083c2:	7019      	strb	r1, [r3, #0]
 80083c4:	e7c5      	b.n	8008352 <_puts_r+0x42>
 80083c6:	4622      	mov	r2, r4
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 f827 	bl	800841c <__swbuf_r>
 80083ce:	3001      	adds	r0, #1
 80083d0:	d1bf      	bne.n	8008352 <_puts_r+0x42>
 80083d2:	e7df      	b.n	8008394 <_puts_r+0x84>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	250a      	movs	r5, #10
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	6022      	str	r2, [r4, #0]
 80083dc:	701d      	strb	r5, [r3, #0]
 80083de:	e7db      	b.n	8008398 <_puts_r+0x88>
 80083e0:	0800a5d4 	.word	0x0800a5d4
 80083e4:	0800a5f4 	.word	0x0800a5f4
 80083e8:	0800a5b4 	.word	0x0800a5b4

080083ec <puts>:
 80083ec:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <puts+0xc>)
 80083ee:	4601      	mov	r1, r0
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	f7ff bf8d 	b.w	8008310 <_puts_r>
 80083f6:	bf00      	nop
 80083f8:	20000028 	.word	0x20000028

080083fc <_sbrk_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d06      	ldr	r5, [pc, #24]	; (8008418 <_sbrk_r+0x1c>)
 8008400:	2300      	movs	r3, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	f7fa fd80 	bl	8002f0c <_sbrk>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_sbrk_r+0x1a>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_sbrk_r+0x1a>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20002f6c 	.word	0x20002f6c

0800841c <__swbuf_r>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	460e      	mov	r6, r1
 8008420:	4614      	mov	r4, r2
 8008422:	4605      	mov	r5, r0
 8008424:	b118      	cbz	r0, 800842e <__swbuf_r+0x12>
 8008426:	6983      	ldr	r3, [r0, #24]
 8008428:	b90b      	cbnz	r3, 800842e <__swbuf_r+0x12>
 800842a:	f001 f84d 	bl	80094c8 <__sinit>
 800842e:	4b21      	ldr	r3, [pc, #132]	; (80084b4 <__swbuf_r+0x98>)
 8008430:	429c      	cmp	r4, r3
 8008432:	d12b      	bne.n	800848c <__swbuf_r+0x70>
 8008434:	686c      	ldr	r4, [r5, #4]
 8008436:	69a3      	ldr	r3, [r4, #24]
 8008438:	60a3      	str	r3, [r4, #8]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	071a      	lsls	r2, r3, #28
 800843e:	d52f      	bpl.n	80084a0 <__swbuf_r+0x84>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	b36b      	cbz	r3, 80084a0 <__swbuf_r+0x84>
 8008444:	6923      	ldr	r3, [r4, #16]
 8008446:	6820      	ldr	r0, [r4, #0]
 8008448:	1ac0      	subs	r0, r0, r3
 800844a:	6963      	ldr	r3, [r4, #20]
 800844c:	b2f6      	uxtb	r6, r6
 800844e:	4283      	cmp	r3, r0
 8008450:	4637      	mov	r7, r6
 8008452:	dc04      	bgt.n	800845e <__swbuf_r+0x42>
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f000 ffa2 	bl	80093a0 <_fflush_r>
 800845c:	bb30      	cbnz	r0, 80084ac <__swbuf_r+0x90>
 800845e:	68a3      	ldr	r3, [r4, #8]
 8008460:	3b01      	subs	r3, #1
 8008462:	60a3      	str	r3, [r4, #8]
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	6022      	str	r2, [r4, #0]
 800846a:	701e      	strb	r6, [r3, #0]
 800846c:	6963      	ldr	r3, [r4, #20]
 800846e:	3001      	adds	r0, #1
 8008470:	4283      	cmp	r3, r0
 8008472:	d004      	beq.n	800847e <__swbuf_r+0x62>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	07db      	lsls	r3, r3, #31
 8008478:	d506      	bpl.n	8008488 <__swbuf_r+0x6c>
 800847a:	2e0a      	cmp	r6, #10
 800847c:	d104      	bne.n	8008488 <__swbuf_r+0x6c>
 800847e:	4621      	mov	r1, r4
 8008480:	4628      	mov	r0, r5
 8008482:	f000 ff8d 	bl	80093a0 <_fflush_r>
 8008486:	b988      	cbnz	r0, 80084ac <__swbuf_r+0x90>
 8008488:	4638      	mov	r0, r7
 800848a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800848c:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <__swbuf_r+0x9c>)
 800848e:	429c      	cmp	r4, r3
 8008490:	d101      	bne.n	8008496 <__swbuf_r+0x7a>
 8008492:	68ac      	ldr	r4, [r5, #8]
 8008494:	e7cf      	b.n	8008436 <__swbuf_r+0x1a>
 8008496:	4b09      	ldr	r3, [pc, #36]	; (80084bc <__swbuf_r+0xa0>)
 8008498:	429c      	cmp	r4, r3
 800849a:	bf08      	it	eq
 800849c:	68ec      	ldreq	r4, [r5, #12]
 800849e:	e7ca      	b.n	8008436 <__swbuf_r+0x1a>
 80084a0:	4621      	mov	r1, r4
 80084a2:	4628      	mov	r0, r5
 80084a4:	f000 f80c 	bl	80084c0 <__swsetup_r>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d0cb      	beq.n	8008444 <__swbuf_r+0x28>
 80084ac:	f04f 37ff 	mov.w	r7, #4294967295
 80084b0:	e7ea      	b.n	8008488 <__swbuf_r+0x6c>
 80084b2:	bf00      	nop
 80084b4:	0800a5d4 	.word	0x0800a5d4
 80084b8:	0800a5f4 	.word	0x0800a5f4
 80084bc:	0800a5b4 	.word	0x0800a5b4

080084c0 <__swsetup_r>:
 80084c0:	4b32      	ldr	r3, [pc, #200]	; (800858c <__swsetup_r+0xcc>)
 80084c2:	b570      	push	{r4, r5, r6, lr}
 80084c4:	681d      	ldr	r5, [r3, #0]
 80084c6:	4606      	mov	r6, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	b125      	cbz	r5, 80084d6 <__swsetup_r+0x16>
 80084cc:	69ab      	ldr	r3, [r5, #24]
 80084ce:	b913      	cbnz	r3, 80084d6 <__swsetup_r+0x16>
 80084d0:	4628      	mov	r0, r5
 80084d2:	f000 fff9 	bl	80094c8 <__sinit>
 80084d6:	4b2e      	ldr	r3, [pc, #184]	; (8008590 <__swsetup_r+0xd0>)
 80084d8:	429c      	cmp	r4, r3
 80084da:	d10f      	bne.n	80084fc <__swsetup_r+0x3c>
 80084dc:	686c      	ldr	r4, [r5, #4]
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084e4:	0719      	lsls	r1, r3, #28
 80084e6:	d42c      	bmi.n	8008542 <__swsetup_r+0x82>
 80084e8:	06dd      	lsls	r5, r3, #27
 80084ea:	d411      	bmi.n	8008510 <__swsetup_r+0x50>
 80084ec:	2309      	movs	r3, #9
 80084ee:	6033      	str	r3, [r6, #0]
 80084f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	e03e      	b.n	800857a <__swsetup_r+0xba>
 80084fc:	4b25      	ldr	r3, [pc, #148]	; (8008594 <__swsetup_r+0xd4>)
 80084fe:	429c      	cmp	r4, r3
 8008500:	d101      	bne.n	8008506 <__swsetup_r+0x46>
 8008502:	68ac      	ldr	r4, [r5, #8]
 8008504:	e7eb      	b.n	80084de <__swsetup_r+0x1e>
 8008506:	4b24      	ldr	r3, [pc, #144]	; (8008598 <__swsetup_r+0xd8>)
 8008508:	429c      	cmp	r4, r3
 800850a:	bf08      	it	eq
 800850c:	68ec      	ldreq	r4, [r5, #12]
 800850e:	e7e6      	b.n	80084de <__swsetup_r+0x1e>
 8008510:	0758      	lsls	r0, r3, #29
 8008512:	d512      	bpl.n	800853a <__swsetup_r+0x7a>
 8008514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008516:	b141      	cbz	r1, 800852a <__swsetup_r+0x6a>
 8008518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800851c:	4299      	cmp	r1, r3
 800851e:	d002      	beq.n	8008526 <__swsetup_r+0x66>
 8008520:	4630      	mov	r0, r6
 8008522:	f7ff f993 	bl	800784c <_free_r>
 8008526:	2300      	movs	r3, #0
 8008528:	6363      	str	r3, [r4, #52]	; 0x34
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008530:	81a3      	strh	r3, [r4, #12]
 8008532:	2300      	movs	r3, #0
 8008534:	6063      	str	r3, [r4, #4]
 8008536:	6923      	ldr	r3, [r4, #16]
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	f043 0308 	orr.w	r3, r3, #8
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	6923      	ldr	r3, [r4, #16]
 8008544:	b94b      	cbnz	r3, 800855a <__swsetup_r+0x9a>
 8008546:	89a3      	ldrh	r3, [r4, #12]
 8008548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800854c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008550:	d003      	beq.n	800855a <__swsetup_r+0x9a>
 8008552:	4621      	mov	r1, r4
 8008554:	4630      	mov	r0, r6
 8008556:	f001 f881 	bl	800965c <__smakebuf_r>
 800855a:	89a0      	ldrh	r0, [r4, #12]
 800855c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008560:	f010 0301 	ands.w	r3, r0, #1
 8008564:	d00a      	beq.n	800857c <__swsetup_r+0xbc>
 8008566:	2300      	movs	r3, #0
 8008568:	60a3      	str	r3, [r4, #8]
 800856a:	6963      	ldr	r3, [r4, #20]
 800856c:	425b      	negs	r3, r3
 800856e:	61a3      	str	r3, [r4, #24]
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	b943      	cbnz	r3, 8008586 <__swsetup_r+0xc6>
 8008574:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008578:	d1ba      	bne.n	80084f0 <__swsetup_r+0x30>
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	0781      	lsls	r1, r0, #30
 800857e:	bf58      	it	pl
 8008580:	6963      	ldrpl	r3, [r4, #20]
 8008582:	60a3      	str	r3, [r4, #8]
 8008584:	e7f4      	b.n	8008570 <__swsetup_r+0xb0>
 8008586:	2000      	movs	r0, #0
 8008588:	e7f7      	b.n	800857a <__swsetup_r+0xba>
 800858a:	bf00      	nop
 800858c:	20000028 	.word	0x20000028
 8008590:	0800a5d4 	.word	0x0800a5d4
 8008594:	0800a5f4 	.word	0x0800a5f4
 8008598:	0800a5b4 	.word	0x0800a5b4

0800859c <quorem>:
 800859c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	6903      	ldr	r3, [r0, #16]
 80085a2:	690c      	ldr	r4, [r1, #16]
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	4607      	mov	r7, r0
 80085a8:	f2c0 8081 	blt.w	80086ae <quorem+0x112>
 80085ac:	3c01      	subs	r4, #1
 80085ae:	f101 0814 	add.w	r8, r1, #20
 80085b2:	f100 0514 	add.w	r5, r0, #20
 80085b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ba:	9301      	str	r3, [sp, #4]
 80085bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085c4:	3301      	adds	r3, #1
 80085c6:	429a      	cmp	r2, r3
 80085c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80085d4:	d331      	bcc.n	800863a <quorem+0x9e>
 80085d6:	f04f 0e00 	mov.w	lr, #0
 80085da:	4640      	mov	r0, r8
 80085dc:	46ac      	mov	ip, r5
 80085de:	46f2      	mov	sl, lr
 80085e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80085e4:	b293      	uxth	r3, r2
 80085e6:	fb06 e303 	mla	r3, r6, r3, lr
 80085ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	ebaa 0303 	sub.w	r3, sl, r3
 80085f4:	f8dc a000 	ldr.w	sl, [ip]
 80085f8:	0c12      	lsrs	r2, r2, #16
 80085fa:	fa13 f38a 	uxtah	r3, r3, sl
 80085fe:	fb06 e202 	mla	r2, r6, r2, lr
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800860a:	b292      	uxth	r2, r2
 800860c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008610:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008614:	f8bd 3000 	ldrh.w	r3, [sp]
 8008618:	4581      	cmp	r9, r0
 800861a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800861e:	f84c 3b04 	str.w	r3, [ip], #4
 8008622:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008626:	d2db      	bcs.n	80085e0 <quorem+0x44>
 8008628:	f855 300b 	ldr.w	r3, [r5, fp]
 800862c:	b92b      	cbnz	r3, 800863a <quorem+0x9e>
 800862e:	9b01      	ldr	r3, [sp, #4]
 8008630:	3b04      	subs	r3, #4
 8008632:	429d      	cmp	r5, r3
 8008634:	461a      	mov	r2, r3
 8008636:	d32e      	bcc.n	8008696 <quorem+0xfa>
 8008638:	613c      	str	r4, [r7, #16]
 800863a:	4638      	mov	r0, r7
 800863c:	f001 faea 	bl	8009c14 <__mcmp>
 8008640:	2800      	cmp	r0, #0
 8008642:	db24      	blt.n	800868e <quorem+0xf2>
 8008644:	3601      	adds	r6, #1
 8008646:	4628      	mov	r0, r5
 8008648:	f04f 0c00 	mov.w	ip, #0
 800864c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008650:	f8d0 e000 	ldr.w	lr, [r0]
 8008654:	b293      	uxth	r3, r2
 8008656:	ebac 0303 	sub.w	r3, ip, r3
 800865a:	0c12      	lsrs	r2, r2, #16
 800865c:	fa13 f38e 	uxtah	r3, r3, lr
 8008660:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008664:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008668:	b29b      	uxth	r3, r3
 800866a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800866e:	45c1      	cmp	r9, r8
 8008670:	f840 3b04 	str.w	r3, [r0], #4
 8008674:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008678:	d2e8      	bcs.n	800864c <quorem+0xb0>
 800867a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800867e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008682:	b922      	cbnz	r2, 800868e <quorem+0xf2>
 8008684:	3b04      	subs	r3, #4
 8008686:	429d      	cmp	r5, r3
 8008688:	461a      	mov	r2, r3
 800868a:	d30a      	bcc.n	80086a2 <quorem+0x106>
 800868c:	613c      	str	r4, [r7, #16]
 800868e:	4630      	mov	r0, r6
 8008690:	b003      	add	sp, #12
 8008692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008696:	6812      	ldr	r2, [r2, #0]
 8008698:	3b04      	subs	r3, #4
 800869a:	2a00      	cmp	r2, #0
 800869c:	d1cc      	bne.n	8008638 <quorem+0x9c>
 800869e:	3c01      	subs	r4, #1
 80086a0:	e7c7      	b.n	8008632 <quorem+0x96>
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	3b04      	subs	r3, #4
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	d1f0      	bne.n	800868c <quorem+0xf0>
 80086aa:	3c01      	subs	r4, #1
 80086ac:	e7eb      	b.n	8008686 <quorem+0xea>
 80086ae:	2000      	movs	r0, #0
 80086b0:	e7ee      	b.n	8008690 <quorem+0xf4>
 80086b2:	0000      	movs	r0, r0
 80086b4:	0000      	movs	r0, r0
	...

080086b8 <_dtoa_r>:
 80086b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086bc:	ed2d 8b04 	vpush	{d8-d9}
 80086c0:	ec57 6b10 	vmov	r6, r7, d0
 80086c4:	b093      	sub	sp, #76	; 0x4c
 80086c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086cc:	9106      	str	r1, [sp, #24]
 80086ce:	ee10 aa10 	vmov	sl, s0
 80086d2:	4604      	mov	r4, r0
 80086d4:	9209      	str	r2, [sp, #36]	; 0x24
 80086d6:	930c      	str	r3, [sp, #48]	; 0x30
 80086d8:	46bb      	mov	fp, r7
 80086da:	b975      	cbnz	r5, 80086fa <_dtoa_r+0x42>
 80086dc:	2010      	movs	r0, #16
 80086de:	f7ff f89d 	bl	800781c <malloc>
 80086e2:	4602      	mov	r2, r0
 80086e4:	6260      	str	r0, [r4, #36]	; 0x24
 80086e6:	b920      	cbnz	r0, 80086f2 <_dtoa_r+0x3a>
 80086e8:	4ba7      	ldr	r3, [pc, #668]	; (8008988 <_dtoa_r+0x2d0>)
 80086ea:	21ea      	movs	r1, #234	; 0xea
 80086ec:	48a7      	ldr	r0, [pc, #668]	; (800898c <_dtoa_r+0x2d4>)
 80086ee:	f001 fd59 	bl	800a1a4 <__assert_func>
 80086f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086f6:	6005      	str	r5, [r0, #0]
 80086f8:	60c5      	str	r5, [r0, #12]
 80086fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086fc:	6819      	ldr	r1, [r3, #0]
 80086fe:	b151      	cbz	r1, 8008716 <_dtoa_r+0x5e>
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	604a      	str	r2, [r1, #4]
 8008704:	2301      	movs	r3, #1
 8008706:	4093      	lsls	r3, r2
 8008708:	608b      	str	r3, [r1, #8]
 800870a:	4620      	mov	r0, r4
 800870c:	f001 f840 	bl	8009790 <_Bfree>
 8008710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	1e3b      	subs	r3, r7, #0
 8008718:	bfaa      	itet	ge
 800871a:	2300      	movge	r3, #0
 800871c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008720:	f8c8 3000 	strge.w	r3, [r8]
 8008724:	4b9a      	ldr	r3, [pc, #616]	; (8008990 <_dtoa_r+0x2d8>)
 8008726:	bfbc      	itt	lt
 8008728:	2201      	movlt	r2, #1
 800872a:	f8c8 2000 	strlt.w	r2, [r8]
 800872e:	ea33 030b 	bics.w	r3, r3, fp
 8008732:	d11b      	bne.n	800876c <_dtoa_r+0xb4>
 8008734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008736:	f242 730f 	movw	r3, #9999	; 0x270f
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008740:	4333      	orrs	r3, r6
 8008742:	f000 8592 	beq.w	800926a <_dtoa_r+0xbb2>
 8008746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008748:	b963      	cbnz	r3, 8008764 <_dtoa_r+0xac>
 800874a:	4b92      	ldr	r3, [pc, #584]	; (8008994 <_dtoa_r+0x2dc>)
 800874c:	e022      	b.n	8008794 <_dtoa_r+0xdc>
 800874e:	4b92      	ldr	r3, [pc, #584]	; (8008998 <_dtoa_r+0x2e0>)
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	3308      	adds	r3, #8
 8008754:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	9801      	ldr	r0, [sp, #4]
 800875a:	b013      	add	sp, #76	; 0x4c
 800875c:	ecbd 8b04 	vpop	{d8-d9}
 8008760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008764:	4b8b      	ldr	r3, [pc, #556]	; (8008994 <_dtoa_r+0x2dc>)
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	3303      	adds	r3, #3
 800876a:	e7f3      	b.n	8008754 <_dtoa_r+0x9c>
 800876c:	2200      	movs	r2, #0
 800876e:	2300      	movs	r3, #0
 8008770:	4650      	mov	r0, sl
 8008772:	4659      	mov	r1, fp
 8008774:	f7f8 f9b0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008778:	ec4b ab19 	vmov	d9, sl, fp
 800877c:	4680      	mov	r8, r0
 800877e:	b158      	cbz	r0, 8008798 <_dtoa_r+0xe0>
 8008780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008782:	2301      	movs	r3, #1
 8008784:	6013      	str	r3, [r2, #0]
 8008786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 856b 	beq.w	8009264 <_dtoa_r+0xbac>
 800878e:	4883      	ldr	r0, [pc, #524]	; (800899c <_dtoa_r+0x2e4>)
 8008790:	6018      	str	r0, [r3, #0]
 8008792:	1e43      	subs	r3, r0, #1
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	e7df      	b.n	8008758 <_dtoa_r+0xa0>
 8008798:	ec4b ab10 	vmov	d0, sl, fp
 800879c:	aa10      	add	r2, sp, #64	; 0x40
 800879e:	a911      	add	r1, sp, #68	; 0x44
 80087a0:	4620      	mov	r0, r4
 80087a2:	f001 fadd 	bl	8009d60 <__d2b>
 80087a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80087aa:	ee08 0a10 	vmov	s16, r0
 80087ae:	2d00      	cmp	r5, #0
 80087b0:	f000 8084 	beq.w	80088bc <_dtoa_r+0x204>
 80087b4:	ee19 3a90 	vmov	r3, s19
 80087b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80087c0:	4656      	mov	r6, sl
 80087c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80087c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80087ce:	4b74      	ldr	r3, [pc, #464]	; (80089a0 <_dtoa_r+0x2e8>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	4630      	mov	r0, r6
 80087d4:	4639      	mov	r1, r7
 80087d6:	f7f7 fd5f 	bl	8000298 <__aeabi_dsub>
 80087da:	a365      	add	r3, pc, #404	; (adr r3, 8008970 <_dtoa_r+0x2b8>)
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	f7f7 ff12 	bl	8000608 <__aeabi_dmul>
 80087e4:	a364      	add	r3, pc, #400	; (adr r3, 8008978 <_dtoa_r+0x2c0>)
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	f7f7 fd57 	bl	800029c <__adddf3>
 80087ee:	4606      	mov	r6, r0
 80087f0:	4628      	mov	r0, r5
 80087f2:	460f      	mov	r7, r1
 80087f4:	f7f7 fe9e 	bl	8000534 <__aeabi_i2d>
 80087f8:	a361      	add	r3, pc, #388	; (adr r3, 8008980 <_dtoa_r+0x2c8>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	f7f7 ff03 	bl	8000608 <__aeabi_dmul>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4630      	mov	r0, r6
 8008808:	4639      	mov	r1, r7
 800880a:	f7f7 fd47 	bl	800029c <__adddf3>
 800880e:	4606      	mov	r6, r0
 8008810:	460f      	mov	r7, r1
 8008812:	f7f8 f9a9 	bl	8000b68 <__aeabi_d2iz>
 8008816:	2200      	movs	r2, #0
 8008818:	9000      	str	r0, [sp, #0]
 800881a:	2300      	movs	r3, #0
 800881c:	4630      	mov	r0, r6
 800881e:	4639      	mov	r1, r7
 8008820:	f7f8 f964 	bl	8000aec <__aeabi_dcmplt>
 8008824:	b150      	cbz	r0, 800883c <_dtoa_r+0x184>
 8008826:	9800      	ldr	r0, [sp, #0]
 8008828:	f7f7 fe84 	bl	8000534 <__aeabi_i2d>
 800882c:	4632      	mov	r2, r6
 800882e:	463b      	mov	r3, r7
 8008830:	f7f8 f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8008834:	b910      	cbnz	r0, 800883c <_dtoa_r+0x184>
 8008836:	9b00      	ldr	r3, [sp, #0]
 8008838:	3b01      	subs	r3, #1
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	9b00      	ldr	r3, [sp, #0]
 800883e:	2b16      	cmp	r3, #22
 8008840:	d85a      	bhi.n	80088f8 <_dtoa_r+0x240>
 8008842:	9a00      	ldr	r2, [sp, #0]
 8008844:	4b57      	ldr	r3, [pc, #348]	; (80089a4 <_dtoa_r+0x2ec>)
 8008846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	ec51 0b19 	vmov	r0, r1, d9
 8008852:	f7f8 f94b 	bl	8000aec <__aeabi_dcmplt>
 8008856:	2800      	cmp	r0, #0
 8008858:	d050      	beq.n	80088fc <_dtoa_r+0x244>
 800885a:	9b00      	ldr	r3, [sp, #0]
 800885c:	3b01      	subs	r3, #1
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	2300      	movs	r3, #0
 8008862:	930b      	str	r3, [sp, #44]	; 0x2c
 8008864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008866:	1b5d      	subs	r5, r3, r5
 8008868:	1e6b      	subs	r3, r5, #1
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	bf45      	ittet	mi
 800886e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008872:	9304      	strmi	r3, [sp, #16]
 8008874:	2300      	movpl	r3, #0
 8008876:	2300      	movmi	r3, #0
 8008878:	bf4c      	ite	mi
 800887a:	9305      	strmi	r3, [sp, #20]
 800887c:	9304      	strpl	r3, [sp, #16]
 800887e:	9b00      	ldr	r3, [sp, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	db3d      	blt.n	8008900 <_dtoa_r+0x248>
 8008884:	9b05      	ldr	r3, [sp, #20]
 8008886:	9a00      	ldr	r2, [sp, #0]
 8008888:	920a      	str	r2, [sp, #40]	; 0x28
 800888a:	4413      	add	r3, r2
 800888c:	9305      	str	r3, [sp, #20]
 800888e:	2300      	movs	r3, #0
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	9b06      	ldr	r3, [sp, #24]
 8008894:	2b09      	cmp	r3, #9
 8008896:	f200 8089 	bhi.w	80089ac <_dtoa_r+0x2f4>
 800889a:	2b05      	cmp	r3, #5
 800889c:	bfc4      	itt	gt
 800889e:	3b04      	subgt	r3, #4
 80088a0:	9306      	strgt	r3, [sp, #24]
 80088a2:	9b06      	ldr	r3, [sp, #24]
 80088a4:	f1a3 0302 	sub.w	r3, r3, #2
 80088a8:	bfcc      	ite	gt
 80088aa:	2500      	movgt	r5, #0
 80088ac:	2501      	movle	r5, #1
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	f200 8087 	bhi.w	80089c2 <_dtoa_r+0x30a>
 80088b4:	e8df f003 	tbb	[pc, r3]
 80088b8:	59383a2d 	.word	0x59383a2d
 80088bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80088c0:	441d      	add	r5, r3
 80088c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	bfc1      	itttt	gt
 80088ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80088ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80088d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80088d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80088da:	bfda      	itte	le
 80088dc:	f1c3 0320 	rsble	r3, r3, #32
 80088e0:	fa06 f003 	lslle.w	r0, r6, r3
 80088e4:	4318      	orrgt	r0, r3
 80088e6:	f7f7 fe15 	bl	8000514 <__aeabi_ui2d>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4606      	mov	r6, r0
 80088ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80088f2:	3d01      	subs	r5, #1
 80088f4:	930e      	str	r3, [sp, #56]	; 0x38
 80088f6:	e76a      	b.n	80087ce <_dtoa_r+0x116>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e7b2      	b.n	8008862 <_dtoa_r+0x1aa>
 80088fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80088fe:	e7b1      	b.n	8008864 <_dtoa_r+0x1ac>
 8008900:	9b04      	ldr	r3, [sp, #16]
 8008902:	9a00      	ldr	r2, [sp, #0]
 8008904:	1a9b      	subs	r3, r3, r2
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	4253      	negs	r3, r2
 800890a:	9307      	str	r3, [sp, #28]
 800890c:	2300      	movs	r3, #0
 800890e:	930a      	str	r3, [sp, #40]	; 0x28
 8008910:	e7bf      	b.n	8008892 <_dtoa_r+0x1da>
 8008912:	2300      	movs	r3, #0
 8008914:	9308      	str	r3, [sp, #32]
 8008916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	dc55      	bgt.n	80089c8 <_dtoa_r+0x310>
 800891c:	2301      	movs	r3, #1
 800891e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008922:	461a      	mov	r2, r3
 8008924:	9209      	str	r2, [sp, #36]	; 0x24
 8008926:	e00c      	b.n	8008942 <_dtoa_r+0x28a>
 8008928:	2301      	movs	r3, #1
 800892a:	e7f3      	b.n	8008914 <_dtoa_r+0x25c>
 800892c:	2300      	movs	r3, #0
 800892e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008930:	9308      	str	r3, [sp, #32]
 8008932:	9b00      	ldr	r3, [sp, #0]
 8008934:	4413      	add	r3, r2
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	3301      	adds	r3, #1
 800893a:	2b01      	cmp	r3, #1
 800893c:	9303      	str	r3, [sp, #12]
 800893e:	bfb8      	it	lt
 8008940:	2301      	movlt	r3, #1
 8008942:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008944:	2200      	movs	r2, #0
 8008946:	6042      	str	r2, [r0, #4]
 8008948:	2204      	movs	r2, #4
 800894a:	f102 0614 	add.w	r6, r2, #20
 800894e:	429e      	cmp	r6, r3
 8008950:	6841      	ldr	r1, [r0, #4]
 8008952:	d93d      	bls.n	80089d0 <_dtoa_r+0x318>
 8008954:	4620      	mov	r0, r4
 8008956:	f000 fedb 	bl	8009710 <_Balloc>
 800895a:	9001      	str	r0, [sp, #4]
 800895c:	2800      	cmp	r0, #0
 800895e:	d13b      	bne.n	80089d8 <_dtoa_r+0x320>
 8008960:	4b11      	ldr	r3, [pc, #68]	; (80089a8 <_dtoa_r+0x2f0>)
 8008962:	4602      	mov	r2, r0
 8008964:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008968:	e6c0      	b.n	80086ec <_dtoa_r+0x34>
 800896a:	2301      	movs	r3, #1
 800896c:	e7df      	b.n	800892e <_dtoa_r+0x276>
 800896e:	bf00      	nop
 8008970:	636f4361 	.word	0x636f4361
 8008974:	3fd287a7 	.word	0x3fd287a7
 8008978:	8b60c8b3 	.word	0x8b60c8b3
 800897c:	3fc68a28 	.word	0x3fc68a28
 8008980:	509f79fb 	.word	0x509f79fb
 8008984:	3fd34413 	.word	0x3fd34413
 8008988:	0800a531 	.word	0x0800a531
 800898c:	0800a548 	.word	0x0800a548
 8008990:	7ff00000 	.word	0x7ff00000
 8008994:	0800a52d 	.word	0x0800a52d
 8008998:	0800a524 	.word	0x0800a524
 800899c:	0800a501 	.word	0x0800a501
 80089a0:	3ff80000 	.word	0x3ff80000
 80089a4:	0800a698 	.word	0x0800a698
 80089a8:	0800a5a3 	.word	0x0800a5a3
 80089ac:	2501      	movs	r5, #1
 80089ae:	2300      	movs	r3, #0
 80089b0:	9306      	str	r3, [sp, #24]
 80089b2:	9508      	str	r5, [sp, #32]
 80089b4:	f04f 33ff 	mov.w	r3, #4294967295
 80089b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80089bc:	2200      	movs	r2, #0
 80089be:	2312      	movs	r3, #18
 80089c0:	e7b0      	b.n	8008924 <_dtoa_r+0x26c>
 80089c2:	2301      	movs	r3, #1
 80089c4:	9308      	str	r3, [sp, #32]
 80089c6:	e7f5      	b.n	80089b4 <_dtoa_r+0x2fc>
 80089c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80089ce:	e7b8      	b.n	8008942 <_dtoa_r+0x28a>
 80089d0:	3101      	adds	r1, #1
 80089d2:	6041      	str	r1, [r0, #4]
 80089d4:	0052      	lsls	r2, r2, #1
 80089d6:	e7b8      	b.n	800894a <_dtoa_r+0x292>
 80089d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089da:	9a01      	ldr	r2, [sp, #4]
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	9b03      	ldr	r3, [sp, #12]
 80089e0:	2b0e      	cmp	r3, #14
 80089e2:	f200 809d 	bhi.w	8008b20 <_dtoa_r+0x468>
 80089e6:	2d00      	cmp	r5, #0
 80089e8:	f000 809a 	beq.w	8008b20 <_dtoa_r+0x468>
 80089ec:	9b00      	ldr	r3, [sp, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	dd32      	ble.n	8008a58 <_dtoa_r+0x3a0>
 80089f2:	4ab7      	ldr	r2, [pc, #732]	; (8008cd0 <_dtoa_r+0x618>)
 80089f4:	f003 030f 	and.w	r3, r3, #15
 80089f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a00:	9b00      	ldr	r3, [sp, #0]
 8008a02:	05d8      	lsls	r0, r3, #23
 8008a04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008a08:	d516      	bpl.n	8008a38 <_dtoa_r+0x380>
 8008a0a:	4bb2      	ldr	r3, [pc, #712]	; (8008cd4 <_dtoa_r+0x61c>)
 8008a0c:	ec51 0b19 	vmov	r0, r1, d9
 8008a10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a14:	f7f7 ff22 	bl	800085c <__aeabi_ddiv>
 8008a18:	f007 070f 	and.w	r7, r7, #15
 8008a1c:	4682      	mov	sl, r0
 8008a1e:	468b      	mov	fp, r1
 8008a20:	2503      	movs	r5, #3
 8008a22:	4eac      	ldr	r6, [pc, #688]	; (8008cd4 <_dtoa_r+0x61c>)
 8008a24:	b957      	cbnz	r7, 8008a3c <_dtoa_r+0x384>
 8008a26:	4642      	mov	r2, r8
 8008a28:	464b      	mov	r3, r9
 8008a2a:	4650      	mov	r0, sl
 8008a2c:	4659      	mov	r1, fp
 8008a2e:	f7f7 ff15 	bl	800085c <__aeabi_ddiv>
 8008a32:	4682      	mov	sl, r0
 8008a34:	468b      	mov	fp, r1
 8008a36:	e028      	b.n	8008a8a <_dtoa_r+0x3d2>
 8008a38:	2502      	movs	r5, #2
 8008a3a:	e7f2      	b.n	8008a22 <_dtoa_r+0x36a>
 8008a3c:	07f9      	lsls	r1, r7, #31
 8008a3e:	d508      	bpl.n	8008a52 <_dtoa_r+0x39a>
 8008a40:	4640      	mov	r0, r8
 8008a42:	4649      	mov	r1, r9
 8008a44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a48:	f7f7 fdde 	bl	8000608 <__aeabi_dmul>
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	4680      	mov	r8, r0
 8008a50:	4689      	mov	r9, r1
 8008a52:	107f      	asrs	r7, r7, #1
 8008a54:	3608      	adds	r6, #8
 8008a56:	e7e5      	b.n	8008a24 <_dtoa_r+0x36c>
 8008a58:	f000 809b 	beq.w	8008b92 <_dtoa_r+0x4da>
 8008a5c:	9b00      	ldr	r3, [sp, #0]
 8008a5e:	4f9d      	ldr	r7, [pc, #628]	; (8008cd4 <_dtoa_r+0x61c>)
 8008a60:	425e      	negs	r6, r3
 8008a62:	4b9b      	ldr	r3, [pc, #620]	; (8008cd0 <_dtoa_r+0x618>)
 8008a64:	f006 020f 	and.w	r2, r6, #15
 8008a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	ec51 0b19 	vmov	r0, r1, d9
 8008a74:	f7f7 fdc8 	bl	8000608 <__aeabi_dmul>
 8008a78:	1136      	asrs	r6, r6, #4
 8008a7a:	4682      	mov	sl, r0
 8008a7c:	468b      	mov	fp, r1
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2502      	movs	r5, #2
 8008a82:	2e00      	cmp	r6, #0
 8008a84:	d17a      	bne.n	8008b7c <_dtoa_r+0x4c4>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1d3      	bne.n	8008a32 <_dtoa_r+0x37a>
 8008a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8082 	beq.w	8008b96 <_dtoa_r+0x4de>
 8008a92:	4b91      	ldr	r3, [pc, #580]	; (8008cd8 <_dtoa_r+0x620>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	4650      	mov	r0, sl
 8008a98:	4659      	mov	r1, fp
 8008a9a:	f7f8 f827 	bl	8000aec <__aeabi_dcmplt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d079      	beq.n	8008b96 <_dtoa_r+0x4de>
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d076      	beq.n	8008b96 <_dtoa_r+0x4de>
 8008aa8:	9b02      	ldr	r3, [sp, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dd36      	ble.n	8008b1c <_dtoa_r+0x464>
 8008aae:	9b00      	ldr	r3, [sp, #0]
 8008ab0:	4650      	mov	r0, sl
 8008ab2:	4659      	mov	r1, fp
 8008ab4:	1e5f      	subs	r7, r3, #1
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4b88      	ldr	r3, [pc, #544]	; (8008cdc <_dtoa_r+0x624>)
 8008aba:	f7f7 fda5 	bl	8000608 <__aeabi_dmul>
 8008abe:	9e02      	ldr	r6, [sp, #8]
 8008ac0:	4682      	mov	sl, r0
 8008ac2:	468b      	mov	fp, r1
 8008ac4:	3501      	adds	r5, #1
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f7f7 fd34 	bl	8000534 <__aeabi_i2d>
 8008acc:	4652      	mov	r2, sl
 8008ace:	465b      	mov	r3, fp
 8008ad0:	f7f7 fd9a 	bl	8000608 <__aeabi_dmul>
 8008ad4:	4b82      	ldr	r3, [pc, #520]	; (8008ce0 <_dtoa_r+0x628>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f7f7 fbe0 	bl	800029c <__adddf3>
 8008adc:	46d0      	mov	r8, sl
 8008ade:	46d9      	mov	r9, fp
 8008ae0:	4682      	mov	sl, r0
 8008ae2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008ae6:	2e00      	cmp	r6, #0
 8008ae8:	d158      	bne.n	8008b9c <_dtoa_r+0x4e4>
 8008aea:	4b7e      	ldr	r3, [pc, #504]	; (8008ce4 <_dtoa_r+0x62c>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	4640      	mov	r0, r8
 8008af0:	4649      	mov	r1, r9
 8008af2:	f7f7 fbd1 	bl	8000298 <__aeabi_dsub>
 8008af6:	4652      	mov	r2, sl
 8008af8:	465b      	mov	r3, fp
 8008afa:	4680      	mov	r8, r0
 8008afc:	4689      	mov	r9, r1
 8008afe:	f7f8 f813 	bl	8000b28 <__aeabi_dcmpgt>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	f040 8295 	bne.w	8009032 <_dtoa_r+0x97a>
 8008b08:	4652      	mov	r2, sl
 8008b0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b0e:	4640      	mov	r0, r8
 8008b10:	4649      	mov	r1, r9
 8008b12:	f7f7 ffeb 	bl	8000aec <__aeabi_dcmplt>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f040 8289 	bne.w	800902e <_dtoa_r+0x976>
 8008b1c:	ec5b ab19 	vmov	sl, fp, d9
 8008b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f2c0 8148 	blt.w	8008db8 <_dtoa_r+0x700>
 8008b28:	9a00      	ldr	r2, [sp, #0]
 8008b2a:	2a0e      	cmp	r2, #14
 8008b2c:	f300 8144 	bgt.w	8008db8 <_dtoa_r+0x700>
 8008b30:	4b67      	ldr	r3, [pc, #412]	; (8008cd0 <_dtoa_r+0x618>)
 8008b32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f280 80d5 	bge.w	8008cec <_dtoa_r+0x634>
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f300 80d1 	bgt.w	8008cec <_dtoa_r+0x634>
 8008b4a:	f040 826f 	bne.w	800902c <_dtoa_r+0x974>
 8008b4e:	4b65      	ldr	r3, [pc, #404]	; (8008ce4 <_dtoa_r+0x62c>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	4640      	mov	r0, r8
 8008b54:	4649      	mov	r1, r9
 8008b56:	f7f7 fd57 	bl	8000608 <__aeabi_dmul>
 8008b5a:	4652      	mov	r2, sl
 8008b5c:	465b      	mov	r3, fp
 8008b5e:	f7f7 ffd9 	bl	8000b14 <__aeabi_dcmpge>
 8008b62:	9e03      	ldr	r6, [sp, #12]
 8008b64:	4637      	mov	r7, r6
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f040 8245 	bne.w	8008ff6 <_dtoa_r+0x93e>
 8008b6c:	9d01      	ldr	r5, [sp, #4]
 8008b6e:	2331      	movs	r3, #49	; 0x31
 8008b70:	f805 3b01 	strb.w	r3, [r5], #1
 8008b74:	9b00      	ldr	r3, [sp, #0]
 8008b76:	3301      	adds	r3, #1
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	e240      	b.n	8008ffe <_dtoa_r+0x946>
 8008b7c:	07f2      	lsls	r2, r6, #31
 8008b7e:	d505      	bpl.n	8008b8c <_dtoa_r+0x4d4>
 8008b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b84:	f7f7 fd40 	bl	8000608 <__aeabi_dmul>
 8008b88:	3501      	adds	r5, #1
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	1076      	asrs	r6, r6, #1
 8008b8e:	3708      	adds	r7, #8
 8008b90:	e777      	b.n	8008a82 <_dtoa_r+0x3ca>
 8008b92:	2502      	movs	r5, #2
 8008b94:	e779      	b.n	8008a8a <_dtoa_r+0x3d2>
 8008b96:	9f00      	ldr	r7, [sp, #0]
 8008b98:	9e03      	ldr	r6, [sp, #12]
 8008b9a:	e794      	b.n	8008ac6 <_dtoa_r+0x40e>
 8008b9c:	9901      	ldr	r1, [sp, #4]
 8008b9e:	4b4c      	ldr	r3, [pc, #304]	; (8008cd0 <_dtoa_r+0x618>)
 8008ba0:	4431      	add	r1, r6
 8008ba2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ba4:	9908      	ldr	r1, [sp, #32]
 8008ba6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008baa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bae:	2900      	cmp	r1, #0
 8008bb0:	d043      	beq.n	8008c3a <_dtoa_r+0x582>
 8008bb2:	494d      	ldr	r1, [pc, #308]	; (8008ce8 <_dtoa_r+0x630>)
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	f7f7 fe51 	bl	800085c <__aeabi_ddiv>
 8008bba:	4652      	mov	r2, sl
 8008bbc:	465b      	mov	r3, fp
 8008bbe:	f7f7 fb6b 	bl	8000298 <__aeabi_dsub>
 8008bc2:	9d01      	ldr	r5, [sp, #4]
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	468b      	mov	fp, r1
 8008bc8:	4649      	mov	r1, r9
 8008bca:	4640      	mov	r0, r8
 8008bcc:	f7f7 ffcc 	bl	8000b68 <__aeabi_d2iz>
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	f7f7 fcaf 	bl	8000534 <__aeabi_i2d>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4640      	mov	r0, r8
 8008bdc:	4649      	mov	r1, r9
 8008bde:	f7f7 fb5b 	bl	8000298 <__aeabi_dsub>
 8008be2:	3630      	adds	r6, #48	; 0x30
 8008be4:	f805 6b01 	strb.w	r6, [r5], #1
 8008be8:	4652      	mov	r2, sl
 8008bea:	465b      	mov	r3, fp
 8008bec:	4680      	mov	r8, r0
 8008bee:	4689      	mov	r9, r1
 8008bf0:	f7f7 ff7c 	bl	8000aec <__aeabi_dcmplt>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d163      	bne.n	8008cc0 <_dtoa_r+0x608>
 8008bf8:	4642      	mov	r2, r8
 8008bfa:	464b      	mov	r3, r9
 8008bfc:	4936      	ldr	r1, [pc, #216]	; (8008cd8 <_dtoa_r+0x620>)
 8008bfe:	2000      	movs	r0, #0
 8008c00:	f7f7 fb4a 	bl	8000298 <__aeabi_dsub>
 8008c04:	4652      	mov	r2, sl
 8008c06:	465b      	mov	r3, fp
 8008c08:	f7f7 ff70 	bl	8000aec <__aeabi_dcmplt>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	f040 80b5 	bne.w	8008d7c <_dtoa_r+0x6c4>
 8008c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c14:	429d      	cmp	r5, r3
 8008c16:	d081      	beq.n	8008b1c <_dtoa_r+0x464>
 8008c18:	4b30      	ldr	r3, [pc, #192]	; (8008cdc <_dtoa_r+0x624>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	4650      	mov	r0, sl
 8008c1e:	4659      	mov	r1, fp
 8008c20:	f7f7 fcf2 	bl	8000608 <__aeabi_dmul>
 8008c24:	4b2d      	ldr	r3, [pc, #180]	; (8008cdc <_dtoa_r+0x624>)
 8008c26:	4682      	mov	sl, r0
 8008c28:	468b      	mov	fp, r1
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f7f7 fcea 	bl	8000608 <__aeabi_dmul>
 8008c34:	4680      	mov	r8, r0
 8008c36:	4689      	mov	r9, r1
 8008c38:	e7c6      	b.n	8008bc8 <_dtoa_r+0x510>
 8008c3a:	4650      	mov	r0, sl
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	f7f7 fce3 	bl	8000608 <__aeabi_dmul>
 8008c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c44:	9d01      	ldr	r5, [sp, #4]
 8008c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c48:	4682      	mov	sl, r0
 8008c4a:	468b      	mov	fp, r1
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	4640      	mov	r0, r8
 8008c50:	f7f7 ff8a 	bl	8000b68 <__aeabi_d2iz>
 8008c54:	4606      	mov	r6, r0
 8008c56:	f7f7 fc6d 	bl	8000534 <__aeabi_i2d>
 8008c5a:	3630      	adds	r6, #48	; 0x30
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4640      	mov	r0, r8
 8008c62:	4649      	mov	r1, r9
 8008c64:	f7f7 fb18 	bl	8000298 <__aeabi_dsub>
 8008c68:	f805 6b01 	strb.w	r6, [r5], #1
 8008c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c6e:	429d      	cmp	r5, r3
 8008c70:	4680      	mov	r8, r0
 8008c72:	4689      	mov	r9, r1
 8008c74:	f04f 0200 	mov.w	r2, #0
 8008c78:	d124      	bne.n	8008cc4 <_dtoa_r+0x60c>
 8008c7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ce8 <_dtoa_r+0x630>)
 8008c7c:	4650      	mov	r0, sl
 8008c7e:	4659      	mov	r1, fp
 8008c80:	f7f7 fb0c 	bl	800029c <__adddf3>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4640      	mov	r0, r8
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	f7f7 ff4c 	bl	8000b28 <__aeabi_dcmpgt>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d173      	bne.n	8008d7c <_dtoa_r+0x6c4>
 8008c94:	4652      	mov	r2, sl
 8008c96:	465b      	mov	r3, fp
 8008c98:	4913      	ldr	r1, [pc, #76]	; (8008ce8 <_dtoa_r+0x630>)
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	f7f7 fafc 	bl	8000298 <__aeabi_dsub>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	f7f7 ff20 	bl	8000aec <__aeabi_dcmplt>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	f43f af35 	beq.w	8008b1c <_dtoa_r+0x464>
 8008cb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008cb4:	1e6b      	subs	r3, r5, #1
 8008cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cbc:	2b30      	cmp	r3, #48	; 0x30
 8008cbe:	d0f8      	beq.n	8008cb2 <_dtoa_r+0x5fa>
 8008cc0:	9700      	str	r7, [sp, #0]
 8008cc2:	e049      	b.n	8008d58 <_dtoa_r+0x6a0>
 8008cc4:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <_dtoa_r+0x624>)
 8008cc6:	f7f7 fc9f 	bl	8000608 <__aeabi_dmul>
 8008cca:	4680      	mov	r8, r0
 8008ccc:	4689      	mov	r9, r1
 8008cce:	e7bd      	b.n	8008c4c <_dtoa_r+0x594>
 8008cd0:	0800a698 	.word	0x0800a698
 8008cd4:	0800a670 	.word	0x0800a670
 8008cd8:	3ff00000 	.word	0x3ff00000
 8008cdc:	40240000 	.word	0x40240000
 8008ce0:	401c0000 	.word	0x401c0000
 8008ce4:	40140000 	.word	0x40140000
 8008ce8:	3fe00000 	.word	0x3fe00000
 8008cec:	9d01      	ldr	r5, [sp, #4]
 8008cee:	4656      	mov	r6, sl
 8008cf0:	465f      	mov	r7, fp
 8008cf2:	4642      	mov	r2, r8
 8008cf4:	464b      	mov	r3, r9
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	f7f7 fdaf 	bl	800085c <__aeabi_ddiv>
 8008cfe:	f7f7 ff33 	bl	8000b68 <__aeabi_d2iz>
 8008d02:	4682      	mov	sl, r0
 8008d04:	f7f7 fc16 	bl	8000534 <__aeabi_i2d>
 8008d08:	4642      	mov	r2, r8
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	f7f7 fc7c 	bl	8000608 <__aeabi_dmul>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4630      	mov	r0, r6
 8008d16:	4639      	mov	r1, r7
 8008d18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008d1c:	f7f7 fabc 	bl	8000298 <__aeabi_dsub>
 8008d20:	f805 6b01 	strb.w	r6, [r5], #1
 8008d24:	9e01      	ldr	r6, [sp, #4]
 8008d26:	9f03      	ldr	r7, [sp, #12]
 8008d28:	1bae      	subs	r6, r5, r6
 8008d2a:	42b7      	cmp	r7, r6
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	d135      	bne.n	8008d9e <_dtoa_r+0x6e6>
 8008d32:	f7f7 fab3 	bl	800029c <__adddf3>
 8008d36:	4642      	mov	r2, r8
 8008d38:	464b      	mov	r3, r9
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	460f      	mov	r7, r1
 8008d3e:	f7f7 fef3 	bl	8000b28 <__aeabi_dcmpgt>
 8008d42:	b9d0      	cbnz	r0, 8008d7a <_dtoa_r+0x6c2>
 8008d44:	4642      	mov	r2, r8
 8008d46:	464b      	mov	r3, r9
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d50:	b110      	cbz	r0, 8008d58 <_dtoa_r+0x6a0>
 8008d52:	f01a 0f01 	tst.w	sl, #1
 8008d56:	d110      	bne.n	8008d7a <_dtoa_r+0x6c2>
 8008d58:	4620      	mov	r0, r4
 8008d5a:	ee18 1a10 	vmov	r1, s16
 8008d5e:	f000 fd17 	bl	8009790 <_Bfree>
 8008d62:	2300      	movs	r3, #0
 8008d64:	9800      	ldr	r0, [sp, #0]
 8008d66:	702b      	strb	r3, [r5, #0]
 8008d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	6018      	str	r0, [r3, #0]
 8008d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f43f acf1 	beq.w	8008758 <_dtoa_r+0xa0>
 8008d76:	601d      	str	r5, [r3, #0]
 8008d78:	e4ee      	b.n	8008758 <_dtoa_r+0xa0>
 8008d7a:	9f00      	ldr	r7, [sp, #0]
 8008d7c:	462b      	mov	r3, r5
 8008d7e:	461d      	mov	r5, r3
 8008d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d84:	2a39      	cmp	r2, #57	; 0x39
 8008d86:	d106      	bne.n	8008d96 <_dtoa_r+0x6de>
 8008d88:	9a01      	ldr	r2, [sp, #4]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d1f7      	bne.n	8008d7e <_dtoa_r+0x6c6>
 8008d8e:	9901      	ldr	r1, [sp, #4]
 8008d90:	2230      	movs	r2, #48	; 0x30
 8008d92:	3701      	adds	r7, #1
 8008d94:	700a      	strb	r2, [r1, #0]
 8008d96:	781a      	ldrb	r2, [r3, #0]
 8008d98:	3201      	adds	r2, #1
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	e790      	b.n	8008cc0 <_dtoa_r+0x608>
 8008d9e:	4ba6      	ldr	r3, [pc, #664]	; (8009038 <_dtoa_r+0x980>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	f7f7 fc31 	bl	8000608 <__aeabi_dmul>
 8008da6:	2200      	movs	r2, #0
 8008da8:	2300      	movs	r3, #0
 8008daa:	4606      	mov	r6, r0
 8008dac:	460f      	mov	r7, r1
 8008dae:	f7f7 fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d09d      	beq.n	8008cf2 <_dtoa_r+0x63a>
 8008db6:	e7cf      	b.n	8008d58 <_dtoa_r+0x6a0>
 8008db8:	9a08      	ldr	r2, [sp, #32]
 8008dba:	2a00      	cmp	r2, #0
 8008dbc:	f000 80d7 	beq.w	8008f6e <_dtoa_r+0x8b6>
 8008dc0:	9a06      	ldr	r2, [sp, #24]
 8008dc2:	2a01      	cmp	r2, #1
 8008dc4:	f300 80ba 	bgt.w	8008f3c <_dtoa_r+0x884>
 8008dc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dca:	2a00      	cmp	r2, #0
 8008dcc:	f000 80b2 	beq.w	8008f34 <_dtoa_r+0x87c>
 8008dd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008dd4:	9e07      	ldr	r6, [sp, #28]
 8008dd6:	9d04      	ldr	r5, [sp, #16]
 8008dd8:	9a04      	ldr	r2, [sp, #16]
 8008dda:	441a      	add	r2, r3
 8008ddc:	9204      	str	r2, [sp, #16]
 8008dde:	9a05      	ldr	r2, [sp, #20]
 8008de0:	2101      	movs	r1, #1
 8008de2:	441a      	add	r2, r3
 8008de4:	4620      	mov	r0, r4
 8008de6:	9205      	str	r2, [sp, #20]
 8008de8:	f000 fd8a 	bl	8009900 <__i2b>
 8008dec:	4607      	mov	r7, r0
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	dd0c      	ble.n	8008e0c <_dtoa_r+0x754>
 8008df2:	9b05      	ldr	r3, [sp, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dd09      	ble.n	8008e0c <_dtoa_r+0x754>
 8008df8:	42ab      	cmp	r3, r5
 8008dfa:	9a04      	ldr	r2, [sp, #16]
 8008dfc:	bfa8      	it	ge
 8008dfe:	462b      	movge	r3, r5
 8008e00:	1ad2      	subs	r2, r2, r3
 8008e02:	9204      	str	r2, [sp, #16]
 8008e04:	9a05      	ldr	r2, [sp, #20]
 8008e06:	1aed      	subs	r5, r5, r3
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	9305      	str	r3, [sp, #20]
 8008e0c:	9b07      	ldr	r3, [sp, #28]
 8008e0e:	b31b      	cbz	r3, 8008e58 <_dtoa_r+0x7a0>
 8008e10:	9b08      	ldr	r3, [sp, #32]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 80af 	beq.w	8008f76 <_dtoa_r+0x8be>
 8008e18:	2e00      	cmp	r6, #0
 8008e1a:	dd13      	ble.n	8008e44 <_dtoa_r+0x78c>
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	4632      	mov	r2, r6
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 fe2d 	bl	8009a80 <__pow5mult>
 8008e26:	ee18 2a10 	vmov	r2, s16
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 fd7c 	bl	800992c <__multiply>
 8008e34:	ee18 1a10 	vmov	r1, s16
 8008e38:	4680      	mov	r8, r0
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fca8 	bl	8009790 <_Bfree>
 8008e40:	ee08 8a10 	vmov	s16, r8
 8008e44:	9b07      	ldr	r3, [sp, #28]
 8008e46:	1b9a      	subs	r2, r3, r6
 8008e48:	d006      	beq.n	8008e58 <_dtoa_r+0x7a0>
 8008e4a:	ee18 1a10 	vmov	r1, s16
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 fe16 	bl	8009a80 <__pow5mult>
 8008e54:	ee08 0a10 	vmov	s16, r0
 8008e58:	2101      	movs	r1, #1
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 fd50 	bl	8009900 <__i2b>
 8008e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	4606      	mov	r6, r0
 8008e66:	f340 8088 	ble.w	8008f7a <_dtoa_r+0x8c2>
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	4601      	mov	r1, r0
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 fe06 	bl	8009a80 <__pow5mult>
 8008e74:	9b06      	ldr	r3, [sp, #24]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	4606      	mov	r6, r0
 8008e7a:	f340 8081 	ble.w	8008f80 <_dtoa_r+0x8c8>
 8008e7e:	f04f 0800 	mov.w	r8, #0
 8008e82:	6933      	ldr	r3, [r6, #16]
 8008e84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e88:	6918      	ldr	r0, [r3, #16]
 8008e8a:	f000 fce9 	bl	8009860 <__hi0bits>
 8008e8e:	f1c0 0020 	rsb	r0, r0, #32
 8008e92:	9b05      	ldr	r3, [sp, #20]
 8008e94:	4418      	add	r0, r3
 8008e96:	f010 001f 	ands.w	r0, r0, #31
 8008e9a:	f000 8092 	beq.w	8008fc2 <_dtoa_r+0x90a>
 8008e9e:	f1c0 0320 	rsb	r3, r0, #32
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	f340 808a 	ble.w	8008fbc <_dtoa_r+0x904>
 8008ea8:	f1c0 001c 	rsb	r0, r0, #28
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	4403      	add	r3, r0
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	9b05      	ldr	r3, [sp, #20]
 8008eb4:	4403      	add	r3, r0
 8008eb6:	4405      	add	r5, r0
 8008eb8:	9305      	str	r3, [sp, #20]
 8008eba:	9b04      	ldr	r3, [sp, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dd07      	ble.n	8008ed0 <_dtoa_r+0x818>
 8008ec0:	ee18 1a10 	vmov	r1, s16
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fe34 	bl	8009b34 <__lshift>
 8008ecc:	ee08 0a10 	vmov	s16, r0
 8008ed0:	9b05      	ldr	r3, [sp, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	dd05      	ble.n	8008ee2 <_dtoa_r+0x82a>
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	461a      	mov	r2, r3
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 fe2a 	bl	8009b34 <__lshift>
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d06e      	beq.n	8008fc6 <_dtoa_r+0x90e>
 8008ee8:	ee18 0a10 	vmov	r0, s16
 8008eec:	4631      	mov	r1, r6
 8008eee:	f000 fe91 	bl	8009c14 <__mcmp>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	da67      	bge.n	8008fc6 <_dtoa_r+0x90e>
 8008ef6:	9b00      	ldr	r3, [sp, #0]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	ee18 1a10 	vmov	r1, s16
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	220a      	movs	r2, #10
 8008f02:	2300      	movs	r3, #0
 8008f04:	4620      	mov	r0, r4
 8008f06:	f000 fc65 	bl	80097d4 <__multadd>
 8008f0a:	9b08      	ldr	r3, [sp, #32]
 8008f0c:	ee08 0a10 	vmov	s16, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 81b1 	beq.w	8009278 <_dtoa_r+0xbc0>
 8008f16:	2300      	movs	r3, #0
 8008f18:	4639      	mov	r1, r7
 8008f1a:	220a      	movs	r2, #10
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f000 fc59 	bl	80097d4 <__multadd>
 8008f22:	9b02      	ldr	r3, [sp, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	4607      	mov	r7, r0
 8008f28:	f300 808e 	bgt.w	8009048 <_dtoa_r+0x990>
 8008f2c:	9b06      	ldr	r3, [sp, #24]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	dc51      	bgt.n	8008fd6 <_dtoa_r+0x91e>
 8008f32:	e089      	b.n	8009048 <_dtoa_r+0x990>
 8008f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f3a:	e74b      	b.n	8008dd4 <_dtoa_r+0x71c>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	1e5e      	subs	r6, r3, #1
 8008f40:	9b07      	ldr	r3, [sp, #28]
 8008f42:	42b3      	cmp	r3, r6
 8008f44:	bfbf      	itttt	lt
 8008f46:	9b07      	ldrlt	r3, [sp, #28]
 8008f48:	9607      	strlt	r6, [sp, #28]
 8008f4a:	1af2      	sublt	r2, r6, r3
 8008f4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008f4e:	bfb6      	itet	lt
 8008f50:	189b      	addlt	r3, r3, r2
 8008f52:	1b9e      	subge	r6, r3, r6
 8008f54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008f56:	9b03      	ldr	r3, [sp, #12]
 8008f58:	bfb8      	it	lt
 8008f5a:	2600      	movlt	r6, #0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	bfb7      	itett	lt
 8008f60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008f64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008f68:	1a9d      	sublt	r5, r3, r2
 8008f6a:	2300      	movlt	r3, #0
 8008f6c:	e734      	b.n	8008dd8 <_dtoa_r+0x720>
 8008f6e:	9e07      	ldr	r6, [sp, #28]
 8008f70:	9d04      	ldr	r5, [sp, #16]
 8008f72:	9f08      	ldr	r7, [sp, #32]
 8008f74:	e73b      	b.n	8008dee <_dtoa_r+0x736>
 8008f76:	9a07      	ldr	r2, [sp, #28]
 8008f78:	e767      	b.n	8008e4a <_dtoa_r+0x792>
 8008f7a:	9b06      	ldr	r3, [sp, #24]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	dc18      	bgt.n	8008fb2 <_dtoa_r+0x8fa>
 8008f80:	f1ba 0f00 	cmp.w	sl, #0
 8008f84:	d115      	bne.n	8008fb2 <_dtoa_r+0x8fa>
 8008f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f8a:	b993      	cbnz	r3, 8008fb2 <_dtoa_r+0x8fa>
 8008f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f90:	0d1b      	lsrs	r3, r3, #20
 8008f92:	051b      	lsls	r3, r3, #20
 8008f94:	b183      	cbz	r3, 8008fb8 <_dtoa_r+0x900>
 8008f96:	9b04      	ldr	r3, [sp, #16]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	9b05      	ldr	r3, [sp, #20]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	9305      	str	r3, [sp, #20]
 8008fa2:	f04f 0801 	mov.w	r8, #1
 8008fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f47f af6a 	bne.w	8008e82 <_dtoa_r+0x7ca>
 8008fae:	2001      	movs	r0, #1
 8008fb0:	e76f      	b.n	8008e92 <_dtoa_r+0x7da>
 8008fb2:	f04f 0800 	mov.w	r8, #0
 8008fb6:	e7f6      	b.n	8008fa6 <_dtoa_r+0x8ee>
 8008fb8:	4698      	mov	r8, r3
 8008fba:	e7f4      	b.n	8008fa6 <_dtoa_r+0x8ee>
 8008fbc:	f43f af7d 	beq.w	8008eba <_dtoa_r+0x802>
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	301c      	adds	r0, #28
 8008fc4:	e772      	b.n	8008eac <_dtoa_r+0x7f4>
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dc37      	bgt.n	800903c <_dtoa_r+0x984>
 8008fcc:	9b06      	ldr	r3, [sp, #24]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	dd34      	ble.n	800903c <_dtoa_r+0x984>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	9302      	str	r3, [sp, #8]
 8008fd6:	9b02      	ldr	r3, [sp, #8]
 8008fd8:	b96b      	cbnz	r3, 8008ff6 <_dtoa_r+0x93e>
 8008fda:	4631      	mov	r1, r6
 8008fdc:	2205      	movs	r2, #5
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f000 fbf8 	bl	80097d4 <__multadd>
 8008fe4:	4601      	mov	r1, r0
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	ee18 0a10 	vmov	r0, s16
 8008fec:	f000 fe12 	bl	8009c14 <__mcmp>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	f73f adbb 	bgt.w	8008b6c <_dtoa_r+0x4b4>
 8008ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff8:	9d01      	ldr	r5, [sp, #4]
 8008ffa:	43db      	mvns	r3, r3
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	f04f 0800 	mov.w	r8, #0
 8009002:	4631      	mov	r1, r6
 8009004:	4620      	mov	r0, r4
 8009006:	f000 fbc3 	bl	8009790 <_Bfree>
 800900a:	2f00      	cmp	r7, #0
 800900c:	f43f aea4 	beq.w	8008d58 <_dtoa_r+0x6a0>
 8009010:	f1b8 0f00 	cmp.w	r8, #0
 8009014:	d005      	beq.n	8009022 <_dtoa_r+0x96a>
 8009016:	45b8      	cmp	r8, r7
 8009018:	d003      	beq.n	8009022 <_dtoa_r+0x96a>
 800901a:	4641      	mov	r1, r8
 800901c:	4620      	mov	r0, r4
 800901e:	f000 fbb7 	bl	8009790 <_Bfree>
 8009022:	4639      	mov	r1, r7
 8009024:	4620      	mov	r0, r4
 8009026:	f000 fbb3 	bl	8009790 <_Bfree>
 800902a:	e695      	b.n	8008d58 <_dtoa_r+0x6a0>
 800902c:	2600      	movs	r6, #0
 800902e:	4637      	mov	r7, r6
 8009030:	e7e1      	b.n	8008ff6 <_dtoa_r+0x93e>
 8009032:	9700      	str	r7, [sp, #0]
 8009034:	4637      	mov	r7, r6
 8009036:	e599      	b.n	8008b6c <_dtoa_r+0x4b4>
 8009038:	40240000 	.word	0x40240000
 800903c:	9b08      	ldr	r3, [sp, #32]
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 80ca 	beq.w	80091d8 <_dtoa_r+0xb20>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	9302      	str	r3, [sp, #8]
 8009048:	2d00      	cmp	r5, #0
 800904a:	dd05      	ble.n	8009058 <_dtoa_r+0x9a0>
 800904c:	4639      	mov	r1, r7
 800904e:	462a      	mov	r2, r5
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fd6f 	bl	8009b34 <__lshift>
 8009056:	4607      	mov	r7, r0
 8009058:	f1b8 0f00 	cmp.w	r8, #0
 800905c:	d05b      	beq.n	8009116 <_dtoa_r+0xa5e>
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	4620      	mov	r0, r4
 8009062:	f000 fb55 	bl	8009710 <_Balloc>
 8009066:	4605      	mov	r5, r0
 8009068:	b928      	cbnz	r0, 8009076 <_dtoa_r+0x9be>
 800906a:	4b87      	ldr	r3, [pc, #540]	; (8009288 <_dtoa_r+0xbd0>)
 800906c:	4602      	mov	r2, r0
 800906e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009072:	f7ff bb3b 	b.w	80086ec <_dtoa_r+0x34>
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	3202      	adds	r2, #2
 800907a:	0092      	lsls	r2, r2, #2
 800907c:	f107 010c 	add.w	r1, r7, #12
 8009080:	300c      	adds	r0, #12
 8009082:	f000 fb2b 	bl	80096dc <memcpy>
 8009086:	2201      	movs	r2, #1
 8009088:	4629      	mov	r1, r5
 800908a:	4620      	mov	r0, r4
 800908c:	f000 fd52 	bl	8009b34 <__lshift>
 8009090:	9b01      	ldr	r3, [sp, #4]
 8009092:	f103 0901 	add.w	r9, r3, #1
 8009096:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800909a:	4413      	add	r3, r2
 800909c:	9305      	str	r3, [sp, #20]
 800909e:	f00a 0301 	and.w	r3, sl, #1
 80090a2:	46b8      	mov	r8, r7
 80090a4:	9304      	str	r3, [sp, #16]
 80090a6:	4607      	mov	r7, r0
 80090a8:	4631      	mov	r1, r6
 80090aa:	ee18 0a10 	vmov	r0, s16
 80090ae:	f7ff fa75 	bl	800859c <quorem>
 80090b2:	4641      	mov	r1, r8
 80090b4:	9002      	str	r0, [sp, #8]
 80090b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80090ba:	ee18 0a10 	vmov	r0, s16
 80090be:	f000 fda9 	bl	8009c14 <__mcmp>
 80090c2:	463a      	mov	r2, r7
 80090c4:	9003      	str	r0, [sp, #12]
 80090c6:	4631      	mov	r1, r6
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fdbf 	bl	8009c4c <__mdiff>
 80090ce:	68c2      	ldr	r2, [r0, #12]
 80090d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80090d4:	4605      	mov	r5, r0
 80090d6:	bb02      	cbnz	r2, 800911a <_dtoa_r+0xa62>
 80090d8:	4601      	mov	r1, r0
 80090da:	ee18 0a10 	vmov	r0, s16
 80090de:	f000 fd99 	bl	8009c14 <__mcmp>
 80090e2:	4602      	mov	r2, r0
 80090e4:	4629      	mov	r1, r5
 80090e6:	4620      	mov	r0, r4
 80090e8:	9207      	str	r2, [sp, #28]
 80090ea:	f000 fb51 	bl	8009790 <_Bfree>
 80090ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80090f2:	ea43 0102 	orr.w	r1, r3, r2
 80090f6:	9b04      	ldr	r3, [sp, #16]
 80090f8:	430b      	orrs	r3, r1
 80090fa:	464d      	mov	r5, r9
 80090fc:	d10f      	bne.n	800911e <_dtoa_r+0xa66>
 80090fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009102:	d02a      	beq.n	800915a <_dtoa_r+0xaa2>
 8009104:	9b03      	ldr	r3, [sp, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	dd02      	ble.n	8009110 <_dtoa_r+0xa58>
 800910a:	9b02      	ldr	r3, [sp, #8]
 800910c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009110:	f88b a000 	strb.w	sl, [fp]
 8009114:	e775      	b.n	8009002 <_dtoa_r+0x94a>
 8009116:	4638      	mov	r0, r7
 8009118:	e7ba      	b.n	8009090 <_dtoa_r+0x9d8>
 800911a:	2201      	movs	r2, #1
 800911c:	e7e2      	b.n	80090e4 <_dtoa_r+0xa2c>
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	db04      	blt.n	800912e <_dtoa_r+0xa76>
 8009124:	9906      	ldr	r1, [sp, #24]
 8009126:	430b      	orrs	r3, r1
 8009128:	9904      	ldr	r1, [sp, #16]
 800912a:	430b      	orrs	r3, r1
 800912c:	d122      	bne.n	8009174 <_dtoa_r+0xabc>
 800912e:	2a00      	cmp	r2, #0
 8009130:	ddee      	ble.n	8009110 <_dtoa_r+0xa58>
 8009132:	ee18 1a10 	vmov	r1, s16
 8009136:	2201      	movs	r2, #1
 8009138:	4620      	mov	r0, r4
 800913a:	f000 fcfb 	bl	8009b34 <__lshift>
 800913e:	4631      	mov	r1, r6
 8009140:	ee08 0a10 	vmov	s16, r0
 8009144:	f000 fd66 	bl	8009c14 <__mcmp>
 8009148:	2800      	cmp	r0, #0
 800914a:	dc03      	bgt.n	8009154 <_dtoa_r+0xa9c>
 800914c:	d1e0      	bne.n	8009110 <_dtoa_r+0xa58>
 800914e:	f01a 0f01 	tst.w	sl, #1
 8009152:	d0dd      	beq.n	8009110 <_dtoa_r+0xa58>
 8009154:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009158:	d1d7      	bne.n	800910a <_dtoa_r+0xa52>
 800915a:	2339      	movs	r3, #57	; 0x39
 800915c:	f88b 3000 	strb.w	r3, [fp]
 8009160:	462b      	mov	r3, r5
 8009162:	461d      	mov	r5, r3
 8009164:	3b01      	subs	r3, #1
 8009166:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800916a:	2a39      	cmp	r2, #57	; 0x39
 800916c:	d071      	beq.n	8009252 <_dtoa_r+0xb9a>
 800916e:	3201      	adds	r2, #1
 8009170:	701a      	strb	r2, [r3, #0]
 8009172:	e746      	b.n	8009002 <_dtoa_r+0x94a>
 8009174:	2a00      	cmp	r2, #0
 8009176:	dd07      	ble.n	8009188 <_dtoa_r+0xad0>
 8009178:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800917c:	d0ed      	beq.n	800915a <_dtoa_r+0xaa2>
 800917e:	f10a 0301 	add.w	r3, sl, #1
 8009182:	f88b 3000 	strb.w	r3, [fp]
 8009186:	e73c      	b.n	8009002 <_dtoa_r+0x94a>
 8009188:	9b05      	ldr	r3, [sp, #20]
 800918a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800918e:	4599      	cmp	r9, r3
 8009190:	d047      	beq.n	8009222 <_dtoa_r+0xb6a>
 8009192:	ee18 1a10 	vmov	r1, s16
 8009196:	2300      	movs	r3, #0
 8009198:	220a      	movs	r2, #10
 800919a:	4620      	mov	r0, r4
 800919c:	f000 fb1a 	bl	80097d4 <__multadd>
 80091a0:	45b8      	cmp	r8, r7
 80091a2:	ee08 0a10 	vmov	s16, r0
 80091a6:	f04f 0300 	mov.w	r3, #0
 80091aa:	f04f 020a 	mov.w	r2, #10
 80091ae:	4641      	mov	r1, r8
 80091b0:	4620      	mov	r0, r4
 80091b2:	d106      	bne.n	80091c2 <_dtoa_r+0xb0a>
 80091b4:	f000 fb0e 	bl	80097d4 <__multadd>
 80091b8:	4680      	mov	r8, r0
 80091ba:	4607      	mov	r7, r0
 80091bc:	f109 0901 	add.w	r9, r9, #1
 80091c0:	e772      	b.n	80090a8 <_dtoa_r+0x9f0>
 80091c2:	f000 fb07 	bl	80097d4 <__multadd>
 80091c6:	4639      	mov	r1, r7
 80091c8:	4680      	mov	r8, r0
 80091ca:	2300      	movs	r3, #0
 80091cc:	220a      	movs	r2, #10
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 fb00 	bl	80097d4 <__multadd>
 80091d4:	4607      	mov	r7, r0
 80091d6:	e7f1      	b.n	80091bc <_dtoa_r+0xb04>
 80091d8:	9b03      	ldr	r3, [sp, #12]
 80091da:	9302      	str	r3, [sp, #8]
 80091dc:	9d01      	ldr	r5, [sp, #4]
 80091de:	ee18 0a10 	vmov	r0, s16
 80091e2:	4631      	mov	r1, r6
 80091e4:	f7ff f9da 	bl	800859c <quorem>
 80091e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	f805 ab01 	strb.w	sl, [r5], #1
 80091f2:	1aea      	subs	r2, r5, r3
 80091f4:	9b02      	ldr	r3, [sp, #8]
 80091f6:	4293      	cmp	r3, r2
 80091f8:	dd09      	ble.n	800920e <_dtoa_r+0xb56>
 80091fa:	ee18 1a10 	vmov	r1, s16
 80091fe:	2300      	movs	r3, #0
 8009200:	220a      	movs	r2, #10
 8009202:	4620      	mov	r0, r4
 8009204:	f000 fae6 	bl	80097d4 <__multadd>
 8009208:	ee08 0a10 	vmov	s16, r0
 800920c:	e7e7      	b.n	80091de <_dtoa_r+0xb26>
 800920e:	9b02      	ldr	r3, [sp, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	bfc8      	it	gt
 8009214:	461d      	movgt	r5, r3
 8009216:	9b01      	ldr	r3, [sp, #4]
 8009218:	bfd8      	it	le
 800921a:	2501      	movle	r5, #1
 800921c:	441d      	add	r5, r3
 800921e:	f04f 0800 	mov.w	r8, #0
 8009222:	ee18 1a10 	vmov	r1, s16
 8009226:	2201      	movs	r2, #1
 8009228:	4620      	mov	r0, r4
 800922a:	f000 fc83 	bl	8009b34 <__lshift>
 800922e:	4631      	mov	r1, r6
 8009230:	ee08 0a10 	vmov	s16, r0
 8009234:	f000 fcee 	bl	8009c14 <__mcmp>
 8009238:	2800      	cmp	r0, #0
 800923a:	dc91      	bgt.n	8009160 <_dtoa_r+0xaa8>
 800923c:	d102      	bne.n	8009244 <_dtoa_r+0xb8c>
 800923e:	f01a 0f01 	tst.w	sl, #1
 8009242:	d18d      	bne.n	8009160 <_dtoa_r+0xaa8>
 8009244:	462b      	mov	r3, r5
 8009246:	461d      	mov	r5, r3
 8009248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800924c:	2a30      	cmp	r2, #48	; 0x30
 800924e:	d0fa      	beq.n	8009246 <_dtoa_r+0xb8e>
 8009250:	e6d7      	b.n	8009002 <_dtoa_r+0x94a>
 8009252:	9a01      	ldr	r2, [sp, #4]
 8009254:	429a      	cmp	r2, r3
 8009256:	d184      	bne.n	8009162 <_dtoa_r+0xaaa>
 8009258:	9b00      	ldr	r3, [sp, #0]
 800925a:	3301      	adds	r3, #1
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	2331      	movs	r3, #49	; 0x31
 8009260:	7013      	strb	r3, [r2, #0]
 8009262:	e6ce      	b.n	8009002 <_dtoa_r+0x94a>
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <_dtoa_r+0xbd4>)
 8009266:	f7ff ba95 	b.w	8008794 <_dtoa_r+0xdc>
 800926a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800926c:	2b00      	cmp	r3, #0
 800926e:	f47f aa6e 	bne.w	800874e <_dtoa_r+0x96>
 8009272:	4b07      	ldr	r3, [pc, #28]	; (8009290 <_dtoa_r+0xbd8>)
 8009274:	f7ff ba8e 	b.w	8008794 <_dtoa_r+0xdc>
 8009278:	9b02      	ldr	r3, [sp, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	dcae      	bgt.n	80091dc <_dtoa_r+0xb24>
 800927e:	9b06      	ldr	r3, [sp, #24]
 8009280:	2b02      	cmp	r3, #2
 8009282:	f73f aea8 	bgt.w	8008fd6 <_dtoa_r+0x91e>
 8009286:	e7a9      	b.n	80091dc <_dtoa_r+0xb24>
 8009288:	0800a5a3 	.word	0x0800a5a3
 800928c:	0800a500 	.word	0x0800a500
 8009290:	0800a524 	.word	0x0800a524

08009294 <__sflush_r>:
 8009294:	898a      	ldrh	r2, [r1, #12]
 8009296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929a:	4605      	mov	r5, r0
 800929c:	0710      	lsls	r0, r2, #28
 800929e:	460c      	mov	r4, r1
 80092a0:	d458      	bmi.n	8009354 <__sflush_r+0xc0>
 80092a2:	684b      	ldr	r3, [r1, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dc05      	bgt.n	80092b4 <__sflush_r+0x20>
 80092a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dc02      	bgt.n	80092b4 <__sflush_r+0x20>
 80092ae:	2000      	movs	r0, #0
 80092b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	d0f9      	beq.n	80092ae <__sflush_r+0x1a>
 80092ba:	2300      	movs	r3, #0
 80092bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092c0:	682f      	ldr	r7, [r5, #0]
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	d032      	beq.n	800932c <__sflush_r+0x98>
 80092c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	075a      	lsls	r2, r3, #29
 80092cc:	d505      	bpl.n	80092da <__sflush_r+0x46>
 80092ce:	6863      	ldr	r3, [r4, #4]
 80092d0:	1ac0      	subs	r0, r0, r3
 80092d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092d4:	b10b      	cbz	r3, 80092da <__sflush_r+0x46>
 80092d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092d8:	1ac0      	subs	r0, r0, r3
 80092da:	2300      	movs	r3, #0
 80092dc:	4602      	mov	r2, r0
 80092de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092e0:	6a21      	ldr	r1, [r4, #32]
 80092e2:	4628      	mov	r0, r5
 80092e4:	47b0      	blx	r6
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	d106      	bne.n	80092fa <__sflush_r+0x66>
 80092ec:	6829      	ldr	r1, [r5, #0]
 80092ee:	291d      	cmp	r1, #29
 80092f0:	d82c      	bhi.n	800934c <__sflush_r+0xb8>
 80092f2:	4a2a      	ldr	r2, [pc, #168]	; (800939c <__sflush_r+0x108>)
 80092f4:	40ca      	lsrs	r2, r1
 80092f6:	07d6      	lsls	r6, r2, #31
 80092f8:	d528      	bpl.n	800934c <__sflush_r+0xb8>
 80092fa:	2200      	movs	r2, #0
 80092fc:	6062      	str	r2, [r4, #4]
 80092fe:	04d9      	lsls	r1, r3, #19
 8009300:	6922      	ldr	r2, [r4, #16]
 8009302:	6022      	str	r2, [r4, #0]
 8009304:	d504      	bpl.n	8009310 <__sflush_r+0x7c>
 8009306:	1c42      	adds	r2, r0, #1
 8009308:	d101      	bne.n	800930e <__sflush_r+0x7a>
 800930a:	682b      	ldr	r3, [r5, #0]
 800930c:	b903      	cbnz	r3, 8009310 <__sflush_r+0x7c>
 800930e:	6560      	str	r0, [r4, #84]	; 0x54
 8009310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009312:	602f      	str	r7, [r5, #0]
 8009314:	2900      	cmp	r1, #0
 8009316:	d0ca      	beq.n	80092ae <__sflush_r+0x1a>
 8009318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800931c:	4299      	cmp	r1, r3
 800931e:	d002      	beq.n	8009326 <__sflush_r+0x92>
 8009320:	4628      	mov	r0, r5
 8009322:	f7fe fa93 	bl	800784c <_free_r>
 8009326:	2000      	movs	r0, #0
 8009328:	6360      	str	r0, [r4, #52]	; 0x34
 800932a:	e7c1      	b.n	80092b0 <__sflush_r+0x1c>
 800932c:	6a21      	ldr	r1, [r4, #32]
 800932e:	2301      	movs	r3, #1
 8009330:	4628      	mov	r0, r5
 8009332:	47b0      	blx	r6
 8009334:	1c41      	adds	r1, r0, #1
 8009336:	d1c7      	bne.n	80092c8 <__sflush_r+0x34>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0c4      	beq.n	80092c8 <__sflush_r+0x34>
 800933e:	2b1d      	cmp	r3, #29
 8009340:	d001      	beq.n	8009346 <__sflush_r+0xb2>
 8009342:	2b16      	cmp	r3, #22
 8009344:	d101      	bne.n	800934a <__sflush_r+0xb6>
 8009346:	602f      	str	r7, [r5, #0]
 8009348:	e7b1      	b.n	80092ae <__sflush_r+0x1a>
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	e7ad      	b.n	80092b0 <__sflush_r+0x1c>
 8009354:	690f      	ldr	r7, [r1, #16]
 8009356:	2f00      	cmp	r7, #0
 8009358:	d0a9      	beq.n	80092ae <__sflush_r+0x1a>
 800935a:	0793      	lsls	r3, r2, #30
 800935c:	680e      	ldr	r6, [r1, #0]
 800935e:	bf08      	it	eq
 8009360:	694b      	ldreq	r3, [r1, #20]
 8009362:	600f      	str	r7, [r1, #0]
 8009364:	bf18      	it	ne
 8009366:	2300      	movne	r3, #0
 8009368:	eba6 0807 	sub.w	r8, r6, r7
 800936c:	608b      	str	r3, [r1, #8]
 800936e:	f1b8 0f00 	cmp.w	r8, #0
 8009372:	dd9c      	ble.n	80092ae <__sflush_r+0x1a>
 8009374:	6a21      	ldr	r1, [r4, #32]
 8009376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009378:	4643      	mov	r3, r8
 800937a:	463a      	mov	r2, r7
 800937c:	4628      	mov	r0, r5
 800937e:	47b0      	blx	r6
 8009380:	2800      	cmp	r0, #0
 8009382:	dc06      	bgt.n	8009392 <__sflush_r+0xfe>
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	e78e      	b.n	80092b0 <__sflush_r+0x1c>
 8009392:	4407      	add	r7, r0
 8009394:	eba8 0800 	sub.w	r8, r8, r0
 8009398:	e7e9      	b.n	800936e <__sflush_r+0xda>
 800939a:	bf00      	nop
 800939c:	20400001 	.word	0x20400001

080093a0 <_fflush_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	690b      	ldr	r3, [r1, #16]
 80093a4:	4605      	mov	r5, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	b913      	cbnz	r3, 80093b0 <_fflush_r+0x10>
 80093aa:	2500      	movs	r5, #0
 80093ac:	4628      	mov	r0, r5
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	b118      	cbz	r0, 80093ba <_fflush_r+0x1a>
 80093b2:	6983      	ldr	r3, [r0, #24]
 80093b4:	b90b      	cbnz	r3, 80093ba <_fflush_r+0x1a>
 80093b6:	f000 f887 	bl	80094c8 <__sinit>
 80093ba:	4b14      	ldr	r3, [pc, #80]	; (800940c <_fflush_r+0x6c>)
 80093bc:	429c      	cmp	r4, r3
 80093be:	d11b      	bne.n	80093f8 <_fflush_r+0x58>
 80093c0:	686c      	ldr	r4, [r5, #4]
 80093c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0ef      	beq.n	80093aa <_fflush_r+0xa>
 80093ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093cc:	07d0      	lsls	r0, r2, #31
 80093ce:	d404      	bmi.n	80093da <_fflush_r+0x3a>
 80093d0:	0599      	lsls	r1, r3, #22
 80093d2:	d402      	bmi.n	80093da <_fflush_r+0x3a>
 80093d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093d6:	f000 f91a 	bl	800960e <__retarget_lock_acquire_recursive>
 80093da:	4628      	mov	r0, r5
 80093dc:	4621      	mov	r1, r4
 80093de:	f7ff ff59 	bl	8009294 <__sflush_r>
 80093e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093e4:	07da      	lsls	r2, r3, #31
 80093e6:	4605      	mov	r5, r0
 80093e8:	d4e0      	bmi.n	80093ac <_fflush_r+0xc>
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	059b      	lsls	r3, r3, #22
 80093ee:	d4dd      	bmi.n	80093ac <_fflush_r+0xc>
 80093f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093f2:	f000 f90d 	bl	8009610 <__retarget_lock_release_recursive>
 80093f6:	e7d9      	b.n	80093ac <_fflush_r+0xc>
 80093f8:	4b05      	ldr	r3, [pc, #20]	; (8009410 <_fflush_r+0x70>)
 80093fa:	429c      	cmp	r4, r3
 80093fc:	d101      	bne.n	8009402 <_fflush_r+0x62>
 80093fe:	68ac      	ldr	r4, [r5, #8]
 8009400:	e7df      	b.n	80093c2 <_fflush_r+0x22>
 8009402:	4b04      	ldr	r3, [pc, #16]	; (8009414 <_fflush_r+0x74>)
 8009404:	429c      	cmp	r4, r3
 8009406:	bf08      	it	eq
 8009408:	68ec      	ldreq	r4, [r5, #12]
 800940a:	e7da      	b.n	80093c2 <_fflush_r+0x22>
 800940c:	0800a5d4 	.word	0x0800a5d4
 8009410:	0800a5f4 	.word	0x0800a5f4
 8009414:	0800a5b4 	.word	0x0800a5b4

08009418 <std>:
 8009418:	2300      	movs	r3, #0
 800941a:	b510      	push	{r4, lr}
 800941c:	4604      	mov	r4, r0
 800941e:	e9c0 3300 	strd	r3, r3, [r0]
 8009422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009426:	6083      	str	r3, [r0, #8]
 8009428:	8181      	strh	r1, [r0, #12]
 800942a:	6643      	str	r3, [r0, #100]	; 0x64
 800942c:	81c2      	strh	r2, [r0, #14]
 800942e:	6183      	str	r3, [r0, #24]
 8009430:	4619      	mov	r1, r3
 8009432:	2208      	movs	r2, #8
 8009434:	305c      	adds	r0, #92	; 0x5c
 8009436:	f7fe fa01 	bl	800783c <memset>
 800943a:	4b05      	ldr	r3, [pc, #20]	; (8009450 <std+0x38>)
 800943c:	6263      	str	r3, [r4, #36]	; 0x24
 800943e:	4b05      	ldr	r3, [pc, #20]	; (8009454 <std+0x3c>)
 8009440:	62a3      	str	r3, [r4, #40]	; 0x28
 8009442:	4b05      	ldr	r3, [pc, #20]	; (8009458 <std+0x40>)
 8009444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <std+0x44>)
 8009448:	6224      	str	r4, [r4, #32]
 800944a:	6323      	str	r3, [r4, #48]	; 0x30
 800944c:	bd10      	pop	{r4, pc}
 800944e:	bf00      	nop
 8009450:	0800a0f9 	.word	0x0800a0f9
 8009454:	0800a11b 	.word	0x0800a11b
 8009458:	0800a153 	.word	0x0800a153
 800945c:	0800a177 	.word	0x0800a177

08009460 <_cleanup_r>:
 8009460:	4901      	ldr	r1, [pc, #4]	; (8009468 <_cleanup_r+0x8>)
 8009462:	f000 b8af 	b.w	80095c4 <_fwalk_reent>
 8009466:	bf00      	nop
 8009468:	080093a1 	.word	0x080093a1

0800946c <__sfmoreglue>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	2268      	movs	r2, #104	; 0x68
 8009470:	1e4d      	subs	r5, r1, #1
 8009472:	4355      	muls	r5, r2
 8009474:	460e      	mov	r6, r1
 8009476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800947a:	f7fe fa53 	bl	8007924 <_malloc_r>
 800947e:	4604      	mov	r4, r0
 8009480:	b140      	cbz	r0, 8009494 <__sfmoreglue+0x28>
 8009482:	2100      	movs	r1, #0
 8009484:	e9c0 1600 	strd	r1, r6, [r0]
 8009488:	300c      	adds	r0, #12
 800948a:	60a0      	str	r0, [r4, #8]
 800948c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009490:	f7fe f9d4 	bl	800783c <memset>
 8009494:	4620      	mov	r0, r4
 8009496:	bd70      	pop	{r4, r5, r6, pc}

08009498 <__sfp_lock_acquire>:
 8009498:	4801      	ldr	r0, [pc, #4]	; (80094a0 <__sfp_lock_acquire+0x8>)
 800949a:	f000 b8b8 	b.w	800960e <__retarget_lock_acquire_recursive>
 800949e:	bf00      	nop
 80094a0:	20002f69 	.word	0x20002f69

080094a4 <__sfp_lock_release>:
 80094a4:	4801      	ldr	r0, [pc, #4]	; (80094ac <__sfp_lock_release+0x8>)
 80094a6:	f000 b8b3 	b.w	8009610 <__retarget_lock_release_recursive>
 80094aa:	bf00      	nop
 80094ac:	20002f69 	.word	0x20002f69

080094b0 <__sinit_lock_acquire>:
 80094b0:	4801      	ldr	r0, [pc, #4]	; (80094b8 <__sinit_lock_acquire+0x8>)
 80094b2:	f000 b8ac 	b.w	800960e <__retarget_lock_acquire_recursive>
 80094b6:	bf00      	nop
 80094b8:	20002f6a 	.word	0x20002f6a

080094bc <__sinit_lock_release>:
 80094bc:	4801      	ldr	r0, [pc, #4]	; (80094c4 <__sinit_lock_release+0x8>)
 80094be:	f000 b8a7 	b.w	8009610 <__retarget_lock_release_recursive>
 80094c2:	bf00      	nop
 80094c4:	20002f6a 	.word	0x20002f6a

080094c8 <__sinit>:
 80094c8:	b510      	push	{r4, lr}
 80094ca:	4604      	mov	r4, r0
 80094cc:	f7ff fff0 	bl	80094b0 <__sinit_lock_acquire>
 80094d0:	69a3      	ldr	r3, [r4, #24]
 80094d2:	b11b      	cbz	r3, 80094dc <__sinit+0x14>
 80094d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094d8:	f7ff bff0 	b.w	80094bc <__sinit_lock_release>
 80094dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094e0:	6523      	str	r3, [r4, #80]	; 0x50
 80094e2:	4b13      	ldr	r3, [pc, #76]	; (8009530 <__sinit+0x68>)
 80094e4:	4a13      	ldr	r2, [pc, #76]	; (8009534 <__sinit+0x6c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80094ea:	42a3      	cmp	r3, r4
 80094ec:	bf04      	itt	eq
 80094ee:	2301      	moveq	r3, #1
 80094f0:	61a3      	streq	r3, [r4, #24]
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 f820 	bl	8009538 <__sfp>
 80094f8:	6060      	str	r0, [r4, #4]
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 f81c 	bl	8009538 <__sfp>
 8009500:	60a0      	str	r0, [r4, #8]
 8009502:	4620      	mov	r0, r4
 8009504:	f000 f818 	bl	8009538 <__sfp>
 8009508:	2200      	movs	r2, #0
 800950a:	60e0      	str	r0, [r4, #12]
 800950c:	2104      	movs	r1, #4
 800950e:	6860      	ldr	r0, [r4, #4]
 8009510:	f7ff ff82 	bl	8009418 <std>
 8009514:	68a0      	ldr	r0, [r4, #8]
 8009516:	2201      	movs	r2, #1
 8009518:	2109      	movs	r1, #9
 800951a:	f7ff ff7d 	bl	8009418 <std>
 800951e:	68e0      	ldr	r0, [r4, #12]
 8009520:	2202      	movs	r2, #2
 8009522:	2112      	movs	r1, #18
 8009524:	f7ff ff78 	bl	8009418 <std>
 8009528:	2301      	movs	r3, #1
 800952a:	61a3      	str	r3, [r4, #24]
 800952c:	e7d2      	b.n	80094d4 <__sinit+0xc>
 800952e:	bf00      	nop
 8009530:	0800a4ec 	.word	0x0800a4ec
 8009534:	08009461 	.word	0x08009461

08009538 <__sfp>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	4607      	mov	r7, r0
 800953c:	f7ff ffac 	bl	8009498 <__sfp_lock_acquire>
 8009540:	4b1e      	ldr	r3, [pc, #120]	; (80095bc <__sfp+0x84>)
 8009542:	681e      	ldr	r6, [r3, #0]
 8009544:	69b3      	ldr	r3, [r6, #24]
 8009546:	b913      	cbnz	r3, 800954e <__sfp+0x16>
 8009548:	4630      	mov	r0, r6
 800954a:	f7ff ffbd 	bl	80094c8 <__sinit>
 800954e:	3648      	adds	r6, #72	; 0x48
 8009550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009554:	3b01      	subs	r3, #1
 8009556:	d503      	bpl.n	8009560 <__sfp+0x28>
 8009558:	6833      	ldr	r3, [r6, #0]
 800955a:	b30b      	cbz	r3, 80095a0 <__sfp+0x68>
 800955c:	6836      	ldr	r6, [r6, #0]
 800955e:	e7f7      	b.n	8009550 <__sfp+0x18>
 8009560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009564:	b9d5      	cbnz	r5, 800959c <__sfp+0x64>
 8009566:	4b16      	ldr	r3, [pc, #88]	; (80095c0 <__sfp+0x88>)
 8009568:	60e3      	str	r3, [r4, #12]
 800956a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800956e:	6665      	str	r5, [r4, #100]	; 0x64
 8009570:	f000 f84c 	bl	800960c <__retarget_lock_init_recursive>
 8009574:	f7ff ff96 	bl	80094a4 <__sfp_lock_release>
 8009578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800957c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009580:	6025      	str	r5, [r4, #0]
 8009582:	61a5      	str	r5, [r4, #24]
 8009584:	2208      	movs	r2, #8
 8009586:	4629      	mov	r1, r5
 8009588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800958c:	f7fe f956 	bl	800783c <memset>
 8009590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009598:	4620      	mov	r0, r4
 800959a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800959c:	3468      	adds	r4, #104	; 0x68
 800959e:	e7d9      	b.n	8009554 <__sfp+0x1c>
 80095a0:	2104      	movs	r1, #4
 80095a2:	4638      	mov	r0, r7
 80095a4:	f7ff ff62 	bl	800946c <__sfmoreglue>
 80095a8:	4604      	mov	r4, r0
 80095aa:	6030      	str	r0, [r6, #0]
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d1d5      	bne.n	800955c <__sfp+0x24>
 80095b0:	f7ff ff78 	bl	80094a4 <__sfp_lock_release>
 80095b4:	230c      	movs	r3, #12
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	e7ee      	b.n	8009598 <__sfp+0x60>
 80095ba:	bf00      	nop
 80095bc:	0800a4ec 	.word	0x0800a4ec
 80095c0:	ffff0001 	.word	0xffff0001

080095c4 <_fwalk_reent>:
 80095c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c8:	4606      	mov	r6, r0
 80095ca:	4688      	mov	r8, r1
 80095cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095d0:	2700      	movs	r7, #0
 80095d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095d6:	f1b9 0901 	subs.w	r9, r9, #1
 80095da:	d505      	bpl.n	80095e8 <_fwalk_reent+0x24>
 80095dc:	6824      	ldr	r4, [r4, #0]
 80095de:	2c00      	cmp	r4, #0
 80095e0:	d1f7      	bne.n	80095d2 <_fwalk_reent+0xe>
 80095e2:	4638      	mov	r0, r7
 80095e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e8:	89ab      	ldrh	r3, [r5, #12]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d907      	bls.n	80095fe <_fwalk_reent+0x3a>
 80095ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095f2:	3301      	adds	r3, #1
 80095f4:	d003      	beq.n	80095fe <_fwalk_reent+0x3a>
 80095f6:	4629      	mov	r1, r5
 80095f8:	4630      	mov	r0, r6
 80095fa:	47c0      	blx	r8
 80095fc:	4307      	orrs	r7, r0
 80095fe:	3568      	adds	r5, #104	; 0x68
 8009600:	e7e9      	b.n	80095d6 <_fwalk_reent+0x12>
	...

08009604 <_localeconv_r>:
 8009604:	4800      	ldr	r0, [pc, #0]	; (8009608 <_localeconv_r+0x4>)
 8009606:	4770      	bx	lr
 8009608:	2000017c 	.word	0x2000017c

0800960c <__retarget_lock_init_recursive>:
 800960c:	4770      	bx	lr

0800960e <__retarget_lock_acquire_recursive>:
 800960e:	4770      	bx	lr

08009610 <__retarget_lock_release_recursive>:
 8009610:	4770      	bx	lr

08009612 <__swhatbuf_r>:
 8009612:	b570      	push	{r4, r5, r6, lr}
 8009614:	460e      	mov	r6, r1
 8009616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800961a:	2900      	cmp	r1, #0
 800961c:	b096      	sub	sp, #88	; 0x58
 800961e:	4614      	mov	r4, r2
 8009620:	461d      	mov	r5, r3
 8009622:	da08      	bge.n	8009636 <__swhatbuf_r+0x24>
 8009624:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	602a      	str	r2, [r5, #0]
 800962c:	061a      	lsls	r2, r3, #24
 800962e:	d410      	bmi.n	8009652 <__swhatbuf_r+0x40>
 8009630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009634:	e00e      	b.n	8009654 <__swhatbuf_r+0x42>
 8009636:	466a      	mov	r2, sp
 8009638:	f000 fdf4 	bl	800a224 <_fstat_r>
 800963c:	2800      	cmp	r0, #0
 800963e:	dbf1      	blt.n	8009624 <__swhatbuf_r+0x12>
 8009640:	9a01      	ldr	r2, [sp, #4]
 8009642:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009646:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800964a:	425a      	negs	r2, r3
 800964c:	415a      	adcs	r2, r3
 800964e:	602a      	str	r2, [r5, #0]
 8009650:	e7ee      	b.n	8009630 <__swhatbuf_r+0x1e>
 8009652:	2340      	movs	r3, #64	; 0x40
 8009654:	2000      	movs	r0, #0
 8009656:	6023      	str	r3, [r4, #0]
 8009658:	b016      	add	sp, #88	; 0x58
 800965a:	bd70      	pop	{r4, r5, r6, pc}

0800965c <__smakebuf_r>:
 800965c:	898b      	ldrh	r3, [r1, #12]
 800965e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009660:	079d      	lsls	r5, r3, #30
 8009662:	4606      	mov	r6, r0
 8009664:	460c      	mov	r4, r1
 8009666:	d507      	bpl.n	8009678 <__smakebuf_r+0x1c>
 8009668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	6123      	str	r3, [r4, #16]
 8009670:	2301      	movs	r3, #1
 8009672:	6163      	str	r3, [r4, #20]
 8009674:	b002      	add	sp, #8
 8009676:	bd70      	pop	{r4, r5, r6, pc}
 8009678:	ab01      	add	r3, sp, #4
 800967a:	466a      	mov	r2, sp
 800967c:	f7ff ffc9 	bl	8009612 <__swhatbuf_r>
 8009680:	9900      	ldr	r1, [sp, #0]
 8009682:	4605      	mov	r5, r0
 8009684:	4630      	mov	r0, r6
 8009686:	f7fe f94d 	bl	8007924 <_malloc_r>
 800968a:	b948      	cbnz	r0, 80096a0 <__smakebuf_r+0x44>
 800968c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009690:	059a      	lsls	r2, r3, #22
 8009692:	d4ef      	bmi.n	8009674 <__smakebuf_r+0x18>
 8009694:	f023 0303 	bic.w	r3, r3, #3
 8009698:	f043 0302 	orr.w	r3, r3, #2
 800969c:	81a3      	strh	r3, [r4, #12]
 800969e:	e7e3      	b.n	8009668 <__smakebuf_r+0xc>
 80096a0:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <__smakebuf_r+0x7c>)
 80096a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	6020      	str	r0, [r4, #0]
 80096a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ac:	81a3      	strh	r3, [r4, #12]
 80096ae:	9b00      	ldr	r3, [sp, #0]
 80096b0:	6163      	str	r3, [r4, #20]
 80096b2:	9b01      	ldr	r3, [sp, #4]
 80096b4:	6120      	str	r0, [r4, #16]
 80096b6:	b15b      	cbz	r3, 80096d0 <__smakebuf_r+0x74>
 80096b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096bc:	4630      	mov	r0, r6
 80096be:	f000 fdc3 	bl	800a248 <_isatty_r>
 80096c2:	b128      	cbz	r0, 80096d0 <__smakebuf_r+0x74>
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	f023 0303 	bic.w	r3, r3, #3
 80096ca:	f043 0301 	orr.w	r3, r3, #1
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	89a0      	ldrh	r0, [r4, #12]
 80096d2:	4305      	orrs	r5, r0
 80096d4:	81a5      	strh	r5, [r4, #12]
 80096d6:	e7cd      	b.n	8009674 <__smakebuf_r+0x18>
 80096d8:	08009461 	.word	0x08009461

080096dc <memcpy>:
 80096dc:	440a      	add	r2, r1
 80096de:	4291      	cmp	r1, r2
 80096e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80096e4:	d100      	bne.n	80096e8 <memcpy+0xc>
 80096e6:	4770      	bx	lr
 80096e8:	b510      	push	{r4, lr}
 80096ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096f2:	4291      	cmp	r1, r2
 80096f4:	d1f9      	bne.n	80096ea <memcpy+0xe>
 80096f6:	bd10      	pop	{r4, pc}

080096f8 <__malloc_lock>:
 80096f8:	4801      	ldr	r0, [pc, #4]	; (8009700 <__malloc_lock+0x8>)
 80096fa:	f7ff bf88 	b.w	800960e <__retarget_lock_acquire_recursive>
 80096fe:	bf00      	nop
 8009700:	20002f68 	.word	0x20002f68

08009704 <__malloc_unlock>:
 8009704:	4801      	ldr	r0, [pc, #4]	; (800970c <__malloc_unlock+0x8>)
 8009706:	f7ff bf83 	b.w	8009610 <__retarget_lock_release_recursive>
 800970a:	bf00      	nop
 800970c:	20002f68 	.word	0x20002f68

08009710 <_Balloc>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009714:	4604      	mov	r4, r0
 8009716:	460d      	mov	r5, r1
 8009718:	b976      	cbnz	r6, 8009738 <_Balloc+0x28>
 800971a:	2010      	movs	r0, #16
 800971c:	f7fe f87e 	bl	800781c <malloc>
 8009720:	4602      	mov	r2, r0
 8009722:	6260      	str	r0, [r4, #36]	; 0x24
 8009724:	b920      	cbnz	r0, 8009730 <_Balloc+0x20>
 8009726:	4b18      	ldr	r3, [pc, #96]	; (8009788 <_Balloc+0x78>)
 8009728:	4818      	ldr	r0, [pc, #96]	; (800978c <_Balloc+0x7c>)
 800972a:	2166      	movs	r1, #102	; 0x66
 800972c:	f000 fd3a 	bl	800a1a4 <__assert_func>
 8009730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009734:	6006      	str	r6, [r0, #0]
 8009736:	60c6      	str	r6, [r0, #12]
 8009738:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800973a:	68f3      	ldr	r3, [r6, #12]
 800973c:	b183      	cbz	r3, 8009760 <_Balloc+0x50>
 800973e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009746:	b9b8      	cbnz	r0, 8009778 <_Balloc+0x68>
 8009748:	2101      	movs	r1, #1
 800974a:	fa01 f605 	lsl.w	r6, r1, r5
 800974e:	1d72      	adds	r2, r6, #5
 8009750:	0092      	lsls	r2, r2, #2
 8009752:	4620      	mov	r0, r4
 8009754:	f000 fb60 	bl	8009e18 <_calloc_r>
 8009758:	b160      	cbz	r0, 8009774 <_Balloc+0x64>
 800975a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800975e:	e00e      	b.n	800977e <_Balloc+0x6e>
 8009760:	2221      	movs	r2, #33	; 0x21
 8009762:	2104      	movs	r1, #4
 8009764:	4620      	mov	r0, r4
 8009766:	f000 fb57 	bl	8009e18 <_calloc_r>
 800976a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800976c:	60f0      	str	r0, [r6, #12]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e4      	bne.n	800973e <_Balloc+0x2e>
 8009774:	2000      	movs	r0, #0
 8009776:	bd70      	pop	{r4, r5, r6, pc}
 8009778:	6802      	ldr	r2, [r0, #0]
 800977a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800977e:	2300      	movs	r3, #0
 8009780:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009784:	e7f7      	b.n	8009776 <_Balloc+0x66>
 8009786:	bf00      	nop
 8009788:	0800a531 	.word	0x0800a531
 800978c:	0800a614 	.word	0x0800a614

08009790 <_Bfree>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009794:	4605      	mov	r5, r0
 8009796:	460c      	mov	r4, r1
 8009798:	b976      	cbnz	r6, 80097b8 <_Bfree+0x28>
 800979a:	2010      	movs	r0, #16
 800979c:	f7fe f83e 	bl	800781c <malloc>
 80097a0:	4602      	mov	r2, r0
 80097a2:	6268      	str	r0, [r5, #36]	; 0x24
 80097a4:	b920      	cbnz	r0, 80097b0 <_Bfree+0x20>
 80097a6:	4b09      	ldr	r3, [pc, #36]	; (80097cc <_Bfree+0x3c>)
 80097a8:	4809      	ldr	r0, [pc, #36]	; (80097d0 <_Bfree+0x40>)
 80097aa:	218a      	movs	r1, #138	; 0x8a
 80097ac:	f000 fcfa 	bl	800a1a4 <__assert_func>
 80097b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097b4:	6006      	str	r6, [r0, #0]
 80097b6:	60c6      	str	r6, [r0, #12]
 80097b8:	b13c      	cbz	r4, 80097ca <_Bfree+0x3a>
 80097ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097bc:	6862      	ldr	r2, [r4, #4]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097c4:	6021      	str	r1, [r4, #0]
 80097c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	0800a531 	.word	0x0800a531
 80097d0:	0800a614 	.word	0x0800a614

080097d4 <__multadd>:
 80097d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d8:	690d      	ldr	r5, [r1, #16]
 80097da:	4607      	mov	r7, r0
 80097dc:	460c      	mov	r4, r1
 80097de:	461e      	mov	r6, r3
 80097e0:	f101 0c14 	add.w	ip, r1, #20
 80097e4:	2000      	movs	r0, #0
 80097e6:	f8dc 3000 	ldr.w	r3, [ip]
 80097ea:	b299      	uxth	r1, r3
 80097ec:	fb02 6101 	mla	r1, r2, r1, r6
 80097f0:	0c1e      	lsrs	r6, r3, #16
 80097f2:	0c0b      	lsrs	r3, r1, #16
 80097f4:	fb02 3306 	mla	r3, r2, r6, r3
 80097f8:	b289      	uxth	r1, r1
 80097fa:	3001      	adds	r0, #1
 80097fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009800:	4285      	cmp	r5, r0
 8009802:	f84c 1b04 	str.w	r1, [ip], #4
 8009806:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800980a:	dcec      	bgt.n	80097e6 <__multadd+0x12>
 800980c:	b30e      	cbz	r6, 8009852 <__multadd+0x7e>
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	42ab      	cmp	r3, r5
 8009812:	dc19      	bgt.n	8009848 <__multadd+0x74>
 8009814:	6861      	ldr	r1, [r4, #4]
 8009816:	4638      	mov	r0, r7
 8009818:	3101      	adds	r1, #1
 800981a:	f7ff ff79 	bl	8009710 <_Balloc>
 800981e:	4680      	mov	r8, r0
 8009820:	b928      	cbnz	r0, 800982e <__multadd+0x5a>
 8009822:	4602      	mov	r2, r0
 8009824:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <__multadd+0x84>)
 8009826:	480d      	ldr	r0, [pc, #52]	; (800985c <__multadd+0x88>)
 8009828:	21b5      	movs	r1, #181	; 0xb5
 800982a:	f000 fcbb 	bl	800a1a4 <__assert_func>
 800982e:	6922      	ldr	r2, [r4, #16]
 8009830:	3202      	adds	r2, #2
 8009832:	f104 010c 	add.w	r1, r4, #12
 8009836:	0092      	lsls	r2, r2, #2
 8009838:	300c      	adds	r0, #12
 800983a:	f7ff ff4f 	bl	80096dc <memcpy>
 800983e:	4621      	mov	r1, r4
 8009840:	4638      	mov	r0, r7
 8009842:	f7ff ffa5 	bl	8009790 <_Bfree>
 8009846:	4644      	mov	r4, r8
 8009848:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800984c:	3501      	adds	r5, #1
 800984e:	615e      	str	r6, [r3, #20]
 8009850:	6125      	str	r5, [r4, #16]
 8009852:	4620      	mov	r0, r4
 8009854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009858:	0800a5a3 	.word	0x0800a5a3
 800985c:	0800a614 	.word	0x0800a614

08009860 <__hi0bits>:
 8009860:	0c03      	lsrs	r3, r0, #16
 8009862:	041b      	lsls	r3, r3, #16
 8009864:	b9d3      	cbnz	r3, 800989c <__hi0bits+0x3c>
 8009866:	0400      	lsls	r0, r0, #16
 8009868:	2310      	movs	r3, #16
 800986a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800986e:	bf04      	itt	eq
 8009870:	0200      	lsleq	r0, r0, #8
 8009872:	3308      	addeq	r3, #8
 8009874:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009878:	bf04      	itt	eq
 800987a:	0100      	lsleq	r0, r0, #4
 800987c:	3304      	addeq	r3, #4
 800987e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009882:	bf04      	itt	eq
 8009884:	0080      	lsleq	r0, r0, #2
 8009886:	3302      	addeq	r3, #2
 8009888:	2800      	cmp	r0, #0
 800988a:	db05      	blt.n	8009898 <__hi0bits+0x38>
 800988c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009890:	f103 0301 	add.w	r3, r3, #1
 8009894:	bf08      	it	eq
 8009896:	2320      	moveq	r3, #32
 8009898:	4618      	mov	r0, r3
 800989a:	4770      	bx	lr
 800989c:	2300      	movs	r3, #0
 800989e:	e7e4      	b.n	800986a <__hi0bits+0xa>

080098a0 <__lo0bits>:
 80098a0:	6803      	ldr	r3, [r0, #0]
 80098a2:	f013 0207 	ands.w	r2, r3, #7
 80098a6:	4601      	mov	r1, r0
 80098a8:	d00b      	beq.n	80098c2 <__lo0bits+0x22>
 80098aa:	07da      	lsls	r2, r3, #31
 80098ac:	d423      	bmi.n	80098f6 <__lo0bits+0x56>
 80098ae:	0798      	lsls	r0, r3, #30
 80098b0:	bf49      	itett	mi
 80098b2:	085b      	lsrmi	r3, r3, #1
 80098b4:	089b      	lsrpl	r3, r3, #2
 80098b6:	2001      	movmi	r0, #1
 80098b8:	600b      	strmi	r3, [r1, #0]
 80098ba:	bf5c      	itt	pl
 80098bc:	600b      	strpl	r3, [r1, #0]
 80098be:	2002      	movpl	r0, #2
 80098c0:	4770      	bx	lr
 80098c2:	b298      	uxth	r0, r3
 80098c4:	b9a8      	cbnz	r0, 80098f2 <__lo0bits+0x52>
 80098c6:	0c1b      	lsrs	r3, r3, #16
 80098c8:	2010      	movs	r0, #16
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	b90a      	cbnz	r2, 80098d2 <__lo0bits+0x32>
 80098ce:	3008      	adds	r0, #8
 80098d0:	0a1b      	lsrs	r3, r3, #8
 80098d2:	071a      	lsls	r2, r3, #28
 80098d4:	bf04      	itt	eq
 80098d6:	091b      	lsreq	r3, r3, #4
 80098d8:	3004      	addeq	r0, #4
 80098da:	079a      	lsls	r2, r3, #30
 80098dc:	bf04      	itt	eq
 80098de:	089b      	lsreq	r3, r3, #2
 80098e0:	3002      	addeq	r0, #2
 80098e2:	07da      	lsls	r2, r3, #31
 80098e4:	d403      	bmi.n	80098ee <__lo0bits+0x4e>
 80098e6:	085b      	lsrs	r3, r3, #1
 80098e8:	f100 0001 	add.w	r0, r0, #1
 80098ec:	d005      	beq.n	80098fa <__lo0bits+0x5a>
 80098ee:	600b      	str	r3, [r1, #0]
 80098f0:	4770      	bx	lr
 80098f2:	4610      	mov	r0, r2
 80098f4:	e7e9      	b.n	80098ca <__lo0bits+0x2a>
 80098f6:	2000      	movs	r0, #0
 80098f8:	4770      	bx	lr
 80098fa:	2020      	movs	r0, #32
 80098fc:	4770      	bx	lr
	...

08009900 <__i2b>:
 8009900:	b510      	push	{r4, lr}
 8009902:	460c      	mov	r4, r1
 8009904:	2101      	movs	r1, #1
 8009906:	f7ff ff03 	bl	8009710 <_Balloc>
 800990a:	4602      	mov	r2, r0
 800990c:	b928      	cbnz	r0, 800991a <__i2b+0x1a>
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <__i2b+0x24>)
 8009910:	4805      	ldr	r0, [pc, #20]	; (8009928 <__i2b+0x28>)
 8009912:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009916:	f000 fc45 	bl	800a1a4 <__assert_func>
 800991a:	2301      	movs	r3, #1
 800991c:	6144      	str	r4, [r0, #20]
 800991e:	6103      	str	r3, [r0, #16]
 8009920:	bd10      	pop	{r4, pc}
 8009922:	bf00      	nop
 8009924:	0800a5a3 	.word	0x0800a5a3
 8009928:	0800a614 	.word	0x0800a614

0800992c <__multiply>:
 800992c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009930:	4691      	mov	r9, r2
 8009932:	690a      	ldr	r2, [r1, #16]
 8009934:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009938:	429a      	cmp	r2, r3
 800993a:	bfb8      	it	lt
 800993c:	460b      	movlt	r3, r1
 800993e:	460c      	mov	r4, r1
 8009940:	bfbc      	itt	lt
 8009942:	464c      	movlt	r4, r9
 8009944:	4699      	movlt	r9, r3
 8009946:	6927      	ldr	r7, [r4, #16]
 8009948:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800994c:	68a3      	ldr	r3, [r4, #8]
 800994e:	6861      	ldr	r1, [r4, #4]
 8009950:	eb07 060a 	add.w	r6, r7, sl
 8009954:	42b3      	cmp	r3, r6
 8009956:	b085      	sub	sp, #20
 8009958:	bfb8      	it	lt
 800995a:	3101      	addlt	r1, #1
 800995c:	f7ff fed8 	bl	8009710 <_Balloc>
 8009960:	b930      	cbnz	r0, 8009970 <__multiply+0x44>
 8009962:	4602      	mov	r2, r0
 8009964:	4b44      	ldr	r3, [pc, #272]	; (8009a78 <__multiply+0x14c>)
 8009966:	4845      	ldr	r0, [pc, #276]	; (8009a7c <__multiply+0x150>)
 8009968:	f240 115d 	movw	r1, #349	; 0x15d
 800996c:	f000 fc1a 	bl	800a1a4 <__assert_func>
 8009970:	f100 0514 	add.w	r5, r0, #20
 8009974:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009978:	462b      	mov	r3, r5
 800997a:	2200      	movs	r2, #0
 800997c:	4543      	cmp	r3, r8
 800997e:	d321      	bcc.n	80099c4 <__multiply+0x98>
 8009980:	f104 0314 	add.w	r3, r4, #20
 8009984:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009988:	f109 0314 	add.w	r3, r9, #20
 800998c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009990:	9202      	str	r2, [sp, #8]
 8009992:	1b3a      	subs	r2, r7, r4
 8009994:	3a15      	subs	r2, #21
 8009996:	f022 0203 	bic.w	r2, r2, #3
 800999a:	3204      	adds	r2, #4
 800999c:	f104 0115 	add.w	r1, r4, #21
 80099a0:	428f      	cmp	r7, r1
 80099a2:	bf38      	it	cc
 80099a4:	2204      	movcc	r2, #4
 80099a6:	9201      	str	r2, [sp, #4]
 80099a8:	9a02      	ldr	r2, [sp, #8]
 80099aa:	9303      	str	r3, [sp, #12]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d80c      	bhi.n	80099ca <__multiply+0x9e>
 80099b0:	2e00      	cmp	r6, #0
 80099b2:	dd03      	ble.n	80099bc <__multiply+0x90>
 80099b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d05a      	beq.n	8009a72 <__multiply+0x146>
 80099bc:	6106      	str	r6, [r0, #16]
 80099be:	b005      	add	sp, #20
 80099c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c4:	f843 2b04 	str.w	r2, [r3], #4
 80099c8:	e7d8      	b.n	800997c <__multiply+0x50>
 80099ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80099ce:	f1ba 0f00 	cmp.w	sl, #0
 80099d2:	d024      	beq.n	8009a1e <__multiply+0xf2>
 80099d4:	f104 0e14 	add.w	lr, r4, #20
 80099d8:	46a9      	mov	r9, r5
 80099da:	f04f 0c00 	mov.w	ip, #0
 80099de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099e2:	f8d9 1000 	ldr.w	r1, [r9]
 80099e6:	fa1f fb82 	uxth.w	fp, r2
 80099ea:	b289      	uxth	r1, r1
 80099ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80099f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099f4:	f8d9 2000 	ldr.w	r2, [r9]
 80099f8:	4461      	add	r1, ip
 80099fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8009a02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a06:	b289      	uxth	r1, r1
 8009a08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a0c:	4577      	cmp	r7, lr
 8009a0e:	f849 1b04 	str.w	r1, [r9], #4
 8009a12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a16:	d8e2      	bhi.n	80099de <__multiply+0xb2>
 8009a18:	9a01      	ldr	r2, [sp, #4]
 8009a1a:	f845 c002 	str.w	ip, [r5, r2]
 8009a1e:	9a03      	ldr	r2, [sp, #12]
 8009a20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a24:	3304      	adds	r3, #4
 8009a26:	f1b9 0f00 	cmp.w	r9, #0
 8009a2a:	d020      	beq.n	8009a6e <__multiply+0x142>
 8009a2c:	6829      	ldr	r1, [r5, #0]
 8009a2e:	f104 0c14 	add.w	ip, r4, #20
 8009a32:	46ae      	mov	lr, r5
 8009a34:	f04f 0a00 	mov.w	sl, #0
 8009a38:	f8bc b000 	ldrh.w	fp, [ip]
 8009a3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a40:	fb09 220b 	mla	r2, r9, fp, r2
 8009a44:	4492      	add	sl, r2
 8009a46:	b289      	uxth	r1, r1
 8009a48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009a4c:	f84e 1b04 	str.w	r1, [lr], #4
 8009a50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009a54:	f8be 1000 	ldrh.w	r1, [lr]
 8009a58:	0c12      	lsrs	r2, r2, #16
 8009a5a:	fb09 1102 	mla	r1, r9, r2, r1
 8009a5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009a62:	4567      	cmp	r7, ip
 8009a64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a68:	d8e6      	bhi.n	8009a38 <__multiply+0x10c>
 8009a6a:	9a01      	ldr	r2, [sp, #4]
 8009a6c:	50a9      	str	r1, [r5, r2]
 8009a6e:	3504      	adds	r5, #4
 8009a70:	e79a      	b.n	80099a8 <__multiply+0x7c>
 8009a72:	3e01      	subs	r6, #1
 8009a74:	e79c      	b.n	80099b0 <__multiply+0x84>
 8009a76:	bf00      	nop
 8009a78:	0800a5a3 	.word	0x0800a5a3
 8009a7c:	0800a614 	.word	0x0800a614

08009a80 <__pow5mult>:
 8009a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a84:	4615      	mov	r5, r2
 8009a86:	f012 0203 	ands.w	r2, r2, #3
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	460f      	mov	r7, r1
 8009a8e:	d007      	beq.n	8009aa0 <__pow5mult+0x20>
 8009a90:	4c25      	ldr	r4, [pc, #148]	; (8009b28 <__pow5mult+0xa8>)
 8009a92:	3a01      	subs	r2, #1
 8009a94:	2300      	movs	r3, #0
 8009a96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a9a:	f7ff fe9b 	bl	80097d4 <__multadd>
 8009a9e:	4607      	mov	r7, r0
 8009aa0:	10ad      	asrs	r5, r5, #2
 8009aa2:	d03d      	beq.n	8009b20 <__pow5mult+0xa0>
 8009aa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009aa6:	b97c      	cbnz	r4, 8009ac8 <__pow5mult+0x48>
 8009aa8:	2010      	movs	r0, #16
 8009aaa:	f7fd feb7 	bl	800781c <malloc>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	6270      	str	r0, [r6, #36]	; 0x24
 8009ab2:	b928      	cbnz	r0, 8009ac0 <__pow5mult+0x40>
 8009ab4:	4b1d      	ldr	r3, [pc, #116]	; (8009b2c <__pow5mult+0xac>)
 8009ab6:	481e      	ldr	r0, [pc, #120]	; (8009b30 <__pow5mult+0xb0>)
 8009ab8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009abc:	f000 fb72 	bl	800a1a4 <__assert_func>
 8009ac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ac4:	6004      	str	r4, [r0, #0]
 8009ac6:	60c4      	str	r4, [r0, #12]
 8009ac8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009acc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ad0:	b94c      	cbnz	r4, 8009ae6 <__pow5mult+0x66>
 8009ad2:	f240 2171 	movw	r1, #625	; 0x271
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f7ff ff12 	bl	8009900 <__i2b>
 8009adc:	2300      	movs	r3, #0
 8009ade:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	6003      	str	r3, [r0, #0]
 8009ae6:	f04f 0900 	mov.w	r9, #0
 8009aea:	07eb      	lsls	r3, r5, #31
 8009aec:	d50a      	bpl.n	8009b04 <__pow5mult+0x84>
 8009aee:	4639      	mov	r1, r7
 8009af0:	4622      	mov	r2, r4
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff ff1a 	bl	800992c <__multiply>
 8009af8:	4639      	mov	r1, r7
 8009afa:	4680      	mov	r8, r0
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff fe47 	bl	8009790 <_Bfree>
 8009b02:	4647      	mov	r7, r8
 8009b04:	106d      	asrs	r5, r5, #1
 8009b06:	d00b      	beq.n	8009b20 <__pow5mult+0xa0>
 8009b08:	6820      	ldr	r0, [r4, #0]
 8009b0a:	b938      	cbnz	r0, 8009b1c <__pow5mult+0x9c>
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7ff ff0b 	bl	800992c <__multiply>
 8009b16:	6020      	str	r0, [r4, #0]
 8009b18:	f8c0 9000 	str.w	r9, [r0]
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	e7e4      	b.n	8009aea <__pow5mult+0x6a>
 8009b20:	4638      	mov	r0, r7
 8009b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b26:	bf00      	nop
 8009b28:	0800a760 	.word	0x0800a760
 8009b2c:	0800a531 	.word	0x0800a531
 8009b30:	0800a614 	.word	0x0800a614

08009b34 <__lshift>:
 8009b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b38:	460c      	mov	r4, r1
 8009b3a:	6849      	ldr	r1, [r1, #4]
 8009b3c:	6923      	ldr	r3, [r4, #16]
 8009b3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	4607      	mov	r7, r0
 8009b46:	4691      	mov	r9, r2
 8009b48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b4c:	f108 0601 	add.w	r6, r8, #1
 8009b50:	42b3      	cmp	r3, r6
 8009b52:	db0b      	blt.n	8009b6c <__lshift+0x38>
 8009b54:	4638      	mov	r0, r7
 8009b56:	f7ff fddb 	bl	8009710 <_Balloc>
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	b948      	cbnz	r0, 8009b72 <__lshift+0x3e>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	4b2a      	ldr	r3, [pc, #168]	; (8009c0c <__lshift+0xd8>)
 8009b62:	482b      	ldr	r0, [pc, #172]	; (8009c10 <__lshift+0xdc>)
 8009b64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b68:	f000 fb1c 	bl	800a1a4 <__assert_func>
 8009b6c:	3101      	adds	r1, #1
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	e7ee      	b.n	8009b50 <__lshift+0x1c>
 8009b72:	2300      	movs	r3, #0
 8009b74:	f100 0114 	add.w	r1, r0, #20
 8009b78:	f100 0210 	add.w	r2, r0, #16
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	4553      	cmp	r3, sl
 8009b80:	db37      	blt.n	8009bf2 <__lshift+0xbe>
 8009b82:	6920      	ldr	r0, [r4, #16]
 8009b84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b88:	f104 0314 	add.w	r3, r4, #20
 8009b8c:	f019 091f 	ands.w	r9, r9, #31
 8009b90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b98:	d02f      	beq.n	8009bfa <__lshift+0xc6>
 8009b9a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b9e:	468a      	mov	sl, r1
 8009ba0:	f04f 0c00 	mov.w	ip, #0
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	fa02 f209 	lsl.w	r2, r2, r9
 8009baa:	ea42 020c 	orr.w	r2, r2, ip
 8009bae:	f84a 2b04 	str.w	r2, [sl], #4
 8009bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb6:	4298      	cmp	r0, r3
 8009bb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009bbc:	d8f2      	bhi.n	8009ba4 <__lshift+0x70>
 8009bbe:	1b03      	subs	r3, r0, r4
 8009bc0:	3b15      	subs	r3, #21
 8009bc2:	f023 0303 	bic.w	r3, r3, #3
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	f104 0215 	add.w	r2, r4, #21
 8009bcc:	4290      	cmp	r0, r2
 8009bce:	bf38      	it	cc
 8009bd0:	2304      	movcc	r3, #4
 8009bd2:	f841 c003 	str.w	ip, [r1, r3]
 8009bd6:	f1bc 0f00 	cmp.w	ip, #0
 8009bda:	d001      	beq.n	8009be0 <__lshift+0xac>
 8009bdc:	f108 0602 	add.w	r6, r8, #2
 8009be0:	3e01      	subs	r6, #1
 8009be2:	4638      	mov	r0, r7
 8009be4:	612e      	str	r6, [r5, #16]
 8009be6:	4621      	mov	r1, r4
 8009be8:	f7ff fdd2 	bl	8009790 <_Bfree>
 8009bec:	4628      	mov	r0, r5
 8009bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	e7c1      	b.n	8009b7e <__lshift+0x4a>
 8009bfa:	3904      	subs	r1, #4
 8009bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c00:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c04:	4298      	cmp	r0, r3
 8009c06:	d8f9      	bhi.n	8009bfc <__lshift+0xc8>
 8009c08:	e7ea      	b.n	8009be0 <__lshift+0xac>
 8009c0a:	bf00      	nop
 8009c0c:	0800a5a3 	.word	0x0800a5a3
 8009c10:	0800a614 	.word	0x0800a614

08009c14 <__mcmp>:
 8009c14:	b530      	push	{r4, r5, lr}
 8009c16:	6902      	ldr	r2, [r0, #16]
 8009c18:	690c      	ldr	r4, [r1, #16]
 8009c1a:	1b12      	subs	r2, r2, r4
 8009c1c:	d10e      	bne.n	8009c3c <__mcmp+0x28>
 8009c1e:	f100 0314 	add.w	r3, r0, #20
 8009c22:	3114      	adds	r1, #20
 8009c24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c34:	42a5      	cmp	r5, r4
 8009c36:	d003      	beq.n	8009c40 <__mcmp+0x2c>
 8009c38:	d305      	bcc.n	8009c46 <__mcmp+0x32>
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	bd30      	pop	{r4, r5, pc}
 8009c40:	4283      	cmp	r3, r0
 8009c42:	d3f3      	bcc.n	8009c2c <__mcmp+0x18>
 8009c44:	e7fa      	b.n	8009c3c <__mcmp+0x28>
 8009c46:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4a:	e7f7      	b.n	8009c3c <__mcmp+0x28>

08009c4c <__mdiff>:
 8009c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	460c      	mov	r4, r1
 8009c52:	4606      	mov	r6, r0
 8009c54:	4611      	mov	r1, r2
 8009c56:	4620      	mov	r0, r4
 8009c58:	4690      	mov	r8, r2
 8009c5a:	f7ff ffdb 	bl	8009c14 <__mcmp>
 8009c5e:	1e05      	subs	r5, r0, #0
 8009c60:	d110      	bne.n	8009c84 <__mdiff+0x38>
 8009c62:	4629      	mov	r1, r5
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff fd53 	bl	8009710 <_Balloc>
 8009c6a:	b930      	cbnz	r0, 8009c7a <__mdiff+0x2e>
 8009c6c:	4b3a      	ldr	r3, [pc, #232]	; (8009d58 <__mdiff+0x10c>)
 8009c6e:	4602      	mov	r2, r0
 8009c70:	f240 2132 	movw	r1, #562	; 0x232
 8009c74:	4839      	ldr	r0, [pc, #228]	; (8009d5c <__mdiff+0x110>)
 8009c76:	f000 fa95 	bl	800a1a4 <__assert_func>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c84:	bfa4      	itt	ge
 8009c86:	4643      	movge	r3, r8
 8009c88:	46a0      	movge	r8, r4
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c90:	bfa6      	itte	ge
 8009c92:	461c      	movge	r4, r3
 8009c94:	2500      	movge	r5, #0
 8009c96:	2501      	movlt	r5, #1
 8009c98:	f7ff fd3a 	bl	8009710 <_Balloc>
 8009c9c:	b920      	cbnz	r0, 8009ca8 <__mdiff+0x5c>
 8009c9e:	4b2e      	ldr	r3, [pc, #184]	; (8009d58 <__mdiff+0x10c>)
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ca6:	e7e5      	b.n	8009c74 <__mdiff+0x28>
 8009ca8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009cac:	6926      	ldr	r6, [r4, #16]
 8009cae:	60c5      	str	r5, [r0, #12]
 8009cb0:	f104 0914 	add.w	r9, r4, #20
 8009cb4:	f108 0514 	add.w	r5, r8, #20
 8009cb8:	f100 0e14 	add.w	lr, r0, #20
 8009cbc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009cc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009cc4:	f108 0210 	add.w	r2, r8, #16
 8009cc8:	46f2      	mov	sl, lr
 8009cca:	2100      	movs	r1, #0
 8009ccc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cd4:	fa1f f883 	uxth.w	r8, r3
 8009cd8:	fa11 f18b 	uxtah	r1, r1, fp
 8009cdc:	0c1b      	lsrs	r3, r3, #16
 8009cde:	eba1 0808 	sub.w	r8, r1, r8
 8009ce2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ce6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cea:	fa1f f888 	uxth.w	r8, r8
 8009cee:	1419      	asrs	r1, r3, #16
 8009cf0:	454e      	cmp	r6, r9
 8009cf2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cf6:	f84a 3b04 	str.w	r3, [sl], #4
 8009cfa:	d8e7      	bhi.n	8009ccc <__mdiff+0x80>
 8009cfc:	1b33      	subs	r3, r6, r4
 8009cfe:	3b15      	subs	r3, #21
 8009d00:	f023 0303 	bic.w	r3, r3, #3
 8009d04:	3304      	adds	r3, #4
 8009d06:	3415      	adds	r4, #21
 8009d08:	42a6      	cmp	r6, r4
 8009d0a:	bf38      	it	cc
 8009d0c:	2304      	movcc	r3, #4
 8009d0e:	441d      	add	r5, r3
 8009d10:	4473      	add	r3, lr
 8009d12:	469e      	mov	lr, r3
 8009d14:	462e      	mov	r6, r5
 8009d16:	4566      	cmp	r6, ip
 8009d18:	d30e      	bcc.n	8009d38 <__mdiff+0xec>
 8009d1a:	f10c 0203 	add.w	r2, ip, #3
 8009d1e:	1b52      	subs	r2, r2, r5
 8009d20:	f022 0203 	bic.w	r2, r2, #3
 8009d24:	3d03      	subs	r5, #3
 8009d26:	45ac      	cmp	ip, r5
 8009d28:	bf38      	it	cc
 8009d2a:	2200      	movcc	r2, #0
 8009d2c:	441a      	add	r2, r3
 8009d2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d32:	b17b      	cbz	r3, 8009d54 <__mdiff+0x108>
 8009d34:	6107      	str	r7, [r0, #16]
 8009d36:	e7a3      	b.n	8009c80 <__mdiff+0x34>
 8009d38:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d3c:	fa11 f288 	uxtah	r2, r1, r8
 8009d40:	1414      	asrs	r4, r2, #16
 8009d42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d46:	b292      	uxth	r2, r2
 8009d48:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d4c:	f84e 2b04 	str.w	r2, [lr], #4
 8009d50:	1421      	asrs	r1, r4, #16
 8009d52:	e7e0      	b.n	8009d16 <__mdiff+0xca>
 8009d54:	3f01      	subs	r7, #1
 8009d56:	e7ea      	b.n	8009d2e <__mdiff+0xe2>
 8009d58:	0800a5a3 	.word	0x0800a5a3
 8009d5c:	0800a614 	.word	0x0800a614

08009d60 <__d2b>:
 8009d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	4689      	mov	r9, r1
 8009d66:	2101      	movs	r1, #1
 8009d68:	ec57 6b10 	vmov	r6, r7, d0
 8009d6c:	4690      	mov	r8, r2
 8009d6e:	f7ff fccf 	bl	8009710 <_Balloc>
 8009d72:	4604      	mov	r4, r0
 8009d74:	b930      	cbnz	r0, 8009d84 <__d2b+0x24>
 8009d76:	4602      	mov	r2, r0
 8009d78:	4b25      	ldr	r3, [pc, #148]	; (8009e10 <__d2b+0xb0>)
 8009d7a:	4826      	ldr	r0, [pc, #152]	; (8009e14 <__d2b+0xb4>)
 8009d7c:	f240 310a 	movw	r1, #778	; 0x30a
 8009d80:	f000 fa10 	bl	800a1a4 <__assert_func>
 8009d84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d8c:	bb35      	cbnz	r5, 8009ddc <__d2b+0x7c>
 8009d8e:	2e00      	cmp	r6, #0
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	d028      	beq.n	8009de6 <__d2b+0x86>
 8009d94:	4668      	mov	r0, sp
 8009d96:	9600      	str	r6, [sp, #0]
 8009d98:	f7ff fd82 	bl	80098a0 <__lo0bits>
 8009d9c:	9900      	ldr	r1, [sp, #0]
 8009d9e:	b300      	cbz	r0, 8009de2 <__d2b+0x82>
 8009da0:	9a01      	ldr	r2, [sp, #4]
 8009da2:	f1c0 0320 	rsb	r3, r0, #32
 8009da6:	fa02 f303 	lsl.w	r3, r2, r3
 8009daa:	430b      	orrs	r3, r1
 8009dac:	40c2      	lsrs	r2, r0
 8009dae:	6163      	str	r3, [r4, #20]
 8009db0:	9201      	str	r2, [sp, #4]
 8009db2:	9b01      	ldr	r3, [sp, #4]
 8009db4:	61a3      	str	r3, [r4, #24]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bf14      	ite	ne
 8009dba:	2202      	movne	r2, #2
 8009dbc:	2201      	moveq	r2, #1
 8009dbe:	6122      	str	r2, [r4, #16]
 8009dc0:	b1d5      	cbz	r5, 8009df8 <__d2b+0x98>
 8009dc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dc6:	4405      	add	r5, r0
 8009dc8:	f8c9 5000 	str.w	r5, [r9]
 8009dcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dd0:	f8c8 0000 	str.w	r0, [r8]
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	b003      	add	sp, #12
 8009dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009de0:	e7d5      	b.n	8009d8e <__d2b+0x2e>
 8009de2:	6161      	str	r1, [r4, #20]
 8009de4:	e7e5      	b.n	8009db2 <__d2b+0x52>
 8009de6:	a801      	add	r0, sp, #4
 8009de8:	f7ff fd5a 	bl	80098a0 <__lo0bits>
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	6163      	str	r3, [r4, #20]
 8009df0:	2201      	movs	r2, #1
 8009df2:	6122      	str	r2, [r4, #16]
 8009df4:	3020      	adds	r0, #32
 8009df6:	e7e3      	b.n	8009dc0 <__d2b+0x60>
 8009df8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e00:	f8c9 0000 	str.w	r0, [r9]
 8009e04:	6918      	ldr	r0, [r3, #16]
 8009e06:	f7ff fd2b 	bl	8009860 <__hi0bits>
 8009e0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e0e:	e7df      	b.n	8009dd0 <__d2b+0x70>
 8009e10:	0800a5a3 	.word	0x0800a5a3
 8009e14:	0800a614 	.word	0x0800a614

08009e18 <_calloc_r>:
 8009e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e1a:	fba1 2402 	umull	r2, r4, r1, r2
 8009e1e:	b94c      	cbnz	r4, 8009e34 <_calloc_r+0x1c>
 8009e20:	4611      	mov	r1, r2
 8009e22:	9201      	str	r2, [sp, #4]
 8009e24:	f7fd fd7e 	bl	8007924 <_malloc_r>
 8009e28:	9a01      	ldr	r2, [sp, #4]
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	b930      	cbnz	r0, 8009e3c <_calloc_r+0x24>
 8009e2e:	4628      	mov	r0, r5
 8009e30:	b003      	add	sp, #12
 8009e32:	bd30      	pop	{r4, r5, pc}
 8009e34:	220c      	movs	r2, #12
 8009e36:	6002      	str	r2, [r0, #0]
 8009e38:	2500      	movs	r5, #0
 8009e3a:	e7f8      	b.n	8009e2e <_calloc_r+0x16>
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	f7fd fcfd 	bl	800783c <memset>
 8009e42:	e7f4      	b.n	8009e2e <_calloc_r+0x16>

08009e44 <__sfputc_r>:
 8009e44:	6893      	ldr	r3, [r2, #8]
 8009e46:	3b01      	subs	r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	b410      	push	{r4}
 8009e4c:	6093      	str	r3, [r2, #8]
 8009e4e:	da08      	bge.n	8009e62 <__sfputc_r+0x1e>
 8009e50:	6994      	ldr	r4, [r2, #24]
 8009e52:	42a3      	cmp	r3, r4
 8009e54:	db01      	blt.n	8009e5a <__sfputc_r+0x16>
 8009e56:	290a      	cmp	r1, #10
 8009e58:	d103      	bne.n	8009e62 <__sfputc_r+0x1e>
 8009e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e5e:	f7fe badd 	b.w	800841c <__swbuf_r>
 8009e62:	6813      	ldr	r3, [r2, #0]
 8009e64:	1c58      	adds	r0, r3, #1
 8009e66:	6010      	str	r0, [r2, #0]
 8009e68:	7019      	strb	r1, [r3, #0]
 8009e6a:	4608      	mov	r0, r1
 8009e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <__sfputs_r>:
 8009e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e74:	4606      	mov	r6, r0
 8009e76:	460f      	mov	r7, r1
 8009e78:	4614      	mov	r4, r2
 8009e7a:	18d5      	adds	r5, r2, r3
 8009e7c:	42ac      	cmp	r4, r5
 8009e7e:	d101      	bne.n	8009e84 <__sfputs_r+0x12>
 8009e80:	2000      	movs	r0, #0
 8009e82:	e007      	b.n	8009e94 <__sfputs_r+0x22>
 8009e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e88:	463a      	mov	r2, r7
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f7ff ffda 	bl	8009e44 <__sfputc_r>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d1f3      	bne.n	8009e7c <__sfputs_r+0xa>
 8009e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e98 <_vfiprintf_r>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	b09d      	sub	sp, #116	; 0x74
 8009ea0:	4614      	mov	r4, r2
 8009ea2:	4698      	mov	r8, r3
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	b118      	cbz	r0, 8009eb0 <_vfiprintf_r+0x18>
 8009ea8:	6983      	ldr	r3, [r0, #24]
 8009eaa:	b90b      	cbnz	r3, 8009eb0 <_vfiprintf_r+0x18>
 8009eac:	f7ff fb0c 	bl	80094c8 <__sinit>
 8009eb0:	4b89      	ldr	r3, [pc, #548]	; (800a0d8 <_vfiprintf_r+0x240>)
 8009eb2:	429d      	cmp	r5, r3
 8009eb4:	d11b      	bne.n	8009eee <_vfiprintf_r+0x56>
 8009eb6:	6875      	ldr	r5, [r6, #4]
 8009eb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eba:	07d9      	lsls	r1, r3, #31
 8009ebc:	d405      	bmi.n	8009eca <_vfiprintf_r+0x32>
 8009ebe:	89ab      	ldrh	r3, [r5, #12]
 8009ec0:	059a      	lsls	r2, r3, #22
 8009ec2:	d402      	bmi.n	8009eca <_vfiprintf_r+0x32>
 8009ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ec6:	f7ff fba2 	bl	800960e <__retarget_lock_acquire_recursive>
 8009eca:	89ab      	ldrh	r3, [r5, #12]
 8009ecc:	071b      	lsls	r3, r3, #28
 8009ece:	d501      	bpl.n	8009ed4 <_vfiprintf_r+0x3c>
 8009ed0:	692b      	ldr	r3, [r5, #16]
 8009ed2:	b9eb      	cbnz	r3, 8009f10 <_vfiprintf_r+0x78>
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7fe faf2 	bl	80084c0 <__swsetup_r>
 8009edc:	b1c0      	cbz	r0, 8009f10 <_vfiprintf_r+0x78>
 8009ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ee0:	07dc      	lsls	r4, r3, #31
 8009ee2:	d50e      	bpl.n	8009f02 <_vfiprintf_r+0x6a>
 8009ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee8:	b01d      	add	sp, #116	; 0x74
 8009eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eee:	4b7b      	ldr	r3, [pc, #492]	; (800a0dc <_vfiprintf_r+0x244>)
 8009ef0:	429d      	cmp	r5, r3
 8009ef2:	d101      	bne.n	8009ef8 <_vfiprintf_r+0x60>
 8009ef4:	68b5      	ldr	r5, [r6, #8]
 8009ef6:	e7df      	b.n	8009eb8 <_vfiprintf_r+0x20>
 8009ef8:	4b79      	ldr	r3, [pc, #484]	; (800a0e0 <_vfiprintf_r+0x248>)
 8009efa:	429d      	cmp	r5, r3
 8009efc:	bf08      	it	eq
 8009efe:	68f5      	ldreq	r5, [r6, #12]
 8009f00:	e7da      	b.n	8009eb8 <_vfiprintf_r+0x20>
 8009f02:	89ab      	ldrh	r3, [r5, #12]
 8009f04:	0598      	lsls	r0, r3, #22
 8009f06:	d4ed      	bmi.n	8009ee4 <_vfiprintf_r+0x4c>
 8009f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f0a:	f7ff fb81 	bl	8009610 <__retarget_lock_release_recursive>
 8009f0e:	e7e9      	b.n	8009ee4 <_vfiprintf_r+0x4c>
 8009f10:	2300      	movs	r3, #0
 8009f12:	9309      	str	r3, [sp, #36]	; 0x24
 8009f14:	2320      	movs	r3, #32
 8009f16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f1e:	2330      	movs	r3, #48	; 0x30
 8009f20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a0e4 <_vfiprintf_r+0x24c>
 8009f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f28:	f04f 0901 	mov.w	r9, #1
 8009f2c:	4623      	mov	r3, r4
 8009f2e:	469a      	mov	sl, r3
 8009f30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f34:	b10a      	cbz	r2, 8009f3a <_vfiprintf_r+0xa2>
 8009f36:	2a25      	cmp	r2, #37	; 0x25
 8009f38:	d1f9      	bne.n	8009f2e <_vfiprintf_r+0x96>
 8009f3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f3e:	d00b      	beq.n	8009f58 <_vfiprintf_r+0xc0>
 8009f40:	465b      	mov	r3, fp
 8009f42:	4622      	mov	r2, r4
 8009f44:	4629      	mov	r1, r5
 8009f46:	4630      	mov	r0, r6
 8009f48:	f7ff ff93 	bl	8009e72 <__sfputs_r>
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	f000 80aa 	beq.w	800a0a6 <_vfiprintf_r+0x20e>
 8009f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f54:	445a      	add	r2, fp
 8009f56:	9209      	str	r2, [sp, #36]	; 0x24
 8009f58:	f89a 3000 	ldrb.w	r3, [sl]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 80a2 	beq.w	800a0a6 <_vfiprintf_r+0x20e>
 8009f62:	2300      	movs	r3, #0
 8009f64:	f04f 32ff 	mov.w	r2, #4294967295
 8009f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f6c:	f10a 0a01 	add.w	sl, sl, #1
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	9307      	str	r3, [sp, #28]
 8009f74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f78:	931a      	str	r3, [sp, #104]	; 0x68
 8009f7a:	4654      	mov	r4, sl
 8009f7c:	2205      	movs	r2, #5
 8009f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f82:	4858      	ldr	r0, [pc, #352]	; (800a0e4 <_vfiprintf_r+0x24c>)
 8009f84:	f7f6 f934 	bl	80001f0 <memchr>
 8009f88:	9a04      	ldr	r2, [sp, #16]
 8009f8a:	b9d8      	cbnz	r0, 8009fc4 <_vfiprintf_r+0x12c>
 8009f8c:	06d1      	lsls	r1, r2, #27
 8009f8e:	bf44      	itt	mi
 8009f90:	2320      	movmi	r3, #32
 8009f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f96:	0713      	lsls	r3, r2, #28
 8009f98:	bf44      	itt	mi
 8009f9a:	232b      	movmi	r3, #43	; 0x2b
 8009f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa6:	d015      	beq.n	8009fd4 <_vfiprintf_r+0x13c>
 8009fa8:	9a07      	ldr	r2, [sp, #28]
 8009faa:	4654      	mov	r4, sl
 8009fac:	2000      	movs	r0, #0
 8009fae:	f04f 0c0a 	mov.w	ip, #10
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fb8:	3b30      	subs	r3, #48	; 0x30
 8009fba:	2b09      	cmp	r3, #9
 8009fbc:	d94e      	bls.n	800a05c <_vfiprintf_r+0x1c4>
 8009fbe:	b1b0      	cbz	r0, 8009fee <_vfiprintf_r+0x156>
 8009fc0:	9207      	str	r2, [sp, #28]
 8009fc2:	e014      	b.n	8009fee <_vfiprintf_r+0x156>
 8009fc4:	eba0 0308 	sub.w	r3, r0, r8
 8009fc8:	fa09 f303 	lsl.w	r3, r9, r3
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	9304      	str	r3, [sp, #16]
 8009fd0:	46a2      	mov	sl, r4
 8009fd2:	e7d2      	b.n	8009f7a <_vfiprintf_r+0xe2>
 8009fd4:	9b03      	ldr	r3, [sp, #12]
 8009fd6:	1d19      	adds	r1, r3, #4
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	9103      	str	r1, [sp, #12]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	bfbb      	ittet	lt
 8009fe0:	425b      	neglt	r3, r3
 8009fe2:	f042 0202 	orrlt.w	r2, r2, #2
 8009fe6:	9307      	strge	r3, [sp, #28]
 8009fe8:	9307      	strlt	r3, [sp, #28]
 8009fea:	bfb8      	it	lt
 8009fec:	9204      	strlt	r2, [sp, #16]
 8009fee:	7823      	ldrb	r3, [r4, #0]
 8009ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ff2:	d10c      	bne.n	800a00e <_vfiprintf_r+0x176>
 8009ff4:	7863      	ldrb	r3, [r4, #1]
 8009ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ff8:	d135      	bne.n	800a066 <_vfiprintf_r+0x1ce>
 8009ffa:	9b03      	ldr	r3, [sp, #12]
 8009ffc:	1d1a      	adds	r2, r3, #4
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	9203      	str	r2, [sp, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	bfb8      	it	lt
 800a006:	f04f 33ff 	movlt.w	r3, #4294967295
 800a00a:	3402      	adds	r4, #2
 800a00c:	9305      	str	r3, [sp, #20]
 800a00e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0f4 <_vfiprintf_r+0x25c>
 800a012:	7821      	ldrb	r1, [r4, #0]
 800a014:	2203      	movs	r2, #3
 800a016:	4650      	mov	r0, sl
 800a018:	f7f6 f8ea 	bl	80001f0 <memchr>
 800a01c:	b140      	cbz	r0, 800a030 <_vfiprintf_r+0x198>
 800a01e:	2340      	movs	r3, #64	; 0x40
 800a020:	eba0 000a 	sub.w	r0, r0, sl
 800a024:	fa03 f000 	lsl.w	r0, r3, r0
 800a028:	9b04      	ldr	r3, [sp, #16]
 800a02a:	4303      	orrs	r3, r0
 800a02c:	3401      	adds	r4, #1
 800a02e:	9304      	str	r3, [sp, #16]
 800a030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a034:	482c      	ldr	r0, [pc, #176]	; (800a0e8 <_vfiprintf_r+0x250>)
 800a036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a03a:	2206      	movs	r2, #6
 800a03c:	f7f6 f8d8 	bl	80001f0 <memchr>
 800a040:	2800      	cmp	r0, #0
 800a042:	d03f      	beq.n	800a0c4 <_vfiprintf_r+0x22c>
 800a044:	4b29      	ldr	r3, [pc, #164]	; (800a0ec <_vfiprintf_r+0x254>)
 800a046:	bb1b      	cbnz	r3, 800a090 <_vfiprintf_r+0x1f8>
 800a048:	9b03      	ldr	r3, [sp, #12]
 800a04a:	3307      	adds	r3, #7
 800a04c:	f023 0307 	bic.w	r3, r3, #7
 800a050:	3308      	adds	r3, #8
 800a052:	9303      	str	r3, [sp, #12]
 800a054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a056:	443b      	add	r3, r7
 800a058:	9309      	str	r3, [sp, #36]	; 0x24
 800a05a:	e767      	b.n	8009f2c <_vfiprintf_r+0x94>
 800a05c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a060:	460c      	mov	r4, r1
 800a062:	2001      	movs	r0, #1
 800a064:	e7a5      	b.n	8009fb2 <_vfiprintf_r+0x11a>
 800a066:	2300      	movs	r3, #0
 800a068:	3401      	adds	r4, #1
 800a06a:	9305      	str	r3, [sp, #20]
 800a06c:	4619      	mov	r1, r3
 800a06e:	f04f 0c0a 	mov.w	ip, #10
 800a072:	4620      	mov	r0, r4
 800a074:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a078:	3a30      	subs	r2, #48	; 0x30
 800a07a:	2a09      	cmp	r2, #9
 800a07c:	d903      	bls.n	800a086 <_vfiprintf_r+0x1ee>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0c5      	beq.n	800a00e <_vfiprintf_r+0x176>
 800a082:	9105      	str	r1, [sp, #20]
 800a084:	e7c3      	b.n	800a00e <_vfiprintf_r+0x176>
 800a086:	fb0c 2101 	mla	r1, ip, r1, r2
 800a08a:	4604      	mov	r4, r0
 800a08c:	2301      	movs	r3, #1
 800a08e:	e7f0      	b.n	800a072 <_vfiprintf_r+0x1da>
 800a090:	ab03      	add	r3, sp, #12
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	462a      	mov	r2, r5
 800a096:	4b16      	ldr	r3, [pc, #88]	; (800a0f0 <_vfiprintf_r+0x258>)
 800a098:	a904      	add	r1, sp, #16
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7fd fd56 	bl	8007b4c <_printf_float>
 800a0a0:	4607      	mov	r7, r0
 800a0a2:	1c78      	adds	r0, r7, #1
 800a0a4:	d1d6      	bne.n	800a054 <_vfiprintf_r+0x1bc>
 800a0a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0a8:	07d9      	lsls	r1, r3, #31
 800a0aa:	d405      	bmi.n	800a0b8 <_vfiprintf_r+0x220>
 800a0ac:	89ab      	ldrh	r3, [r5, #12]
 800a0ae:	059a      	lsls	r2, r3, #22
 800a0b0:	d402      	bmi.n	800a0b8 <_vfiprintf_r+0x220>
 800a0b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0b4:	f7ff faac 	bl	8009610 <__retarget_lock_release_recursive>
 800a0b8:	89ab      	ldrh	r3, [r5, #12]
 800a0ba:	065b      	lsls	r3, r3, #25
 800a0bc:	f53f af12 	bmi.w	8009ee4 <_vfiprintf_r+0x4c>
 800a0c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0c2:	e711      	b.n	8009ee8 <_vfiprintf_r+0x50>
 800a0c4:	ab03      	add	r3, sp, #12
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	462a      	mov	r2, r5
 800a0ca:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <_vfiprintf_r+0x258>)
 800a0cc:	a904      	add	r1, sp, #16
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f7fd ffe0 	bl	8008094 <_printf_i>
 800a0d4:	e7e4      	b.n	800a0a0 <_vfiprintf_r+0x208>
 800a0d6:	bf00      	nop
 800a0d8:	0800a5d4 	.word	0x0800a5d4
 800a0dc:	0800a5f4 	.word	0x0800a5f4
 800a0e0:	0800a5b4 	.word	0x0800a5b4
 800a0e4:	0800a76c 	.word	0x0800a76c
 800a0e8:	0800a776 	.word	0x0800a776
 800a0ec:	08007b4d 	.word	0x08007b4d
 800a0f0:	08009e73 	.word	0x08009e73
 800a0f4:	0800a772 	.word	0x0800a772

0800a0f8 <__sread>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a100:	f000 f8d6 	bl	800a2b0 <_read_r>
 800a104:	2800      	cmp	r0, #0
 800a106:	bfab      	itete	ge
 800a108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a10a:	89a3      	ldrhlt	r3, [r4, #12]
 800a10c:	181b      	addge	r3, r3, r0
 800a10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a112:	bfac      	ite	ge
 800a114:	6563      	strge	r3, [r4, #84]	; 0x54
 800a116:	81a3      	strhlt	r3, [r4, #12]
 800a118:	bd10      	pop	{r4, pc}

0800a11a <__swrite>:
 800a11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11e:	461f      	mov	r7, r3
 800a120:	898b      	ldrh	r3, [r1, #12]
 800a122:	05db      	lsls	r3, r3, #23
 800a124:	4605      	mov	r5, r0
 800a126:	460c      	mov	r4, r1
 800a128:	4616      	mov	r6, r2
 800a12a:	d505      	bpl.n	800a138 <__swrite+0x1e>
 800a12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a130:	2302      	movs	r3, #2
 800a132:	2200      	movs	r2, #0
 800a134:	f000 f898 	bl	800a268 <_lseek_r>
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a13e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a142:	81a3      	strh	r3, [r4, #12]
 800a144:	4632      	mov	r2, r6
 800a146:	463b      	mov	r3, r7
 800a148:	4628      	mov	r0, r5
 800a14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a14e:	f000 b817 	b.w	800a180 <_write_r>

0800a152 <__sseek>:
 800a152:	b510      	push	{r4, lr}
 800a154:	460c      	mov	r4, r1
 800a156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a15a:	f000 f885 	bl	800a268 <_lseek_r>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	bf15      	itete	ne
 800a164:	6560      	strne	r0, [r4, #84]	; 0x54
 800a166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a16e:	81a3      	strheq	r3, [r4, #12]
 800a170:	bf18      	it	ne
 800a172:	81a3      	strhne	r3, [r4, #12]
 800a174:	bd10      	pop	{r4, pc}

0800a176 <__sclose>:
 800a176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a17a:	f000 b831 	b.w	800a1e0 <_close_r>
	...

0800a180 <_write_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	4d07      	ldr	r5, [pc, #28]	; (800a1a0 <_write_r+0x20>)
 800a184:	4604      	mov	r4, r0
 800a186:	4608      	mov	r0, r1
 800a188:	4611      	mov	r1, r2
 800a18a:	2200      	movs	r2, #0
 800a18c:	602a      	str	r2, [r5, #0]
 800a18e:	461a      	mov	r2, r3
 800a190:	f7f8 fea0 	bl	8002ed4 <_write>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_write_r+0x1e>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_write_r+0x1e>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	20002f6c 	.word	0x20002f6c

0800a1a4 <__assert_func>:
 800a1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1a6:	4614      	mov	r4, r2
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <__assert_func+0x2c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	68d8      	ldr	r0, [r3, #12]
 800a1b2:	b14c      	cbz	r4, 800a1c8 <__assert_func+0x24>
 800a1b4:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <__assert_func+0x30>)
 800a1b6:	9100      	str	r1, [sp, #0]
 800a1b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1bc:	4906      	ldr	r1, [pc, #24]	; (800a1d8 <__assert_func+0x34>)
 800a1be:	462b      	mov	r3, r5
 800a1c0:	f000 f81e 	bl	800a200 <fiprintf>
 800a1c4:	f000 f893 	bl	800a2ee <abort>
 800a1c8:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <__assert_func+0x38>)
 800a1ca:	461c      	mov	r4, r3
 800a1cc:	e7f3      	b.n	800a1b6 <__assert_func+0x12>
 800a1ce:	bf00      	nop
 800a1d0:	20000028 	.word	0x20000028
 800a1d4:	0800a77d 	.word	0x0800a77d
 800a1d8:	0800a78a 	.word	0x0800a78a
 800a1dc:	0800a7b8 	.word	0x0800a7b8

0800a1e0 <_close_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	4d06      	ldr	r5, [pc, #24]	; (800a1fc <_close_r+0x1c>)
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	4608      	mov	r0, r1
 800a1ea:	602b      	str	r3, [r5, #0]
 800a1ec:	f7f8 fe80 	bl	8002ef0 <_close>
 800a1f0:	1c43      	adds	r3, r0, #1
 800a1f2:	d102      	bne.n	800a1fa <_close_r+0x1a>
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	b103      	cbz	r3, 800a1fa <_close_r+0x1a>
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	bd38      	pop	{r3, r4, r5, pc}
 800a1fc:	20002f6c 	.word	0x20002f6c

0800a200 <fiprintf>:
 800a200:	b40e      	push	{r1, r2, r3}
 800a202:	b503      	push	{r0, r1, lr}
 800a204:	4601      	mov	r1, r0
 800a206:	ab03      	add	r3, sp, #12
 800a208:	4805      	ldr	r0, [pc, #20]	; (800a220 <fiprintf+0x20>)
 800a20a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	f7ff fe41 	bl	8009e98 <_vfiprintf_r>
 800a216:	b002      	add	sp, #8
 800a218:	f85d eb04 	ldr.w	lr, [sp], #4
 800a21c:	b003      	add	sp, #12
 800a21e:	4770      	bx	lr
 800a220:	20000028 	.word	0x20000028

0800a224 <_fstat_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d07      	ldr	r5, [pc, #28]	; (800a244 <_fstat_r+0x20>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	f7f8 fe61 	bl	8002ef8 <_fstat>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d102      	bne.n	800a240 <_fstat_r+0x1c>
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	b103      	cbz	r3, 800a240 <_fstat_r+0x1c>
 800a23e:	6023      	str	r3, [r4, #0]
 800a240:	bd38      	pop	{r3, r4, r5, pc}
 800a242:	bf00      	nop
 800a244:	20002f6c 	.word	0x20002f6c

0800a248 <_isatty_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d06      	ldr	r5, [pc, #24]	; (800a264 <_isatty_r+0x1c>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	f7f8 fe56 	bl	8002f04 <_isatty>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_isatty_r+0x1a>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_isatty_r+0x1a>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	20002f6c 	.word	0x20002f6c

0800a268 <_lseek_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d07      	ldr	r5, [pc, #28]	; (800a288 <_lseek_r+0x20>)
 800a26c:	4604      	mov	r4, r0
 800a26e:	4608      	mov	r0, r1
 800a270:	4611      	mov	r1, r2
 800a272:	2200      	movs	r2, #0
 800a274:	602a      	str	r2, [r5, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	f7f8 fe46 	bl	8002f08 <_lseek>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_lseek_r+0x1e>
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	b103      	cbz	r3, 800a286 <_lseek_r+0x1e>
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	20002f6c 	.word	0x20002f6c

0800a28c <__ascii_mbtowc>:
 800a28c:	b082      	sub	sp, #8
 800a28e:	b901      	cbnz	r1, 800a292 <__ascii_mbtowc+0x6>
 800a290:	a901      	add	r1, sp, #4
 800a292:	b142      	cbz	r2, 800a2a6 <__ascii_mbtowc+0x1a>
 800a294:	b14b      	cbz	r3, 800a2aa <__ascii_mbtowc+0x1e>
 800a296:	7813      	ldrb	r3, [r2, #0]
 800a298:	600b      	str	r3, [r1, #0]
 800a29a:	7812      	ldrb	r2, [r2, #0]
 800a29c:	1e10      	subs	r0, r2, #0
 800a29e:	bf18      	it	ne
 800a2a0:	2001      	movne	r0, #1
 800a2a2:	b002      	add	sp, #8
 800a2a4:	4770      	bx	lr
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	e7fb      	b.n	800a2a2 <__ascii_mbtowc+0x16>
 800a2aa:	f06f 0001 	mvn.w	r0, #1
 800a2ae:	e7f8      	b.n	800a2a2 <__ascii_mbtowc+0x16>

0800a2b0 <_read_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4d07      	ldr	r5, [pc, #28]	; (800a2d0 <_read_r+0x20>)
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	4608      	mov	r0, r1
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	602a      	str	r2, [r5, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f7f8 fdfa 	bl	8002eb8 <_read>
 800a2c4:	1c43      	adds	r3, r0, #1
 800a2c6:	d102      	bne.n	800a2ce <_read_r+0x1e>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	b103      	cbz	r3, 800a2ce <_read_r+0x1e>
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}
 800a2d0:	20002f6c 	.word	0x20002f6c

0800a2d4 <__ascii_wctomb>:
 800a2d4:	b149      	cbz	r1, 800a2ea <__ascii_wctomb+0x16>
 800a2d6:	2aff      	cmp	r2, #255	; 0xff
 800a2d8:	bf85      	ittet	hi
 800a2da:	238a      	movhi	r3, #138	; 0x8a
 800a2dc:	6003      	strhi	r3, [r0, #0]
 800a2de:	700a      	strbls	r2, [r1, #0]
 800a2e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2e4:	bf98      	it	ls
 800a2e6:	2001      	movls	r0, #1
 800a2e8:	4770      	bx	lr
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	4770      	bx	lr

0800a2ee <abort>:
 800a2ee:	b508      	push	{r3, lr}
 800a2f0:	2006      	movs	r0, #6
 800a2f2:	f000 f82b 	bl	800a34c <raise>
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	f7f8 fdd8 	bl	8002eac <_exit>

0800a2fc <_raise_r>:
 800a2fc:	291f      	cmp	r1, #31
 800a2fe:	b538      	push	{r3, r4, r5, lr}
 800a300:	4604      	mov	r4, r0
 800a302:	460d      	mov	r5, r1
 800a304:	d904      	bls.n	800a310 <_raise_r+0x14>
 800a306:	2316      	movs	r3, #22
 800a308:	6003      	str	r3, [r0, #0]
 800a30a:	f04f 30ff 	mov.w	r0, #4294967295
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a312:	b112      	cbz	r2, 800a31a <_raise_r+0x1e>
 800a314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a318:	b94b      	cbnz	r3, 800a32e <_raise_r+0x32>
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 f830 	bl	800a380 <_getpid_r>
 800a320:	462a      	mov	r2, r5
 800a322:	4601      	mov	r1, r0
 800a324:	4620      	mov	r0, r4
 800a326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a32a:	f000 b817 	b.w	800a35c <_kill_r>
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d00a      	beq.n	800a348 <_raise_r+0x4c>
 800a332:	1c59      	adds	r1, r3, #1
 800a334:	d103      	bne.n	800a33e <_raise_r+0x42>
 800a336:	2316      	movs	r3, #22
 800a338:	6003      	str	r3, [r0, #0]
 800a33a:	2001      	movs	r0, #1
 800a33c:	e7e7      	b.n	800a30e <_raise_r+0x12>
 800a33e:	2400      	movs	r4, #0
 800a340:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a344:	4628      	mov	r0, r5
 800a346:	4798      	blx	r3
 800a348:	2000      	movs	r0, #0
 800a34a:	e7e0      	b.n	800a30e <_raise_r+0x12>

0800a34c <raise>:
 800a34c:	4b02      	ldr	r3, [pc, #8]	; (800a358 <raise+0xc>)
 800a34e:	4601      	mov	r1, r0
 800a350:	6818      	ldr	r0, [r3, #0]
 800a352:	f7ff bfd3 	b.w	800a2fc <_raise_r>
 800a356:	bf00      	nop
 800a358:	20000028 	.word	0x20000028

0800a35c <_kill_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d07      	ldr	r5, [pc, #28]	; (800a37c <_kill_r+0x20>)
 800a360:	2300      	movs	r3, #0
 800a362:	4604      	mov	r4, r0
 800a364:	4608      	mov	r0, r1
 800a366:	4611      	mov	r1, r2
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	f7f8 fd97 	bl	8002e9c <_kill>
 800a36e:	1c43      	adds	r3, r0, #1
 800a370:	d102      	bne.n	800a378 <_kill_r+0x1c>
 800a372:	682b      	ldr	r3, [r5, #0]
 800a374:	b103      	cbz	r3, 800a378 <_kill_r+0x1c>
 800a376:	6023      	str	r3, [r4, #0]
 800a378:	bd38      	pop	{r3, r4, r5, pc}
 800a37a:	bf00      	nop
 800a37c:	20002f6c 	.word	0x20002f6c

0800a380 <_getpid_r>:
 800a380:	f7f8 bd8a 	b.w	8002e98 <_getpid>

0800a384 <_init>:
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	bf00      	nop
 800a388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38a:	bc08      	pop	{r3}
 800a38c:	469e      	mov	lr, r3
 800a38e:	4770      	bx	lr

0800a390 <_fini>:
 800a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a392:	bf00      	nop
 800a394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a396:	bc08      	pop	{r3}
 800a398:	469e      	mov	lr, r3
 800a39a:	4770      	bx	lr
