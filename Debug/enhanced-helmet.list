
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011bc  0800ce30  0800ce30  0001ce30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfec  0800dfec  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfec  0800dfec  0001dfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dff4  0800dff4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dff4  0800dff4  0001dff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dff8  0800dff8  0001dff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800dffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002340  200001f4  0800e1f0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002534  0800e1f0  00022534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b1f  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317e  00000000  00000000  00038d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0003bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af6f  00000000  00000000  0003ea08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8d1  00000000  00000000  00059977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0cad  00000000  00000000  00076248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116ef5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070fc  00000000  00000000  00116f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ce18 	.word	0x0800ce18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800ce18 	.word	0x0800ce18

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <OV5462_write_i2c_reg>:
#include "OV5462.h"

uint8_t OV5462_write_i2c_reg(OV5462_t* ov5462, int addr, int data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	uint8_t buf[4];
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	121b      	asrs	r3, r3, #8
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	743b      	strb	r3, [r7, #16]
	buf[1] = (uint8_t)(addr & 0xFF); // lower addr byte
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	747b      	strb	r3, [r7, #17]
	buf[2] = data;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	74bb      	strb	r3, [r7, #18]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	f107 0210 	add.w	r2, r7, #16
 8000f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	2178      	movs	r1, #120	; 0x78
 8000f4e:	f002 ffdb 	bl	8003f08 <HAL_I2C_Master_Transmit>
 8000f52:	4603      	mov	r3, r0
 8000f54:	75fb      	strb	r3, [r7, #23]

	if ( ret != HAL_OK ) {
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <OV5462_write_i2c_reg+0x44>
		return 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <OV5462_write_i2c_reg+0x46>
	}

	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <OV5462_write_i2c_regs>:

uint8_t OV5462_write_i2c_regs(OV5462_t* ov5462, const reg_value_pair regs[]) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
	const reg_value_pair* curr = regs;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef ret;

	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000f78:	e015      	b.n	8000fa6 <OV5462_write_i2c_regs+0x3c>
		ret = OV5462_write_i2c_reg(ov5462, curr->addr, curr->value);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	461a      	mov	r2, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffc8 	bl	8000f1c <OV5462_write_i2c_reg>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	72fb      	strb	r3, [r7, #11]
		// do we need a delay here?
		HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f002 f91b 	bl	80031cc <HAL_Delay>
		++curr;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]

		if ( ret != HAL_OK ) {
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <OV5462_write_i2c_regs+0x3c>
			return 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00a      	b.n	8000fbc <OV5462_write_i2c_regs+0x52>
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d1e3      	bne.n	8000f7a <OV5462_write_i2c_regs+0x10>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	789b      	ldrb	r3, [r3, #2]
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d1df      	bne.n	8000f7a <OV5462_write_i2c_regs+0x10>
		}
	}

	return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <OV5462_read_i2c_reg>:

uint8_t OV5462_read_i2c_reg(OV5462_t* ov5462, int addr) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	uint8_t buf[2];
	buf[0] = (uint8_t)(addr >> 8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	121b      	asrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t)(addr & 0xFF);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 2, HAL_MAX_DELAY);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2302      	movs	r3, #2
 8000fec:	2179      	movs	r1, #121	; 0x79
 8000fee:	f002 ff8b 	bl	8003f08 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 1, HAL_MAX_DELAY);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2179      	movs	r1, #121	; 0x79
 8001004:	f003 f87e 	bl	8004104 <HAL_I2C_Master_Receive>

	return buf[0];
 8001008:	7b3b      	ldrb	r3, [r7, #12]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <OV5462_write_spi_reg>:

void OV5462_write_spi_reg(OV5462_t* ov5462, uint8_t addr, uint8_t data) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	4613      	mov	r3, r2
 8001022:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <OV5462_write_spi_reg+0x5c>)
 800102a:	f002 fdeb 	bl	8003c04 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr | 0x80 };
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001034:	b2db      	uxtb	r3, r3
 8001036:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6858      	ldr	r0, [r3, #4]
 800103c:	f107 010c 	add.w	r1, r7, #12
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2201      	movs	r2, #1
 8001044:	f004 fad3 	bl	80055ee <HAL_SPI_Transmit>
	buf[0] = data;
 8001048:	78bb      	ldrb	r3, [r7, #2]
 800104a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6858      	ldr	r0, [r3, #4]
 8001050:	f107 010c 	add.w	r1, r7, #12
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	2201      	movs	r2, #1
 8001058:	f004 fac9 	bl	80055ee <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 800105c:	2201      	movs	r2, #1
 800105e:	2110      	movs	r1, #16
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <OV5462_write_spi_reg+0x5c>)
 8001062:	f002 fdcf 	bl	8003c04 <HAL_GPIO_WritePin>

//	HAL_Delay(100);
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020800 	.word	0x40020800

08001074 <OV5462_read_spi_reg>:

uint8_t OV5462_read_spi_reg(OV5462_t* ov5462, uint8_t addr) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001080:	2200      	movs	r2, #0
 8001082:	2110      	movs	r1, #16
 8001084:	480f      	ldr	r0, [pc, #60]	; (80010c4 <OV5462_read_spi_reg+0x50>)
 8001086:	f002 fdbd 	bl	8003c04 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr };
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6858      	ldr	r0, [r3, #4]
 8001092:	f107 010c 	add.w	r1, r7, #12
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	2201      	movs	r2, #1
 800109a:	f004 faa8 	bl	80055ee <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6858      	ldr	r0, [r3, #4]
 80010a2:	f107 010c 	add.w	r1, r7, #12
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	2201      	movs	r2, #1
 80010aa:	f004 fbdc 	bl	8005866 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 80010ae:	2201      	movs	r2, #1
 80010b0:	2110      	movs	r1, #16
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <OV5462_read_spi_reg+0x50>)
 80010b4:	f002 fda6 	bl	8003c04 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	return buf[0];
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020800 	.word	0x40020800

080010c8 <OV5462_init>:


uint8_t OV5462_init(OV5462_t* ov5462) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select is default HIGH
 80010d0:	2201      	movs	r2, #1
 80010d2:	2110      	movs	r1, #16
 80010d4:	482d      	ldr	r0, [pc, #180]	; (800118c <OV5462_init+0xc4>)
 80010d6:	f002 fd95 	bl	8003c04 <HAL_GPIO_WritePin>

	OV5462_write_i2c_reg(ov5462, 0x3008, 0x80);
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	f243 0108 	movw	r1, #12296	; 0x3008
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff1b 	bl	8000f1c <OV5462_write_i2c_reg>
	OV5462_write_i2c_regs(ov5462, SET_QVGA_MODE); // determine if we need to do this for our application
 80010e6:	492a      	ldr	r1, [pc, #168]	; (8001190 <OV5462_init+0xc8>)
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff3e 	bl	8000f6a <OV5462_write_i2c_regs>

	uint8_t err = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
	// configure camera for JPEG capture
	err |= OV5462_write_i2c_regs(ov5462, CONFIGURE_JPEG_CAPTURE); // use JPEG capture mode
 80010f2:	4928      	ldr	r1, [pc, #160]	; (8001194 <OV5462_init+0xcc>)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff38 	bl	8000f6a <OV5462_write_i2c_regs>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4313      	orrs	r3, r2
 8001102:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_regs(ov5462, SET_RESOLUTION_320X240); // set sensor to low resolution
 8001104:	4924      	ldr	r1, [pc, #144]	; (8001198 <OV5462_init+0xd0>)
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff2f 	bl	8000f6a <OV5462_write_i2c_regs>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	4313      	orrs	r3, r2
 8001114:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3818, 0xa8);
 8001116:	22a8      	movs	r2, #168	; 0xa8
 8001118:	f643 0118 	movw	r1, #14360	; 0x3818
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fefd 	bl	8000f1c <OV5462_write_i2c_reg>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	4313      	orrs	r3, r2
 800112a:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3621, 0x10);
 800112c:	2210      	movs	r2, #16
 800112e:	f243 6121 	movw	r1, #13857	; 0x3621
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fef2 	bl	8000f1c <OV5462_write_i2c_reg>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	4313      	orrs	r3, r2
 8001140:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3801, 0xb0);
 8001142:	22b0      	movs	r2, #176	; 0xb0
 8001144:	f643 0101 	movw	r1, #14337	; 0x3801
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fee7 	bl	8000f1c <OV5462_write_i2c_reg>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	4313      	orrs	r3, r2
 8001156:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x4407, 0x04); // 04?
 8001158:	2204      	movs	r2, #4
 800115a:	f244 4107 	movw	r1, #17415	; 0x4407
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fedc 	bl	8000f1c <OV5462_write_i2c_reg>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4313      	orrs	r3, r2
 800116c:	73fb      	strb	r3, [r7, #15]

	OV5462_write_spi_reg(ov5462, OV5462_ARDUCHIP_TIM, OV5462_VSYNC_LEVEL_MASK);
 800116e:	2202      	movs	r2, #2
 8001170:	2103      	movs	r1, #3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4e 	bl	8001014 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8001178:	2201      	movs	r2, #1
 800117a:	2104      	movs	r1, #4
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff49 	bl	8001014 <OV5462_write_spi_reg>

	return err;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40020800 	.word	0x40020800
 8001190:	0800d13c 	.word	0x0800d13c
 8001194:	0800da5c 	.word	0x0800da5c
 8001198:	0800d0d0 	.word	0x0800d0d0

0800119c <OV5462_continuous_capture_init>:

void OV5462_continuous_capture_init(OV5462_t* ov5462) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	uint8_t camera_version = OV5462_read_spi_reg(ov5462, 0x40);
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff64 	bl	8001074 <OV5462_read_spi_reg>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73bb      	strb	r3, [r7, #14]
	uint8_t frames;

	// set continuous capture (depends on version)
	if (camera_version && 0x70) {
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <OV5462_continuous_capture_init+0x20>
		frames = 0xFF;
 80011b6:	23ff      	movs	r3, #255	; 0xff
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e001      	b.n	80011c0 <OV5462_continuous_capture_init+0x24>
	} else {
		frames = 0x07;
 80011bc:	2307      	movs	r3, #7
 80011be:	73fb      	strb	r3, [r7, #15]
	}

	OV5462_write_spi_reg(ov5462, ARDUCHIP_FRAMES, frames);
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	461a      	mov	r2, r3
 80011c4:	2101      	movs	r1, #1
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff24 	bl	8001014 <OV5462_write_spi_reg>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <OV5462_read_fifo_length>:

uint32_t OV5462_read_fifo_length(OV5462_t* ov5462) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	uint32_t lower, middle, upper;
	lower = OV5462_read_spi_reg(ov5462, FIFO_SIZE_LOWER);
 80011dc:	2142      	movs	r1, #66	; 0x42
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff48 	bl	8001074 <OV5462_read_spi_reg>
 80011e4:	4603      	mov	r3, r0
 80011e6:	617b      	str	r3, [r7, #20]
	middle = OV5462_read_spi_reg(ov5462, FIFO_SIZE_MIDDLE);
 80011e8:	2143      	movs	r1, #67	; 0x43
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff42 	bl	8001074 <OV5462_read_spi_reg>
 80011f0:	4603      	mov	r3, r0
 80011f2:	613b      	str	r3, [r7, #16]
	upper = OV5462_read_spi_reg(ov5462, FIFO_SIZE_UPPER);
 80011f4:	2144      	movs	r1, #68	; 0x44
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff3c 	bl	8001074 <OV5462_read_spi_reg>
 80011fc:	4603      	mov	r3, r0
 80011fe:	60fb      	str	r3, [r7, #12]

	return ((upper << 16) | (middle << 8) | lower) & 0x07fffff;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	041a      	lsls	r2, r3, #16
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <OV5462_request_FIFO_burst>:

void OV5462_request_FIFO_burst(OV5462_t* ov5462) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
	uint8_t buf[1] = { BURST_FIFO_READ };
 8001222:	233c      	movs	r3, #60	; 0x3c
 8001224:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6858      	ldr	r0, [r3, #4]
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	2201      	movs	r2, #1
 8001232:	f004 f9dc 	bl	80055ee <HAL_SPI_Transmit>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <SPI_OptimizedReadByte>:

void SPI_OptimizedReadByte(uint8_t* data) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	while (((SPI1->SR)&(1>>7))) {}; // wait for BSY bit to reset
 8001248:	bf00      	nop
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <SPI_OptimizedReadByte+0x38>)
 800124c:	689b      	ldr	r3, [r3, #8]
	SPI1->DR = 0; // dummy byte
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <SPI_OptimizedReadByte+0x38>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
	while (!((SPI1->SR) & (1<<0))) {};
 8001254:	bf00      	nop
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <SPI_OptimizedReadByte+0x38>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f9      	beq.n	8001256 <SPI_OptimizedReadByte+0x16>
	*data = SPI1->DR;
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SPI_OptimizedReadByte+0x38>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	701a      	strb	r2, [r3, #0]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40013000 	.word	0x40013000

0800127c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2102      	movs	r1, #2
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <SELECT+0x18>)
 8001286:	f002 fcbd 	bl	8003c04 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f001 ff9e 	bl	80031cc <HAL_Delay>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40020800 	.word	0x40020800

08001298 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2102      	movs	r1, #2
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <DESELECT+0x18>)
 80012a2:	f002 fcaf 	bl	8003c04 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f001 ff90 	bl	80031cc <HAL_Delay>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020800 	.word	0x40020800

080012b4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012be:	bf00      	nop
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <SPI_TxByte+0x30>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d1f8      	bne.n	80012c0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80012ce:	1df9      	adds	r1, r7, #7
 80012d0:	2364      	movs	r3, #100	; 0x64
 80012d2:	2201      	movs	r2, #1
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <SPI_TxByte+0x30>)
 80012d6:	f004 f98a 	bl	80055ee <HAL_SPI_Transmit>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000030c 	.word	0x2000030c

080012e8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012f4:	bf00      	nop
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <SPI_TxBuffer+0x30>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b02      	cmp	r3, #2
 8001302:	d1f8      	bne.n	80012f6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001304:	887a      	ldrh	r2, [r7, #2]
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4803      	ldr	r0, [pc, #12]	; (8001318 <SPI_TxBuffer+0x30>)
 800130c:	f004 f96f 	bl	80055ee <HAL_SPI_Transmit>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000030c 	.word	0x2000030c

0800131c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001322:	23ff      	movs	r3, #255	; 0xff
 8001324:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001326:	bf00      	nop
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <SPI_RxByte+0x34>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b02      	cmp	r3, #2
 8001334:	d1f8      	bne.n	8001328 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001336:	1dba      	adds	r2, r7, #6
 8001338:	1df9      	adds	r1, r7, #7
 800133a:	2364      	movs	r3, #100	; 0x64
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2301      	movs	r3, #1
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <SPI_RxByte+0x34>)
 8001342:	f004 fba1 	bl	8005a88 <HAL_SPI_TransmitReceive>

	return data;
 8001346:	79bb      	ldrb	r3, [r7, #6]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000030c 	.word	0x2000030c

08001354 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800135c:	f7ff ffde 	bl	800131c <SPI_RxByte>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	701a      	strb	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <SD_ReadyWait+0x30>)
 8001378:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800137c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800137e:	f7ff ffcd 	bl	800131c <SPI_RxByte>
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d003      	beq.n	8001394 <SD_ReadyWait+0x24>
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SD_ReadyWait+0x30>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f4      	bne.n	800137e <SD_ReadyWait+0xe>

	return res;
 8001394:	79fb      	ldrb	r3, [r7, #7]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000212 	.word	0x20000212

080013a4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80013aa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013ae:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80013b0:	f7ff ff72 	bl	8001298 <DESELECT>
	for(int i = 0; i < 10; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	e005      	b.n	80013c6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80013ba:	20ff      	movs	r0, #255	; 0xff
 80013bc:	f7ff ff7a 	bl	80012b4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	ddf6      	ble.n	80013ba <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80013cc:	f7ff ff56 	bl	800127c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80013e4:	2395      	movs	r3, #149	; 0x95
 80013e6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80013e8:	463b      	mov	r3, r7
 80013ea:	2106      	movs	r1, #6
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff7b 	bl	80012e8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80013f2:	e002      	b.n	80013fa <SD_PowerOn+0x56>
	{
		cnt--;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80013fa:	f7ff ff8f 	bl	800131c <SPI_RxByte>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b01      	cmp	r3, #1
 8001402:	d002      	beq.n	800140a <SD_PowerOn+0x66>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f4      	bne.n	80013f4 <SD_PowerOn+0x50>
	}

	DESELECT();
 800140a:	f7ff ff45 	bl	8001298 <DESELECT>
	SPI_TxByte(0XFF);
 800140e:	20ff      	movs	r0, #255	; 0xff
 8001410:	f7ff ff50 	bl	80012b4 <SPI_TxByte>

	PowerFlag = 1;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <SD_PowerOn+0x80>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000215 	.word	0x20000215

08001428 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <SD_PowerOff+0x14>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000215 	.word	0x20000215

08001440 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <SD_CheckPower+0x14>)
 8001446:	781b      	ldrb	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000215 	.word	0x20000215

08001458 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <SD_RxDataBlock+0x58>)
 8001464:	22c8      	movs	r2, #200	; 0xc8
 8001466:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001468:	f7ff ff58 	bl	800131c <SPI_RxByte>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2bff      	cmp	r3, #255	; 0xff
 8001474:	d103      	bne.n	800147e <SD_RxDataBlock+0x26>
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <SD_RxDataBlock+0x58>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f4      	bne.n	8001468 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2bfe      	cmp	r3, #254	; 0xfe
 8001482:	d001      	beq.n	8001488 <SD_RxDataBlock+0x30>
 8001484:	2300      	movs	r3, #0
 8001486:	e00f      	b.n	80014a8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff60 	bl	8001354 <SPI_RxBytePtr>
	} while(len--);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	1e5a      	subs	r2, r3, #1
 8001498:	603a      	str	r2, [r7, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f4      	bne.n	8001488 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800149e:	f7ff ff3d 	bl	800131c <SPI_RxByte>
	SPI_RxByte();
 80014a2:	f7ff ff3b 	bl	800131c <SPI_RxByte>

	return TRUE;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000210 	.word	0x20000210

080014b4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80014c4:	f7ff ff54 	bl	8001370 <SD_ReadyWait>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2bff      	cmp	r3, #255	; 0xff
 80014cc:	d001      	beq.n	80014d2 <SD_TxDataBlock+0x1e>
 80014ce:	2300      	movs	r3, #0
 80014d0:	e02f      	b.n	8001532 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff feed 	bl	80012b4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	2bfd      	cmp	r3, #253	; 0xfd
 80014de:	d020      	beq.n	8001522 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80014e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff feff 	bl	80012e8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80014ea:	f7ff ff17 	bl	800131c <SPI_RxByte>
		SPI_RxByte();
 80014ee:	f7ff ff15 	bl	800131c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80014f2:	e00b      	b.n	800150c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80014f4:	f7ff ff12 	bl	800131c <SPI_RxByte>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2b05      	cmp	r3, #5
 8001504:	d006      	beq.n	8001514 <SD_TxDataBlock+0x60>
			i++;
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	3301      	adds	r3, #1
 800150a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	2b40      	cmp	r3, #64	; 0x40
 8001510:	d9f0      	bls.n	80014f4 <SD_TxDataBlock+0x40>
 8001512:	e000      	b.n	8001516 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001514:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001516:	bf00      	nop
 8001518:	f7ff ff00 	bl	800131c <SPI_RxByte>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0fa      	beq.n	8001518 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	2b05      	cmp	r3, #5
 800152a:	d101      	bne.n	8001530 <SD_TxDataBlock+0x7c>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	6039      	str	r1, [r7, #0]
 8001544:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001546:	f7ff ff13 	bl	8001370 <SD_ReadyWait>
 800154a:	4603      	mov	r3, r0
 800154c:	2bff      	cmp	r3, #255	; 0xff
 800154e:	d001      	beq.n	8001554 <SD_SendCmd+0x1a>
 8001550:	23ff      	movs	r3, #255	; 0xff
 8001552:	e042      	b.n	80015da <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff feac 	bl	80012b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	0e1b      	lsrs	r3, r3, #24
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fea6 	bl	80012b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fea0 	bl	80012b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe9a 	bl	80012b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fe95 	bl	80012b4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b40      	cmp	r3, #64	; 0x40
 800158e:	d102      	bne.n	8001596 <SD_SendCmd+0x5c>
 8001590:	2395      	movs	r3, #149	; 0x95
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e007      	b.n	80015a6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b48      	cmp	r3, #72	; 0x48
 800159a:	d102      	bne.n	80015a2 <SD_SendCmd+0x68>
 800159c:	2387      	movs	r3, #135	; 0x87
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e001      	b.n	80015a6 <SD_SendCmd+0x6c>
	else crc = 1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fe83 	bl	80012b4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b4c      	cmp	r3, #76	; 0x4c
 80015b2:	d101      	bne.n	80015b8 <SD_SendCmd+0x7e>
 80015b4:	f7ff feb2 	bl	800131c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80015b8:	230a      	movs	r3, #10
 80015ba:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80015bc:	f7ff feae 	bl	800131c <SPI_RxByte>
 80015c0:	4603      	mov	r3, r0
 80015c2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80015c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da05      	bge.n	80015d8 <SD_SendCmd+0x9e>
 80015cc:	7bbb      	ldrb	r3, [r7, #14]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	73bb      	strb	r3, [r7, #14]
 80015d2:	7bbb      	ldrb	r3, [r7, #14]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f1      	bne.n	80015bc <SD_SendCmd+0x82>

	return res;
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SD_disk_initialize+0x14>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0d1      	b.n	800179c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80015f8:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <SD_disk_initialize+0x1c0>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <SD_disk_initialize+0x2a>
 8001606:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <SD_disk_initialize+0x1c0>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	e0c6      	b.n	800179c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800160e:	f7ff fec9 	bl	80013a4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001612:	f7ff fe33 	bl	800127c <SELECT>

	/* check disk type */
	type = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800161a:	2100      	movs	r1, #0
 800161c:	2040      	movs	r0, #64	; 0x40
 800161e:	f7ff ff8c 	bl	800153a <SD_SendCmd>
 8001622:	4603      	mov	r3, r0
 8001624:	2b01      	cmp	r3, #1
 8001626:	f040 80a1 	bne.w	800176c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800162a:	4b5f      	ldr	r3, [pc, #380]	; (80017a8 <SD_disk_initialize+0x1c4>)
 800162c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001630:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001632:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001636:	2048      	movs	r0, #72	; 0x48
 8001638:	f7ff ff7f 	bl	800153a <SD_SendCmd>
 800163c:	4603      	mov	r3, r0
 800163e:	2b01      	cmp	r3, #1
 8001640:	d155      	bne.n	80016ee <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e00c      	b.n	8001662 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001648:	7bfc      	ldrb	r4, [r7, #15]
 800164a:	f7ff fe67 	bl	800131c <SPI_RxByte>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	f104 0310 	add.w	r3, r4, #16
 8001656:	443b      	add	r3, r7
 8001658:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	3301      	adds	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d9ef      	bls.n	8001648 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001668:	7abb      	ldrb	r3, [r7, #10]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d17e      	bne.n	800176c <SD_disk_initialize+0x188>
 800166e:	7afb      	ldrb	r3, [r7, #11]
 8001670:	2baa      	cmp	r3, #170	; 0xaa
 8001672:	d17b      	bne.n	800176c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001674:	2100      	movs	r1, #0
 8001676:	2077      	movs	r0, #119	; 0x77
 8001678:	f7ff ff5f 	bl	800153a <SD_SendCmd>
 800167c:	4603      	mov	r3, r0
 800167e:	2b01      	cmp	r3, #1
 8001680:	d807      	bhi.n	8001692 <SD_disk_initialize+0xae>
 8001682:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001686:	2069      	movs	r0, #105	; 0x69
 8001688:	f7ff ff57 	bl	800153a <SD_SendCmd>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001692:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <SD_disk_initialize+0x1c4>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ec      	bne.n	8001674 <SD_disk_initialize+0x90>
 800169a:	e000      	b.n	800169e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800169c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800169e:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <SD_disk_initialize+0x1c4>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d062      	beq.n	800176c <SD_disk_initialize+0x188>
 80016a6:	2100      	movs	r1, #0
 80016a8:	207a      	movs	r0, #122	; 0x7a
 80016aa:	f7ff ff46 	bl	800153a <SD_SendCmd>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d15b      	bne.n	800176c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e00c      	b.n	80016d4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80016ba:	7bfc      	ldrb	r4, [r7, #15]
 80016bc:	f7ff fe2e 	bl	800131c <SPI_RxByte>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	f104 0310 	add.w	r3, r4, #16
 80016c8:	443b      	add	r3, r7
 80016ca:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d9ef      	bls.n	80016ba <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80016da:	7a3b      	ldrb	r3, [r7, #8]
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SD_disk_initialize+0x104>
 80016e4:	230c      	movs	r3, #12
 80016e6:	e000      	b.n	80016ea <SD_disk_initialize+0x106>
 80016e8:	2304      	movs	r3, #4
 80016ea:	73bb      	strb	r3, [r7, #14]
 80016ec:	e03e      	b.n	800176c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80016ee:	2100      	movs	r1, #0
 80016f0:	2077      	movs	r0, #119	; 0x77
 80016f2:	f7ff ff22 	bl	800153a <SD_SendCmd>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d808      	bhi.n	800170e <SD_disk_initialize+0x12a>
 80016fc:	2100      	movs	r1, #0
 80016fe:	2069      	movs	r0, #105	; 0x69
 8001700:	f7ff ff1b 	bl	800153a <SD_SendCmd>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d801      	bhi.n	800170e <SD_disk_initialize+0x12a>
 800170a:	2302      	movs	r3, #2
 800170c:	e000      	b.n	8001710 <SD_disk_initialize+0x12c>
 800170e:	2301      	movs	r3, #1
 8001710:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001712:	7bbb      	ldrb	r3, [r7, #14]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d10e      	bne.n	8001736 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001718:	2100      	movs	r1, #0
 800171a:	2077      	movs	r0, #119	; 0x77
 800171c:	f7ff ff0d 	bl	800153a <SD_SendCmd>
 8001720:	4603      	mov	r3, r0
 8001722:	2b01      	cmp	r3, #1
 8001724:	d80e      	bhi.n	8001744 <SD_disk_initialize+0x160>
 8001726:	2100      	movs	r1, #0
 8001728:	2069      	movs	r0, #105	; 0x69
 800172a:	f7ff ff06 	bl	800153a <SD_SendCmd>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <SD_disk_initialize+0x160>
 8001734:	e00c      	b.n	8001750 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001736:	2100      	movs	r1, #0
 8001738:	2041      	movs	r0, #65	; 0x41
 800173a:	f7ff fefe 	bl	800153a <SD_SendCmd>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <SD_disk_initialize+0x1c4>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e2      	bne.n	8001712 <SD_disk_initialize+0x12e>
 800174c:	e000      	b.n	8001750 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800174e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <SD_disk_initialize+0x1c4>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <SD_disk_initialize+0x184>
 8001758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175c:	2050      	movs	r0, #80	; 0x50
 800175e:	f7ff feec 	bl	800153a <SD_SendCmd>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SD_disk_initialize+0x188>
 8001768:	2300      	movs	r3, #0
 800176a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <SD_disk_initialize+0x1c8>)
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001772:	f7ff fd91 	bl	8001298 <DESELECT>
	SPI_RxByte();
 8001776:	f7ff fdd1 	bl	800131c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <SD_disk_initialize+0x1c0>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SD_disk_initialize+0x1c0>)
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e001      	b.n	8001796 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001792:	f7ff fe49 	bl	8001428 <SD_PowerOff>
	}

	return Stat;
 8001796:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <SD_disk_initialize+0x1c0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000210 	.word	0x20000210
 80017ac:	20000214 	.word	0x20000214

080017b0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SD_disk_status+0x14>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e002      	b.n	80017ca <SD_disk_status+0x1a>
	return Stat;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SD_disk_status+0x28>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000000 	.word	0x20000000

080017dc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <SD_disk_read+0x1c>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <SD_disk_read+0x20>
 80017f8:	2304      	movs	r3, #4
 80017fa:	e051      	b.n	80018a0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <SD_disk_read+0xcc>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SD_disk_read+0x32>
 800180a:	2303      	movs	r3, #3
 800180c:	e048      	b.n	80018a0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <SD_disk_read+0xd0>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <SD_disk_read+0x44>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001820:	f7ff fd2c 	bl	800127c <SELECT>

	if (count == 1)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d111      	bne.n	800184e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	2051      	movs	r0, #81	; 0x51
 800182e:	f7ff fe84 	bl	800153a <SD_SendCmd>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d129      	bne.n	800188c <SD_disk_read+0xb0>
 8001838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800183c:	68b8      	ldr	r0, [r7, #8]
 800183e:	f7ff fe0b 	bl	8001458 <SD_RxDataBlock>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d021      	beq.n	800188c <SD_disk_read+0xb0>
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	e01e      	b.n	800188c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	2052      	movs	r0, #82	; 0x52
 8001852:	f7ff fe72 	bl	800153a <SD_SendCmd>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d117      	bne.n	800188c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800185c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001860:	68b8      	ldr	r0, [r7, #8]
 8001862:	f7ff fdf9 	bl	8001458 <SD_RxDataBlock>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <SD_disk_read+0xa6>
				buff += 512;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001872:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	3b01      	subs	r3, #1
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ed      	bne.n	800185c <SD_disk_read+0x80>
 8001880:	e000      	b.n	8001884 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001882:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001884:	2100      	movs	r1, #0
 8001886:	204c      	movs	r0, #76	; 0x4c
 8001888:	f7ff fe57 	bl	800153a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800188c:	f7ff fd04 	bl	8001298 <DESELECT>
	SPI_RxByte();
 8001890:	f7ff fd44 	bl	800131c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000214 	.word	0x20000214

080018b0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4603      	mov	r3, r0
 80018be:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <SD_disk_write+0x1c>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <SD_disk_write+0x20>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e06b      	b.n	80019a8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80018d0:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <SD_disk_write+0x100>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SD_disk_write+0x32>
 80018de:	2303      	movs	r3, #3
 80018e0:	e062      	b.n	80019a8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <SD_disk_write+0x100>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SD_disk_write+0x44>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e059      	b.n	80019a8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <SD_disk_write+0x104>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <SD_disk_write+0x56>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	607b      	str	r3, [r7, #4]

	SELECT();
 8001906:	f7ff fcb9 	bl	800127c <SELECT>

	if (count == 1)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d110      	bne.n	8001932 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	2058      	movs	r0, #88	; 0x58
 8001914:	f7ff fe11 	bl	800153a <SD_SendCmd>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d13a      	bne.n	8001994 <SD_disk_write+0xe4>
 800191e:	21fe      	movs	r1, #254	; 0xfe
 8001920:	68b8      	ldr	r0, [r7, #8]
 8001922:	f7ff fdc7 	bl	80014b4 <SD_TxDataBlock>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d033      	beq.n	8001994 <SD_disk_write+0xe4>
			count = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	e030      	b.n	8001994 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <SD_disk_write+0x104>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800193e:	2100      	movs	r1, #0
 8001940:	2077      	movs	r0, #119	; 0x77
 8001942:	f7ff fdfa 	bl	800153a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	2057      	movs	r0, #87	; 0x57
 800194a:	f7ff fdf6 	bl	800153a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	2059      	movs	r0, #89	; 0x59
 8001952:	f7ff fdf2 	bl	800153a <SD_SendCmd>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d11b      	bne.n	8001994 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800195c:	21fc      	movs	r1, #252	; 0xfc
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f7ff fda8 	bl	80014b4 <SD_TxDataBlock>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00a      	beq.n	8001980 <SD_disk_write+0xd0>
				buff += 512;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001970:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ee      	bne.n	800195c <SD_disk_write+0xac>
 800197e:	e000      	b.n	8001982 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001980:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001982:	21fd      	movs	r1, #253	; 0xfd
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fd95 	bl	80014b4 <SD_TxDataBlock>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <SD_disk_write+0xe4>
			{
				count = 1;
 8001990:	2301      	movs	r3, #1
 8001992:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001994:	f7ff fc80 	bl	8001298 <DESELECT>
	SPI_RxByte();
 8001998:	f7ff fcc0 	bl	800131c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000214 	.word	0x20000214

080019b8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b08b      	sub	sp, #44	; 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	603a      	str	r2, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	460b      	mov	r3, r1
 80019c6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SD_disk_ioctl+0x1e>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e115      	b.n	8001c02 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d124      	bne.n	8001a2c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d012      	beq.n	8001a10 <SD_disk_ioctl+0x58>
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	dc1a      	bgt.n	8001a24 <SD_disk_ioctl+0x6c>
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <SD_disk_ioctl+0x40>
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d006      	beq.n	8001a04 <SD_disk_ioctl+0x4c>
 80019f6:	e015      	b.n	8001a24 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80019f8:	f7ff fd16 	bl	8001428 <SD_PowerOff>
			res = RES_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a02:	e0fc      	b.n	8001bfe <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001a04:	f7ff fcce 	bl	80013a4 <SD_PowerOn>
			res = RES_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a0e:	e0f6      	b.n	8001bfe <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	1c5c      	adds	r4, r3, #1
 8001a14:	f7ff fd14 	bl	8001440 <SD_CheckPower>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a22:	e0ec      	b.n	8001bfe <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001a24:	2304      	movs	r3, #4
 8001a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a2a:	e0e8      	b.n	8001bfe <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001a2c:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <SD_disk_ioctl+0x254>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SD_disk_ioctl+0x86>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0e1      	b.n	8001c02 <SD_disk_ioctl+0x24a>

		SELECT();
 8001a3e:	f7ff fc1d 	bl	800127c <SELECT>

		switch (ctrl)
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	2b0d      	cmp	r3, #13
 8001a46:	f200 80cb 	bhi.w	8001be0 <SD_disk_ioctl+0x228>
 8001a4a:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <SD_disk_ioctl+0x98>)
 8001a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a50:	08001b4b 	.word	0x08001b4b
 8001a54:	08001a89 	.word	0x08001a89
 8001a58:	08001b3b 	.word	0x08001b3b
 8001a5c:	08001be1 	.word	0x08001be1
 8001a60:	08001be1 	.word	0x08001be1
 8001a64:	08001be1 	.word	0x08001be1
 8001a68:	08001be1 	.word	0x08001be1
 8001a6c:	08001be1 	.word	0x08001be1
 8001a70:	08001be1 	.word	0x08001be1
 8001a74:	08001be1 	.word	0x08001be1
 8001a78:	08001be1 	.word	0x08001be1
 8001a7c:	08001b5d 	.word	0x08001b5d
 8001a80:	08001b81 	.word	0x08001b81
 8001a84:	08001ba5 	.word	0x08001ba5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2049      	movs	r0, #73	; 0x49
 8001a8c:	f7ff fd55 	bl	800153a <SD_SendCmd>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 80a8 	bne.w	8001be8 <SD_disk_ioctl+0x230>
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fcda 	bl	8001458 <SD_RxDataBlock>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 809e 	beq.w	8001be8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001aac:	7b3b      	ldrb	r3, [r7, #12]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d10e      	bne.n	8001ad4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001ab6:	7d7b      	ldrb	r3, [r7, #21]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	7d3b      	ldrb	r3, [r7, #20]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001aca:	8bfb      	ldrh	r3, [r7, #30]
 8001acc:	029a      	lsls	r2, r3, #10
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e02e      	b.n	8001b32 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ad4:	7c7b      	ldrb	r3, [r7, #17]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	7dbb      	ldrb	r3, [r7, #22]
 8001ade:	09db      	lsrs	r3, r3, #7
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	7d7b      	ldrb	r3, [r7, #21]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f003 0306 	and.w	r3, r3, #6
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3302      	adds	r3, #2
 8001af8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001afc:	7d3b      	ldrb	r3, [r7, #20]
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	7cbb      	ldrb	r3, [r7, #18]
 8001b12:	029b      	lsls	r3, r3, #10
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b24:	8bfa      	ldrh	r2, [r7, #30]
 8001b26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b2a:	3b09      	subs	r3, #9
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001b38:	e056      	b.n	8001be8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b40:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b48:	e055      	b.n	8001bf6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001b4a:	f7ff fc11 	bl	8001370 <SD_ReadyWait>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2bff      	cmp	r3, #255	; 0xff
 8001b52:	d14b      	bne.n	8001bec <SD_disk_ioctl+0x234>
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b5a:	e047      	b.n	8001bec <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2049      	movs	r0, #73	; 0x49
 8001b60:	f7ff fceb 	bl	800153a <SD_SendCmd>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d142      	bne.n	8001bf0 <SD_disk_ioctl+0x238>
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	6a38      	ldr	r0, [r7, #32]
 8001b6e:	f7ff fc73 	bl	8001458 <SD_RxDataBlock>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d03b      	beq.n	8001bf0 <SD_disk_ioctl+0x238>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b7e:	e037      	b.n	8001bf0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b80:	2100      	movs	r1, #0
 8001b82:	204a      	movs	r0, #74	; 0x4a
 8001b84:	f7ff fcd9 	bl	800153a <SD_SendCmd>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d132      	bne.n	8001bf4 <SD_disk_ioctl+0x23c>
 8001b8e:	2110      	movs	r1, #16
 8001b90:	6a38      	ldr	r0, [r7, #32]
 8001b92:	f7ff fc61 	bl	8001458 <SD_RxDataBlock>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d02b      	beq.n	8001bf4 <SD_disk_ioctl+0x23c>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ba2:	e027      	b.n	8001bf4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	207a      	movs	r0, #122	; 0x7a
 8001ba8:	f7ff fcc7 	bl	800153a <SD_SendCmd>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d116      	bne.n	8001be0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bb8:	e00b      	b.n	8001bd2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001bba:	6a3c      	ldr	r4, [r7, #32]
 8001bbc:	1c63      	adds	r3, r4, #1
 8001bbe:	623b      	str	r3, [r7, #32]
 8001bc0:	f7ff fbac 	bl	800131c <SPI_RxByte>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d9ef      	bls.n	8001bba <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001be0:	2304      	movs	r3, #4
 8001be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001be6:	e006      	b.n	8001bf6 <SD_disk_ioctl+0x23e>
			break;
 8001be8:	bf00      	nop
 8001bea:	e004      	b.n	8001bf6 <SD_disk_ioctl+0x23e>
			break;
 8001bec:	bf00      	nop
 8001bee:	e002      	b.n	8001bf6 <SD_disk_ioctl+0x23e>
			break;
 8001bf0:	bf00      	nop
 8001bf2:	e000      	b.n	8001bf6 <SD_disk_ioctl+0x23e>
			break;
 8001bf4:	bf00      	nop
		}

		DESELECT();
 8001bf6:	f7ff fb4f 	bl	8001298 <DESELECT>
		SPI_RxByte();
 8001bfa:	f7ff fb8f 	bl	800131c <SPI_RxByte>
	}

	return res;
 8001bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	372c      	adds	r7, #44	; 0x2c
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000

08001c10 <testSD>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int testSD() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
/* Mount SD Card */
	int ret = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
	if(f_mount(&fs, "/", 0) != FR_OK) {
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	495d      	ldr	r1, [pc, #372]	; (8001d94 <testSD+0x184>)
 8001c1e:	485e      	ldr	r0, [pc, #376]	; (8001d98 <testSD+0x188>)
 8001c20:	f007 f8f8 	bl	8008e14 <f_mount>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <testSD+0x26>
		printf("Failed to mount SD Card\r\n");
 8001c2a:	485c      	ldr	r0, [pc, #368]	; (8001d9c <testSD+0x18c>)
 8001c2c:	f008 ff46 	bl	800aabc <puts>
		return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c34:	e0a9      	b.n	8001d8a <testSD+0x17a>
	}

	/* Open file to write */
	ret = f_open(&fil, "/TEST.TXT", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001c36:	2213      	movs	r2, #19
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <testSD+0x190>)
 8001c3a:	485a      	ldr	r0, [pc, #360]	; (8001da4 <testSD+0x194>)
 8001c3c:	f007 f930 	bl	8008ea0 <f_open>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <testSD+0x48>
		printf("Failed to open file (%i) \r\n", ret);
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	4856      	ldr	r0, [pc, #344]	; (8001da8 <testSD+0x198>)
 8001c4e:	f008 feaf 	bl	800a9b0 <iprintf>
		return -1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c56:	e098      	b.n	8001d8a <testSD+0x17a>
	}

	if(f_getfree("", &fre_clust, &pfs) != FR_OK) {
 8001c58:	4a54      	ldr	r2, [pc, #336]	; (8001dac <testSD+0x19c>)
 8001c5a:	4955      	ldr	r1, [pc, #340]	; (8001db0 <testSD+0x1a0>)
 8001c5c:	4855      	ldr	r0, [pc, #340]	; (8001db4 <testSD+0x1a4>)
 8001c5e:	f007 fe86 	bl	800996e <f_getfree>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <testSD+0x64>
		printf("Free space check failed\r\n");
 8001c68:	4853      	ldr	r0, [pc, #332]	; (8001db8 <testSD+0x1a8>)
 8001c6a:	f008 ff27 	bl	800aabc <puts>
		return -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c72:	e08a      	b.n	8001d8a <testSD+0x17a>
	}

	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001c74:	4b4d      	ldr	r3, [pc, #308]	; (8001dac <testSD+0x19c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	3b02      	subs	r3, #2
 8001c7c:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <testSD+0x19c>)
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	8952      	ldrh	r2, [r2, #10]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc54 	bl	8000534 <__aeabi_ui2d>
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <testSD+0x1ac>)
 8001c92:	f7fe fcc9 	bl	8000628 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe ff9b 	bl	8000bd8 <__aeabi_d2uiz>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a46      	ldr	r2, [pc, #280]	; (8001dc0 <testSD+0x1b0>)
 8001ca6:	6013      	str	r3, [r2, #0]
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001ca8:	4b40      	ldr	r3, [pc, #256]	; (8001dac <testSD+0x19c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <testSD+0x1a0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc3b 	bl	8000534 <__aeabi_ui2d>
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <testSD+0x1ac>)
 8001cc4:	f7fe fcb0 	bl	8000628 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe ff82 	bl	8000bd8 <__aeabi_d2uiz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a3b      	ldr	r2, [pc, #236]	; (8001dc4 <testSD+0x1b4>)
 8001cd8:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if(free_space < 1) {
 8001cda:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <testSD+0x1b4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <testSD+0xde>
		printf("Drive is full\r\n");
 8001ce2:	4839      	ldr	r0, [pc, #228]	; (8001dc8 <testSD+0x1b8>)
 8001ce4:	f008 feea 	bl	800aabc <puts>
		return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cec:	e04d      	b.n	8001d8a <testSD+0x17a>
	}

//	printf("SD CARD MOUNTED! TESTING R/W...\r\n");

	f_puts("TEST", &fil);
 8001cee:	492d      	ldr	r1, [pc, #180]	; (8001da4 <testSD+0x194>)
 8001cf0:	4836      	ldr	r0, [pc, #216]	; (8001dcc <testSD+0x1bc>)
 8001cf2:	f008 f850 	bl	8009d96 <f_puts>

	/* Close file */
	ret = f_close(&fil);
 8001cf6:	482b      	ldr	r0, [pc, #172]	; (8001da4 <testSD+0x194>)
 8001cf8:	f007 fe0f 	bl	800991a <f_close>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <testSD+0x104>
		printf("Failed to close file (%i) \r\n", ret);
 8001d06:	68f9      	ldr	r1, [r7, #12]
 8001d08:	4831      	ldr	r0, [pc, #196]	; (8001dd0 <testSD+0x1c0>)
 8001d0a:	f008 fe51 	bl	800a9b0 <iprintf>
		return -1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d12:	e03a      	b.n	8001d8a <testSD+0x17a>
	}

	/* Open file to read */
	ret = f_open(&fil, "/TEST.TXT", FA_READ);
 8001d14:	2201      	movs	r2, #1
 8001d16:	4922      	ldr	r1, [pc, #136]	; (8001da0 <testSD+0x190>)
 8001d18:	4822      	ldr	r0, [pc, #136]	; (8001da4 <testSD+0x194>)
 8001d1a:	f007 f8c1 	bl	8008ea0 <f_open>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <testSD+0x126>
		printf("Failed to open in read mode (%i) \r\n", ret);
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	482a      	ldr	r0, [pc, #168]	; (8001dd4 <testSD+0x1c4>)
 8001d2c:	f008 fe40 	bl	800a9b0 <iprintf>
		return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d34:	e029      	b.n	8001d8a <testSD+0x17a>
	}

	char buffer[5];
	f_gets(buffer, sizeof(buffer), &fil);
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <testSD+0x194>)
 8001d3a:	2105      	movs	r1, #5
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f007 ff76 	bl	8009c2e <f_gets>

	if (strcmp(buffer, "TEST")) {
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4921      	ldr	r1, [pc, #132]	; (8001dcc <testSD+0x1bc>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa4a 	bl	80001e0 <strcmp>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <testSD+0x14e>
		printf("File contents MISMATCH. FAIL R/W test\r\n");
 8001d52:	4821      	ldr	r0, [pc, #132]	; (8001dd8 <testSD+0x1c8>)
 8001d54:	f008 feb2 	bl	800aabc <puts>
		return -1;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d5c:	e015      	b.n	8001d8a <testSD+0x17a>
	}

//	printf("PASSED: read file contents\r\n");

	/* Close file */
	if(f_close(&fil) != FR_OK) {
 8001d5e:	4811      	ldr	r0, [pc, #68]	; (8001da4 <testSD+0x194>)
 8001d60:	f007 fddb 	bl	800991a <f_close>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <testSD+0x166>
		printf("Failed to close\r\n");
 8001d6a:	481c      	ldr	r0, [pc, #112]	; (8001ddc <testSD+0x1cc>)
 8001d6c:	f008 fea6 	bl	800aabc <puts>
		return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d74:	e009      	b.n	8001d8a <testSD+0x17a>
	}

	if(f_unlink("test.txt") != FR_OK) {
 8001d76:	481a      	ldr	r0, [pc, #104]	; (8001de0 <testSD+0x1d0>)
 8001d78:	f007 feae 	bl	8009ad8 <f_unlink>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <testSD+0x178>
		printf("Failed to delete test file \r\n");
 8001d82:	4818      	ldr	r0, [pc, #96]	; (8001de4 <testSD+0x1d4>)
 8001d84:	f008 fe9a 	bl	800aabc <puts>
	}

	return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	0800ce30 	.word	0x0800ce30
 8001d98:	20000448 	.word	0x20000448
 8001d9c:	0800ce34 	.word	0x0800ce34
 8001da0:	0800ce50 	.word	0x0800ce50
 8001da4:	20001480 	.word	0x20001480
 8001da8:	0800ce5c 	.word	0x0800ce5c
 8001dac:	2000147c 	.word	0x2000147c
 8001db0:	200024b0 	.word	0x200024b0
 8001db4:	0800ce78 	.word	0x0800ce78
 8001db8:	0800ce7c 	.word	0x0800ce7c
 8001dbc:	3fe00000 	.word	0x3fe00000
 8001dc0:	200024b4 	.word	0x200024b4
 8001dc4:	200024b8 	.word	0x200024b8
 8001dc8:	0800ce98 	.word	0x0800ce98
 8001dcc:	0800cea8 	.word	0x0800cea8
 8001dd0:	0800ceb0 	.word	0x0800ceb0
 8001dd4:	0800ced0 	.word	0x0800ced0
 8001dd8:	0800cef4 	.word	0x0800cef4
 8001ddc:	0800cf1c 	.word	0x0800cf1c
 8001de0:	0800cf30 	.word	0x0800cf30
 8001de4:	0800cf3c 	.word	0x0800cf3c

08001de8 <read_fifo_and_write_data_file>:

int read_fifo_and_write_data_file() {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
//	while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {}; // wait for buffer to fill before saving
//	while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {}; // wait for final frame

	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_READ); // clear flag
 8001df2:	2220      	movs	r2, #32
 8001df4:	2104      	movs	r1, #4
 8001df6:	48ad      	ldr	r0, [pc, #692]	; (80020ac <read_fifo_and_write_data_file+0x2c4>)
 8001df8:	f7ff f90c 	bl	8001014 <OV5462_write_spi_reg>

	uint8_t temp=0, temp_last=0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e02:	f102 0202 	add.w	r2, r2, #2
 8001e06:	7013      	strb	r3, [r2, #0]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e0e:	f102 020f 	add.w	r2, r2, #15
 8001e12:	7013      	strb	r3, [r2, #0]
	uint32_t length = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e1a:	f102 0214 	add.w	r2, r2, #20
 8001e1e:	6013      	str	r3, [r2, #0]
	int i = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e26:	f102 0210 	add.w	r2, r2, #16
 8001e2a:	6013      	str	r3, [r2, #0]
	uint8_t buf[CHUNK_SIZE];

	static int video_id = 0;

	length = OV5462_read_fifo_length(&ov5462);
 8001e2c:	489f      	ldr	r0, [pc, #636]	; (80020ac <read_fifo_and_write_data_file+0x2c4>)
 8001e2e:	f7ff f9d1 	bl	80011d4 <OV5462_read_fifo_length>
 8001e32:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e36:	f103 0314 	add.w	r3, r3, #20
 8001e3a:	6018      	str	r0, [r3, #0]
	printf("Buffer length: %lu\r\n", length);
 8001e3c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e40:	f103 0314 	add.w	r3, r3, #20
 8001e44:	6819      	ldr	r1, [r3, #0]
 8001e46:	489a      	ldr	r0, [pc, #616]	; (80020b0 <read_fifo_and_write_data_file+0x2c8>)
 8001e48:	f008 fdb2 	bl	800a9b0 <iprintf>

	if (length >= MAX_FIFO_LENGTH) {
 8001e4c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e50:	f103 0314 	add.w	r3, r3, #20
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a97      	ldr	r2, [pc, #604]	; (80020b4 <read_fifo_and_write_data_file+0x2cc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d908      	bls.n	8001e6e <read_fifo_and_write_data_file+0x86>
		printf("Buffer too large\r\n");
 8001e5c:	4896      	ldr	r0, [pc, #600]	; (80020b8 <read_fifo_and_write_data_file+0x2d0>)
 8001e5e:	f008 fe2d 	bl	800aabc <puts>
		length = MAX_FIFO_LENGTH-1;
 8001e62:	4b94      	ldr	r3, [pc, #592]	; (80020b4 <read_fifo_and_write_data_file+0x2cc>)
 8001e64:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e68:	f102 0214 	add.w	r2, r2, #20
 8001e6c:	6013      	str	r3, [r2, #0]
	}

	if (length == 0) {
 8001e6e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e72:	f103 0314 	add.w	r3, r3, #20
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <read_fifo_and_write_data_file+0xa0>
		printf("Buffer empty\r\n");
 8001e7c:	488f      	ldr	r0, [pc, #572]	; (80020bc <read_fifo_and_write_data_file+0x2d4>)
 8001e7e:	f008 fe1d 	bl	800aabc <puts>
		return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e86:	e199      	b.n	80021bc <read_fifo_and_write_data_file+0x3d4>
	}

	length = MAX_FIFO_LENGTH-1; // !! ASSUME BUFFER IS FULL !!
 8001e88:	4b8a      	ldr	r3, [pc, #552]	; (80020b4 <read_fifo_and_write_data_file+0x2cc>)
 8001e8a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e8e:	f102 0214 	add.w	r2, r2, #20
 8001e92:	6013      	str	r3, [r2, #0]

	int filename_len = snprintf(NULL, 0, "%d.DAT", video_id);
 8001e94:	4b8a      	ldr	r3, [pc, #552]	; (80020c0 <read_fifo_and_write_data_file+0x2d8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a8a      	ldr	r2, [pc, #552]	; (80020c4 <read_fifo_and_write_data_file+0x2dc>)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f008 fe25 	bl	800aaec <sniprintf>
 8001ea2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ea6:	f103 0308 	add.w	r3, r3, #8
 8001eaa:	6018      	str	r0, [r3, #0]
	char* filename = malloc(filename_len+1);
 8001eac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001eb0:	f103 0308 	add.w	r3, r3, #8
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f008 f817 	bl	8009eec <malloc>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001ec4:	f102 0204 	add.w	r2, r2, #4
 8001ec8:	6013      	str	r3, [r2, #0]
	snprintf(filename, filename_len+1, "%d.DAT", video_id);
 8001eca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ece:	f103 0308 	add.w	r3, r3, #8
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4b79      	ldr	r3, [pc, #484]	; (80020c0 <read_fifo_and_write_data_file+0x2d8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a79      	ldr	r2, [pc, #484]	; (80020c4 <read_fifo_and_write_data_file+0x2dc>)
 8001ede:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8001ee2:	f100 0004 	add.w	r0, r0, #4
 8001ee6:	6800      	ldr	r0, [r0, #0]
 8001ee8:	f008 fe00 	bl	800aaec <sniprintf>

	FRESULT fr = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001eec:	2213      	movs	r2, #19
 8001eee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ef2:	f103 0304 	add.w	r3, r3, #4
 8001ef6:	6819      	ldr	r1, [r3, #0]
 8001ef8:	4873      	ldr	r0, [pc, #460]	; (80020c8 <read_fifo_and_write_data_file+0x2e0>)
 8001efa:	f006 ffd1 	bl	8008ea0 <f_open>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f04:	f102 0203 	add.w	r2, r2, #3
 8001f08:	7013      	strb	r3, [r2, #0]
	printf("%s\r\n", filename);
 8001f0a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f0e:	f103 0304 	add.w	r3, r3, #4
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	486d      	ldr	r0, [pc, #436]	; (80020cc <read_fifo_and_write_data_file+0x2e4>)
 8001f16:	f008 fd4b 	bl	800a9b0 <iprintf>
	free(filename);
 8001f1a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f1e:	f103 0304 	add.w	r3, r3, #4
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	f007 ffea 	bl	8009efc <free>
	if (fr) printf("file open failed\r\n");
 8001f28:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f2c:	f103 0303 	add.w	r3, r3, #3
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <read_fifo_and_write_data_file+0x154>
 8001f36:	4866      	ldr	r0, [pc, #408]	; (80020d0 <read_fifo_and_write_data_file+0x2e8>)
 8001f38:	f008 fdc0 	bl	800aabc <puts>
	++video_id;
 8001f3c:	4b60      	ldr	r3, [pc, #384]	; (80020c0 <read_fifo_and_write_data_file+0x2d8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	4a5f      	ldr	r2, [pc, #380]	; (80020c0 <read_fifo_and_write_data_file+0x2d8>)
 8001f44:	6013      	str	r3, [r2, #0]
	i = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f4c:	f102 0210 	add.w	r2, r2, #16
 8001f50:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2110      	movs	r1, #16
 8001f56:	485f      	ldr	r0, [pc, #380]	; (80020d4 <read_fifo_and_write_data_file+0x2ec>)
 8001f58:	f001 fe54 	bl	8003c04 <HAL_GPIO_WritePin>
	OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8001f5c:	4853      	ldr	r0, [pc, #332]	; (80020ac <read_fifo_and_write_data_file+0x2c4>)
 8001f5e:	f7ff f95c 	bl	800121a <OV5462_request_FIFO_burst>

	while (length--) {
 8001f62:	e10b      	b.n	800217c <read_fifo_and_write_data_file+0x394>
		temp_last = temp;
 8001f64:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f68:	f103 0302 	add.w	r3, r3, #2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f72:	f102 020f 	add.w	r2, r2, #15
 8001f76:	7013      	strb	r3, [r2, #0]
		SPI_OptimizedReadByte(&temp);
 8001f78:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f7c:	f103 0302 	add.w	r3, r3, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff f95d 	bl	8001240 <SPI_OptimizedReadByte>

		if ((temp == 0xD9) && (temp_last == 0xFF)) { // end of image
 8001f86:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f8a:	f103 0302 	add.w	r3, r3, #2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2bd9      	cmp	r3, #217	; 0xd9
 8001f92:	d137      	bne.n	8002004 <read_fifo_and_write_data_file+0x21c>
 8001f94:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f98:	f103 030f 	add.w	r3, r3, #15
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2bff      	cmp	r3, #255	; 0xff
 8001fa0:	d130      	bne.n	8002004 <read_fifo_and_write_data_file+0x21c>
			buf[i++] = temp;
 8001fa2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fa6:	f103 0310 	add.w	r3, r3, #16
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001fb2:	f101 0110 	add.w	r1, r1, #16
 8001fb6:	600a      	str	r2, [r1, #0]
 8001fb8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001fbc:	f102 0202 	add.w	r2, r2, #2
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	f107 0118 	add.w	r1, r7, #24
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f803 2c18 	strb.w	r2, [r3, #-24]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2110      	movs	r1, #16
 8001fd0:	4840      	ldr	r0, [pc, #256]	; (80020d4 <read_fifo_and_write_data_file+0x2ec>)
 8001fd2:	f001 fe17 	bl	8003c04 <HAL_GPIO_WritePin>

//			printf("EOI\r\n");
			f_write(&fil, buf, sizeof(uint8_t)*i, &bw);
 8001fd6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fda:	f103 0310 	add.w	r3, r3, #16
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	f107 0118 	add.w	r1, r7, #24
 8001fe4:	3918      	subs	r1, #24
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <read_fifo_and_write_data_file+0x2f0>)
 8001fe8:	4837      	ldr	r0, [pc, #220]	; (80020c8 <read_fifo_and_write_data_file+0x2e0>)
 8001fea:	f007 fa84 	bl	80094f6 <f_write>
			is_header = 0;
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <read_fifo_and_write_data_file+0x2f4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	4836      	ldr	r0, [pc, #216]	; (80020d4 <read_fifo_and_write_data_file+0x2ec>)
 8001ffa:	f001 fe03 	bl	8003c04 <HAL_GPIO_WritePin>
			OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8001ffe:	482b      	ldr	r0, [pc, #172]	; (80020ac <read_fifo_and_write_data_file+0x2c4>)
 8002000:	f7ff f90b 	bl	800121a <OV5462_request_FIFO_burst>
		}

		if (is_header) {
 8002004:	4b35      	ldr	r3, [pc, #212]	; (80020dc <read_fifo_and_write_data_file+0x2f4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d069      	beq.n	80020e0 <read_fifo_and_write_data_file+0x2f8>
			if (i < CHUNK_SIZE) {
 800200c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002010:	f103 0310 	add.w	r3, r3, #16
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201a:	da15      	bge.n	8002048 <read_fifo_and_write_data_file+0x260>
				buf[i++] = temp;
 800201c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002020:	f103 0310 	add.w	r3, r3, #16
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800202c:	f101 0110 	add.w	r1, r1, #16
 8002030:	600a      	str	r2, [r1, #0]
 8002032:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002036:	f102 0202 	add.w	r2, r2, #2
 800203a:	7812      	ldrb	r2, [r2, #0]
 800203c:	f107 0118 	add.w	r1, r7, #24
 8002040:	440b      	add	r3, r1
 8002042:	f803 2c18 	strb.w	r2, [r3, #-24]
 8002046:	e099      	b.n	800217c <read_fifo_and_write_data_file+0x394>
			} else {
				HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002048:	2201      	movs	r2, #1
 800204a:	2110      	movs	r1, #16
 800204c:	4821      	ldr	r0, [pc, #132]	; (80020d4 <read_fifo_and_write_data_file+0x2ec>)
 800204e:	f001 fdd9 	bl	8003c04 <HAL_GPIO_WritePin>

				f_write(&fil, buf, sizeof(uint8_t)*CHUNK_SIZE, &bw);
 8002052:	f107 0118 	add.w	r1, r7, #24
 8002056:	3918      	subs	r1, #24
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <read_fifo_and_write_data_file+0x2f0>)
 800205a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800205e:	481a      	ldr	r0, [pc, #104]	; (80020c8 <read_fifo_and_write_data_file+0x2e0>)
 8002060:	f007 fa49 	bl	80094f6 <f_write>
				i = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800206a:	f102 0210 	add.w	r2, r2, #16
 800206e:	6013      	str	r3, [r2, #0]
				buf[i++] = temp;
 8002070:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002074:	f103 0310 	add.w	r3, r3, #16
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002080:	f101 0110 	add.w	r1, r1, #16
 8002084:	600a      	str	r2, [r1, #0]
 8002086:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800208a:	f102 0202 	add.w	r2, r2, #2
 800208e:	7812      	ldrb	r2, [r2, #0]
 8002090:	f107 0118 	add.w	r1, r7, #24
 8002094:	440b      	add	r3, r1
 8002096:	f803 2c18 	strb.w	r2, [r3, #-24]
				HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	2110      	movs	r1, #16
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <read_fifo_and_write_data_file+0x2ec>)
 80020a0:	f001 fdb0 	bl	8003c04 <HAL_GPIO_WritePin>

				OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 80020a4:	4801      	ldr	r0, [pc, #4]	; (80020ac <read_fifo_and_write_data_file+0x2c4>)
 80020a6:	f7ff f8b8 	bl	800121a <OV5462_request_FIFO_burst>
 80020aa:	e067      	b.n	800217c <read_fifo_and_write_data_file+0x394>
 80020ac:	200024bc 	.word	0x200024bc
 80020b0:	0800cf5c 	.word	0x0800cf5c
 80020b4:	007ffffe 	.word	0x007ffffe
 80020b8:	0800cf74 	.word	0x0800cf74
 80020bc:	0800cf88 	.word	0x0800cf88
 80020c0:	200024d8 	.word	0x200024d8
 80020c4:	0800cf98 	.word	0x0800cf98
 80020c8:	20001480 	.word	0x20001480
 80020cc:	0800cfa0 	.word	0x0800cfa0
 80020d0:	0800cfa8 	.word	0x0800cfa8
 80020d4:	40020800 	.word	0x40020800
 80020d8:	200024d4 	.word	0x200024d4
 80020dc:	200024d0 	.word	0x200024d0
			}
		} else if ((temp == 0xD8) && (temp_last == 0xFF)) { // start of new image
 80020e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80020e4:	f103 0302 	add.w	r3, r3, #2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2bd8      	cmp	r3, #216	; 0xd8
 80020ec:	d146      	bne.n	800217c <read_fifo_and_write_data_file+0x394>
 80020ee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80020f2:	f103 030f 	add.w	r3, r3, #15
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2bff      	cmp	r3, #255	; 0xff
 80020fa:	d13f      	bne.n	800217c <read_fifo_and_write_data_file+0x394>
			is_header = 1;
 80020fc:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <read_fifo_and_write_data_file+0x3e0>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002102:	2201      	movs	r2, #1
 8002104:	2110      	movs	r1, #16
 8002106:	4831      	ldr	r0, [pc, #196]	; (80021cc <read_fifo_and_write_data_file+0x3e4>)
 8002108:	f001 fd7c 	bl	8003c04 <HAL_GPIO_WritePin>
			i = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002112:	f102 0210 	add.w	r2, r2, #16
 8002116:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2110      	movs	r1, #16
 800211c:	482b      	ldr	r0, [pc, #172]	; (80021cc <read_fifo_and_write_data_file+0x3e4>)
 800211e:	f001 fd71 	bl	8003c04 <HAL_GPIO_WritePin>

			OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8002122:	482b      	ldr	r0, [pc, #172]	; (80021d0 <read_fifo_and_write_data_file+0x3e8>)
 8002124:	f7ff f879 	bl	800121a <OV5462_request_FIFO_burst>

			buf[i++] = temp_last;
 8002128:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800212c:	f103 0310 	add.w	r3, r3, #16
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002138:	f101 0110 	add.w	r1, r1, #16
 800213c:	600a      	str	r2, [r1, #0]
 800213e:	f107 0218 	add.w	r2, r7, #24
 8002142:	4413      	add	r3, r2
 8002144:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002148:	f102 020f 	add.w	r2, r2, #15
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	f803 2c18 	strb.w	r2, [r3, #-24]
			buf[i++] = temp;
 8002152:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002156:	f103 0310 	add.w	r3, r3, #16
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002162:	f101 0110 	add.w	r1, r1, #16
 8002166:	600a      	str	r2, [r1, #0]
 8002168:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800216c:	f102 0202 	add.w	r2, r2, #2
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	f107 0118 	add.w	r1, r7, #24
 8002176:	440b      	add	r3, r1
 8002178:	f803 2c18 	strb.w	r2, [r3, #-24]
	while (length--) {
 800217c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002180:	f103 0314 	add.w	r3, r3, #20
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800218c:	f101 0114 	add.w	r1, r1, #20
 8002190:	600a      	str	r2, [r1, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f47f aee6 	bne.w	8001f64 <read_fifo_and_write_data_file+0x17c>
		}
	}

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002198:	2201      	movs	r2, #1
 800219a:	2110      	movs	r1, #16
 800219c:	480b      	ldr	r0, [pc, #44]	; (80021cc <read_fifo_and_write_data_file+0x3e4>)
 800219e:	f001 fd31 	bl	8003c04 <HAL_GPIO_WritePin>
	is_header = 0;
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <read_fifo_and_write_data_file+0x3e0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
	f_close(&fil);
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <read_fifo_and_write_data_file+0x3ec>)
 80021aa:	f007 fbb6 	bl	800991a <f_close>
	printf("Save complete \r\n");
 80021ae:	480a      	ldr	r0, [pc, #40]	; (80021d8 <read_fifo_and_write_data_file+0x3f0>)
 80021b0:	f008 fc84 	bl	800aabc <puts>
	save_requested = 0;
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <read_fifo_and_write_data_file+0x3f4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

//	OV5462_continuous_capture_init(&ov5462); // restore continuous capture functionality

	return 0;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200024d0 	.word	0x200024d0
 80021cc:	40020800 	.word	0x40020800
 80021d0:	200024bc 	.word	0x200024bc
 80021d4:	20001480 	.word	0x20001480
 80021d8:	0800cfbc 	.word	0x0800cfbc
 80021dc:	200024c8 	.word	0x200024c8

080021e0 <trigger_capture>:

void trigger_capture() {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	printf("Capture!\r\n");
 80021e4:	480f      	ldr	r0, [pc, #60]	; (8002224 <trigger_capture+0x44>)
 80021e6:	f008 fc69 	bl	800aabc <puts>
	capture_flag = 0;
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <trigger_capture+0x48>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 80021f0:	2201      	movs	r2, #1
 80021f2:	2104      	movs	r1, #4
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <trigger_capture+0x4c>)
 80021f6:	f7fe ff0d 	bl	8001014 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_WRITE);
 80021fa:	2210      	movs	r2, #16
 80021fc:	2104      	movs	r1, #4
 80021fe:	480b      	ldr	r0, [pc, #44]	; (800222c <trigger_capture+0x4c>)
 8002200:	f7fe ff08 	bl	8001014 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_READ);
 8002204:	2220      	movs	r2, #32
 8002206:	2104      	movs	r1, #4
 8002208:	4808      	ldr	r0, [pc, #32]	; (800222c <trigger_capture+0x4c>)
 800220a:	f7fe ff03 	bl	8001014 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 800220e:	2202      	movs	r2, #2
 8002210:	2104      	movs	r1, #4
 8002212:	4806      	ldr	r0, [pc, #24]	; (800222c <trigger_capture+0x4c>)
 8002214:	f7fe fefe 	bl	8001014 <OV5462_write_spi_reg>

	check_capturing = 1;
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <trigger_capture+0x50>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	0800cfcc 	.word	0x0800cfcc
 8002228:	200024c4 	.word	0x200024c4
 800222c:	200024bc 	.word	0x200024bc
 8002230:	200024cc 	.word	0x200024cc

08002234 <set_capture_flag>:

void set_capture_flag(int f) {
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	capture_flag = f;
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <set_capture_flag+0x1c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	200024c4 	.word	0x200024c4

08002254 <set_save_requested>:

void set_save_requested(int f) {
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	save_requested = f;
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <set_save_requested+0x1c>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	200024c8 	.word	0x200024c8

08002274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800227a:	f000 ff35 	bl	80030e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800227e:	f000 f8f1 	bl	8002464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002282:	f000 faf5 	bl	8002870 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002286:	f000 f9ab 	bl	80025e0 <MX_I2C1_Init>
  MX_SPI2_Init();
 800228a:	f000 fa0d 	bl	80026a8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800228e:	f000 fac5 	bl	800281c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002292:	f004 fedd 	bl	8007050 <MX_FATFS_Init>
  MX_ADC1_Init();
 8002296:	f000 f951 	bl	800253c <MX_ADC1_Init>
  MX_SPI1_Init();
 800229a:	f000 f9cf 	bl	800263c <MX_SPI1_Init>
  MX_SPI3_Init();
 800229e:	f000 fa39 	bl	8002714 <MX_SPI3_Init>
  MX_TIM2_Init();
 80022a2:	f000 fa6d 	bl	8002780 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80022a6:	485d      	ldr	r0, [pc, #372]	; (800241c <main+0x1a8>)
 80022a8:	f003 ff10 	bl	80060cc <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 80022ac:	2201      	movs	r2, #1
 80022ae:	2110      	movs	r1, #16
 80022b0:	485b      	ldr	r0, [pc, #364]	; (8002420 <main+0x1ac>)
 80022b2:	f001 fca7 	bl	8003c04 <HAL_GPIO_WritePin>
  	uint8_t buf[1] = { 0x00 }; // dummy write
 80022b6:	2300      	movs	r3, #0
 80022b8:	713b      	strb	r3, [r7, #4]
  	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 80022ba:	1d39      	adds	r1, r7, #4
 80022bc:	2364      	movs	r3, #100	; 0x64
 80022be:	2201      	movs	r2, #1
 80022c0:	4858      	ldr	r0, [pc, #352]	; (8002424 <main+0x1b0>)
 80022c2:	f003 f994 	bl	80055ee <HAL_SPI_Transmit>

  	ov5462.hi2c = &hi2c1;
 80022c6:	4b58      	ldr	r3, [pc, #352]	; (8002428 <main+0x1b4>)
 80022c8:	4a58      	ldr	r2, [pc, #352]	; (800242c <main+0x1b8>)
 80022ca:	601a      	str	r2, [r3, #0]
	ov5462.hspi = &hspi1;
 80022cc:	4b56      	ldr	r3, [pc, #344]	; (8002428 <main+0x1b4>)
 80022ce:	4a55      	ldr	r2, [pc, #340]	; (8002424 <main+0x1b0>)
 80022d0:	605a      	str	r2, [r3, #4]

	printf("program start!\r\n");
 80022d2:	4857      	ldr	r0, [pc, #348]	; (8002430 <main+0x1bc>)
 80022d4:	f008 fbf2 	bl	800aabc <puts>

  	HAL_Delay(1000);
 80022d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022dc:	f000 ff76 	bl	80031cc <HAL_Delay>

  	while (1) {
		if(testSD()) {
 80022e0:	f7ff fc96 	bl	8001c10 <testSD>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <main+0x90>
			printf("SD test FAIL! Retrying...\r\n");
 80022ea:	4852      	ldr	r0, [pc, #328]	; (8002434 <main+0x1c0>)
 80022ec:	f008 fbe6 	bl	800aabc <puts>
			f_mount(NULL, "/", 1);
 80022f0:	2201      	movs	r2, #1
 80022f2:	4951      	ldr	r1, [pc, #324]	; (8002438 <main+0x1c4>)
 80022f4:	2000      	movs	r0, #0
 80022f6:	f006 fd8d 	bl	8008e14 <f_mount>
			HAL_Delay(10000);
 80022fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80022fe:	f000 ff65 	bl	80031cc <HAL_Delay>
 8002302:	e7ed      	b.n	80022e0 <main+0x6c>
		} else {
			printf("SD test PASS!\r\n");
 8002304:	484d      	ldr	r0, [pc, #308]	; (800243c <main+0x1c8>)
 8002306:	f008 fbd9 	bl	800aabc <puts>
			break;
		}
  	}

  	while (1) {
  		OV5462_write_spi_reg(&ov5462, 0x00, 0x25);
 800230a:	2225      	movs	r2, #37	; 0x25
 800230c:	2100      	movs	r1, #0
 800230e:	4846      	ldr	r0, [pc, #280]	; (8002428 <main+0x1b4>)
 8002310:	f7fe fe80 	bl	8001014 <OV5462_write_spi_reg>
  		uint8_t tmp = OV5462_read_spi_reg(&ov5462, 0x00);
 8002314:	2100      	movs	r1, #0
 8002316:	4844      	ldr	r0, [pc, #272]	; (8002428 <main+0x1b4>)
 8002318:	f7fe feac 	bl	8001074 <OV5462_read_spi_reg>
 800231c:	4603      	mov	r3, r0
 800231e:	73fb      	strb	r3, [r7, #15]

  		if (tmp == 0x25) {
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	2b25      	cmp	r3, #37	; 0x25
 8002324:	d103      	bne.n	800232e <main+0xba>
  		printf("SPI Test PASS!\r\n");
 8002326:	4846      	ldr	r0, [pc, #280]	; (8002440 <main+0x1cc>)
 8002328:	f008 fbc8 	bl	800aabc <puts>
  		break; // continue to program
 800232c:	e007      	b.n	800233e <main+0xca>
  		} else {
  		printf("SPI Test FAIL!\r\n");
 800232e:	4845      	ldr	r0, [pc, #276]	; (8002444 <main+0x1d0>)
 8002330:	f008 fbc4 	bl	800aabc <puts>
  		HAL_Delay(1000);
 8002334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002338:	f000 ff48 	bl	80031cc <HAL_Delay>
  	while (1) {
 800233c:	e7e5      	b.n	800230a <main+0x96>
  		}
  	}

  	while (1) {
  		uint8_t upper = OV5462_read_i2c_reg(&ov5462, CHIPID_UPPER);
 800233e:	f243 010a 	movw	r1, #12298	; 0x300a
 8002342:	4839      	ldr	r0, [pc, #228]	; (8002428 <main+0x1b4>)
 8002344:	f7fe fe3e 	bl	8000fc4 <OV5462_read_i2c_reg>
 8002348:	4603      	mov	r3, r0
 800234a:	73bb      	strb	r3, [r7, #14]
  		uint8_t lower = OV5462_read_i2c_reg(&ov5462, CHIPID_LOWER);
 800234c:	f243 010b 	movw	r1, #12299	; 0x300b
 8002350:	4835      	ldr	r0, [pc, #212]	; (8002428 <main+0x1b4>)
 8002352:	f7fe fe37 	bl	8000fc4 <OV5462_read_i2c_reg>
 8002356:	4603      	mov	r3, r0
 8002358:	737b      	strb	r3, [r7, #13]

  		if (upper == 0x56 && lower == 0x42) {
 800235a:	7bbb      	ldrb	r3, [r7, #14]
 800235c:	2b56      	cmp	r3, #86	; 0x56
 800235e:	d10d      	bne.n	800237c <main+0x108>
 8002360:	7b7b      	ldrb	r3, [r7, #13]
 8002362:	2b42      	cmp	r3, #66	; 0x42
 8002364:	d10a      	bne.n	800237c <main+0x108>
  			printf("I2C Test PASS!\r\n");
 8002366:	4838      	ldr	r0, [pc, #224]	; (8002448 <main+0x1d4>)
 8002368:	f008 fba8 	bl	800aabc <puts>
  			break; // continue to program
 800236c:	bf00      	nop
  			HAL_Delay(1000);
  		}
  	}

  	// camera init (sets to JPEG mode)
  	if (OV5462_init(&ov5462)) {
 800236e:	482e      	ldr	r0, [pc, #184]	; (8002428 <main+0x1b4>)
 8002370:	f7fe feaa 	bl	80010c8 <OV5462_init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <main+0x11e>
 800237a:	e007      	b.n	800238c <main+0x118>
  			printf("I2C Test FAIL!\r\n");
 800237c:	4833      	ldr	r0, [pc, #204]	; (800244c <main+0x1d8>)
 800237e:	f008 fb9d 	bl	800aabc <puts>
  			HAL_Delay(1000);
 8002382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002386:	f000 ff21 	bl	80031cc <HAL_Delay>
  	while (1) {
 800238a:	e7d8      	b.n	800233e <main+0xca>
  		printf("Init fail!\r\n");
 800238c:	4830      	ldr	r0, [pc, #192]	; (8002450 <main+0x1dc>)
 800238e:	f008 fb95 	bl	800aabc <puts>
  	}

  	OV5462_continuous_capture_init(&ov5462);
 8002392:	4825      	ldr	r0, [pc, #148]	; (8002428 <main+0x1b4>)
 8002394:	f7fe ff02 	bl	800119c <OV5462_continuous_capture_init>

  	trigger_capture();
 8002398:	f7ff ff22 	bl	80021e0 <trigger_capture>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if (capture_flag && (OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <main+0x1e0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d011      	beq.n	80023c8 <main+0x154>
 80023a4:	2141      	movs	r1, #65	; 0x41
 80023a6:	4820      	ldr	r0, [pc, #128]	; (8002428 <main+0x1b4>)
 80023a8:	f7fe fe64 	bl	8001074 <OV5462_read_spi_reg>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <main+0x154>
		 if (save_requested) {
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <main+0x1e4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <main+0x150>
			 read_fifo_and_write_data_file();
 80023be:	f7ff fd13 	bl	8001de8 <read_fifo_and_write_data_file>
 80023c2:	e001      	b.n	80023c8 <main+0x154>
		 } else {
			 trigger_capture();
 80023c4:	f7ff ff0c 	bl	80021e0 <trigger_capture>
		 }

	 }

	 if (check_capturing && TIM2->CNT < 10000) {
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <main+0x1e8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0e5      	beq.n	800239c <main+0x128>
 80023d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80023da:	4293      	cmp	r3, r2
 80023dc:	d8de      	bhi.n	800239c <main+0x128>
		 if (OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK) {
 80023de:	2141      	movs	r1, #65	; 0x41
 80023e0:	4811      	ldr	r0, [pc, #68]	; (8002428 <main+0x1b4>)
 80023e2:	f7fe fe47 	bl	8001074 <OV5462_read_spi_reg>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0d5      	beq.n	800239c <main+0x128>
			 uint32_t length = OV5462_read_fifo_length(&ov5462);
 80023f0:	480d      	ldr	r0, [pc, #52]	; (8002428 <main+0x1b4>)
 80023f2:	f7fe feef 	bl	80011d4 <OV5462_read_fifo_length>
 80023f6:	60b8      	str	r0, [r7, #8]
			 printf("Premature capture completion! %lu bytes \r\n", length);
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	4819      	ldr	r0, [pc, #100]	; (8002460 <main+0x1ec>)
 80023fc:	f008 fad8 	bl	800a9b0 <iprintf>

			OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8002400:	2201      	movs	r2, #1
 8002402:	2104      	movs	r1, #4
 8002404:	4808      	ldr	r0, [pc, #32]	; (8002428 <main+0x1b4>)
 8002406:	f7fe fe05 	bl	8001014 <OV5462_write_spi_reg>
			OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK);
 800240a:	2202      	movs	r2, #2
 800240c:	2104      	movs	r1, #4
 800240e:	4806      	ldr	r0, [pc, #24]	; (8002428 <main+0x1b4>)
 8002410:	f7fe fe00 	bl	8001014 <OV5462_write_spi_reg>
			check_capturing = 0;
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <main+0x1e8>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
	 if (capture_flag && (OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {
 800241a:	e7bf      	b.n	800239c <main+0x128>
 800241c:	200003bc 	.word	0x200003bc
 8002420:	40020800 	.word	0x40020800
 8002424:	200002b4 	.word	0x200002b4
 8002428:	200024bc 	.word	0x200024bc
 800242c:	20000260 	.word	0x20000260
 8002430:	0800cfd8 	.word	0x0800cfd8
 8002434:	0800cfe8 	.word	0x0800cfe8
 8002438:	0800ce30 	.word	0x0800ce30
 800243c:	0800d004 	.word	0x0800d004
 8002440:	0800d014 	.word	0x0800d014
 8002444:	0800d024 	.word	0x0800d024
 8002448:	0800d034 	.word	0x0800d034
 800244c:	0800d044 	.word	0x0800d044
 8002450:	0800d054 	.word	0x0800d054
 8002454:	200024c4 	.word	0x200024c4
 8002458:	200024c8 	.word	0x200024c8
 800245c:	200024cc 	.word	0x200024cc
 8002460:	0800d060 	.word	0x0800d060

08002464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b094      	sub	sp, #80	; 0x50
 8002468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246a:	f107 0320 	add.w	r3, r7, #32
 800246e:	2230      	movs	r2, #48	; 0x30
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f007 fd4a 	bl	8009f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <SystemClock_Config+0xd0>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	4a28      	ldr	r2, [pc, #160]	; (8002534 <SystemClock_Config+0xd0>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	6413      	str	r3, [r2, #64]	; 0x40
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <SystemClock_Config+0xd0>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	4b23      	ldr	r3, [pc, #140]	; (8002538 <SystemClock_Config+0xd4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024b0:	4a21      	ldr	r2, [pc, #132]	; (8002538 <SystemClock_Config+0xd4>)
 80024b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <SystemClock_Config+0xd4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024c4:	2302      	movs	r3, #2
 80024c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024c8:	2301      	movs	r3, #1
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024cc:	2310      	movs	r3, #16
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d0:	2302      	movs	r3, #2
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d4:	2300      	movs	r3, #0
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80024d8:	2310      	movs	r3, #16
 80024da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80024dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80024e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80024e2:	2304      	movs	r3, #4
 80024e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024e6:	2307      	movs	r3, #7
 80024e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ea:	f107 0320 	add.w	r3, r7, #32
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fb5c 	bl	8004bac <HAL_RCC_OscConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80024fa:	f000 fa63 	bl	80029c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fe:	230f      	movs	r3, #15
 8002500:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002502:	2302      	movs	r3, #2
 8002504:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800250a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800250e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	2102      	movs	r1, #2
 800251a:	4618      	mov	r0, r3
 800251c:	f002 fdbe 	bl	800509c <HAL_RCC_ClockConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002526:	f000 fa4d 	bl	80029c4 <Error_Handler>
  }
}
 800252a:	bf00      	nop
 800252c:	3750      	adds	r7, #80	; 0x50
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40007000 	.word	0x40007000

0800253c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002542:	463b      	mov	r3, r7
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800254e:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <MX_ADC1_Init+0x98>)
 8002550:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <MX_ADC1_Init+0x9c>)
 8002552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002554:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <MX_ADC1_Init+0x98>)
 8002556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800255a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <MX_ADC1_Init+0x98>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <MX_ADC1_Init+0x98>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <MX_ADC1_Init+0x98>)
 800256a:	2200      	movs	r2, #0
 800256c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800256e:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <MX_ADC1_Init+0x98>)
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <MX_ADC1_Init+0x98>)
 8002578:	2200      	movs	r2, #0
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800257c:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <MX_ADC1_Init+0x98>)
 800257e:	4a17      	ldr	r2, [pc, #92]	; (80025dc <MX_ADC1_Init+0xa0>)
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <MX_ADC1_Init+0x98>)
 8002584:	2200      	movs	r2, #0
 8002586:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <MX_ADC1_Init+0x98>)
 800258a:	2201      	movs	r2, #1
 800258c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <MX_ADC1_Init+0x98>)
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <MX_ADC1_Init+0x98>)
 8002598:	2201      	movs	r2, #1
 800259a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <MX_ADC1_Init+0x98>)
 800259e:	f000 fe39 	bl	8003214 <HAL_ADC_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80025a8:	f000 fa0c 	bl	80029c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80025ac:	2308      	movs	r3, #8
 80025ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025b8:	463b      	mov	r3, r7
 80025ba:	4619      	mov	r1, r3
 80025bc:	4805      	ldr	r0, [pc, #20]	; (80025d4 <MX_ADC1_Init+0x98>)
 80025be:	f000 fe6d 	bl	800329c <HAL_ADC_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80025c8:	f000 f9fc 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000218 	.word	0x20000218
 80025d8:	40012000 	.word	0x40012000
 80025dc:	0f000001 	.word	0x0f000001

080025e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <MX_I2C1_Init+0x50>)
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <MX_I2C1_Init+0x54>)
 80025e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <MX_I2C1_Init+0x50>)
 80025ec:	4a12      	ldr	r2, [pc, #72]	; (8002638 <MX_I2C1_Init+0x58>)
 80025ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <MX_I2C1_Init+0x50>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_I2C1_Init+0x50>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <MX_I2C1_Init+0x50>)
 80025fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <MX_I2C1_Init+0x50>)
 8002606:	2200      	movs	r2, #0
 8002608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <MX_I2C1_Init+0x50>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <MX_I2C1_Init+0x50>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <MX_I2C1_Init+0x50>)
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <MX_I2C1_Init+0x50>)
 800261e:	f001 fb2f 	bl	8003c80 <HAL_I2C_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002628:	f000 f9cc 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000260 	.word	0x20000260
 8002634:	40005400 	.word	0x40005400
 8002638:	000186a0 	.word	0x000186a0

0800263c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <MX_SPI1_Init+0x64>)
 8002642:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <MX_SPI1_Init+0x68>)
 8002644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <MX_SPI1_Init+0x64>)
 8002648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800264c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <MX_SPI1_Init+0x64>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <MX_SPI1_Init+0x64>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_SPI1_Init+0x64>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <MX_SPI1_Init+0x64>)
 8002662:	2200      	movs	r2, #0
 8002664:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_SPI1_Init+0x64>)
 8002668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_SPI1_Init+0x64>)
 8002670:	2210      	movs	r2, #16
 8002672:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <MX_SPI1_Init+0x64>)
 8002676:	2200      	movs	r2, #0
 8002678:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_SPI1_Init+0x64>)
 800267c:	2200      	movs	r2, #0
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <MX_SPI1_Init+0x64>)
 8002682:	2200      	movs	r2, #0
 8002684:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_SPI1_Init+0x64>)
 8002688:	220a      	movs	r2, #10
 800268a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800268c:	4804      	ldr	r0, [pc, #16]	; (80026a0 <MX_SPI1_Init+0x64>)
 800268e:	f002 ff25 	bl	80054dc <HAL_SPI_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002698:	f000 f994 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200002b4 	.word	0x200002b4
 80026a4:	40013000 	.word	0x40013000

080026a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <MX_SPI2_Init+0x64>)
 80026ae:	4a18      	ldr	r2, [pc, #96]	; (8002710 <MX_SPI2_Init+0x68>)
 80026b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <MX_SPI2_Init+0x64>)
 80026b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <MX_SPI2_Init+0x64>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <MX_SPI2_Init+0x64>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <MX_SPI2_Init+0x64>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <MX_SPI2_Init+0x64>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <MX_SPI2_Init+0x64>)
 80026d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <MX_SPI2_Init+0x64>)
 80026dc:	2210      	movs	r2, #16
 80026de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <MX_SPI2_Init+0x64>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <MX_SPI2_Init+0x64>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <MX_SPI2_Init+0x64>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <MX_SPI2_Init+0x64>)
 80026f4:	220a      	movs	r2, #10
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026f8:	4804      	ldr	r0, [pc, #16]	; (800270c <MX_SPI2_Init+0x64>)
 80026fa:	f002 feef 	bl	80054dc <HAL_SPI_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002704:	f000 f95e 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}
 800270c:	2000030c 	.word	0x2000030c
 8002710:	40003800 	.word	0x40003800

08002714 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MX_SPI3_Init+0x64>)
 800271a:	4a18      	ldr	r2, [pc, #96]	; (800277c <MX_SPI3_Init+0x68>)
 800271c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <MX_SPI3_Init+0x64>)
 8002720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002724:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_SPI3_Init+0x64>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_SPI3_Init+0x64>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_SPI3_Init+0x64>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_SPI3_Init+0x64>)
 800273a:	2200      	movs	r2, #0
 800273c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_SPI3_Init+0x64>)
 8002740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002744:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_SPI3_Init+0x64>)
 8002748:	2200      	movs	r2, #0
 800274a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <MX_SPI3_Init+0x64>)
 800274e:	2200      	movs	r2, #0
 8002750:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_SPI3_Init+0x64>)
 8002754:	2200      	movs	r2, #0
 8002756:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <MX_SPI3_Init+0x64>)
 800275a:	2200      	movs	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_SPI3_Init+0x64>)
 8002760:	220a      	movs	r2, #10
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002764:	4804      	ldr	r0, [pc, #16]	; (8002778 <MX_SPI3_Init+0x64>)
 8002766:	f002 feb9 	bl	80054dc <HAL_SPI_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002770:	f000 f928 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000364 	.word	0x20000364
 800277c:	40003c00 	.word	0x40003c00

08002780 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002794:	463b      	mov	r3, r7
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <MX_TIM2_Init+0x94>)
 800279e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <MX_TIM2_Init+0x94>)
 80027a6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80027aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <MX_TIM2_Init+0x94>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 610000;
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <MX_TIM2_Init+0x94>)
 80027b4:	4a18      	ldr	r2, [pc, #96]	; (8002818 <MX_TIM2_Init+0x98>)
 80027b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <MX_TIM2_Init+0x94>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <MX_TIM2_Init+0x94>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027c4:	4813      	ldr	r0, [pc, #76]	; (8002814 <MX_TIM2_Init+0x94>)
 80027c6:	f003 fc31 	bl	800602c <HAL_TIM_Base_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80027d0:	f000 f8f8 	bl	80029c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4619      	mov	r1, r3
 80027e0:	480c      	ldr	r0, [pc, #48]	; (8002814 <MX_TIM2_Init+0x94>)
 80027e2:	f003 fddd 	bl	80063a0 <HAL_TIM_ConfigClockSource>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027ec:	f000 f8ea 	bl	80029c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027f8:	463b      	mov	r3, r7
 80027fa:	4619      	mov	r1, r3
 80027fc:	4805      	ldr	r0, [pc, #20]	; (8002814 <MX_TIM2_Init+0x94>)
 80027fe:	f003 ffe3 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002808:	f000 f8dc 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800280c:	bf00      	nop
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	200003bc 	.word	0x200003bc
 8002818:	00094ed0 	.word	0x00094ed0

0800281c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <MX_USART2_UART_Init+0x50>)
 8002824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800282c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002842:	220c      	movs	r2, #12
 8002844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002852:	4805      	ldr	r0, [pc, #20]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002854:	f004 f83a 	bl	80068cc <HAL_UART_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800285e:	f000 f8b1 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000404 	.word	0x20000404
 800286c:	40004400 	.word	0x40004400

08002870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	4b42      	ldr	r3, [pc, #264]	; (8002994 <MX_GPIO_Init+0x124>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a41      	ldr	r2, [pc, #260]	; (8002994 <MX_GPIO_Init+0x124>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <MX_GPIO_Init+0x124>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <MX_GPIO_Init+0x124>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a3a      	ldr	r2, [pc, #232]	; (8002994 <MX_GPIO_Init+0x124>)
 80028ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b38      	ldr	r3, [pc, #224]	; (8002994 <MX_GPIO_Init+0x124>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b34      	ldr	r3, [pc, #208]	; (8002994 <MX_GPIO_Init+0x124>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a33      	ldr	r2, [pc, #204]	; (8002994 <MX_GPIO_Init+0x124>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <MX_GPIO_Init+0x124>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <MX_GPIO_Init+0x124>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <MX_GPIO_Init+0x124>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <MX_GPIO_Init+0x124>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin, GPIO_PIN_RESET);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2112      	movs	r1, #18
 80028fa:	4827      	ldr	r0, [pc, #156]	; (8002998 <MX_GPIO_Init+0x128>)
 80028fc:	f001 f982 	bl	8003c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	2104      	movs	r1, #4
 8002904:	4825      	ldr	r0, [pc, #148]	; (800299c <MX_GPIO_Init+0x12c>)
 8002906:	f001 f97d 	bl	8003c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800290a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800290e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002910:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	481d      	ldr	r0, [pc, #116]	; (8002998 <MX_GPIO_Init+0x128>)
 8002922:	f000 ffeb 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 8002926:	2302      	movs	r3, #2
 8002928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292a:	2301      	movs	r3, #1
 800292c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800292e:	2301      	movs	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4816      	ldr	r0, [pc, #88]	; (8002998 <MX_GPIO_Init+0x128>)
 800293e:	f000 ffdd 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = CAM_SPI1_CS_Pin;
 8002942:	2310      	movs	r3, #16
 8002944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002946:	2301      	movs	r3, #1
 8002948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	480f      	ldr	r0, [pc, #60]	; (8002998 <MX_GPIO_Init+0x128>)
 800295a:	f000 ffcf 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_SPI2_CS_Pin */
  GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 800295e:	2304      	movs	r3, #4
 8002960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002962:	2301      	movs	r3, #1
 8002964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	4809      	ldr	r0, [pc, #36]	; (800299c <MX_GPIO_Init+0x12c>)
 8002976:	f000 ffc1 	bl	80038fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2101      	movs	r1, #1
 800297e:	2028      	movs	r0, #40	; 0x28
 8002980:	f000 ff85 	bl	800388e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002984:	2028      	movs	r0, #40	; 0x28
 8002986:	f000 ff9e 	bl	80038c6 <HAL_NVIC_EnableIRQ>

}
 800298a:	bf00      	nop
 800298c:	3728      	adds	r7, #40	; 0x28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	40020800 	.word	0x40020800
 800299c:	40020400 	.word	0x40020400

080029a0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80029a8:	1d39      	adds	r1, r7, #4
 80029aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ae:	2201      	movs	r2, #1
 80029b0:	4803      	ldr	r0, [pc, #12]	; (80029c0 <__io_putchar+0x20>)
 80029b2:	f003 ffd8 	bl	8006966 <HAL_UART_Transmit>
  return ch;
 80029b6:	687b      	ldr	r3, [r7, #4]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000404 	.word	0x20000404

080029c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029c8:	b672      	cpsid	i
}
 80029ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029cc:	e7fe      	b.n	80029cc <Error_Handler+0x8>
	...

080029d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_MspInit+0x4c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <HAL_MspInit+0x4c>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_MspInit+0x4c>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_MspInit+0x4c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <HAL_MspInit+0x4c>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_MspInit+0x4c>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002a0e:	2005      	movs	r0, #5
 8002a10:	f000 ff32 	bl	8003878 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800

08002a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <HAL_ADC_MspInit+0xb0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d141      	bne.n	8002ac6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <HAL_ADC_MspInit+0xb4>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <HAL_ADC_MspInit+0xb4>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a50:	6453      	str	r3, [r2, #68]	; 0x44
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_ADC_MspInit+0xb4>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <HAL_ADC_MspInit+0xb4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <HAL_ADC_MspInit+0xb4>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_ADC_MspInit+0xb4>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_ADC_MspInit+0xb4>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_ADC_MspInit+0xb4>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_ADC_MspInit+0xb4>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 8002a96:	2301      	movs	r3, #1
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480b      	ldr	r0, [pc, #44]	; (8002ad8 <HAL_ADC_MspInit+0xb8>)
 8002aaa:	f000 ff27 	bl	80038fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4806      	ldr	r0, [pc, #24]	; (8002adc <HAL_ADC_MspInit+0xbc>)
 8002ac2:	f000 ff1b 	bl	80038fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ac6:	bf00      	nop
 8002ac8:	3728      	adds	r7, #40	; 0x28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40012000 	.word	0x40012000
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020400 	.word	0x40020400

08002ae0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <HAL_I2C_MspInit+0x84>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d12b      	bne.n	8002b5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_I2C_MspInit+0x88>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_I2C_MspInit+0x88>)
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_I2C_MspInit+0x88>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8002b1e:	23c0      	movs	r3, #192	; 0xc0
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b22:	2312      	movs	r3, #18
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b2e:	2304      	movs	r3, #4
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <HAL_I2C_MspInit+0x8c>)
 8002b3a:	f000 fedf 	bl	80038fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_I2C_MspInit+0x88>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <HAL_I2C_MspInit+0x88>)
 8002b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_I2C_MspInit+0x88>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b5a:	bf00      	nop
 8002b5c:	3728      	adds	r7, #40	; 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40005400 	.word	0x40005400
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020400 	.word	0x40020400

08002b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08e      	sub	sp, #56	; 0x38
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a5b      	ldr	r2, [pc, #364]	; (8002cfc <HAL_SPI_MspInit+0x18c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d12c      	bne.n	8002bec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
 8002b96:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	4a59      	ldr	r2, [pc, #356]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba2:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbe:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CAM_SPI1_SCK_Pin|CAM_SPI1_MISO_Pin|CAM_SPI1_MOSI_Pin;
 8002bca:	23e0      	movs	r3, #224	; 0xe0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bda:	2305      	movs	r3, #5
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be2:	4619      	mov	r1, r3
 8002be4:	4847      	ldr	r0, [pc, #284]	; (8002d04 <HAL_SPI_MspInit+0x194>)
 8002be6:	f000 fe89 	bl	80038fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002bea:	e082      	b.n	8002cf2 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a45      	ldr	r2, [pc, #276]	; (8002d08 <HAL_SPI_MspInit+0x198>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d14b      	bne.n	8002c8e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a40      	ldr	r2, [pc, #256]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a39      	ldr	r2, [pc, #228]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c52:	2301      	movs	r3, #1
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c5a:	2305      	movs	r3, #5
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c62:	4619      	mov	r1, r3
 8002c64:	4829      	ldr	r0, [pc, #164]	; (8002d0c <HAL_SPI_MspInit+0x19c>)
 8002c66:	f000 fe49 	bl	80038fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8002c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c74:	2301      	movs	r3, #1
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c7c:	2305      	movs	r3, #5
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c84:	4619      	mov	r1, r3
 8002c86:	4822      	ldr	r0, [pc, #136]	; (8002d10 <HAL_SPI_MspInit+0x1a0>)
 8002c88:	f000 fe38 	bl	80038fc <HAL_GPIO_Init>
}
 8002c8c:	e031      	b.n	8002cf2 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <HAL_SPI_MspInit+0x1a4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d12c      	bne.n	8002cf2 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_SPI_MspInit+0x190>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002cd0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cea:	4619      	mov	r1, r3
 8002cec:	4807      	ldr	r0, [pc, #28]	; (8002d0c <HAL_SPI_MspInit+0x19c>)
 8002cee:	f000 fe05 	bl	80038fc <HAL_GPIO_Init>
}
 8002cf2:	bf00      	nop
 8002cf4:	3738      	adds	r7, #56	; 0x38
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40013000 	.word	0x40013000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40003800 	.word	0x40003800
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40003c00 	.word	0x40003c00

08002d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d115      	bne.n	8002d56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <HAL_TIM_Base_MspInit+0x48>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a0b      	ldr	r2, [pc, #44]	; (8002d60 <HAL_TIM_Base_MspInit+0x48>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_TIM_Base_MspInit+0x48>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2102      	movs	r1, #2
 8002d4a:	201c      	movs	r0, #28
 8002d4c:	f000 fd9f 	bl	800388e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d50:	201c      	movs	r0, #28
 8002d52:	f000 fdb8 	bl	80038c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_UART_MspInit+0x84>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d12b      	bne.n	8002dde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <HAL_UART_MspInit+0x88>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a17      	ldr	r2, [pc, #92]	; (8002dec <HAL_UART_MspInit+0x88>)
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_UART_MspInit+0x88>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_UART_MspInit+0x88>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <HAL_UART_MspInit+0x88>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_UART_MspInit+0x88>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dce:	2307      	movs	r3, #7
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <HAL_UART_MspInit+0x8c>)
 8002dda:	f000 fd8f 	bl	80038fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dde:	bf00      	nop
 8002de0:	3728      	adds	r7, #40	; 0x28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40004400 	.word	0x40004400
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020000 	.word	0x40020000

08002df4 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile extern uint8_t Timer1, Timer2;

void SDTimer_Handler() {
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0

	if (Timer1 > 0) {
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <SDTimer_Handler+0x40>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <SDTimer_Handler+0x1c>
		--Timer1;
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <SDTimer_Handler+0x40>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <SDTimer_Handler+0x40>)
 8002e0e:	701a      	strb	r2, [r3, #0]
	}

	if (Timer2 > 0) {
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <SDTimer_Handler+0x44>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <SDTimer_Handler+0x34>
		--Timer2;
 8002e1a:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <SDTimer_Handler+0x44>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SDTimer_Handler+0x44>)
 8002e26:	701a      	strb	r2, [r3, #0]
	}
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000210 	.word	0x20000210
 8002e38:	20000212 	.word	0x20000212

08002e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <NMI_Handler+0x4>

08002e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <HardFault_Handler+0x4>

08002e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <MemManage_Handler+0x4>

08002e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e52:	e7fe      	b.n	8002e52 <BusFault_Handler+0x4>

08002e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e58:	e7fe      	b.n	8002e58 <UsageFault_Handler+0x4>

08002e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <SysTick_Handler+0x30>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <SysTick_Handler+0x30>)
 8002e94:	701a      	strb	r2, [r3, #0]

	if (FatFsCnt >= 10) {
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <SysTick_Handler+0x30>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	d904      	bls.n	8002eaa <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SysTick_Handler+0x30>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002ea6:	f7ff ffa5 	bl	8002df4 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eaa:	f000 f96f 	bl	800318c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200024dc 	.word	0x200024dc

08002eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <TIM2_IRQHandler+0x14>)
 8002ebe:	f003 f967 	bl	8006190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  set_capture_flag(1);
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f7ff f9b6 	bl	8002234 <set_capture_flag>

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200003bc 	.word	0x200003bc

08002ed0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ed4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ed8:	f000 feae 	bl	8003c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  set_save_requested(1);
 8002edc:	2001      	movs	r0, #1
 8002ede:	f7ff f9b9 	bl	8002254 <set_save_requested>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
	return 1;
 8002eea:	2301      	movs	r3, #1
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <_kill>:

int _kill(int pid, int sig)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f00:	f006 ffca 	bl	8009e98 <__errno>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2216      	movs	r2, #22
 8002f08:	601a      	str	r2, [r3, #0]
	return -1;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_exit>:

void _exit (int status)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ffe7 	bl	8002ef6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f28:	e7fe      	b.n	8002f28 <_exit+0x12>

08002f2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e00a      	b.n	8002f52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f3c:	f3af 8000 	nop.w
 8002f40:	4601      	mov	r1, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	60ba      	str	r2, [r7, #8]
 8002f48:	b2ca      	uxtb	r2, r1
 8002f4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	dbf0      	blt.n	8002f3c <_read+0x12>
	}

return len;
 8002f5a:	687b      	ldr	r3, [r7, #4]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e009      	b.n	8002f8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	60ba      	str	r2, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fd0e 	bl	80029a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3301      	adds	r3, #1
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	dbf1      	blt.n	8002f76 <_write+0x12>
	}
	return len;
 8002f92:	687b      	ldr	r3, [r7, #4]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <_close>:

int _close(int file)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	return -1;
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fc4:	605a      	str	r2, [r3, #4]
	return 0;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <_isatty>:

int _isatty(int file)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	return 1;
 8002fdc:	2301      	movs	r3, #1
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
	return 0;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800300c:	4a14      	ldr	r2, [pc, #80]	; (8003060 <_sbrk+0x5c>)
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <_sbrk+0x60>)
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <_sbrk+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <_sbrk+0x64>)
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <_sbrk+0x68>)
 8003024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	429a      	cmp	r2, r3
 8003032:	d207      	bcs.n	8003044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003034:	f006 ff30 	bl	8009e98 <__errno>
 8003038:	4603      	mov	r3, r0
 800303a:	220c      	movs	r2, #12
 800303c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003042:	e009      	b.n	8003058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <_sbrk+0x64>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <_sbrk+0x64>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <_sbrk+0x64>)
 8003054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20018000 	.word	0x20018000
 8003064:	00000400 	.word	0x00000400
 8003068:	200024e0 	.word	0x200024e0
 800306c:	20002538 	.word	0x20002538

08003070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <SystemInit+0x20>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <SystemInit+0x20>)
 800307c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800309a:	490e      	ldr	r1, [pc, #56]	; (80030d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800309c:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800309e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a0:	e002      	b.n	80030a8 <LoopCopyDataInit>

080030a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a6:	3304      	adds	r3, #4

080030a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ac:	d3f9      	bcc.n	80030a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030b0:	4c0b      	ldr	r4, [pc, #44]	; (80030e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b4:	e001      	b.n	80030ba <LoopFillZerobss>

080030b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b8:	3204      	adds	r2, #4

080030ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030bc:	d3fb      	bcc.n	80030b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030be:	f7ff ffd7 	bl	8003070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030c2:	f006 feef 	bl	8009ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030c6:	f7ff f8d5 	bl	8002274 <main>
  bx  lr    
 80030ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80030d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80030d8:	0800dffc 	.word	0x0800dffc
  ldr r2, =_sbss
 80030dc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80030e0:	20002534 	.word	0x20002534

080030e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e4:	e7fe      	b.n	80030e4 <ADC_IRQHandler>
	...

080030e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_Init+0x40>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_Init+0x40>)
 80030f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_Init+0x40>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <HAL_Init+0x40>)
 80030fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_Init+0x40>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a07      	ldr	r2, [pc, #28]	; (8003128 <HAL_Init+0x40>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003110:	2003      	movs	r0, #3
 8003112:	f000 fbb1 	bl	8003878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003116:	2000      	movs	r0, #0
 8003118:	f000 f808 	bl	800312c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800311c:	f7ff fc58 	bl	80029d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023c00 	.word	0x40023c00

0800312c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_InitTick+0x54>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_InitTick+0x58>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003142:	fbb3 f3f1 	udiv	r3, r3, r1
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fbc9 	bl	80038e2 <HAL_SYSTICK_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e00e      	b.n	8003178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b0f      	cmp	r3, #15
 800315e:	d80a      	bhi.n	8003176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003160:	2200      	movs	r2, #0
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003168:	f000 fb91 	bl	800388e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800316c:	4a06      	ldr	r2, [pc, #24]	; (8003188 <HAL_InitTick+0x5c>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000004 	.word	0x20000004
 8003184:	2000000c 	.word	0x2000000c
 8003188:	20000008 	.word	0x20000008

0800318c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_IncTick+0x20>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_IncTick+0x24>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4413      	add	r3, r2
 800319c:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <HAL_IncTick+0x24>)
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	2000000c 	.word	0x2000000c
 80031b0:	200024e4 	.word	0x200024e4

080031b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return uwTick;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_GetTick+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	200024e4 	.word	0x200024e4

080031cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7ff ffee 	bl	80031b4 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e4:	d005      	beq.n	80031f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_Delay+0x44>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031f2:	bf00      	nop
 80031f4:	f7ff ffde 	bl	80031b4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d8f7      	bhi.n	80031f4 <HAL_Delay+0x28>
  {
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000000c 	.word	0x2000000c

08003214 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e033      	b.n	8003292 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff fbf4 	bl	8002a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	d118      	bne.n	8003284 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800325a:	f023 0302 	bic.w	r3, r3, #2
 800325e:	f043 0202 	orr.w	r2, r3, #2
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f93a 	bl	80034e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40
 8003282:	e001      	b.n	8003288 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x1c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e105      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x228>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	d925      	bls.n	8003314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	3b1e      	subs	r3, #30
 80032de:	2207      	movs	r2, #7
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43da      	mvns	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	400a      	ands	r2, r1
 80032ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68d9      	ldr	r1, [r3, #12]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	4603      	mov	r3, r0
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4403      	add	r3, r0
 8003306:	3b1e      	subs	r3, #30
 8003308:	409a      	lsls	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	e022      	b.n	800335a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6919      	ldr	r1, [r3, #16]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	2207      	movs	r2, #7
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	400a      	ands	r2, r1
 8003336:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6919      	ldr	r1, [r3, #16]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	4618      	mov	r0, r3
 800334a:	4603      	mov	r3, r0
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4403      	add	r3, r0
 8003350:	409a      	lsls	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d824      	bhi.n	80033ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b05      	subs	r3, #5
 8003374:	221f      	movs	r2, #31
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	400a      	ands	r2, r1
 8003382:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	3b05      	subs	r3, #5
 800339e:	fa00 f203 	lsl.w	r2, r0, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	635a      	str	r2, [r3, #52]	; 0x34
 80033aa:	e04c      	b.n	8003446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d824      	bhi.n	80033fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	3b23      	subs	r3, #35	; 0x23
 80033c6:	221f      	movs	r2, #31
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43da      	mvns	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	400a      	ands	r2, r1
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	3b23      	subs	r3, #35	; 0x23
 80033f0:	fa00 f203 	lsl.w	r2, r0, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
 80033fc:	e023      	b.n	8003446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	3b41      	subs	r3, #65	; 0x41
 8003410:	221f      	movs	r2, #31
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	400a      	ands	r2, r1
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	4618      	mov	r0, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3b41      	subs	r3, #65	; 0x41
 800343a:	fa00 f203 	lsl.w	r2, r0, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_ADC_ConfigChannel+0x234>)
 8003448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <HAL_ADC_ConfigChannel+0x238>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d109      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1cc>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b12      	cmp	r3, #18
 800345a:	d105      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a19      	ldr	r2, [pc, #100]	; (80034d4 <HAL_ADC_ConfigChannel+0x238>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d123      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x21e>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b10      	cmp	r3, #16
 8003478:	d003      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x1e6>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b11      	cmp	r3, #17
 8003480:	d11b      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b10      	cmp	r3, #16
 8003494:	d111      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <HAL_ADC_ConfigChannel+0x23c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a10      	ldr	r2, [pc, #64]	; (80034dc <HAL_ADC_ConfigChannel+0x240>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	0c9a      	lsrs	r2, r3, #18
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034ac:	e002      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f9      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40012300 	.word	0x40012300
 80034d4:	40012000 	.word	0x40012000
 80034d8:	20000004 	.word	0x20000004
 80034dc:	431bde83 	.word	0x431bde83

080034e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034e8:	4b79      	ldr	r3, [pc, #484]	; (80036d0 <ADC_Init+0x1f0>)
 80034ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	431a      	orrs	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003538:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <ADC_Init+0x1f4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003586:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6899      	ldr	r1, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	e00f      	b.n	80035de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0202 	bic.w	r2, r2, #2
 80035ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7e1b      	ldrb	r3, [r3, #24]
 80035f8:	005a      	lsls	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800362a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	3b01      	subs	r3, #1
 8003638:	035a      	lsls	r2, r3, #13
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	e007      	b.n	8003654 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003652:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	3b01      	subs	r3, #1
 8003670:	051a      	lsls	r2, r3, #20
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003696:	025a      	lsls	r2, r3, #9
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6899      	ldr	r1, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	029a      	lsls	r2, r3, #10
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40012300 	.word	0x40012300
 80036d4:	0f000001 	.word	0x0f000001

080036d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <__NVIC_SetPriorityGrouping+0x44>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f4:	4013      	ands	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800370a:	4a04      	ldr	r2, [pc, #16]	; (800371c <__NVIC_SetPriorityGrouping+0x44>)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	60d3      	str	r3, [r2, #12]
}
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <__NVIC_GetPriorityGrouping+0x18>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	f003 0307 	and.w	r3, r3, #7
}
 800372e:	4618      	mov	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	2b00      	cmp	r3, #0
 800374c:	db0b      	blt.n	8003766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	f003 021f 	and.w	r2, r3, #31
 8003754:	4907      	ldr	r1, [pc, #28]	; (8003774 <__NVIC_EnableIRQ+0x38>)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2001      	movs	r0, #1
 800375e:	fa00 f202 	lsl.w	r2, r0, r2
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000e100 	.word	0xe000e100

08003778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003788:	2b00      	cmp	r3, #0
 800378a:	db0a      	blt.n	80037a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	490c      	ldr	r1, [pc, #48]	; (80037c4 <__NVIC_SetPriority+0x4c>)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	0112      	lsls	r2, r2, #4
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	440b      	add	r3, r1
 800379c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a0:	e00a      	b.n	80037b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4908      	ldr	r1, [pc, #32]	; (80037c8 <__NVIC_SetPriority+0x50>)
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	3b04      	subs	r3, #4
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	440b      	add	r3, r1
 80037b6:	761a      	strb	r2, [r3, #24]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000e100 	.word	0xe000e100
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f1c3 0307 	rsb	r3, r3, #7
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	bf28      	it	cs
 80037ea:	2304      	movcs	r3, #4
 80037ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d902      	bls.n	80037fc <NVIC_EncodePriority+0x30>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3b03      	subs	r3, #3
 80037fa:	e000      	b.n	80037fe <NVIC_EncodePriority+0x32>
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43da      	mvns	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	401a      	ands	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	43d9      	mvns	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003824:	4313      	orrs	r3, r2
         );
}
 8003826:	4618      	mov	r0, r3
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003844:	d301      	bcc.n	800384a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003846:	2301      	movs	r3, #1
 8003848:	e00f      	b.n	800386a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800384a:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <SysTick_Config+0x40>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003852:	210f      	movs	r1, #15
 8003854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003858:	f7ff ff8e 	bl	8003778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <SysTick_Config+0x40>)
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003862:	4b04      	ldr	r3, [pc, #16]	; (8003874 <SysTick_Config+0x40>)
 8003864:	2207      	movs	r2, #7
 8003866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	e000e010 	.word	0xe000e010

08003878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ff29 	bl	80036d8 <__NVIC_SetPriorityGrouping>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800388e:	b580      	push	{r7, lr}
 8003890:	b086      	sub	sp, #24
 8003892:	af00      	add	r7, sp, #0
 8003894:	4603      	mov	r3, r0
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038a0:	f7ff ff3e 	bl	8003720 <__NVIC_GetPriorityGrouping>
 80038a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	6978      	ldr	r0, [r7, #20]
 80038ac:	f7ff ff8e 	bl	80037cc <NVIC_EncodePriority>
 80038b0:	4602      	mov	r2, r0
 80038b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff5d 	bl	8003778 <__NVIC_SetPriority>
}
 80038be:	bf00      	nop
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff31 	bl	800373c <__NVIC_EnableIRQ>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff ffa2 	bl	8003834 <SysTick_Config>
 80038f0:	4603      	mov	r3, r0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	e159      	b.n	8003bcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003918:	2201      	movs	r2, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	f040 8148 	bne.w	8003bc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d005      	beq.n	800394e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800394a:	2b02      	cmp	r3, #2
 800394c:	d130      	bne.n	80039b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	2203      	movs	r2, #3
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003984:	2201      	movs	r2, #1
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 0201 	and.w	r2, r3, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d017      	beq.n	80039ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d123      	bne.n	8003a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	08da      	lsrs	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3208      	adds	r2, #8
 8003a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	220f      	movs	r2, #15
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	08da      	lsrs	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3208      	adds	r2, #8
 8003a3a:	69b9      	ldr	r1, [r7, #24]
 8003a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0203 	and.w	r2, r3, #3
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80a2 	beq.w	8003bc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b57      	ldr	r3, [pc, #348]	; (8003be4 <HAL_GPIO_Init+0x2e8>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	4a56      	ldr	r2, [pc, #344]	; (8003be4 <HAL_GPIO_Init+0x2e8>)
 8003a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a90:	6453      	str	r3, [r2, #68]	; 0x44
 8003a92:	4b54      	ldr	r3, [pc, #336]	; (8003be4 <HAL_GPIO_Init+0x2e8>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a9e:	4a52      	ldr	r2, [pc, #328]	; (8003be8 <HAL_GPIO_Init+0x2ec>)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	089b      	lsrs	r3, r3, #2
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a49      	ldr	r2, [pc, #292]	; (8003bec <HAL_GPIO_Init+0x2f0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d019      	beq.n	8003afe <HAL_GPIO_Init+0x202>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a48      	ldr	r2, [pc, #288]	; (8003bf0 <HAL_GPIO_Init+0x2f4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_GPIO_Init+0x1fe>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a47      	ldr	r2, [pc, #284]	; (8003bf4 <HAL_GPIO_Init+0x2f8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00d      	beq.n	8003af6 <HAL_GPIO_Init+0x1fa>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a46      	ldr	r2, [pc, #280]	; (8003bf8 <HAL_GPIO_Init+0x2fc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <HAL_GPIO_Init+0x1f6>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a45      	ldr	r2, [pc, #276]	; (8003bfc <HAL_GPIO_Init+0x300>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <HAL_GPIO_Init+0x1f2>
 8003aea:	2304      	movs	r3, #4
 8003aec:	e008      	b.n	8003b00 <HAL_GPIO_Init+0x204>
 8003aee:	2307      	movs	r3, #7
 8003af0:	e006      	b.n	8003b00 <HAL_GPIO_Init+0x204>
 8003af2:	2303      	movs	r3, #3
 8003af4:	e004      	b.n	8003b00 <HAL_GPIO_Init+0x204>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e002      	b.n	8003b00 <HAL_GPIO_Init+0x204>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_GPIO_Init+0x204>
 8003afe:	2300      	movs	r3, #0
 8003b00:	69fa      	ldr	r2, [r7, #28]
 8003b02:	f002 0203 	and.w	r2, r2, #3
 8003b06:	0092      	lsls	r2, r2, #2
 8003b08:	4093      	lsls	r3, r2
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b10:	4935      	ldr	r1, [pc, #212]	; (8003be8 <HAL_GPIO_Init+0x2ec>)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	3302      	adds	r3, #2
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b1e:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <HAL_GPIO_Init+0x304>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b42:	4a2f      	ldr	r2, [pc, #188]	; (8003c00 <HAL_GPIO_Init+0x304>)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b48:	4b2d      	ldr	r3, [pc, #180]	; (8003c00 <HAL_GPIO_Init+0x304>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b6c:	4a24      	ldr	r2, [pc, #144]	; (8003c00 <HAL_GPIO_Init+0x304>)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b72:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <HAL_GPIO_Init+0x304>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b96:	4a1a      	ldr	r2, [pc, #104]	; (8003c00 <HAL_GPIO_Init+0x304>)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b9c:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <HAL_GPIO_Init+0x304>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <HAL_GPIO_Init+0x304>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	f67f aea2 	bls.w	8003918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	3724      	adds	r7, #36	; 0x24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40013800 	.word	0x40013800
 8003bec:	40020000 	.word	0x40020000
 8003bf0:	40020400 	.word	0x40020400
 8003bf4:	40020800 	.word	0x40020800
 8003bf8:	40020c00 	.word	0x40020c00
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40013c00 	.word	0x40013c00

08003c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	807b      	strh	r3, [r7, #2]
 8003c10:	4613      	mov	r3, r2
 8003c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c14:	787b      	ldrb	r3, [r7, #1]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c20:	e003      	b.n	8003c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c22:	887b      	ldrh	r3, [r7, #2]
 8003c24:	041a      	lsls	r2, r3, #16
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	619a      	str	r2, [r3, #24]
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c42:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d006      	beq.n	8003c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c4e:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 f806 	bl	8003c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40013c00 	.word	0x40013c00

08003c68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e12b      	b.n	8003eea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fe ff1a 	bl	8002ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2224      	movs	r2, #36	; 0x24
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f001 fbd2 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 8003ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4a81      	ldr	r2, [pc, #516]	; (8003ef4 <HAL_I2C_Init+0x274>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d807      	bhi.n	8003d04 <HAL_I2C_Init+0x84>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a80      	ldr	r2, [pc, #512]	; (8003ef8 <HAL_I2C_Init+0x278>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	bf94      	ite	ls
 8003cfc:	2301      	movls	r3, #1
 8003cfe:	2300      	movhi	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e006      	b.n	8003d12 <HAL_I2C_Init+0x92>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a7d      	ldr	r2, [pc, #500]	; (8003efc <HAL_I2C_Init+0x27c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	bf94      	ite	ls
 8003d0c:	2301      	movls	r3, #1
 8003d0e:	2300      	movhi	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e0e7      	b.n	8003eea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4a78      	ldr	r2, [pc, #480]	; (8003f00 <HAL_I2C_Init+0x280>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0c9b      	lsrs	r3, r3, #18
 8003d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a6a      	ldr	r2, [pc, #424]	; (8003ef4 <HAL_I2C_Init+0x274>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d802      	bhi.n	8003d54 <HAL_I2C_Init+0xd4>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	3301      	adds	r3, #1
 8003d52:	e009      	b.n	8003d68 <HAL_I2C_Init+0xe8>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	4a69      	ldr	r2, [pc, #420]	; (8003f04 <HAL_I2C_Init+0x284>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	3301      	adds	r3, #1
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	495c      	ldr	r1, [pc, #368]	; (8003ef4 <HAL_I2C_Init+0x274>)
 8003d84:	428b      	cmp	r3, r1
 8003d86:	d819      	bhi.n	8003dbc <HAL_I2C_Init+0x13c>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1e59      	subs	r1, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d96:	1c59      	adds	r1, r3, #1
 8003d98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d9c:	400b      	ands	r3, r1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_I2C_Init+0x138>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1e59      	subs	r1, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db0:	3301      	adds	r3, #1
 8003db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db6:	e051      	b.n	8003e5c <HAL_I2C_Init+0x1dc>
 8003db8:	2304      	movs	r3, #4
 8003dba:	e04f      	b.n	8003e5c <HAL_I2C_Init+0x1dc>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d111      	bne.n	8003de8 <HAL_I2C_Init+0x168>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1e58      	subs	r0, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	440b      	add	r3, r1
 8003dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e012      	b.n	8003e0e <HAL_I2C_Init+0x18e>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1e58      	subs	r0, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	0099      	lsls	r1, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_Init+0x196>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e022      	b.n	8003e5c <HAL_I2C_Init+0x1dc>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10e      	bne.n	8003e3c <HAL_I2C_Init+0x1bc>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1e58      	subs	r0, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	440b      	add	r3, r1
 8003e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3a:	e00f      	b.n	8003e5c <HAL_I2C_Init+0x1dc>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1e58      	subs	r0, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	0099      	lsls	r1, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e52:	3301      	adds	r3, #1
 8003e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	6809      	ldr	r1, [r1, #0]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69da      	ldr	r2, [r3, #28]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6911      	ldr	r1, [r2, #16]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68d2      	ldr	r2, [r2, #12]
 8003e96:	4311      	orrs	r1, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	000186a0 	.word	0x000186a0
 8003ef8:	001e847f 	.word	0x001e847f
 8003efc:	003d08ff 	.word	0x003d08ff
 8003f00:	431bde83 	.word	0x431bde83
 8003f04:	10624dd3 	.word	0x10624dd3

08003f08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	461a      	mov	r2, r3
 8003f14:	460b      	mov	r3, r1
 8003f16:	817b      	strh	r3, [r7, #10]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f1c:	f7ff f94a 	bl	80031b4 <HAL_GetTick>
 8003f20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	f040 80e0 	bne.w	80040f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	2319      	movs	r3, #25
 8003f36:	2201      	movs	r2, #1
 8003f38:	4970      	ldr	r1, [pc, #448]	; (80040fc <HAL_I2C_Master_Transmit+0x1f4>)
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fc58 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
 8003f48:	e0d3      	b.n	80040f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_I2C_Master_Transmit+0x50>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e0cc      	b.n	80040f2 <HAL_I2C_Master_Transmit+0x1ea>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d007      	beq.n	8003f7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2221      	movs	r2, #33	; 0x21
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	893a      	ldrh	r2, [r7, #8]
 8003fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a50      	ldr	r2, [pc, #320]	; (8004100 <HAL_I2C_Master_Transmit+0x1f8>)
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fc0:	8979      	ldrh	r1, [r7, #10]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fac2 	bl	8004550 <I2C_MasterRequestWrite>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e08d      	b.n	80040f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fec:	e066      	b.n	80040bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fcd2 	bl	800499c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e06b      	b.n	80040f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b04      	cmp	r3, #4
 8004056:	d11b      	bne.n	8004090 <HAL_I2C_Master_Transmit+0x188>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d017      	beq.n	8004090 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	6a39      	ldr	r1, [r7, #32]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fcc2 	bl	8004a1e <I2C_WaitOnBTFFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00d      	beq.n	80040bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d107      	bne.n	80040b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e01a      	b.n	80040f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d194      	bne.n	8003fee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	e000      	b.n	80040f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	00100002 	.word	0x00100002
 8004100:	ffff0000 	.word	0xffff0000

08004104 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08c      	sub	sp, #48	; 0x30
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	461a      	mov	r2, r3
 8004110:	460b      	mov	r3, r1
 8004112:	817b      	strh	r3, [r7, #10]
 8004114:	4613      	mov	r3, r2
 8004116:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004118:	f7ff f84c 	bl	80031b4 <HAL_GetTick>
 800411c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b20      	cmp	r3, #32
 8004128:	f040 820b 	bne.w	8004542 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2319      	movs	r3, #25
 8004132:	2201      	movs	r2, #1
 8004134:	497c      	ldr	r1, [pc, #496]	; (8004328 <HAL_I2C_Master_Receive+0x224>)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fb5a 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
 8004144:	e1fe      	b.n	8004544 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_I2C_Master_Receive+0x50>
 8004150:	2302      	movs	r3, #2
 8004152:	e1f7      	b.n	8004544 <HAL_I2C_Master_Receive+0x440>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b01      	cmp	r3, #1
 8004168:	d007      	beq.n	800417a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004188:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2222      	movs	r2, #34	; 0x22
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2210      	movs	r2, #16
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	893a      	ldrh	r2, [r7, #8]
 80041aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a5c      	ldr	r2, [pc, #368]	; (800432c <HAL_I2C_Master_Receive+0x228>)
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041bc:	8979      	ldrh	r1, [r7, #10]
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fa46 	bl	8004654 <I2C_MasterRequestRead>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e1b8      	b.n	8004544 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d113      	bne.n	8004202 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041da:	2300      	movs	r3, #0
 80041dc:	623b      	str	r3, [r7, #32]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	623b      	str	r3, [r7, #32]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	623b      	str	r3, [r7, #32]
 80041ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e18c      	b.n	800451c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	2b01      	cmp	r3, #1
 8004208:	d11b      	bne.n	8004242 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004218:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e16c      	b.n	800451c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	2b02      	cmp	r3, #2
 8004248:	d11b      	bne.n	8004282 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004258:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004268:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	e14c      	b.n	800451c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042a8:	e138      	b.n	800451c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	f200 80f1 	bhi.w	8004496 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d123      	bne.n	8004304 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fbed 	bl	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e139      	b.n	8004544 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004302:	e10b      	b.n	800451c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	2b02      	cmp	r3, #2
 800430a:	d14e      	bne.n	80043aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	2200      	movs	r2, #0
 8004314:	4906      	ldr	r1, [pc, #24]	; (8004330 <HAL_I2C_Master_Receive+0x22c>)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fa6a 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e10e      	b.n	8004544 <HAL_I2C_Master_Receive+0x440>
 8004326:	bf00      	nop
 8004328:	00100002 	.word	0x00100002
 800432c:	ffff0000 	.word	0xffff0000
 8004330:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043a8:	e0b8      	b.n	800451c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	2200      	movs	r2, #0
 80043b2:	4966      	ldr	r1, [pc, #408]	; (800454c <HAL_I2C_Master_Receive+0x448>)
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fa1b 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0bf      	b.n	8004544 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	2200      	movs	r2, #0
 800440e:	494f      	ldr	r1, [pc, #316]	; (800454c <HAL_I2C_Master_Receive+0x448>)
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f9ed 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e091      	b.n	8004544 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004494:	e042      	b.n	800451c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fb00 	bl	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e04c      	b.n	8004544 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d118      	bne.n	800451c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	f47f aec2 	bne.w	80042aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e000      	b.n	8004544 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3728      	adds	r7, #40	; 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	00010004 	.word	0x00010004

08004550 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	460b      	mov	r3, r1
 800455e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d006      	beq.n	800457a <I2C_MasterRequestWrite+0x2a>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d003      	beq.n	800457a <I2C_MasterRequestWrite+0x2a>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004578:	d108      	bne.n	800458c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e00b      	b.n	80045a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	2b12      	cmp	r3, #18
 8004592:	d107      	bne.n	80045a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f91d 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00d      	beq.n	80045d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ca:	d103      	bne.n	80045d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e035      	b.n	8004644 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045e0:	d108      	bne.n	80045f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045e2:	897b      	ldrh	r3, [r7, #10]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f0:	611a      	str	r2, [r3, #16]
 80045f2:	e01b      	b.n	800462c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045f4:	897b      	ldrh	r3, [r7, #10]
 80045f6:	11db      	asrs	r3, r3, #7
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	f003 0306 	and.w	r3, r3, #6
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f063 030f 	orn	r3, r3, #15
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	490e      	ldr	r1, [pc, #56]	; (800464c <I2C_MasterRequestWrite+0xfc>)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f943 	bl	800489e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e010      	b.n	8004644 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004622:	897b      	ldrh	r3, [r7, #10]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4907      	ldr	r1, [pc, #28]	; (8004650 <I2C_MasterRequestWrite+0x100>)
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f933 	bl	800489e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	00010008 	.word	0x00010008
 8004650:	00010002 	.word	0x00010002

08004654 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	460b      	mov	r3, r1
 8004662:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004678:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d006      	beq.n	800468e <I2C_MasterRequestRead+0x3a>
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d003      	beq.n	800468e <I2C_MasterRequestRead+0x3a>
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800468c:	d108      	bne.n	80046a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e00b      	b.n	80046b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	2b11      	cmp	r3, #17
 80046a6:	d107      	bne.n	80046b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f893 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00d      	beq.n	80046ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046de:	d103      	bne.n	80046e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e079      	b.n	80047e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f4:	d108      	bne.n	8004708 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046f6:	897b      	ldrh	r3, [r7, #10]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]
 8004706:	e05f      	b.n	80047c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004708:	897b      	ldrh	r3, [r7, #10]
 800470a:	11db      	asrs	r3, r3, #7
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0306 	and.w	r3, r3, #6
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f063 030f 	orn	r3, r3, #15
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4930      	ldr	r1, [pc, #192]	; (80047e8 <I2C_MasterRequestRead+0x194>)
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f8b9 	bl	800489e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e054      	b.n	80047e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004736:	897b      	ldrh	r3, [r7, #10]
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4929      	ldr	r1, [pc, #164]	; (80047ec <I2C_MasterRequestRead+0x198>)
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f8a9 	bl	800489e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e044      	b.n	80047e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800477a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f831 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00d      	beq.n	80047b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a2:	d103      	bne.n	80047ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e017      	b.n	80047e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80047b0:	897b      	ldrh	r3, [r7, #10]
 80047b2:	11db      	asrs	r3, r3, #7
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f003 0306 	and.w	r3, r3, #6
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f063 030e 	orn	r3, r3, #14
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	4907      	ldr	r1, [pc, #28]	; (80047ec <I2C_MasterRequestRead+0x198>)
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f865 	bl	800489e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	00010008 	.word	0x00010008
 80047ec:	00010002 	.word	0x00010002

080047f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004800:	e025      	b.n	800484e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004808:	d021      	beq.n	800484e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fe fcd3 	bl	80031b4 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d116      	bne.n	800484e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f043 0220 	orr.w	r2, r3, #32
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e023      	b.n	8004896 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10d      	bne.n	8004874 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	43da      	mvns	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	e00c      	b.n	800488e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	43da      	mvns	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4013      	ands	r3, r2
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	bf0c      	ite	eq
 8004886:	2301      	moveq	r3, #1
 8004888:	2300      	movne	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	429a      	cmp	r2, r3
 8004892:	d0b6      	beq.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ac:	e051      	b.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048bc:	d123      	bne.n	8004906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f043 0204 	orr.w	r2, r3, #4
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e046      	b.n	8004994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800490c:	d021      	beq.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fe fc51 	bl	80031b4 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d116      	bne.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0220 	orr.w	r2, r3, #32
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e020      	b.n	8004994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10c      	bne.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4013      	ands	r3, r2
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf14      	ite	ne
 800496e:	2301      	movne	r3, #1
 8004970:	2300      	moveq	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	e00b      	b.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	43da      	mvns	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4013      	ands	r3, r2
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d18d      	bne.n	80048ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a8:	e02d      	b.n	8004a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f8ce 	bl	8004b4c <I2C_IsAcknowledgeFailed>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e02d      	b.n	8004a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c0:	d021      	beq.n	8004a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c2:	f7fe fbf7 	bl	80031b4 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d302      	bcc.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d116      	bne.n	8004a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e007      	b.n	8004a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	2b80      	cmp	r3, #128	; 0x80
 8004a12:	d1ca      	bne.n	80049aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a2a:	e02d      	b.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f88d 	bl	8004b4c <I2C_IsAcknowledgeFailed>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e02d      	b.n	8004a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a42:	d021      	beq.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a44:	f7fe fbb6 	bl	80031b4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d302      	bcc.n	8004a5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d116      	bne.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f043 0220 	orr.w	r2, r3, #32
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e007      	b.n	8004a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d1ca      	bne.n	8004a2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aac:	e042      	b.n	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d119      	bne.n	8004af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0210 	mvn.w	r2, #16
 8004ac4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e029      	b.n	8004b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af0:	f7fe fb60 	bl	80031b4 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d302      	bcc.n	8004b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d116      	bne.n	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	f043 0220 	orr.w	r2, r3, #32
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e007      	b.n	8004b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3e:	2b40      	cmp	r3, #64	; 0x40
 8004b40:	d1b5      	bne.n	8004aae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b62:	d11b      	bne.n	8004b9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	f043 0204 	orr.w	r2, r3, #4
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e267      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d075      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bca:	4b88      	ldr	r3, [pc, #544]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4b85      	ldr	r3, [pc, #532]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d112      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be2:	4b82      	ldr	r3, [pc, #520]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bee:	d10b      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	4b7e      	ldr	r3, [pc, #504]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05b      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x108>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d157      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e242      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d106      	bne.n	8004c20 <HAL_RCC_OscConfig+0x74>
 8004c12:	4b76      	ldr	r3, [pc, #472]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a75      	ldr	r2, [pc, #468]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e01d      	b.n	8004c5c <HAL_RCC_OscConfig+0xb0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x98>
 8004c2a:	4b70      	ldr	r3, [pc, #448]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a6f      	ldr	r2, [pc, #444]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	4b6d      	ldr	r3, [pc, #436]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6c      	ldr	r2, [pc, #432]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_OscConfig+0xb0>
 8004c44:	4b69      	ldr	r3, [pc, #420]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a68      	ldr	r2, [pc, #416]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	4b66      	ldr	r3, [pc, #408]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a65      	ldr	r2, [pc, #404]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fe faa6 	bl	80031b4 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fe faa2 	bl	80031b4 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e207      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0xc0>
 8004c8a:	e014      	b.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fe fa92 	bl	80031b4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fe fa8e 	bl	80031b4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1f3      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	4b51      	ldr	r3, [pc, #324]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0xe8>
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d063      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cc2:	4b4a      	ldr	r3, [pc, #296]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11c      	bne.n	8004d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cda:	4b44      	ldr	r3, [pc, #272]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d116      	bne.n	8004d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce6:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_RCC_OscConfig+0x152>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d001      	beq.n	8004cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e1c7      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4937      	ldr	r1, [pc, #220]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d12:	e03a      	b.n	8004d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d1c:	4b34      	ldr	r3, [pc, #208]	; (8004df0 <HAL_RCC_OscConfig+0x244>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7fe fa47 	bl	80031b4 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2a:	f7fe fa43 	bl	80031b4 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e1a8      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4925      	ldr	r1, [pc, #148]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	600b      	str	r3, [r1, #0]
 8004d5c:	e015      	b.n	8004d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_RCC_OscConfig+0x244>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fe fa26 	bl	80031b4 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6c:	f7fe fa22 	bl	80031b4 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e187      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d036      	beq.n	8004e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d016      	beq.n	8004dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <HAL_RCC_OscConfig+0x248>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fe fa06 	bl	80031b4 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dac:	f7fe fa02 	bl	80031b4 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e167      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x200>
 8004dca:	e01b      	b.n	8004e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_RCC_OscConfig+0x248>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7fe f9ef 	bl	80031b4 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	e00e      	b.n	8004df8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dda:	f7fe f9eb 	bl	80031b4 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d907      	bls.n	8004df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e150      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
 8004dec:	40023800 	.word	0x40023800
 8004df0:	42470000 	.word	0x42470000
 8004df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df8:	4b88      	ldr	r3, [pc, #544]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ea      	bne.n	8004dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8097 	beq.w	8004f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e16:	4b81      	ldr	r3, [pc, #516]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10f      	bne.n	8004e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	4b7d      	ldr	r3, [pc, #500]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	4a7c      	ldr	r2, [pc, #496]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6413      	str	r3, [r2, #64]	; 0x40
 8004e32:	4b7a      	ldr	r3, [pc, #488]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e42:	4b77      	ldr	r3, [pc, #476]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d118      	bne.n	8004e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e4e:	4b74      	ldr	r3, [pc, #464]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a73      	ldr	r2, [pc, #460]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5a:	f7fe f9ab 	bl	80031b4 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e62:	f7fe f9a7 	bl	80031b4 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e10c      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e74:	4b6a      	ldr	r3, [pc, #424]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d106      	bne.n	8004e96 <HAL_RCC_OscConfig+0x2ea>
 8004e88:	4b64      	ldr	r3, [pc, #400]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	4a63      	ldr	r2, [pc, #396]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6713      	str	r3, [r2, #112]	; 0x70
 8004e94:	e01c      	b.n	8004ed0 <HAL_RCC_OscConfig+0x324>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b05      	cmp	r3, #5
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x30c>
 8004e9e:	4b5f      	ldr	r3, [pc, #380]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	4a5e      	ldr	r2, [pc, #376]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ea4:	f043 0304 	orr.w	r3, r3, #4
 8004ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eaa:	4b5c      	ldr	r3, [pc, #368]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	4a5b      	ldr	r2, [pc, #364]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb6:	e00b      	b.n	8004ed0 <HAL_RCC_OscConfig+0x324>
 8004eb8:	4b58      	ldr	r3, [pc, #352]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	4a57      	ldr	r2, [pc, #348]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ebe:	f023 0301 	bic.w	r3, r3, #1
 8004ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec4:	4b55      	ldr	r3, [pc, #340]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a54      	ldr	r2, [pc, #336]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eca:	f023 0304 	bic.w	r3, r3, #4
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d015      	beq.n	8004f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fe f96c 	bl	80031b4 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fe f968 	bl	80031b4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e0cb      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef6:	4b49      	ldr	r3, [pc, #292]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0ee      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x334>
 8004f02:	e014      	b.n	8004f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f04:	f7fe f956 	bl	80031b4 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0c:	f7fe f952 	bl	80031b4 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e0b5      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f22:	4b3e      	ldr	r3, [pc, #248]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1ee      	bne.n	8004f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d105      	bne.n	8004f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f34:	4b39      	ldr	r3, [pc, #228]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	4a38      	ldr	r2, [pc, #224]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80a1 	beq.w	800508c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f4a:	4b34      	ldr	r3, [pc, #208]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d05c      	beq.n	8005010 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d141      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <HAL_RCC_OscConfig+0x478>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fe f926 	bl	80031b4 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fe f922 	bl	80031b4 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e087      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7e:	4b27      	ldr	r3, [pc, #156]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	061b      	lsls	r3, r3, #24
 8004fae:	491b      	ldr	r1, [pc, #108]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <HAL_RCC_OscConfig+0x478>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fba:	f7fe f8fb 	bl	80031b4 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc2:	f7fe f8f7 	bl	80031b4 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e05c      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd4:	4b11      	ldr	r3, [pc, #68]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x416>
 8004fe0:	e054      	b.n	800508c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <HAL_RCC_OscConfig+0x478>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe8:	f7fe f8e4 	bl	80031b4 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7fe f8e0 	bl	80031b4 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e045      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x444>
 800500e:	e03d      	b.n	800508c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d107      	bne.n	8005028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e038      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
 800501c:	40023800 	.word	0x40023800
 8005020:	40007000 	.word	0x40007000
 8005024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005028:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x4ec>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d028      	beq.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005040:	429a      	cmp	r2, r3
 8005042:	d121      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d11a      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005058:	4013      	ands	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800505e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005060:	4293      	cmp	r3, r2
 8005062:	d111      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	3b01      	subs	r3, #1
 8005072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d107      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800

0800509c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0cc      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b68      	ldr	r3, [pc, #416]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d90c      	bls.n	80050d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b65      	ldr	r3, [pc, #404]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c6:	4b63      	ldr	r3, [pc, #396]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0b8      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d020      	beq.n	8005126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f0:	4b59      	ldr	r3, [pc, #356]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a58      	ldr	r2, [pc, #352]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005108:	4b53      	ldr	r3, [pc, #332]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a52      	ldr	r2, [pc, #328]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005114:	4b50      	ldr	r3, [pc, #320]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	494d      	ldr	r1, [pc, #308]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d044      	beq.n	80051bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d119      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e07f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d003      	beq.n	800515a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005156:	2b03      	cmp	r3, #3
 8005158:	d107      	bne.n	800516a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515a:	4b3f      	ldr	r3, [pc, #252]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e06f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516a:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e067      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517a:	4b37      	ldr	r3, [pc, #220]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 0203 	bic.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4934      	ldr	r1, [pc, #208]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800518c:	f7fe f812 	bl	80031b4 <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	e00a      	b.n	80051aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005194:	f7fe f80e 	bl	80031b4 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e04f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 020c 	and.w	r2, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d1eb      	bne.n	8005194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051bc:	4b25      	ldr	r3, [pc, #148]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d20c      	bcs.n	80051e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ca:	4b22      	ldr	r3, [pc, #136]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d2:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e032      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f0:	4b19      	ldr	r3, [pc, #100]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4916      	ldr	r1, [pc, #88]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800520e:	4b12      	ldr	r3, [pc, #72]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	490e      	ldr	r1, [pc, #56]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005222:	f000 f821 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005226:	4602      	mov	r2, r0
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	490a      	ldr	r1, [pc, #40]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	5ccb      	ldrb	r3, [r1, r3]
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 800523c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fd ff72 	bl	800312c <HAL_InitTick>

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023c00 	.word	0x40023c00
 8005258:	40023800 	.word	0x40023800
 800525c:	0800db7c 	.word	0x0800db7c
 8005260:	20000004 	.word	0x20000004
 8005264:	20000008 	.word	0x20000008

08005268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800526c:	b094      	sub	sp, #80	; 0x50
 800526e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	647b      	str	r3, [r7, #68]	; 0x44
 8005274:	2300      	movs	r3, #0
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005278:	2300      	movs	r3, #0
 800527a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005280:	4b79      	ldr	r3, [pc, #484]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 030c 	and.w	r3, r3, #12
 8005288:	2b08      	cmp	r3, #8
 800528a:	d00d      	beq.n	80052a8 <HAL_RCC_GetSysClockFreq+0x40>
 800528c:	2b08      	cmp	r3, #8
 800528e:	f200 80e1 	bhi.w	8005454 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0x34>
 8005296:	2b04      	cmp	r3, #4
 8005298:	d003      	beq.n	80052a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800529a:	e0db      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800529c:	4b73      	ldr	r3, [pc, #460]	; (800546c <HAL_RCC_GetSysClockFreq+0x204>)
 800529e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052a0:	e0db      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052a2:	4b73      	ldr	r3, [pc, #460]	; (8005470 <HAL_RCC_GetSysClockFreq+0x208>)
 80052a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052a6:	e0d8      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a8:	4b6f      	ldr	r3, [pc, #444]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052b2:	4b6d      	ldr	r3, [pc, #436]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d063      	beq.n	8005386 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052be:	4b6a      	ldr	r3, [pc, #424]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	2200      	movs	r2, #0
 80052c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d0:	633b      	str	r3, [r7, #48]	; 0x30
 80052d2:	2300      	movs	r3, #0
 80052d4:	637b      	str	r3, [r7, #52]	; 0x34
 80052d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052da:	4622      	mov	r2, r4
 80052dc:	462b      	mov	r3, r5
 80052de:	f04f 0000 	mov.w	r0, #0
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	0159      	lsls	r1, r3, #5
 80052e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ec:	0150      	lsls	r0, r2, #5
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4621      	mov	r1, r4
 80052f4:	1a51      	subs	r1, r2, r1
 80052f6:	6139      	str	r1, [r7, #16]
 80052f8:	4629      	mov	r1, r5
 80052fa:	eb63 0301 	sbc.w	r3, r3, r1
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800530c:	4659      	mov	r1, fp
 800530e:	018b      	lsls	r3, r1, #6
 8005310:	4651      	mov	r1, sl
 8005312:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005316:	4651      	mov	r1, sl
 8005318:	018a      	lsls	r2, r1, #6
 800531a:	4651      	mov	r1, sl
 800531c:	ebb2 0801 	subs.w	r8, r2, r1
 8005320:	4659      	mov	r1, fp
 8005322:	eb63 0901 	sbc.w	r9, r3, r1
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800533a:	4690      	mov	r8, r2
 800533c:	4699      	mov	r9, r3
 800533e:	4623      	mov	r3, r4
 8005340:	eb18 0303 	adds.w	r3, r8, r3
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	462b      	mov	r3, r5
 8005348:	eb49 0303 	adc.w	r3, r9, r3
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800535a:	4629      	mov	r1, r5
 800535c:	024b      	lsls	r3, r1, #9
 800535e:	4621      	mov	r1, r4
 8005360:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005364:	4621      	mov	r1, r4
 8005366:	024a      	lsls	r2, r1, #9
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536e:	2200      	movs	r2, #0
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
 8005372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005374:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005378:	f7fb fc4e 	bl	8000c18 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4613      	mov	r3, r2
 8005382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005384:	e058      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005386:	4b38      	ldr	r3, [pc, #224]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	099b      	lsrs	r3, r3, #6
 800538c:	2200      	movs	r2, #0
 800538e:	4618      	mov	r0, r3
 8005390:	4611      	mov	r1, r2
 8005392:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053a0:	4642      	mov	r2, r8
 80053a2:	464b      	mov	r3, r9
 80053a4:	f04f 0000 	mov.w	r0, #0
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	0159      	lsls	r1, r3, #5
 80053ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b2:	0150      	lsls	r0, r2, #5
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4641      	mov	r1, r8
 80053ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80053be:	4649      	mov	r1, r9
 80053c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053d8:	ebb2 040a 	subs.w	r4, r2, sl
 80053dc:	eb63 050b 	sbc.w	r5, r3, fp
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	00eb      	lsls	r3, r5, #3
 80053ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ee:	00e2      	lsls	r2, r4, #3
 80053f0:	4614      	mov	r4, r2
 80053f2:	461d      	mov	r5, r3
 80053f4:	4643      	mov	r3, r8
 80053f6:	18e3      	adds	r3, r4, r3
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	464b      	mov	r3, r9
 80053fc:	eb45 0303 	adc.w	r3, r5, r3
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800540e:	4629      	mov	r1, r5
 8005410:	028b      	lsls	r3, r1, #10
 8005412:	4621      	mov	r1, r4
 8005414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005418:	4621      	mov	r1, r4
 800541a:	028a      	lsls	r2, r1, #10
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005422:	2200      	movs	r2, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	61fa      	str	r2, [r7, #28]
 8005428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800542c:	f7fb fbf4 	bl	8000c18 <__aeabi_uldivmod>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4613      	mov	r3, r2
 8005436:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	3301      	adds	r3, #1
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800544a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005452:	e002      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCC_GetSysClockFreq+0x204>)
 8005456:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800545a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800545c:	4618      	mov	r0, r3
 800545e:	3750      	adds	r7, #80	; 0x50
 8005460:	46bd      	mov	sp, r7
 8005462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800
 800546c:	00f42400 	.word	0x00f42400
 8005470:	007a1200 	.word	0x007a1200

08005474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <HAL_RCC_GetHCLKFreq+0x14>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000004 	.word	0x20000004

0800548c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005490:	f7ff fff0 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 8005494:	4602      	mov	r2, r0
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	0a9b      	lsrs	r3, r3, #10
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	4903      	ldr	r1, [pc, #12]	; (80054b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a2:	5ccb      	ldrb	r3, [r1, r3]
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40023800 	.word	0x40023800
 80054b0:	0800db8c 	.word	0x0800db8c

080054b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054b8:	f7ff ffdc 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 80054bc:	4602      	mov	r2, r0
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	0b5b      	lsrs	r3, r3, #13
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4903      	ldr	r1, [pc, #12]	; (80054d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ca:	5ccb      	ldrb	r3, [r1, r3]
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40023800 	.word	0x40023800
 80054d8:	0800db8c 	.word	0x0800db8c

080054dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e07b      	b.n	80055e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d108      	bne.n	8005508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054fe:	d009      	beq.n	8005514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	61da      	str	r2, [r3, #28]
 8005506:	e005      	b.n	8005514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fd fb1e 	bl	8002b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005598:	ea42 0103 	orr.w	r1, r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	f003 0104 	and.w	r1, r3, #4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	f003 0210 	and.w	r2, r3, #16
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b088      	sub	sp, #32
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_SPI_Transmit+0x22>
 800560c:	2302      	movs	r3, #2
 800560e:	e126      	b.n	800585e <HAL_SPI_Transmit+0x270>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005618:	f7fd fdcc 	bl	80031b4 <HAL_GetTick>
 800561c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d002      	beq.n	8005634 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800562e:	2302      	movs	r3, #2
 8005630:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005632:	e10b      	b.n	800584c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <HAL_SPI_Transmit+0x52>
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005644:	e102      	b.n	800584c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2203      	movs	r2, #3
 800564a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800568c:	d10f      	bne.n	80056ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800569c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d007      	beq.n	80056cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d4:	d14b      	bne.n	800576e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_SPI_Transmit+0xf6>
 80056de:	8afb      	ldrh	r3, [r7, #22]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d13e      	bne.n	8005762 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	881a      	ldrh	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	1c9a      	adds	r2, r3, #2
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005708:	e02b      	b.n	8005762 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b02      	cmp	r3, #2
 8005716:	d112      	bne.n	800573e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	881a      	ldrh	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	1c9a      	adds	r2, r3, #2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	86da      	strh	r2, [r3, #54]	; 0x36
 800573c:	e011      	b.n	8005762 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573e:	f7fd fd39 	bl	80031b4 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d803      	bhi.n	8005756 <HAL_SPI_Transmit+0x168>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005754:	d102      	bne.n	800575c <HAL_SPI_Transmit+0x16e>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005760:	e074      	b.n	800584c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ce      	bne.n	800570a <HAL_SPI_Transmit+0x11c>
 800576c:	e04c      	b.n	8005808 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_SPI_Transmit+0x18e>
 8005776:	8afb      	ldrh	r3, [r7, #22]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d140      	bne.n	80057fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057a2:	e02c      	b.n	80057fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d113      	bne.n	80057da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80057d8:	e011      	b.n	80057fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057da:	f7fd fceb 	bl	80031b4 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d803      	bhi.n	80057f2 <HAL_SPI_Transmit+0x204>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f0:	d102      	bne.n	80057f8 <HAL_SPI_Transmit+0x20a>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d102      	bne.n	80057fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057fc:	e026      	b.n	800584c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1cd      	bne.n	80057a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fbcb 	bl	8005fa8 <SPI_EndRxTxTransaction>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e000      	b.n	800584c <HAL_SPI_Transmit+0x25e>
  }

error:
 800584a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800585c:	7ffb      	ldrb	r3, [r7, #31]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b088      	sub	sp, #32
 800586a:	af02      	add	r7, sp, #8
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005882:	d112      	bne.n	80058aa <HAL_SPI_Receive+0x44>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10e      	bne.n	80058aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2204      	movs	r2, #4
 8005890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005894:	88fa      	ldrh	r2, [r7, #6]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	4613      	mov	r3, r2
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f8f1 	bl	8005a88 <HAL_SPI_TransmitReceive>
 80058a6:	4603      	mov	r3, r0
 80058a8:	e0ea      	b.n	8005a80 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_SPI_Receive+0x52>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e0e3      	b.n	8005a80 <HAL_SPI_Receive+0x21a>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058c0:	f7fd fc78 	bl	80031b4 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80058d2:	2302      	movs	r3, #2
 80058d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058d6:	e0ca      	b.n	8005a6e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_SPI_Receive+0x7e>
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058e8:	e0c1      	b.n	8005a6e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2204      	movs	r2, #4
 80058ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	88fa      	ldrh	r2, [r7, #6]
 8005902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005930:	d10f      	bne.n	8005952 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005940:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005950:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d007      	beq.n	8005970 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800596e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d162      	bne.n	8005a3e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005978:	e02e      	b.n	80059d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d115      	bne.n	80059b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f103 020c 	add.w	r2, r3, #12
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059b2:	e011      	b.n	80059d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b4:	f7fd fbfe 	bl	80031b4 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d803      	bhi.n	80059cc <HAL_SPI_Receive+0x166>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ca:	d102      	bne.n	80059d2 <HAL_SPI_Receive+0x16c>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059d6:	e04a      	b.n	8005a6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1cb      	bne.n	800597a <HAL_SPI_Receive+0x114>
 80059e2:	e031      	b.n	8005a48 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d113      	bne.n	8005a1a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	b292      	uxth	r2, r2
 80059fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	1c9a      	adds	r2, r3, #2
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a18:	e011      	b.n	8005a3e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a1a:	f7fd fbcb 	bl	80031b4 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d803      	bhi.n	8005a32 <HAL_SPI_Receive+0x1cc>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a30:	d102      	bne.n	8005a38 <HAL_SPI_Receive+0x1d2>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a3c:	e017      	b.n	8005a6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1cd      	bne.n	80059e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 fa45 	bl	8005edc <SPI_EndRxTransaction>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	75fb      	strb	r3, [r7, #23]
 8005a6a:	e000      	b.n	8005a6e <HAL_SPI_Receive+0x208>
  }

error :
 8005a6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08c      	sub	sp, #48	; 0x30
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a96:	2301      	movs	r3, #1
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_SPI_TransmitReceive+0x26>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e18a      	b.n	8005dc4 <HAL_SPI_TransmitReceive+0x33c>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ab6:	f7fd fb7d 	bl	80031b4 <HAL_GetTick>
 8005aba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005acc:	887b      	ldrh	r3, [r7, #2]
 8005ace:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d00f      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x70>
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ade:	d107      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x68>
 8005ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d003      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005af6:	e15b      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x82>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x82>
 8005b04:	887b      	ldrh	r3, [r7, #2]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b10:	e14e      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d003      	beq.n	8005b26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2205      	movs	r2, #5
 8005b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	887a      	ldrh	r2, [r7, #2]
 8005b36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	887a      	ldrh	r2, [r7, #2]
 8005b3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	887a      	ldrh	r2, [r7, #2]
 8005b4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d007      	beq.n	8005b7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b82:	d178      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <HAL_SPI_TransmitReceive+0x10a>
 8005b8c:	8b7b      	ldrh	r3, [r7, #26]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d166      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	881a      	ldrh	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bb6:	e053      	b.n	8005c60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d11b      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0x176>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d016      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0x176>
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d113      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	881a      	ldrh	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d119      	bne.n	8005c40 <HAL_SPI_TransmitReceive+0x1b8>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d014      	beq.n	8005c40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	b292      	uxth	r2, r2
 8005c22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	1c9a      	adds	r2, r3, #2
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c40:	f7fd fab8 	bl	80031b4 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d807      	bhi.n	8005c60 <HAL_SPI_TransmitReceive+0x1d8>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c56:	d003      	beq.n	8005c60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c5e:	e0a7      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1a6      	bne.n	8005bb8 <HAL_SPI_TransmitReceive+0x130>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1a1      	bne.n	8005bb8 <HAL_SPI_TransmitReceive+0x130>
 8005c74:	e07c      	b.n	8005d70 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <HAL_SPI_TransmitReceive+0x1fc>
 8005c7e:	8b7b      	ldrh	r3, [r7, #26]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d16b      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005caa:	e057      	b.n	8005d5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d11c      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x26c>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d017      	beq.n	8005cf4 <HAL_SPI_TransmitReceive+0x26c>
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d114      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d119      	bne.n	8005d36 <HAL_SPI_TransmitReceive+0x2ae>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d014      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d32:	2301      	movs	r3, #1
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d36:	f7fd fa3d 	bl	80031b4 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d803      	bhi.n	8005d4e <HAL_SPI_TransmitReceive+0x2c6>
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d4c:	d102      	bne.n	8005d54 <HAL_SPI_TransmitReceive+0x2cc>
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d5a:	e029      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1a2      	bne.n	8005cac <HAL_SPI_TransmitReceive+0x224>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d19d      	bne.n	8005cac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f917 	bl	8005fa8 <SPI_EndRxTxTransaction>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d006      	beq.n	8005d8e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d8c:	e010      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10b      	bne.n	8005dae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	e000      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005dae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005dc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3730      	adds	r7, #48	; 0x30
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ddc:	f7fd f9ea 	bl	80031b4 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	4413      	add	r3, r2
 8005dea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dec:	f7fd f9e2 	bl	80031b4 <HAL_GetTick>
 8005df0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005df2:	4b39      	ldr	r3, [pc, #228]	; (8005ed8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	015b      	lsls	r3, r3, #5
 8005df8:	0d1b      	lsrs	r3, r3, #20
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e02:	e054      	b.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0a:	d050      	beq.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e0c:	f7fd f9d2 	bl	80031b4 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d902      	bls.n	8005e22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d13d      	bne.n	8005e9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e3a:	d111      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	d004      	beq.n	8005e50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4e:	d107      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e68:	d10f      	bne.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e017      	b.n	8005ece <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d19b      	bne.n	8005e04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000004 	.word	0x20000004

08005edc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef0:	d111      	bne.n	8005f16 <SPI_EndRxTransaction+0x3a>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efa:	d004      	beq.n	8005f06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f04:	d107      	bne.n	8005f16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f14:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1e:	d12a      	bne.n	8005f76 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f28:	d012      	beq.n	8005f50 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7ff ff49 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d02d      	beq.n	8005f9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	f043 0220 	orr.w	r2, r3, #32
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e026      	b.n	8005f9e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2200      	movs	r2, #0
 8005f58:	2101      	movs	r1, #1
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7ff ff36 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01a      	beq.n	8005f9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	f043 0220 	orr.w	r2, r3, #32
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e013      	b.n	8005f9e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2101      	movs	r1, #1
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff ff23 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f90:	f043 0220 	orr.w	r2, r3, #32
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e000      	b.n	8005f9e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <SPI_EndRxTxTransaction+0x7c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <SPI_EndRxTxTransaction+0x80>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	0d5b      	lsrs	r3, r3, #21
 8005fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fc4:	fb02 f303 	mul.w	r3, r2, r3
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd2:	d112      	bne.n	8005ffa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2180      	movs	r1, #128	; 0x80
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7ff fef4 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d016      	beq.n	8006018 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e00f      	b.n	800601a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	3b01      	subs	r3, #1
 8006004:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d0f2      	beq.n	8005ffa <SPI_EndRxTxTransaction+0x52>
 8006014:	e000      	b.n	8006018 <SPI_EndRxTxTransaction+0x70>
        break;
 8006016:	bf00      	nop
  }

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000004 	.word	0x20000004
 8006028:	165e9f81 	.word	0x165e9f81

0800602c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e041      	b.n	80060c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fc fe60 	bl	8002d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3304      	adds	r3, #4
 8006068:	4619      	mov	r1, r3
 800606a:	4610      	mov	r0, r2
 800606c:	f000 fa92 	bl	8006594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d001      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e044      	b.n	800616e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1e      	ldr	r2, [pc, #120]	; (800617c <HAL_TIM_Base_Start_IT+0xb0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d018      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x6c>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d013      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x6c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1a      	ldr	r2, [pc, #104]	; (8006180 <HAL_TIM_Base_Start_IT+0xb4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00e      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x6c>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_TIM_Base_Start_IT+0xb8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x6c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a17      	ldr	r2, [pc, #92]	; (8006188 <HAL_TIM_Base_Start_IT+0xbc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x6c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <HAL_TIM_Base_Start_IT+0xc0>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d111      	bne.n	800615c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b06      	cmp	r3, #6
 8006148:	d010      	beq.n	800616c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0201 	orr.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615a:	e007      	b.n	800616c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40010000 	.word	0x40010000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40014000 	.word	0x40014000

08006190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d122      	bne.n	80061ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d11b      	bne.n	80061ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0202 	mvn.w	r2, #2
 80061bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f9bf 	bl	8006556 <HAL_TIM_IC_CaptureCallback>
 80061d8:	e005      	b.n	80061e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f9b1 	bl	8006542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f9c2 	bl	800656a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d122      	bne.n	8006240 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b04      	cmp	r3, #4
 8006206:	d11b      	bne.n	8006240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0204 	mvn.w	r2, #4
 8006210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2202      	movs	r2, #2
 8006216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f995 	bl	8006556 <HAL_TIM_IC_CaptureCallback>
 800622c:	e005      	b.n	800623a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f987 	bl	8006542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f998 	bl	800656a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	2b08      	cmp	r3, #8
 800624c:	d122      	bne.n	8006294 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b08      	cmp	r3, #8
 800625a:	d11b      	bne.n	8006294 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0208 	mvn.w	r2, #8
 8006264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f96b 	bl	8006556 <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f95d 	bl	8006542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f96e 	bl	800656a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b10      	cmp	r3, #16
 80062a0:	d122      	bne.n	80062e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d11b      	bne.n	80062e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0210 	mvn.w	r2, #16
 80062b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2208      	movs	r2, #8
 80062be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f941 	bl	8006556 <HAL_TIM_IC_CaptureCallback>
 80062d4:	e005      	b.n	80062e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f933 	bl	8006542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f944 	bl	800656a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d10e      	bne.n	8006314 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b01      	cmp	r3, #1
 8006302:	d107      	bne.n	8006314 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f06f 0201 	mvn.w	r2, #1
 800630c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f90d 	bl	800652e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631e:	2b80      	cmp	r3, #128	; 0x80
 8006320:	d10e      	bne.n	8006340 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632c:	2b80      	cmp	r3, #128	; 0x80
 800632e:	d107      	bne.n	8006340 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fabc 	bl	80068b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634a:	2b40      	cmp	r3, #64	; 0x40
 800634c:	d10e      	bne.n	800636c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d107      	bne.n	800636c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f909 	bl	800657e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b20      	cmp	r3, #32
 8006378:	d10e      	bne.n	8006398 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b20      	cmp	r3, #32
 8006386:	d107      	bne.n	8006398 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0220 	mvn.w	r2, #32
 8006390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa86 	bl	80068a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_TIM_ConfigClockSource+0x1c>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e0b4      	b.n	8006526 <HAL_TIM_ConfigClockSource+0x186>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f4:	d03e      	beq.n	8006474 <HAL_TIM_ConfigClockSource+0xd4>
 80063f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fa:	f200 8087 	bhi.w	800650c <HAL_TIM_ConfigClockSource+0x16c>
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006402:	f000 8086 	beq.w	8006512 <HAL_TIM_ConfigClockSource+0x172>
 8006406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640a:	d87f      	bhi.n	800650c <HAL_TIM_ConfigClockSource+0x16c>
 800640c:	2b70      	cmp	r3, #112	; 0x70
 800640e:	d01a      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0xa6>
 8006410:	2b70      	cmp	r3, #112	; 0x70
 8006412:	d87b      	bhi.n	800650c <HAL_TIM_ConfigClockSource+0x16c>
 8006414:	2b60      	cmp	r3, #96	; 0x60
 8006416:	d050      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x11a>
 8006418:	2b60      	cmp	r3, #96	; 0x60
 800641a:	d877      	bhi.n	800650c <HAL_TIM_ConfigClockSource+0x16c>
 800641c:	2b50      	cmp	r3, #80	; 0x50
 800641e:	d03c      	beq.n	800649a <HAL_TIM_ConfigClockSource+0xfa>
 8006420:	2b50      	cmp	r3, #80	; 0x50
 8006422:	d873      	bhi.n	800650c <HAL_TIM_ConfigClockSource+0x16c>
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d058      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x13a>
 8006428:	2b40      	cmp	r3, #64	; 0x40
 800642a:	d86f      	bhi.n	800650c <HAL_TIM_ConfigClockSource+0x16c>
 800642c:	2b30      	cmp	r3, #48	; 0x30
 800642e:	d064      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0x15a>
 8006430:	2b30      	cmp	r3, #48	; 0x30
 8006432:	d86b      	bhi.n	800650c <HAL_TIM_ConfigClockSource+0x16c>
 8006434:	2b20      	cmp	r3, #32
 8006436:	d060      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0x15a>
 8006438:	2b20      	cmp	r3, #32
 800643a:	d867      	bhi.n	800650c <HAL_TIM_ConfigClockSource+0x16c>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d05c      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0x15a>
 8006440:	2b10      	cmp	r3, #16
 8006442:	d05a      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0x15a>
 8006444:	e062      	b.n	800650c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6899      	ldr	r1, [r3, #8]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f000 f997 	bl	8006788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	609a      	str	r2, [r3, #8]
      break;
 8006472:	e04f      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	6899      	ldr	r1, [r3, #8]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f000 f980 	bl	8006788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006496:	609a      	str	r2, [r3, #8]
      break;
 8006498:	e03c      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	6859      	ldr	r1, [r3, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	461a      	mov	r2, r3
 80064a8:	f000 f8f4 	bl	8006694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2150      	movs	r1, #80	; 0x50
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 f94d 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 80064b8:	e02c      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6859      	ldr	r1, [r3, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	461a      	mov	r2, r3
 80064c8:	f000 f913 	bl	80066f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2160      	movs	r1, #96	; 0x60
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 f93d 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 80064d8:	e01c      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f000 f8d4 	bl	8006694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2140      	movs	r1, #64	; 0x40
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 f92d 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 80064f8:	e00c      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4619      	mov	r1, r3
 8006504:	4610      	mov	r0, r2
 8006506:	f000 f924 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 800650a:	e003      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
      break;
 8006510:	e000      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a34      	ldr	r2, [pc, #208]	; (8006678 <TIM_Base_SetConfig+0xe4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00f      	beq.n	80065cc <TIM_Base_SetConfig+0x38>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d00b      	beq.n	80065cc <TIM_Base_SetConfig+0x38>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a31      	ldr	r2, [pc, #196]	; (800667c <TIM_Base_SetConfig+0xe8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d007      	beq.n	80065cc <TIM_Base_SetConfig+0x38>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a30      	ldr	r2, [pc, #192]	; (8006680 <TIM_Base_SetConfig+0xec>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_Base_SetConfig+0x38>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a2f      	ldr	r2, [pc, #188]	; (8006684 <TIM_Base_SetConfig+0xf0>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d108      	bne.n	80065de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a25      	ldr	r2, [pc, #148]	; (8006678 <TIM_Base_SetConfig+0xe4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d01b      	beq.n	800661e <TIM_Base_SetConfig+0x8a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ec:	d017      	beq.n	800661e <TIM_Base_SetConfig+0x8a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a22      	ldr	r2, [pc, #136]	; (800667c <TIM_Base_SetConfig+0xe8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d013      	beq.n	800661e <TIM_Base_SetConfig+0x8a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a21      	ldr	r2, [pc, #132]	; (8006680 <TIM_Base_SetConfig+0xec>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00f      	beq.n	800661e <TIM_Base_SetConfig+0x8a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a20      	ldr	r2, [pc, #128]	; (8006684 <TIM_Base_SetConfig+0xf0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00b      	beq.n	800661e <TIM_Base_SetConfig+0x8a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <TIM_Base_SetConfig+0xf4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d007      	beq.n	800661e <TIM_Base_SetConfig+0x8a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a1e      	ldr	r2, [pc, #120]	; (800668c <TIM_Base_SetConfig+0xf8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <TIM_Base_SetConfig+0x8a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <TIM_Base_SetConfig+0xfc>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d108      	bne.n	8006630 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a08      	ldr	r2, [pc, #32]	; (8006678 <TIM_Base_SetConfig+0xe4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d103      	bne.n	8006664 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	615a      	str	r2, [r3, #20]
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40010000 	.word	0x40010000
 800667c:	40000400 	.word	0x40000400
 8006680:	40000800 	.word	0x40000800
 8006684:	40000c00 	.word	0x40000c00
 8006688:	40014000 	.word	0x40014000
 800668c:	40014400 	.word	0x40014400
 8006690:	40014800 	.word	0x40014800

08006694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f023 0201 	bic.w	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 030a 	bic.w	r3, r3, #10
 80066d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b087      	sub	sp, #28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f023 0210 	bic.w	r2, r3, #16
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800671c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	031b      	lsls	r3, r3, #12
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800672e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	f043 0307 	orr.w	r3, r3, #7
 8006774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	609a      	str	r2, [r3, #8]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	021a      	lsls	r2, r3, #8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	609a      	str	r2, [r3, #8]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067dc:	2302      	movs	r3, #2
 80067de:	e050      	b.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a1c      	ldr	r2, [pc, #112]	; (8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d018      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682c:	d013      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a18      	ldr	r2, [pc, #96]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00e      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a16      	ldr	r2, [pc, #88]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d009      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a15      	ldr	r2, [pc, #84]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d10c      	bne.n	8006870 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800685c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	4313      	orrs	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40010000 	.word	0x40010000
 8006894:	40000400 	.word	0x40000400
 8006898:	40000800 	.word	0x40000800
 800689c:	40000c00 	.word	0x40000c00
 80068a0:	40014000 	.word	0x40014000

080068a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e03f      	b.n	800695e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fc fa36 	bl	8002d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2224      	movs	r2, #36	; 0x24
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800690e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f929 	bl	8006b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695a      	ldr	r2, [r3, #20]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b08a      	sub	sp, #40	; 0x28
 800696a:	af02      	add	r7, sp, #8
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	603b      	str	r3, [r7, #0]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b20      	cmp	r3, #32
 8006984:	d17c      	bne.n	8006a80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <HAL_UART_Transmit+0x2c>
 800698c:	88fb      	ldrh	r3, [r7, #6]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e075      	b.n	8006a82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Transmit+0x3e>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e06e      	b.n	8006a82 <HAL_UART_Transmit+0x11c>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2221      	movs	r2, #33	; 0x21
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069ba:	f7fc fbfb 	bl	80031b4 <HAL_GetTick>
 80069be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	88fa      	ldrh	r2, [r7, #6]
 80069ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d4:	d108      	bne.n	80069e8 <HAL_UART_Transmit+0x82>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	e003      	b.n	80069f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069f8:	e02a      	b.n	8006a50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2200      	movs	r2, #0
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f840 	bl	8006a8a <UART_WaitOnFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e036      	b.n	8006a82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	e007      	b.n	8006a42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	781a      	ldrb	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1cf      	bne.n	80069fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2200      	movs	r2, #0
 8006a62:	2140      	movs	r1, #64	; 0x40
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f810 	bl	8006a8a <UART_WaitOnFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e006      	b.n	8006a82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e000      	b.n	8006a82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b090      	sub	sp, #64	; 0x40
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	4613      	mov	r3, r2
 8006a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9a:	e050      	b.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aa2:	d04c      	beq.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <UART_WaitOnFlagUntilTimeout+0x30>
 8006aaa:	f7fc fb83 	bl	80031b4 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d241      	bcs.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ada:	637a      	str	r2, [r7, #52]	; 0x34
 8006adc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e5      	bne.n	8006aba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3314      	adds	r3, #20
 8006af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	613b      	str	r3, [r7, #16]
   return(result);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b0e:	623a      	str	r2, [r7, #32]
 8006b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	69f9      	ldr	r1, [r7, #28]
 8006b14:	6a3a      	ldr	r2, [r7, #32]
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e5      	bne.n	8006aee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e00f      	b.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4013      	ands	r3, r2
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	bf0c      	ite	eq
 8006b4e:	2301      	moveq	r3, #1
 8006b50:	2300      	movne	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d09f      	beq.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3740      	adds	r7, #64	; 0x40
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b6c:	b0c0      	sub	sp, #256	; 0x100
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b84:	68d9      	ldr	r1, [r3, #12]
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	ea40 0301 	orr.w	r3, r0, r1
 8006b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006bc0:	f021 010c 	bic.w	r1, r1, #12
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be2:	6999      	ldr	r1, [r3, #24]
 8006be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	ea40 0301 	orr.w	r3, r0, r1
 8006bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b8f      	ldr	r3, [pc, #572]	; (8006e34 <UART_SetConfig+0x2cc>)
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d005      	beq.n	8006c08 <UART_SetConfig+0xa0>
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b8d      	ldr	r3, [pc, #564]	; (8006e38 <UART_SetConfig+0x2d0>)
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d104      	bne.n	8006c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c08:	f7fe fc54 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8006c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c10:	e003      	b.n	8006c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c12:	f7fe fc3b 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 8006c16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c24:	f040 810c 	bne.w	8006e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	1891      	adds	r1, r2, r2
 8006c40:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c42:	415b      	adcs	r3, r3
 8006c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	eb12 0801 	adds.w	r8, r2, r1
 8006c50:	4629      	mov	r1, r5
 8006c52:	eb43 0901 	adc.w	r9, r3, r1
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c6a:	4690      	mov	r8, r2
 8006c6c:	4699      	mov	r9, r3
 8006c6e:	4623      	mov	r3, r4
 8006c70:	eb18 0303 	adds.w	r3, r8, r3
 8006c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c78:	462b      	mov	r3, r5
 8006c7a:	eb49 0303 	adc.w	r3, r9, r3
 8006c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c96:	460b      	mov	r3, r1
 8006c98:	18db      	adds	r3, r3, r3
 8006c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	eb42 0303 	adc.w	r3, r2, r3
 8006ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cac:	f7f9 ffb4 	bl	8000c18 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4b61      	ldr	r3, [pc, #388]	; (8006e3c <UART_SetConfig+0x2d4>)
 8006cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8006cba:	095b      	lsrs	r3, r3, #5
 8006cbc:	011c      	lsls	r4, r3, #4
 8006cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	1891      	adds	r1, r2, r2
 8006cd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006cd8:	415b      	adcs	r3, r3
 8006cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ce0:	4641      	mov	r1, r8
 8006ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d00:	4692      	mov	sl, r2
 8006d02:	469b      	mov	fp, r3
 8006d04:	4643      	mov	r3, r8
 8006d06:	eb1a 0303 	adds.w	r3, sl, r3
 8006d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d0e:	464b      	mov	r3, r9
 8006d10:	eb4b 0303 	adc.w	r3, fp, r3
 8006d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	18db      	adds	r3, r3, r3
 8006d30:	643b      	str	r3, [r7, #64]	; 0x40
 8006d32:	4613      	mov	r3, r2
 8006d34:	eb42 0303 	adc.w	r3, r2, r3
 8006d38:	647b      	str	r3, [r7, #68]	; 0x44
 8006d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d42:	f7f9 ff69 	bl	8000c18 <__aeabi_uldivmod>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	4b3b      	ldr	r3, [pc, #236]	; (8006e3c <UART_SetConfig+0x2d4>)
 8006d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	2264      	movs	r2, #100	; 0x64
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	1acb      	subs	r3, r1, r3
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d62:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <UART_SetConfig+0x2d4>)
 8006d64:	fba3 2302 	umull	r2, r3, r3, r2
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d70:	441c      	add	r4, r3
 8006d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d84:	4642      	mov	r2, r8
 8006d86:	464b      	mov	r3, r9
 8006d88:	1891      	adds	r1, r2, r2
 8006d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d8c:	415b      	adcs	r3, r3
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d94:	4641      	mov	r1, r8
 8006d96:	1851      	adds	r1, r2, r1
 8006d98:	6339      	str	r1, [r7, #48]	; 0x30
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	414b      	adcs	r3, r1
 8006d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006dac:	4659      	mov	r1, fp
 8006dae:	00cb      	lsls	r3, r1, #3
 8006db0:	4651      	mov	r1, sl
 8006db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006db6:	4651      	mov	r1, sl
 8006db8:	00ca      	lsls	r2, r1, #3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	189b      	adds	r3, r3, r2
 8006dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dc8:	464b      	mov	r3, r9
 8006dca:	460a      	mov	r2, r1
 8006dcc:	eb42 0303 	adc.w	r3, r2, r3
 8006dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006de8:	460b      	mov	r3, r1
 8006dea:	18db      	adds	r3, r3, r3
 8006dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dee:	4613      	mov	r3, r2
 8006df0:	eb42 0303 	adc.w	r3, r2, r3
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006dfe:	f7f9 ff0b 	bl	8000c18 <__aeabi_uldivmod>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <UART_SetConfig+0x2d4>)
 8006e08:	fba3 1302 	umull	r1, r3, r3, r2
 8006e0c:	095b      	lsrs	r3, r3, #5
 8006e0e:	2164      	movs	r1, #100	; 0x64
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	3332      	adds	r3, #50	; 0x32
 8006e1a:	4a08      	ldr	r2, [pc, #32]	; (8006e3c <UART_SetConfig+0x2d4>)
 8006e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e20:	095b      	lsrs	r3, r3, #5
 8006e22:	f003 0207 	and.w	r2, r3, #7
 8006e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4422      	add	r2, r4
 8006e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e30:	e105      	b.n	800703e <UART_SetConfig+0x4d6>
 8006e32:	bf00      	nop
 8006e34:	40011000 	.word	0x40011000
 8006e38:	40011400 	.word	0x40011400
 8006e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e52:	4642      	mov	r2, r8
 8006e54:	464b      	mov	r3, r9
 8006e56:	1891      	adds	r1, r2, r2
 8006e58:	6239      	str	r1, [r7, #32]
 8006e5a:	415b      	adcs	r3, r3
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e62:	4641      	mov	r1, r8
 8006e64:	1854      	adds	r4, r2, r1
 8006e66:	4649      	mov	r1, r9
 8006e68:	eb43 0501 	adc.w	r5, r3, r1
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	00eb      	lsls	r3, r5, #3
 8006e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e7a:	00e2      	lsls	r2, r4, #3
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	461d      	mov	r5, r3
 8006e80:	4643      	mov	r3, r8
 8006e82:	18e3      	adds	r3, r4, r3
 8006e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e88:	464b      	mov	r3, r9
 8006e8a:	eb45 0303 	adc.w	r3, r5, r3
 8006e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006eae:	4629      	mov	r1, r5
 8006eb0:	008b      	lsls	r3, r1, #2
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eb8:	4621      	mov	r1, r4
 8006eba:	008a      	lsls	r2, r1, #2
 8006ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ec0:	f7f9 feaa 	bl	8000c18 <__aeabi_uldivmod>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4b60      	ldr	r3, [pc, #384]	; (800704c <UART_SetConfig+0x4e4>)
 8006eca:	fba3 2302 	umull	r2, r3, r3, r2
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	011c      	lsls	r4, r3, #4
 8006ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	1891      	adds	r1, r2, r2
 8006eea:	61b9      	str	r1, [r7, #24]
 8006eec:	415b      	adcs	r3, r3
 8006eee:	61fb      	str	r3, [r7, #28]
 8006ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ef4:	4641      	mov	r1, r8
 8006ef6:	1851      	adds	r1, r2, r1
 8006ef8:	6139      	str	r1, [r7, #16]
 8006efa:	4649      	mov	r1, r9
 8006efc:	414b      	adcs	r3, r1
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f0c:	4659      	mov	r1, fp
 8006f0e:	00cb      	lsls	r3, r1, #3
 8006f10:	4651      	mov	r1, sl
 8006f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f16:	4651      	mov	r1, sl
 8006f18:	00ca      	lsls	r2, r1, #3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4603      	mov	r3, r0
 8006f20:	4642      	mov	r2, r8
 8006f22:	189b      	adds	r3, r3, r2
 8006f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f28:	464b      	mov	r3, r9
 8006f2a:	460a      	mov	r2, r1
 8006f2c:	eb42 0303 	adc.w	r3, r2, r3
 8006f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	008b      	lsls	r3, r1, #2
 8006f50:	4641      	mov	r1, r8
 8006f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f56:	4641      	mov	r1, r8
 8006f58:	008a      	lsls	r2, r1, #2
 8006f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f5e:	f7f9 fe5b 	bl	8000c18 <__aeabi_uldivmod>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4b39      	ldr	r3, [pc, #228]	; (800704c <UART_SetConfig+0x4e4>)
 8006f68:	fba3 1302 	umull	r1, r3, r3, r2
 8006f6c:	095b      	lsrs	r3, r3, #5
 8006f6e:	2164      	movs	r1, #100	; 0x64
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	3332      	adds	r3, #50	; 0x32
 8006f7a:	4a34      	ldr	r2, [pc, #208]	; (800704c <UART_SetConfig+0x4e4>)
 8006f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f86:	441c      	add	r4, r3
 8006f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8006f90:	677a      	str	r2, [r7, #116]	; 0x74
 8006f92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f96:	4642      	mov	r2, r8
 8006f98:	464b      	mov	r3, r9
 8006f9a:	1891      	adds	r1, r2, r2
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	415b      	adcs	r3, r3
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	1851      	adds	r1, r2, r1
 8006faa:	6039      	str	r1, [r7, #0]
 8006fac:	4649      	mov	r1, r9
 8006fae:	414b      	adcs	r3, r1
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fbe:	4659      	mov	r1, fp
 8006fc0:	00cb      	lsls	r3, r1, #3
 8006fc2:	4651      	mov	r1, sl
 8006fc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fc8:	4651      	mov	r1, sl
 8006fca:	00ca      	lsls	r2, r1, #3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	189b      	adds	r3, r3, r2
 8006fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fd8:	464b      	mov	r3, r9
 8006fda:	460a      	mov	r2, r1
 8006fdc:	eb42 0303 	adc.w	r3, r2, r3
 8006fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	663b      	str	r3, [r7, #96]	; 0x60
 8006fec:	667a      	str	r2, [r7, #100]	; 0x64
 8006fee:	f04f 0200 	mov.w	r2, #0
 8006ff2:	f04f 0300 	mov.w	r3, #0
 8006ff6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	008b      	lsls	r3, r1, #2
 8006ffe:	4641      	mov	r1, r8
 8007000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007004:	4641      	mov	r1, r8
 8007006:	008a      	lsls	r2, r1, #2
 8007008:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800700c:	f7f9 fe04 	bl	8000c18 <__aeabi_uldivmod>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4b0d      	ldr	r3, [pc, #52]	; (800704c <UART_SetConfig+0x4e4>)
 8007016:	fba3 1302 	umull	r1, r3, r3, r2
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	2164      	movs	r1, #100	; 0x64
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	3332      	adds	r3, #50	; 0x32
 8007028:	4a08      	ldr	r2, [pc, #32]	; (800704c <UART_SetConfig+0x4e4>)
 800702a:	fba2 2303 	umull	r2, r3, r2, r3
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	f003 020f 	and.w	r2, r3, #15
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4422      	add	r2, r4
 800703c:	609a      	str	r2, [r3, #8]
}
 800703e:	bf00      	nop
 8007040:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007044:	46bd      	mov	sp, r7
 8007046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800704a:	bf00      	nop
 800704c:	51eb851f 	.word	0x51eb851f

08007050 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007054:	4904      	ldr	r1, [pc, #16]	; (8007068 <MX_FATFS_Init+0x18>)
 8007056:	4805      	ldr	r0, [pc, #20]	; (800706c <MX_FATFS_Init+0x1c>)
 8007058:	f002 ff0e 	bl	8009e78 <FATFS_LinkDriver>
 800705c:	4603      	mov	r3, r0
 800705e:	461a      	mov	r2, r3
 8007060:	4b03      	ldr	r3, [pc, #12]	; (8007070 <MX_FATFS_Init+0x20>)
 8007062:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007064:	bf00      	nop
 8007066:	bd80      	pop	{r7, pc}
 8007068:	200024ec 	.word	0x200024ec
 800706c:	20000010 	.word	0x20000010
 8007070:	200024e8 	.word	0x200024e8

08007074 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007078:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800707a:	4618      	mov	r0, r3
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	4618      	mov	r0, r3
 8007092:	f7fa faa7 	bl	80015e4 <SD_disk_initialize>
 8007096:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4603      	mov	r3, r0
 80070a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fa fb7f 	bl	80017b0 <SD_disk_status>
 80070b2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80070cc:	7bf8      	ldrb	r0, [r7, #15]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	f7fa fb82 	bl	80017dc <SD_disk_read>
 80070d8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
 80070ee:	4603      	mov	r3, r0
 80070f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80070f2:	7bf8      	ldrb	r0, [r7, #15]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	f7fa fbd9 	bl	80018b0 <SD_disk_write>
 80070fe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	603a      	str	r2, [r7, #0]
 8007112:	71fb      	strb	r3, [r7, #7]
 8007114:	460b      	mov	r3, r1
 8007116:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007118:	79b9      	ldrb	r1, [r7, #6]
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f7fa fc4a 	bl	80019b8 <SD_disk_ioctl>
 8007124:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	4a08      	ldr	r2, [pc, #32]	; (8007160 <disk_status+0x30>)
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	79fa      	ldrb	r2, [r7, #7]
 8007148:	4905      	ldr	r1, [pc, #20]	; (8007160 <disk_status+0x30>)
 800714a:	440a      	add	r2, r1
 800714c:	7a12      	ldrb	r2, [r2, #8]
 800714e:	4610      	mov	r0, r2
 8007150:	4798      	blx	r3
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20002518 	.word	0x20002518

08007164 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	4a0d      	ldr	r2, [pc, #52]	; (80071ac <disk_initialize+0x48>)
 8007176:	5cd3      	ldrb	r3, [r2, r3]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d111      	bne.n	80071a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	4a0b      	ldr	r2, [pc, #44]	; (80071ac <disk_initialize+0x48>)
 8007180:	2101      	movs	r1, #1
 8007182:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	4a09      	ldr	r2, [pc, #36]	; (80071ac <disk_initialize+0x48>)
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	79fa      	ldrb	r2, [r7, #7]
 8007192:	4906      	ldr	r1, [pc, #24]	; (80071ac <disk_initialize+0x48>)
 8007194:	440a      	add	r2, r1
 8007196:	7a12      	ldrb	r2, [r2, #8]
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20002518 	.word	0x20002518

080071b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80071b0:	b590      	push	{r4, r7, lr}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	4a0a      	ldr	r2, [pc, #40]	; (80071ec <disk_read+0x3c>)
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	689c      	ldr	r4, [r3, #8]
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	4a07      	ldr	r2, [pc, #28]	; (80071ec <disk_read+0x3c>)
 80071d0:	4413      	add	r3, r2
 80071d2:	7a18      	ldrb	r0, [r3, #8]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	68b9      	ldr	r1, [r7, #8]
 80071da:	47a0      	blx	r4
 80071dc:	4603      	mov	r3, r0
 80071de:	75fb      	strb	r3, [r7, #23]
  return res;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd90      	pop	{r4, r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20002518 	.word	0x20002518

080071f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	607a      	str	r2, [r7, #4]
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	4603      	mov	r3, r0
 80071fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	4a0a      	ldr	r2, [pc, #40]	; (800722c <disk_write+0x3c>)
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	68dc      	ldr	r4, [r3, #12]
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	4a07      	ldr	r2, [pc, #28]	; (800722c <disk_write+0x3c>)
 8007210:	4413      	add	r3, r2
 8007212:	7a18      	ldrb	r0, [r3, #8]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	47a0      	blx	r4
 800721c:	4603      	mov	r3, r0
 800721e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007220:	7dfb      	ldrb	r3, [r7, #23]
}
 8007222:	4618      	mov	r0, r3
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	bd90      	pop	{r4, r7, pc}
 800722a:	bf00      	nop
 800722c:	20002518 	.word	0x20002518

08007230 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	603a      	str	r2, [r7, #0]
 800723a:	71fb      	strb	r3, [r7, #7]
 800723c:	460b      	mov	r3, r1
 800723e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	4a09      	ldr	r2, [pc, #36]	; (8007268 <disk_ioctl+0x38>)
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	79fa      	ldrb	r2, [r7, #7]
 800724e:	4906      	ldr	r1, [pc, #24]	; (8007268 <disk_ioctl+0x38>)
 8007250:	440a      	add	r2, r1
 8007252:	7a10      	ldrb	r0, [r2, #8]
 8007254:	79b9      	ldrb	r1, [r7, #6]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	4798      	blx	r3
 800725a:	4603      	mov	r3, r0
 800725c:	73fb      	strb	r3, [r7, #15]
  return res;
 800725e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	20002518 	.word	0x20002518

0800726c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3301      	adds	r3, #1
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800727c:	89fb      	ldrh	r3, [r7, #14]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	b21a      	sxth	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	b21b      	sxth	r3, r3
 8007288:	4313      	orrs	r3, r2
 800728a:	b21b      	sxth	r3, r3
 800728c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800728e:	89fb      	ldrh	r3, [r7, #14]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3303      	adds	r3, #3
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	3202      	adds	r2, #2
 80072b4:	7812      	ldrb	r2, [r2, #0]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	3201      	adds	r2, #1
 80072c2:	7812      	ldrb	r2, [r2, #0]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7812      	ldrb	r2, [r2, #0]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	460b      	mov	r3, r1
 80072ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	887a      	ldrh	r2, [r7, #2]
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	887b      	ldrh	r3, [r7, #2]
 80072fc:	0a1b      	lsrs	r3, r3, #8
 80072fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	607a      	str	r2, [r7, #4]
 8007306:	887a      	ldrh	r2, [r7, #2]
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	701a      	strb	r2, [r3, #0]
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	0a1b      	lsrs	r3, r3, #8
 8007332:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	607a      	str	r2, [r7, #4]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	0a1b      	lsrs	r3, r3, #8
 8007344:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	0a1b      	lsrs	r3, r3, #8
 8007356:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	701a      	strb	r2, [r3, #0]
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00d      	beq.n	80073a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	1c53      	adds	r3, r2, #1
 800738e:	613b      	str	r3, [r7, #16]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	1c59      	adds	r1, r3, #1
 8007394:	6179      	str	r1, [r7, #20]
 8007396:	7812      	ldrb	r2, [r2, #0]
 8007398:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3b01      	subs	r3, #1
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f1      	bne.n	800738a <mem_cpy+0x1a>
	}
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80073b2:	b480      	push	{r7}
 80073b4:	b087      	sub	sp, #28
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	617a      	str	r2, [r7, #20]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	607b      	str	r3, [r7, #4]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1f3      	bne.n	80073c2 <mem_set+0x10>
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80073e8:	b480      	push	{r7}
 80073ea:	b089      	sub	sp, #36	; 0x24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	61fa      	str	r2, [r7, #28]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	4619      	mov	r1, r3
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	61ba      	str	r2, [r7, #24]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	1acb      	subs	r3, r1, r3
 8007414:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3b01      	subs	r3, #1
 800741a:	607b      	str	r3, [r7, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <mem_cmp+0x40>
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0eb      	beq.n	8007400 <mem_cmp+0x18>

	return r;
 8007428:	697b      	ldr	r3, [r7, #20]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3724      	adds	r7, #36	; 0x24
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007440:	e002      	b.n	8007448 <chk_chr+0x12>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3301      	adds	r3, #1
 8007446:	607b      	str	r3, [r7, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <chk_chr+0x26>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	461a      	mov	r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	4293      	cmp	r3, r2
 800745a:	d1f2      	bne.n	8007442 <chk_chr+0xc>
	return *str;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	781b      	ldrb	r3, [r3, #0]
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007476:	2300      	movs	r3, #0
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	e029      	b.n	80074d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007480:	4a27      	ldr	r2, [pc, #156]	; (8007520 <chk_lock+0xb4>)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	4413      	add	r3, r2
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d01d      	beq.n	80074ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800748e:	4a24      	ldr	r2, [pc, #144]	; (8007520 <chk_lock+0xb4>)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	4413      	add	r3, r2
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d116      	bne.n	80074ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80074a0:	4a1f      	ldr	r2, [pc, #124]	; (8007520 <chk_lock+0xb4>)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	4413      	add	r3, r2
 80074a8:	3304      	adds	r3, #4
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d10c      	bne.n	80074ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074b4:	4a1a      	ldr	r2, [pc, #104]	; (8007520 <chk_lock+0xb4>)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	4413      	add	r3, r2
 80074bc:	3308      	adds	r3, #8
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d102      	bne.n	80074ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074c8:	e007      	b.n	80074da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80074ca:	2301      	movs	r3, #1
 80074cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3301      	adds	r3, #1
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d9d2      	bls.n	8007480 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d109      	bne.n	80074f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <chk_lock+0x80>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d101      	bne.n	80074f0 <chk_lock+0x84>
 80074ec:	2300      	movs	r3, #0
 80074ee:	e010      	b.n	8007512 <chk_lock+0xa6>
 80074f0:	2312      	movs	r3, #18
 80074f2:	e00e      	b.n	8007512 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d108      	bne.n	800750c <chk_lock+0xa0>
 80074fa:	4a09      	ldr	r2, [pc, #36]	; (8007520 <chk_lock+0xb4>)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	4413      	add	r3, r2
 8007502:	330c      	adds	r3, #12
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800750a:	d101      	bne.n	8007510 <chk_lock+0xa4>
 800750c:	2310      	movs	r3, #16
 800750e:	e000      	b.n	8007512 <chk_lock+0xa6>
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	200024f8 	.word	0x200024f8

08007524 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800752a:	2300      	movs	r3, #0
 800752c:	607b      	str	r3, [r7, #4]
 800752e:	e002      	b.n	8007536 <enq_lock+0x12>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3301      	adds	r3, #1
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d806      	bhi.n	800754a <enq_lock+0x26>
 800753c:	4a09      	ldr	r2, [pc, #36]	; (8007564 <enq_lock+0x40>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	4413      	add	r3, r2
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1f2      	bne.n	8007530 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b02      	cmp	r3, #2
 800754e:	bf14      	ite	ne
 8007550:	2301      	movne	r3, #1
 8007552:	2300      	moveq	r3, #0
 8007554:	b2db      	uxtb	r3, r3
}
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	200024f8 	.word	0x200024f8

08007568 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e01f      	b.n	80075b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007578:	4a41      	ldr	r2, [pc, #260]	; (8007680 <inc_lock+0x118>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	4413      	add	r3, r2
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d113      	bne.n	80075b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800758a:	4a3d      	ldr	r2, [pc, #244]	; (8007680 <inc_lock+0x118>)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	4413      	add	r3, r2
 8007592:	3304      	adds	r3, #4
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800759a:	429a      	cmp	r2, r3
 800759c:	d109      	bne.n	80075b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800759e:	4a38      	ldr	r2, [pc, #224]	; (8007680 <inc_lock+0x118>)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	4413      	add	r3, r2
 80075a6:	3308      	adds	r3, #8
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d006      	beq.n	80075c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d9dc      	bls.n	8007578 <inc_lock+0x10>
 80075be:	e000      	b.n	80075c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80075c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d132      	bne.n	800762e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e002      	b.n	80075d4 <inc_lock+0x6c>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d806      	bhi.n	80075e8 <inc_lock+0x80>
 80075da:	4a29      	ldr	r2, [pc, #164]	; (8007680 <inc_lock+0x118>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	4413      	add	r3, r2
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1f2      	bne.n	80075ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d101      	bne.n	80075f2 <inc_lock+0x8a>
 80075ee:	2300      	movs	r3, #0
 80075f0:	e040      	b.n	8007674 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4922      	ldr	r1, [pc, #136]	; (8007680 <inc_lock+0x118>)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	440b      	add	r3, r1
 80075fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	491e      	ldr	r1, [pc, #120]	; (8007680 <inc_lock+0x118>)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	440b      	add	r3, r1
 800760c:	3304      	adds	r3, #4
 800760e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	695a      	ldr	r2, [r3, #20]
 8007614:	491a      	ldr	r1, [pc, #104]	; (8007680 <inc_lock+0x118>)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	440b      	add	r3, r1
 800761c:	3308      	adds	r3, #8
 800761e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007620:	4a17      	ldr	r2, [pc, #92]	; (8007680 <inc_lock+0x118>)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4413      	add	r3, r2
 8007628:	330c      	adds	r3, #12
 800762a:	2200      	movs	r2, #0
 800762c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d009      	beq.n	8007648 <inc_lock+0xe0>
 8007634:	4a12      	ldr	r2, [pc, #72]	; (8007680 <inc_lock+0x118>)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	4413      	add	r3, r2
 800763c:	330c      	adds	r3, #12
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <inc_lock+0xe0>
 8007644:	2300      	movs	r3, #0
 8007646:	e015      	b.n	8007674 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d108      	bne.n	8007660 <inc_lock+0xf8>
 800764e:	4a0c      	ldr	r2, [pc, #48]	; (8007680 <inc_lock+0x118>)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	4413      	add	r3, r2
 8007656:	330c      	adds	r3, #12
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	3301      	adds	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	e001      	b.n	8007664 <inc_lock+0xfc>
 8007660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007664:	4906      	ldr	r1, [pc, #24]	; (8007680 <inc_lock+0x118>)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	440b      	add	r3, r1
 800766c:	330c      	adds	r3, #12
 800766e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	200024f8 	.word	0x200024f8

08007684 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3b01      	subs	r3, #1
 8007690:	607b      	str	r3, [r7, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d825      	bhi.n	80076e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8007698:	4a17      	ldr	r2, [pc, #92]	; (80076f8 <dec_lock+0x74>)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	4413      	add	r3, r2
 80076a0:	330c      	adds	r3, #12
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80076a6:	89fb      	ldrh	r3, [r7, #14]
 80076a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ac:	d101      	bne.n	80076b2 <dec_lock+0x2e>
 80076ae:	2300      	movs	r3, #0
 80076b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80076b2:	89fb      	ldrh	r3, [r7, #14]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <dec_lock+0x3a>
 80076b8:	89fb      	ldrh	r3, [r7, #14]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80076be:	4a0e      	ldr	r2, [pc, #56]	; (80076f8 <dec_lock+0x74>)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	4413      	add	r3, r2
 80076c6:	330c      	adds	r3, #12
 80076c8:	89fa      	ldrh	r2, [r7, #14]
 80076ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076cc:	89fb      	ldrh	r3, [r7, #14]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d105      	bne.n	80076de <dec_lock+0x5a>
 80076d2:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <dec_lock+0x74>)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	4413      	add	r3, r2
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	737b      	strb	r3, [r7, #13]
 80076e2:	e001      	b.n	80076e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80076e4:	2302      	movs	r3, #2
 80076e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80076e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	200024f8 	.word	0x200024f8

080076fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	e010      	b.n	800772c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800770a:	4a0d      	ldr	r2, [pc, #52]	; (8007740 <clear_lock+0x44>)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	4413      	add	r3, r2
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	429a      	cmp	r2, r3
 8007718:	d105      	bne.n	8007726 <clear_lock+0x2a>
 800771a:	4a09      	ldr	r2, [pc, #36]	; (8007740 <clear_lock+0x44>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	4413      	add	r3, r2
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3301      	adds	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d9eb      	bls.n	800770a <clear_lock+0xe>
	}
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	200024f8 	.word	0x200024f8

08007744 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	78db      	ldrb	r3, [r3, #3]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d034      	beq.n	80077c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	7858      	ldrb	r0, [r3, #1]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007768:	2301      	movs	r3, #1
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	f7ff fd40 	bl	80071f0 <disk_write>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007776:	2301      	movs	r3, #1
 8007778:	73fb      	strb	r3, [r7, #15]
 800777a:	e022      	b.n	80077c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	1ad2      	subs	r2, r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	429a      	cmp	r2, r3
 8007790:	d217      	bcs.n	80077c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	789b      	ldrb	r3, [r3, #2]
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	e010      	b.n	80077bc <sync_window+0x78>
					wsect += fs->fsize;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	7858      	ldrb	r0, [r3, #1]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077ae:	2301      	movs	r3, #1
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	f7ff fd1d 	bl	80071f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d8eb      	bhi.n	800779a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d01b      	beq.n	800781c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff ffad 	bl	8007744 <sync_window>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d113      	bne.n	800781c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	7858      	ldrb	r0, [r3, #1]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077fe:	2301      	movs	r3, #1
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	f7ff fcd5 	bl	80071b0 <disk_read>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d004      	beq.n	8007816 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800780c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007810:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007812:	2301      	movs	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff87 	bl	8007744 <sync_window>
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d159      	bne.n	80078f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d149      	bne.n	80078dc <sync_fs+0xb4>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	791b      	ldrb	r3, [r3, #4]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d145      	bne.n	80078dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	899b      	ldrh	r3, [r3, #12]
 800785a:	461a      	mov	r2, r3
 800785c:	2100      	movs	r1, #0
 800785e:	f7ff fda8 	bl	80073b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3334      	adds	r3, #52	; 0x34
 8007866:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800786a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff fd37 	bl	80072e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3334      	adds	r3, #52	; 0x34
 8007878:	4921      	ldr	r1, [pc, #132]	; (8007900 <sync_fs+0xd8>)
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff fd4c 	bl	8007318 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3334      	adds	r3, #52	; 0x34
 8007884:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007888:	491e      	ldr	r1, [pc, #120]	; (8007904 <sync_fs+0xdc>)
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fd44 	bl	8007318 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3334      	adds	r3, #52	; 0x34
 8007894:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	4619      	mov	r1, r3
 800789e:	4610      	mov	r0, r2
 80078a0:	f7ff fd3a 	bl	8007318 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3334      	adds	r3, #52	; 0x34
 80078a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f7ff fd30 	bl	8007318 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	7858      	ldrb	r0, [r3, #1]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078d0:	2301      	movs	r3, #1
 80078d2:	f7ff fc8d 	bl	80071f0 <disk_write>
			fs->fsi_flag = 0;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	785b      	ldrb	r3, [r3, #1]
 80078e0:	2200      	movs	r2, #0
 80078e2:	2100      	movs	r1, #0
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff fca3 	bl	8007230 <disk_ioctl>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <sync_fs+0xcc>
 80078f0:	2301      	movs	r3, #1
 80078f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	41615252 	.word	0x41615252
 8007904:	61417272 	.word	0x61417272

08007908 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	3b02      	subs	r3, #2
 8007916:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	3b02      	subs	r3, #2
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d301      	bcc.n	8007928 <clust2sect+0x20>
 8007924:	2300      	movs	r3, #0
 8007926:	e008      	b.n	800793a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	895b      	ldrh	r3, [r3, #10]
 800792c:	461a      	mov	r2, r3
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	fb03 f202 	mul.w	r2, r3, r2
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	4413      	add	r3, r2
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b086      	sub	sp, #24
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d904      	bls.n	8007966 <get_fat+0x20>
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d302      	bcc.n	800796c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007966:	2301      	movs	r3, #1
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	e0bb      	b.n	8007ae4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800796c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007970:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b03      	cmp	r3, #3
 8007978:	f000 8083 	beq.w	8007a82 <get_fat+0x13c>
 800797c:	2b03      	cmp	r3, #3
 800797e:	f300 80a7 	bgt.w	8007ad0 <get_fat+0x18a>
 8007982:	2b01      	cmp	r3, #1
 8007984:	d002      	beq.n	800798c <get_fat+0x46>
 8007986:	2b02      	cmp	r3, #2
 8007988:	d056      	beq.n	8007a38 <get_fat+0xf2>
 800798a:	e0a1      	b.n	8007ad0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	899b      	ldrh	r3, [r3, #12]
 80079a2:	4619      	mov	r1, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80079aa:	4413      	add	r3, r2
 80079ac:	4619      	mov	r1, r3
 80079ae:	6938      	ldr	r0, [r7, #16]
 80079b0:	f7ff ff0c 	bl	80077cc <move_window>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f040 808d 	bne.w	8007ad6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	60fa      	str	r2, [r7, #12]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	8992      	ldrh	r2, [r2, #12]
 80079c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80079ca:	fb01 f202 	mul.w	r2, r1, r2
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4413      	add	r3, r2
 80079d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	899b      	ldrh	r3, [r3, #12]
 80079e2:	4619      	mov	r1, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80079ea:	4413      	add	r3, r2
 80079ec:	4619      	mov	r1, r3
 80079ee:	6938      	ldr	r0, [r7, #16]
 80079f0:	f7ff feec 	bl	80077cc <move_window>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d16f      	bne.n	8007ada <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	899b      	ldrh	r3, [r3, #12]
 80079fe:	461a      	mov	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a06:	fb01 f202 	mul.w	r2, r1, r2
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	461a      	mov	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <get_fat+0xe8>
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	091b      	lsrs	r3, r3, #4
 8007a2c:	e002      	b.n	8007a34 <get_fat+0xee>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a34:	617b      	str	r3, [r7, #20]
			break;
 8007a36:	e055      	b.n	8007ae4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	899b      	ldrh	r3, [r3, #12]
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	4619      	mov	r1, r3
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a4c:	4413      	add	r3, r2
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6938      	ldr	r0, [r7, #16]
 8007a52:	f7ff febb 	bl	80077cc <move_window>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d140      	bne.n	8007ade <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	8992      	ldrh	r2, [r2, #12]
 8007a6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a6e:	fb00 f202 	mul.w	r2, r0, r2
 8007a72:	1a9b      	subs	r3, r3, r2
 8007a74:	440b      	add	r3, r1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fbf8 	bl	800726c <ld_word>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	617b      	str	r3, [r7, #20]
			break;
 8007a80:	e030      	b.n	8007ae4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	899b      	ldrh	r3, [r3, #12]
 8007a8a:	089b      	lsrs	r3, r3, #2
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	4619      	mov	r1, r3
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a96:	4413      	add	r3, r2
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6938      	ldr	r0, [r7, #16]
 8007a9c:	f7ff fe96 	bl	80077cc <move_window>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d11d      	bne.n	8007ae2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	8992      	ldrh	r2, [r2, #12]
 8007ab4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ab8:	fb00 f202 	mul.w	r2, r0, r2
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	440b      	add	r3, r1
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff fbeb 	bl	800729c <ld_dword>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007acc:	617b      	str	r3, [r7, #20]
			break;
 8007ace:	e009      	b.n	8007ae4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	e006      	b.n	8007ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ad6:	bf00      	nop
 8007ad8:	e004      	b.n	8007ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ada:	bf00      	nop
 8007adc:	e002      	b.n	8007ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ade:	bf00      	nop
 8007ae0:	e000      	b.n	8007ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ae2:	bf00      	nop
		}
	}

	return val;
 8007ae4:	697b      	ldr	r3, [r7, #20]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007aee:	b590      	push	{r4, r7, lr}
 8007af0:	b089      	sub	sp, #36	; 0x24
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007afa:	2302      	movs	r3, #2
 8007afc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	f240 8102 	bls.w	8007d0a <put_fat+0x21c>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	f080 80fc 	bcs.w	8007d0a <put_fat+0x21c>
		switch (fs->fs_type) {
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	f000 80b6 	beq.w	8007c88 <put_fat+0x19a>
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	f300 80fd 	bgt.w	8007d1c <put_fat+0x22e>
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d003      	beq.n	8007b2e <put_fat+0x40>
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	f000 8083 	beq.w	8007c32 <put_fat+0x144>
 8007b2c:	e0f6      	b.n	8007d1c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	4413      	add	r3, r2
 8007b3a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	899b      	ldrh	r3, [r3, #12]
 8007b44:	4619      	mov	r1, r3
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b4c:	4413      	add	r3, r2
 8007b4e:	4619      	mov	r1, r3
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f7ff fe3b 	bl	80077cc <move_window>
 8007b56:	4603      	mov	r3, r0
 8007b58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b5a:	7ffb      	ldrb	r3, [r7, #31]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 80d6 	bne.w	8007d0e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	61ba      	str	r2, [r7, #24]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	8992      	ldrh	r2, [r2, #12]
 8007b72:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b76:	fb00 f202 	mul.w	r2, r0, r2
 8007b7a:	1a9b      	subs	r3, r3, r2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00d      	beq.n	8007ba6 <put_fat+0xb8>
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b25b      	sxtb	r3, r3
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	b25a      	sxtb	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	b25b      	sxtb	r3, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	e001      	b.n	8007baa <put_fat+0xbc>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	899b      	ldrh	r3, [r3, #12]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bc4:	4413      	add	r3, r2
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f7ff fdff 	bl	80077cc <move_window>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bd2:	7ffb      	ldrb	r3, [r7, #31]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f040 809c 	bne.w	8007d12 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	899b      	ldrh	r3, [r3, #12]
 8007be4:	461a      	mov	r2, r3
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bec:	fb00 f202 	mul.w	r2, r0, r2
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <put_fat+0x11a>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	091b      	lsrs	r3, r3, #4
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	e00e      	b.n	8007c26 <put_fat+0x138>
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	b25b      	sxtb	r3, r3
 8007c0e:	f023 030f 	bic.w	r3, r3, #15
 8007c12:	b25a      	sxtb	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	0a1b      	lsrs	r3, r3, #8
 8007c18:	b25b      	sxtb	r3, r3
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	b25b      	sxtb	r3, r3
 8007c20:	4313      	orrs	r3, r2
 8007c22:	b25b      	sxtb	r3, r3
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	70da      	strb	r2, [r3, #3]
			break;
 8007c30:	e074      	b.n	8007d1c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	899b      	ldrh	r3, [r3, #12]
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	4619      	mov	r1, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c46:	4413      	add	r3, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff fdbe 	bl	80077cc <move_window>
 8007c50:	4603      	mov	r3, r0
 8007c52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c54:	7ffb      	ldrb	r3, [r7, #31]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d15d      	bne.n	8007d16 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	8992      	ldrh	r2, [r2, #12]
 8007c68:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c6c:	fb00 f202 	mul.w	r2, r0, r2
 8007c70:	1a9b      	subs	r3, r3, r2
 8007c72:	440b      	add	r3, r1
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	b292      	uxth	r2, r2
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fb31 	bl	80072e2 <st_word>
			fs->wflag = 1;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	70da      	strb	r2, [r3, #3]
			break;
 8007c86:	e049      	b.n	8007d1c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	899b      	ldrh	r3, [r3, #12]
 8007c90:	089b      	lsrs	r3, r3, #2
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	4619      	mov	r1, r3
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c9c:	4413      	add	r3, r2
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff fd93 	bl	80077cc <move_window>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007caa:	7ffb      	ldrb	r3, [r7, #31]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d134      	bne.n	8007d1a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	8992      	ldrh	r2, [r2, #12]
 8007cc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cc8:	fb00 f202 	mul.w	r2, r0, r2
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	440b      	add	r3, r1
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff fae3 	bl	800729c <ld_dword>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007cdc:	4323      	orrs	r3, r4
 8007cde:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	8992      	ldrh	r2, [r2, #12]
 8007cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cf2:	fb00 f202 	mul.w	r2, r0, r2
 8007cf6:	1a9b      	subs	r3, r3, r2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff fb0b 	bl	8007318 <st_dword>
			fs->wflag = 1;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	70da      	strb	r2, [r3, #3]
			break;
 8007d08:	e008      	b.n	8007d1c <put_fat+0x22e>
		}
	}
 8007d0a:	bf00      	nop
 8007d0c:	e006      	b.n	8007d1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d0e:	bf00      	nop
 8007d10:	e004      	b.n	8007d1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d12:	bf00      	nop
 8007d14:	e002      	b.n	8007d1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d16:	bf00      	nop
 8007d18:	e000      	b.n	8007d1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d1a:	bf00      	nop
	return res;
 8007d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3724      	adds	r7, #36	; 0x24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd90      	pop	{r4, r7, pc}

08007d26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b088      	sub	sp, #32
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	60b9      	str	r1, [r7, #8]
 8007d30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d904      	bls.n	8007d4c <remove_chain+0x26>
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d301      	bcc.n	8007d50 <remove_chain+0x2a>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e04b      	b.n	8007de8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00c      	beq.n	8007d70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	69b8      	ldr	r0, [r7, #24]
 8007d5e:	f7ff fec6 	bl	8007aee <put_fat>
 8007d62:	4603      	mov	r3, r0
 8007d64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007d66:	7ffb      	ldrb	r3, [r7, #31]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <remove_chain+0x4a>
 8007d6c:	7ffb      	ldrb	r3, [r7, #31]
 8007d6e:	e03b      	b.n	8007de8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7ff fde7 	bl	8007946 <get_fat>
 8007d78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d031      	beq.n	8007de4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <remove_chain+0x64>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e02e      	b.n	8007de8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d90:	d101      	bne.n	8007d96 <remove_chain+0x70>
 8007d92:	2301      	movs	r3, #1
 8007d94:	e028      	b.n	8007de8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007d96:	2200      	movs	r2, #0
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	69b8      	ldr	r0, [r7, #24]
 8007d9c:	f7ff fea7 	bl	8007aee <put_fat>
 8007da0:	4603      	mov	r3, r0
 8007da2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007da4:	7ffb      	ldrb	r3, [r7, #31]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <remove_chain+0x88>
 8007daa:	7ffb      	ldrb	r3, [r7, #31]
 8007dac:	e01c      	b.n	8007de8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	695a      	ldr	r2, [r3, #20]
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	3b02      	subs	r3, #2
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d20b      	bcs.n	8007dd4 <remove_chain+0xae>
			fs->free_clst++;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	791b      	ldrb	r3, [r3, #4]
 8007dca:	f043 0301 	orr.w	r3, r3, #1
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d3c6      	bcc.n	8007d70 <remove_chain+0x4a>
 8007de2:	e000      	b.n	8007de6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007de4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3720      	adds	r7, #32
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10d      	bne.n	8007e22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d004      	beq.n	8007e1c <create_chain+0x2c>
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d31b      	bcc.n	8007e54 <create_chain+0x64>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	61bb      	str	r3, [r7, #24]
 8007e20:	e018      	b.n	8007e54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff fd8e 	bl	8007946 <get_fat>
 8007e2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d801      	bhi.n	8007e36 <create_chain+0x46>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e070      	b.n	8007f18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e3c:	d101      	bne.n	8007e42 <create_chain+0x52>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	e06a      	b.n	8007f18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d201      	bcs.n	8007e50 <create_chain+0x60>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	e063      	b.n	8007f18 <create_chain+0x128>
		scl = clst;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d307      	bcc.n	8007e78 <create_chain+0x88>
				ncl = 2;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d901      	bls.n	8007e78 <create_chain+0x88>
 8007e74:	2300      	movs	r3, #0
 8007e76:	e04f      	b.n	8007f18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007e78:	69f9      	ldr	r1, [r7, #28]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff fd63 	bl	8007946 <get_fat>
 8007e80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00e      	beq.n	8007ea6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d003      	beq.n	8007e96 <create_chain+0xa6>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e94:	d101      	bne.n	8007e9a <create_chain+0xaa>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	e03e      	b.n	8007f18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d1da      	bne.n	8007e58 <create_chain+0x68>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e038      	b.n	8007f18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007ea6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eac:	69f9      	ldr	r1, [r7, #28]
 8007eae:	6938      	ldr	r0, [r7, #16]
 8007eb0:	f7ff fe1d 	bl	8007aee <put_fat>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d109      	bne.n	8007ed2 <create_chain+0xe2>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d006      	beq.n	8007ed2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007ec4:	69fa      	ldr	r2, [r7, #28]
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6938      	ldr	r0, [r7, #16]
 8007eca:	f7ff fe10 	bl	8007aee <put_fat>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d116      	bne.n	8007f06 <create_chain+0x116>
		fs->last_clst = ncl;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	695a      	ldr	r2, [r3, #20]
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	3b02      	subs	r3, #2
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d804      	bhi.n	8007ef6 <create_chain+0x106>
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	1e5a      	subs	r2, r3, #1
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	791b      	ldrb	r3, [r3, #4]
 8007efa:	f043 0301 	orr.w	r3, r3, #1
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	711a      	strb	r2, [r3, #4]
 8007f04:	e007      	b.n	8007f16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d102      	bne.n	8007f12 <create_chain+0x122>
 8007f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f10:	e000      	b.n	8007f14 <create_chain+0x124>
 8007f12:	2301      	movs	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007f16:	69fb      	ldr	r3, [r7, #28]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3720      	adds	r7, #32
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	3304      	adds	r3, #4
 8007f36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	899b      	ldrh	r3, [r3, #12]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	8952      	ldrh	r2, [r2, #10]
 8007f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	613a      	str	r2, [r7, #16]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <clmt_clust+0x42>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e010      	b.n	8007f84 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d307      	bcc.n	8007f7a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	3304      	adds	r3, #4
 8007f76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f78:	e7e9      	b.n	8007f4e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007f7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	4413      	add	r3, r2
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fa6:	d204      	bcs.n	8007fb2 <dir_sdi+0x22>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	f003 031f 	and.w	r3, r3, #31
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e071      	b.n	800809a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d106      	bne.n	8007fd6 <dir_sdi+0x46>
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d902      	bls.n	8007fd6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10c      	bne.n	8007ff6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	095b      	lsrs	r3, r3, #5
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	8912      	ldrh	r2, [r2, #8]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d301      	bcc.n	8007fec <dir_sdi+0x5c>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e056      	b.n	800809a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	61da      	str	r2, [r3, #28]
 8007ff4:	e02d      	b.n	8008052 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	895b      	ldrh	r3, [r3, #10]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	899b      	ldrh	r3, [r3, #12]
 8008000:	fb02 f303 	mul.w	r3, r2, r3
 8008004:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008006:	e019      	b.n	800803c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6979      	ldr	r1, [r7, #20]
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff fc9a 	bl	8007946 <get_fat>
 8008012:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800801a:	d101      	bne.n	8008020 <dir_sdi+0x90>
 800801c:	2301      	movs	r3, #1
 800801e:	e03c      	b.n	800809a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d904      	bls.n	8008030 <dir_sdi+0xa0>
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	429a      	cmp	r2, r3
 800802e:	d301      	bcc.n	8008034 <dir_sdi+0xa4>
 8008030:	2302      	movs	r3, #2
 8008032:	e032      	b.n	800809a <dir_sdi+0x10a>
			ofs -= csz;
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	429a      	cmp	r2, r3
 8008042:	d2e1      	bcs.n	8008008 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008044:	6979      	ldr	r1, [r7, #20]
 8008046:	6938      	ldr	r0, [r7, #16]
 8008048:	f7ff fc5e 	bl	8007908 <clust2sect>
 800804c:	4602      	mov	r2, r0
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <dir_sdi+0xd4>
 8008060:	2302      	movs	r3, #2
 8008062:	e01a      	b.n	800809a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	69da      	ldr	r2, [r3, #28]
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	899b      	ldrh	r3, [r3, #12]
 800806c:	4619      	mov	r1, r3
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	fbb3 f3f1 	udiv	r3, r3, r1
 8008074:	441a      	add	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	899b      	ldrh	r3, [r3, #12]
 8008084:	461a      	mov	r2, r3
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	fbb3 f0f2 	udiv	r0, r3, r2
 800808c:	fb00 f202 	mul.w	r2, r0, r2
 8008090:	1a9b      	subs	r3, r3, r2
 8008092:	18ca      	adds	r2, r1, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b086      	sub	sp, #24
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	3320      	adds	r3, #32
 80080b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <dir_next+0x28>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080c8:	d301      	bcc.n	80080ce <dir_next+0x2c>
 80080ca:	2304      	movs	r3, #4
 80080cc:	e0bb      	b.n	8008246 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	899b      	ldrh	r3, [r3, #12]
 80080d2:	461a      	mov	r2, r3
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80080da:	fb01 f202 	mul.w	r2, r1, r2
 80080de:	1a9b      	subs	r3, r3, r2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f040 809d 	bne.w	8008220 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10b      	bne.n	8008110 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	8912      	ldrh	r2, [r2, #8]
 8008100:	4293      	cmp	r3, r2
 8008102:	f0c0 808d 	bcc.w	8008220 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	61da      	str	r2, [r3, #28]
 800810c:	2304      	movs	r3, #4
 800810e:	e09a      	b.n	8008246 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	899b      	ldrh	r3, [r3, #12]
 8008114:	461a      	mov	r2, r3
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	fbb3 f3f2 	udiv	r3, r3, r2
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	8952      	ldrh	r2, [r2, #10]
 8008120:	3a01      	subs	r2, #1
 8008122:	4013      	ands	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d17b      	bne.n	8008220 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	4619      	mov	r1, r3
 8008130:	4610      	mov	r0, r2
 8008132:	f7ff fc08 	bl	8007946 <get_fat>
 8008136:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d801      	bhi.n	8008142 <dir_next+0xa0>
 800813e:	2302      	movs	r3, #2
 8008140:	e081      	b.n	8008246 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008148:	d101      	bne.n	800814e <dir_next+0xac>
 800814a:	2301      	movs	r3, #1
 800814c:	e07b      	b.n	8008246 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	429a      	cmp	r2, r3
 8008156:	d359      	bcc.n	800820c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	61da      	str	r2, [r3, #28]
 8008164:	2304      	movs	r3, #4
 8008166:	e06e      	b.n	8008246 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	4619      	mov	r1, r3
 8008170:	4610      	mov	r0, r2
 8008172:	f7ff fe3d 	bl	8007df0 <create_chain>
 8008176:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <dir_next+0xe0>
 800817e:	2307      	movs	r3, #7
 8008180:	e061      	b.n	8008246 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <dir_next+0xea>
 8008188:	2302      	movs	r3, #2
 800818a:	e05c      	b.n	8008246 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008192:	d101      	bne.n	8008198 <dir_next+0xf6>
 8008194:	2301      	movs	r3, #1
 8008196:	e056      	b.n	8008246 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f7ff fad3 	bl	8007744 <sync_window>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <dir_next+0x106>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e04e      	b.n	8008246 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	899b      	ldrh	r3, [r3, #12]
 80081b2:	461a      	mov	r2, r3
 80081b4:	2100      	movs	r1, #0
 80081b6:	f7ff f8fc 	bl	80073b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081ba:	2300      	movs	r3, #0
 80081bc:	613b      	str	r3, [r7, #16]
 80081be:	6979      	ldr	r1, [r7, #20]
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f7ff fba1 	bl	8007908 <clust2sect>
 80081c6:	4602      	mov	r2, r0
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	631a      	str	r2, [r3, #48]	; 0x30
 80081cc:	e012      	b.n	80081f4 <dir_next+0x152>
						fs->wflag = 1;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f7ff fab5 	bl	8007744 <sync_window>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <dir_next+0x142>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e030      	b.n	8008246 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	3301      	adds	r3, #1
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	631a      	str	r2, [r3, #48]	; 0x30
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	895b      	ldrh	r3, [r3, #10]
 80081f8:	461a      	mov	r2, r3
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d3e6      	bcc.n	80081ce <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	1ad2      	subs	r2, r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008212:	6979      	ldr	r1, [r7, #20]
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff fb77 	bl	8007908 <clust2sect>
 800821a:	4602      	mov	r2, r0
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	899b      	ldrh	r3, [r3, #12]
 8008230:	461a      	mov	r2, r3
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	fbb3 f0f2 	udiv	r0, r3, r2
 8008238:	fb00 f202 	mul.w	r2, r0, r2
 800823c:	1a9b      	subs	r3, r3, r2
 800823e:	18ca      	adds	r2, r1, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b086      	sub	sp, #24
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800825e:	2100      	movs	r1, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff fe95 	bl	8007f90 <dir_sdi>
 8008266:	4603      	mov	r3, r0
 8008268:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d12b      	bne.n	80082c8 <dir_alloc+0x7a>
		n = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	4619      	mov	r1, r3
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff faa6 	bl	80077cc <move_window>
 8008280:	4603      	mov	r3, r0
 8008282:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d11d      	bne.n	80082c6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2be5      	cmp	r3, #229	; 0xe5
 8008292:	d004      	beq.n	800829e <dir_alloc+0x50>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d107      	bne.n	80082ae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3301      	adds	r3, #1
 80082a2:	613b      	str	r3, [r7, #16]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d102      	bne.n	80082b2 <dir_alloc+0x64>
 80082ac:	e00c      	b.n	80082c8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80082ae:	2300      	movs	r3, #0
 80082b0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80082b2:	2101      	movs	r1, #1
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff fef4 	bl	80080a2 <dir_next>
 80082ba:	4603      	mov	r3, r0
 80082bc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0d7      	beq.n	8008274 <dir_alloc+0x26>
 80082c4:	e000      	b.n	80082c8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80082c6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d101      	bne.n	80082d2 <dir_alloc+0x84>
 80082ce:	2307      	movs	r3, #7
 80082d0:	75fb      	strb	r3, [r7, #23]
	return res;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	331a      	adds	r3, #26
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe ffbe 	bl	800726c <ld_word>
 80082f0:	4603      	mov	r3, r0
 80082f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d109      	bne.n	8008310 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	3314      	adds	r3, #20
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe ffb3 	bl	800726c <ld_word>
 8008306:	4603      	mov	r3, r0
 8008308:	041b      	lsls	r3, r3, #16
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008310:	68fb      	ldr	r3, [r7, #12]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	331a      	adds	r3, #26
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	b292      	uxth	r2, r2
 800832e:	4611      	mov	r1, r2
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe ffd6 	bl	80072e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b03      	cmp	r3, #3
 800833c:	d109      	bne.n	8008352 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f103 0214 	add.w	r2, r3, #20
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	0c1b      	lsrs	r3, r3, #16
 8008348:	b29b      	uxth	r3, r3
 800834a:	4619      	mov	r1, r3
 800834c:	4610      	mov	r0, r2
 800834e:	f7fe ffc8 	bl	80072e2 <st_word>
	}
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008364:	2304      	movs	r3, #4
 8008366:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800836e:	e03c      	b.n	80083ea <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	4619      	mov	r1, r3
 8008376:	6938      	ldr	r0, [r7, #16]
 8008378:	f7ff fa28 	bl	80077cc <move_window>
 800837c:	4603      	mov	r3, r0
 800837e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d136      	bne.n	80083f4 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d102      	bne.n	800839a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008394:	2304      	movs	r3, #4
 8008396:	75fb      	strb	r3, [r7, #23]
 8008398:	e031      	b.n	80083fe <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	330b      	adds	r3, #11
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083a6:	73bb      	strb	r3, [r7, #14]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	7bba      	ldrb	r2, [r7, #14]
 80083ac:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	2be5      	cmp	r3, #229	; 0xe5
 80083b2:	d011      	beq.n	80083d8 <dir_read+0x7e>
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	2b2e      	cmp	r3, #46	; 0x2e
 80083b8:	d00e      	beq.n	80083d8 <dir_read+0x7e>
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b0f      	cmp	r3, #15
 80083be:	d00b      	beq.n	80083d8 <dir_read+0x7e>
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	f023 0320 	bic.w	r3, r3, #32
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	bf0c      	ite	eq
 80083ca:	2301      	moveq	r3, #1
 80083cc:	2300      	movne	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d00f      	beq.n	80083f8 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80083d8:	2100      	movs	r1, #0
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff fe61 	bl	80080a2 <dir_next>
 80083e0:	4603      	mov	r3, r0
 80083e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d108      	bne.n	80083fc <dir_read+0xa2>
	while (dp->sect) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1be      	bne.n	8008370 <dir_read+0x16>
 80083f2:	e004      	b.n	80083fe <dir_read+0xa4>
		if (res != FR_OK) break;
 80083f4:	bf00      	nop
 80083f6:	e002      	b.n	80083fe <dir_read+0xa4>
				break;
 80083f8:	bf00      	nop
 80083fa:	e000      	b.n	80083fe <dir_read+0xa4>
		if (res != FR_OK) break;
 80083fc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <dir_read+0xb0>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	61da      	str	r2, [r3, #28]
	return res;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008422:	2100      	movs	r1, #0
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7ff fdb3 	bl	8007f90 <dir_sdi>
 800842a:	4603      	mov	r3, r0
 800842c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <dir_find+0x24>
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	e03e      	b.n	80084b6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	4619      	mov	r1, r3
 800843e:	6938      	ldr	r0, [r7, #16]
 8008440:	f7ff f9c4 	bl	80077cc <move_window>
 8008444:	4603      	mov	r3, r0
 8008446:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008448:	7dfb      	ldrb	r3, [r7, #23]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d12f      	bne.n	80084ae <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d102      	bne.n	8008462 <dir_find+0x4e>
 800845c:	2304      	movs	r3, #4
 800845e:	75fb      	strb	r3, [r7, #23]
 8008460:	e028      	b.n	80084b4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	330b      	adds	r3, #11
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800846e:	b2da      	uxtb	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	330b      	adds	r3, #11
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10a      	bne.n	800849a <dir_find+0x86>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a18      	ldr	r0, [r3, #32]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3324      	adds	r3, #36	; 0x24
 800848c:	220b      	movs	r2, #11
 800848e:	4619      	mov	r1, r3
 8008490:	f7fe ffaa 	bl	80073e8 <mem_cmp>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00b      	beq.n	80084b2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800849a:	2100      	movs	r1, #0
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff fe00 	bl	80080a2 <dir_next>
 80084a2:	4603      	mov	r3, r0
 80084a4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0c5      	beq.n	8008438 <dir_find+0x24>
 80084ac:	e002      	b.n	80084b4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80084ae:	bf00      	nop
 80084b0:	e000      	b.n	80084b4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80084b2:	bf00      	nop

	return res;
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80084cc:	2101      	movs	r1, #1
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff febd 	bl	800824e <dir_alloc>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d11c      	bne.n	8008518 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	4619      	mov	r1, r3
 80084e4:	68b8      	ldr	r0, [r7, #8]
 80084e6:	f7ff f971 	bl	80077cc <move_window>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d111      	bne.n	8008518 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	2220      	movs	r2, #32
 80084fa:	2100      	movs	r1, #0
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe ff58 	bl	80073b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a18      	ldr	r0, [r3, #32]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3324      	adds	r3, #36	; 0x24
 800850a:	220b      	movs	r2, #11
 800850c:	4619      	mov	r1, r3
 800850e:	f7fe ff2f 	bl	8007370 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2201      	movs	r2, #1
 8008516:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	4619      	mov	r1, r3
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff f948 	bl	80077cc <move_window>
 800853c:	4603      	mov	r3, r0
 800853e:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d106      	bne.n	8008554 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	22e5      	movs	r2, #229	; 0xe5
 800854c:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2201      	movs	r2, #1
 8008552:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8008554:	7afb      	ldrb	r3, [r7, #11]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3324      	adds	r3, #36	; 0x24
 8008574:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008576:	220b      	movs	r2, #11
 8008578:	2120      	movs	r1, #32
 800857a:	68b8      	ldr	r0, [r7, #8]
 800857c:	f7fe ff19 	bl	80073b2 <mem_set>
	si = i = 0; ni = 8;
 8008580:	2300      	movs	r3, #0
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	61fb      	str	r3, [r7, #28]
 8008588:	2308      	movs	r3, #8
 800858a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	61fa      	str	r2, [r7, #28]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800859a:	7efb      	ldrb	r3, [r7, #27]
 800859c:	2b20      	cmp	r3, #32
 800859e:	d94e      	bls.n	800863e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80085a0:	7efb      	ldrb	r3, [r7, #27]
 80085a2:	2b2f      	cmp	r3, #47	; 0x2f
 80085a4:	d006      	beq.n	80085b4 <create_name+0x54>
 80085a6:	7efb      	ldrb	r3, [r7, #27]
 80085a8:	2b5c      	cmp	r3, #92	; 0x5c
 80085aa:	d110      	bne.n	80085ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80085ac:	e002      	b.n	80085b4 <create_name+0x54>
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	3301      	adds	r3, #1
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	4413      	add	r3, r2
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b2f      	cmp	r3, #47	; 0x2f
 80085be:	d0f6      	beq.n	80085ae <create_name+0x4e>
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	4413      	add	r3, r2
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b5c      	cmp	r3, #92	; 0x5c
 80085ca:	d0f0      	beq.n	80085ae <create_name+0x4e>
			break;
 80085cc:	e038      	b.n	8008640 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80085ce:	7efb      	ldrb	r3, [r7, #27]
 80085d0:	2b2e      	cmp	r3, #46	; 0x2e
 80085d2:	d003      	beq.n	80085dc <create_name+0x7c>
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d30c      	bcc.n	80085f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2b0b      	cmp	r3, #11
 80085e0:	d002      	beq.n	80085e8 <create_name+0x88>
 80085e2:	7efb      	ldrb	r3, [r7, #27]
 80085e4:	2b2e      	cmp	r3, #46	; 0x2e
 80085e6:	d001      	beq.n	80085ec <create_name+0x8c>
 80085e8:	2306      	movs	r3, #6
 80085ea:	e044      	b.n	8008676 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80085ec:	2308      	movs	r3, #8
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	230b      	movs	r3, #11
 80085f2:	617b      	str	r3, [r7, #20]
			continue;
 80085f4:	e022      	b.n	800863c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80085f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	da04      	bge.n	8008608 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80085fe:	7efb      	ldrb	r3, [r7, #27]
 8008600:	3b80      	subs	r3, #128	; 0x80
 8008602:	4a1f      	ldr	r2, [pc, #124]	; (8008680 <create_name+0x120>)
 8008604:	5cd3      	ldrb	r3, [r2, r3]
 8008606:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008608:	7efb      	ldrb	r3, [r7, #27]
 800860a:	4619      	mov	r1, r3
 800860c:	481d      	ldr	r0, [pc, #116]	; (8008684 <create_name+0x124>)
 800860e:	f7fe ff12 	bl	8007436 <chk_chr>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <create_name+0xbc>
 8008618:	2306      	movs	r3, #6
 800861a:	e02c      	b.n	8008676 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800861c:	7efb      	ldrb	r3, [r7, #27]
 800861e:	2b60      	cmp	r3, #96	; 0x60
 8008620:	d905      	bls.n	800862e <create_name+0xce>
 8008622:	7efb      	ldrb	r3, [r7, #27]
 8008624:	2b7a      	cmp	r3, #122	; 0x7a
 8008626:	d802      	bhi.n	800862e <create_name+0xce>
 8008628:	7efb      	ldrb	r3, [r7, #27]
 800862a:	3b20      	subs	r3, #32
 800862c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	613a      	str	r2, [r7, #16]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	4413      	add	r3, r2
 8008638:	7efa      	ldrb	r2, [r7, #27]
 800863a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800863c:	e7a6      	b.n	800858c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800863e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	441a      	add	r2, r3
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <create_name+0xf4>
 8008650:	2306      	movs	r3, #6
 8008652:	e010      	b.n	8008676 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2be5      	cmp	r3, #229	; 0xe5
 800865a:	d102      	bne.n	8008662 <create_name+0x102>
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2205      	movs	r2, #5
 8008660:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008662:	7efb      	ldrb	r3, [r7, #27]
 8008664:	2b20      	cmp	r3, #32
 8008666:	d801      	bhi.n	800866c <create_name+0x10c>
 8008668:	2204      	movs	r2, #4
 800866a:	e000      	b.n	800866e <create_name+0x10e>
 800866c:	2200      	movs	r2, #0
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	330b      	adds	r3, #11
 8008672:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008674:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	0800db94 	.word	0x0800db94
 8008684:	0800d08c 	.word	0x0800d08c

08008688 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800869c:	e002      	b.n	80086a4 <follow_path+0x1c>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	3301      	adds	r3, #1
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b2f      	cmp	r3, #47	; 0x2f
 80086aa:	d0f8      	beq.n	800869e <follow_path+0x16>
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b5c      	cmp	r3, #92	; 0x5c
 80086b2:	d0f4      	beq.n	800869e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	2200      	movs	r2, #0
 80086b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b1f      	cmp	r3, #31
 80086c0:	d80a      	bhi.n	80086d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2280      	movs	r2, #128	; 0x80
 80086c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80086ca:	2100      	movs	r1, #0
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff fc5f 	bl	8007f90 <dir_sdi>
 80086d2:	4603      	mov	r3, r0
 80086d4:	75fb      	strb	r3, [r7, #23]
 80086d6:	e048      	b.n	800876a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80086d8:	463b      	mov	r3, r7
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff ff3f 	bl	8008560 <create_name>
 80086e2:	4603      	mov	r3, r0
 80086e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d139      	bne.n	8008760 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff fe91 	bl	8008414 <dir_find>
 80086f2:	4603      	mov	r3, r0
 80086f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80086fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00a      	beq.n	800871a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b04      	cmp	r3, #4
 8008708:	d12c      	bne.n	8008764 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800870a:	7afb      	ldrb	r3, [r7, #11]
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b00      	cmp	r3, #0
 8008712:	d127      	bne.n	8008764 <follow_path+0xdc>
 8008714:	2305      	movs	r3, #5
 8008716:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008718:	e024      	b.n	8008764 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800871a:	7afb      	ldrb	r3, [r7, #11]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d121      	bne.n	8008768 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	799b      	ldrb	r3, [r3, #6]
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	d102      	bne.n	8008736 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008730:	2305      	movs	r3, #5
 8008732:	75fb      	strb	r3, [r7, #23]
 8008734:	e019      	b.n	800876a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	8992      	ldrh	r2, [r2, #12]
 8008744:	fbb3 f0f2 	udiv	r0, r3, r2
 8008748:	fb00 f202 	mul.w	r2, r0, r2
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	440b      	add	r3, r1
 8008750:	4619      	mov	r1, r3
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7ff fdc2 	bl	80082dc <ld_clust>
 8008758:	4602      	mov	r2, r0
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800875e:	e7bb      	b.n	80086d8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008760:	bf00      	nop
 8008762:	e002      	b.n	800876a <follow_path+0xe2>
				break;
 8008764:	bf00      	nop
 8008766:	e000      	b.n	800876a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008768:	bf00      	nop
			}
		}
	}

	return res;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800877c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008780:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d031      	beq.n	80087ee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	e002      	b.n	8008798 <get_ldnumber+0x24>
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	3301      	adds	r3, #1
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b20      	cmp	r3, #32
 800879e:	d903      	bls.n	80087a8 <get_ldnumber+0x34>
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2b3a      	cmp	r3, #58	; 0x3a
 80087a6:	d1f4      	bne.n	8008792 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b3a      	cmp	r3, #58	; 0x3a
 80087ae:	d11c      	bne.n	80087ea <get_ldnumber+0x76>
			tp = *path;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	60fa      	str	r2, [r7, #12]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	3b30      	subs	r3, #48	; 0x30
 80087c0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b09      	cmp	r3, #9
 80087c6:	d80e      	bhi.n	80087e6 <get_ldnumber+0x72>
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d10a      	bne.n	80087e6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d107      	bne.n	80087e6 <get_ldnumber+0x72>
					vol = (int)i;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	3301      	adds	r3, #1
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	e002      	b.n	80087f0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80087ea:	2300      	movs	r3, #0
 80087ec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80087ee:	693b      	ldr	r3, [r7, #16]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	70da      	strb	r2, [r3, #3]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008812:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7fe ffd8 	bl	80077cc <move_window>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <check_fs+0x2a>
 8008822:	2304      	movs	r3, #4
 8008824:	e038      	b.n	8008898 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3334      	adds	r3, #52	; 0x34
 800882a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fd1c 	bl	800726c <ld_word>
 8008834:	4603      	mov	r3, r0
 8008836:	461a      	mov	r2, r3
 8008838:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800883c:	429a      	cmp	r2, r3
 800883e:	d001      	beq.n	8008844 <check_fs+0x48>
 8008840:	2303      	movs	r3, #3
 8008842:	e029      	b.n	8008898 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800884a:	2be9      	cmp	r3, #233	; 0xe9
 800884c:	d009      	beq.n	8008862 <check_fs+0x66>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008854:	2beb      	cmp	r3, #235	; 0xeb
 8008856:	d11e      	bne.n	8008896 <check_fs+0x9a>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800885e:	2b90      	cmp	r3, #144	; 0x90
 8008860:	d119      	bne.n	8008896 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3334      	adds	r3, #52	; 0x34
 8008866:	3336      	adds	r3, #54	; 0x36
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fd17 	bl	800729c <ld_dword>
 800886e:	4603      	mov	r3, r0
 8008870:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008874:	4a0a      	ldr	r2, [pc, #40]	; (80088a0 <check_fs+0xa4>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d101      	bne.n	800887e <check_fs+0x82>
 800887a:	2300      	movs	r3, #0
 800887c:	e00c      	b.n	8008898 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3334      	adds	r3, #52	; 0x34
 8008882:	3352      	adds	r3, #82	; 0x52
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fd09 	bl	800729c <ld_dword>
 800888a:	4603      	mov	r3, r0
 800888c:	4a05      	ldr	r2, [pc, #20]	; (80088a4 <check_fs+0xa8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d101      	bne.n	8008896 <check_fs+0x9a>
 8008892:	2300      	movs	r3, #0
 8008894:	e000      	b.n	8008898 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008896:	2302      	movs	r3, #2
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	00544146 	.word	0x00544146
 80088a4:	33544146 	.word	0x33544146

080088a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b096      	sub	sp, #88	; 0x58
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	4613      	mov	r3, r2
 80088b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7ff ff59 	bl	8008774 <get_ldnumber>
 80088c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80088c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	da01      	bge.n	80088ce <find_volume+0x26>
 80088ca:	230b      	movs	r3, #11
 80088cc:	e262      	b.n	8008d94 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80088ce:	4a9f      	ldr	r2, [pc, #636]	; (8008b4c <find_volume+0x2a4>)
 80088d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <find_volume+0x3a>
 80088de:	230c      	movs	r3, #12
 80088e0:	e258      	b.n	8008d94 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	f023 0301 	bic.w	r3, r3, #1
 80088ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d01a      	beq.n	800892e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	785b      	ldrb	r3, [r3, #1]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe fc17 	bl	8007130 <disk_status>
 8008902:	4603      	mov	r3, r0
 8008904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10c      	bne.n	800892e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d007      	beq.n	800892a <find_volume+0x82>
 800891a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008926:	230a      	movs	r3, #10
 8008928:	e234      	b.n	8008d94 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800892a:	2300      	movs	r3, #0
 800892c:	e232      	b.n	8008d94 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008936:	b2da      	uxtb	r2, r3
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	4618      	mov	r0, r3
 8008942:	f7fe fc0f 	bl	8007164 <disk_initialize>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800894c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008958:	2303      	movs	r3, #3
 800895a:	e21b      	b.n	8008d94 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <find_volume+0xca>
 8008962:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008966:	f003 0304 	and.w	r3, r3, #4
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800896e:	230a      	movs	r3, #10
 8008970:	e210      	b.n	8008d94 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	7858      	ldrb	r0, [r3, #1]
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	330c      	adds	r3, #12
 800897a:	461a      	mov	r2, r3
 800897c:	2102      	movs	r1, #2
 800897e:	f7fe fc57 	bl	8007230 <disk_ioctl>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <find_volume+0xe4>
 8008988:	2301      	movs	r3, #1
 800898a:	e203      	b.n	8008d94 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	899b      	ldrh	r3, [r3, #12]
 8008990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008994:	d80d      	bhi.n	80089b2 <find_volume+0x10a>
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	899b      	ldrh	r3, [r3, #12]
 800899a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800899e:	d308      	bcc.n	80089b2 <find_volume+0x10a>
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	899b      	ldrh	r3, [r3, #12]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	899b      	ldrh	r3, [r3, #12]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	4013      	ands	r3, r2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <find_volume+0x10e>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e1ee      	b.n	8008d94 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80089ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089be:	f7ff ff1d 	bl	80087fc <check_fs>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80089c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d149      	bne.n	8008a64 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089d0:	2300      	movs	r3, #0
 80089d2:	643b      	str	r3, [r7, #64]	; 0x40
 80089d4:	e01e      	b.n	8008a14 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80089dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089de:	011b      	lsls	r3, r3, #4
 80089e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80089e4:	4413      	add	r3, r2
 80089e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	3304      	adds	r3, #4
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d006      	beq.n	8008a00 <find_volume+0x158>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	3308      	adds	r3, #8
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe fc50 	bl	800729c <ld_dword>
 80089fc:	4602      	mov	r2, r0
 80089fe:	e000      	b.n	8008a02 <find_volume+0x15a>
 8008a00:	2200      	movs	r2, #0
 8008a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	3358      	adds	r3, #88	; 0x58
 8008a08:	443b      	add	r3, r7
 8008a0a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a10:	3301      	adds	r3, #1
 8008a12:	643b      	str	r3, [r7, #64]	; 0x40
 8008a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d9dd      	bls.n	80089d6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <find_volume+0x182>
 8008a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a26:	3b01      	subs	r3, #1
 8008a28:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	3358      	adds	r3, #88	; 0x58
 8008a30:	443b      	add	r3, r7
 8008a32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008a36:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d005      	beq.n	8008a4a <find_volume+0x1a2>
 8008a3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a42:	f7ff fedb 	bl	80087fc <check_fs>
 8008a46:	4603      	mov	r3, r0
 8008a48:	e000      	b.n	8008a4c <find_volume+0x1a4>
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d905      	bls.n	8008a64 <find_volume+0x1bc>
 8008a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d9e2      	bls.n	8008a2a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d101      	bne.n	8008a70 <find_volume+0x1c8>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e191      	b.n	8008d94 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008a70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d901      	bls.n	8008a7c <find_volume+0x1d4>
 8008a78:	230d      	movs	r3, #13
 8008a7a:	e18b      	b.n	8008d94 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7e:	3334      	adds	r3, #52	; 0x34
 8008a80:	330b      	adds	r3, #11
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fbf2 	bl	800726c <ld_word>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	899b      	ldrh	r3, [r3, #12]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d001      	beq.n	8008a98 <find_volume+0x1f0>
 8008a94:	230d      	movs	r3, #13
 8008a96:	e17d      	b.n	8008d94 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9a:	3334      	adds	r3, #52	; 0x34
 8008a9c:	3316      	adds	r3, #22
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fbe4 	bl	800726c <ld_word>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d106      	bne.n	8008abc <find_volume+0x214>
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	3334      	adds	r3, #52	; 0x34
 8008ab2:	3324      	adds	r3, #36	; 0x24
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fe fbf1 	bl	800729c <ld_dword>
 8008aba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ac0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	789b      	ldrb	r3, [r3, #2]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d005      	beq.n	8008ae0 <find_volume+0x238>
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	789b      	ldrb	r3, [r3, #2]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d001      	beq.n	8008ae0 <find_volume+0x238>
 8008adc:	230d      	movs	r3, #13
 8008ade:	e159      	b.n	8008d94 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	789b      	ldrb	r3, [r3, #2]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae8:	fb02 f303 	mul.w	r3, r2, r3
 8008aec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	895b      	ldrh	r3, [r3, #10]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d008      	beq.n	8008b14 <find_volume+0x26c>
 8008b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b04:	895b      	ldrh	r3, [r3, #10]
 8008b06:	461a      	mov	r2, r3
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	895b      	ldrh	r3, [r3, #10]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	4013      	ands	r3, r2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <find_volume+0x270>
 8008b14:	230d      	movs	r3, #13
 8008b16:	e13d      	b.n	8008d94 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	3334      	adds	r3, #52	; 0x34
 8008b1c:	3311      	adds	r3, #17
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe fba4 	bl	800726c <ld_word>
 8008b24:	4603      	mov	r3, r0
 8008b26:	461a      	mov	r2, r3
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	891b      	ldrh	r3, [r3, #8]
 8008b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b32:	8992      	ldrh	r2, [r2, #12]
 8008b34:	0952      	lsrs	r2, r2, #5
 8008b36:	b292      	uxth	r2, r2
 8008b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b3c:	fb01 f202 	mul.w	r2, r1, r2
 8008b40:	1a9b      	subs	r3, r3, r2
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <find_volume+0x2a8>
 8008b48:	230d      	movs	r3, #13
 8008b4a:	e123      	b.n	8008d94 <find_volume+0x4ec>
 8008b4c:	200024f0 	.word	0x200024f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	3334      	adds	r3, #52	; 0x34
 8008b54:	3313      	adds	r3, #19
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fb88 	bl	800726c <ld_word>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <find_volume+0x2cc>
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	3334      	adds	r3, #52	; 0x34
 8008b6a:	3320      	adds	r3, #32
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe fb95 	bl	800729c <ld_dword>
 8008b72:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b76:	3334      	adds	r3, #52	; 0x34
 8008b78:	330e      	adds	r3, #14
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe fb76 	bl	800726c <ld_word>
 8008b80:	4603      	mov	r3, r0
 8008b82:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008b84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <find_volume+0x2e6>
 8008b8a:	230d      	movs	r3, #13
 8008b8c:	e102      	b.n	8008d94 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008b8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b92:	4413      	add	r3, r2
 8008b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b96:	8911      	ldrh	r1, [r2, #8]
 8008b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b9a:	8992      	ldrh	r2, [r2, #12]
 8008b9c:	0952      	lsrs	r2, r2, #5
 8008b9e:	b292      	uxth	r2, r2
 8008ba0:	fbb1 f2f2 	udiv	r2, r1, r2
 8008ba4:	b292      	uxth	r2, r2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d201      	bcs.n	8008bb6 <find_volume+0x30e>
 8008bb2:	230d      	movs	r3, #13
 8008bb4:	e0ee      	b.n	8008d94 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bbe:	8952      	ldrh	r2, [r2, #10]
 8008bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <find_volume+0x328>
 8008bcc:	230d      	movs	r3, #13
 8008bce:	e0e1      	b.n	8008d94 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d802      	bhi.n	8008be6 <find_volume+0x33e>
 8008be0:	2302      	movs	r3, #2
 8008be2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d802      	bhi.n	8008bf6 <find_volume+0x34e>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	1c9a      	adds	r2, r3, #2
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c02:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008c04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c08:	441a      	add	r2, r3
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008c0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	441a      	add	r2, r3
 8008c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c16:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008c18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d11e      	bne.n	8008c5e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	3334      	adds	r3, #52	; 0x34
 8008c24:	332a      	adds	r3, #42	; 0x2a
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fb20 	bl	800726c <ld_word>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <find_volume+0x38e>
 8008c32:	230d      	movs	r3, #13
 8008c34:	e0ae      	b.n	8008d94 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	891b      	ldrh	r3, [r3, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <find_volume+0x39a>
 8008c3e:	230d      	movs	r3, #13
 8008c40:	e0a8      	b.n	8008d94 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	3334      	adds	r3, #52	; 0x34
 8008c46:	332c      	adds	r3, #44	; 0x2c
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe fb27 	bl	800729c <ld_dword>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c5c:	e01f      	b.n	8008c9e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	891b      	ldrh	r3, [r3, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <find_volume+0x3c2>
 8008c66:	230d      	movs	r3, #13
 8008c68:	e094      	b.n	8008d94 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c70:	441a      	add	r2, r3
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008c76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d103      	bne.n	8008c86 <find_volume+0x3de>
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	e00a      	b.n	8008c9c <find_volume+0x3f4>
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	699a      	ldr	r2, [r3, #24]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	4413      	add	r3, r2
 8008c90:	085a      	lsrs	r2, r3, #1
 8008c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008c9c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	69da      	ldr	r2, [r3, #28]
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	899b      	ldrh	r3, [r3, #12]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008caa:	440b      	add	r3, r1
 8008cac:	3b01      	subs	r3, #1
 8008cae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cb0:	8989      	ldrh	r1, [r1, #12]
 8008cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d201      	bcs.n	8008cbe <find_volume+0x416>
 8008cba:	230d      	movs	r3, #13
 8008cbc:	e06a      	b.n	8008d94 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cc4:	615a      	str	r2, [r3, #20]
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	695a      	ldr	r2, [r3, #20]
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd0:	2280      	movs	r2, #128	; 0x80
 8008cd2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d149      	bne.n	8008d70 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	3334      	adds	r3, #52	; 0x34
 8008ce0:	3330      	adds	r3, #48	; 0x30
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fac2 	bl	800726c <ld_word>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d140      	bne.n	8008d70 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cf6:	f7fe fd69 	bl	80077cc <move_window>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d137      	bne.n	8008d70 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d02:	2200      	movs	r2, #0
 8008d04:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	3334      	adds	r3, #52	; 0x34
 8008d0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe faac 	bl	800726c <ld_word>
 8008d14:	4603      	mov	r3, r0
 8008d16:	461a      	mov	r2, r3
 8008d18:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d127      	bne.n	8008d70 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d22:	3334      	adds	r3, #52	; 0x34
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe fab9 	bl	800729c <ld_dword>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	4a1b      	ldr	r2, [pc, #108]	; (8008d9c <find_volume+0x4f4>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d11e      	bne.n	8008d70 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	3334      	adds	r3, #52	; 0x34
 8008d36:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe faae 	bl	800729c <ld_dword>
 8008d40:	4603      	mov	r3, r0
 8008d42:	4a17      	ldr	r2, [pc, #92]	; (8008da0 <find_volume+0x4f8>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d113      	bne.n	8008d70 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	3334      	adds	r3, #52	; 0x34
 8008d4c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe faa3 	bl	800729c <ld_dword>
 8008d56:	4602      	mov	r2, r0
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	3334      	adds	r3, #52	; 0x34
 8008d60:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fa99 	bl	800729c <ld_dword>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008d76:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d78:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <find_volume+0x4fc>)
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <find_volume+0x4fc>)
 8008d82:	801a      	strh	r2, [r3, #0]
 8008d84:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <find_volume+0x4fc>)
 8008d86:	881a      	ldrh	r2, [r3, #0]
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008d8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d8e:	f7fe fcb5 	bl	80076fc <clear_lock>
#endif
	return FR_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3758      	adds	r7, #88	; 0x58
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	41615252 	.word	0x41615252
 8008da0:	61417272 	.word	0x61417272
 8008da4:	200024f4 	.word	0x200024f4

08008da8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008db2:	2309      	movs	r3, #9
 8008db4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01c      	beq.n	8008df6 <validate+0x4e>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d018      	beq.n	8008df6 <validate+0x4e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d013      	beq.n	8008df6 <validate+0x4e>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	889a      	ldrh	r2, [r3, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	88db      	ldrh	r3, [r3, #6]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d10c      	bne.n	8008df6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe f9a4 	bl	8007130 <disk_status>
 8008de8:	4603      	mov	r3, r0
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <validate+0x4e>
			res = FR_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <validate+0x5a>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	e000      	b.n	8008e04 <validate+0x5c>
 8008e02:	2300      	movs	r3, #0
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	6013      	str	r3, [r2, #0]
	return res;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008e26:	f107 0310 	add.w	r3, r7, #16
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fca2 	bl	8008774 <get_ldnumber>
 8008e30:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	da01      	bge.n	8008e3c <f_mount+0x28>
 8008e38:	230b      	movs	r3, #11
 8008e3a:	e02b      	b.n	8008e94 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008e3c:	4a17      	ldr	r2, [pc, #92]	; (8008e9c <f_mount+0x88>)
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e44:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008e4c:	69b8      	ldr	r0, [r7, #24]
 8008e4e:	f7fe fc55 	bl	80076fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2200      	movs	r2, #0
 8008e56:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	490d      	ldr	r1, [pc, #52]	; (8008e9c <f_mount+0x88>)
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d002      	beq.n	8008e7a <f_mount+0x66>
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d001      	beq.n	8008e7e <f_mount+0x6a>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e00a      	b.n	8008e94 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008e7e:	f107 010c 	add.w	r1, r7, #12
 8008e82:	f107 0308 	add.w	r3, r7, #8
 8008e86:	2200      	movs	r2, #0
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff fd0d 	bl	80088a8 <find_volume>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3720      	adds	r7, #32
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	200024f0 	.word	0x200024f0

08008ea0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b098      	sub	sp, #96	; 0x60
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <f_open+0x18>
 8008eb4:	2309      	movs	r3, #9
 8008eb6:	e1bb      	b.n	8009230 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
 8008eba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ebe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008ec0:	79fa      	ldrb	r2, [r7, #7]
 8008ec2:	f107 0110 	add.w	r1, r7, #16
 8008ec6:	f107 0308 	add.w	r3, r7, #8
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff fcec 	bl	80088a8 <find_volume>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008ed6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f040 819f 	bne.w	800921e <f_open+0x37e>
		dj.obj.fs = fs;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	f107 0314 	add.w	r3, r7, #20
 8008eea:	4611      	mov	r1, r2
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff fbcb 	bl	8008688 <follow_path>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008ef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d11a      	bne.n	8008f36 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008f00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f04:	b25b      	sxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	da03      	bge.n	8008f12 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008f0a:	2306      	movs	r3, #6
 8008f0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f10:	e011      	b.n	8008f36 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	f023 0301 	bic.w	r3, r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bf14      	ite	ne
 8008f1c:	2301      	movne	r3, #1
 8008f1e:	2300      	moveq	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	461a      	mov	r2, r3
 8008f24:	f107 0314 	add.w	r3, r7, #20
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe fa9e 	bl	800746c <chk_lock>
 8008f30:	4603      	mov	r3, r0
 8008f32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	f003 031c 	and.w	r3, r3, #28
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d07f      	beq.n	8009040 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008f40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d017      	beq.n	8008f78 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008f48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f4c:	2b04      	cmp	r3, #4
 8008f4e:	d10e      	bne.n	8008f6e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008f50:	f7fe fae8 	bl	8007524 <enq_lock>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d006      	beq.n	8008f68 <f_open+0xc8>
 8008f5a:	f107 0314 	add.w	r3, r7, #20
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff faad 	bl	80084be <dir_register>
 8008f64:	4603      	mov	r3, r0
 8008f66:	e000      	b.n	8008f6a <f_open+0xca>
 8008f68:	2312      	movs	r3, #18
 8008f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	f043 0308 	orr.w	r3, r3, #8
 8008f74:	71fb      	strb	r3, [r7, #7]
 8008f76:	e010      	b.n	8008f9a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008f78:	7ebb      	ldrb	r3, [r7, #26]
 8008f7a:	f003 0311 	and.w	r3, r3, #17
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <f_open+0xea>
					res = FR_DENIED;
 8008f82:	2307      	movs	r3, #7
 8008f84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f88:	e007      	b.n	8008f9a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <f_open+0xfa>
 8008f94:	2308      	movs	r3, #8
 8008f96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d168      	bne.n	8009074 <f_open+0x1d4>
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	f003 0308 	and.w	r3, r3, #8
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d063      	beq.n	8009074 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008fac:	f7fe f862 	bl	8007074 <get_fattime>
 8008fb0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb4:	330e      	adds	r3, #14
 8008fb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe f9ad 	bl	8007318 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc0:	3316      	adds	r3, #22
 8008fc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fe f9a7 	bl	8007318 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fcc:	330b      	adds	r3, #11
 8008fce:	2220      	movs	r2, #32
 8008fd0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff f97f 	bl	80082dc <ld_clust>
 8008fde:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff f997 	bl	800831a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	331c      	adds	r3, #28
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe f990 	bl	8007318 <st_dword>
					fs->wflag = 1;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009000:	2b00      	cmp	r3, #0
 8009002:	d037      	beq.n	8009074 <f_open+0x1d4>
						dw = fs->winsect;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009008:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800900a:	f107 0314 	add.w	r3, r7, #20
 800900e:	2200      	movs	r2, #0
 8009010:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe fe87 	bl	8007d26 <remove_chain>
 8009018:	4603      	mov	r3, r0
 800901a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800901e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009022:	2b00      	cmp	r3, #0
 8009024:	d126      	bne.n	8009074 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe fbce 	bl	80077cc <move_window>
 8009030:	4603      	mov	r3, r0
 8009032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800903a:	3a01      	subs	r2, #1
 800903c:	611a      	str	r2, [r3, #16]
 800903e:	e019      	b.n	8009074 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009040:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009044:	2b00      	cmp	r3, #0
 8009046:	d115      	bne.n	8009074 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009048:	7ebb      	ldrb	r3, [r7, #26]
 800904a:	f003 0310 	and.w	r3, r3, #16
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009052:	2304      	movs	r3, #4
 8009054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009058:	e00c      	b.n	8009074 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b00      	cmp	r3, #0
 8009062:	d007      	beq.n	8009074 <f_open+0x1d4>
 8009064:	7ebb      	ldrb	r3, [r7, #26]
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <f_open+0x1d4>
						res = FR_DENIED;
 800906e:	2307      	movs	r3, #7
 8009070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009078:	2b00      	cmp	r3, #0
 800907a:	d128      	bne.n	80090ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	f003 0308 	and.w	r3, r3, #8
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800908c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	f023 0301 	bic.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bf14      	ite	ne
 80090a6:	2301      	movne	r3, #1
 80090a8:	2300      	moveq	r3, #0
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	461a      	mov	r2, r3
 80090ae:	f107 0314 	add.w	r3, r7, #20
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe fa57 	bl	8007568 <inc_lock>
 80090ba:	4602      	mov	r2, r0
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <f_open+0x22e>
 80090c8:	2302      	movs	r3, #2
 80090ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80090ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f040 80a3 	bne.w	800921e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090dc:	4611      	mov	r1, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff f8fc 	bl	80082dc <ld_clust>
 80090e4:	4602      	mov	r2, r0
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80090ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ec:	331c      	adds	r3, #28
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe f8d4 	bl	800729c <ld_dword>
 80090f4:	4602      	mov	r2, r0
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	88da      	ldrh	r2, [r3, #6]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	79fa      	ldrb	r2, [r7, #7]
 8009112:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3330      	adds	r3, #48	; 0x30
 800912a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800912e:	2100      	movs	r1, #0
 8009130:	4618      	mov	r0, r3
 8009132:	f7fe f93e 	bl	80073b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d06e      	beq.n	800921e <f_open+0x37e>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d06a      	beq.n	800921e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	895b      	ldrh	r3, [r3, #10]
 8009154:	461a      	mov	r2, r3
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	899b      	ldrh	r3, [r3, #12]
 800915a:	fb02 f303 	mul.w	r3, r2, r3
 800915e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	657b      	str	r3, [r7, #84]	; 0x54
 800916c:	e016      	b.n	800919c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fbe7 	bl	8007946 <get_fat>
 8009178:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800917a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800917c:	2b01      	cmp	r3, #1
 800917e:	d802      	bhi.n	8009186 <f_open+0x2e6>
 8009180:	2302      	movs	r3, #2
 8009182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800918c:	d102      	bne.n	8009194 <f_open+0x2f4>
 800918e:	2301      	movs	r3, #1
 8009190:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	657b      	str	r3, [r7, #84]	; 0x54
 800919c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d103      	bne.n	80091ac <f_open+0x30c>
 80091a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d8e0      	bhi.n	800916e <f_open+0x2ce>
				}
				fp->clust = clst;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80091b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d131      	bne.n	800921e <f_open+0x37e>
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	899b      	ldrh	r3, [r3, #12]
 80091be:	461a      	mov	r2, r3
 80091c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80091c6:	fb01 f202 	mul.w	r2, r1, r2
 80091ca:	1a9b      	subs	r3, r3, r2
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d026      	beq.n	800921e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fb97 	bl	8007908 <clust2sect>
 80091da:	6478      	str	r0, [r7, #68]	; 0x44
 80091dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d103      	bne.n	80091ea <f_open+0x34a>
						res = FR_INT_ERR;
 80091e2:	2302      	movs	r3, #2
 80091e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80091e8:	e019      	b.n	800921e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	899b      	ldrh	r3, [r3, #12]
 80091ee:	461a      	mov	r2, r3
 80091f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80091f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f8:	441a      	add	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	7858      	ldrb	r0, [r3, #1]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6a1a      	ldr	r2, [r3, #32]
 800920c:	2301      	movs	r3, #1
 800920e:	f7fd ffcf 	bl	80071b0 <disk_read>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <f_open+0x37e>
 8009218:	2301      	movs	r3, #1
 800921a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800921e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <f_open+0x38c>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800922c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009230:	4618      	mov	r0, r3
 8009232:	3760      	adds	r7, #96	; 0x60
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08e      	sub	sp, #56	; 0x38
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2200      	movs	r2, #0
 800924e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f107 0214 	add.w	r2, r7, #20
 8009256:	4611      	mov	r1, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff fda5 	bl	8008da8 <validate>
 800925e:	4603      	mov	r3, r0
 8009260:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009264:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009268:	2b00      	cmp	r3, #0
 800926a:	d107      	bne.n	800927c <f_read+0x44>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	7d5b      	ldrb	r3, [r3, #21]
 8009270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009274:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <f_read+0x4a>
 800927c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009280:	e135      	b.n	80094ee <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	7d1b      	ldrb	r3, [r3, #20]
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <f_read+0x5a>
 800928e:	2307      	movs	r3, #7
 8009290:	e12d      	b.n	80094ee <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	f240 811e 	bls.w	80094e4 <f_read+0x2ac>
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80092ac:	e11a      	b.n	80094e4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	8992      	ldrh	r2, [r2, #12]
 80092b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80092ba:	fb01 f202 	mul.w	r2, r1, r2
 80092be:	1a9b      	subs	r3, r3, r2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f040 80d5 	bne.w	8009470 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	8992      	ldrh	r2, [r2, #12]
 80092ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	8952      	ldrh	r2, [r2, #10]
 80092d6:	3a01      	subs	r2, #1
 80092d8:	4013      	ands	r3, r2
 80092da:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d12f      	bne.n	8009342 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d103      	bne.n	80092f2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	633b      	str	r3, [r7, #48]	; 0x30
 80092f0:	e013      	b.n	800931a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d007      	beq.n	800930a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	4619      	mov	r1, r3
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f7fe fe0d 	bl	8007f20 <clmt_clust>
 8009306:	6338      	str	r0, [r7, #48]	; 0x30
 8009308:	e007      	b.n	800931a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	4619      	mov	r1, r3
 8009312:	4610      	mov	r0, r2
 8009314:	f7fe fb17 	bl	8007946 <get_fat>
 8009318:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	2b01      	cmp	r3, #1
 800931e:	d804      	bhi.n	800932a <f_read+0xf2>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2202      	movs	r2, #2
 8009324:	755a      	strb	r2, [r3, #21]
 8009326:	2302      	movs	r3, #2
 8009328:	e0e1      	b.n	80094ee <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009330:	d104      	bne.n	800933c <f_read+0x104>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	755a      	strb	r2, [r3, #21]
 8009338:	2301      	movs	r3, #1
 800933a:	e0d8      	b.n	80094ee <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009340:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f7fe fadc 	bl	8007908 <clust2sect>
 8009350:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d104      	bne.n	8009362 <f_read+0x12a>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2202      	movs	r2, #2
 800935c:	755a      	strb	r2, [r3, #21]
 800935e:	2302      	movs	r3, #2
 8009360:	e0c5      	b.n	80094ee <f_read+0x2b6>
			sect += csect;
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	4413      	add	r3, r2
 8009368:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	899b      	ldrh	r3, [r3, #12]
 800936e:	461a      	mov	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	fbb3 f3f2 	udiv	r3, r3, r2
 8009376:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	2b00      	cmp	r3, #0
 800937c:	d041      	beq.n	8009402 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800937e:	69fa      	ldr	r2, [r7, #28]
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	4413      	add	r3, r2
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	8952      	ldrh	r2, [r2, #10]
 8009388:	4293      	cmp	r3, r2
 800938a:	d905      	bls.n	8009398 <f_read+0x160>
					cc = fs->csize - csect;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	895b      	ldrh	r3, [r3, #10]
 8009390:	461a      	mov	r2, r3
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	7858      	ldrb	r0, [r3, #1]
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093a2:	f7fd ff05 	bl	80071b0 <disk_read>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d004      	beq.n	80093b6 <f_read+0x17e>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	755a      	strb	r2, [r3, #21]
 80093b2:	2301      	movs	r3, #1
 80093b4:	e09b      	b.n	80094ee <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	7d1b      	ldrb	r3, [r3, #20]
 80093ba:	b25b      	sxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	da18      	bge.n	80093f2 <f_read+0x1ba>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6a1a      	ldr	r2, [r3, #32]
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d911      	bls.n	80093f2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a1a      	ldr	r2, [r3, #32]
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	8992      	ldrh	r2, [r2, #12]
 80093da:	fb02 f303 	mul.w	r3, r2, r3
 80093de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e0:	18d0      	adds	r0, r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	899b      	ldrh	r3, [r3, #12]
 80093ec:	461a      	mov	r2, r3
 80093ee:	f7fd ffbf 	bl	8007370 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	899b      	ldrh	r3, [r3, #12]
 80093f6:	461a      	mov	r2, r3
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	fb02 f303 	mul.w	r3, r2, r3
 80093fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009400:	e05c      	b.n	80094bc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	69ba      	ldr	r2, [r7, #24]
 8009408:	429a      	cmp	r2, r3
 800940a:	d02e      	beq.n	800946a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	7d1b      	ldrb	r3, [r3, #20]
 8009410:	b25b      	sxtb	r3, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	da18      	bge.n	8009448 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	7858      	ldrb	r0, [r3, #1]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6a1a      	ldr	r2, [r3, #32]
 8009424:	2301      	movs	r3, #1
 8009426:	f7fd fee3 	bl	80071f0 <disk_write>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d004      	beq.n	800943a <f_read+0x202>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	755a      	strb	r2, [r3, #21]
 8009436:	2301      	movs	r3, #1
 8009438:	e059      	b.n	80094ee <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	7d1b      	ldrb	r3, [r3, #20]
 800943e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009442:	b2da      	uxtb	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	7858      	ldrb	r0, [r3, #1]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009452:	2301      	movs	r3, #1
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	f7fd feab 	bl	80071b0 <disk_read>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d004      	beq.n	800946a <f_read+0x232>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2201      	movs	r2, #1
 8009464:	755a      	strb	r2, [r3, #21]
 8009466:	2301      	movs	r3, #1
 8009468:	e041      	b.n	80094ee <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	899b      	ldrh	r3, [r3, #12]
 8009474:	4618      	mov	r0, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	8992      	ldrh	r2, [r2, #12]
 800947e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009482:	fb01 f202 	mul.w	r2, r1, r2
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	1ac3      	subs	r3, r0, r3
 800948a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800948c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	429a      	cmp	r2, r3
 8009492:	d901      	bls.n	8009498 <f_read+0x260>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	8992      	ldrh	r2, [r2, #12]
 80094a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80094aa:	fb00 f202 	mul.w	r2, r0, r2
 80094ae:	1a9b      	subs	r3, r3, r2
 80094b0:	440b      	add	r3, r1
 80094b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b4:	4619      	mov	r1, r3
 80094b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094b8:	f7fd ff5a 	bl	8007370 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80094bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c0:	4413      	add	r3, r2
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ca:	441a      	add	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	619a      	str	r2, [r3, #24]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	441a      	add	r2, r3
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f47f aee1 	bne.w	80092ae <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3738      	adds	r7, #56	; 0x38
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b08c      	sub	sp, #48	; 0x30
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	607a      	str	r2, [r7, #4]
 8009502:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2200      	movs	r2, #0
 800950c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f107 0210 	add.w	r2, r7, #16
 8009514:	4611      	mov	r1, r2
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff fc46 	bl	8008da8 <validate>
 800951c:	4603      	mov	r3, r0
 800951e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009526:	2b00      	cmp	r3, #0
 8009528:	d107      	bne.n	800953a <f_write+0x44>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	7d5b      	ldrb	r3, [r3, #21]
 800952e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <f_write+0x4a>
 800953a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800953e:	e16a      	b.n	8009816 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	7d1b      	ldrb	r3, [r3, #20]
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <f_write+0x5a>
 800954c:	2307      	movs	r3, #7
 800954e:	e162      	b.n	8009816 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	699a      	ldr	r2, [r3, #24]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	441a      	add	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	429a      	cmp	r2, r3
 800955e:	f080 814c 	bcs.w	80097fa <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	43db      	mvns	r3, r3
 8009568:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800956a:	e146      	b.n	80097fa <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	8992      	ldrh	r2, [r2, #12]
 8009574:	fbb3 f1f2 	udiv	r1, r3, r2
 8009578:	fb01 f202 	mul.w	r2, r1, r2
 800957c:	1a9b      	subs	r3, r3, r2
 800957e:	2b00      	cmp	r3, #0
 8009580:	f040 80f1 	bne.w	8009766 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	8992      	ldrh	r2, [r2, #12]
 800958c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	8952      	ldrh	r2, [r2, #10]
 8009594:	3a01      	subs	r2, #1
 8009596:	4013      	ands	r3, r2
 8009598:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d143      	bne.n	8009628 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10c      	bne.n	80095c2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d11a      	bne.n	80095ea <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2100      	movs	r1, #0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fc19 	bl	8007df0 <create_chain>
 80095be:	62b8      	str	r0, [r7, #40]	; 0x28
 80095c0:	e013      	b.n	80095ea <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d007      	beq.n	80095da <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	4619      	mov	r1, r3
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7fe fca5 	bl	8007f20 <clmt_clust>
 80095d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80095d8:	e007      	b.n	80095ea <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	4619      	mov	r1, r3
 80095e2:	4610      	mov	r0, r2
 80095e4:	f7fe fc04 	bl	8007df0 <create_chain>
 80095e8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 8109 	beq.w	8009804 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d104      	bne.n	8009602 <f_write+0x10c>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2202      	movs	r2, #2
 80095fc:	755a      	strb	r2, [r3, #21]
 80095fe:	2302      	movs	r3, #2
 8009600:	e109      	b.n	8009816 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009608:	d104      	bne.n	8009614 <f_write+0x11e>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	755a      	strb	r2, [r3, #21]
 8009610:	2301      	movs	r3, #1
 8009612:	e100      	b.n	8009816 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009618:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <f_write+0x132>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009626:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	7d1b      	ldrb	r3, [r3, #20]
 800962c:	b25b      	sxtb	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	da18      	bge.n	8009664 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	7858      	ldrb	r0, [r3, #1]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6a1a      	ldr	r2, [r3, #32]
 8009640:	2301      	movs	r3, #1
 8009642:	f7fd fdd5 	bl	80071f0 <disk_write>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d004      	beq.n	8009656 <f_write+0x160>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2201      	movs	r2, #1
 8009650:	755a      	strb	r2, [r3, #21]
 8009652:	2301      	movs	r3, #1
 8009654:	e0df      	b.n	8009816 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	7d1b      	ldrb	r3, [r3, #20]
 800965a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800965e:	b2da      	uxtb	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	4619      	mov	r1, r3
 800966c:	4610      	mov	r0, r2
 800966e:	f7fe f94b 	bl	8007908 <clust2sect>
 8009672:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d104      	bne.n	8009684 <f_write+0x18e>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2202      	movs	r2, #2
 800967e:	755a      	strb	r2, [r3, #21]
 8009680:	2302      	movs	r3, #2
 8009682:	e0c8      	b.n	8009816 <f_write+0x320>
			sect += csect;
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	4413      	add	r3, r2
 800968a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	899b      	ldrh	r3, [r3, #12]
 8009690:	461a      	mov	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	fbb3 f3f2 	udiv	r3, r3, r2
 8009698:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d043      	beq.n	8009728 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	4413      	add	r3, r2
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	8952      	ldrh	r2, [r2, #10]
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d905      	bls.n	80096ba <f_write+0x1c4>
					cc = fs->csize - csect;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	895b      	ldrh	r3, [r3, #10]
 80096b2:	461a      	mov	r2, r3
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	7858      	ldrb	r0, [r3, #1]
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	69f9      	ldr	r1, [r7, #28]
 80096c4:	f7fd fd94 	bl	80071f0 <disk_write>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d004      	beq.n	80096d8 <f_write+0x1e2>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2201      	movs	r2, #1
 80096d2:	755a      	strb	r2, [r3, #21]
 80096d4:	2301      	movs	r3, #1
 80096d6:	e09e      	b.n	8009816 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6a1a      	ldr	r2, [r3, #32]
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	6a3a      	ldr	r2, [r7, #32]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d918      	bls.n	8009718 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a1a      	ldr	r2, [r3, #32]
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	8992      	ldrh	r2, [r2, #12]
 80096f8:	fb02 f303 	mul.w	r3, r2, r3
 80096fc:	69fa      	ldr	r2, [r7, #28]
 80096fe:	18d1      	adds	r1, r2, r3
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	899b      	ldrh	r3, [r3, #12]
 8009704:	461a      	mov	r2, r3
 8009706:	f7fd fe33 	bl	8007370 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	7d1b      	ldrb	r3, [r3, #20]
 800970e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009712:	b2da      	uxtb	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	899b      	ldrh	r3, [r3, #12]
 800971c:	461a      	mov	r2, r3
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	fb02 f303 	mul.w	r3, r2, r3
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009726:	e04b      	b.n	80097c0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	429a      	cmp	r2, r3
 8009730:	d016      	beq.n	8009760 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	699a      	ldr	r2, [r3, #24]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800973a:	429a      	cmp	r2, r3
 800973c:	d210      	bcs.n	8009760 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	7858      	ldrb	r0, [r3, #1]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009748:	2301      	movs	r3, #1
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	f7fd fd30 	bl	80071b0 <disk_read>
 8009750:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009752:	2b00      	cmp	r3, #0
 8009754:	d004      	beq.n	8009760 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2201      	movs	r2, #1
 800975a:	755a      	strb	r2, [r3, #21]
 800975c:	2301      	movs	r3, #1
 800975e:	e05a      	b.n	8009816 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	899b      	ldrh	r3, [r3, #12]
 800976a:	4618      	mov	r0, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	8992      	ldrh	r2, [r2, #12]
 8009774:	fbb3 f1f2 	udiv	r1, r3, r2
 8009778:	fb01 f202 	mul.w	r2, r1, r2
 800977c:	1a9b      	subs	r3, r3, r2
 800977e:	1ac3      	subs	r3, r0, r3
 8009780:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	429a      	cmp	r2, r3
 8009788:	d901      	bls.n	800978e <f_write+0x298>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	8992      	ldrh	r2, [r2, #12]
 800979c:	fbb3 f0f2 	udiv	r0, r3, r2
 80097a0:	fb00 f202 	mul.w	r2, r0, r2
 80097a4:	1a9b      	subs	r3, r3, r2
 80097a6:	440b      	add	r3, r1
 80097a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097aa:	69f9      	ldr	r1, [r7, #28]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fd fddf 	bl	8007370 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	7d1b      	ldrb	r3, [r3, #20]
 80097b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80097c0:	69fa      	ldr	r2, [r7, #28]
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	4413      	add	r3, r2
 80097c6:	61fb      	str	r3, [r7, #28]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	699a      	ldr	r2, [r3, #24]
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	441a      	add	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	619a      	str	r2, [r3, #24]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	68da      	ldr	r2, [r3, #12]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	429a      	cmp	r2, r3
 80097de:	bf38      	it	cc
 80097e0:	461a      	movcc	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	441a      	add	r2, r3
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f47f aeb5 	bne.w	800956c <f_write+0x76>
 8009802:	e000      	b.n	8009806 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009804:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	7d1b      	ldrb	r3, [r3, #20]
 800980a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980e:	b2da      	uxtb	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3730      	adds	r7, #48	; 0x30
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b086      	sub	sp, #24
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f107 0208 	add.w	r2, r7, #8
 800982c:	4611      	mov	r1, r2
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff faba 	bl	8008da8 <validate>
 8009834:	4603      	mov	r3, r0
 8009836:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009838:	7dfb      	ldrb	r3, [r7, #23]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d168      	bne.n	8009910 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	7d1b      	ldrb	r3, [r3, #20]
 8009842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	d062      	beq.n	8009910 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	7d1b      	ldrb	r3, [r3, #20]
 800984e:	b25b      	sxtb	r3, r3
 8009850:	2b00      	cmp	r3, #0
 8009852:	da15      	bge.n	8009880 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	7858      	ldrb	r0, [r3, #1]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1a      	ldr	r2, [r3, #32]
 8009862:	2301      	movs	r3, #1
 8009864:	f7fd fcc4 	bl	80071f0 <disk_write>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <f_sync+0x54>
 800986e:	2301      	movs	r3, #1
 8009870:	e04f      	b.n	8009912 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	7d1b      	ldrb	r3, [r3, #20]
 8009876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800987a:	b2da      	uxtb	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009880:	f7fd fbf8 	bl	8007074 <get_fattime>
 8009884:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	4619      	mov	r1, r3
 800988e:	4610      	mov	r0, r2
 8009890:	f7fd ff9c 	bl	80077cc <move_window>
 8009894:	4603      	mov	r3, r0
 8009896:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d138      	bne.n	8009910 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	330b      	adds	r3, #11
 80098a8:	781a      	ldrb	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	330b      	adds	r3, #11
 80098ae:	f042 0220 	orr.w	r2, r2, #32
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6818      	ldr	r0, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	461a      	mov	r2, r3
 80098c0:	68f9      	ldr	r1, [r7, #12]
 80098c2:	f7fe fd2a 	bl	800831a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f103 021c 	add.w	r2, r3, #28
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	4619      	mov	r1, r3
 80098d2:	4610      	mov	r0, r2
 80098d4:	f7fd fd20 	bl	8007318 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3316      	adds	r3, #22
 80098dc:	6939      	ldr	r1, [r7, #16]
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fd fd1a 	bl	8007318 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3312      	adds	r3, #18
 80098e8:	2100      	movs	r1, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fd fcf9 	bl	80072e2 <st_word>
					fs->wflag = 1;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2201      	movs	r2, #1
 80098f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fd ff95 	bl	8007828 <sync_fs>
 80098fe:	4603      	mov	r3, r0
 8009900:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	7d1b      	ldrb	r3, [r3, #20]
 8009906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800990a:	b2da      	uxtb	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009910:	7dfb      	ldrb	r3, [r7, #23]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff ff7b 	bl	800981e <f_sync>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d118      	bne.n	8009964 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f107 0208 	add.w	r2, r7, #8
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f7ff fa34 	bl	8008da8 <validate>
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10c      	bne.n	8009964 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	4618      	mov	r0, r3
 8009950:	f7fd fe98 	bl	8007684 <dec_lock>
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d102      	bne.n	8009964 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009964:	7bfb      	ldrb	r3, [r7, #15]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b092      	sub	sp, #72	; 0x48
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800997a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800997e:	f107 030c 	add.w	r3, r7, #12
 8009982:	2200      	movs	r2, #0
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe ff8f 	bl	80088a8 <find_volume>
 800998a:	4603      	mov	r3, r0
 800998c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009990:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009994:	2b00      	cmp	r3, #0
 8009996:	f040 8099 	bne.w	8009acc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800999a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	695a      	ldr	r2, [r3, #20]
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	3b02      	subs	r3, #2
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d804      	bhi.n	80099b8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80099ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b0:	695a      	ldr	r2, [r3, #20]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	e089      	b.n	8009acc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d128      	bne.n	8009a16 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80099c4:	2302      	movs	r3, #2
 80099c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80099cc:	f107 0314 	add.w	r3, r7, #20
 80099d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fd ffb7 	bl	8007946 <get_fat>
 80099d8:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099e0:	d103      	bne.n	80099ea <f_getfree+0x7c>
 80099e2:	2301      	movs	r3, #1
 80099e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80099e8:	e063      	b.n	8009ab2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80099ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d103      	bne.n	80099f8 <f_getfree+0x8a>
 80099f0:	2302      	movs	r3, #2
 80099f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80099f6:	e05c      	b.n	8009ab2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80099f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d102      	bne.n	8009a04 <f_getfree+0x96>
 80099fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a00:	3301      	adds	r3, #1
 8009a02:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a06:	3301      	adds	r3, #1
 8009a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d3db      	bcc.n	80099cc <f_getfree+0x5e>
 8009a14:	e04d      	b.n	8009ab2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	637b      	str	r3, [r7, #52]	; 0x34
 8009a26:	2300      	movs	r3, #0
 8009a28:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d113      	bne.n	8009a58 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	63ba      	str	r2, [r7, #56]	; 0x38
 8009a38:	4619      	mov	r1, r3
 8009a3a:	f7fd fec7 	bl	80077cc <move_window>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009a44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d131      	bne.n	8009ab0 <f_getfree+0x142>
							p = fs->win;
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	3334      	adds	r3, #52	; 0x34
 8009a50:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	899b      	ldrh	r3, [r3, #12]
 8009a56:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d10f      	bne.n	8009a80 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a62:	f7fd fc03 	bl	800726c <ld_word>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d102      	bne.n	8009a72 <f_getfree+0x104>
 8009a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a6e:	3301      	adds	r3, #1
 8009a70:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	3302      	adds	r3, #2
 8009a76:	633b      	str	r3, [r7, #48]	; 0x30
 8009a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a7a:	3b02      	subs	r3, #2
 8009a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a7e:	e010      	b.n	8009aa2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a82:	f7fd fc0b 	bl	800729c <ld_dword>
 8009a86:	4603      	mov	r3, r0
 8009a88:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d102      	bne.n	8009a96 <f_getfree+0x128>
 8009a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a92:	3301      	adds	r3, #1
 8009a94:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	3304      	adds	r3, #4
 8009a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8009a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9e:	3b04      	subs	r3, #4
 8009aa0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1bd      	bne.n	8009a2a <f_getfree+0xbc>
 8009aae:	e000      	b.n	8009ab2 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009ab0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ab6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009abc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	791a      	ldrb	r2, [r3, #4]
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	f042 0201 	orr.w	r2, r2, #1
 8009ac8:	b2d2      	uxtb	r2, r2
 8009aca:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009acc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3748      	adds	r7, #72	; 0x48
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b09e      	sub	sp, #120	; 0x78
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009ae4:	f107 010c 	add.w	r1, r7, #12
 8009ae8:	1d3b      	adds	r3, r7, #4
 8009aea:	2202      	movs	r2, #2
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fe fedb 	bl	80088a8 <find_volume>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8009afc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 808e 	bne.w	8009c22 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fe fdba 	bl	8008688 <follow_path>
 8009b14:	4603      	mov	r3, r0
 8009b16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8009b1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d108      	bne.n	8009b34 <f_unlink+0x5c>
 8009b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b26:	2102      	movs	r1, #2
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fd fc9f 	bl	800746c <chk_lock>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009b34:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d172      	bne.n	8009c22 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009b3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009b40:	b25b      	sxtb	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	da03      	bge.n	8009b4e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009b46:	2306      	movs	r3, #6
 8009b48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009b4c:	e008      	b.n	8009b60 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009b4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009b5a:	2307      	movs	r3, #7
 8009b5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8009b60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d134      	bne.n	8009bd2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fe fbb4 	bl	80082dc <ld_clust>
 8009b74:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009b76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009b7a:	f003 0310 	and.w	r3, r3, #16
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d027      	beq.n	8009bd2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b88:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009b8a:	f107 0310 	add.w	r3, r7, #16
 8009b8e:	2100      	movs	r1, #0
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe f9fd 	bl	8007f90 <dir_sdi>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8009b9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d116      	bne.n	8009bd2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009ba4:	f107 0310 	add.w	r3, r7, #16
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fe fbd5 	bl	800835a <dir_read>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009bb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d102      	bne.n	8009bc4 <f_unlink+0xec>
 8009bbe:	2307      	movs	r3, #7
 8009bc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009bc4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d102      	bne.n	8009bd2 <f_unlink+0xfa>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8009bd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d123      	bne.n	8009c22 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8009bda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe fc9f 	bl	8008522 <dir_remove>
 8009be4:	4603      	mov	r3, r0
 8009be6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8009bea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10c      	bne.n	8009c0c <f_unlink+0x134>
 8009bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d009      	beq.n	8009c0c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8009bf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe f890 	bl	8007d26 <remove_chain>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009c0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d106      	bne.n	8009c22 <f_unlink+0x14a>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fd fe06 	bl	8007828 <sync_fs>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009c22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3778      	adds	r7, #120	; 0x78
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b088      	sub	sp, #32
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009c42:	e01b      	b.n	8009c7c <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009c44:	f107 0310 	add.w	r3, r7, #16
 8009c48:	f107 0114 	add.w	r1, r7, #20
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff faf2 	bl	8009238 <f_read>
		if (rc != 1) break;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d116      	bne.n	8009c88 <f_gets+0x5a>
		c = s[0];
 8009c5a:	7d3b      	ldrb	r3, [r7, #20]
 8009c5c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	2b0d      	cmp	r3, #13
 8009c62:	d100      	bne.n	8009c66 <f_gets+0x38>
 8009c64:	e00a      	b.n	8009c7c <f_gets+0x4e>
		*p++ = c;
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	61ba      	str	r2, [r7, #24]
 8009c6c:	7dfa      	ldrb	r2, [r7, #23]
 8009c6e:	701a      	strb	r2, [r3, #0]
		n++;
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	3301      	adds	r3, #1
 8009c74:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	2b0a      	cmp	r3, #10
 8009c7a:	d007      	beq.n	8009c8c <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	69fa      	ldr	r2, [r7, #28]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	dbde      	blt.n	8009c44 <f_gets+0x16>
 8009c86:	e002      	b.n	8009c8e <f_gets+0x60>
		if (rc != 1) break;
 8009c88:	bf00      	nop
 8009c8a:	e000      	b.n	8009c8e <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8009c8c:	bf00      	nop
	}
	*p = 0;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	2200      	movs	r2, #0
 8009c92:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <f_gets+0x70>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	e000      	b.n	8009ca0 <f_gets+0x72>
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3720      	adds	r7, #32
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	2b0a      	cmp	r3, #10
 8009cb8:	d103      	bne.n	8009cc2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009cba:	210d      	movs	r1, #13
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff fff3 	bl	8009ca8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	db25      	blt.n	8009d1a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	1c5a      	adds	r2, r3, #1
 8009cd2:	60fa      	str	r2, [r7, #12]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	78fa      	ldrb	r2, [r7, #3]
 8009cda:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b3c      	cmp	r3, #60	; 0x3c
 8009ce0:	dd12      	ble.n	8009d08 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f103 010c 	add.w	r1, r3, #12
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	f107 0308 	add.w	r3, r7, #8
 8009cf2:	f7ff fc00 	bl	80094f6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d101      	bne.n	8009d02 <putc_bfd+0x5a>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e001      	b.n	8009d06 <putc_bfd+0x5e>
 8009d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d06:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	609a      	str	r2, [r3, #8]
 8009d18:	e000      	b.n	8009d1c <putc_bfd+0x74>
	if (i < 0) return;
 8009d1a:	bf00      	nop
}
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	db16      	blt.n	8009d60 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f103 010c 	add.w	r1, r3, #12
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	461a      	mov	r2, r3
 8009d42:	f107 030c 	add.w	r3, r7, #12
 8009d46:	f7ff fbd6 	bl	80094f6 <f_write>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d107      	bne.n	8009d60 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d102      	bne.n	8009d60 <putc_flush+0x3e>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	e001      	b.n	8009d64 <putc_flush+0x42>
	return EOF;
 8009d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	605a      	str	r2, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	609a      	str	r2, [r3, #8]
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b096      	sub	sp, #88	; 0x58
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009da0:	f107 030c 	add.w	r3, r7, #12
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff ffe0 	bl	8009d6c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009dac:	e009      	b.n	8009dc2 <f_puts+0x2c>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	781a      	ldrb	r2, [r3, #0]
 8009db6:	f107 030c 	add.w	r3, r7, #12
 8009dba:	4611      	mov	r1, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff ff73 	bl	8009ca8 <putc_bfd>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1f1      	bne.n	8009dae <f_puts+0x18>
	return putc_flush(&pb);
 8009dca:	f107 030c 	add.w	r3, r7, #12
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff ffa7 	bl	8009d22 <putc_flush>
 8009dd4:	4603      	mov	r3, r0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3758      	adds	r7, #88	; 0x58
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	4613      	mov	r3, r2
 8009dec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009dee:	2301      	movs	r3, #1
 8009df0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009df6:	4b1f      	ldr	r3, [pc, #124]	; (8009e74 <FATFS_LinkDriverEx+0x94>)
 8009df8:	7a5b      	ldrb	r3, [r3, #9]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d131      	bne.n	8009e64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e00:	4b1c      	ldr	r3, [pc, #112]	; (8009e74 <FATFS_LinkDriverEx+0x94>)
 8009e02:	7a5b      	ldrb	r3, [r3, #9]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	461a      	mov	r2, r3
 8009e08:	4b1a      	ldr	r3, [pc, #104]	; (8009e74 <FATFS_LinkDriverEx+0x94>)
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e0e:	4b19      	ldr	r3, [pc, #100]	; (8009e74 <FATFS_LinkDriverEx+0x94>)
 8009e10:	7a5b      	ldrb	r3, [r3, #9]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	4a17      	ldr	r2, [pc, #92]	; (8009e74 <FATFS_LinkDriverEx+0x94>)
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e1e:	4b15      	ldr	r3, [pc, #84]	; (8009e74 <FATFS_LinkDriverEx+0x94>)
 8009e20:	7a5b      	ldrb	r3, [r3, #9]
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	461a      	mov	r2, r3
 8009e26:	4b13      	ldr	r3, [pc, #76]	; (8009e74 <FATFS_LinkDriverEx+0x94>)
 8009e28:	4413      	add	r3, r2
 8009e2a:	79fa      	ldrb	r2, [r7, #7]
 8009e2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e2e:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <FATFS_LinkDriverEx+0x94>)
 8009e30:	7a5b      	ldrb	r3, [r3, #9]
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	b2d1      	uxtb	r1, r2
 8009e38:	4a0e      	ldr	r2, [pc, #56]	; (8009e74 <FATFS_LinkDriverEx+0x94>)
 8009e3a:	7251      	strb	r1, [r2, #9]
 8009e3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e3e:	7dbb      	ldrb	r3, [r7, #22]
 8009e40:	3330      	adds	r3, #48	; 0x30
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	223a      	movs	r2, #58	; 0x3a
 8009e4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	3302      	adds	r3, #2
 8009e54:	222f      	movs	r2, #47	; 0x2f
 8009e56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	3303      	adds	r3, #3
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	20002518 	.word	0x20002518

08009e78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e82:	2200      	movs	r2, #0
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff ffaa 	bl	8009de0 <FATFS_LinkDriverEx>
 8009e8c:	4603      	mov	r3, r0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
	...

08009e98 <__errno>:
 8009e98:	4b01      	ldr	r3, [pc, #4]	; (8009ea0 <__errno+0x8>)
 8009e9a:	6818      	ldr	r0, [r3, #0]
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20000024 	.word	0x20000024

08009ea4 <__libc_init_array>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	4d0d      	ldr	r5, [pc, #52]	; (8009edc <__libc_init_array+0x38>)
 8009ea8:	4c0d      	ldr	r4, [pc, #52]	; (8009ee0 <__libc_init_array+0x3c>)
 8009eaa:	1b64      	subs	r4, r4, r5
 8009eac:	10a4      	asrs	r4, r4, #2
 8009eae:	2600      	movs	r6, #0
 8009eb0:	42a6      	cmp	r6, r4
 8009eb2:	d109      	bne.n	8009ec8 <__libc_init_array+0x24>
 8009eb4:	4d0b      	ldr	r5, [pc, #44]	; (8009ee4 <__libc_init_array+0x40>)
 8009eb6:	4c0c      	ldr	r4, [pc, #48]	; (8009ee8 <__libc_init_array+0x44>)
 8009eb8:	f002 ffae 	bl	800ce18 <_init>
 8009ebc:	1b64      	subs	r4, r4, r5
 8009ebe:	10a4      	asrs	r4, r4, #2
 8009ec0:	2600      	movs	r6, #0
 8009ec2:	42a6      	cmp	r6, r4
 8009ec4:	d105      	bne.n	8009ed2 <__libc_init_array+0x2e>
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ecc:	4798      	blx	r3
 8009ece:	3601      	adds	r6, #1
 8009ed0:	e7ee      	b.n	8009eb0 <__libc_init_array+0xc>
 8009ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ed6:	4798      	blx	r3
 8009ed8:	3601      	adds	r6, #1
 8009eda:	e7f2      	b.n	8009ec2 <__libc_init_array+0x1e>
 8009edc:	0800dff4 	.word	0x0800dff4
 8009ee0:	0800dff4 	.word	0x0800dff4
 8009ee4:	0800dff4 	.word	0x0800dff4
 8009ee8:	0800dff8 	.word	0x0800dff8

08009eec <malloc>:
 8009eec:	4b02      	ldr	r3, [pc, #8]	; (8009ef8 <malloc+0xc>)
 8009eee:	4601      	mov	r1, r0
 8009ef0:	6818      	ldr	r0, [r3, #0]
 8009ef2:	f000 b87f 	b.w	8009ff4 <_malloc_r>
 8009ef6:	bf00      	nop
 8009ef8:	20000024 	.word	0x20000024

08009efc <free>:
 8009efc:	4b02      	ldr	r3, [pc, #8]	; (8009f08 <free+0xc>)
 8009efe:	4601      	mov	r1, r0
 8009f00:	6818      	ldr	r0, [r3, #0]
 8009f02:	f000 b80b 	b.w	8009f1c <_free_r>
 8009f06:	bf00      	nop
 8009f08:	20000024 	.word	0x20000024

08009f0c <memset>:
 8009f0c:	4402      	add	r2, r0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d100      	bne.n	8009f16 <memset+0xa>
 8009f14:	4770      	bx	lr
 8009f16:	f803 1b01 	strb.w	r1, [r3], #1
 8009f1a:	e7f9      	b.n	8009f10 <memset+0x4>

08009f1c <_free_r>:
 8009f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d044      	beq.n	8009fac <_free_r+0x90>
 8009f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f26:	9001      	str	r0, [sp, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f2e:	bfb8      	it	lt
 8009f30:	18e4      	addlt	r4, r4, r3
 8009f32:	f001 ff7d 	bl	800be30 <__malloc_lock>
 8009f36:	4a1e      	ldr	r2, [pc, #120]	; (8009fb0 <_free_r+0x94>)
 8009f38:	9801      	ldr	r0, [sp, #4]
 8009f3a:	6813      	ldr	r3, [r2, #0]
 8009f3c:	b933      	cbnz	r3, 8009f4c <_free_r+0x30>
 8009f3e:	6063      	str	r3, [r4, #4]
 8009f40:	6014      	str	r4, [r2, #0]
 8009f42:	b003      	add	sp, #12
 8009f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f48:	f001 bf78 	b.w	800be3c <__malloc_unlock>
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	d908      	bls.n	8009f62 <_free_r+0x46>
 8009f50:	6825      	ldr	r5, [r4, #0]
 8009f52:	1961      	adds	r1, r4, r5
 8009f54:	428b      	cmp	r3, r1
 8009f56:	bf01      	itttt	eq
 8009f58:	6819      	ldreq	r1, [r3, #0]
 8009f5a:	685b      	ldreq	r3, [r3, #4]
 8009f5c:	1949      	addeq	r1, r1, r5
 8009f5e:	6021      	streq	r1, [r4, #0]
 8009f60:	e7ed      	b.n	8009f3e <_free_r+0x22>
 8009f62:	461a      	mov	r2, r3
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	b10b      	cbz	r3, 8009f6c <_free_r+0x50>
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d9fa      	bls.n	8009f62 <_free_r+0x46>
 8009f6c:	6811      	ldr	r1, [r2, #0]
 8009f6e:	1855      	adds	r5, r2, r1
 8009f70:	42a5      	cmp	r5, r4
 8009f72:	d10b      	bne.n	8009f8c <_free_r+0x70>
 8009f74:	6824      	ldr	r4, [r4, #0]
 8009f76:	4421      	add	r1, r4
 8009f78:	1854      	adds	r4, r2, r1
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	6011      	str	r1, [r2, #0]
 8009f7e:	d1e0      	bne.n	8009f42 <_free_r+0x26>
 8009f80:	681c      	ldr	r4, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	6053      	str	r3, [r2, #4]
 8009f86:	4421      	add	r1, r4
 8009f88:	6011      	str	r1, [r2, #0]
 8009f8a:	e7da      	b.n	8009f42 <_free_r+0x26>
 8009f8c:	d902      	bls.n	8009f94 <_free_r+0x78>
 8009f8e:	230c      	movs	r3, #12
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	e7d6      	b.n	8009f42 <_free_r+0x26>
 8009f94:	6825      	ldr	r5, [r4, #0]
 8009f96:	1961      	adds	r1, r4, r5
 8009f98:	428b      	cmp	r3, r1
 8009f9a:	bf04      	itt	eq
 8009f9c:	6819      	ldreq	r1, [r3, #0]
 8009f9e:	685b      	ldreq	r3, [r3, #4]
 8009fa0:	6063      	str	r3, [r4, #4]
 8009fa2:	bf04      	itt	eq
 8009fa4:	1949      	addeq	r1, r1, r5
 8009fa6:	6021      	streq	r1, [r4, #0]
 8009fa8:	6054      	str	r4, [r2, #4]
 8009faa:	e7ca      	b.n	8009f42 <_free_r+0x26>
 8009fac:	b003      	add	sp, #12
 8009fae:	bd30      	pop	{r4, r5, pc}
 8009fb0:	20002524 	.word	0x20002524

08009fb4 <sbrk_aligned>:
 8009fb4:	b570      	push	{r4, r5, r6, lr}
 8009fb6:	4e0e      	ldr	r6, [pc, #56]	; (8009ff0 <sbrk_aligned+0x3c>)
 8009fb8:	460c      	mov	r4, r1
 8009fba:	6831      	ldr	r1, [r6, #0]
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	b911      	cbnz	r1, 8009fc6 <sbrk_aligned+0x12>
 8009fc0:	f000 fd84 	bl	800aacc <_sbrk_r>
 8009fc4:	6030      	str	r0, [r6, #0]
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f000 fd7f 	bl	800aacc <_sbrk_r>
 8009fce:	1c43      	adds	r3, r0, #1
 8009fd0:	d00a      	beq.n	8009fe8 <sbrk_aligned+0x34>
 8009fd2:	1cc4      	adds	r4, r0, #3
 8009fd4:	f024 0403 	bic.w	r4, r4, #3
 8009fd8:	42a0      	cmp	r0, r4
 8009fda:	d007      	beq.n	8009fec <sbrk_aligned+0x38>
 8009fdc:	1a21      	subs	r1, r4, r0
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f000 fd74 	bl	800aacc <_sbrk_r>
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d101      	bne.n	8009fec <sbrk_aligned+0x38>
 8009fe8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009fec:	4620      	mov	r0, r4
 8009fee:	bd70      	pop	{r4, r5, r6, pc}
 8009ff0:	20002528 	.word	0x20002528

08009ff4 <_malloc_r>:
 8009ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff8:	1ccd      	adds	r5, r1, #3
 8009ffa:	f025 0503 	bic.w	r5, r5, #3
 8009ffe:	3508      	adds	r5, #8
 800a000:	2d0c      	cmp	r5, #12
 800a002:	bf38      	it	cc
 800a004:	250c      	movcc	r5, #12
 800a006:	2d00      	cmp	r5, #0
 800a008:	4607      	mov	r7, r0
 800a00a:	db01      	blt.n	800a010 <_malloc_r+0x1c>
 800a00c:	42a9      	cmp	r1, r5
 800a00e:	d905      	bls.n	800a01c <_malloc_r+0x28>
 800a010:	230c      	movs	r3, #12
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	2600      	movs	r6, #0
 800a016:	4630      	mov	r0, r6
 800a018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a01c:	4e2e      	ldr	r6, [pc, #184]	; (800a0d8 <_malloc_r+0xe4>)
 800a01e:	f001 ff07 	bl	800be30 <__malloc_lock>
 800a022:	6833      	ldr	r3, [r6, #0]
 800a024:	461c      	mov	r4, r3
 800a026:	bb34      	cbnz	r4, 800a076 <_malloc_r+0x82>
 800a028:	4629      	mov	r1, r5
 800a02a:	4638      	mov	r0, r7
 800a02c:	f7ff ffc2 	bl	8009fb4 <sbrk_aligned>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	4604      	mov	r4, r0
 800a034:	d14d      	bne.n	800a0d2 <_malloc_r+0xde>
 800a036:	6834      	ldr	r4, [r6, #0]
 800a038:	4626      	mov	r6, r4
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	d140      	bne.n	800a0c0 <_malloc_r+0xcc>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	4631      	mov	r1, r6
 800a042:	4638      	mov	r0, r7
 800a044:	eb04 0803 	add.w	r8, r4, r3
 800a048:	f000 fd40 	bl	800aacc <_sbrk_r>
 800a04c:	4580      	cmp	r8, r0
 800a04e:	d13a      	bne.n	800a0c6 <_malloc_r+0xd2>
 800a050:	6821      	ldr	r1, [r4, #0]
 800a052:	3503      	adds	r5, #3
 800a054:	1a6d      	subs	r5, r5, r1
 800a056:	f025 0503 	bic.w	r5, r5, #3
 800a05a:	3508      	adds	r5, #8
 800a05c:	2d0c      	cmp	r5, #12
 800a05e:	bf38      	it	cc
 800a060:	250c      	movcc	r5, #12
 800a062:	4629      	mov	r1, r5
 800a064:	4638      	mov	r0, r7
 800a066:	f7ff ffa5 	bl	8009fb4 <sbrk_aligned>
 800a06a:	3001      	adds	r0, #1
 800a06c:	d02b      	beq.n	800a0c6 <_malloc_r+0xd2>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	442b      	add	r3, r5
 800a072:	6023      	str	r3, [r4, #0]
 800a074:	e00e      	b.n	800a094 <_malloc_r+0xa0>
 800a076:	6822      	ldr	r2, [r4, #0]
 800a078:	1b52      	subs	r2, r2, r5
 800a07a:	d41e      	bmi.n	800a0ba <_malloc_r+0xc6>
 800a07c:	2a0b      	cmp	r2, #11
 800a07e:	d916      	bls.n	800a0ae <_malloc_r+0xba>
 800a080:	1961      	adds	r1, r4, r5
 800a082:	42a3      	cmp	r3, r4
 800a084:	6025      	str	r5, [r4, #0]
 800a086:	bf18      	it	ne
 800a088:	6059      	strne	r1, [r3, #4]
 800a08a:	6863      	ldr	r3, [r4, #4]
 800a08c:	bf08      	it	eq
 800a08e:	6031      	streq	r1, [r6, #0]
 800a090:	5162      	str	r2, [r4, r5]
 800a092:	604b      	str	r3, [r1, #4]
 800a094:	4638      	mov	r0, r7
 800a096:	f104 060b 	add.w	r6, r4, #11
 800a09a:	f001 fecf 	bl	800be3c <__malloc_unlock>
 800a09e:	f026 0607 	bic.w	r6, r6, #7
 800a0a2:	1d23      	adds	r3, r4, #4
 800a0a4:	1af2      	subs	r2, r6, r3
 800a0a6:	d0b6      	beq.n	800a016 <_malloc_r+0x22>
 800a0a8:	1b9b      	subs	r3, r3, r6
 800a0aa:	50a3      	str	r3, [r4, r2]
 800a0ac:	e7b3      	b.n	800a016 <_malloc_r+0x22>
 800a0ae:	6862      	ldr	r2, [r4, #4]
 800a0b0:	42a3      	cmp	r3, r4
 800a0b2:	bf0c      	ite	eq
 800a0b4:	6032      	streq	r2, [r6, #0]
 800a0b6:	605a      	strne	r2, [r3, #4]
 800a0b8:	e7ec      	b.n	800a094 <_malloc_r+0xa0>
 800a0ba:	4623      	mov	r3, r4
 800a0bc:	6864      	ldr	r4, [r4, #4]
 800a0be:	e7b2      	b.n	800a026 <_malloc_r+0x32>
 800a0c0:	4634      	mov	r4, r6
 800a0c2:	6876      	ldr	r6, [r6, #4]
 800a0c4:	e7b9      	b.n	800a03a <_malloc_r+0x46>
 800a0c6:	230c      	movs	r3, #12
 800a0c8:	603b      	str	r3, [r7, #0]
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	f001 feb6 	bl	800be3c <__malloc_unlock>
 800a0d0:	e7a1      	b.n	800a016 <_malloc_r+0x22>
 800a0d2:	6025      	str	r5, [r4, #0]
 800a0d4:	e7de      	b.n	800a094 <_malloc_r+0xa0>
 800a0d6:	bf00      	nop
 800a0d8:	20002524 	.word	0x20002524

0800a0dc <__cvt>:
 800a0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e0:	ec55 4b10 	vmov	r4, r5, d0
 800a0e4:	2d00      	cmp	r5, #0
 800a0e6:	460e      	mov	r6, r1
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	462b      	mov	r3, r5
 800a0ec:	bfbb      	ittet	lt
 800a0ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a0f2:	461d      	movlt	r5, r3
 800a0f4:	2300      	movge	r3, #0
 800a0f6:	232d      	movlt	r3, #45	; 0x2d
 800a0f8:	700b      	strb	r3, [r1, #0]
 800a0fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a100:	4691      	mov	r9, r2
 800a102:	f023 0820 	bic.w	r8, r3, #32
 800a106:	bfbc      	itt	lt
 800a108:	4622      	movlt	r2, r4
 800a10a:	4614      	movlt	r4, r2
 800a10c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a110:	d005      	beq.n	800a11e <__cvt+0x42>
 800a112:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a116:	d100      	bne.n	800a11a <__cvt+0x3e>
 800a118:	3601      	adds	r6, #1
 800a11a:	2102      	movs	r1, #2
 800a11c:	e000      	b.n	800a120 <__cvt+0x44>
 800a11e:	2103      	movs	r1, #3
 800a120:	ab03      	add	r3, sp, #12
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	ab02      	add	r3, sp, #8
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	ec45 4b10 	vmov	d0, r4, r5
 800a12c:	4653      	mov	r3, sl
 800a12e:	4632      	mov	r2, r6
 800a130:	f000 fe5e 	bl	800adf0 <_dtoa_r>
 800a134:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a138:	4607      	mov	r7, r0
 800a13a:	d102      	bne.n	800a142 <__cvt+0x66>
 800a13c:	f019 0f01 	tst.w	r9, #1
 800a140:	d022      	beq.n	800a188 <__cvt+0xac>
 800a142:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a146:	eb07 0906 	add.w	r9, r7, r6
 800a14a:	d110      	bne.n	800a16e <__cvt+0x92>
 800a14c:	783b      	ldrb	r3, [r7, #0]
 800a14e:	2b30      	cmp	r3, #48	; 0x30
 800a150:	d10a      	bne.n	800a168 <__cvt+0x8c>
 800a152:	2200      	movs	r2, #0
 800a154:	2300      	movs	r3, #0
 800a156:	4620      	mov	r0, r4
 800a158:	4629      	mov	r1, r5
 800a15a:	f7f6 fccd 	bl	8000af8 <__aeabi_dcmpeq>
 800a15e:	b918      	cbnz	r0, 800a168 <__cvt+0x8c>
 800a160:	f1c6 0601 	rsb	r6, r6, #1
 800a164:	f8ca 6000 	str.w	r6, [sl]
 800a168:	f8da 3000 	ldr.w	r3, [sl]
 800a16c:	4499      	add	r9, r3
 800a16e:	2200      	movs	r2, #0
 800a170:	2300      	movs	r3, #0
 800a172:	4620      	mov	r0, r4
 800a174:	4629      	mov	r1, r5
 800a176:	f7f6 fcbf 	bl	8000af8 <__aeabi_dcmpeq>
 800a17a:	b108      	cbz	r0, 800a180 <__cvt+0xa4>
 800a17c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a180:	2230      	movs	r2, #48	; 0x30
 800a182:	9b03      	ldr	r3, [sp, #12]
 800a184:	454b      	cmp	r3, r9
 800a186:	d307      	bcc.n	800a198 <__cvt+0xbc>
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a18c:	1bdb      	subs	r3, r3, r7
 800a18e:	4638      	mov	r0, r7
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	b004      	add	sp, #16
 800a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a198:	1c59      	adds	r1, r3, #1
 800a19a:	9103      	str	r1, [sp, #12]
 800a19c:	701a      	strb	r2, [r3, #0]
 800a19e:	e7f0      	b.n	800a182 <__cvt+0xa6>

0800a1a0 <__exponent>:
 800a1a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2900      	cmp	r1, #0
 800a1a6:	bfb8      	it	lt
 800a1a8:	4249      	neglt	r1, r1
 800a1aa:	f803 2b02 	strb.w	r2, [r3], #2
 800a1ae:	bfb4      	ite	lt
 800a1b0:	222d      	movlt	r2, #45	; 0x2d
 800a1b2:	222b      	movge	r2, #43	; 0x2b
 800a1b4:	2909      	cmp	r1, #9
 800a1b6:	7042      	strb	r2, [r0, #1]
 800a1b8:	dd2a      	ble.n	800a210 <__exponent+0x70>
 800a1ba:	f10d 0407 	add.w	r4, sp, #7
 800a1be:	46a4      	mov	ip, r4
 800a1c0:	270a      	movs	r7, #10
 800a1c2:	46a6      	mov	lr, r4
 800a1c4:	460a      	mov	r2, r1
 800a1c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a1ca:	fb07 1516 	mls	r5, r7, r6, r1
 800a1ce:	3530      	adds	r5, #48	; 0x30
 800a1d0:	2a63      	cmp	r2, #99	; 0x63
 800a1d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a1d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a1da:	4631      	mov	r1, r6
 800a1dc:	dcf1      	bgt.n	800a1c2 <__exponent+0x22>
 800a1de:	3130      	adds	r1, #48	; 0x30
 800a1e0:	f1ae 0502 	sub.w	r5, lr, #2
 800a1e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a1e8:	1c44      	adds	r4, r0, #1
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	4561      	cmp	r1, ip
 800a1ee:	d30a      	bcc.n	800a206 <__exponent+0x66>
 800a1f0:	f10d 0209 	add.w	r2, sp, #9
 800a1f4:	eba2 020e 	sub.w	r2, r2, lr
 800a1f8:	4565      	cmp	r5, ip
 800a1fa:	bf88      	it	hi
 800a1fc:	2200      	movhi	r2, #0
 800a1fe:	4413      	add	r3, r2
 800a200:	1a18      	subs	r0, r3, r0
 800a202:	b003      	add	sp, #12
 800a204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a20a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a20e:	e7ed      	b.n	800a1ec <__exponent+0x4c>
 800a210:	2330      	movs	r3, #48	; 0x30
 800a212:	3130      	adds	r1, #48	; 0x30
 800a214:	7083      	strb	r3, [r0, #2]
 800a216:	70c1      	strb	r1, [r0, #3]
 800a218:	1d03      	adds	r3, r0, #4
 800a21a:	e7f1      	b.n	800a200 <__exponent+0x60>

0800a21c <_printf_float>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	ed2d 8b02 	vpush	{d8}
 800a224:	b08d      	sub	sp, #52	; 0x34
 800a226:	460c      	mov	r4, r1
 800a228:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a22c:	4616      	mov	r6, r2
 800a22e:	461f      	mov	r7, r3
 800a230:	4605      	mov	r5, r0
 800a232:	f001 fd83 	bl	800bd3c <_localeconv_r>
 800a236:	f8d0 a000 	ldr.w	sl, [r0]
 800a23a:	4650      	mov	r0, sl
 800a23c:	f7f5 ffda 	bl	80001f4 <strlen>
 800a240:	2300      	movs	r3, #0
 800a242:	930a      	str	r3, [sp, #40]	; 0x28
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	9305      	str	r3, [sp, #20]
 800a248:	f8d8 3000 	ldr.w	r3, [r8]
 800a24c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a250:	3307      	adds	r3, #7
 800a252:	f023 0307 	bic.w	r3, r3, #7
 800a256:	f103 0208 	add.w	r2, r3, #8
 800a25a:	f8c8 2000 	str.w	r2, [r8]
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a266:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a26a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a26e:	9307      	str	r3, [sp, #28]
 800a270:	f8cd 8018 	str.w	r8, [sp, #24]
 800a274:	ee08 0a10 	vmov	s16, r0
 800a278:	4b9f      	ldr	r3, [pc, #636]	; (800a4f8 <_printf_float+0x2dc>)
 800a27a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a27e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a282:	f7f6 fc6b 	bl	8000b5c <__aeabi_dcmpun>
 800a286:	bb88      	cbnz	r0, 800a2ec <_printf_float+0xd0>
 800a288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a28c:	4b9a      	ldr	r3, [pc, #616]	; (800a4f8 <_printf_float+0x2dc>)
 800a28e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a292:	f7f6 fc45 	bl	8000b20 <__aeabi_dcmple>
 800a296:	bb48      	cbnz	r0, 800a2ec <_printf_float+0xd0>
 800a298:	2200      	movs	r2, #0
 800a29a:	2300      	movs	r3, #0
 800a29c:	4640      	mov	r0, r8
 800a29e:	4649      	mov	r1, r9
 800a2a0:	f7f6 fc34 	bl	8000b0c <__aeabi_dcmplt>
 800a2a4:	b110      	cbz	r0, 800a2ac <_printf_float+0x90>
 800a2a6:	232d      	movs	r3, #45	; 0x2d
 800a2a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ac:	4b93      	ldr	r3, [pc, #588]	; (800a4fc <_printf_float+0x2e0>)
 800a2ae:	4894      	ldr	r0, [pc, #592]	; (800a500 <_printf_float+0x2e4>)
 800a2b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2b4:	bf94      	ite	ls
 800a2b6:	4698      	movls	r8, r3
 800a2b8:	4680      	movhi	r8, r0
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	6123      	str	r3, [r4, #16]
 800a2be:	9b05      	ldr	r3, [sp, #20]
 800a2c0:	f023 0204 	bic.w	r2, r3, #4
 800a2c4:	6022      	str	r2, [r4, #0]
 800a2c6:	f04f 0900 	mov.w	r9, #0
 800a2ca:	9700      	str	r7, [sp, #0]
 800a2cc:	4633      	mov	r3, r6
 800a2ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	f000 f9d8 	bl	800a688 <_printf_common>
 800a2d8:	3001      	adds	r0, #1
 800a2da:	f040 8090 	bne.w	800a3fe <_printf_float+0x1e2>
 800a2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2e2:	b00d      	add	sp, #52	; 0x34
 800a2e4:	ecbd 8b02 	vpop	{d8}
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	464b      	mov	r3, r9
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	f7f6 fc32 	bl	8000b5c <__aeabi_dcmpun>
 800a2f8:	b140      	cbz	r0, 800a30c <_printf_float+0xf0>
 800a2fa:	464b      	mov	r3, r9
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	bfbc      	itt	lt
 800a300:	232d      	movlt	r3, #45	; 0x2d
 800a302:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a306:	487f      	ldr	r0, [pc, #508]	; (800a504 <_printf_float+0x2e8>)
 800a308:	4b7f      	ldr	r3, [pc, #508]	; (800a508 <_printf_float+0x2ec>)
 800a30a:	e7d1      	b.n	800a2b0 <_printf_float+0x94>
 800a30c:	6863      	ldr	r3, [r4, #4]
 800a30e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a312:	9206      	str	r2, [sp, #24]
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	d13f      	bne.n	800a398 <_printf_float+0x17c>
 800a318:	2306      	movs	r3, #6
 800a31a:	6063      	str	r3, [r4, #4]
 800a31c:	9b05      	ldr	r3, [sp, #20]
 800a31e:	6861      	ldr	r1, [r4, #4]
 800a320:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a324:	2300      	movs	r3, #0
 800a326:	9303      	str	r3, [sp, #12]
 800a328:	ab0a      	add	r3, sp, #40	; 0x28
 800a32a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a32e:	ab09      	add	r3, sp, #36	; 0x24
 800a330:	ec49 8b10 	vmov	d0, r8, r9
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	6022      	str	r2, [r4, #0]
 800a338:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a33c:	4628      	mov	r0, r5
 800a33e:	f7ff fecd 	bl	800a0dc <__cvt>
 800a342:	9b06      	ldr	r3, [sp, #24]
 800a344:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a346:	2b47      	cmp	r3, #71	; 0x47
 800a348:	4680      	mov	r8, r0
 800a34a:	d108      	bne.n	800a35e <_printf_float+0x142>
 800a34c:	1cc8      	adds	r0, r1, #3
 800a34e:	db02      	blt.n	800a356 <_printf_float+0x13a>
 800a350:	6863      	ldr	r3, [r4, #4]
 800a352:	4299      	cmp	r1, r3
 800a354:	dd41      	ble.n	800a3da <_printf_float+0x1be>
 800a356:	f1ab 0b02 	sub.w	fp, fp, #2
 800a35a:	fa5f fb8b 	uxtb.w	fp, fp
 800a35e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a362:	d820      	bhi.n	800a3a6 <_printf_float+0x18a>
 800a364:	3901      	subs	r1, #1
 800a366:	465a      	mov	r2, fp
 800a368:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a36c:	9109      	str	r1, [sp, #36]	; 0x24
 800a36e:	f7ff ff17 	bl	800a1a0 <__exponent>
 800a372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a374:	1813      	adds	r3, r2, r0
 800a376:	2a01      	cmp	r2, #1
 800a378:	4681      	mov	r9, r0
 800a37a:	6123      	str	r3, [r4, #16]
 800a37c:	dc02      	bgt.n	800a384 <_printf_float+0x168>
 800a37e:	6822      	ldr	r2, [r4, #0]
 800a380:	07d2      	lsls	r2, r2, #31
 800a382:	d501      	bpl.n	800a388 <_printf_float+0x16c>
 800a384:	3301      	adds	r3, #1
 800a386:	6123      	str	r3, [r4, #16]
 800a388:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d09c      	beq.n	800a2ca <_printf_float+0xae>
 800a390:	232d      	movs	r3, #45	; 0x2d
 800a392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a396:	e798      	b.n	800a2ca <_printf_float+0xae>
 800a398:	9a06      	ldr	r2, [sp, #24]
 800a39a:	2a47      	cmp	r2, #71	; 0x47
 800a39c:	d1be      	bne.n	800a31c <_printf_float+0x100>
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1bc      	bne.n	800a31c <_printf_float+0x100>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e7b9      	b.n	800a31a <_printf_float+0xfe>
 800a3a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3aa:	d118      	bne.n	800a3de <_printf_float+0x1c2>
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	6863      	ldr	r3, [r4, #4]
 800a3b0:	dd0b      	ble.n	800a3ca <_printf_float+0x1ae>
 800a3b2:	6121      	str	r1, [r4, #16]
 800a3b4:	b913      	cbnz	r3, 800a3bc <_printf_float+0x1a0>
 800a3b6:	6822      	ldr	r2, [r4, #0]
 800a3b8:	07d0      	lsls	r0, r2, #31
 800a3ba:	d502      	bpl.n	800a3c2 <_printf_float+0x1a6>
 800a3bc:	3301      	adds	r3, #1
 800a3be:	440b      	add	r3, r1
 800a3c0:	6123      	str	r3, [r4, #16]
 800a3c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3c4:	f04f 0900 	mov.w	r9, #0
 800a3c8:	e7de      	b.n	800a388 <_printf_float+0x16c>
 800a3ca:	b913      	cbnz	r3, 800a3d2 <_printf_float+0x1b6>
 800a3cc:	6822      	ldr	r2, [r4, #0]
 800a3ce:	07d2      	lsls	r2, r2, #31
 800a3d0:	d501      	bpl.n	800a3d6 <_printf_float+0x1ba>
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	e7f4      	b.n	800a3c0 <_printf_float+0x1a4>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e7f2      	b.n	800a3c0 <_printf_float+0x1a4>
 800a3da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e0:	4299      	cmp	r1, r3
 800a3e2:	db05      	blt.n	800a3f0 <_printf_float+0x1d4>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	6121      	str	r1, [r4, #16]
 800a3e8:	07d8      	lsls	r0, r3, #31
 800a3ea:	d5ea      	bpl.n	800a3c2 <_printf_float+0x1a6>
 800a3ec:	1c4b      	adds	r3, r1, #1
 800a3ee:	e7e7      	b.n	800a3c0 <_printf_float+0x1a4>
 800a3f0:	2900      	cmp	r1, #0
 800a3f2:	bfd4      	ite	le
 800a3f4:	f1c1 0202 	rsble	r2, r1, #2
 800a3f8:	2201      	movgt	r2, #1
 800a3fa:	4413      	add	r3, r2
 800a3fc:	e7e0      	b.n	800a3c0 <_printf_float+0x1a4>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	055a      	lsls	r2, r3, #21
 800a402:	d407      	bmi.n	800a414 <_printf_float+0x1f8>
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	4642      	mov	r2, r8
 800a408:	4631      	mov	r1, r6
 800a40a:	4628      	mov	r0, r5
 800a40c:	47b8      	blx	r7
 800a40e:	3001      	adds	r0, #1
 800a410:	d12c      	bne.n	800a46c <_printf_float+0x250>
 800a412:	e764      	b.n	800a2de <_printf_float+0xc2>
 800a414:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a418:	f240 80e0 	bls.w	800a5dc <_printf_float+0x3c0>
 800a41c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a420:	2200      	movs	r2, #0
 800a422:	2300      	movs	r3, #0
 800a424:	f7f6 fb68 	bl	8000af8 <__aeabi_dcmpeq>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d034      	beq.n	800a496 <_printf_float+0x27a>
 800a42c:	4a37      	ldr	r2, [pc, #220]	; (800a50c <_printf_float+0x2f0>)
 800a42e:	2301      	movs	r3, #1
 800a430:	4631      	mov	r1, r6
 800a432:	4628      	mov	r0, r5
 800a434:	47b8      	blx	r7
 800a436:	3001      	adds	r0, #1
 800a438:	f43f af51 	beq.w	800a2de <_printf_float+0xc2>
 800a43c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a440:	429a      	cmp	r2, r3
 800a442:	db02      	blt.n	800a44a <_printf_float+0x22e>
 800a444:	6823      	ldr	r3, [r4, #0]
 800a446:	07d8      	lsls	r0, r3, #31
 800a448:	d510      	bpl.n	800a46c <_printf_float+0x250>
 800a44a:	ee18 3a10 	vmov	r3, s16
 800a44e:	4652      	mov	r2, sl
 800a450:	4631      	mov	r1, r6
 800a452:	4628      	mov	r0, r5
 800a454:	47b8      	blx	r7
 800a456:	3001      	adds	r0, #1
 800a458:	f43f af41 	beq.w	800a2de <_printf_float+0xc2>
 800a45c:	f04f 0800 	mov.w	r8, #0
 800a460:	f104 091a 	add.w	r9, r4, #26
 800a464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a466:	3b01      	subs	r3, #1
 800a468:	4543      	cmp	r3, r8
 800a46a:	dc09      	bgt.n	800a480 <_printf_float+0x264>
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	079b      	lsls	r3, r3, #30
 800a470:	f100 8105 	bmi.w	800a67e <_printf_float+0x462>
 800a474:	68e0      	ldr	r0, [r4, #12]
 800a476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a478:	4298      	cmp	r0, r3
 800a47a:	bfb8      	it	lt
 800a47c:	4618      	movlt	r0, r3
 800a47e:	e730      	b.n	800a2e2 <_printf_float+0xc6>
 800a480:	2301      	movs	r3, #1
 800a482:	464a      	mov	r2, r9
 800a484:	4631      	mov	r1, r6
 800a486:	4628      	mov	r0, r5
 800a488:	47b8      	blx	r7
 800a48a:	3001      	adds	r0, #1
 800a48c:	f43f af27 	beq.w	800a2de <_printf_float+0xc2>
 800a490:	f108 0801 	add.w	r8, r8, #1
 800a494:	e7e6      	b.n	800a464 <_printf_float+0x248>
 800a496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a498:	2b00      	cmp	r3, #0
 800a49a:	dc39      	bgt.n	800a510 <_printf_float+0x2f4>
 800a49c:	4a1b      	ldr	r2, [pc, #108]	; (800a50c <_printf_float+0x2f0>)
 800a49e:	2301      	movs	r3, #1
 800a4a0:	4631      	mov	r1, r6
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	47b8      	blx	r7
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	f43f af19 	beq.w	800a2de <_printf_float+0xc2>
 800a4ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	d102      	bne.n	800a4ba <_printf_float+0x29e>
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	07d9      	lsls	r1, r3, #31
 800a4b8:	d5d8      	bpl.n	800a46c <_printf_float+0x250>
 800a4ba:	ee18 3a10 	vmov	r3, s16
 800a4be:	4652      	mov	r2, sl
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	47b8      	blx	r7
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	f43f af09 	beq.w	800a2de <_printf_float+0xc2>
 800a4cc:	f04f 0900 	mov.w	r9, #0
 800a4d0:	f104 0a1a 	add.w	sl, r4, #26
 800a4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d6:	425b      	negs	r3, r3
 800a4d8:	454b      	cmp	r3, r9
 800a4da:	dc01      	bgt.n	800a4e0 <_printf_float+0x2c4>
 800a4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4de:	e792      	b.n	800a406 <_printf_float+0x1ea>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	4652      	mov	r2, sl
 800a4e4:	4631      	mov	r1, r6
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	47b8      	blx	r7
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	f43f aef7 	beq.w	800a2de <_printf_float+0xc2>
 800a4f0:	f109 0901 	add.w	r9, r9, #1
 800a4f4:	e7ee      	b.n	800a4d4 <_printf_float+0x2b8>
 800a4f6:	bf00      	nop
 800a4f8:	7fefffff 	.word	0x7fefffff
 800a4fc:	0800dc18 	.word	0x0800dc18
 800a500:	0800dc1c 	.word	0x0800dc1c
 800a504:	0800dc24 	.word	0x0800dc24
 800a508:	0800dc20 	.word	0x0800dc20
 800a50c:	0800dc28 	.word	0x0800dc28
 800a510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a512:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a514:	429a      	cmp	r2, r3
 800a516:	bfa8      	it	ge
 800a518:	461a      	movge	r2, r3
 800a51a:	2a00      	cmp	r2, #0
 800a51c:	4691      	mov	r9, r2
 800a51e:	dc37      	bgt.n	800a590 <_printf_float+0x374>
 800a520:	f04f 0b00 	mov.w	fp, #0
 800a524:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a528:	f104 021a 	add.w	r2, r4, #26
 800a52c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a52e:	9305      	str	r3, [sp, #20]
 800a530:	eba3 0309 	sub.w	r3, r3, r9
 800a534:	455b      	cmp	r3, fp
 800a536:	dc33      	bgt.n	800a5a0 <_printf_float+0x384>
 800a538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a53c:	429a      	cmp	r2, r3
 800a53e:	db3b      	blt.n	800a5b8 <_printf_float+0x39c>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	07da      	lsls	r2, r3, #31
 800a544:	d438      	bmi.n	800a5b8 <_printf_float+0x39c>
 800a546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a548:	9a05      	ldr	r2, [sp, #20]
 800a54a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a54c:	1a9a      	subs	r2, r3, r2
 800a54e:	eba3 0901 	sub.w	r9, r3, r1
 800a552:	4591      	cmp	r9, r2
 800a554:	bfa8      	it	ge
 800a556:	4691      	movge	r9, r2
 800a558:	f1b9 0f00 	cmp.w	r9, #0
 800a55c:	dc35      	bgt.n	800a5ca <_printf_float+0x3ae>
 800a55e:	f04f 0800 	mov.w	r8, #0
 800a562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a566:	f104 0a1a 	add.w	sl, r4, #26
 800a56a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a56e:	1a9b      	subs	r3, r3, r2
 800a570:	eba3 0309 	sub.w	r3, r3, r9
 800a574:	4543      	cmp	r3, r8
 800a576:	f77f af79 	ble.w	800a46c <_printf_float+0x250>
 800a57a:	2301      	movs	r3, #1
 800a57c:	4652      	mov	r2, sl
 800a57e:	4631      	mov	r1, r6
 800a580:	4628      	mov	r0, r5
 800a582:	47b8      	blx	r7
 800a584:	3001      	adds	r0, #1
 800a586:	f43f aeaa 	beq.w	800a2de <_printf_float+0xc2>
 800a58a:	f108 0801 	add.w	r8, r8, #1
 800a58e:	e7ec      	b.n	800a56a <_printf_float+0x34e>
 800a590:	4613      	mov	r3, r2
 800a592:	4631      	mov	r1, r6
 800a594:	4642      	mov	r2, r8
 800a596:	4628      	mov	r0, r5
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	d1c0      	bne.n	800a520 <_printf_float+0x304>
 800a59e:	e69e      	b.n	800a2de <_printf_float+0xc2>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	9205      	str	r2, [sp, #20]
 800a5a8:	47b8      	blx	r7
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	f43f ae97 	beq.w	800a2de <_printf_float+0xc2>
 800a5b0:	9a05      	ldr	r2, [sp, #20]
 800a5b2:	f10b 0b01 	add.w	fp, fp, #1
 800a5b6:	e7b9      	b.n	800a52c <_printf_float+0x310>
 800a5b8:	ee18 3a10 	vmov	r3, s16
 800a5bc:	4652      	mov	r2, sl
 800a5be:	4631      	mov	r1, r6
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	47b8      	blx	r7
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	d1be      	bne.n	800a546 <_printf_float+0x32a>
 800a5c8:	e689      	b.n	800a2de <_printf_float+0xc2>
 800a5ca:	9a05      	ldr	r2, [sp, #20]
 800a5cc:	464b      	mov	r3, r9
 800a5ce:	4442      	add	r2, r8
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	47b8      	blx	r7
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	d1c1      	bne.n	800a55e <_printf_float+0x342>
 800a5da:	e680      	b.n	800a2de <_printf_float+0xc2>
 800a5dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5de:	2a01      	cmp	r2, #1
 800a5e0:	dc01      	bgt.n	800a5e6 <_printf_float+0x3ca>
 800a5e2:	07db      	lsls	r3, r3, #31
 800a5e4:	d538      	bpl.n	800a658 <_printf_float+0x43c>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4642      	mov	r2, r8
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	47b8      	blx	r7
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	f43f ae74 	beq.w	800a2de <_printf_float+0xc2>
 800a5f6:	ee18 3a10 	vmov	r3, s16
 800a5fa:	4652      	mov	r2, sl
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4628      	mov	r0, r5
 800a600:	47b8      	blx	r7
 800a602:	3001      	adds	r0, #1
 800a604:	f43f ae6b 	beq.w	800a2de <_printf_float+0xc2>
 800a608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a60c:	2200      	movs	r2, #0
 800a60e:	2300      	movs	r3, #0
 800a610:	f7f6 fa72 	bl	8000af8 <__aeabi_dcmpeq>
 800a614:	b9d8      	cbnz	r0, 800a64e <_printf_float+0x432>
 800a616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a618:	f108 0201 	add.w	r2, r8, #1
 800a61c:	3b01      	subs	r3, #1
 800a61e:	4631      	mov	r1, r6
 800a620:	4628      	mov	r0, r5
 800a622:	47b8      	blx	r7
 800a624:	3001      	adds	r0, #1
 800a626:	d10e      	bne.n	800a646 <_printf_float+0x42a>
 800a628:	e659      	b.n	800a2de <_printf_float+0xc2>
 800a62a:	2301      	movs	r3, #1
 800a62c:	4652      	mov	r2, sl
 800a62e:	4631      	mov	r1, r6
 800a630:	4628      	mov	r0, r5
 800a632:	47b8      	blx	r7
 800a634:	3001      	adds	r0, #1
 800a636:	f43f ae52 	beq.w	800a2de <_printf_float+0xc2>
 800a63a:	f108 0801 	add.w	r8, r8, #1
 800a63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a640:	3b01      	subs	r3, #1
 800a642:	4543      	cmp	r3, r8
 800a644:	dcf1      	bgt.n	800a62a <_printf_float+0x40e>
 800a646:	464b      	mov	r3, r9
 800a648:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a64c:	e6dc      	b.n	800a408 <_printf_float+0x1ec>
 800a64e:	f04f 0800 	mov.w	r8, #0
 800a652:	f104 0a1a 	add.w	sl, r4, #26
 800a656:	e7f2      	b.n	800a63e <_printf_float+0x422>
 800a658:	2301      	movs	r3, #1
 800a65a:	4642      	mov	r2, r8
 800a65c:	e7df      	b.n	800a61e <_printf_float+0x402>
 800a65e:	2301      	movs	r3, #1
 800a660:	464a      	mov	r2, r9
 800a662:	4631      	mov	r1, r6
 800a664:	4628      	mov	r0, r5
 800a666:	47b8      	blx	r7
 800a668:	3001      	adds	r0, #1
 800a66a:	f43f ae38 	beq.w	800a2de <_printf_float+0xc2>
 800a66e:	f108 0801 	add.w	r8, r8, #1
 800a672:	68e3      	ldr	r3, [r4, #12]
 800a674:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a676:	1a5b      	subs	r3, r3, r1
 800a678:	4543      	cmp	r3, r8
 800a67a:	dcf0      	bgt.n	800a65e <_printf_float+0x442>
 800a67c:	e6fa      	b.n	800a474 <_printf_float+0x258>
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	f104 0919 	add.w	r9, r4, #25
 800a686:	e7f4      	b.n	800a672 <_printf_float+0x456>

0800a688 <_printf_common>:
 800a688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a68c:	4616      	mov	r6, r2
 800a68e:	4699      	mov	r9, r3
 800a690:	688a      	ldr	r2, [r1, #8]
 800a692:	690b      	ldr	r3, [r1, #16]
 800a694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a698:	4293      	cmp	r3, r2
 800a69a:	bfb8      	it	lt
 800a69c:	4613      	movlt	r3, r2
 800a69e:	6033      	str	r3, [r6, #0]
 800a6a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	b10a      	cbz	r2, 800a6ae <_printf_common+0x26>
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	6033      	str	r3, [r6, #0]
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	0699      	lsls	r1, r3, #26
 800a6b2:	bf42      	ittt	mi
 800a6b4:	6833      	ldrmi	r3, [r6, #0]
 800a6b6:	3302      	addmi	r3, #2
 800a6b8:	6033      	strmi	r3, [r6, #0]
 800a6ba:	6825      	ldr	r5, [r4, #0]
 800a6bc:	f015 0506 	ands.w	r5, r5, #6
 800a6c0:	d106      	bne.n	800a6d0 <_printf_common+0x48>
 800a6c2:	f104 0a19 	add.w	sl, r4, #25
 800a6c6:	68e3      	ldr	r3, [r4, #12]
 800a6c8:	6832      	ldr	r2, [r6, #0]
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	42ab      	cmp	r3, r5
 800a6ce:	dc26      	bgt.n	800a71e <_printf_common+0x96>
 800a6d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6d4:	1e13      	subs	r3, r2, #0
 800a6d6:	6822      	ldr	r2, [r4, #0]
 800a6d8:	bf18      	it	ne
 800a6da:	2301      	movne	r3, #1
 800a6dc:	0692      	lsls	r2, r2, #26
 800a6de:	d42b      	bmi.n	800a738 <_printf_common+0xb0>
 800a6e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	47c0      	blx	r8
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	d01e      	beq.n	800a72c <_printf_common+0xa4>
 800a6ee:	6823      	ldr	r3, [r4, #0]
 800a6f0:	68e5      	ldr	r5, [r4, #12]
 800a6f2:	6832      	ldr	r2, [r6, #0]
 800a6f4:	f003 0306 	and.w	r3, r3, #6
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	bf08      	it	eq
 800a6fc:	1aad      	subeq	r5, r5, r2
 800a6fe:	68a3      	ldr	r3, [r4, #8]
 800a700:	6922      	ldr	r2, [r4, #16]
 800a702:	bf0c      	ite	eq
 800a704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a708:	2500      	movne	r5, #0
 800a70a:	4293      	cmp	r3, r2
 800a70c:	bfc4      	itt	gt
 800a70e:	1a9b      	subgt	r3, r3, r2
 800a710:	18ed      	addgt	r5, r5, r3
 800a712:	2600      	movs	r6, #0
 800a714:	341a      	adds	r4, #26
 800a716:	42b5      	cmp	r5, r6
 800a718:	d11a      	bne.n	800a750 <_printf_common+0xc8>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e008      	b.n	800a730 <_printf_common+0xa8>
 800a71e:	2301      	movs	r3, #1
 800a720:	4652      	mov	r2, sl
 800a722:	4649      	mov	r1, r9
 800a724:	4638      	mov	r0, r7
 800a726:	47c0      	blx	r8
 800a728:	3001      	adds	r0, #1
 800a72a:	d103      	bne.n	800a734 <_printf_common+0xac>
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a734:	3501      	adds	r5, #1
 800a736:	e7c6      	b.n	800a6c6 <_printf_common+0x3e>
 800a738:	18e1      	adds	r1, r4, r3
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	2030      	movs	r0, #48	; 0x30
 800a73e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a742:	4422      	add	r2, r4
 800a744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a74c:	3302      	adds	r3, #2
 800a74e:	e7c7      	b.n	800a6e0 <_printf_common+0x58>
 800a750:	2301      	movs	r3, #1
 800a752:	4622      	mov	r2, r4
 800a754:	4649      	mov	r1, r9
 800a756:	4638      	mov	r0, r7
 800a758:	47c0      	blx	r8
 800a75a:	3001      	adds	r0, #1
 800a75c:	d0e6      	beq.n	800a72c <_printf_common+0xa4>
 800a75e:	3601      	adds	r6, #1
 800a760:	e7d9      	b.n	800a716 <_printf_common+0x8e>
	...

0800a764 <_printf_i>:
 800a764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a768:	7e0f      	ldrb	r7, [r1, #24]
 800a76a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a76c:	2f78      	cmp	r7, #120	; 0x78
 800a76e:	4691      	mov	r9, r2
 800a770:	4680      	mov	r8, r0
 800a772:	460c      	mov	r4, r1
 800a774:	469a      	mov	sl, r3
 800a776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a77a:	d807      	bhi.n	800a78c <_printf_i+0x28>
 800a77c:	2f62      	cmp	r7, #98	; 0x62
 800a77e:	d80a      	bhi.n	800a796 <_printf_i+0x32>
 800a780:	2f00      	cmp	r7, #0
 800a782:	f000 80d8 	beq.w	800a936 <_printf_i+0x1d2>
 800a786:	2f58      	cmp	r7, #88	; 0x58
 800a788:	f000 80a3 	beq.w	800a8d2 <_printf_i+0x16e>
 800a78c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a794:	e03a      	b.n	800a80c <_printf_i+0xa8>
 800a796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a79a:	2b15      	cmp	r3, #21
 800a79c:	d8f6      	bhi.n	800a78c <_printf_i+0x28>
 800a79e:	a101      	add	r1, pc, #4	; (adr r1, 800a7a4 <_printf_i+0x40>)
 800a7a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7a4:	0800a7fd 	.word	0x0800a7fd
 800a7a8:	0800a811 	.word	0x0800a811
 800a7ac:	0800a78d 	.word	0x0800a78d
 800a7b0:	0800a78d 	.word	0x0800a78d
 800a7b4:	0800a78d 	.word	0x0800a78d
 800a7b8:	0800a78d 	.word	0x0800a78d
 800a7bc:	0800a811 	.word	0x0800a811
 800a7c0:	0800a78d 	.word	0x0800a78d
 800a7c4:	0800a78d 	.word	0x0800a78d
 800a7c8:	0800a78d 	.word	0x0800a78d
 800a7cc:	0800a78d 	.word	0x0800a78d
 800a7d0:	0800a91d 	.word	0x0800a91d
 800a7d4:	0800a841 	.word	0x0800a841
 800a7d8:	0800a8ff 	.word	0x0800a8ff
 800a7dc:	0800a78d 	.word	0x0800a78d
 800a7e0:	0800a78d 	.word	0x0800a78d
 800a7e4:	0800a93f 	.word	0x0800a93f
 800a7e8:	0800a78d 	.word	0x0800a78d
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a78d 	.word	0x0800a78d
 800a7f4:	0800a78d 	.word	0x0800a78d
 800a7f8:	0800a907 	.word	0x0800a907
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	1d1a      	adds	r2, r3, #4
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	602a      	str	r2, [r5, #0]
 800a804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a80c:	2301      	movs	r3, #1
 800a80e:	e0a3      	b.n	800a958 <_printf_i+0x1f4>
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	6829      	ldr	r1, [r5, #0]
 800a814:	0606      	lsls	r6, r0, #24
 800a816:	f101 0304 	add.w	r3, r1, #4
 800a81a:	d50a      	bpl.n	800a832 <_printf_i+0xce>
 800a81c:	680e      	ldr	r6, [r1, #0]
 800a81e:	602b      	str	r3, [r5, #0]
 800a820:	2e00      	cmp	r6, #0
 800a822:	da03      	bge.n	800a82c <_printf_i+0xc8>
 800a824:	232d      	movs	r3, #45	; 0x2d
 800a826:	4276      	negs	r6, r6
 800a828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a82c:	485e      	ldr	r0, [pc, #376]	; (800a9a8 <_printf_i+0x244>)
 800a82e:	230a      	movs	r3, #10
 800a830:	e019      	b.n	800a866 <_printf_i+0x102>
 800a832:	680e      	ldr	r6, [r1, #0]
 800a834:	602b      	str	r3, [r5, #0]
 800a836:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a83a:	bf18      	it	ne
 800a83c:	b236      	sxthne	r6, r6
 800a83e:	e7ef      	b.n	800a820 <_printf_i+0xbc>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	6820      	ldr	r0, [r4, #0]
 800a844:	1d19      	adds	r1, r3, #4
 800a846:	6029      	str	r1, [r5, #0]
 800a848:	0601      	lsls	r1, r0, #24
 800a84a:	d501      	bpl.n	800a850 <_printf_i+0xec>
 800a84c:	681e      	ldr	r6, [r3, #0]
 800a84e:	e002      	b.n	800a856 <_printf_i+0xf2>
 800a850:	0646      	lsls	r6, r0, #25
 800a852:	d5fb      	bpl.n	800a84c <_printf_i+0xe8>
 800a854:	881e      	ldrh	r6, [r3, #0]
 800a856:	4854      	ldr	r0, [pc, #336]	; (800a9a8 <_printf_i+0x244>)
 800a858:	2f6f      	cmp	r7, #111	; 0x6f
 800a85a:	bf0c      	ite	eq
 800a85c:	2308      	moveq	r3, #8
 800a85e:	230a      	movne	r3, #10
 800a860:	2100      	movs	r1, #0
 800a862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a866:	6865      	ldr	r5, [r4, #4]
 800a868:	60a5      	str	r5, [r4, #8]
 800a86a:	2d00      	cmp	r5, #0
 800a86c:	bfa2      	ittt	ge
 800a86e:	6821      	ldrge	r1, [r4, #0]
 800a870:	f021 0104 	bicge.w	r1, r1, #4
 800a874:	6021      	strge	r1, [r4, #0]
 800a876:	b90e      	cbnz	r6, 800a87c <_printf_i+0x118>
 800a878:	2d00      	cmp	r5, #0
 800a87a:	d04d      	beq.n	800a918 <_printf_i+0x1b4>
 800a87c:	4615      	mov	r5, r2
 800a87e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a882:	fb03 6711 	mls	r7, r3, r1, r6
 800a886:	5dc7      	ldrb	r7, [r0, r7]
 800a888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a88c:	4637      	mov	r7, r6
 800a88e:	42bb      	cmp	r3, r7
 800a890:	460e      	mov	r6, r1
 800a892:	d9f4      	bls.n	800a87e <_printf_i+0x11a>
 800a894:	2b08      	cmp	r3, #8
 800a896:	d10b      	bne.n	800a8b0 <_printf_i+0x14c>
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	07de      	lsls	r6, r3, #31
 800a89c:	d508      	bpl.n	800a8b0 <_printf_i+0x14c>
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	6861      	ldr	r1, [r4, #4]
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	bfde      	ittt	le
 800a8a6:	2330      	movle	r3, #48	; 0x30
 800a8a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a8b0:	1b52      	subs	r2, r2, r5
 800a8b2:	6122      	str	r2, [r4, #16]
 800a8b4:	f8cd a000 	str.w	sl, [sp]
 800a8b8:	464b      	mov	r3, r9
 800a8ba:	aa03      	add	r2, sp, #12
 800a8bc:	4621      	mov	r1, r4
 800a8be:	4640      	mov	r0, r8
 800a8c0:	f7ff fee2 	bl	800a688 <_printf_common>
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	d14c      	bne.n	800a962 <_printf_i+0x1fe>
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8cc:	b004      	add	sp, #16
 800a8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d2:	4835      	ldr	r0, [pc, #212]	; (800a9a8 <_printf_i+0x244>)
 800a8d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a8d8:	6829      	ldr	r1, [r5, #0]
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8e0:	6029      	str	r1, [r5, #0]
 800a8e2:	061d      	lsls	r5, r3, #24
 800a8e4:	d514      	bpl.n	800a910 <_printf_i+0x1ac>
 800a8e6:	07df      	lsls	r7, r3, #31
 800a8e8:	bf44      	itt	mi
 800a8ea:	f043 0320 	orrmi.w	r3, r3, #32
 800a8ee:	6023      	strmi	r3, [r4, #0]
 800a8f0:	b91e      	cbnz	r6, 800a8fa <_printf_i+0x196>
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	f023 0320 	bic.w	r3, r3, #32
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	2310      	movs	r3, #16
 800a8fc:	e7b0      	b.n	800a860 <_printf_i+0xfc>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	f043 0320 	orr.w	r3, r3, #32
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	2378      	movs	r3, #120	; 0x78
 800a908:	4828      	ldr	r0, [pc, #160]	; (800a9ac <_printf_i+0x248>)
 800a90a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a90e:	e7e3      	b.n	800a8d8 <_printf_i+0x174>
 800a910:	0659      	lsls	r1, r3, #25
 800a912:	bf48      	it	mi
 800a914:	b2b6      	uxthmi	r6, r6
 800a916:	e7e6      	b.n	800a8e6 <_printf_i+0x182>
 800a918:	4615      	mov	r5, r2
 800a91a:	e7bb      	b.n	800a894 <_printf_i+0x130>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	6826      	ldr	r6, [r4, #0]
 800a920:	6961      	ldr	r1, [r4, #20]
 800a922:	1d18      	adds	r0, r3, #4
 800a924:	6028      	str	r0, [r5, #0]
 800a926:	0635      	lsls	r5, r6, #24
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	d501      	bpl.n	800a930 <_printf_i+0x1cc>
 800a92c:	6019      	str	r1, [r3, #0]
 800a92e:	e002      	b.n	800a936 <_printf_i+0x1d2>
 800a930:	0670      	lsls	r0, r6, #25
 800a932:	d5fb      	bpl.n	800a92c <_printf_i+0x1c8>
 800a934:	8019      	strh	r1, [r3, #0]
 800a936:	2300      	movs	r3, #0
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	4615      	mov	r5, r2
 800a93c:	e7ba      	b.n	800a8b4 <_printf_i+0x150>
 800a93e:	682b      	ldr	r3, [r5, #0]
 800a940:	1d1a      	adds	r2, r3, #4
 800a942:	602a      	str	r2, [r5, #0]
 800a944:	681d      	ldr	r5, [r3, #0]
 800a946:	6862      	ldr	r2, [r4, #4]
 800a948:	2100      	movs	r1, #0
 800a94a:	4628      	mov	r0, r5
 800a94c:	f7f5 fc60 	bl	8000210 <memchr>
 800a950:	b108      	cbz	r0, 800a956 <_printf_i+0x1f2>
 800a952:	1b40      	subs	r0, r0, r5
 800a954:	6060      	str	r0, [r4, #4]
 800a956:	6863      	ldr	r3, [r4, #4]
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	2300      	movs	r3, #0
 800a95c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a960:	e7a8      	b.n	800a8b4 <_printf_i+0x150>
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	462a      	mov	r2, r5
 800a966:	4649      	mov	r1, r9
 800a968:	4640      	mov	r0, r8
 800a96a:	47d0      	blx	sl
 800a96c:	3001      	adds	r0, #1
 800a96e:	d0ab      	beq.n	800a8c8 <_printf_i+0x164>
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	079b      	lsls	r3, r3, #30
 800a974:	d413      	bmi.n	800a99e <_printf_i+0x23a>
 800a976:	68e0      	ldr	r0, [r4, #12]
 800a978:	9b03      	ldr	r3, [sp, #12]
 800a97a:	4298      	cmp	r0, r3
 800a97c:	bfb8      	it	lt
 800a97e:	4618      	movlt	r0, r3
 800a980:	e7a4      	b.n	800a8cc <_printf_i+0x168>
 800a982:	2301      	movs	r3, #1
 800a984:	4632      	mov	r2, r6
 800a986:	4649      	mov	r1, r9
 800a988:	4640      	mov	r0, r8
 800a98a:	47d0      	blx	sl
 800a98c:	3001      	adds	r0, #1
 800a98e:	d09b      	beq.n	800a8c8 <_printf_i+0x164>
 800a990:	3501      	adds	r5, #1
 800a992:	68e3      	ldr	r3, [r4, #12]
 800a994:	9903      	ldr	r1, [sp, #12]
 800a996:	1a5b      	subs	r3, r3, r1
 800a998:	42ab      	cmp	r3, r5
 800a99a:	dcf2      	bgt.n	800a982 <_printf_i+0x21e>
 800a99c:	e7eb      	b.n	800a976 <_printf_i+0x212>
 800a99e:	2500      	movs	r5, #0
 800a9a0:	f104 0619 	add.w	r6, r4, #25
 800a9a4:	e7f5      	b.n	800a992 <_printf_i+0x22e>
 800a9a6:	bf00      	nop
 800a9a8:	0800dc2a 	.word	0x0800dc2a
 800a9ac:	0800dc3b 	.word	0x0800dc3b

0800a9b0 <iprintf>:
 800a9b0:	b40f      	push	{r0, r1, r2, r3}
 800a9b2:	4b0a      	ldr	r3, [pc, #40]	; (800a9dc <iprintf+0x2c>)
 800a9b4:	b513      	push	{r0, r1, r4, lr}
 800a9b6:	681c      	ldr	r4, [r3, #0]
 800a9b8:	b124      	cbz	r4, 800a9c4 <iprintf+0x14>
 800a9ba:	69a3      	ldr	r3, [r4, #24]
 800a9bc:	b913      	cbnz	r3, 800a9c4 <iprintf+0x14>
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f001 f91e 	bl	800bc00 <__sinit>
 800a9c4:	ab05      	add	r3, sp, #20
 800a9c6:	9a04      	ldr	r2, [sp, #16]
 800a9c8:	68a1      	ldr	r1, [r4, #8]
 800a9ca:	9301      	str	r3, [sp, #4]
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f001 ff5b 	bl	800c888 <_vfiprintf_r>
 800a9d2:	b002      	add	sp, #8
 800a9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9d8:	b004      	add	sp, #16
 800a9da:	4770      	bx	lr
 800a9dc:	20000024 	.word	0x20000024

0800a9e0 <_puts_r>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	460e      	mov	r6, r1
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	b118      	cbz	r0, 800a9f0 <_puts_r+0x10>
 800a9e8:	6983      	ldr	r3, [r0, #24]
 800a9ea:	b90b      	cbnz	r3, 800a9f0 <_puts_r+0x10>
 800a9ec:	f001 f908 	bl	800bc00 <__sinit>
 800a9f0:	69ab      	ldr	r3, [r5, #24]
 800a9f2:	68ac      	ldr	r4, [r5, #8]
 800a9f4:	b913      	cbnz	r3, 800a9fc <_puts_r+0x1c>
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f001 f902 	bl	800bc00 <__sinit>
 800a9fc:	4b2c      	ldr	r3, [pc, #176]	; (800aab0 <_puts_r+0xd0>)
 800a9fe:	429c      	cmp	r4, r3
 800aa00:	d120      	bne.n	800aa44 <_puts_r+0x64>
 800aa02:	686c      	ldr	r4, [r5, #4]
 800aa04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa06:	07db      	lsls	r3, r3, #31
 800aa08:	d405      	bmi.n	800aa16 <_puts_r+0x36>
 800aa0a:	89a3      	ldrh	r3, [r4, #12]
 800aa0c:	0598      	lsls	r0, r3, #22
 800aa0e:	d402      	bmi.n	800aa16 <_puts_r+0x36>
 800aa10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa12:	f001 f998 	bl	800bd46 <__retarget_lock_acquire_recursive>
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	0719      	lsls	r1, r3, #28
 800aa1a:	d51d      	bpl.n	800aa58 <_puts_r+0x78>
 800aa1c:	6923      	ldr	r3, [r4, #16]
 800aa1e:	b1db      	cbz	r3, 800aa58 <_puts_r+0x78>
 800aa20:	3e01      	subs	r6, #1
 800aa22:	68a3      	ldr	r3, [r4, #8]
 800aa24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	60a3      	str	r3, [r4, #8]
 800aa2c:	bb39      	cbnz	r1, 800aa7e <_puts_r+0x9e>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	da38      	bge.n	800aaa4 <_puts_r+0xc4>
 800aa32:	4622      	mov	r2, r4
 800aa34:	210a      	movs	r1, #10
 800aa36:	4628      	mov	r0, r5
 800aa38:	f000 f88c 	bl	800ab54 <__swbuf_r>
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	d011      	beq.n	800aa64 <_puts_r+0x84>
 800aa40:	250a      	movs	r5, #10
 800aa42:	e011      	b.n	800aa68 <_puts_r+0x88>
 800aa44:	4b1b      	ldr	r3, [pc, #108]	; (800aab4 <_puts_r+0xd4>)
 800aa46:	429c      	cmp	r4, r3
 800aa48:	d101      	bne.n	800aa4e <_puts_r+0x6e>
 800aa4a:	68ac      	ldr	r4, [r5, #8]
 800aa4c:	e7da      	b.n	800aa04 <_puts_r+0x24>
 800aa4e:	4b1a      	ldr	r3, [pc, #104]	; (800aab8 <_puts_r+0xd8>)
 800aa50:	429c      	cmp	r4, r3
 800aa52:	bf08      	it	eq
 800aa54:	68ec      	ldreq	r4, [r5, #12]
 800aa56:	e7d5      	b.n	800aa04 <_puts_r+0x24>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f000 f8cc 	bl	800abf8 <__swsetup_r>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d0dd      	beq.n	800aa20 <_puts_r+0x40>
 800aa64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aa68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa6a:	07da      	lsls	r2, r3, #31
 800aa6c:	d405      	bmi.n	800aa7a <_puts_r+0x9a>
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	059b      	lsls	r3, r3, #22
 800aa72:	d402      	bmi.n	800aa7a <_puts_r+0x9a>
 800aa74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa76:	f001 f967 	bl	800bd48 <__retarget_lock_release_recursive>
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	bd70      	pop	{r4, r5, r6, pc}
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	da04      	bge.n	800aa8c <_puts_r+0xac>
 800aa82:	69a2      	ldr	r2, [r4, #24]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	dc06      	bgt.n	800aa96 <_puts_r+0xb6>
 800aa88:	290a      	cmp	r1, #10
 800aa8a:	d004      	beq.n	800aa96 <_puts_r+0xb6>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	6022      	str	r2, [r4, #0]
 800aa92:	7019      	strb	r1, [r3, #0]
 800aa94:	e7c5      	b.n	800aa22 <_puts_r+0x42>
 800aa96:	4622      	mov	r2, r4
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f000 f85b 	bl	800ab54 <__swbuf_r>
 800aa9e:	3001      	adds	r0, #1
 800aaa0:	d1bf      	bne.n	800aa22 <_puts_r+0x42>
 800aaa2:	e7df      	b.n	800aa64 <_puts_r+0x84>
 800aaa4:	6823      	ldr	r3, [r4, #0]
 800aaa6:	250a      	movs	r5, #10
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	6022      	str	r2, [r4, #0]
 800aaac:	701d      	strb	r5, [r3, #0]
 800aaae:	e7db      	b.n	800aa68 <_puts_r+0x88>
 800aab0:	0800dcfc 	.word	0x0800dcfc
 800aab4:	0800dd1c 	.word	0x0800dd1c
 800aab8:	0800dcdc 	.word	0x0800dcdc

0800aabc <puts>:
 800aabc:	4b02      	ldr	r3, [pc, #8]	; (800aac8 <puts+0xc>)
 800aabe:	4601      	mov	r1, r0
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	f7ff bf8d 	b.w	800a9e0 <_puts_r>
 800aac6:	bf00      	nop
 800aac8:	20000024 	.word	0x20000024

0800aacc <_sbrk_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d06      	ldr	r5, [pc, #24]	; (800aae8 <_sbrk_r+0x1c>)
 800aad0:	2300      	movs	r3, #0
 800aad2:	4604      	mov	r4, r0
 800aad4:	4608      	mov	r0, r1
 800aad6:	602b      	str	r3, [r5, #0]
 800aad8:	f7f8 fa94 	bl	8003004 <_sbrk>
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	d102      	bne.n	800aae6 <_sbrk_r+0x1a>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	b103      	cbz	r3, 800aae6 <_sbrk_r+0x1a>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
 800aae8:	20002530 	.word	0x20002530

0800aaec <sniprintf>:
 800aaec:	b40c      	push	{r2, r3}
 800aaee:	b530      	push	{r4, r5, lr}
 800aaf0:	4b17      	ldr	r3, [pc, #92]	; (800ab50 <sniprintf+0x64>)
 800aaf2:	1e0c      	subs	r4, r1, #0
 800aaf4:	681d      	ldr	r5, [r3, #0]
 800aaf6:	b09d      	sub	sp, #116	; 0x74
 800aaf8:	da08      	bge.n	800ab0c <sniprintf+0x20>
 800aafa:	238b      	movs	r3, #139	; 0x8b
 800aafc:	602b      	str	r3, [r5, #0]
 800aafe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab02:	b01d      	add	sp, #116	; 0x74
 800ab04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab08:	b002      	add	sp, #8
 800ab0a:	4770      	bx	lr
 800ab0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ab10:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab14:	bf14      	ite	ne
 800ab16:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ab1a:	4623      	moveq	r3, r4
 800ab1c:	9304      	str	r3, [sp, #16]
 800ab1e:	9307      	str	r3, [sp, #28]
 800ab20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab24:	9002      	str	r0, [sp, #8]
 800ab26:	9006      	str	r0, [sp, #24]
 800ab28:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab2e:	ab21      	add	r3, sp, #132	; 0x84
 800ab30:	a902      	add	r1, sp, #8
 800ab32:	4628      	mov	r0, r5
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	f001 fd7d 	bl	800c634 <_svfiprintf_r>
 800ab3a:	1c43      	adds	r3, r0, #1
 800ab3c:	bfbc      	itt	lt
 800ab3e:	238b      	movlt	r3, #139	; 0x8b
 800ab40:	602b      	strlt	r3, [r5, #0]
 800ab42:	2c00      	cmp	r4, #0
 800ab44:	d0dd      	beq.n	800ab02 <sniprintf+0x16>
 800ab46:	9b02      	ldr	r3, [sp, #8]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
 800ab4c:	e7d9      	b.n	800ab02 <sniprintf+0x16>
 800ab4e:	bf00      	nop
 800ab50:	20000024 	.word	0x20000024

0800ab54 <__swbuf_r>:
 800ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab56:	460e      	mov	r6, r1
 800ab58:	4614      	mov	r4, r2
 800ab5a:	4605      	mov	r5, r0
 800ab5c:	b118      	cbz	r0, 800ab66 <__swbuf_r+0x12>
 800ab5e:	6983      	ldr	r3, [r0, #24]
 800ab60:	b90b      	cbnz	r3, 800ab66 <__swbuf_r+0x12>
 800ab62:	f001 f84d 	bl	800bc00 <__sinit>
 800ab66:	4b21      	ldr	r3, [pc, #132]	; (800abec <__swbuf_r+0x98>)
 800ab68:	429c      	cmp	r4, r3
 800ab6a:	d12b      	bne.n	800abc4 <__swbuf_r+0x70>
 800ab6c:	686c      	ldr	r4, [r5, #4]
 800ab6e:	69a3      	ldr	r3, [r4, #24]
 800ab70:	60a3      	str	r3, [r4, #8]
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	071a      	lsls	r2, r3, #28
 800ab76:	d52f      	bpl.n	800abd8 <__swbuf_r+0x84>
 800ab78:	6923      	ldr	r3, [r4, #16]
 800ab7a:	b36b      	cbz	r3, 800abd8 <__swbuf_r+0x84>
 800ab7c:	6923      	ldr	r3, [r4, #16]
 800ab7e:	6820      	ldr	r0, [r4, #0]
 800ab80:	1ac0      	subs	r0, r0, r3
 800ab82:	6963      	ldr	r3, [r4, #20]
 800ab84:	b2f6      	uxtb	r6, r6
 800ab86:	4283      	cmp	r3, r0
 800ab88:	4637      	mov	r7, r6
 800ab8a:	dc04      	bgt.n	800ab96 <__swbuf_r+0x42>
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f000 ffa2 	bl	800bad8 <_fflush_r>
 800ab94:	bb30      	cbnz	r0, 800abe4 <__swbuf_r+0x90>
 800ab96:	68a3      	ldr	r3, [r4, #8]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	60a3      	str	r3, [r4, #8]
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	6022      	str	r2, [r4, #0]
 800aba2:	701e      	strb	r6, [r3, #0]
 800aba4:	6963      	ldr	r3, [r4, #20]
 800aba6:	3001      	adds	r0, #1
 800aba8:	4283      	cmp	r3, r0
 800abaa:	d004      	beq.n	800abb6 <__swbuf_r+0x62>
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	07db      	lsls	r3, r3, #31
 800abb0:	d506      	bpl.n	800abc0 <__swbuf_r+0x6c>
 800abb2:	2e0a      	cmp	r6, #10
 800abb4:	d104      	bne.n	800abc0 <__swbuf_r+0x6c>
 800abb6:	4621      	mov	r1, r4
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 ff8d 	bl	800bad8 <_fflush_r>
 800abbe:	b988      	cbnz	r0, 800abe4 <__swbuf_r+0x90>
 800abc0:	4638      	mov	r0, r7
 800abc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc4:	4b0a      	ldr	r3, [pc, #40]	; (800abf0 <__swbuf_r+0x9c>)
 800abc6:	429c      	cmp	r4, r3
 800abc8:	d101      	bne.n	800abce <__swbuf_r+0x7a>
 800abca:	68ac      	ldr	r4, [r5, #8]
 800abcc:	e7cf      	b.n	800ab6e <__swbuf_r+0x1a>
 800abce:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <__swbuf_r+0xa0>)
 800abd0:	429c      	cmp	r4, r3
 800abd2:	bf08      	it	eq
 800abd4:	68ec      	ldreq	r4, [r5, #12]
 800abd6:	e7ca      	b.n	800ab6e <__swbuf_r+0x1a>
 800abd8:	4621      	mov	r1, r4
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 f80c 	bl	800abf8 <__swsetup_r>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d0cb      	beq.n	800ab7c <__swbuf_r+0x28>
 800abe4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800abe8:	e7ea      	b.n	800abc0 <__swbuf_r+0x6c>
 800abea:	bf00      	nop
 800abec:	0800dcfc 	.word	0x0800dcfc
 800abf0:	0800dd1c 	.word	0x0800dd1c
 800abf4:	0800dcdc 	.word	0x0800dcdc

0800abf8 <__swsetup_r>:
 800abf8:	4b32      	ldr	r3, [pc, #200]	; (800acc4 <__swsetup_r+0xcc>)
 800abfa:	b570      	push	{r4, r5, r6, lr}
 800abfc:	681d      	ldr	r5, [r3, #0]
 800abfe:	4606      	mov	r6, r0
 800ac00:	460c      	mov	r4, r1
 800ac02:	b125      	cbz	r5, 800ac0e <__swsetup_r+0x16>
 800ac04:	69ab      	ldr	r3, [r5, #24]
 800ac06:	b913      	cbnz	r3, 800ac0e <__swsetup_r+0x16>
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f000 fff9 	bl	800bc00 <__sinit>
 800ac0e:	4b2e      	ldr	r3, [pc, #184]	; (800acc8 <__swsetup_r+0xd0>)
 800ac10:	429c      	cmp	r4, r3
 800ac12:	d10f      	bne.n	800ac34 <__swsetup_r+0x3c>
 800ac14:	686c      	ldr	r4, [r5, #4]
 800ac16:	89a3      	ldrh	r3, [r4, #12]
 800ac18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac1c:	0719      	lsls	r1, r3, #28
 800ac1e:	d42c      	bmi.n	800ac7a <__swsetup_r+0x82>
 800ac20:	06dd      	lsls	r5, r3, #27
 800ac22:	d411      	bmi.n	800ac48 <__swsetup_r+0x50>
 800ac24:	2309      	movs	r3, #9
 800ac26:	6033      	str	r3, [r6, #0]
 800ac28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac2c:	81a3      	strh	r3, [r4, #12]
 800ac2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac32:	e03e      	b.n	800acb2 <__swsetup_r+0xba>
 800ac34:	4b25      	ldr	r3, [pc, #148]	; (800accc <__swsetup_r+0xd4>)
 800ac36:	429c      	cmp	r4, r3
 800ac38:	d101      	bne.n	800ac3e <__swsetup_r+0x46>
 800ac3a:	68ac      	ldr	r4, [r5, #8]
 800ac3c:	e7eb      	b.n	800ac16 <__swsetup_r+0x1e>
 800ac3e:	4b24      	ldr	r3, [pc, #144]	; (800acd0 <__swsetup_r+0xd8>)
 800ac40:	429c      	cmp	r4, r3
 800ac42:	bf08      	it	eq
 800ac44:	68ec      	ldreq	r4, [r5, #12]
 800ac46:	e7e6      	b.n	800ac16 <__swsetup_r+0x1e>
 800ac48:	0758      	lsls	r0, r3, #29
 800ac4a:	d512      	bpl.n	800ac72 <__swsetup_r+0x7a>
 800ac4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac4e:	b141      	cbz	r1, 800ac62 <__swsetup_r+0x6a>
 800ac50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac54:	4299      	cmp	r1, r3
 800ac56:	d002      	beq.n	800ac5e <__swsetup_r+0x66>
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7ff f95f 	bl	8009f1c <_free_r>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	6363      	str	r3, [r4, #52]	; 0x34
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	6063      	str	r3, [r4, #4]
 800ac6e:	6923      	ldr	r3, [r4, #16]
 800ac70:	6023      	str	r3, [r4, #0]
 800ac72:	89a3      	ldrh	r3, [r4, #12]
 800ac74:	f043 0308 	orr.w	r3, r3, #8
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	6923      	ldr	r3, [r4, #16]
 800ac7c:	b94b      	cbnz	r3, 800ac92 <__swsetup_r+0x9a>
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac88:	d003      	beq.n	800ac92 <__swsetup_r+0x9a>
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f001 f881 	bl	800bd94 <__smakebuf_r>
 800ac92:	89a0      	ldrh	r0, [r4, #12]
 800ac94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac98:	f010 0301 	ands.w	r3, r0, #1
 800ac9c:	d00a      	beq.n	800acb4 <__swsetup_r+0xbc>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60a3      	str	r3, [r4, #8]
 800aca2:	6963      	ldr	r3, [r4, #20]
 800aca4:	425b      	negs	r3, r3
 800aca6:	61a3      	str	r3, [r4, #24]
 800aca8:	6923      	ldr	r3, [r4, #16]
 800acaa:	b943      	cbnz	r3, 800acbe <__swsetup_r+0xc6>
 800acac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acb0:	d1ba      	bne.n	800ac28 <__swsetup_r+0x30>
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
 800acb4:	0781      	lsls	r1, r0, #30
 800acb6:	bf58      	it	pl
 800acb8:	6963      	ldrpl	r3, [r4, #20]
 800acba:	60a3      	str	r3, [r4, #8]
 800acbc:	e7f4      	b.n	800aca8 <__swsetup_r+0xb0>
 800acbe:	2000      	movs	r0, #0
 800acc0:	e7f7      	b.n	800acb2 <__swsetup_r+0xba>
 800acc2:	bf00      	nop
 800acc4:	20000024 	.word	0x20000024
 800acc8:	0800dcfc 	.word	0x0800dcfc
 800accc:	0800dd1c 	.word	0x0800dd1c
 800acd0:	0800dcdc 	.word	0x0800dcdc

0800acd4 <quorem>:
 800acd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd8:	6903      	ldr	r3, [r0, #16]
 800acda:	690c      	ldr	r4, [r1, #16]
 800acdc:	42a3      	cmp	r3, r4
 800acde:	4607      	mov	r7, r0
 800ace0:	f2c0 8081 	blt.w	800ade6 <quorem+0x112>
 800ace4:	3c01      	subs	r4, #1
 800ace6:	f101 0814 	add.w	r8, r1, #20
 800acea:	f100 0514 	add.w	r5, r0, #20
 800acee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acfc:	3301      	adds	r3, #1
 800acfe:	429a      	cmp	r2, r3
 800ad00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad08:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad0c:	d331      	bcc.n	800ad72 <quorem+0x9e>
 800ad0e:	f04f 0e00 	mov.w	lr, #0
 800ad12:	4640      	mov	r0, r8
 800ad14:	46ac      	mov	ip, r5
 800ad16:	46f2      	mov	sl, lr
 800ad18:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad1c:	b293      	uxth	r3, r2
 800ad1e:	fb06 e303 	mla	r3, r6, r3, lr
 800ad22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	ebaa 0303 	sub.w	r3, sl, r3
 800ad2c:	f8dc a000 	ldr.w	sl, [ip]
 800ad30:	0c12      	lsrs	r2, r2, #16
 800ad32:	fa13 f38a 	uxtah	r3, r3, sl
 800ad36:	fb06 e202 	mla	r2, r6, r2, lr
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	9b00      	ldr	r3, [sp, #0]
 800ad3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad42:	b292      	uxth	r2, r2
 800ad44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad4c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad50:	4581      	cmp	r9, r0
 800ad52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad56:	f84c 3b04 	str.w	r3, [ip], #4
 800ad5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad5e:	d2db      	bcs.n	800ad18 <quorem+0x44>
 800ad60:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad64:	b92b      	cbnz	r3, 800ad72 <quorem+0x9e>
 800ad66:	9b01      	ldr	r3, [sp, #4]
 800ad68:	3b04      	subs	r3, #4
 800ad6a:	429d      	cmp	r5, r3
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	d32e      	bcc.n	800adce <quorem+0xfa>
 800ad70:	613c      	str	r4, [r7, #16]
 800ad72:	4638      	mov	r0, r7
 800ad74:	f001 faea 	bl	800c34c <__mcmp>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	db24      	blt.n	800adc6 <quorem+0xf2>
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f04f 0c00 	mov.w	ip, #0
 800ad84:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad88:	f8d0 e000 	ldr.w	lr, [r0]
 800ad8c:	b293      	uxth	r3, r2
 800ad8e:	ebac 0303 	sub.w	r3, ip, r3
 800ad92:	0c12      	lsrs	r2, r2, #16
 800ad94:	fa13 f38e 	uxtah	r3, r3, lr
 800ad98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ad9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ada6:	45c1      	cmp	r9, r8
 800ada8:	f840 3b04 	str.w	r3, [r0], #4
 800adac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800adb0:	d2e8      	bcs.n	800ad84 <quorem+0xb0>
 800adb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adba:	b922      	cbnz	r2, 800adc6 <quorem+0xf2>
 800adbc:	3b04      	subs	r3, #4
 800adbe:	429d      	cmp	r5, r3
 800adc0:	461a      	mov	r2, r3
 800adc2:	d30a      	bcc.n	800adda <quorem+0x106>
 800adc4:	613c      	str	r4, [r7, #16]
 800adc6:	4630      	mov	r0, r6
 800adc8:	b003      	add	sp, #12
 800adca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adce:	6812      	ldr	r2, [r2, #0]
 800add0:	3b04      	subs	r3, #4
 800add2:	2a00      	cmp	r2, #0
 800add4:	d1cc      	bne.n	800ad70 <quorem+0x9c>
 800add6:	3c01      	subs	r4, #1
 800add8:	e7c7      	b.n	800ad6a <quorem+0x96>
 800adda:	6812      	ldr	r2, [r2, #0]
 800addc:	3b04      	subs	r3, #4
 800adde:	2a00      	cmp	r2, #0
 800ade0:	d1f0      	bne.n	800adc4 <quorem+0xf0>
 800ade2:	3c01      	subs	r4, #1
 800ade4:	e7eb      	b.n	800adbe <quorem+0xea>
 800ade6:	2000      	movs	r0, #0
 800ade8:	e7ee      	b.n	800adc8 <quorem+0xf4>
 800adea:	0000      	movs	r0, r0
 800adec:	0000      	movs	r0, r0
	...

0800adf0 <_dtoa_r>:
 800adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	ed2d 8b04 	vpush	{d8-d9}
 800adf8:	ec57 6b10 	vmov	r6, r7, d0
 800adfc:	b093      	sub	sp, #76	; 0x4c
 800adfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae04:	9106      	str	r1, [sp, #24]
 800ae06:	ee10 aa10 	vmov	sl, s0
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ae10:	46bb      	mov	fp, r7
 800ae12:	b975      	cbnz	r5, 800ae32 <_dtoa_r+0x42>
 800ae14:	2010      	movs	r0, #16
 800ae16:	f7ff f869 	bl	8009eec <malloc>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	6260      	str	r0, [r4, #36]	; 0x24
 800ae1e:	b920      	cbnz	r0, 800ae2a <_dtoa_r+0x3a>
 800ae20:	4ba7      	ldr	r3, [pc, #668]	; (800b0c0 <_dtoa_r+0x2d0>)
 800ae22:	21ea      	movs	r1, #234	; 0xea
 800ae24:	48a7      	ldr	r0, [pc, #668]	; (800b0c4 <_dtoa_r+0x2d4>)
 800ae26:	f001 feb5 	bl	800cb94 <__assert_func>
 800ae2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae2e:	6005      	str	r5, [r0, #0]
 800ae30:	60c5      	str	r5, [r0, #12]
 800ae32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae34:	6819      	ldr	r1, [r3, #0]
 800ae36:	b151      	cbz	r1, 800ae4e <_dtoa_r+0x5e>
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	604a      	str	r2, [r1, #4]
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	4093      	lsls	r3, r2
 800ae40:	608b      	str	r3, [r1, #8]
 800ae42:	4620      	mov	r0, r4
 800ae44:	f001 f840 	bl	800bec8 <_Bfree>
 800ae48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	601a      	str	r2, [r3, #0]
 800ae4e:	1e3b      	subs	r3, r7, #0
 800ae50:	bfaa      	itet	ge
 800ae52:	2300      	movge	r3, #0
 800ae54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ae58:	f8c8 3000 	strge.w	r3, [r8]
 800ae5c:	4b9a      	ldr	r3, [pc, #616]	; (800b0c8 <_dtoa_r+0x2d8>)
 800ae5e:	bfbc      	itt	lt
 800ae60:	2201      	movlt	r2, #1
 800ae62:	f8c8 2000 	strlt.w	r2, [r8]
 800ae66:	ea33 030b 	bics.w	r3, r3, fp
 800ae6a:	d11b      	bne.n	800aea4 <_dtoa_r+0xb4>
 800ae6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae6e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae78:	4333      	orrs	r3, r6
 800ae7a:	f000 8592 	beq.w	800b9a2 <_dtoa_r+0xbb2>
 800ae7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae80:	b963      	cbnz	r3, 800ae9c <_dtoa_r+0xac>
 800ae82:	4b92      	ldr	r3, [pc, #584]	; (800b0cc <_dtoa_r+0x2dc>)
 800ae84:	e022      	b.n	800aecc <_dtoa_r+0xdc>
 800ae86:	4b92      	ldr	r3, [pc, #584]	; (800b0d0 <_dtoa_r+0x2e0>)
 800ae88:	9301      	str	r3, [sp, #4]
 800ae8a:	3308      	adds	r3, #8
 800ae8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae8e:	6013      	str	r3, [r2, #0]
 800ae90:	9801      	ldr	r0, [sp, #4]
 800ae92:	b013      	add	sp, #76	; 0x4c
 800ae94:	ecbd 8b04 	vpop	{d8-d9}
 800ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9c:	4b8b      	ldr	r3, [pc, #556]	; (800b0cc <_dtoa_r+0x2dc>)
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	3303      	adds	r3, #3
 800aea2:	e7f3      	b.n	800ae8c <_dtoa_r+0x9c>
 800aea4:	2200      	movs	r2, #0
 800aea6:	2300      	movs	r3, #0
 800aea8:	4650      	mov	r0, sl
 800aeaa:	4659      	mov	r1, fp
 800aeac:	f7f5 fe24 	bl	8000af8 <__aeabi_dcmpeq>
 800aeb0:	ec4b ab19 	vmov	d9, sl, fp
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	b158      	cbz	r0, 800aed0 <_dtoa_r+0xe0>
 800aeb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeba:	2301      	movs	r3, #1
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f000 856b 	beq.w	800b99c <_dtoa_r+0xbac>
 800aec6:	4883      	ldr	r0, [pc, #524]	; (800b0d4 <_dtoa_r+0x2e4>)
 800aec8:	6018      	str	r0, [r3, #0]
 800aeca:	1e43      	subs	r3, r0, #1
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	e7df      	b.n	800ae90 <_dtoa_r+0xa0>
 800aed0:	ec4b ab10 	vmov	d0, sl, fp
 800aed4:	aa10      	add	r2, sp, #64	; 0x40
 800aed6:	a911      	add	r1, sp, #68	; 0x44
 800aed8:	4620      	mov	r0, r4
 800aeda:	f001 fadd 	bl	800c498 <__d2b>
 800aede:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aee2:	ee08 0a10 	vmov	s16, r0
 800aee6:	2d00      	cmp	r5, #0
 800aee8:	f000 8084 	beq.w	800aff4 <_dtoa_r+0x204>
 800aeec:	ee19 3a90 	vmov	r3, s19
 800aef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aef4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aef8:	4656      	mov	r6, sl
 800aefa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aefe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800af06:	4b74      	ldr	r3, [pc, #464]	; (800b0d8 <_dtoa_r+0x2e8>)
 800af08:	2200      	movs	r2, #0
 800af0a:	4630      	mov	r0, r6
 800af0c:	4639      	mov	r1, r7
 800af0e:	f7f5 f9d3 	bl	80002b8 <__aeabi_dsub>
 800af12:	a365      	add	r3, pc, #404	; (adr r3, 800b0a8 <_dtoa_r+0x2b8>)
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	f7f5 fb86 	bl	8000628 <__aeabi_dmul>
 800af1c:	a364      	add	r3, pc, #400	; (adr r3, 800b0b0 <_dtoa_r+0x2c0>)
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	f7f5 f9cb 	bl	80002bc <__adddf3>
 800af26:	4606      	mov	r6, r0
 800af28:	4628      	mov	r0, r5
 800af2a:	460f      	mov	r7, r1
 800af2c:	f7f5 fb12 	bl	8000554 <__aeabi_i2d>
 800af30:	a361      	add	r3, pc, #388	; (adr r3, 800b0b8 <_dtoa_r+0x2c8>)
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	f7f5 fb77 	bl	8000628 <__aeabi_dmul>
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	4630      	mov	r0, r6
 800af40:	4639      	mov	r1, r7
 800af42:	f7f5 f9bb 	bl	80002bc <__adddf3>
 800af46:	4606      	mov	r6, r0
 800af48:	460f      	mov	r7, r1
 800af4a:	f7f5 fe1d 	bl	8000b88 <__aeabi_d2iz>
 800af4e:	2200      	movs	r2, #0
 800af50:	9000      	str	r0, [sp, #0]
 800af52:	2300      	movs	r3, #0
 800af54:	4630      	mov	r0, r6
 800af56:	4639      	mov	r1, r7
 800af58:	f7f5 fdd8 	bl	8000b0c <__aeabi_dcmplt>
 800af5c:	b150      	cbz	r0, 800af74 <_dtoa_r+0x184>
 800af5e:	9800      	ldr	r0, [sp, #0]
 800af60:	f7f5 faf8 	bl	8000554 <__aeabi_i2d>
 800af64:	4632      	mov	r2, r6
 800af66:	463b      	mov	r3, r7
 800af68:	f7f5 fdc6 	bl	8000af8 <__aeabi_dcmpeq>
 800af6c:	b910      	cbnz	r0, 800af74 <_dtoa_r+0x184>
 800af6e:	9b00      	ldr	r3, [sp, #0]
 800af70:	3b01      	subs	r3, #1
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	9b00      	ldr	r3, [sp, #0]
 800af76:	2b16      	cmp	r3, #22
 800af78:	d85a      	bhi.n	800b030 <_dtoa_r+0x240>
 800af7a:	9a00      	ldr	r2, [sp, #0]
 800af7c:	4b57      	ldr	r3, [pc, #348]	; (800b0dc <_dtoa_r+0x2ec>)
 800af7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	ec51 0b19 	vmov	r0, r1, d9
 800af8a:	f7f5 fdbf 	bl	8000b0c <__aeabi_dcmplt>
 800af8e:	2800      	cmp	r0, #0
 800af90:	d050      	beq.n	800b034 <_dtoa_r+0x244>
 800af92:	9b00      	ldr	r3, [sp, #0]
 800af94:	3b01      	subs	r3, #1
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	2300      	movs	r3, #0
 800af9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af9e:	1b5d      	subs	r5, r3, r5
 800afa0:	1e6b      	subs	r3, r5, #1
 800afa2:	9305      	str	r3, [sp, #20]
 800afa4:	bf45      	ittet	mi
 800afa6:	f1c5 0301 	rsbmi	r3, r5, #1
 800afaa:	9304      	strmi	r3, [sp, #16]
 800afac:	2300      	movpl	r3, #0
 800afae:	2300      	movmi	r3, #0
 800afb0:	bf4c      	ite	mi
 800afb2:	9305      	strmi	r3, [sp, #20]
 800afb4:	9304      	strpl	r3, [sp, #16]
 800afb6:	9b00      	ldr	r3, [sp, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	db3d      	blt.n	800b038 <_dtoa_r+0x248>
 800afbc:	9b05      	ldr	r3, [sp, #20]
 800afbe:	9a00      	ldr	r2, [sp, #0]
 800afc0:	920a      	str	r2, [sp, #40]	; 0x28
 800afc2:	4413      	add	r3, r2
 800afc4:	9305      	str	r3, [sp, #20]
 800afc6:	2300      	movs	r3, #0
 800afc8:	9307      	str	r3, [sp, #28]
 800afca:	9b06      	ldr	r3, [sp, #24]
 800afcc:	2b09      	cmp	r3, #9
 800afce:	f200 8089 	bhi.w	800b0e4 <_dtoa_r+0x2f4>
 800afd2:	2b05      	cmp	r3, #5
 800afd4:	bfc4      	itt	gt
 800afd6:	3b04      	subgt	r3, #4
 800afd8:	9306      	strgt	r3, [sp, #24]
 800afda:	9b06      	ldr	r3, [sp, #24]
 800afdc:	f1a3 0302 	sub.w	r3, r3, #2
 800afe0:	bfcc      	ite	gt
 800afe2:	2500      	movgt	r5, #0
 800afe4:	2501      	movle	r5, #1
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	f200 8087 	bhi.w	800b0fa <_dtoa_r+0x30a>
 800afec:	e8df f003 	tbb	[pc, r3]
 800aff0:	59383a2d 	.word	0x59383a2d
 800aff4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aff8:	441d      	add	r5, r3
 800affa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800affe:	2b20      	cmp	r3, #32
 800b000:	bfc1      	itttt	gt
 800b002:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b006:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b00a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b00e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b012:	bfda      	itte	le
 800b014:	f1c3 0320 	rsble	r3, r3, #32
 800b018:	fa06 f003 	lslle.w	r0, r6, r3
 800b01c:	4318      	orrgt	r0, r3
 800b01e:	f7f5 fa89 	bl	8000534 <__aeabi_ui2d>
 800b022:	2301      	movs	r3, #1
 800b024:	4606      	mov	r6, r0
 800b026:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b02a:	3d01      	subs	r5, #1
 800b02c:	930e      	str	r3, [sp, #56]	; 0x38
 800b02e:	e76a      	b.n	800af06 <_dtoa_r+0x116>
 800b030:	2301      	movs	r3, #1
 800b032:	e7b2      	b.n	800af9a <_dtoa_r+0x1aa>
 800b034:	900b      	str	r0, [sp, #44]	; 0x2c
 800b036:	e7b1      	b.n	800af9c <_dtoa_r+0x1ac>
 800b038:	9b04      	ldr	r3, [sp, #16]
 800b03a:	9a00      	ldr	r2, [sp, #0]
 800b03c:	1a9b      	subs	r3, r3, r2
 800b03e:	9304      	str	r3, [sp, #16]
 800b040:	4253      	negs	r3, r2
 800b042:	9307      	str	r3, [sp, #28]
 800b044:	2300      	movs	r3, #0
 800b046:	930a      	str	r3, [sp, #40]	; 0x28
 800b048:	e7bf      	b.n	800afca <_dtoa_r+0x1da>
 800b04a:	2300      	movs	r3, #0
 800b04c:	9308      	str	r3, [sp, #32]
 800b04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b050:	2b00      	cmp	r3, #0
 800b052:	dc55      	bgt.n	800b100 <_dtoa_r+0x310>
 800b054:	2301      	movs	r3, #1
 800b056:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b05a:	461a      	mov	r2, r3
 800b05c:	9209      	str	r2, [sp, #36]	; 0x24
 800b05e:	e00c      	b.n	800b07a <_dtoa_r+0x28a>
 800b060:	2301      	movs	r3, #1
 800b062:	e7f3      	b.n	800b04c <_dtoa_r+0x25c>
 800b064:	2300      	movs	r3, #0
 800b066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b068:	9308      	str	r3, [sp, #32]
 800b06a:	9b00      	ldr	r3, [sp, #0]
 800b06c:	4413      	add	r3, r2
 800b06e:	9302      	str	r3, [sp, #8]
 800b070:	3301      	adds	r3, #1
 800b072:	2b01      	cmp	r3, #1
 800b074:	9303      	str	r3, [sp, #12]
 800b076:	bfb8      	it	lt
 800b078:	2301      	movlt	r3, #1
 800b07a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b07c:	2200      	movs	r2, #0
 800b07e:	6042      	str	r2, [r0, #4]
 800b080:	2204      	movs	r2, #4
 800b082:	f102 0614 	add.w	r6, r2, #20
 800b086:	429e      	cmp	r6, r3
 800b088:	6841      	ldr	r1, [r0, #4]
 800b08a:	d93d      	bls.n	800b108 <_dtoa_r+0x318>
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 fedb 	bl	800be48 <_Balloc>
 800b092:	9001      	str	r0, [sp, #4]
 800b094:	2800      	cmp	r0, #0
 800b096:	d13b      	bne.n	800b110 <_dtoa_r+0x320>
 800b098:	4b11      	ldr	r3, [pc, #68]	; (800b0e0 <_dtoa_r+0x2f0>)
 800b09a:	4602      	mov	r2, r0
 800b09c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b0a0:	e6c0      	b.n	800ae24 <_dtoa_r+0x34>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e7df      	b.n	800b066 <_dtoa_r+0x276>
 800b0a6:	bf00      	nop
 800b0a8:	636f4361 	.word	0x636f4361
 800b0ac:	3fd287a7 	.word	0x3fd287a7
 800b0b0:	8b60c8b3 	.word	0x8b60c8b3
 800b0b4:	3fc68a28 	.word	0x3fc68a28
 800b0b8:	509f79fb 	.word	0x509f79fb
 800b0bc:	3fd34413 	.word	0x3fd34413
 800b0c0:	0800dc59 	.word	0x0800dc59
 800b0c4:	0800dc70 	.word	0x0800dc70
 800b0c8:	7ff00000 	.word	0x7ff00000
 800b0cc:	0800dc55 	.word	0x0800dc55
 800b0d0:	0800dc4c 	.word	0x0800dc4c
 800b0d4:	0800dc29 	.word	0x0800dc29
 800b0d8:	3ff80000 	.word	0x3ff80000
 800b0dc:	0800ddc0 	.word	0x0800ddc0
 800b0e0:	0800dccb 	.word	0x0800dccb
 800b0e4:	2501      	movs	r5, #1
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	9306      	str	r3, [sp, #24]
 800b0ea:	9508      	str	r5, [sp, #32]
 800b0ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	2312      	movs	r3, #18
 800b0f8:	e7b0      	b.n	800b05c <_dtoa_r+0x26c>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	9308      	str	r3, [sp, #32]
 800b0fe:	e7f5      	b.n	800b0ec <_dtoa_r+0x2fc>
 800b100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b102:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b106:	e7b8      	b.n	800b07a <_dtoa_r+0x28a>
 800b108:	3101      	adds	r1, #1
 800b10a:	6041      	str	r1, [r0, #4]
 800b10c:	0052      	lsls	r2, r2, #1
 800b10e:	e7b8      	b.n	800b082 <_dtoa_r+0x292>
 800b110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b112:	9a01      	ldr	r2, [sp, #4]
 800b114:	601a      	str	r2, [r3, #0]
 800b116:	9b03      	ldr	r3, [sp, #12]
 800b118:	2b0e      	cmp	r3, #14
 800b11a:	f200 809d 	bhi.w	800b258 <_dtoa_r+0x468>
 800b11e:	2d00      	cmp	r5, #0
 800b120:	f000 809a 	beq.w	800b258 <_dtoa_r+0x468>
 800b124:	9b00      	ldr	r3, [sp, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	dd32      	ble.n	800b190 <_dtoa_r+0x3a0>
 800b12a:	4ab7      	ldr	r2, [pc, #732]	; (800b408 <_dtoa_r+0x618>)
 800b12c:	f003 030f 	and.w	r3, r3, #15
 800b130:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b134:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b138:	9b00      	ldr	r3, [sp, #0]
 800b13a:	05d8      	lsls	r0, r3, #23
 800b13c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b140:	d516      	bpl.n	800b170 <_dtoa_r+0x380>
 800b142:	4bb2      	ldr	r3, [pc, #712]	; (800b40c <_dtoa_r+0x61c>)
 800b144:	ec51 0b19 	vmov	r0, r1, d9
 800b148:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b14c:	f7f5 fb96 	bl	800087c <__aeabi_ddiv>
 800b150:	f007 070f 	and.w	r7, r7, #15
 800b154:	4682      	mov	sl, r0
 800b156:	468b      	mov	fp, r1
 800b158:	2503      	movs	r5, #3
 800b15a:	4eac      	ldr	r6, [pc, #688]	; (800b40c <_dtoa_r+0x61c>)
 800b15c:	b957      	cbnz	r7, 800b174 <_dtoa_r+0x384>
 800b15e:	4642      	mov	r2, r8
 800b160:	464b      	mov	r3, r9
 800b162:	4650      	mov	r0, sl
 800b164:	4659      	mov	r1, fp
 800b166:	f7f5 fb89 	bl	800087c <__aeabi_ddiv>
 800b16a:	4682      	mov	sl, r0
 800b16c:	468b      	mov	fp, r1
 800b16e:	e028      	b.n	800b1c2 <_dtoa_r+0x3d2>
 800b170:	2502      	movs	r5, #2
 800b172:	e7f2      	b.n	800b15a <_dtoa_r+0x36a>
 800b174:	07f9      	lsls	r1, r7, #31
 800b176:	d508      	bpl.n	800b18a <_dtoa_r+0x39a>
 800b178:	4640      	mov	r0, r8
 800b17a:	4649      	mov	r1, r9
 800b17c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b180:	f7f5 fa52 	bl	8000628 <__aeabi_dmul>
 800b184:	3501      	adds	r5, #1
 800b186:	4680      	mov	r8, r0
 800b188:	4689      	mov	r9, r1
 800b18a:	107f      	asrs	r7, r7, #1
 800b18c:	3608      	adds	r6, #8
 800b18e:	e7e5      	b.n	800b15c <_dtoa_r+0x36c>
 800b190:	f000 809b 	beq.w	800b2ca <_dtoa_r+0x4da>
 800b194:	9b00      	ldr	r3, [sp, #0]
 800b196:	4f9d      	ldr	r7, [pc, #628]	; (800b40c <_dtoa_r+0x61c>)
 800b198:	425e      	negs	r6, r3
 800b19a:	4b9b      	ldr	r3, [pc, #620]	; (800b408 <_dtoa_r+0x618>)
 800b19c:	f006 020f 	and.w	r2, r6, #15
 800b1a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a8:	ec51 0b19 	vmov	r0, r1, d9
 800b1ac:	f7f5 fa3c 	bl	8000628 <__aeabi_dmul>
 800b1b0:	1136      	asrs	r6, r6, #4
 800b1b2:	4682      	mov	sl, r0
 800b1b4:	468b      	mov	fp, r1
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	2502      	movs	r5, #2
 800b1ba:	2e00      	cmp	r6, #0
 800b1bc:	d17a      	bne.n	800b2b4 <_dtoa_r+0x4c4>
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d1d3      	bne.n	800b16a <_dtoa_r+0x37a>
 800b1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 8082 	beq.w	800b2ce <_dtoa_r+0x4de>
 800b1ca:	4b91      	ldr	r3, [pc, #580]	; (800b410 <_dtoa_r+0x620>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	4659      	mov	r1, fp
 800b1d2:	f7f5 fc9b 	bl	8000b0c <__aeabi_dcmplt>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d079      	beq.n	800b2ce <_dtoa_r+0x4de>
 800b1da:	9b03      	ldr	r3, [sp, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d076      	beq.n	800b2ce <_dtoa_r+0x4de>
 800b1e0:	9b02      	ldr	r3, [sp, #8]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	dd36      	ble.n	800b254 <_dtoa_r+0x464>
 800b1e6:	9b00      	ldr	r3, [sp, #0]
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	4659      	mov	r1, fp
 800b1ec:	1e5f      	subs	r7, r3, #1
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4b88      	ldr	r3, [pc, #544]	; (800b414 <_dtoa_r+0x624>)
 800b1f2:	f7f5 fa19 	bl	8000628 <__aeabi_dmul>
 800b1f6:	9e02      	ldr	r6, [sp, #8]
 800b1f8:	4682      	mov	sl, r0
 800b1fa:	468b      	mov	fp, r1
 800b1fc:	3501      	adds	r5, #1
 800b1fe:	4628      	mov	r0, r5
 800b200:	f7f5 f9a8 	bl	8000554 <__aeabi_i2d>
 800b204:	4652      	mov	r2, sl
 800b206:	465b      	mov	r3, fp
 800b208:	f7f5 fa0e 	bl	8000628 <__aeabi_dmul>
 800b20c:	4b82      	ldr	r3, [pc, #520]	; (800b418 <_dtoa_r+0x628>)
 800b20e:	2200      	movs	r2, #0
 800b210:	f7f5 f854 	bl	80002bc <__adddf3>
 800b214:	46d0      	mov	r8, sl
 800b216:	46d9      	mov	r9, fp
 800b218:	4682      	mov	sl, r0
 800b21a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b21e:	2e00      	cmp	r6, #0
 800b220:	d158      	bne.n	800b2d4 <_dtoa_r+0x4e4>
 800b222:	4b7e      	ldr	r3, [pc, #504]	; (800b41c <_dtoa_r+0x62c>)
 800b224:	2200      	movs	r2, #0
 800b226:	4640      	mov	r0, r8
 800b228:	4649      	mov	r1, r9
 800b22a:	f7f5 f845 	bl	80002b8 <__aeabi_dsub>
 800b22e:	4652      	mov	r2, sl
 800b230:	465b      	mov	r3, fp
 800b232:	4680      	mov	r8, r0
 800b234:	4689      	mov	r9, r1
 800b236:	f7f5 fc87 	bl	8000b48 <__aeabi_dcmpgt>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	f040 8295 	bne.w	800b76a <_dtoa_r+0x97a>
 800b240:	4652      	mov	r2, sl
 800b242:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b246:	4640      	mov	r0, r8
 800b248:	4649      	mov	r1, r9
 800b24a:	f7f5 fc5f 	bl	8000b0c <__aeabi_dcmplt>
 800b24e:	2800      	cmp	r0, #0
 800b250:	f040 8289 	bne.w	800b766 <_dtoa_r+0x976>
 800b254:	ec5b ab19 	vmov	sl, fp, d9
 800b258:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f2c0 8148 	blt.w	800b4f0 <_dtoa_r+0x700>
 800b260:	9a00      	ldr	r2, [sp, #0]
 800b262:	2a0e      	cmp	r2, #14
 800b264:	f300 8144 	bgt.w	800b4f0 <_dtoa_r+0x700>
 800b268:	4b67      	ldr	r3, [pc, #412]	; (800b408 <_dtoa_r+0x618>)
 800b26a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b26e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b274:	2b00      	cmp	r3, #0
 800b276:	f280 80d5 	bge.w	800b424 <_dtoa_r+0x634>
 800b27a:	9b03      	ldr	r3, [sp, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f300 80d1 	bgt.w	800b424 <_dtoa_r+0x634>
 800b282:	f040 826f 	bne.w	800b764 <_dtoa_r+0x974>
 800b286:	4b65      	ldr	r3, [pc, #404]	; (800b41c <_dtoa_r+0x62c>)
 800b288:	2200      	movs	r2, #0
 800b28a:	4640      	mov	r0, r8
 800b28c:	4649      	mov	r1, r9
 800b28e:	f7f5 f9cb 	bl	8000628 <__aeabi_dmul>
 800b292:	4652      	mov	r2, sl
 800b294:	465b      	mov	r3, fp
 800b296:	f7f5 fc4d 	bl	8000b34 <__aeabi_dcmpge>
 800b29a:	9e03      	ldr	r6, [sp, #12]
 800b29c:	4637      	mov	r7, r6
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f040 8245 	bne.w	800b72e <_dtoa_r+0x93e>
 800b2a4:	9d01      	ldr	r5, [sp, #4]
 800b2a6:	2331      	movs	r3, #49	; 0x31
 800b2a8:	f805 3b01 	strb.w	r3, [r5], #1
 800b2ac:	9b00      	ldr	r3, [sp, #0]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	e240      	b.n	800b736 <_dtoa_r+0x946>
 800b2b4:	07f2      	lsls	r2, r6, #31
 800b2b6:	d505      	bpl.n	800b2c4 <_dtoa_r+0x4d4>
 800b2b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2bc:	f7f5 f9b4 	bl	8000628 <__aeabi_dmul>
 800b2c0:	3501      	adds	r5, #1
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	1076      	asrs	r6, r6, #1
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	e777      	b.n	800b1ba <_dtoa_r+0x3ca>
 800b2ca:	2502      	movs	r5, #2
 800b2cc:	e779      	b.n	800b1c2 <_dtoa_r+0x3d2>
 800b2ce:	9f00      	ldr	r7, [sp, #0]
 800b2d0:	9e03      	ldr	r6, [sp, #12]
 800b2d2:	e794      	b.n	800b1fe <_dtoa_r+0x40e>
 800b2d4:	9901      	ldr	r1, [sp, #4]
 800b2d6:	4b4c      	ldr	r3, [pc, #304]	; (800b408 <_dtoa_r+0x618>)
 800b2d8:	4431      	add	r1, r6
 800b2da:	910d      	str	r1, [sp, #52]	; 0x34
 800b2dc:	9908      	ldr	r1, [sp, #32]
 800b2de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b2e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	d043      	beq.n	800b372 <_dtoa_r+0x582>
 800b2ea:	494d      	ldr	r1, [pc, #308]	; (800b420 <_dtoa_r+0x630>)
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	f7f5 fac5 	bl	800087c <__aeabi_ddiv>
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	465b      	mov	r3, fp
 800b2f6:	f7f4 ffdf 	bl	80002b8 <__aeabi_dsub>
 800b2fa:	9d01      	ldr	r5, [sp, #4]
 800b2fc:	4682      	mov	sl, r0
 800b2fe:	468b      	mov	fp, r1
 800b300:	4649      	mov	r1, r9
 800b302:	4640      	mov	r0, r8
 800b304:	f7f5 fc40 	bl	8000b88 <__aeabi_d2iz>
 800b308:	4606      	mov	r6, r0
 800b30a:	f7f5 f923 	bl	8000554 <__aeabi_i2d>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4640      	mov	r0, r8
 800b314:	4649      	mov	r1, r9
 800b316:	f7f4 ffcf 	bl	80002b8 <__aeabi_dsub>
 800b31a:	3630      	adds	r6, #48	; 0x30
 800b31c:	f805 6b01 	strb.w	r6, [r5], #1
 800b320:	4652      	mov	r2, sl
 800b322:	465b      	mov	r3, fp
 800b324:	4680      	mov	r8, r0
 800b326:	4689      	mov	r9, r1
 800b328:	f7f5 fbf0 	bl	8000b0c <__aeabi_dcmplt>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d163      	bne.n	800b3f8 <_dtoa_r+0x608>
 800b330:	4642      	mov	r2, r8
 800b332:	464b      	mov	r3, r9
 800b334:	4936      	ldr	r1, [pc, #216]	; (800b410 <_dtoa_r+0x620>)
 800b336:	2000      	movs	r0, #0
 800b338:	f7f4 ffbe 	bl	80002b8 <__aeabi_dsub>
 800b33c:	4652      	mov	r2, sl
 800b33e:	465b      	mov	r3, fp
 800b340:	f7f5 fbe4 	bl	8000b0c <__aeabi_dcmplt>
 800b344:	2800      	cmp	r0, #0
 800b346:	f040 80b5 	bne.w	800b4b4 <_dtoa_r+0x6c4>
 800b34a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b34c:	429d      	cmp	r5, r3
 800b34e:	d081      	beq.n	800b254 <_dtoa_r+0x464>
 800b350:	4b30      	ldr	r3, [pc, #192]	; (800b414 <_dtoa_r+0x624>)
 800b352:	2200      	movs	r2, #0
 800b354:	4650      	mov	r0, sl
 800b356:	4659      	mov	r1, fp
 800b358:	f7f5 f966 	bl	8000628 <__aeabi_dmul>
 800b35c:	4b2d      	ldr	r3, [pc, #180]	; (800b414 <_dtoa_r+0x624>)
 800b35e:	4682      	mov	sl, r0
 800b360:	468b      	mov	fp, r1
 800b362:	4640      	mov	r0, r8
 800b364:	4649      	mov	r1, r9
 800b366:	2200      	movs	r2, #0
 800b368:	f7f5 f95e 	bl	8000628 <__aeabi_dmul>
 800b36c:	4680      	mov	r8, r0
 800b36e:	4689      	mov	r9, r1
 800b370:	e7c6      	b.n	800b300 <_dtoa_r+0x510>
 800b372:	4650      	mov	r0, sl
 800b374:	4659      	mov	r1, fp
 800b376:	f7f5 f957 	bl	8000628 <__aeabi_dmul>
 800b37a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b37c:	9d01      	ldr	r5, [sp, #4]
 800b37e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b380:	4682      	mov	sl, r0
 800b382:	468b      	mov	fp, r1
 800b384:	4649      	mov	r1, r9
 800b386:	4640      	mov	r0, r8
 800b388:	f7f5 fbfe 	bl	8000b88 <__aeabi_d2iz>
 800b38c:	4606      	mov	r6, r0
 800b38e:	f7f5 f8e1 	bl	8000554 <__aeabi_i2d>
 800b392:	3630      	adds	r6, #48	; 0x30
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	4640      	mov	r0, r8
 800b39a:	4649      	mov	r1, r9
 800b39c:	f7f4 ff8c 	bl	80002b8 <__aeabi_dsub>
 800b3a0:	f805 6b01 	strb.w	r6, [r5], #1
 800b3a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3a6:	429d      	cmp	r5, r3
 800b3a8:	4680      	mov	r8, r0
 800b3aa:	4689      	mov	r9, r1
 800b3ac:	f04f 0200 	mov.w	r2, #0
 800b3b0:	d124      	bne.n	800b3fc <_dtoa_r+0x60c>
 800b3b2:	4b1b      	ldr	r3, [pc, #108]	; (800b420 <_dtoa_r+0x630>)
 800b3b4:	4650      	mov	r0, sl
 800b3b6:	4659      	mov	r1, fp
 800b3b8:	f7f4 ff80 	bl	80002bc <__adddf3>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4640      	mov	r0, r8
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	f7f5 fbc0 	bl	8000b48 <__aeabi_dcmpgt>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d173      	bne.n	800b4b4 <_dtoa_r+0x6c4>
 800b3cc:	4652      	mov	r2, sl
 800b3ce:	465b      	mov	r3, fp
 800b3d0:	4913      	ldr	r1, [pc, #76]	; (800b420 <_dtoa_r+0x630>)
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	f7f4 ff70 	bl	80002b8 <__aeabi_dsub>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4640      	mov	r0, r8
 800b3de:	4649      	mov	r1, r9
 800b3e0:	f7f5 fb94 	bl	8000b0c <__aeabi_dcmplt>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	f43f af35 	beq.w	800b254 <_dtoa_r+0x464>
 800b3ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b3ec:	1e6b      	subs	r3, r5, #1
 800b3ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3f4:	2b30      	cmp	r3, #48	; 0x30
 800b3f6:	d0f8      	beq.n	800b3ea <_dtoa_r+0x5fa>
 800b3f8:	9700      	str	r7, [sp, #0]
 800b3fa:	e049      	b.n	800b490 <_dtoa_r+0x6a0>
 800b3fc:	4b05      	ldr	r3, [pc, #20]	; (800b414 <_dtoa_r+0x624>)
 800b3fe:	f7f5 f913 	bl	8000628 <__aeabi_dmul>
 800b402:	4680      	mov	r8, r0
 800b404:	4689      	mov	r9, r1
 800b406:	e7bd      	b.n	800b384 <_dtoa_r+0x594>
 800b408:	0800ddc0 	.word	0x0800ddc0
 800b40c:	0800dd98 	.word	0x0800dd98
 800b410:	3ff00000 	.word	0x3ff00000
 800b414:	40240000 	.word	0x40240000
 800b418:	401c0000 	.word	0x401c0000
 800b41c:	40140000 	.word	0x40140000
 800b420:	3fe00000 	.word	0x3fe00000
 800b424:	9d01      	ldr	r5, [sp, #4]
 800b426:	4656      	mov	r6, sl
 800b428:	465f      	mov	r7, fp
 800b42a:	4642      	mov	r2, r8
 800b42c:	464b      	mov	r3, r9
 800b42e:	4630      	mov	r0, r6
 800b430:	4639      	mov	r1, r7
 800b432:	f7f5 fa23 	bl	800087c <__aeabi_ddiv>
 800b436:	f7f5 fba7 	bl	8000b88 <__aeabi_d2iz>
 800b43a:	4682      	mov	sl, r0
 800b43c:	f7f5 f88a 	bl	8000554 <__aeabi_i2d>
 800b440:	4642      	mov	r2, r8
 800b442:	464b      	mov	r3, r9
 800b444:	f7f5 f8f0 	bl	8000628 <__aeabi_dmul>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4630      	mov	r0, r6
 800b44e:	4639      	mov	r1, r7
 800b450:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b454:	f7f4 ff30 	bl	80002b8 <__aeabi_dsub>
 800b458:	f805 6b01 	strb.w	r6, [r5], #1
 800b45c:	9e01      	ldr	r6, [sp, #4]
 800b45e:	9f03      	ldr	r7, [sp, #12]
 800b460:	1bae      	subs	r6, r5, r6
 800b462:	42b7      	cmp	r7, r6
 800b464:	4602      	mov	r2, r0
 800b466:	460b      	mov	r3, r1
 800b468:	d135      	bne.n	800b4d6 <_dtoa_r+0x6e6>
 800b46a:	f7f4 ff27 	bl	80002bc <__adddf3>
 800b46e:	4642      	mov	r2, r8
 800b470:	464b      	mov	r3, r9
 800b472:	4606      	mov	r6, r0
 800b474:	460f      	mov	r7, r1
 800b476:	f7f5 fb67 	bl	8000b48 <__aeabi_dcmpgt>
 800b47a:	b9d0      	cbnz	r0, 800b4b2 <_dtoa_r+0x6c2>
 800b47c:	4642      	mov	r2, r8
 800b47e:	464b      	mov	r3, r9
 800b480:	4630      	mov	r0, r6
 800b482:	4639      	mov	r1, r7
 800b484:	f7f5 fb38 	bl	8000af8 <__aeabi_dcmpeq>
 800b488:	b110      	cbz	r0, 800b490 <_dtoa_r+0x6a0>
 800b48a:	f01a 0f01 	tst.w	sl, #1
 800b48e:	d110      	bne.n	800b4b2 <_dtoa_r+0x6c2>
 800b490:	4620      	mov	r0, r4
 800b492:	ee18 1a10 	vmov	r1, s16
 800b496:	f000 fd17 	bl	800bec8 <_Bfree>
 800b49a:	2300      	movs	r3, #0
 800b49c:	9800      	ldr	r0, [sp, #0]
 800b49e:	702b      	strb	r3, [r5, #0]
 800b4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	6018      	str	r0, [r3, #0]
 800b4a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f43f acf1 	beq.w	800ae90 <_dtoa_r+0xa0>
 800b4ae:	601d      	str	r5, [r3, #0]
 800b4b0:	e4ee      	b.n	800ae90 <_dtoa_r+0xa0>
 800b4b2:	9f00      	ldr	r7, [sp, #0]
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	461d      	mov	r5, r3
 800b4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4bc:	2a39      	cmp	r2, #57	; 0x39
 800b4be:	d106      	bne.n	800b4ce <_dtoa_r+0x6de>
 800b4c0:	9a01      	ldr	r2, [sp, #4]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d1f7      	bne.n	800b4b6 <_dtoa_r+0x6c6>
 800b4c6:	9901      	ldr	r1, [sp, #4]
 800b4c8:	2230      	movs	r2, #48	; 0x30
 800b4ca:	3701      	adds	r7, #1
 800b4cc:	700a      	strb	r2, [r1, #0]
 800b4ce:	781a      	ldrb	r2, [r3, #0]
 800b4d0:	3201      	adds	r2, #1
 800b4d2:	701a      	strb	r2, [r3, #0]
 800b4d4:	e790      	b.n	800b3f8 <_dtoa_r+0x608>
 800b4d6:	4ba6      	ldr	r3, [pc, #664]	; (800b770 <_dtoa_r+0x980>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f7f5 f8a5 	bl	8000628 <__aeabi_dmul>
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	460f      	mov	r7, r1
 800b4e6:	f7f5 fb07 	bl	8000af8 <__aeabi_dcmpeq>
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	d09d      	beq.n	800b42a <_dtoa_r+0x63a>
 800b4ee:	e7cf      	b.n	800b490 <_dtoa_r+0x6a0>
 800b4f0:	9a08      	ldr	r2, [sp, #32]
 800b4f2:	2a00      	cmp	r2, #0
 800b4f4:	f000 80d7 	beq.w	800b6a6 <_dtoa_r+0x8b6>
 800b4f8:	9a06      	ldr	r2, [sp, #24]
 800b4fa:	2a01      	cmp	r2, #1
 800b4fc:	f300 80ba 	bgt.w	800b674 <_dtoa_r+0x884>
 800b500:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b502:	2a00      	cmp	r2, #0
 800b504:	f000 80b2 	beq.w	800b66c <_dtoa_r+0x87c>
 800b508:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b50c:	9e07      	ldr	r6, [sp, #28]
 800b50e:	9d04      	ldr	r5, [sp, #16]
 800b510:	9a04      	ldr	r2, [sp, #16]
 800b512:	441a      	add	r2, r3
 800b514:	9204      	str	r2, [sp, #16]
 800b516:	9a05      	ldr	r2, [sp, #20]
 800b518:	2101      	movs	r1, #1
 800b51a:	441a      	add	r2, r3
 800b51c:	4620      	mov	r0, r4
 800b51e:	9205      	str	r2, [sp, #20]
 800b520:	f000 fd8a 	bl	800c038 <__i2b>
 800b524:	4607      	mov	r7, r0
 800b526:	2d00      	cmp	r5, #0
 800b528:	dd0c      	ble.n	800b544 <_dtoa_r+0x754>
 800b52a:	9b05      	ldr	r3, [sp, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	dd09      	ble.n	800b544 <_dtoa_r+0x754>
 800b530:	42ab      	cmp	r3, r5
 800b532:	9a04      	ldr	r2, [sp, #16]
 800b534:	bfa8      	it	ge
 800b536:	462b      	movge	r3, r5
 800b538:	1ad2      	subs	r2, r2, r3
 800b53a:	9204      	str	r2, [sp, #16]
 800b53c:	9a05      	ldr	r2, [sp, #20]
 800b53e:	1aed      	subs	r5, r5, r3
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	9305      	str	r3, [sp, #20]
 800b544:	9b07      	ldr	r3, [sp, #28]
 800b546:	b31b      	cbz	r3, 800b590 <_dtoa_r+0x7a0>
 800b548:	9b08      	ldr	r3, [sp, #32]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 80af 	beq.w	800b6ae <_dtoa_r+0x8be>
 800b550:	2e00      	cmp	r6, #0
 800b552:	dd13      	ble.n	800b57c <_dtoa_r+0x78c>
 800b554:	4639      	mov	r1, r7
 800b556:	4632      	mov	r2, r6
 800b558:	4620      	mov	r0, r4
 800b55a:	f000 fe2d 	bl	800c1b8 <__pow5mult>
 800b55e:	ee18 2a10 	vmov	r2, s16
 800b562:	4601      	mov	r1, r0
 800b564:	4607      	mov	r7, r0
 800b566:	4620      	mov	r0, r4
 800b568:	f000 fd7c 	bl	800c064 <__multiply>
 800b56c:	ee18 1a10 	vmov	r1, s16
 800b570:	4680      	mov	r8, r0
 800b572:	4620      	mov	r0, r4
 800b574:	f000 fca8 	bl	800bec8 <_Bfree>
 800b578:	ee08 8a10 	vmov	s16, r8
 800b57c:	9b07      	ldr	r3, [sp, #28]
 800b57e:	1b9a      	subs	r2, r3, r6
 800b580:	d006      	beq.n	800b590 <_dtoa_r+0x7a0>
 800b582:	ee18 1a10 	vmov	r1, s16
 800b586:	4620      	mov	r0, r4
 800b588:	f000 fe16 	bl	800c1b8 <__pow5mult>
 800b58c:	ee08 0a10 	vmov	s16, r0
 800b590:	2101      	movs	r1, #1
 800b592:	4620      	mov	r0, r4
 800b594:	f000 fd50 	bl	800c038 <__i2b>
 800b598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	4606      	mov	r6, r0
 800b59e:	f340 8088 	ble.w	800b6b2 <_dtoa_r+0x8c2>
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	4601      	mov	r1, r0
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f000 fe06 	bl	800c1b8 <__pow5mult>
 800b5ac:	9b06      	ldr	r3, [sp, #24]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	f340 8081 	ble.w	800b6b8 <_dtoa_r+0x8c8>
 800b5b6:	f04f 0800 	mov.w	r8, #0
 800b5ba:	6933      	ldr	r3, [r6, #16]
 800b5bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5c0:	6918      	ldr	r0, [r3, #16]
 800b5c2:	f000 fce9 	bl	800bf98 <__hi0bits>
 800b5c6:	f1c0 0020 	rsb	r0, r0, #32
 800b5ca:	9b05      	ldr	r3, [sp, #20]
 800b5cc:	4418      	add	r0, r3
 800b5ce:	f010 001f 	ands.w	r0, r0, #31
 800b5d2:	f000 8092 	beq.w	800b6fa <_dtoa_r+0x90a>
 800b5d6:	f1c0 0320 	rsb	r3, r0, #32
 800b5da:	2b04      	cmp	r3, #4
 800b5dc:	f340 808a 	ble.w	800b6f4 <_dtoa_r+0x904>
 800b5e0:	f1c0 001c 	rsb	r0, r0, #28
 800b5e4:	9b04      	ldr	r3, [sp, #16]
 800b5e6:	4403      	add	r3, r0
 800b5e8:	9304      	str	r3, [sp, #16]
 800b5ea:	9b05      	ldr	r3, [sp, #20]
 800b5ec:	4403      	add	r3, r0
 800b5ee:	4405      	add	r5, r0
 800b5f0:	9305      	str	r3, [sp, #20]
 800b5f2:	9b04      	ldr	r3, [sp, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	dd07      	ble.n	800b608 <_dtoa_r+0x818>
 800b5f8:	ee18 1a10 	vmov	r1, s16
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 fe34 	bl	800c26c <__lshift>
 800b604:	ee08 0a10 	vmov	s16, r0
 800b608:	9b05      	ldr	r3, [sp, #20]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	dd05      	ble.n	800b61a <_dtoa_r+0x82a>
 800b60e:	4631      	mov	r1, r6
 800b610:	461a      	mov	r2, r3
 800b612:	4620      	mov	r0, r4
 800b614:	f000 fe2a 	bl	800c26c <__lshift>
 800b618:	4606      	mov	r6, r0
 800b61a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d06e      	beq.n	800b6fe <_dtoa_r+0x90e>
 800b620:	ee18 0a10 	vmov	r0, s16
 800b624:	4631      	mov	r1, r6
 800b626:	f000 fe91 	bl	800c34c <__mcmp>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	da67      	bge.n	800b6fe <_dtoa_r+0x90e>
 800b62e:	9b00      	ldr	r3, [sp, #0]
 800b630:	3b01      	subs	r3, #1
 800b632:	ee18 1a10 	vmov	r1, s16
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	220a      	movs	r2, #10
 800b63a:	2300      	movs	r3, #0
 800b63c:	4620      	mov	r0, r4
 800b63e:	f000 fc65 	bl	800bf0c <__multadd>
 800b642:	9b08      	ldr	r3, [sp, #32]
 800b644:	ee08 0a10 	vmov	s16, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f000 81b1 	beq.w	800b9b0 <_dtoa_r+0xbc0>
 800b64e:	2300      	movs	r3, #0
 800b650:	4639      	mov	r1, r7
 800b652:	220a      	movs	r2, #10
 800b654:	4620      	mov	r0, r4
 800b656:	f000 fc59 	bl	800bf0c <__multadd>
 800b65a:	9b02      	ldr	r3, [sp, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	4607      	mov	r7, r0
 800b660:	f300 808e 	bgt.w	800b780 <_dtoa_r+0x990>
 800b664:	9b06      	ldr	r3, [sp, #24]
 800b666:	2b02      	cmp	r3, #2
 800b668:	dc51      	bgt.n	800b70e <_dtoa_r+0x91e>
 800b66a:	e089      	b.n	800b780 <_dtoa_r+0x990>
 800b66c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b66e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b672:	e74b      	b.n	800b50c <_dtoa_r+0x71c>
 800b674:	9b03      	ldr	r3, [sp, #12]
 800b676:	1e5e      	subs	r6, r3, #1
 800b678:	9b07      	ldr	r3, [sp, #28]
 800b67a:	42b3      	cmp	r3, r6
 800b67c:	bfbf      	itttt	lt
 800b67e:	9b07      	ldrlt	r3, [sp, #28]
 800b680:	9607      	strlt	r6, [sp, #28]
 800b682:	1af2      	sublt	r2, r6, r3
 800b684:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b686:	bfb6      	itet	lt
 800b688:	189b      	addlt	r3, r3, r2
 800b68a:	1b9e      	subge	r6, r3, r6
 800b68c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b68e:	9b03      	ldr	r3, [sp, #12]
 800b690:	bfb8      	it	lt
 800b692:	2600      	movlt	r6, #0
 800b694:	2b00      	cmp	r3, #0
 800b696:	bfb7      	itett	lt
 800b698:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b69c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b6a0:	1a9d      	sublt	r5, r3, r2
 800b6a2:	2300      	movlt	r3, #0
 800b6a4:	e734      	b.n	800b510 <_dtoa_r+0x720>
 800b6a6:	9e07      	ldr	r6, [sp, #28]
 800b6a8:	9d04      	ldr	r5, [sp, #16]
 800b6aa:	9f08      	ldr	r7, [sp, #32]
 800b6ac:	e73b      	b.n	800b526 <_dtoa_r+0x736>
 800b6ae:	9a07      	ldr	r2, [sp, #28]
 800b6b0:	e767      	b.n	800b582 <_dtoa_r+0x792>
 800b6b2:	9b06      	ldr	r3, [sp, #24]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	dc18      	bgt.n	800b6ea <_dtoa_r+0x8fa>
 800b6b8:	f1ba 0f00 	cmp.w	sl, #0
 800b6bc:	d115      	bne.n	800b6ea <_dtoa_r+0x8fa>
 800b6be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6c2:	b993      	cbnz	r3, 800b6ea <_dtoa_r+0x8fa>
 800b6c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6c8:	0d1b      	lsrs	r3, r3, #20
 800b6ca:	051b      	lsls	r3, r3, #20
 800b6cc:	b183      	cbz	r3, 800b6f0 <_dtoa_r+0x900>
 800b6ce:	9b04      	ldr	r3, [sp, #16]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	9304      	str	r3, [sp, #16]
 800b6d4:	9b05      	ldr	r3, [sp, #20]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	9305      	str	r3, [sp, #20]
 800b6da:	f04f 0801 	mov.w	r8, #1
 800b6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f47f af6a 	bne.w	800b5ba <_dtoa_r+0x7ca>
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	e76f      	b.n	800b5ca <_dtoa_r+0x7da>
 800b6ea:	f04f 0800 	mov.w	r8, #0
 800b6ee:	e7f6      	b.n	800b6de <_dtoa_r+0x8ee>
 800b6f0:	4698      	mov	r8, r3
 800b6f2:	e7f4      	b.n	800b6de <_dtoa_r+0x8ee>
 800b6f4:	f43f af7d 	beq.w	800b5f2 <_dtoa_r+0x802>
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	301c      	adds	r0, #28
 800b6fc:	e772      	b.n	800b5e4 <_dtoa_r+0x7f4>
 800b6fe:	9b03      	ldr	r3, [sp, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	dc37      	bgt.n	800b774 <_dtoa_r+0x984>
 800b704:	9b06      	ldr	r3, [sp, #24]
 800b706:	2b02      	cmp	r3, #2
 800b708:	dd34      	ble.n	800b774 <_dtoa_r+0x984>
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	9302      	str	r3, [sp, #8]
 800b70e:	9b02      	ldr	r3, [sp, #8]
 800b710:	b96b      	cbnz	r3, 800b72e <_dtoa_r+0x93e>
 800b712:	4631      	mov	r1, r6
 800b714:	2205      	movs	r2, #5
 800b716:	4620      	mov	r0, r4
 800b718:	f000 fbf8 	bl	800bf0c <__multadd>
 800b71c:	4601      	mov	r1, r0
 800b71e:	4606      	mov	r6, r0
 800b720:	ee18 0a10 	vmov	r0, s16
 800b724:	f000 fe12 	bl	800c34c <__mcmp>
 800b728:	2800      	cmp	r0, #0
 800b72a:	f73f adbb 	bgt.w	800b2a4 <_dtoa_r+0x4b4>
 800b72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b730:	9d01      	ldr	r5, [sp, #4]
 800b732:	43db      	mvns	r3, r3
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	f04f 0800 	mov.w	r8, #0
 800b73a:	4631      	mov	r1, r6
 800b73c:	4620      	mov	r0, r4
 800b73e:	f000 fbc3 	bl	800bec8 <_Bfree>
 800b742:	2f00      	cmp	r7, #0
 800b744:	f43f aea4 	beq.w	800b490 <_dtoa_r+0x6a0>
 800b748:	f1b8 0f00 	cmp.w	r8, #0
 800b74c:	d005      	beq.n	800b75a <_dtoa_r+0x96a>
 800b74e:	45b8      	cmp	r8, r7
 800b750:	d003      	beq.n	800b75a <_dtoa_r+0x96a>
 800b752:	4641      	mov	r1, r8
 800b754:	4620      	mov	r0, r4
 800b756:	f000 fbb7 	bl	800bec8 <_Bfree>
 800b75a:	4639      	mov	r1, r7
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 fbb3 	bl	800bec8 <_Bfree>
 800b762:	e695      	b.n	800b490 <_dtoa_r+0x6a0>
 800b764:	2600      	movs	r6, #0
 800b766:	4637      	mov	r7, r6
 800b768:	e7e1      	b.n	800b72e <_dtoa_r+0x93e>
 800b76a:	9700      	str	r7, [sp, #0]
 800b76c:	4637      	mov	r7, r6
 800b76e:	e599      	b.n	800b2a4 <_dtoa_r+0x4b4>
 800b770:	40240000 	.word	0x40240000
 800b774:	9b08      	ldr	r3, [sp, #32]
 800b776:	2b00      	cmp	r3, #0
 800b778:	f000 80ca 	beq.w	800b910 <_dtoa_r+0xb20>
 800b77c:	9b03      	ldr	r3, [sp, #12]
 800b77e:	9302      	str	r3, [sp, #8]
 800b780:	2d00      	cmp	r5, #0
 800b782:	dd05      	ble.n	800b790 <_dtoa_r+0x9a0>
 800b784:	4639      	mov	r1, r7
 800b786:	462a      	mov	r2, r5
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 fd6f 	bl	800c26c <__lshift>
 800b78e:	4607      	mov	r7, r0
 800b790:	f1b8 0f00 	cmp.w	r8, #0
 800b794:	d05b      	beq.n	800b84e <_dtoa_r+0xa5e>
 800b796:	6879      	ldr	r1, [r7, #4]
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 fb55 	bl	800be48 <_Balloc>
 800b79e:	4605      	mov	r5, r0
 800b7a0:	b928      	cbnz	r0, 800b7ae <_dtoa_r+0x9be>
 800b7a2:	4b87      	ldr	r3, [pc, #540]	; (800b9c0 <_dtoa_r+0xbd0>)
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b7aa:	f7ff bb3b 	b.w	800ae24 <_dtoa_r+0x34>
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	3202      	adds	r2, #2
 800b7b2:	0092      	lsls	r2, r2, #2
 800b7b4:	f107 010c 	add.w	r1, r7, #12
 800b7b8:	300c      	adds	r0, #12
 800b7ba:	f000 fb2b 	bl	800be14 <memcpy>
 800b7be:	2201      	movs	r2, #1
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f000 fd52 	bl	800c26c <__lshift>
 800b7c8:	9b01      	ldr	r3, [sp, #4]
 800b7ca:	f103 0901 	add.w	r9, r3, #1
 800b7ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	9305      	str	r3, [sp, #20]
 800b7d6:	f00a 0301 	and.w	r3, sl, #1
 800b7da:	46b8      	mov	r8, r7
 800b7dc:	9304      	str	r3, [sp, #16]
 800b7de:	4607      	mov	r7, r0
 800b7e0:	4631      	mov	r1, r6
 800b7e2:	ee18 0a10 	vmov	r0, s16
 800b7e6:	f7ff fa75 	bl	800acd4 <quorem>
 800b7ea:	4641      	mov	r1, r8
 800b7ec:	9002      	str	r0, [sp, #8]
 800b7ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7f2:	ee18 0a10 	vmov	r0, s16
 800b7f6:	f000 fda9 	bl	800c34c <__mcmp>
 800b7fa:	463a      	mov	r2, r7
 800b7fc:	9003      	str	r0, [sp, #12]
 800b7fe:	4631      	mov	r1, r6
 800b800:	4620      	mov	r0, r4
 800b802:	f000 fdbf 	bl	800c384 <__mdiff>
 800b806:	68c2      	ldr	r2, [r0, #12]
 800b808:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b80c:	4605      	mov	r5, r0
 800b80e:	bb02      	cbnz	r2, 800b852 <_dtoa_r+0xa62>
 800b810:	4601      	mov	r1, r0
 800b812:	ee18 0a10 	vmov	r0, s16
 800b816:	f000 fd99 	bl	800c34c <__mcmp>
 800b81a:	4602      	mov	r2, r0
 800b81c:	4629      	mov	r1, r5
 800b81e:	4620      	mov	r0, r4
 800b820:	9207      	str	r2, [sp, #28]
 800b822:	f000 fb51 	bl	800bec8 <_Bfree>
 800b826:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b82a:	ea43 0102 	orr.w	r1, r3, r2
 800b82e:	9b04      	ldr	r3, [sp, #16]
 800b830:	430b      	orrs	r3, r1
 800b832:	464d      	mov	r5, r9
 800b834:	d10f      	bne.n	800b856 <_dtoa_r+0xa66>
 800b836:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b83a:	d02a      	beq.n	800b892 <_dtoa_r+0xaa2>
 800b83c:	9b03      	ldr	r3, [sp, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	dd02      	ble.n	800b848 <_dtoa_r+0xa58>
 800b842:	9b02      	ldr	r3, [sp, #8]
 800b844:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b848:	f88b a000 	strb.w	sl, [fp]
 800b84c:	e775      	b.n	800b73a <_dtoa_r+0x94a>
 800b84e:	4638      	mov	r0, r7
 800b850:	e7ba      	b.n	800b7c8 <_dtoa_r+0x9d8>
 800b852:	2201      	movs	r2, #1
 800b854:	e7e2      	b.n	800b81c <_dtoa_r+0xa2c>
 800b856:	9b03      	ldr	r3, [sp, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	db04      	blt.n	800b866 <_dtoa_r+0xa76>
 800b85c:	9906      	ldr	r1, [sp, #24]
 800b85e:	430b      	orrs	r3, r1
 800b860:	9904      	ldr	r1, [sp, #16]
 800b862:	430b      	orrs	r3, r1
 800b864:	d122      	bne.n	800b8ac <_dtoa_r+0xabc>
 800b866:	2a00      	cmp	r2, #0
 800b868:	ddee      	ble.n	800b848 <_dtoa_r+0xa58>
 800b86a:	ee18 1a10 	vmov	r1, s16
 800b86e:	2201      	movs	r2, #1
 800b870:	4620      	mov	r0, r4
 800b872:	f000 fcfb 	bl	800c26c <__lshift>
 800b876:	4631      	mov	r1, r6
 800b878:	ee08 0a10 	vmov	s16, r0
 800b87c:	f000 fd66 	bl	800c34c <__mcmp>
 800b880:	2800      	cmp	r0, #0
 800b882:	dc03      	bgt.n	800b88c <_dtoa_r+0xa9c>
 800b884:	d1e0      	bne.n	800b848 <_dtoa_r+0xa58>
 800b886:	f01a 0f01 	tst.w	sl, #1
 800b88a:	d0dd      	beq.n	800b848 <_dtoa_r+0xa58>
 800b88c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b890:	d1d7      	bne.n	800b842 <_dtoa_r+0xa52>
 800b892:	2339      	movs	r3, #57	; 0x39
 800b894:	f88b 3000 	strb.w	r3, [fp]
 800b898:	462b      	mov	r3, r5
 800b89a:	461d      	mov	r5, r3
 800b89c:	3b01      	subs	r3, #1
 800b89e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b8a2:	2a39      	cmp	r2, #57	; 0x39
 800b8a4:	d071      	beq.n	800b98a <_dtoa_r+0xb9a>
 800b8a6:	3201      	adds	r2, #1
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	e746      	b.n	800b73a <_dtoa_r+0x94a>
 800b8ac:	2a00      	cmp	r2, #0
 800b8ae:	dd07      	ble.n	800b8c0 <_dtoa_r+0xad0>
 800b8b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8b4:	d0ed      	beq.n	800b892 <_dtoa_r+0xaa2>
 800b8b6:	f10a 0301 	add.w	r3, sl, #1
 800b8ba:	f88b 3000 	strb.w	r3, [fp]
 800b8be:	e73c      	b.n	800b73a <_dtoa_r+0x94a>
 800b8c0:	9b05      	ldr	r3, [sp, #20]
 800b8c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b8c6:	4599      	cmp	r9, r3
 800b8c8:	d047      	beq.n	800b95a <_dtoa_r+0xb6a>
 800b8ca:	ee18 1a10 	vmov	r1, s16
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	220a      	movs	r2, #10
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 fb1a 	bl	800bf0c <__multadd>
 800b8d8:	45b8      	cmp	r8, r7
 800b8da:	ee08 0a10 	vmov	s16, r0
 800b8de:	f04f 0300 	mov.w	r3, #0
 800b8e2:	f04f 020a 	mov.w	r2, #10
 800b8e6:	4641      	mov	r1, r8
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	d106      	bne.n	800b8fa <_dtoa_r+0xb0a>
 800b8ec:	f000 fb0e 	bl	800bf0c <__multadd>
 800b8f0:	4680      	mov	r8, r0
 800b8f2:	4607      	mov	r7, r0
 800b8f4:	f109 0901 	add.w	r9, r9, #1
 800b8f8:	e772      	b.n	800b7e0 <_dtoa_r+0x9f0>
 800b8fa:	f000 fb07 	bl	800bf0c <__multadd>
 800b8fe:	4639      	mov	r1, r7
 800b900:	4680      	mov	r8, r0
 800b902:	2300      	movs	r3, #0
 800b904:	220a      	movs	r2, #10
 800b906:	4620      	mov	r0, r4
 800b908:	f000 fb00 	bl	800bf0c <__multadd>
 800b90c:	4607      	mov	r7, r0
 800b90e:	e7f1      	b.n	800b8f4 <_dtoa_r+0xb04>
 800b910:	9b03      	ldr	r3, [sp, #12]
 800b912:	9302      	str	r3, [sp, #8]
 800b914:	9d01      	ldr	r5, [sp, #4]
 800b916:	ee18 0a10 	vmov	r0, s16
 800b91a:	4631      	mov	r1, r6
 800b91c:	f7ff f9da 	bl	800acd4 <quorem>
 800b920:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	f805 ab01 	strb.w	sl, [r5], #1
 800b92a:	1aea      	subs	r2, r5, r3
 800b92c:	9b02      	ldr	r3, [sp, #8]
 800b92e:	4293      	cmp	r3, r2
 800b930:	dd09      	ble.n	800b946 <_dtoa_r+0xb56>
 800b932:	ee18 1a10 	vmov	r1, s16
 800b936:	2300      	movs	r3, #0
 800b938:	220a      	movs	r2, #10
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 fae6 	bl	800bf0c <__multadd>
 800b940:	ee08 0a10 	vmov	s16, r0
 800b944:	e7e7      	b.n	800b916 <_dtoa_r+0xb26>
 800b946:	9b02      	ldr	r3, [sp, #8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	bfc8      	it	gt
 800b94c:	461d      	movgt	r5, r3
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	bfd8      	it	le
 800b952:	2501      	movle	r5, #1
 800b954:	441d      	add	r5, r3
 800b956:	f04f 0800 	mov.w	r8, #0
 800b95a:	ee18 1a10 	vmov	r1, s16
 800b95e:	2201      	movs	r2, #1
 800b960:	4620      	mov	r0, r4
 800b962:	f000 fc83 	bl	800c26c <__lshift>
 800b966:	4631      	mov	r1, r6
 800b968:	ee08 0a10 	vmov	s16, r0
 800b96c:	f000 fcee 	bl	800c34c <__mcmp>
 800b970:	2800      	cmp	r0, #0
 800b972:	dc91      	bgt.n	800b898 <_dtoa_r+0xaa8>
 800b974:	d102      	bne.n	800b97c <_dtoa_r+0xb8c>
 800b976:	f01a 0f01 	tst.w	sl, #1
 800b97a:	d18d      	bne.n	800b898 <_dtoa_r+0xaa8>
 800b97c:	462b      	mov	r3, r5
 800b97e:	461d      	mov	r5, r3
 800b980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b984:	2a30      	cmp	r2, #48	; 0x30
 800b986:	d0fa      	beq.n	800b97e <_dtoa_r+0xb8e>
 800b988:	e6d7      	b.n	800b73a <_dtoa_r+0x94a>
 800b98a:	9a01      	ldr	r2, [sp, #4]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d184      	bne.n	800b89a <_dtoa_r+0xaaa>
 800b990:	9b00      	ldr	r3, [sp, #0]
 800b992:	3301      	adds	r3, #1
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	2331      	movs	r3, #49	; 0x31
 800b998:	7013      	strb	r3, [r2, #0]
 800b99a:	e6ce      	b.n	800b73a <_dtoa_r+0x94a>
 800b99c:	4b09      	ldr	r3, [pc, #36]	; (800b9c4 <_dtoa_r+0xbd4>)
 800b99e:	f7ff ba95 	b.w	800aecc <_dtoa_r+0xdc>
 800b9a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f47f aa6e 	bne.w	800ae86 <_dtoa_r+0x96>
 800b9aa:	4b07      	ldr	r3, [pc, #28]	; (800b9c8 <_dtoa_r+0xbd8>)
 800b9ac:	f7ff ba8e 	b.w	800aecc <_dtoa_r+0xdc>
 800b9b0:	9b02      	ldr	r3, [sp, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	dcae      	bgt.n	800b914 <_dtoa_r+0xb24>
 800b9b6:	9b06      	ldr	r3, [sp, #24]
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	f73f aea8 	bgt.w	800b70e <_dtoa_r+0x91e>
 800b9be:	e7a9      	b.n	800b914 <_dtoa_r+0xb24>
 800b9c0:	0800dccb 	.word	0x0800dccb
 800b9c4:	0800dc28 	.word	0x0800dc28
 800b9c8:	0800dc4c 	.word	0x0800dc4c

0800b9cc <__sflush_r>:
 800b9cc:	898a      	ldrh	r2, [r1, #12]
 800b9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	0710      	lsls	r0, r2, #28
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	d458      	bmi.n	800ba8c <__sflush_r+0xc0>
 800b9da:	684b      	ldr	r3, [r1, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	dc05      	bgt.n	800b9ec <__sflush_r+0x20>
 800b9e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	dc02      	bgt.n	800b9ec <__sflush_r+0x20>
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9ee:	2e00      	cmp	r6, #0
 800b9f0:	d0f9      	beq.n	800b9e6 <__sflush_r+0x1a>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9f8:	682f      	ldr	r7, [r5, #0]
 800b9fa:	602b      	str	r3, [r5, #0]
 800b9fc:	d032      	beq.n	800ba64 <__sflush_r+0x98>
 800b9fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	075a      	lsls	r2, r3, #29
 800ba04:	d505      	bpl.n	800ba12 <__sflush_r+0x46>
 800ba06:	6863      	ldr	r3, [r4, #4]
 800ba08:	1ac0      	subs	r0, r0, r3
 800ba0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba0c:	b10b      	cbz	r3, 800ba12 <__sflush_r+0x46>
 800ba0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba10:	1ac0      	subs	r0, r0, r3
 800ba12:	2300      	movs	r3, #0
 800ba14:	4602      	mov	r2, r0
 800ba16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba18:	6a21      	ldr	r1, [r4, #32]
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	47b0      	blx	r6
 800ba1e:	1c43      	adds	r3, r0, #1
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	d106      	bne.n	800ba32 <__sflush_r+0x66>
 800ba24:	6829      	ldr	r1, [r5, #0]
 800ba26:	291d      	cmp	r1, #29
 800ba28:	d82c      	bhi.n	800ba84 <__sflush_r+0xb8>
 800ba2a:	4a2a      	ldr	r2, [pc, #168]	; (800bad4 <__sflush_r+0x108>)
 800ba2c:	40ca      	lsrs	r2, r1
 800ba2e:	07d6      	lsls	r6, r2, #31
 800ba30:	d528      	bpl.n	800ba84 <__sflush_r+0xb8>
 800ba32:	2200      	movs	r2, #0
 800ba34:	6062      	str	r2, [r4, #4]
 800ba36:	04d9      	lsls	r1, r3, #19
 800ba38:	6922      	ldr	r2, [r4, #16]
 800ba3a:	6022      	str	r2, [r4, #0]
 800ba3c:	d504      	bpl.n	800ba48 <__sflush_r+0x7c>
 800ba3e:	1c42      	adds	r2, r0, #1
 800ba40:	d101      	bne.n	800ba46 <__sflush_r+0x7a>
 800ba42:	682b      	ldr	r3, [r5, #0]
 800ba44:	b903      	cbnz	r3, 800ba48 <__sflush_r+0x7c>
 800ba46:	6560      	str	r0, [r4, #84]	; 0x54
 800ba48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba4a:	602f      	str	r7, [r5, #0]
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	d0ca      	beq.n	800b9e6 <__sflush_r+0x1a>
 800ba50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba54:	4299      	cmp	r1, r3
 800ba56:	d002      	beq.n	800ba5e <__sflush_r+0x92>
 800ba58:	4628      	mov	r0, r5
 800ba5a:	f7fe fa5f 	bl	8009f1c <_free_r>
 800ba5e:	2000      	movs	r0, #0
 800ba60:	6360      	str	r0, [r4, #52]	; 0x34
 800ba62:	e7c1      	b.n	800b9e8 <__sflush_r+0x1c>
 800ba64:	6a21      	ldr	r1, [r4, #32]
 800ba66:	2301      	movs	r3, #1
 800ba68:	4628      	mov	r0, r5
 800ba6a:	47b0      	blx	r6
 800ba6c:	1c41      	adds	r1, r0, #1
 800ba6e:	d1c7      	bne.n	800ba00 <__sflush_r+0x34>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d0c4      	beq.n	800ba00 <__sflush_r+0x34>
 800ba76:	2b1d      	cmp	r3, #29
 800ba78:	d001      	beq.n	800ba7e <__sflush_r+0xb2>
 800ba7a:	2b16      	cmp	r3, #22
 800ba7c:	d101      	bne.n	800ba82 <__sflush_r+0xb6>
 800ba7e:	602f      	str	r7, [r5, #0]
 800ba80:	e7b1      	b.n	800b9e6 <__sflush_r+0x1a>
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba88:	81a3      	strh	r3, [r4, #12]
 800ba8a:	e7ad      	b.n	800b9e8 <__sflush_r+0x1c>
 800ba8c:	690f      	ldr	r7, [r1, #16]
 800ba8e:	2f00      	cmp	r7, #0
 800ba90:	d0a9      	beq.n	800b9e6 <__sflush_r+0x1a>
 800ba92:	0793      	lsls	r3, r2, #30
 800ba94:	680e      	ldr	r6, [r1, #0]
 800ba96:	bf08      	it	eq
 800ba98:	694b      	ldreq	r3, [r1, #20]
 800ba9a:	600f      	str	r7, [r1, #0]
 800ba9c:	bf18      	it	ne
 800ba9e:	2300      	movne	r3, #0
 800baa0:	eba6 0807 	sub.w	r8, r6, r7
 800baa4:	608b      	str	r3, [r1, #8]
 800baa6:	f1b8 0f00 	cmp.w	r8, #0
 800baaa:	dd9c      	ble.n	800b9e6 <__sflush_r+0x1a>
 800baac:	6a21      	ldr	r1, [r4, #32]
 800baae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bab0:	4643      	mov	r3, r8
 800bab2:	463a      	mov	r2, r7
 800bab4:	4628      	mov	r0, r5
 800bab6:	47b0      	blx	r6
 800bab8:	2800      	cmp	r0, #0
 800baba:	dc06      	bgt.n	800baca <__sflush_r+0xfe>
 800babc:	89a3      	ldrh	r3, [r4, #12]
 800babe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bac2:	81a3      	strh	r3, [r4, #12]
 800bac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bac8:	e78e      	b.n	800b9e8 <__sflush_r+0x1c>
 800baca:	4407      	add	r7, r0
 800bacc:	eba8 0800 	sub.w	r8, r8, r0
 800bad0:	e7e9      	b.n	800baa6 <__sflush_r+0xda>
 800bad2:	bf00      	nop
 800bad4:	20400001 	.word	0x20400001

0800bad8 <_fflush_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	690b      	ldr	r3, [r1, #16]
 800badc:	4605      	mov	r5, r0
 800bade:	460c      	mov	r4, r1
 800bae0:	b913      	cbnz	r3, 800bae8 <_fflush_r+0x10>
 800bae2:	2500      	movs	r5, #0
 800bae4:	4628      	mov	r0, r5
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	b118      	cbz	r0, 800baf2 <_fflush_r+0x1a>
 800baea:	6983      	ldr	r3, [r0, #24]
 800baec:	b90b      	cbnz	r3, 800baf2 <_fflush_r+0x1a>
 800baee:	f000 f887 	bl	800bc00 <__sinit>
 800baf2:	4b14      	ldr	r3, [pc, #80]	; (800bb44 <_fflush_r+0x6c>)
 800baf4:	429c      	cmp	r4, r3
 800baf6:	d11b      	bne.n	800bb30 <_fflush_r+0x58>
 800baf8:	686c      	ldr	r4, [r5, #4]
 800bafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d0ef      	beq.n	800bae2 <_fflush_r+0xa>
 800bb02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb04:	07d0      	lsls	r0, r2, #31
 800bb06:	d404      	bmi.n	800bb12 <_fflush_r+0x3a>
 800bb08:	0599      	lsls	r1, r3, #22
 800bb0a:	d402      	bmi.n	800bb12 <_fflush_r+0x3a>
 800bb0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb0e:	f000 f91a 	bl	800bd46 <__retarget_lock_acquire_recursive>
 800bb12:	4628      	mov	r0, r5
 800bb14:	4621      	mov	r1, r4
 800bb16:	f7ff ff59 	bl	800b9cc <__sflush_r>
 800bb1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb1c:	07da      	lsls	r2, r3, #31
 800bb1e:	4605      	mov	r5, r0
 800bb20:	d4e0      	bmi.n	800bae4 <_fflush_r+0xc>
 800bb22:	89a3      	ldrh	r3, [r4, #12]
 800bb24:	059b      	lsls	r3, r3, #22
 800bb26:	d4dd      	bmi.n	800bae4 <_fflush_r+0xc>
 800bb28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb2a:	f000 f90d 	bl	800bd48 <__retarget_lock_release_recursive>
 800bb2e:	e7d9      	b.n	800bae4 <_fflush_r+0xc>
 800bb30:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <_fflush_r+0x70>)
 800bb32:	429c      	cmp	r4, r3
 800bb34:	d101      	bne.n	800bb3a <_fflush_r+0x62>
 800bb36:	68ac      	ldr	r4, [r5, #8]
 800bb38:	e7df      	b.n	800bafa <_fflush_r+0x22>
 800bb3a:	4b04      	ldr	r3, [pc, #16]	; (800bb4c <_fflush_r+0x74>)
 800bb3c:	429c      	cmp	r4, r3
 800bb3e:	bf08      	it	eq
 800bb40:	68ec      	ldreq	r4, [r5, #12]
 800bb42:	e7da      	b.n	800bafa <_fflush_r+0x22>
 800bb44:	0800dcfc 	.word	0x0800dcfc
 800bb48:	0800dd1c 	.word	0x0800dd1c
 800bb4c:	0800dcdc 	.word	0x0800dcdc

0800bb50 <std>:
 800bb50:	2300      	movs	r3, #0
 800bb52:	b510      	push	{r4, lr}
 800bb54:	4604      	mov	r4, r0
 800bb56:	e9c0 3300 	strd	r3, r3, [r0]
 800bb5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb5e:	6083      	str	r3, [r0, #8]
 800bb60:	8181      	strh	r1, [r0, #12]
 800bb62:	6643      	str	r3, [r0, #100]	; 0x64
 800bb64:	81c2      	strh	r2, [r0, #14]
 800bb66:	6183      	str	r3, [r0, #24]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	2208      	movs	r2, #8
 800bb6c:	305c      	adds	r0, #92	; 0x5c
 800bb6e:	f7fe f9cd 	bl	8009f0c <memset>
 800bb72:	4b05      	ldr	r3, [pc, #20]	; (800bb88 <std+0x38>)
 800bb74:	6263      	str	r3, [r4, #36]	; 0x24
 800bb76:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <std+0x3c>)
 800bb78:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb7a:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <std+0x40>)
 800bb7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb7e:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <std+0x44>)
 800bb80:	6224      	str	r4, [r4, #32]
 800bb82:	6323      	str	r3, [r4, #48]	; 0x30
 800bb84:	bd10      	pop	{r4, pc}
 800bb86:	bf00      	nop
 800bb88:	0800cae9 	.word	0x0800cae9
 800bb8c:	0800cb0b 	.word	0x0800cb0b
 800bb90:	0800cb43 	.word	0x0800cb43
 800bb94:	0800cb67 	.word	0x0800cb67

0800bb98 <_cleanup_r>:
 800bb98:	4901      	ldr	r1, [pc, #4]	; (800bba0 <_cleanup_r+0x8>)
 800bb9a:	f000 b8af 	b.w	800bcfc <_fwalk_reent>
 800bb9e:	bf00      	nop
 800bba0:	0800bad9 	.word	0x0800bad9

0800bba4 <__sfmoreglue>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	2268      	movs	r2, #104	; 0x68
 800bba8:	1e4d      	subs	r5, r1, #1
 800bbaa:	4355      	muls	r5, r2
 800bbac:	460e      	mov	r6, r1
 800bbae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbb2:	f7fe fa1f 	bl	8009ff4 <_malloc_r>
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	b140      	cbz	r0, 800bbcc <__sfmoreglue+0x28>
 800bbba:	2100      	movs	r1, #0
 800bbbc:	e9c0 1600 	strd	r1, r6, [r0]
 800bbc0:	300c      	adds	r0, #12
 800bbc2:	60a0      	str	r0, [r4, #8]
 800bbc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbc8:	f7fe f9a0 	bl	8009f0c <memset>
 800bbcc:	4620      	mov	r0, r4
 800bbce:	bd70      	pop	{r4, r5, r6, pc}

0800bbd0 <__sfp_lock_acquire>:
 800bbd0:	4801      	ldr	r0, [pc, #4]	; (800bbd8 <__sfp_lock_acquire+0x8>)
 800bbd2:	f000 b8b8 	b.w	800bd46 <__retarget_lock_acquire_recursive>
 800bbd6:	bf00      	nop
 800bbd8:	2000252d 	.word	0x2000252d

0800bbdc <__sfp_lock_release>:
 800bbdc:	4801      	ldr	r0, [pc, #4]	; (800bbe4 <__sfp_lock_release+0x8>)
 800bbde:	f000 b8b3 	b.w	800bd48 <__retarget_lock_release_recursive>
 800bbe2:	bf00      	nop
 800bbe4:	2000252d 	.word	0x2000252d

0800bbe8 <__sinit_lock_acquire>:
 800bbe8:	4801      	ldr	r0, [pc, #4]	; (800bbf0 <__sinit_lock_acquire+0x8>)
 800bbea:	f000 b8ac 	b.w	800bd46 <__retarget_lock_acquire_recursive>
 800bbee:	bf00      	nop
 800bbf0:	2000252e 	.word	0x2000252e

0800bbf4 <__sinit_lock_release>:
 800bbf4:	4801      	ldr	r0, [pc, #4]	; (800bbfc <__sinit_lock_release+0x8>)
 800bbf6:	f000 b8a7 	b.w	800bd48 <__retarget_lock_release_recursive>
 800bbfa:	bf00      	nop
 800bbfc:	2000252e 	.word	0x2000252e

0800bc00 <__sinit>:
 800bc00:	b510      	push	{r4, lr}
 800bc02:	4604      	mov	r4, r0
 800bc04:	f7ff fff0 	bl	800bbe8 <__sinit_lock_acquire>
 800bc08:	69a3      	ldr	r3, [r4, #24]
 800bc0a:	b11b      	cbz	r3, 800bc14 <__sinit+0x14>
 800bc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc10:	f7ff bff0 	b.w	800bbf4 <__sinit_lock_release>
 800bc14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc18:	6523      	str	r3, [r4, #80]	; 0x50
 800bc1a:	4b13      	ldr	r3, [pc, #76]	; (800bc68 <__sinit+0x68>)
 800bc1c:	4a13      	ldr	r2, [pc, #76]	; (800bc6c <__sinit+0x6c>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc22:	42a3      	cmp	r3, r4
 800bc24:	bf04      	itt	eq
 800bc26:	2301      	moveq	r3, #1
 800bc28:	61a3      	streq	r3, [r4, #24]
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 f820 	bl	800bc70 <__sfp>
 800bc30:	6060      	str	r0, [r4, #4]
 800bc32:	4620      	mov	r0, r4
 800bc34:	f000 f81c 	bl	800bc70 <__sfp>
 800bc38:	60a0      	str	r0, [r4, #8]
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f000 f818 	bl	800bc70 <__sfp>
 800bc40:	2200      	movs	r2, #0
 800bc42:	60e0      	str	r0, [r4, #12]
 800bc44:	2104      	movs	r1, #4
 800bc46:	6860      	ldr	r0, [r4, #4]
 800bc48:	f7ff ff82 	bl	800bb50 <std>
 800bc4c:	68a0      	ldr	r0, [r4, #8]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	2109      	movs	r1, #9
 800bc52:	f7ff ff7d 	bl	800bb50 <std>
 800bc56:	68e0      	ldr	r0, [r4, #12]
 800bc58:	2202      	movs	r2, #2
 800bc5a:	2112      	movs	r1, #18
 800bc5c:	f7ff ff78 	bl	800bb50 <std>
 800bc60:	2301      	movs	r3, #1
 800bc62:	61a3      	str	r3, [r4, #24]
 800bc64:	e7d2      	b.n	800bc0c <__sinit+0xc>
 800bc66:	bf00      	nop
 800bc68:	0800dc14 	.word	0x0800dc14
 800bc6c:	0800bb99 	.word	0x0800bb99

0800bc70 <__sfp>:
 800bc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc72:	4607      	mov	r7, r0
 800bc74:	f7ff ffac 	bl	800bbd0 <__sfp_lock_acquire>
 800bc78:	4b1e      	ldr	r3, [pc, #120]	; (800bcf4 <__sfp+0x84>)
 800bc7a:	681e      	ldr	r6, [r3, #0]
 800bc7c:	69b3      	ldr	r3, [r6, #24]
 800bc7e:	b913      	cbnz	r3, 800bc86 <__sfp+0x16>
 800bc80:	4630      	mov	r0, r6
 800bc82:	f7ff ffbd 	bl	800bc00 <__sinit>
 800bc86:	3648      	adds	r6, #72	; 0x48
 800bc88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	d503      	bpl.n	800bc98 <__sfp+0x28>
 800bc90:	6833      	ldr	r3, [r6, #0]
 800bc92:	b30b      	cbz	r3, 800bcd8 <__sfp+0x68>
 800bc94:	6836      	ldr	r6, [r6, #0]
 800bc96:	e7f7      	b.n	800bc88 <__sfp+0x18>
 800bc98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc9c:	b9d5      	cbnz	r5, 800bcd4 <__sfp+0x64>
 800bc9e:	4b16      	ldr	r3, [pc, #88]	; (800bcf8 <__sfp+0x88>)
 800bca0:	60e3      	str	r3, [r4, #12]
 800bca2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bca6:	6665      	str	r5, [r4, #100]	; 0x64
 800bca8:	f000 f84c 	bl	800bd44 <__retarget_lock_init_recursive>
 800bcac:	f7ff ff96 	bl	800bbdc <__sfp_lock_release>
 800bcb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bcb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcb8:	6025      	str	r5, [r4, #0]
 800bcba:	61a5      	str	r5, [r4, #24]
 800bcbc:	2208      	movs	r2, #8
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcc4:	f7fe f922 	bl	8009f0c <memset>
 800bcc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcd4:	3468      	adds	r4, #104	; 0x68
 800bcd6:	e7d9      	b.n	800bc8c <__sfp+0x1c>
 800bcd8:	2104      	movs	r1, #4
 800bcda:	4638      	mov	r0, r7
 800bcdc:	f7ff ff62 	bl	800bba4 <__sfmoreglue>
 800bce0:	4604      	mov	r4, r0
 800bce2:	6030      	str	r0, [r6, #0]
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d1d5      	bne.n	800bc94 <__sfp+0x24>
 800bce8:	f7ff ff78 	bl	800bbdc <__sfp_lock_release>
 800bcec:	230c      	movs	r3, #12
 800bcee:	603b      	str	r3, [r7, #0]
 800bcf0:	e7ee      	b.n	800bcd0 <__sfp+0x60>
 800bcf2:	bf00      	nop
 800bcf4:	0800dc14 	.word	0x0800dc14
 800bcf8:	ffff0001 	.word	0xffff0001

0800bcfc <_fwalk_reent>:
 800bcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd00:	4606      	mov	r6, r0
 800bd02:	4688      	mov	r8, r1
 800bd04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd08:	2700      	movs	r7, #0
 800bd0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd0e:	f1b9 0901 	subs.w	r9, r9, #1
 800bd12:	d505      	bpl.n	800bd20 <_fwalk_reent+0x24>
 800bd14:	6824      	ldr	r4, [r4, #0]
 800bd16:	2c00      	cmp	r4, #0
 800bd18:	d1f7      	bne.n	800bd0a <_fwalk_reent+0xe>
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd20:	89ab      	ldrh	r3, [r5, #12]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d907      	bls.n	800bd36 <_fwalk_reent+0x3a>
 800bd26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	d003      	beq.n	800bd36 <_fwalk_reent+0x3a>
 800bd2e:	4629      	mov	r1, r5
 800bd30:	4630      	mov	r0, r6
 800bd32:	47c0      	blx	r8
 800bd34:	4307      	orrs	r7, r0
 800bd36:	3568      	adds	r5, #104	; 0x68
 800bd38:	e7e9      	b.n	800bd0e <_fwalk_reent+0x12>
	...

0800bd3c <_localeconv_r>:
 800bd3c:	4800      	ldr	r0, [pc, #0]	; (800bd40 <_localeconv_r+0x4>)
 800bd3e:	4770      	bx	lr
 800bd40:	20000178 	.word	0x20000178

0800bd44 <__retarget_lock_init_recursive>:
 800bd44:	4770      	bx	lr

0800bd46 <__retarget_lock_acquire_recursive>:
 800bd46:	4770      	bx	lr

0800bd48 <__retarget_lock_release_recursive>:
 800bd48:	4770      	bx	lr

0800bd4a <__swhatbuf_r>:
 800bd4a:	b570      	push	{r4, r5, r6, lr}
 800bd4c:	460e      	mov	r6, r1
 800bd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd52:	2900      	cmp	r1, #0
 800bd54:	b096      	sub	sp, #88	; 0x58
 800bd56:	4614      	mov	r4, r2
 800bd58:	461d      	mov	r5, r3
 800bd5a:	da08      	bge.n	800bd6e <__swhatbuf_r+0x24>
 800bd5c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	602a      	str	r2, [r5, #0]
 800bd64:	061a      	lsls	r2, r3, #24
 800bd66:	d410      	bmi.n	800bd8a <__swhatbuf_r+0x40>
 800bd68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd6c:	e00e      	b.n	800bd8c <__swhatbuf_r+0x42>
 800bd6e:	466a      	mov	r2, sp
 800bd70:	f000 ff50 	bl	800cc14 <_fstat_r>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	dbf1      	blt.n	800bd5c <__swhatbuf_r+0x12>
 800bd78:	9a01      	ldr	r2, [sp, #4]
 800bd7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd82:	425a      	negs	r2, r3
 800bd84:	415a      	adcs	r2, r3
 800bd86:	602a      	str	r2, [r5, #0]
 800bd88:	e7ee      	b.n	800bd68 <__swhatbuf_r+0x1e>
 800bd8a:	2340      	movs	r3, #64	; 0x40
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	b016      	add	sp, #88	; 0x58
 800bd92:	bd70      	pop	{r4, r5, r6, pc}

0800bd94 <__smakebuf_r>:
 800bd94:	898b      	ldrh	r3, [r1, #12]
 800bd96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd98:	079d      	lsls	r5, r3, #30
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	d507      	bpl.n	800bdb0 <__smakebuf_r+0x1c>
 800bda0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	6123      	str	r3, [r4, #16]
 800bda8:	2301      	movs	r3, #1
 800bdaa:	6163      	str	r3, [r4, #20]
 800bdac:	b002      	add	sp, #8
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
 800bdb0:	ab01      	add	r3, sp, #4
 800bdb2:	466a      	mov	r2, sp
 800bdb4:	f7ff ffc9 	bl	800bd4a <__swhatbuf_r>
 800bdb8:	9900      	ldr	r1, [sp, #0]
 800bdba:	4605      	mov	r5, r0
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f7fe f919 	bl	8009ff4 <_malloc_r>
 800bdc2:	b948      	cbnz	r0, 800bdd8 <__smakebuf_r+0x44>
 800bdc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdc8:	059a      	lsls	r2, r3, #22
 800bdca:	d4ef      	bmi.n	800bdac <__smakebuf_r+0x18>
 800bdcc:	f023 0303 	bic.w	r3, r3, #3
 800bdd0:	f043 0302 	orr.w	r3, r3, #2
 800bdd4:	81a3      	strh	r3, [r4, #12]
 800bdd6:	e7e3      	b.n	800bda0 <__smakebuf_r+0xc>
 800bdd8:	4b0d      	ldr	r3, [pc, #52]	; (800be10 <__smakebuf_r+0x7c>)
 800bdda:	62b3      	str	r3, [r6, #40]	; 0x28
 800bddc:	89a3      	ldrh	r3, [r4, #12]
 800bdde:	6020      	str	r0, [r4, #0]
 800bde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde4:	81a3      	strh	r3, [r4, #12]
 800bde6:	9b00      	ldr	r3, [sp, #0]
 800bde8:	6163      	str	r3, [r4, #20]
 800bdea:	9b01      	ldr	r3, [sp, #4]
 800bdec:	6120      	str	r0, [r4, #16]
 800bdee:	b15b      	cbz	r3, 800be08 <__smakebuf_r+0x74>
 800bdf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f000 ff1f 	bl	800cc38 <_isatty_r>
 800bdfa:	b128      	cbz	r0, 800be08 <__smakebuf_r+0x74>
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	f023 0303 	bic.w	r3, r3, #3
 800be02:	f043 0301 	orr.w	r3, r3, #1
 800be06:	81a3      	strh	r3, [r4, #12]
 800be08:	89a0      	ldrh	r0, [r4, #12]
 800be0a:	4305      	orrs	r5, r0
 800be0c:	81a5      	strh	r5, [r4, #12]
 800be0e:	e7cd      	b.n	800bdac <__smakebuf_r+0x18>
 800be10:	0800bb99 	.word	0x0800bb99

0800be14 <memcpy>:
 800be14:	440a      	add	r2, r1
 800be16:	4291      	cmp	r1, r2
 800be18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800be1c:	d100      	bne.n	800be20 <memcpy+0xc>
 800be1e:	4770      	bx	lr
 800be20:	b510      	push	{r4, lr}
 800be22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be2a:	4291      	cmp	r1, r2
 800be2c:	d1f9      	bne.n	800be22 <memcpy+0xe>
 800be2e:	bd10      	pop	{r4, pc}

0800be30 <__malloc_lock>:
 800be30:	4801      	ldr	r0, [pc, #4]	; (800be38 <__malloc_lock+0x8>)
 800be32:	f7ff bf88 	b.w	800bd46 <__retarget_lock_acquire_recursive>
 800be36:	bf00      	nop
 800be38:	2000252c 	.word	0x2000252c

0800be3c <__malloc_unlock>:
 800be3c:	4801      	ldr	r0, [pc, #4]	; (800be44 <__malloc_unlock+0x8>)
 800be3e:	f7ff bf83 	b.w	800bd48 <__retarget_lock_release_recursive>
 800be42:	bf00      	nop
 800be44:	2000252c 	.word	0x2000252c

0800be48 <_Balloc>:
 800be48:	b570      	push	{r4, r5, r6, lr}
 800be4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be4c:	4604      	mov	r4, r0
 800be4e:	460d      	mov	r5, r1
 800be50:	b976      	cbnz	r6, 800be70 <_Balloc+0x28>
 800be52:	2010      	movs	r0, #16
 800be54:	f7fe f84a 	bl	8009eec <malloc>
 800be58:	4602      	mov	r2, r0
 800be5a:	6260      	str	r0, [r4, #36]	; 0x24
 800be5c:	b920      	cbnz	r0, 800be68 <_Balloc+0x20>
 800be5e:	4b18      	ldr	r3, [pc, #96]	; (800bec0 <_Balloc+0x78>)
 800be60:	4818      	ldr	r0, [pc, #96]	; (800bec4 <_Balloc+0x7c>)
 800be62:	2166      	movs	r1, #102	; 0x66
 800be64:	f000 fe96 	bl	800cb94 <__assert_func>
 800be68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be6c:	6006      	str	r6, [r0, #0]
 800be6e:	60c6      	str	r6, [r0, #12]
 800be70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be72:	68f3      	ldr	r3, [r6, #12]
 800be74:	b183      	cbz	r3, 800be98 <_Balloc+0x50>
 800be76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be7e:	b9b8      	cbnz	r0, 800beb0 <_Balloc+0x68>
 800be80:	2101      	movs	r1, #1
 800be82:	fa01 f605 	lsl.w	r6, r1, r5
 800be86:	1d72      	adds	r2, r6, #5
 800be88:	0092      	lsls	r2, r2, #2
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 fb60 	bl	800c550 <_calloc_r>
 800be90:	b160      	cbz	r0, 800beac <_Balloc+0x64>
 800be92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be96:	e00e      	b.n	800beb6 <_Balloc+0x6e>
 800be98:	2221      	movs	r2, #33	; 0x21
 800be9a:	2104      	movs	r1, #4
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 fb57 	bl	800c550 <_calloc_r>
 800bea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bea4:	60f0      	str	r0, [r6, #12]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1e4      	bne.n	800be76 <_Balloc+0x2e>
 800beac:	2000      	movs	r0, #0
 800beae:	bd70      	pop	{r4, r5, r6, pc}
 800beb0:	6802      	ldr	r2, [r0, #0]
 800beb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800beb6:	2300      	movs	r3, #0
 800beb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bebc:	e7f7      	b.n	800beae <_Balloc+0x66>
 800bebe:	bf00      	nop
 800bec0:	0800dc59 	.word	0x0800dc59
 800bec4:	0800dd3c 	.word	0x0800dd3c

0800bec8 <_Bfree>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800becc:	4605      	mov	r5, r0
 800bece:	460c      	mov	r4, r1
 800bed0:	b976      	cbnz	r6, 800bef0 <_Bfree+0x28>
 800bed2:	2010      	movs	r0, #16
 800bed4:	f7fe f80a 	bl	8009eec <malloc>
 800bed8:	4602      	mov	r2, r0
 800beda:	6268      	str	r0, [r5, #36]	; 0x24
 800bedc:	b920      	cbnz	r0, 800bee8 <_Bfree+0x20>
 800bede:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <_Bfree+0x3c>)
 800bee0:	4809      	ldr	r0, [pc, #36]	; (800bf08 <_Bfree+0x40>)
 800bee2:	218a      	movs	r1, #138	; 0x8a
 800bee4:	f000 fe56 	bl	800cb94 <__assert_func>
 800bee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800beec:	6006      	str	r6, [r0, #0]
 800beee:	60c6      	str	r6, [r0, #12]
 800bef0:	b13c      	cbz	r4, 800bf02 <_Bfree+0x3a>
 800bef2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bef4:	6862      	ldr	r2, [r4, #4]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800befc:	6021      	str	r1, [r4, #0]
 800befe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf02:	bd70      	pop	{r4, r5, r6, pc}
 800bf04:	0800dc59 	.word	0x0800dc59
 800bf08:	0800dd3c 	.word	0x0800dd3c

0800bf0c <__multadd>:
 800bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf10:	690d      	ldr	r5, [r1, #16]
 800bf12:	4607      	mov	r7, r0
 800bf14:	460c      	mov	r4, r1
 800bf16:	461e      	mov	r6, r3
 800bf18:	f101 0c14 	add.w	ip, r1, #20
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	f8dc 3000 	ldr.w	r3, [ip]
 800bf22:	b299      	uxth	r1, r3
 800bf24:	fb02 6101 	mla	r1, r2, r1, r6
 800bf28:	0c1e      	lsrs	r6, r3, #16
 800bf2a:	0c0b      	lsrs	r3, r1, #16
 800bf2c:	fb02 3306 	mla	r3, r2, r6, r3
 800bf30:	b289      	uxth	r1, r1
 800bf32:	3001      	adds	r0, #1
 800bf34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf38:	4285      	cmp	r5, r0
 800bf3a:	f84c 1b04 	str.w	r1, [ip], #4
 800bf3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf42:	dcec      	bgt.n	800bf1e <__multadd+0x12>
 800bf44:	b30e      	cbz	r6, 800bf8a <__multadd+0x7e>
 800bf46:	68a3      	ldr	r3, [r4, #8]
 800bf48:	42ab      	cmp	r3, r5
 800bf4a:	dc19      	bgt.n	800bf80 <__multadd+0x74>
 800bf4c:	6861      	ldr	r1, [r4, #4]
 800bf4e:	4638      	mov	r0, r7
 800bf50:	3101      	adds	r1, #1
 800bf52:	f7ff ff79 	bl	800be48 <_Balloc>
 800bf56:	4680      	mov	r8, r0
 800bf58:	b928      	cbnz	r0, 800bf66 <__multadd+0x5a>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	4b0c      	ldr	r3, [pc, #48]	; (800bf90 <__multadd+0x84>)
 800bf5e:	480d      	ldr	r0, [pc, #52]	; (800bf94 <__multadd+0x88>)
 800bf60:	21b5      	movs	r1, #181	; 0xb5
 800bf62:	f000 fe17 	bl	800cb94 <__assert_func>
 800bf66:	6922      	ldr	r2, [r4, #16]
 800bf68:	3202      	adds	r2, #2
 800bf6a:	f104 010c 	add.w	r1, r4, #12
 800bf6e:	0092      	lsls	r2, r2, #2
 800bf70:	300c      	adds	r0, #12
 800bf72:	f7ff ff4f 	bl	800be14 <memcpy>
 800bf76:	4621      	mov	r1, r4
 800bf78:	4638      	mov	r0, r7
 800bf7a:	f7ff ffa5 	bl	800bec8 <_Bfree>
 800bf7e:	4644      	mov	r4, r8
 800bf80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf84:	3501      	adds	r5, #1
 800bf86:	615e      	str	r6, [r3, #20]
 800bf88:	6125      	str	r5, [r4, #16]
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf90:	0800dccb 	.word	0x0800dccb
 800bf94:	0800dd3c 	.word	0x0800dd3c

0800bf98 <__hi0bits>:
 800bf98:	0c03      	lsrs	r3, r0, #16
 800bf9a:	041b      	lsls	r3, r3, #16
 800bf9c:	b9d3      	cbnz	r3, 800bfd4 <__hi0bits+0x3c>
 800bf9e:	0400      	lsls	r0, r0, #16
 800bfa0:	2310      	movs	r3, #16
 800bfa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bfa6:	bf04      	itt	eq
 800bfa8:	0200      	lsleq	r0, r0, #8
 800bfaa:	3308      	addeq	r3, #8
 800bfac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bfb0:	bf04      	itt	eq
 800bfb2:	0100      	lsleq	r0, r0, #4
 800bfb4:	3304      	addeq	r3, #4
 800bfb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfba:	bf04      	itt	eq
 800bfbc:	0080      	lsleq	r0, r0, #2
 800bfbe:	3302      	addeq	r3, #2
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	db05      	blt.n	800bfd0 <__hi0bits+0x38>
 800bfc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfc8:	f103 0301 	add.w	r3, r3, #1
 800bfcc:	bf08      	it	eq
 800bfce:	2320      	moveq	r3, #32
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	4770      	bx	lr
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	e7e4      	b.n	800bfa2 <__hi0bits+0xa>

0800bfd8 <__lo0bits>:
 800bfd8:	6803      	ldr	r3, [r0, #0]
 800bfda:	f013 0207 	ands.w	r2, r3, #7
 800bfde:	4601      	mov	r1, r0
 800bfe0:	d00b      	beq.n	800bffa <__lo0bits+0x22>
 800bfe2:	07da      	lsls	r2, r3, #31
 800bfe4:	d423      	bmi.n	800c02e <__lo0bits+0x56>
 800bfe6:	0798      	lsls	r0, r3, #30
 800bfe8:	bf49      	itett	mi
 800bfea:	085b      	lsrmi	r3, r3, #1
 800bfec:	089b      	lsrpl	r3, r3, #2
 800bfee:	2001      	movmi	r0, #1
 800bff0:	600b      	strmi	r3, [r1, #0]
 800bff2:	bf5c      	itt	pl
 800bff4:	600b      	strpl	r3, [r1, #0]
 800bff6:	2002      	movpl	r0, #2
 800bff8:	4770      	bx	lr
 800bffa:	b298      	uxth	r0, r3
 800bffc:	b9a8      	cbnz	r0, 800c02a <__lo0bits+0x52>
 800bffe:	0c1b      	lsrs	r3, r3, #16
 800c000:	2010      	movs	r0, #16
 800c002:	b2da      	uxtb	r2, r3
 800c004:	b90a      	cbnz	r2, 800c00a <__lo0bits+0x32>
 800c006:	3008      	adds	r0, #8
 800c008:	0a1b      	lsrs	r3, r3, #8
 800c00a:	071a      	lsls	r2, r3, #28
 800c00c:	bf04      	itt	eq
 800c00e:	091b      	lsreq	r3, r3, #4
 800c010:	3004      	addeq	r0, #4
 800c012:	079a      	lsls	r2, r3, #30
 800c014:	bf04      	itt	eq
 800c016:	089b      	lsreq	r3, r3, #2
 800c018:	3002      	addeq	r0, #2
 800c01a:	07da      	lsls	r2, r3, #31
 800c01c:	d403      	bmi.n	800c026 <__lo0bits+0x4e>
 800c01e:	085b      	lsrs	r3, r3, #1
 800c020:	f100 0001 	add.w	r0, r0, #1
 800c024:	d005      	beq.n	800c032 <__lo0bits+0x5a>
 800c026:	600b      	str	r3, [r1, #0]
 800c028:	4770      	bx	lr
 800c02a:	4610      	mov	r0, r2
 800c02c:	e7e9      	b.n	800c002 <__lo0bits+0x2a>
 800c02e:	2000      	movs	r0, #0
 800c030:	4770      	bx	lr
 800c032:	2020      	movs	r0, #32
 800c034:	4770      	bx	lr
	...

0800c038 <__i2b>:
 800c038:	b510      	push	{r4, lr}
 800c03a:	460c      	mov	r4, r1
 800c03c:	2101      	movs	r1, #1
 800c03e:	f7ff ff03 	bl	800be48 <_Balloc>
 800c042:	4602      	mov	r2, r0
 800c044:	b928      	cbnz	r0, 800c052 <__i2b+0x1a>
 800c046:	4b05      	ldr	r3, [pc, #20]	; (800c05c <__i2b+0x24>)
 800c048:	4805      	ldr	r0, [pc, #20]	; (800c060 <__i2b+0x28>)
 800c04a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c04e:	f000 fda1 	bl	800cb94 <__assert_func>
 800c052:	2301      	movs	r3, #1
 800c054:	6144      	str	r4, [r0, #20]
 800c056:	6103      	str	r3, [r0, #16]
 800c058:	bd10      	pop	{r4, pc}
 800c05a:	bf00      	nop
 800c05c:	0800dccb 	.word	0x0800dccb
 800c060:	0800dd3c 	.word	0x0800dd3c

0800c064 <__multiply>:
 800c064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c068:	4691      	mov	r9, r2
 800c06a:	690a      	ldr	r2, [r1, #16]
 800c06c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c070:	429a      	cmp	r2, r3
 800c072:	bfb8      	it	lt
 800c074:	460b      	movlt	r3, r1
 800c076:	460c      	mov	r4, r1
 800c078:	bfbc      	itt	lt
 800c07a:	464c      	movlt	r4, r9
 800c07c:	4699      	movlt	r9, r3
 800c07e:	6927      	ldr	r7, [r4, #16]
 800c080:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c084:	68a3      	ldr	r3, [r4, #8]
 800c086:	6861      	ldr	r1, [r4, #4]
 800c088:	eb07 060a 	add.w	r6, r7, sl
 800c08c:	42b3      	cmp	r3, r6
 800c08e:	b085      	sub	sp, #20
 800c090:	bfb8      	it	lt
 800c092:	3101      	addlt	r1, #1
 800c094:	f7ff fed8 	bl	800be48 <_Balloc>
 800c098:	b930      	cbnz	r0, 800c0a8 <__multiply+0x44>
 800c09a:	4602      	mov	r2, r0
 800c09c:	4b44      	ldr	r3, [pc, #272]	; (800c1b0 <__multiply+0x14c>)
 800c09e:	4845      	ldr	r0, [pc, #276]	; (800c1b4 <__multiply+0x150>)
 800c0a0:	f240 115d 	movw	r1, #349	; 0x15d
 800c0a4:	f000 fd76 	bl	800cb94 <__assert_func>
 800c0a8:	f100 0514 	add.w	r5, r0, #20
 800c0ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0b0:	462b      	mov	r3, r5
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	4543      	cmp	r3, r8
 800c0b6:	d321      	bcc.n	800c0fc <__multiply+0x98>
 800c0b8:	f104 0314 	add.w	r3, r4, #20
 800c0bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0c0:	f109 0314 	add.w	r3, r9, #20
 800c0c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0c8:	9202      	str	r2, [sp, #8]
 800c0ca:	1b3a      	subs	r2, r7, r4
 800c0cc:	3a15      	subs	r2, #21
 800c0ce:	f022 0203 	bic.w	r2, r2, #3
 800c0d2:	3204      	adds	r2, #4
 800c0d4:	f104 0115 	add.w	r1, r4, #21
 800c0d8:	428f      	cmp	r7, r1
 800c0da:	bf38      	it	cc
 800c0dc:	2204      	movcc	r2, #4
 800c0de:	9201      	str	r2, [sp, #4]
 800c0e0:	9a02      	ldr	r2, [sp, #8]
 800c0e2:	9303      	str	r3, [sp, #12]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d80c      	bhi.n	800c102 <__multiply+0x9e>
 800c0e8:	2e00      	cmp	r6, #0
 800c0ea:	dd03      	ble.n	800c0f4 <__multiply+0x90>
 800c0ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d05a      	beq.n	800c1aa <__multiply+0x146>
 800c0f4:	6106      	str	r6, [r0, #16]
 800c0f6:	b005      	add	sp, #20
 800c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fc:	f843 2b04 	str.w	r2, [r3], #4
 800c100:	e7d8      	b.n	800c0b4 <__multiply+0x50>
 800c102:	f8b3 a000 	ldrh.w	sl, [r3]
 800c106:	f1ba 0f00 	cmp.w	sl, #0
 800c10a:	d024      	beq.n	800c156 <__multiply+0xf2>
 800c10c:	f104 0e14 	add.w	lr, r4, #20
 800c110:	46a9      	mov	r9, r5
 800c112:	f04f 0c00 	mov.w	ip, #0
 800c116:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c11a:	f8d9 1000 	ldr.w	r1, [r9]
 800c11e:	fa1f fb82 	uxth.w	fp, r2
 800c122:	b289      	uxth	r1, r1
 800c124:	fb0a 110b 	mla	r1, sl, fp, r1
 800c128:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c12c:	f8d9 2000 	ldr.w	r2, [r9]
 800c130:	4461      	add	r1, ip
 800c132:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c136:	fb0a c20b 	mla	r2, sl, fp, ip
 800c13a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c13e:	b289      	uxth	r1, r1
 800c140:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c144:	4577      	cmp	r7, lr
 800c146:	f849 1b04 	str.w	r1, [r9], #4
 800c14a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c14e:	d8e2      	bhi.n	800c116 <__multiply+0xb2>
 800c150:	9a01      	ldr	r2, [sp, #4]
 800c152:	f845 c002 	str.w	ip, [r5, r2]
 800c156:	9a03      	ldr	r2, [sp, #12]
 800c158:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c15c:	3304      	adds	r3, #4
 800c15e:	f1b9 0f00 	cmp.w	r9, #0
 800c162:	d020      	beq.n	800c1a6 <__multiply+0x142>
 800c164:	6829      	ldr	r1, [r5, #0]
 800c166:	f104 0c14 	add.w	ip, r4, #20
 800c16a:	46ae      	mov	lr, r5
 800c16c:	f04f 0a00 	mov.w	sl, #0
 800c170:	f8bc b000 	ldrh.w	fp, [ip]
 800c174:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c178:	fb09 220b 	mla	r2, r9, fp, r2
 800c17c:	4492      	add	sl, r2
 800c17e:	b289      	uxth	r1, r1
 800c180:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c184:	f84e 1b04 	str.w	r1, [lr], #4
 800c188:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c18c:	f8be 1000 	ldrh.w	r1, [lr]
 800c190:	0c12      	lsrs	r2, r2, #16
 800c192:	fb09 1102 	mla	r1, r9, r2, r1
 800c196:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c19a:	4567      	cmp	r7, ip
 800c19c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1a0:	d8e6      	bhi.n	800c170 <__multiply+0x10c>
 800c1a2:	9a01      	ldr	r2, [sp, #4]
 800c1a4:	50a9      	str	r1, [r5, r2]
 800c1a6:	3504      	adds	r5, #4
 800c1a8:	e79a      	b.n	800c0e0 <__multiply+0x7c>
 800c1aa:	3e01      	subs	r6, #1
 800c1ac:	e79c      	b.n	800c0e8 <__multiply+0x84>
 800c1ae:	bf00      	nop
 800c1b0:	0800dccb 	.word	0x0800dccb
 800c1b4:	0800dd3c 	.word	0x0800dd3c

0800c1b8 <__pow5mult>:
 800c1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1bc:	4615      	mov	r5, r2
 800c1be:	f012 0203 	ands.w	r2, r2, #3
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	d007      	beq.n	800c1d8 <__pow5mult+0x20>
 800c1c8:	4c25      	ldr	r4, [pc, #148]	; (800c260 <__pow5mult+0xa8>)
 800c1ca:	3a01      	subs	r2, #1
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1d2:	f7ff fe9b 	bl	800bf0c <__multadd>
 800c1d6:	4607      	mov	r7, r0
 800c1d8:	10ad      	asrs	r5, r5, #2
 800c1da:	d03d      	beq.n	800c258 <__pow5mult+0xa0>
 800c1dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1de:	b97c      	cbnz	r4, 800c200 <__pow5mult+0x48>
 800c1e0:	2010      	movs	r0, #16
 800c1e2:	f7fd fe83 	bl	8009eec <malloc>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	6270      	str	r0, [r6, #36]	; 0x24
 800c1ea:	b928      	cbnz	r0, 800c1f8 <__pow5mult+0x40>
 800c1ec:	4b1d      	ldr	r3, [pc, #116]	; (800c264 <__pow5mult+0xac>)
 800c1ee:	481e      	ldr	r0, [pc, #120]	; (800c268 <__pow5mult+0xb0>)
 800c1f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c1f4:	f000 fcce 	bl	800cb94 <__assert_func>
 800c1f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1fc:	6004      	str	r4, [r0, #0]
 800c1fe:	60c4      	str	r4, [r0, #12]
 800c200:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c204:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c208:	b94c      	cbnz	r4, 800c21e <__pow5mult+0x66>
 800c20a:	f240 2171 	movw	r1, #625	; 0x271
 800c20e:	4630      	mov	r0, r6
 800c210:	f7ff ff12 	bl	800c038 <__i2b>
 800c214:	2300      	movs	r3, #0
 800c216:	f8c8 0008 	str.w	r0, [r8, #8]
 800c21a:	4604      	mov	r4, r0
 800c21c:	6003      	str	r3, [r0, #0]
 800c21e:	f04f 0900 	mov.w	r9, #0
 800c222:	07eb      	lsls	r3, r5, #31
 800c224:	d50a      	bpl.n	800c23c <__pow5mult+0x84>
 800c226:	4639      	mov	r1, r7
 800c228:	4622      	mov	r2, r4
 800c22a:	4630      	mov	r0, r6
 800c22c:	f7ff ff1a 	bl	800c064 <__multiply>
 800c230:	4639      	mov	r1, r7
 800c232:	4680      	mov	r8, r0
 800c234:	4630      	mov	r0, r6
 800c236:	f7ff fe47 	bl	800bec8 <_Bfree>
 800c23a:	4647      	mov	r7, r8
 800c23c:	106d      	asrs	r5, r5, #1
 800c23e:	d00b      	beq.n	800c258 <__pow5mult+0xa0>
 800c240:	6820      	ldr	r0, [r4, #0]
 800c242:	b938      	cbnz	r0, 800c254 <__pow5mult+0x9c>
 800c244:	4622      	mov	r2, r4
 800c246:	4621      	mov	r1, r4
 800c248:	4630      	mov	r0, r6
 800c24a:	f7ff ff0b 	bl	800c064 <__multiply>
 800c24e:	6020      	str	r0, [r4, #0]
 800c250:	f8c0 9000 	str.w	r9, [r0]
 800c254:	4604      	mov	r4, r0
 800c256:	e7e4      	b.n	800c222 <__pow5mult+0x6a>
 800c258:	4638      	mov	r0, r7
 800c25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c25e:	bf00      	nop
 800c260:	0800de88 	.word	0x0800de88
 800c264:	0800dc59 	.word	0x0800dc59
 800c268:	0800dd3c 	.word	0x0800dd3c

0800c26c <__lshift>:
 800c26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c270:	460c      	mov	r4, r1
 800c272:	6849      	ldr	r1, [r1, #4]
 800c274:	6923      	ldr	r3, [r4, #16]
 800c276:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c27a:	68a3      	ldr	r3, [r4, #8]
 800c27c:	4607      	mov	r7, r0
 800c27e:	4691      	mov	r9, r2
 800c280:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c284:	f108 0601 	add.w	r6, r8, #1
 800c288:	42b3      	cmp	r3, r6
 800c28a:	db0b      	blt.n	800c2a4 <__lshift+0x38>
 800c28c:	4638      	mov	r0, r7
 800c28e:	f7ff fddb 	bl	800be48 <_Balloc>
 800c292:	4605      	mov	r5, r0
 800c294:	b948      	cbnz	r0, 800c2aa <__lshift+0x3e>
 800c296:	4602      	mov	r2, r0
 800c298:	4b2a      	ldr	r3, [pc, #168]	; (800c344 <__lshift+0xd8>)
 800c29a:	482b      	ldr	r0, [pc, #172]	; (800c348 <__lshift+0xdc>)
 800c29c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c2a0:	f000 fc78 	bl	800cb94 <__assert_func>
 800c2a4:	3101      	adds	r1, #1
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	e7ee      	b.n	800c288 <__lshift+0x1c>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f100 0114 	add.w	r1, r0, #20
 800c2b0:	f100 0210 	add.w	r2, r0, #16
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	4553      	cmp	r3, sl
 800c2b8:	db37      	blt.n	800c32a <__lshift+0xbe>
 800c2ba:	6920      	ldr	r0, [r4, #16]
 800c2bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2c0:	f104 0314 	add.w	r3, r4, #20
 800c2c4:	f019 091f 	ands.w	r9, r9, #31
 800c2c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c2d0:	d02f      	beq.n	800c332 <__lshift+0xc6>
 800c2d2:	f1c9 0e20 	rsb	lr, r9, #32
 800c2d6:	468a      	mov	sl, r1
 800c2d8:	f04f 0c00 	mov.w	ip, #0
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	fa02 f209 	lsl.w	r2, r2, r9
 800c2e2:	ea42 020c 	orr.w	r2, r2, ip
 800c2e6:	f84a 2b04 	str.w	r2, [sl], #4
 800c2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ee:	4298      	cmp	r0, r3
 800c2f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c2f4:	d8f2      	bhi.n	800c2dc <__lshift+0x70>
 800c2f6:	1b03      	subs	r3, r0, r4
 800c2f8:	3b15      	subs	r3, #21
 800c2fa:	f023 0303 	bic.w	r3, r3, #3
 800c2fe:	3304      	adds	r3, #4
 800c300:	f104 0215 	add.w	r2, r4, #21
 800c304:	4290      	cmp	r0, r2
 800c306:	bf38      	it	cc
 800c308:	2304      	movcc	r3, #4
 800c30a:	f841 c003 	str.w	ip, [r1, r3]
 800c30e:	f1bc 0f00 	cmp.w	ip, #0
 800c312:	d001      	beq.n	800c318 <__lshift+0xac>
 800c314:	f108 0602 	add.w	r6, r8, #2
 800c318:	3e01      	subs	r6, #1
 800c31a:	4638      	mov	r0, r7
 800c31c:	612e      	str	r6, [r5, #16]
 800c31e:	4621      	mov	r1, r4
 800c320:	f7ff fdd2 	bl	800bec8 <_Bfree>
 800c324:	4628      	mov	r0, r5
 800c326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c32a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c32e:	3301      	adds	r3, #1
 800c330:	e7c1      	b.n	800c2b6 <__lshift+0x4a>
 800c332:	3904      	subs	r1, #4
 800c334:	f853 2b04 	ldr.w	r2, [r3], #4
 800c338:	f841 2f04 	str.w	r2, [r1, #4]!
 800c33c:	4298      	cmp	r0, r3
 800c33e:	d8f9      	bhi.n	800c334 <__lshift+0xc8>
 800c340:	e7ea      	b.n	800c318 <__lshift+0xac>
 800c342:	bf00      	nop
 800c344:	0800dccb 	.word	0x0800dccb
 800c348:	0800dd3c 	.word	0x0800dd3c

0800c34c <__mcmp>:
 800c34c:	b530      	push	{r4, r5, lr}
 800c34e:	6902      	ldr	r2, [r0, #16]
 800c350:	690c      	ldr	r4, [r1, #16]
 800c352:	1b12      	subs	r2, r2, r4
 800c354:	d10e      	bne.n	800c374 <__mcmp+0x28>
 800c356:	f100 0314 	add.w	r3, r0, #20
 800c35a:	3114      	adds	r1, #20
 800c35c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c360:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c364:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c368:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c36c:	42a5      	cmp	r5, r4
 800c36e:	d003      	beq.n	800c378 <__mcmp+0x2c>
 800c370:	d305      	bcc.n	800c37e <__mcmp+0x32>
 800c372:	2201      	movs	r2, #1
 800c374:	4610      	mov	r0, r2
 800c376:	bd30      	pop	{r4, r5, pc}
 800c378:	4283      	cmp	r3, r0
 800c37a:	d3f3      	bcc.n	800c364 <__mcmp+0x18>
 800c37c:	e7fa      	b.n	800c374 <__mcmp+0x28>
 800c37e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c382:	e7f7      	b.n	800c374 <__mcmp+0x28>

0800c384 <__mdiff>:
 800c384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c388:	460c      	mov	r4, r1
 800c38a:	4606      	mov	r6, r0
 800c38c:	4611      	mov	r1, r2
 800c38e:	4620      	mov	r0, r4
 800c390:	4690      	mov	r8, r2
 800c392:	f7ff ffdb 	bl	800c34c <__mcmp>
 800c396:	1e05      	subs	r5, r0, #0
 800c398:	d110      	bne.n	800c3bc <__mdiff+0x38>
 800c39a:	4629      	mov	r1, r5
 800c39c:	4630      	mov	r0, r6
 800c39e:	f7ff fd53 	bl	800be48 <_Balloc>
 800c3a2:	b930      	cbnz	r0, 800c3b2 <__mdiff+0x2e>
 800c3a4:	4b3a      	ldr	r3, [pc, #232]	; (800c490 <__mdiff+0x10c>)
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	f240 2132 	movw	r1, #562	; 0x232
 800c3ac:	4839      	ldr	r0, [pc, #228]	; (800c494 <__mdiff+0x110>)
 800c3ae:	f000 fbf1 	bl	800cb94 <__assert_func>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3bc:	bfa4      	itt	ge
 800c3be:	4643      	movge	r3, r8
 800c3c0:	46a0      	movge	r8, r4
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3c8:	bfa6      	itte	ge
 800c3ca:	461c      	movge	r4, r3
 800c3cc:	2500      	movge	r5, #0
 800c3ce:	2501      	movlt	r5, #1
 800c3d0:	f7ff fd3a 	bl	800be48 <_Balloc>
 800c3d4:	b920      	cbnz	r0, 800c3e0 <__mdiff+0x5c>
 800c3d6:	4b2e      	ldr	r3, [pc, #184]	; (800c490 <__mdiff+0x10c>)
 800c3d8:	4602      	mov	r2, r0
 800c3da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3de:	e7e5      	b.n	800c3ac <__mdiff+0x28>
 800c3e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3e4:	6926      	ldr	r6, [r4, #16]
 800c3e6:	60c5      	str	r5, [r0, #12]
 800c3e8:	f104 0914 	add.w	r9, r4, #20
 800c3ec:	f108 0514 	add.w	r5, r8, #20
 800c3f0:	f100 0e14 	add.w	lr, r0, #20
 800c3f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3fc:	f108 0210 	add.w	r2, r8, #16
 800c400:	46f2      	mov	sl, lr
 800c402:	2100      	movs	r1, #0
 800c404:	f859 3b04 	ldr.w	r3, [r9], #4
 800c408:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c40c:	fa1f f883 	uxth.w	r8, r3
 800c410:	fa11 f18b 	uxtah	r1, r1, fp
 800c414:	0c1b      	lsrs	r3, r3, #16
 800c416:	eba1 0808 	sub.w	r8, r1, r8
 800c41a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c41e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c422:	fa1f f888 	uxth.w	r8, r8
 800c426:	1419      	asrs	r1, r3, #16
 800c428:	454e      	cmp	r6, r9
 800c42a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c42e:	f84a 3b04 	str.w	r3, [sl], #4
 800c432:	d8e7      	bhi.n	800c404 <__mdiff+0x80>
 800c434:	1b33      	subs	r3, r6, r4
 800c436:	3b15      	subs	r3, #21
 800c438:	f023 0303 	bic.w	r3, r3, #3
 800c43c:	3304      	adds	r3, #4
 800c43e:	3415      	adds	r4, #21
 800c440:	42a6      	cmp	r6, r4
 800c442:	bf38      	it	cc
 800c444:	2304      	movcc	r3, #4
 800c446:	441d      	add	r5, r3
 800c448:	4473      	add	r3, lr
 800c44a:	469e      	mov	lr, r3
 800c44c:	462e      	mov	r6, r5
 800c44e:	4566      	cmp	r6, ip
 800c450:	d30e      	bcc.n	800c470 <__mdiff+0xec>
 800c452:	f10c 0203 	add.w	r2, ip, #3
 800c456:	1b52      	subs	r2, r2, r5
 800c458:	f022 0203 	bic.w	r2, r2, #3
 800c45c:	3d03      	subs	r5, #3
 800c45e:	45ac      	cmp	ip, r5
 800c460:	bf38      	it	cc
 800c462:	2200      	movcc	r2, #0
 800c464:	441a      	add	r2, r3
 800c466:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c46a:	b17b      	cbz	r3, 800c48c <__mdiff+0x108>
 800c46c:	6107      	str	r7, [r0, #16]
 800c46e:	e7a3      	b.n	800c3b8 <__mdiff+0x34>
 800c470:	f856 8b04 	ldr.w	r8, [r6], #4
 800c474:	fa11 f288 	uxtah	r2, r1, r8
 800c478:	1414      	asrs	r4, r2, #16
 800c47a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c47e:	b292      	uxth	r2, r2
 800c480:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c484:	f84e 2b04 	str.w	r2, [lr], #4
 800c488:	1421      	asrs	r1, r4, #16
 800c48a:	e7e0      	b.n	800c44e <__mdiff+0xca>
 800c48c:	3f01      	subs	r7, #1
 800c48e:	e7ea      	b.n	800c466 <__mdiff+0xe2>
 800c490:	0800dccb 	.word	0x0800dccb
 800c494:	0800dd3c 	.word	0x0800dd3c

0800c498 <__d2b>:
 800c498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c49c:	4689      	mov	r9, r1
 800c49e:	2101      	movs	r1, #1
 800c4a0:	ec57 6b10 	vmov	r6, r7, d0
 800c4a4:	4690      	mov	r8, r2
 800c4a6:	f7ff fccf 	bl	800be48 <_Balloc>
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	b930      	cbnz	r0, 800c4bc <__d2b+0x24>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	4b25      	ldr	r3, [pc, #148]	; (800c548 <__d2b+0xb0>)
 800c4b2:	4826      	ldr	r0, [pc, #152]	; (800c54c <__d2b+0xb4>)
 800c4b4:	f240 310a 	movw	r1, #778	; 0x30a
 800c4b8:	f000 fb6c 	bl	800cb94 <__assert_func>
 800c4bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c4c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4c4:	bb35      	cbnz	r5, 800c514 <__d2b+0x7c>
 800c4c6:	2e00      	cmp	r6, #0
 800c4c8:	9301      	str	r3, [sp, #4]
 800c4ca:	d028      	beq.n	800c51e <__d2b+0x86>
 800c4cc:	4668      	mov	r0, sp
 800c4ce:	9600      	str	r6, [sp, #0]
 800c4d0:	f7ff fd82 	bl	800bfd8 <__lo0bits>
 800c4d4:	9900      	ldr	r1, [sp, #0]
 800c4d6:	b300      	cbz	r0, 800c51a <__d2b+0x82>
 800c4d8:	9a01      	ldr	r2, [sp, #4]
 800c4da:	f1c0 0320 	rsb	r3, r0, #32
 800c4de:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e2:	430b      	orrs	r3, r1
 800c4e4:	40c2      	lsrs	r2, r0
 800c4e6:	6163      	str	r3, [r4, #20]
 800c4e8:	9201      	str	r2, [sp, #4]
 800c4ea:	9b01      	ldr	r3, [sp, #4]
 800c4ec:	61a3      	str	r3, [r4, #24]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	bf14      	ite	ne
 800c4f2:	2202      	movne	r2, #2
 800c4f4:	2201      	moveq	r2, #1
 800c4f6:	6122      	str	r2, [r4, #16]
 800c4f8:	b1d5      	cbz	r5, 800c530 <__d2b+0x98>
 800c4fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c4fe:	4405      	add	r5, r0
 800c500:	f8c9 5000 	str.w	r5, [r9]
 800c504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c508:	f8c8 0000 	str.w	r0, [r8]
 800c50c:	4620      	mov	r0, r4
 800c50e:	b003      	add	sp, #12
 800c510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c518:	e7d5      	b.n	800c4c6 <__d2b+0x2e>
 800c51a:	6161      	str	r1, [r4, #20]
 800c51c:	e7e5      	b.n	800c4ea <__d2b+0x52>
 800c51e:	a801      	add	r0, sp, #4
 800c520:	f7ff fd5a 	bl	800bfd8 <__lo0bits>
 800c524:	9b01      	ldr	r3, [sp, #4]
 800c526:	6163      	str	r3, [r4, #20]
 800c528:	2201      	movs	r2, #1
 800c52a:	6122      	str	r2, [r4, #16]
 800c52c:	3020      	adds	r0, #32
 800c52e:	e7e3      	b.n	800c4f8 <__d2b+0x60>
 800c530:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c534:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c538:	f8c9 0000 	str.w	r0, [r9]
 800c53c:	6918      	ldr	r0, [r3, #16]
 800c53e:	f7ff fd2b 	bl	800bf98 <__hi0bits>
 800c542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c546:	e7df      	b.n	800c508 <__d2b+0x70>
 800c548:	0800dccb 	.word	0x0800dccb
 800c54c:	0800dd3c 	.word	0x0800dd3c

0800c550 <_calloc_r>:
 800c550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c552:	fba1 2402 	umull	r2, r4, r1, r2
 800c556:	b94c      	cbnz	r4, 800c56c <_calloc_r+0x1c>
 800c558:	4611      	mov	r1, r2
 800c55a:	9201      	str	r2, [sp, #4]
 800c55c:	f7fd fd4a 	bl	8009ff4 <_malloc_r>
 800c560:	9a01      	ldr	r2, [sp, #4]
 800c562:	4605      	mov	r5, r0
 800c564:	b930      	cbnz	r0, 800c574 <_calloc_r+0x24>
 800c566:	4628      	mov	r0, r5
 800c568:	b003      	add	sp, #12
 800c56a:	bd30      	pop	{r4, r5, pc}
 800c56c:	220c      	movs	r2, #12
 800c56e:	6002      	str	r2, [r0, #0]
 800c570:	2500      	movs	r5, #0
 800c572:	e7f8      	b.n	800c566 <_calloc_r+0x16>
 800c574:	4621      	mov	r1, r4
 800c576:	f7fd fcc9 	bl	8009f0c <memset>
 800c57a:	e7f4      	b.n	800c566 <_calloc_r+0x16>

0800c57c <__ssputs_r>:
 800c57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c580:	688e      	ldr	r6, [r1, #8]
 800c582:	429e      	cmp	r6, r3
 800c584:	4682      	mov	sl, r0
 800c586:	460c      	mov	r4, r1
 800c588:	4690      	mov	r8, r2
 800c58a:	461f      	mov	r7, r3
 800c58c:	d838      	bhi.n	800c600 <__ssputs_r+0x84>
 800c58e:	898a      	ldrh	r2, [r1, #12]
 800c590:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c594:	d032      	beq.n	800c5fc <__ssputs_r+0x80>
 800c596:	6825      	ldr	r5, [r4, #0]
 800c598:	6909      	ldr	r1, [r1, #16]
 800c59a:	eba5 0901 	sub.w	r9, r5, r1
 800c59e:	6965      	ldr	r5, [r4, #20]
 800c5a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	444b      	add	r3, r9
 800c5ac:	106d      	asrs	r5, r5, #1
 800c5ae:	429d      	cmp	r5, r3
 800c5b0:	bf38      	it	cc
 800c5b2:	461d      	movcc	r5, r3
 800c5b4:	0553      	lsls	r3, r2, #21
 800c5b6:	d531      	bpl.n	800c61c <__ssputs_r+0xa0>
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	f7fd fd1b 	bl	8009ff4 <_malloc_r>
 800c5be:	4606      	mov	r6, r0
 800c5c0:	b950      	cbnz	r0, 800c5d8 <__ssputs_r+0x5c>
 800c5c2:	230c      	movs	r3, #12
 800c5c4:	f8ca 3000 	str.w	r3, [sl]
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5ce:	81a3      	strh	r3, [r4, #12]
 800c5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5d8:	6921      	ldr	r1, [r4, #16]
 800c5da:	464a      	mov	r2, r9
 800c5dc:	f7ff fc1a 	bl	800be14 <memcpy>
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ea:	81a3      	strh	r3, [r4, #12]
 800c5ec:	6126      	str	r6, [r4, #16]
 800c5ee:	6165      	str	r5, [r4, #20]
 800c5f0:	444e      	add	r6, r9
 800c5f2:	eba5 0509 	sub.w	r5, r5, r9
 800c5f6:	6026      	str	r6, [r4, #0]
 800c5f8:	60a5      	str	r5, [r4, #8]
 800c5fa:	463e      	mov	r6, r7
 800c5fc:	42be      	cmp	r6, r7
 800c5fe:	d900      	bls.n	800c602 <__ssputs_r+0x86>
 800c600:	463e      	mov	r6, r7
 800c602:	6820      	ldr	r0, [r4, #0]
 800c604:	4632      	mov	r2, r6
 800c606:	4641      	mov	r1, r8
 800c608:	f000 fb4a 	bl	800cca0 <memmove>
 800c60c:	68a3      	ldr	r3, [r4, #8]
 800c60e:	1b9b      	subs	r3, r3, r6
 800c610:	60a3      	str	r3, [r4, #8]
 800c612:	6823      	ldr	r3, [r4, #0]
 800c614:	4433      	add	r3, r6
 800c616:	6023      	str	r3, [r4, #0]
 800c618:	2000      	movs	r0, #0
 800c61a:	e7db      	b.n	800c5d4 <__ssputs_r+0x58>
 800c61c:	462a      	mov	r2, r5
 800c61e:	f000 fb59 	bl	800ccd4 <_realloc_r>
 800c622:	4606      	mov	r6, r0
 800c624:	2800      	cmp	r0, #0
 800c626:	d1e1      	bne.n	800c5ec <__ssputs_r+0x70>
 800c628:	6921      	ldr	r1, [r4, #16]
 800c62a:	4650      	mov	r0, sl
 800c62c:	f7fd fc76 	bl	8009f1c <_free_r>
 800c630:	e7c7      	b.n	800c5c2 <__ssputs_r+0x46>
	...

0800c634 <_svfiprintf_r>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	4698      	mov	r8, r3
 800c63a:	898b      	ldrh	r3, [r1, #12]
 800c63c:	061b      	lsls	r3, r3, #24
 800c63e:	b09d      	sub	sp, #116	; 0x74
 800c640:	4607      	mov	r7, r0
 800c642:	460d      	mov	r5, r1
 800c644:	4614      	mov	r4, r2
 800c646:	d50e      	bpl.n	800c666 <_svfiprintf_r+0x32>
 800c648:	690b      	ldr	r3, [r1, #16]
 800c64a:	b963      	cbnz	r3, 800c666 <_svfiprintf_r+0x32>
 800c64c:	2140      	movs	r1, #64	; 0x40
 800c64e:	f7fd fcd1 	bl	8009ff4 <_malloc_r>
 800c652:	6028      	str	r0, [r5, #0]
 800c654:	6128      	str	r0, [r5, #16]
 800c656:	b920      	cbnz	r0, 800c662 <_svfiprintf_r+0x2e>
 800c658:	230c      	movs	r3, #12
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c660:	e0d1      	b.n	800c806 <_svfiprintf_r+0x1d2>
 800c662:	2340      	movs	r3, #64	; 0x40
 800c664:	616b      	str	r3, [r5, #20]
 800c666:	2300      	movs	r3, #0
 800c668:	9309      	str	r3, [sp, #36]	; 0x24
 800c66a:	2320      	movs	r3, #32
 800c66c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c670:	f8cd 800c 	str.w	r8, [sp, #12]
 800c674:	2330      	movs	r3, #48	; 0x30
 800c676:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c820 <_svfiprintf_r+0x1ec>
 800c67a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c67e:	f04f 0901 	mov.w	r9, #1
 800c682:	4623      	mov	r3, r4
 800c684:	469a      	mov	sl, r3
 800c686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c68a:	b10a      	cbz	r2, 800c690 <_svfiprintf_r+0x5c>
 800c68c:	2a25      	cmp	r2, #37	; 0x25
 800c68e:	d1f9      	bne.n	800c684 <_svfiprintf_r+0x50>
 800c690:	ebba 0b04 	subs.w	fp, sl, r4
 800c694:	d00b      	beq.n	800c6ae <_svfiprintf_r+0x7a>
 800c696:	465b      	mov	r3, fp
 800c698:	4622      	mov	r2, r4
 800c69a:	4629      	mov	r1, r5
 800c69c:	4638      	mov	r0, r7
 800c69e:	f7ff ff6d 	bl	800c57c <__ssputs_r>
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	f000 80aa 	beq.w	800c7fc <_svfiprintf_r+0x1c8>
 800c6a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6aa:	445a      	add	r2, fp
 800c6ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c6ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 80a2 	beq.w	800c7fc <_svfiprintf_r+0x1c8>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6c2:	f10a 0a01 	add.w	sl, sl, #1
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	9307      	str	r3, [sp, #28]
 800c6ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6ce:	931a      	str	r3, [sp, #104]	; 0x68
 800c6d0:	4654      	mov	r4, sl
 800c6d2:	2205      	movs	r2, #5
 800c6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d8:	4851      	ldr	r0, [pc, #324]	; (800c820 <_svfiprintf_r+0x1ec>)
 800c6da:	f7f3 fd99 	bl	8000210 <memchr>
 800c6de:	9a04      	ldr	r2, [sp, #16]
 800c6e0:	b9d8      	cbnz	r0, 800c71a <_svfiprintf_r+0xe6>
 800c6e2:	06d0      	lsls	r0, r2, #27
 800c6e4:	bf44      	itt	mi
 800c6e6:	2320      	movmi	r3, #32
 800c6e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ec:	0711      	lsls	r1, r2, #28
 800c6ee:	bf44      	itt	mi
 800c6f0:	232b      	movmi	r3, #43	; 0x2b
 800c6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c6fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c6fc:	d015      	beq.n	800c72a <_svfiprintf_r+0xf6>
 800c6fe:	9a07      	ldr	r2, [sp, #28]
 800c700:	4654      	mov	r4, sl
 800c702:	2000      	movs	r0, #0
 800c704:	f04f 0c0a 	mov.w	ip, #10
 800c708:	4621      	mov	r1, r4
 800c70a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c70e:	3b30      	subs	r3, #48	; 0x30
 800c710:	2b09      	cmp	r3, #9
 800c712:	d94e      	bls.n	800c7b2 <_svfiprintf_r+0x17e>
 800c714:	b1b0      	cbz	r0, 800c744 <_svfiprintf_r+0x110>
 800c716:	9207      	str	r2, [sp, #28]
 800c718:	e014      	b.n	800c744 <_svfiprintf_r+0x110>
 800c71a:	eba0 0308 	sub.w	r3, r0, r8
 800c71e:	fa09 f303 	lsl.w	r3, r9, r3
 800c722:	4313      	orrs	r3, r2
 800c724:	9304      	str	r3, [sp, #16]
 800c726:	46a2      	mov	sl, r4
 800c728:	e7d2      	b.n	800c6d0 <_svfiprintf_r+0x9c>
 800c72a:	9b03      	ldr	r3, [sp, #12]
 800c72c:	1d19      	adds	r1, r3, #4
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	9103      	str	r1, [sp, #12]
 800c732:	2b00      	cmp	r3, #0
 800c734:	bfbb      	ittet	lt
 800c736:	425b      	neglt	r3, r3
 800c738:	f042 0202 	orrlt.w	r2, r2, #2
 800c73c:	9307      	strge	r3, [sp, #28]
 800c73e:	9307      	strlt	r3, [sp, #28]
 800c740:	bfb8      	it	lt
 800c742:	9204      	strlt	r2, [sp, #16]
 800c744:	7823      	ldrb	r3, [r4, #0]
 800c746:	2b2e      	cmp	r3, #46	; 0x2e
 800c748:	d10c      	bne.n	800c764 <_svfiprintf_r+0x130>
 800c74a:	7863      	ldrb	r3, [r4, #1]
 800c74c:	2b2a      	cmp	r3, #42	; 0x2a
 800c74e:	d135      	bne.n	800c7bc <_svfiprintf_r+0x188>
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	1d1a      	adds	r2, r3, #4
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	9203      	str	r2, [sp, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	bfb8      	it	lt
 800c75c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c760:	3402      	adds	r4, #2
 800c762:	9305      	str	r3, [sp, #20]
 800c764:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c830 <_svfiprintf_r+0x1fc>
 800c768:	7821      	ldrb	r1, [r4, #0]
 800c76a:	2203      	movs	r2, #3
 800c76c:	4650      	mov	r0, sl
 800c76e:	f7f3 fd4f 	bl	8000210 <memchr>
 800c772:	b140      	cbz	r0, 800c786 <_svfiprintf_r+0x152>
 800c774:	2340      	movs	r3, #64	; 0x40
 800c776:	eba0 000a 	sub.w	r0, r0, sl
 800c77a:	fa03 f000 	lsl.w	r0, r3, r0
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	4303      	orrs	r3, r0
 800c782:	3401      	adds	r4, #1
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c78a:	4826      	ldr	r0, [pc, #152]	; (800c824 <_svfiprintf_r+0x1f0>)
 800c78c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c790:	2206      	movs	r2, #6
 800c792:	f7f3 fd3d 	bl	8000210 <memchr>
 800c796:	2800      	cmp	r0, #0
 800c798:	d038      	beq.n	800c80c <_svfiprintf_r+0x1d8>
 800c79a:	4b23      	ldr	r3, [pc, #140]	; (800c828 <_svfiprintf_r+0x1f4>)
 800c79c:	bb1b      	cbnz	r3, 800c7e6 <_svfiprintf_r+0x1b2>
 800c79e:	9b03      	ldr	r3, [sp, #12]
 800c7a0:	3307      	adds	r3, #7
 800c7a2:	f023 0307 	bic.w	r3, r3, #7
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	9303      	str	r3, [sp, #12]
 800c7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ac:	4433      	add	r3, r6
 800c7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b0:	e767      	b.n	800c682 <_svfiprintf_r+0x4e>
 800c7b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	2001      	movs	r0, #1
 800c7ba:	e7a5      	b.n	800c708 <_svfiprintf_r+0xd4>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	3401      	adds	r4, #1
 800c7c0:	9305      	str	r3, [sp, #20]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	f04f 0c0a 	mov.w	ip, #10
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ce:	3a30      	subs	r2, #48	; 0x30
 800c7d0:	2a09      	cmp	r2, #9
 800c7d2:	d903      	bls.n	800c7dc <_svfiprintf_r+0x1a8>
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d0c5      	beq.n	800c764 <_svfiprintf_r+0x130>
 800c7d8:	9105      	str	r1, [sp, #20]
 800c7da:	e7c3      	b.n	800c764 <_svfiprintf_r+0x130>
 800c7dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e7f0      	b.n	800c7c8 <_svfiprintf_r+0x194>
 800c7e6:	ab03      	add	r3, sp, #12
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	462a      	mov	r2, r5
 800c7ec:	4b0f      	ldr	r3, [pc, #60]	; (800c82c <_svfiprintf_r+0x1f8>)
 800c7ee:	a904      	add	r1, sp, #16
 800c7f0:	4638      	mov	r0, r7
 800c7f2:	f7fd fd13 	bl	800a21c <_printf_float>
 800c7f6:	1c42      	adds	r2, r0, #1
 800c7f8:	4606      	mov	r6, r0
 800c7fa:	d1d6      	bne.n	800c7aa <_svfiprintf_r+0x176>
 800c7fc:	89ab      	ldrh	r3, [r5, #12]
 800c7fe:	065b      	lsls	r3, r3, #25
 800c800:	f53f af2c 	bmi.w	800c65c <_svfiprintf_r+0x28>
 800c804:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c806:	b01d      	add	sp, #116	; 0x74
 800c808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80c:	ab03      	add	r3, sp, #12
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	462a      	mov	r2, r5
 800c812:	4b06      	ldr	r3, [pc, #24]	; (800c82c <_svfiprintf_r+0x1f8>)
 800c814:	a904      	add	r1, sp, #16
 800c816:	4638      	mov	r0, r7
 800c818:	f7fd ffa4 	bl	800a764 <_printf_i>
 800c81c:	e7eb      	b.n	800c7f6 <_svfiprintf_r+0x1c2>
 800c81e:	bf00      	nop
 800c820:	0800de94 	.word	0x0800de94
 800c824:	0800de9e 	.word	0x0800de9e
 800c828:	0800a21d 	.word	0x0800a21d
 800c82c:	0800c57d 	.word	0x0800c57d
 800c830:	0800de9a 	.word	0x0800de9a

0800c834 <__sfputc_r>:
 800c834:	6893      	ldr	r3, [r2, #8]
 800c836:	3b01      	subs	r3, #1
 800c838:	2b00      	cmp	r3, #0
 800c83a:	b410      	push	{r4}
 800c83c:	6093      	str	r3, [r2, #8]
 800c83e:	da08      	bge.n	800c852 <__sfputc_r+0x1e>
 800c840:	6994      	ldr	r4, [r2, #24]
 800c842:	42a3      	cmp	r3, r4
 800c844:	db01      	blt.n	800c84a <__sfputc_r+0x16>
 800c846:	290a      	cmp	r1, #10
 800c848:	d103      	bne.n	800c852 <__sfputc_r+0x1e>
 800c84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c84e:	f7fe b981 	b.w	800ab54 <__swbuf_r>
 800c852:	6813      	ldr	r3, [r2, #0]
 800c854:	1c58      	adds	r0, r3, #1
 800c856:	6010      	str	r0, [r2, #0]
 800c858:	7019      	strb	r1, [r3, #0]
 800c85a:	4608      	mov	r0, r1
 800c85c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <__sfputs_r>:
 800c862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c864:	4606      	mov	r6, r0
 800c866:	460f      	mov	r7, r1
 800c868:	4614      	mov	r4, r2
 800c86a:	18d5      	adds	r5, r2, r3
 800c86c:	42ac      	cmp	r4, r5
 800c86e:	d101      	bne.n	800c874 <__sfputs_r+0x12>
 800c870:	2000      	movs	r0, #0
 800c872:	e007      	b.n	800c884 <__sfputs_r+0x22>
 800c874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c878:	463a      	mov	r2, r7
 800c87a:	4630      	mov	r0, r6
 800c87c:	f7ff ffda 	bl	800c834 <__sfputc_r>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d1f3      	bne.n	800c86c <__sfputs_r+0xa>
 800c884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c888 <_vfiprintf_r>:
 800c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c88c:	460d      	mov	r5, r1
 800c88e:	b09d      	sub	sp, #116	; 0x74
 800c890:	4614      	mov	r4, r2
 800c892:	4698      	mov	r8, r3
 800c894:	4606      	mov	r6, r0
 800c896:	b118      	cbz	r0, 800c8a0 <_vfiprintf_r+0x18>
 800c898:	6983      	ldr	r3, [r0, #24]
 800c89a:	b90b      	cbnz	r3, 800c8a0 <_vfiprintf_r+0x18>
 800c89c:	f7ff f9b0 	bl	800bc00 <__sinit>
 800c8a0:	4b89      	ldr	r3, [pc, #548]	; (800cac8 <_vfiprintf_r+0x240>)
 800c8a2:	429d      	cmp	r5, r3
 800c8a4:	d11b      	bne.n	800c8de <_vfiprintf_r+0x56>
 800c8a6:	6875      	ldr	r5, [r6, #4]
 800c8a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8aa:	07d9      	lsls	r1, r3, #31
 800c8ac:	d405      	bmi.n	800c8ba <_vfiprintf_r+0x32>
 800c8ae:	89ab      	ldrh	r3, [r5, #12]
 800c8b0:	059a      	lsls	r2, r3, #22
 800c8b2:	d402      	bmi.n	800c8ba <_vfiprintf_r+0x32>
 800c8b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8b6:	f7ff fa46 	bl	800bd46 <__retarget_lock_acquire_recursive>
 800c8ba:	89ab      	ldrh	r3, [r5, #12]
 800c8bc:	071b      	lsls	r3, r3, #28
 800c8be:	d501      	bpl.n	800c8c4 <_vfiprintf_r+0x3c>
 800c8c0:	692b      	ldr	r3, [r5, #16]
 800c8c2:	b9eb      	cbnz	r3, 800c900 <_vfiprintf_r+0x78>
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	f7fe f996 	bl	800abf8 <__swsetup_r>
 800c8cc:	b1c0      	cbz	r0, 800c900 <_vfiprintf_r+0x78>
 800c8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8d0:	07dc      	lsls	r4, r3, #31
 800c8d2:	d50e      	bpl.n	800c8f2 <_vfiprintf_r+0x6a>
 800c8d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8d8:	b01d      	add	sp, #116	; 0x74
 800c8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8de:	4b7b      	ldr	r3, [pc, #492]	; (800cacc <_vfiprintf_r+0x244>)
 800c8e0:	429d      	cmp	r5, r3
 800c8e2:	d101      	bne.n	800c8e8 <_vfiprintf_r+0x60>
 800c8e4:	68b5      	ldr	r5, [r6, #8]
 800c8e6:	e7df      	b.n	800c8a8 <_vfiprintf_r+0x20>
 800c8e8:	4b79      	ldr	r3, [pc, #484]	; (800cad0 <_vfiprintf_r+0x248>)
 800c8ea:	429d      	cmp	r5, r3
 800c8ec:	bf08      	it	eq
 800c8ee:	68f5      	ldreq	r5, [r6, #12]
 800c8f0:	e7da      	b.n	800c8a8 <_vfiprintf_r+0x20>
 800c8f2:	89ab      	ldrh	r3, [r5, #12]
 800c8f4:	0598      	lsls	r0, r3, #22
 800c8f6:	d4ed      	bmi.n	800c8d4 <_vfiprintf_r+0x4c>
 800c8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8fa:	f7ff fa25 	bl	800bd48 <__retarget_lock_release_recursive>
 800c8fe:	e7e9      	b.n	800c8d4 <_vfiprintf_r+0x4c>
 800c900:	2300      	movs	r3, #0
 800c902:	9309      	str	r3, [sp, #36]	; 0x24
 800c904:	2320      	movs	r3, #32
 800c906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c90a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c90e:	2330      	movs	r3, #48	; 0x30
 800c910:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cad4 <_vfiprintf_r+0x24c>
 800c914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c918:	f04f 0901 	mov.w	r9, #1
 800c91c:	4623      	mov	r3, r4
 800c91e:	469a      	mov	sl, r3
 800c920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c924:	b10a      	cbz	r2, 800c92a <_vfiprintf_r+0xa2>
 800c926:	2a25      	cmp	r2, #37	; 0x25
 800c928:	d1f9      	bne.n	800c91e <_vfiprintf_r+0x96>
 800c92a:	ebba 0b04 	subs.w	fp, sl, r4
 800c92e:	d00b      	beq.n	800c948 <_vfiprintf_r+0xc0>
 800c930:	465b      	mov	r3, fp
 800c932:	4622      	mov	r2, r4
 800c934:	4629      	mov	r1, r5
 800c936:	4630      	mov	r0, r6
 800c938:	f7ff ff93 	bl	800c862 <__sfputs_r>
 800c93c:	3001      	adds	r0, #1
 800c93e:	f000 80aa 	beq.w	800ca96 <_vfiprintf_r+0x20e>
 800c942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c944:	445a      	add	r2, fp
 800c946:	9209      	str	r2, [sp, #36]	; 0x24
 800c948:	f89a 3000 	ldrb.w	r3, [sl]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 80a2 	beq.w	800ca96 <_vfiprintf_r+0x20e>
 800c952:	2300      	movs	r3, #0
 800c954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c95c:	f10a 0a01 	add.w	sl, sl, #1
 800c960:	9304      	str	r3, [sp, #16]
 800c962:	9307      	str	r3, [sp, #28]
 800c964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c968:	931a      	str	r3, [sp, #104]	; 0x68
 800c96a:	4654      	mov	r4, sl
 800c96c:	2205      	movs	r2, #5
 800c96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c972:	4858      	ldr	r0, [pc, #352]	; (800cad4 <_vfiprintf_r+0x24c>)
 800c974:	f7f3 fc4c 	bl	8000210 <memchr>
 800c978:	9a04      	ldr	r2, [sp, #16]
 800c97a:	b9d8      	cbnz	r0, 800c9b4 <_vfiprintf_r+0x12c>
 800c97c:	06d1      	lsls	r1, r2, #27
 800c97e:	bf44      	itt	mi
 800c980:	2320      	movmi	r3, #32
 800c982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c986:	0713      	lsls	r3, r2, #28
 800c988:	bf44      	itt	mi
 800c98a:	232b      	movmi	r3, #43	; 0x2b
 800c98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c990:	f89a 3000 	ldrb.w	r3, [sl]
 800c994:	2b2a      	cmp	r3, #42	; 0x2a
 800c996:	d015      	beq.n	800c9c4 <_vfiprintf_r+0x13c>
 800c998:	9a07      	ldr	r2, [sp, #28]
 800c99a:	4654      	mov	r4, sl
 800c99c:	2000      	movs	r0, #0
 800c99e:	f04f 0c0a 	mov.w	ip, #10
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9a8:	3b30      	subs	r3, #48	; 0x30
 800c9aa:	2b09      	cmp	r3, #9
 800c9ac:	d94e      	bls.n	800ca4c <_vfiprintf_r+0x1c4>
 800c9ae:	b1b0      	cbz	r0, 800c9de <_vfiprintf_r+0x156>
 800c9b0:	9207      	str	r2, [sp, #28]
 800c9b2:	e014      	b.n	800c9de <_vfiprintf_r+0x156>
 800c9b4:	eba0 0308 	sub.w	r3, r0, r8
 800c9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	9304      	str	r3, [sp, #16]
 800c9c0:	46a2      	mov	sl, r4
 800c9c2:	e7d2      	b.n	800c96a <_vfiprintf_r+0xe2>
 800c9c4:	9b03      	ldr	r3, [sp, #12]
 800c9c6:	1d19      	adds	r1, r3, #4
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	9103      	str	r1, [sp, #12]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	bfbb      	ittet	lt
 800c9d0:	425b      	neglt	r3, r3
 800c9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800c9d6:	9307      	strge	r3, [sp, #28]
 800c9d8:	9307      	strlt	r3, [sp, #28]
 800c9da:	bfb8      	it	lt
 800c9dc:	9204      	strlt	r2, [sp, #16]
 800c9de:	7823      	ldrb	r3, [r4, #0]
 800c9e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c9e2:	d10c      	bne.n	800c9fe <_vfiprintf_r+0x176>
 800c9e4:	7863      	ldrb	r3, [r4, #1]
 800c9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9e8:	d135      	bne.n	800ca56 <_vfiprintf_r+0x1ce>
 800c9ea:	9b03      	ldr	r3, [sp, #12]
 800c9ec:	1d1a      	adds	r2, r3, #4
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	9203      	str	r2, [sp, #12]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	bfb8      	it	lt
 800c9f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c9fa:	3402      	adds	r4, #2
 800c9fc:	9305      	str	r3, [sp, #20]
 800c9fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cae4 <_vfiprintf_r+0x25c>
 800ca02:	7821      	ldrb	r1, [r4, #0]
 800ca04:	2203      	movs	r2, #3
 800ca06:	4650      	mov	r0, sl
 800ca08:	f7f3 fc02 	bl	8000210 <memchr>
 800ca0c:	b140      	cbz	r0, 800ca20 <_vfiprintf_r+0x198>
 800ca0e:	2340      	movs	r3, #64	; 0x40
 800ca10:	eba0 000a 	sub.w	r0, r0, sl
 800ca14:	fa03 f000 	lsl.w	r0, r3, r0
 800ca18:	9b04      	ldr	r3, [sp, #16]
 800ca1a:	4303      	orrs	r3, r0
 800ca1c:	3401      	adds	r4, #1
 800ca1e:	9304      	str	r3, [sp, #16]
 800ca20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca24:	482c      	ldr	r0, [pc, #176]	; (800cad8 <_vfiprintf_r+0x250>)
 800ca26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca2a:	2206      	movs	r2, #6
 800ca2c:	f7f3 fbf0 	bl	8000210 <memchr>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d03f      	beq.n	800cab4 <_vfiprintf_r+0x22c>
 800ca34:	4b29      	ldr	r3, [pc, #164]	; (800cadc <_vfiprintf_r+0x254>)
 800ca36:	bb1b      	cbnz	r3, 800ca80 <_vfiprintf_r+0x1f8>
 800ca38:	9b03      	ldr	r3, [sp, #12]
 800ca3a:	3307      	adds	r3, #7
 800ca3c:	f023 0307 	bic.w	r3, r3, #7
 800ca40:	3308      	adds	r3, #8
 800ca42:	9303      	str	r3, [sp, #12]
 800ca44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca46:	443b      	add	r3, r7
 800ca48:	9309      	str	r3, [sp, #36]	; 0x24
 800ca4a:	e767      	b.n	800c91c <_vfiprintf_r+0x94>
 800ca4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca50:	460c      	mov	r4, r1
 800ca52:	2001      	movs	r0, #1
 800ca54:	e7a5      	b.n	800c9a2 <_vfiprintf_r+0x11a>
 800ca56:	2300      	movs	r3, #0
 800ca58:	3401      	adds	r4, #1
 800ca5a:	9305      	str	r3, [sp, #20]
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	f04f 0c0a 	mov.w	ip, #10
 800ca62:	4620      	mov	r0, r4
 800ca64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca68:	3a30      	subs	r2, #48	; 0x30
 800ca6a:	2a09      	cmp	r2, #9
 800ca6c:	d903      	bls.n	800ca76 <_vfiprintf_r+0x1ee>
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d0c5      	beq.n	800c9fe <_vfiprintf_r+0x176>
 800ca72:	9105      	str	r1, [sp, #20]
 800ca74:	e7c3      	b.n	800c9fe <_vfiprintf_r+0x176>
 800ca76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e7f0      	b.n	800ca62 <_vfiprintf_r+0x1da>
 800ca80:	ab03      	add	r3, sp, #12
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	462a      	mov	r2, r5
 800ca86:	4b16      	ldr	r3, [pc, #88]	; (800cae0 <_vfiprintf_r+0x258>)
 800ca88:	a904      	add	r1, sp, #16
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f7fd fbc6 	bl	800a21c <_printf_float>
 800ca90:	4607      	mov	r7, r0
 800ca92:	1c78      	adds	r0, r7, #1
 800ca94:	d1d6      	bne.n	800ca44 <_vfiprintf_r+0x1bc>
 800ca96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca98:	07d9      	lsls	r1, r3, #31
 800ca9a:	d405      	bmi.n	800caa8 <_vfiprintf_r+0x220>
 800ca9c:	89ab      	ldrh	r3, [r5, #12]
 800ca9e:	059a      	lsls	r2, r3, #22
 800caa0:	d402      	bmi.n	800caa8 <_vfiprintf_r+0x220>
 800caa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caa4:	f7ff f950 	bl	800bd48 <__retarget_lock_release_recursive>
 800caa8:	89ab      	ldrh	r3, [r5, #12]
 800caaa:	065b      	lsls	r3, r3, #25
 800caac:	f53f af12 	bmi.w	800c8d4 <_vfiprintf_r+0x4c>
 800cab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cab2:	e711      	b.n	800c8d8 <_vfiprintf_r+0x50>
 800cab4:	ab03      	add	r3, sp, #12
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	462a      	mov	r2, r5
 800caba:	4b09      	ldr	r3, [pc, #36]	; (800cae0 <_vfiprintf_r+0x258>)
 800cabc:	a904      	add	r1, sp, #16
 800cabe:	4630      	mov	r0, r6
 800cac0:	f7fd fe50 	bl	800a764 <_printf_i>
 800cac4:	e7e4      	b.n	800ca90 <_vfiprintf_r+0x208>
 800cac6:	bf00      	nop
 800cac8:	0800dcfc 	.word	0x0800dcfc
 800cacc:	0800dd1c 	.word	0x0800dd1c
 800cad0:	0800dcdc 	.word	0x0800dcdc
 800cad4:	0800de94 	.word	0x0800de94
 800cad8:	0800de9e 	.word	0x0800de9e
 800cadc:	0800a21d 	.word	0x0800a21d
 800cae0:	0800c863 	.word	0x0800c863
 800cae4:	0800de9a 	.word	0x0800de9a

0800cae8 <__sread>:
 800cae8:	b510      	push	{r4, lr}
 800caea:	460c      	mov	r4, r1
 800caec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf0:	f000 f920 	bl	800cd34 <_read_r>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	bfab      	itete	ge
 800caf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cafa:	89a3      	ldrhlt	r3, [r4, #12]
 800cafc:	181b      	addge	r3, r3, r0
 800cafe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb02:	bfac      	ite	ge
 800cb04:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb06:	81a3      	strhlt	r3, [r4, #12]
 800cb08:	bd10      	pop	{r4, pc}

0800cb0a <__swrite>:
 800cb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0e:	461f      	mov	r7, r3
 800cb10:	898b      	ldrh	r3, [r1, #12]
 800cb12:	05db      	lsls	r3, r3, #23
 800cb14:	4605      	mov	r5, r0
 800cb16:	460c      	mov	r4, r1
 800cb18:	4616      	mov	r6, r2
 800cb1a:	d505      	bpl.n	800cb28 <__swrite+0x1e>
 800cb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb20:	2302      	movs	r3, #2
 800cb22:	2200      	movs	r2, #0
 800cb24:	f000 f898 	bl	800cc58 <_lseek_r>
 800cb28:	89a3      	ldrh	r3, [r4, #12]
 800cb2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb32:	81a3      	strh	r3, [r4, #12]
 800cb34:	4632      	mov	r2, r6
 800cb36:	463b      	mov	r3, r7
 800cb38:	4628      	mov	r0, r5
 800cb3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb3e:	f000 b817 	b.w	800cb70 <_write_r>

0800cb42 <__sseek>:
 800cb42:	b510      	push	{r4, lr}
 800cb44:	460c      	mov	r4, r1
 800cb46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb4a:	f000 f885 	bl	800cc58 <_lseek_r>
 800cb4e:	1c43      	adds	r3, r0, #1
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	bf15      	itete	ne
 800cb54:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb5e:	81a3      	strheq	r3, [r4, #12]
 800cb60:	bf18      	it	ne
 800cb62:	81a3      	strhne	r3, [r4, #12]
 800cb64:	bd10      	pop	{r4, pc}

0800cb66 <__sclose>:
 800cb66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb6a:	f000 b831 	b.w	800cbd0 <_close_r>
	...

0800cb70 <_write_r>:
 800cb70:	b538      	push	{r3, r4, r5, lr}
 800cb72:	4d07      	ldr	r5, [pc, #28]	; (800cb90 <_write_r+0x20>)
 800cb74:	4604      	mov	r4, r0
 800cb76:	4608      	mov	r0, r1
 800cb78:	4611      	mov	r1, r2
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	602a      	str	r2, [r5, #0]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	f7f6 f9f0 	bl	8002f64 <_write>
 800cb84:	1c43      	adds	r3, r0, #1
 800cb86:	d102      	bne.n	800cb8e <_write_r+0x1e>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	b103      	cbz	r3, 800cb8e <_write_r+0x1e>
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	bd38      	pop	{r3, r4, r5, pc}
 800cb90:	20002530 	.word	0x20002530

0800cb94 <__assert_func>:
 800cb94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb96:	4614      	mov	r4, r2
 800cb98:	461a      	mov	r2, r3
 800cb9a:	4b09      	ldr	r3, [pc, #36]	; (800cbc0 <__assert_func+0x2c>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4605      	mov	r5, r0
 800cba0:	68d8      	ldr	r0, [r3, #12]
 800cba2:	b14c      	cbz	r4, 800cbb8 <__assert_func+0x24>
 800cba4:	4b07      	ldr	r3, [pc, #28]	; (800cbc4 <__assert_func+0x30>)
 800cba6:	9100      	str	r1, [sp, #0]
 800cba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbac:	4906      	ldr	r1, [pc, #24]	; (800cbc8 <__assert_func+0x34>)
 800cbae:	462b      	mov	r3, r5
 800cbb0:	f000 f81e 	bl	800cbf0 <fiprintf>
 800cbb4:	f000 f8dd 	bl	800cd72 <abort>
 800cbb8:	4b04      	ldr	r3, [pc, #16]	; (800cbcc <__assert_func+0x38>)
 800cbba:	461c      	mov	r4, r3
 800cbbc:	e7f3      	b.n	800cba6 <__assert_func+0x12>
 800cbbe:	bf00      	nop
 800cbc0:	20000024 	.word	0x20000024
 800cbc4:	0800dea5 	.word	0x0800dea5
 800cbc8:	0800deb2 	.word	0x0800deb2
 800cbcc:	0800dee0 	.word	0x0800dee0

0800cbd0 <_close_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4d06      	ldr	r5, [pc, #24]	; (800cbec <_close_r+0x1c>)
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	4608      	mov	r0, r1
 800cbda:	602b      	str	r3, [r5, #0]
 800cbdc:	f7f6 f9de 	bl	8002f9c <_close>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_close_r+0x1a>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_close_r+0x1a>
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	20002530 	.word	0x20002530

0800cbf0 <fiprintf>:
 800cbf0:	b40e      	push	{r1, r2, r3}
 800cbf2:	b503      	push	{r0, r1, lr}
 800cbf4:	4601      	mov	r1, r0
 800cbf6:	ab03      	add	r3, sp, #12
 800cbf8:	4805      	ldr	r0, [pc, #20]	; (800cc10 <fiprintf+0x20>)
 800cbfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbfe:	6800      	ldr	r0, [r0, #0]
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	f7ff fe41 	bl	800c888 <_vfiprintf_r>
 800cc06:	b002      	add	sp, #8
 800cc08:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc0c:	b003      	add	sp, #12
 800cc0e:	4770      	bx	lr
 800cc10:	20000024 	.word	0x20000024

0800cc14 <_fstat_r>:
 800cc14:	b538      	push	{r3, r4, r5, lr}
 800cc16:	4d07      	ldr	r5, [pc, #28]	; (800cc34 <_fstat_r+0x20>)
 800cc18:	2300      	movs	r3, #0
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	4608      	mov	r0, r1
 800cc1e:	4611      	mov	r1, r2
 800cc20:	602b      	str	r3, [r5, #0]
 800cc22:	f7f6 f9c7 	bl	8002fb4 <_fstat>
 800cc26:	1c43      	adds	r3, r0, #1
 800cc28:	d102      	bne.n	800cc30 <_fstat_r+0x1c>
 800cc2a:	682b      	ldr	r3, [r5, #0]
 800cc2c:	b103      	cbz	r3, 800cc30 <_fstat_r+0x1c>
 800cc2e:	6023      	str	r3, [r4, #0]
 800cc30:	bd38      	pop	{r3, r4, r5, pc}
 800cc32:	bf00      	nop
 800cc34:	20002530 	.word	0x20002530

0800cc38 <_isatty_r>:
 800cc38:	b538      	push	{r3, r4, r5, lr}
 800cc3a:	4d06      	ldr	r5, [pc, #24]	; (800cc54 <_isatty_r+0x1c>)
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	4604      	mov	r4, r0
 800cc40:	4608      	mov	r0, r1
 800cc42:	602b      	str	r3, [r5, #0]
 800cc44:	f7f6 f9c6 	bl	8002fd4 <_isatty>
 800cc48:	1c43      	adds	r3, r0, #1
 800cc4a:	d102      	bne.n	800cc52 <_isatty_r+0x1a>
 800cc4c:	682b      	ldr	r3, [r5, #0]
 800cc4e:	b103      	cbz	r3, 800cc52 <_isatty_r+0x1a>
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	bd38      	pop	{r3, r4, r5, pc}
 800cc54:	20002530 	.word	0x20002530

0800cc58 <_lseek_r>:
 800cc58:	b538      	push	{r3, r4, r5, lr}
 800cc5a:	4d07      	ldr	r5, [pc, #28]	; (800cc78 <_lseek_r+0x20>)
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	4608      	mov	r0, r1
 800cc60:	4611      	mov	r1, r2
 800cc62:	2200      	movs	r2, #0
 800cc64:	602a      	str	r2, [r5, #0]
 800cc66:	461a      	mov	r2, r3
 800cc68:	f7f6 f9bf 	bl	8002fea <_lseek>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	d102      	bne.n	800cc76 <_lseek_r+0x1e>
 800cc70:	682b      	ldr	r3, [r5, #0]
 800cc72:	b103      	cbz	r3, 800cc76 <_lseek_r+0x1e>
 800cc74:	6023      	str	r3, [r4, #0]
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
 800cc78:	20002530 	.word	0x20002530

0800cc7c <__ascii_mbtowc>:
 800cc7c:	b082      	sub	sp, #8
 800cc7e:	b901      	cbnz	r1, 800cc82 <__ascii_mbtowc+0x6>
 800cc80:	a901      	add	r1, sp, #4
 800cc82:	b142      	cbz	r2, 800cc96 <__ascii_mbtowc+0x1a>
 800cc84:	b14b      	cbz	r3, 800cc9a <__ascii_mbtowc+0x1e>
 800cc86:	7813      	ldrb	r3, [r2, #0]
 800cc88:	600b      	str	r3, [r1, #0]
 800cc8a:	7812      	ldrb	r2, [r2, #0]
 800cc8c:	1e10      	subs	r0, r2, #0
 800cc8e:	bf18      	it	ne
 800cc90:	2001      	movne	r0, #1
 800cc92:	b002      	add	sp, #8
 800cc94:	4770      	bx	lr
 800cc96:	4610      	mov	r0, r2
 800cc98:	e7fb      	b.n	800cc92 <__ascii_mbtowc+0x16>
 800cc9a:	f06f 0001 	mvn.w	r0, #1
 800cc9e:	e7f8      	b.n	800cc92 <__ascii_mbtowc+0x16>

0800cca0 <memmove>:
 800cca0:	4288      	cmp	r0, r1
 800cca2:	b510      	push	{r4, lr}
 800cca4:	eb01 0402 	add.w	r4, r1, r2
 800cca8:	d902      	bls.n	800ccb0 <memmove+0x10>
 800ccaa:	4284      	cmp	r4, r0
 800ccac:	4623      	mov	r3, r4
 800ccae:	d807      	bhi.n	800ccc0 <memmove+0x20>
 800ccb0:	1e43      	subs	r3, r0, #1
 800ccb2:	42a1      	cmp	r1, r4
 800ccb4:	d008      	beq.n	800ccc8 <memmove+0x28>
 800ccb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccbe:	e7f8      	b.n	800ccb2 <memmove+0x12>
 800ccc0:	4402      	add	r2, r0
 800ccc2:	4601      	mov	r1, r0
 800ccc4:	428a      	cmp	r2, r1
 800ccc6:	d100      	bne.n	800ccca <memmove+0x2a>
 800ccc8:	bd10      	pop	{r4, pc}
 800ccca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccd2:	e7f7      	b.n	800ccc4 <memmove+0x24>

0800ccd4 <_realloc_r>:
 800ccd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd8:	4680      	mov	r8, r0
 800ccda:	4614      	mov	r4, r2
 800ccdc:	460e      	mov	r6, r1
 800ccde:	b921      	cbnz	r1, 800ccea <_realloc_r+0x16>
 800cce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cce4:	4611      	mov	r1, r2
 800cce6:	f7fd b985 	b.w	8009ff4 <_malloc_r>
 800ccea:	b92a      	cbnz	r2, 800ccf8 <_realloc_r+0x24>
 800ccec:	f7fd f916 	bl	8009f1c <_free_r>
 800ccf0:	4625      	mov	r5, r4
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf8:	f000 f842 	bl	800cd80 <_malloc_usable_size_r>
 800ccfc:	4284      	cmp	r4, r0
 800ccfe:	4607      	mov	r7, r0
 800cd00:	d802      	bhi.n	800cd08 <_realloc_r+0x34>
 800cd02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd06:	d812      	bhi.n	800cd2e <_realloc_r+0x5a>
 800cd08:	4621      	mov	r1, r4
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	f7fd f972 	bl	8009ff4 <_malloc_r>
 800cd10:	4605      	mov	r5, r0
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d0ed      	beq.n	800ccf2 <_realloc_r+0x1e>
 800cd16:	42bc      	cmp	r4, r7
 800cd18:	4622      	mov	r2, r4
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	bf28      	it	cs
 800cd1e:	463a      	movcs	r2, r7
 800cd20:	f7ff f878 	bl	800be14 <memcpy>
 800cd24:	4631      	mov	r1, r6
 800cd26:	4640      	mov	r0, r8
 800cd28:	f7fd f8f8 	bl	8009f1c <_free_r>
 800cd2c:	e7e1      	b.n	800ccf2 <_realloc_r+0x1e>
 800cd2e:	4635      	mov	r5, r6
 800cd30:	e7df      	b.n	800ccf2 <_realloc_r+0x1e>
	...

0800cd34 <_read_r>:
 800cd34:	b538      	push	{r3, r4, r5, lr}
 800cd36:	4d07      	ldr	r5, [pc, #28]	; (800cd54 <_read_r+0x20>)
 800cd38:	4604      	mov	r4, r0
 800cd3a:	4608      	mov	r0, r1
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	2200      	movs	r2, #0
 800cd40:	602a      	str	r2, [r5, #0]
 800cd42:	461a      	mov	r2, r3
 800cd44:	f7f6 f8f1 	bl	8002f2a <_read>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_read_r+0x1e>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_read_r+0x1e>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	20002530 	.word	0x20002530

0800cd58 <__ascii_wctomb>:
 800cd58:	b149      	cbz	r1, 800cd6e <__ascii_wctomb+0x16>
 800cd5a:	2aff      	cmp	r2, #255	; 0xff
 800cd5c:	bf85      	ittet	hi
 800cd5e:	238a      	movhi	r3, #138	; 0x8a
 800cd60:	6003      	strhi	r3, [r0, #0]
 800cd62:	700a      	strbls	r2, [r1, #0]
 800cd64:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cd68:	bf98      	it	ls
 800cd6a:	2001      	movls	r0, #1
 800cd6c:	4770      	bx	lr
 800cd6e:	4608      	mov	r0, r1
 800cd70:	4770      	bx	lr

0800cd72 <abort>:
 800cd72:	b508      	push	{r3, lr}
 800cd74:	2006      	movs	r0, #6
 800cd76:	f000 f833 	bl	800cde0 <raise>
 800cd7a:	2001      	movs	r0, #1
 800cd7c:	f7f6 f8cb 	bl	8002f16 <_exit>

0800cd80 <_malloc_usable_size_r>:
 800cd80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd84:	1f18      	subs	r0, r3, #4
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	bfbc      	itt	lt
 800cd8a:	580b      	ldrlt	r3, [r1, r0]
 800cd8c:	18c0      	addlt	r0, r0, r3
 800cd8e:	4770      	bx	lr

0800cd90 <_raise_r>:
 800cd90:	291f      	cmp	r1, #31
 800cd92:	b538      	push	{r3, r4, r5, lr}
 800cd94:	4604      	mov	r4, r0
 800cd96:	460d      	mov	r5, r1
 800cd98:	d904      	bls.n	800cda4 <_raise_r+0x14>
 800cd9a:	2316      	movs	r3, #22
 800cd9c:	6003      	str	r3, [r0, #0]
 800cd9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cda6:	b112      	cbz	r2, 800cdae <_raise_r+0x1e>
 800cda8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdac:	b94b      	cbnz	r3, 800cdc2 <_raise_r+0x32>
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f000 f830 	bl	800ce14 <_getpid_r>
 800cdb4:	462a      	mov	r2, r5
 800cdb6:	4601      	mov	r1, r0
 800cdb8:	4620      	mov	r0, r4
 800cdba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdbe:	f000 b817 	b.w	800cdf0 <_kill_r>
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d00a      	beq.n	800cddc <_raise_r+0x4c>
 800cdc6:	1c59      	adds	r1, r3, #1
 800cdc8:	d103      	bne.n	800cdd2 <_raise_r+0x42>
 800cdca:	2316      	movs	r3, #22
 800cdcc:	6003      	str	r3, [r0, #0]
 800cdce:	2001      	movs	r0, #1
 800cdd0:	e7e7      	b.n	800cda2 <_raise_r+0x12>
 800cdd2:	2400      	movs	r4, #0
 800cdd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cdd8:	4628      	mov	r0, r5
 800cdda:	4798      	blx	r3
 800cddc:	2000      	movs	r0, #0
 800cdde:	e7e0      	b.n	800cda2 <_raise_r+0x12>

0800cde0 <raise>:
 800cde0:	4b02      	ldr	r3, [pc, #8]	; (800cdec <raise+0xc>)
 800cde2:	4601      	mov	r1, r0
 800cde4:	6818      	ldr	r0, [r3, #0]
 800cde6:	f7ff bfd3 	b.w	800cd90 <_raise_r>
 800cdea:	bf00      	nop
 800cdec:	20000024 	.word	0x20000024

0800cdf0 <_kill_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d07      	ldr	r5, [pc, #28]	; (800ce10 <_kill_r+0x20>)
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	602b      	str	r3, [r5, #0]
 800cdfe:	f7f6 f87a 	bl	8002ef6 <_kill>
 800ce02:	1c43      	adds	r3, r0, #1
 800ce04:	d102      	bne.n	800ce0c <_kill_r+0x1c>
 800ce06:	682b      	ldr	r3, [r5, #0]
 800ce08:	b103      	cbz	r3, 800ce0c <_kill_r+0x1c>
 800ce0a:	6023      	str	r3, [r4, #0]
 800ce0c:	bd38      	pop	{r3, r4, r5, pc}
 800ce0e:	bf00      	nop
 800ce10:	20002530 	.word	0x20002530

0800ce14 <_getpid_r>:
 800ce14:	f7f6 b867 	b.w	8002ee6 <_getpid>

0800ce18 <_init>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	bf00      	nop
 800ce1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1e:	bc08      	pop	{r3}
 800ce20:	469e      	mov	lr, r3
 800ce22:	4770      	bx	lr

0800ce24 <_fini>:
 800ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce26:	bf00      	nop
 800ce28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce2a:	bc08      	pop	{r3}
 800ce2c:	469e      	mov	lr, r3
 800ce2e:	4770      	bx	lr
