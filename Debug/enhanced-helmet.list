
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e080  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  0800e220  0800e220  0001e220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed9c  0800ed9c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed9c  0800ed9c  0001ed9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eda4  0800eda4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eda4  0800eda4  0001eda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eda8  0800eda8  0001eda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800edac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002874  200001f8  0800efa4  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a6c  0800efa4  00022a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6f4  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab1  00000000  00000000  0003b91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  0003f3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  00040ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c324  00000000  00000000  00042208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002013b  00000000  00000000  0005e52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1480  00000000  00000000  0007e667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fae7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076b0  00000000  00000000  0011fb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e208 	.word	0x0800e208

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800e208 	.word	0x0800e208

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_TIM_PeriodElapsedCallback>:
#include "headlamp.h"
#include <stdio.h>

extern int input_connected;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	if (htim == HEADLAMP_TIMER) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d108      	bne.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2101      	movs	r1, #1
 8000f10:	480a      	ldr	r0, [pc, #40]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f12:	f003 fafb 	bl	800450c <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f18:	f005 fc66 	bl	80067e8 <HAL_TIM_Base_Stop_IT>
	} else if (htim == FILE_TIMER) {
		XBee_Transmit_File();
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
	}
}
 8000f1c:	e008      	b.n	8000f30 <HAL_TIM_PeriodElapsedCallback+0x34>
	} else if (htim == FILE_TIMER) {
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d104      	bne.n	8000f30 <HAL_TIM_PeriodElapsedCallback+0x34>
		XBee_Transmit_File();
 8000f26:	f001 fef1 	bl	8002d0c <XBee_Transmit_File>
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f2c:	f005 fc5c 	bl	80067e8 <HAL_TIM_Base_Stop_IT>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200003c8 	.word	0x200003c8
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	20000410 	.word	0x20000410

08000f44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	if (pin & (1 << 8) && input_connected) {
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <HAL_GPIO_EXTI_Callback+0x20>
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x28>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_GPIO_EXTI_Callback+0x20>
		Input_Resolve();
 8000f60:	f000 fdca 	bl	8001af8 <Input_Resolve>
	}
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000004 	.word	0x20000004

08000f70 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2102      	movs	r1, #2
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <SELECT+0x18>)
 8000f7a:	f003 fac7 	bl	800450c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f002 f982 	bl	8003288 <HAL_Delay>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020800 	.word	0x40020800

08000f8c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2102      	movs	r1, #2
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <DESELECT+0x18>)
 8000f96:	f003 fab9 	bl	800450c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f002 f974 	bl	8003288 <HAL_Delay>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020800 	.word	0x40020800

08000fa8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fb2:	bf00      	nop
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <SPI_TxByte+0x30>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d1f8      	bne.n	8000fb4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000fc2:	1df9      	adds	r1, r7, #7
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <SPI_TxByte+0x30>)
 8000fca:	f004 ffb2 	bl	8005f32 <HAL_SPI_Transmit>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000318 	.word	0x20000318

08000fdc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fe8:	bf00      	nop
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <SPI_TxBuffer+0x30>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d1f8      	bne.n	8000fea <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4803      	ldr	r0, [pc, #12]	; (800100c <SPI_TxBuffer+0x30>)
 8001000:	f004 ff97 	bl	8005f32 <HAL_SPI_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000318 	.word	0x20000318

08001010 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800101a:	bf00      	nop
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <SPI_RxByte+0x34>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b02      	cmp	r3, #2
 8001028:	d1f8      	bne.n	800101c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800102a:	1dba      	adds	r2, r7, #6
 800102c:	1df9      	adds	r1, r7, #7
 800102e:	2364      	movs	r3, #100	; 0x64
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <SPI_RxByte+0x34>)
 8001036:	f005 f8b8 	bl	80061aa <HAL_SPI_TransmitReceive>

	return data;
 800103a:	79bb      	ldrb	r3, [r7, #6]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000318 	.word	0x20000318

08001048 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001050:	f7ff ffde 	bl	8001010 <SPI_RxByte>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	701a      	strb	r2, [r3, #0]
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <SD_ReadyWait+0x30>)
 800106c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001070:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001072:	f7ff ffcd 	bl	8001010 <SPI_RxByte>
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2bff      	cmp	r3, #255	; 0xff
 800107e:	d003      	beq.n	8001088 <SD_ReadyWait+0x24>
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SD_ReadyWait+0x30>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f4      	bne.n	8001072 <SD_ReadyWait+0xe>

	return res;
 8001088:	79fb      	ldrb	r3, [r7, #7]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000216 	.word	0x20000216

08001098 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800109e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80010a2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80010a4:	f7ff ff72 	bl	8000f8c <DESELECT>
	for(int i = 0; i < 10; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	e005      	b.n	80010ba <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80010ae:	20ff      	movs	r0, #255	; 0xff
 80010b0:	f7ff ff7a 	bl	8000fa8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b09      	cmp	r3, #9
 80010be:	ddf6      	ble.n	80010ae <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80010c0:	f7ff ff56 	bl	8000f70 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80010c4:	2340      	movs	r3, #64	; 0x40
 80010c6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80010d8:	2395      	movs	r3, #149	; 0x95
 80010da:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80010dc:	463b      	mov	r3, r7
 80010de:	2106      	movs	r1, #6
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff7b 	bl	8000fdc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80010e6:	e002      	b.n	80010ee <SD_PowerOn+0x56>
	{
		cnt--;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80010ee:	f7ff ff8f 	bl	8001010 <SPI_RxByte>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d002      	beq.n	80010fe <SD_PowerOn+0x66>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f4      	bne.n	80010e8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80010fe:	f7ff ff45 	bl	8000f8c <DESELECT>
	SPI_TxByte(0XFF);
 8001102:	20ff      	movs	r0, #255	; 0xff
 8001104:	f7ff ff50 	bl	8000fa8 <SPI_TxByte>

	PowerFlag = 1;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <SD_PowerOn+0x80>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000219 	.word	0x20000219

0800111c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <SD_PowerOff+0x14>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	20000219 	.word	0x20000219

08001134 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <SD_CheckPower+0x14>)
 800113a:	781b      	ldrb	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000219 	.word	0x20000219

0800114c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <SD_RxDataBlock+0x58>)
 8001158:	22c8      	movs	r2, #200	; 0xc8
 800115a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800115c:	f7ff ff58 	bl	8001010 <SPI_RxByte>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d103      	bne.n	8001172 <SD_RxDataBlock+0x26>
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <SD_RxDataBlock+0x58>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f4      	bne.n	800115c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2bfe      	cmp	r3, #254	; 0xfe
 8001176:	d001      	beq.n	800117c <SD_RxDataBlock+0x30>
 8001178:	2300      	movs	r3, #0
 800117a:	e00f      	b.n	800119c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff60 	bl	8001048 <SPI_RxBytePtr>
	} while(len--);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	1e5a      	subs	r2, r3, #1
 800118c:	603a      	str	r2, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f4      	bne.n	800117c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001192:	f7ff ff3d 	bl	8001010 <SPI_RxByte>
	SPI_RxByte();
 8001196:	f7ff ff3b 	bl	8001010 <SPI_RxByte>

	return TRUE;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000214 	.word	0x20000214

080011a8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80011b8:	f7ff ff54 	bl	8001064 <SD_ReadyWait>
 80011bc:	4603      	mov	r3, r0
 80011be:	2bff      	cmp	r3, #255	; 0xff
 80011c0:	d001      	beq.n	80011c6 <SD_TxDataBlock+0x1e>
 80011c2:	2300      	movs	r3, #0
 80011c4:	e02f      	b.n	8001226 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff feed 	bl	8000fa8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2bfd      	cmp	r3, #253	; 0xfd
 80011d2:	d020      	beq.n	8001216 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80011d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff feff 	bl	8000fdc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80011de:	f7ff ff17 	bl	8001010 <SPI_RxByte>
		SPI_RxByte();
 80011e2:	f7ff ff15 	bl	8001010 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80011e6:	e00b      	b.n	8001200 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80011e8:	f7ff ff12 	bl	8001010 <SPI_RxByte>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d006      	beq.n	8001208 <SD_TxDataBlock+0x60>
			i++;
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	3301      	adds	r3, #1
 80011fe:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	2b40      	cmp	r3, #64	; 0x40
 8001204:	d9f0      	bls.n	80011e8 <SD_TxDataBlock+0x40>
 8001206:	e000      	b.n	800120a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001208:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800120a:	bf00      	nop
 800120c:	f7ff ff00 	bl	8001010 <SPI_RxByte>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0fa      	beq.n	800120c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	2b05      	cmp	r3, #5
 800121e:	d101      	bne.n	8001224 <SD_TxDataBlock+0x7c>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	6039      	str	r1, [r7, #0]
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800123a:	f7ff ff13 	bl	8001064 <SD_ReadyWait>
 800123e:	4603      	mov	r3, r0
 8001240:	2bff      	cmp	r3, #255	; 0xff
 8001242:	d001      	beq.n	8001248 <SD_SendCmd+0x1a>
 8001244:	23ff      	movs	r3, #255	; 0xff
 8001246:	e042      	b.n	80012ce <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff feac 	bl	8000fa8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	0e1b      	lsrs	r3, r3, #24
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fea6 	bl	8000fa8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	0c1b      	lsrs	r3, r3, #16
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fea0 	bl	8000fa8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe9a 	bl	8000fa8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe95 	bl	8000fa8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b40      	cmp	r3, #64	; 0x40
 8001282:	d102      	bne.n	800128a <SD_SendCmd+0x5c>
 8001284:	2395      	movs	r3, #149	; 0x95
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e007      	b.n	800129a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b48      	cmp	r3, #72	; 0x48
 800128e:	d102      	bne.n	8001296 <SD_SendCmd+0x68>
 8001290:	2387      	movs	r3, #135	; 0x87
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e001      	b.n	800129a <SD_SendCmd+0x6c>
	else crc = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe83 	bl	8000fa8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b4c      	cmp	r3, #76	; 0x4c
 80012a6:	d101      	bne.n	80012ac <SD_SendCmd+0x7e>
 80012a8:	f7ff feb2 	bl	8001010 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80012ac:	230a      	movs	r3, #10
 80012ae:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80012b0:	f7ff feae 	bl	8001010 <SPI_RxByte>
 80012b4:	4603      	mov	r3, r0
 80012b6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80012b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da05      	bge.n	80012cc <SD_SendCmd+0x9e>
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	73bb      	strb	r3, [r7, #14]
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f1      	bne.n	80012b0 <SD_SendCmd+0x82>

	return res;
 80012cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SD_disk_initialize+0x14>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0d1      	b.n	8001490 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80012ec:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <SD_disk_initialize+0x1c0>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <SD_disk_initialize+0x2a>
 80012fa:	4b67      	ldr	r3, [pc, #412]	; (8001498 <SD_disk_initialize+0x1c0>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	e0c6      	b.n	8001490 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001302:	f7ff fec9 	bl	8001098 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001306:	f7ff fe33 	bl	8000f70 <SELECT>

	/* check disk type */
	type = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800130e:	2100      	movs	r1, #0
 8001310:	2040      	movs	r0, #64	; 0x40
 8001312:	f7ff ff8c 	bl	800122e <SD_SendCmd>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	f040 80a1 	bne.w	8001460 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <SD_disk_initialize+0x1c4>)
 8001320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001324:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001326:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800132a:	2048      	movs	r0, #72	; 0x48
 800132c:	f7ff ff7f 	bl	800122e <SD_SendCmd>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d155      	bne.n	80013e2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e00c      	b.n	8001356 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800133c:	7bfc      	ldrb	r4, [r7, #15]
 800133e:	f7ff fe67 	bl	8001010 <SPI_RxByte>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	f104 0310 	add.w	r3, r4, #16
 800134a:	443b      	add	r3, r7
 800134c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	3301      	adds	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d9ef      	bls.n	800133c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800135c:	7abb      	ldrb	r3, [r7, #10]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d17e      	bne.n	8001460 <SD_disk_initialize+0x188>
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	2baa      	cmp	r3, #170	; 0xaa
 8001366:	d17b      	bne.n	8001460 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001368:	2100      	movs	r1, #0
 800136a:	2077      	movs	r0, #119	; 0x77
 800136c:	f7ff ff5f 	bl	800122e <SD_SendCmd>
 8001370:	4603      	mov	r3, r0
 8001372:	2b01      	cmp	r3, #1
 8001374:	d807      	bhi.n	8001386 <SD_disk_initialize+0xae>
 8001376:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800137a:	2069      	movs	r0, #105	; 0x69
 800137c:	f7ff ff57 	bl	800122e <SD_SendCmd>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001386:	4b45      	ldr	r3, [pc, #276]	; (800149c <SD_disk_initialize+0x1c4>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ec      	bne.n	8001368 <SD_disk_initialize+0x90>
 800138e:	e000      	b.n	8001392 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001390:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001392:	4b42      	ldr	r3, [pc, #264]	; (800149c <SD_disk_initialize+0x1c4>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d062      	beq.n	8001460 <SD_disk_initialize+0x188>
 800139a:	2100      	movs	r1, #0
 800139c:	207a      	movs	r0, #122	; 0x7a
 800139e:	f7ff ff46 	bl	800122e <SD_SendCmd>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d15b      	bne.n	8001460 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e00c      	b.n	80013c8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80013ae:	7bfc      	ldrb	r4, [r7, #15]
 80013b0:	f7ff fe2e 	bl	8001010 <SPI_RxByte>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	f104 0310 	add.w	r3, r4, #16
 80013bc:	443b      	add	r3, r7
 80013be:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	3301      	adds	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d9ef      	bls.n	80013ae <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80013ce:	7a3b      	ldrb	r3, [r7, #8]
 80013d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SD_disk_initialize+0x104>
 80013d8:	230c      	movs	r3, #12
 80013da:	e000      	b.n	80013de <SD_disk_initialize+0x106>
 80013dc:	2304      	movs	r3, #4
 80013de:	73bb      	strb	r3, [r7, #14]
 80013e0:	e03e      	b.n	8001460 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80013e2:	2100      	movs	r1, #0
 80013e4:	2077      	movs	r0, #119	; 0x77
 80013e6:	f7ff ff22 	bl	800122e <SD_SendCmd>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d808      	bhi.n	8001402 <SD_disk_initialize+0x12a>
 80013f0:	2100      	movs	r1, #0
 80013f2:	2069      	movs	r0, #105	; 0x69
 80013f4:	f7ff ff1b 	bl	800122e <SD_SendCmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d801      	bhi.n	8001402 <SD_disk_initialize+0x12a>
 80013fe:	2302      	movs	r3, #2
 8001400:	e000      	b.n	8001404 <SD_disk_initialize+0x12c>
 8001402:	2301      	movs	r3, #1
 8001404:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001406:	7bbb      	ldrb	r3, [r7, #14]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d10e      	bne.n	800142a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800140c:	2100      	movs	r1, #0
 800140e:	2077      	movs	r0, #119	; 0x77
 8001410:	f7ff ff0d 	bl	800122e <SD_SendCmd>
 8001414:	4603      	mov	r3, r0
 8001416:	2b01      	cmp	r3, #1
 8001418:	d80e      	bhi.n	8001438 <SD_disk_initialize+0x160>
 800141a:	2100      	movs	r1, #0
 800141c:	2069      	movs	r0, #105	; 0x69
 800141e:	f7ff ff06 	bl	800122e <SD_SendCmd>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d107      	bne.n	8001438 <SD_disk_initialize+0x160>
 8001428:	e00c      	b.n	8001444 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800142a:	2100      	movs	r1, #0
 800142c:	2041      	movs	r0, #65	; 0x41
 800142e:	f7ff fefe 	bl	800122e <SD_SendCmd>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <SD_disk_initialize+0x1c4>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e2      	bne.n	8001406 <SD_disk_initialize+0x12e>
 8001440:	e000      	b.n	8001444 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001442:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <SD_disk_initialize+0x1c4>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d007      	beq.n	800145c <SD_disk_initialize+0x184>
 800144c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001450:	2050      	movs	r0, #80	; 0x50
 8001452:	f7ff feec 	bl	800122e <SD_SendCmd>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SD_disk_initialize+0x188>
 800145c:	2300      	movs	r3, #0
 800145e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <SD_disk_initialize+0x1c8>)
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001466:	f7ff fd91 	bl	8000f8c <DESELECT>
	SPI_RxByte();
 800146a:	f7ff fdd1 	bl	8001010 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <SD_disk_initialize+0x1c0>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SD_disk_initialize+0x1c0>)
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e001      	b.n	800148a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001486:	f7ff fe49 	bl	800111c <SD_PowerOff>
	}

	return Stat;
 800148a:	4b03      	ldr	r3, [pc, #12]	; (8001498 <SD_disk_initialize+0x1c0>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000214 	.word	0x20000214
 80014a0:	20000218 	.word	0x20000218

080014a4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SD_disk_status+0x14>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e002      	b.n	80014be <SD_disk_status+0x1a>
	return Stat;
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SD_disk_status+0x28>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000

080014d0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <SD_disk_read+0x1c>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <SD_disk_read+0x20>
 80014ec:	2304      	movs	r3, #4
 80014ee:	e051      	b.n	8001594 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <SD_disk_read+0xcc>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SD_disk_read+0x32>
 80014fe:	2303      	movs	r3, #3
 8001500:	e048      	b.n	8001594 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001502:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <SD_disk_read+0xd0>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <SD_disk_read+0x44>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	607b      	str	r3, [r7, #4]

	SELECT();
 8001514:	f7ff fd2c 	bl	8000f70 <SELECT>

	if (count == 1)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d111      	bne.n	8001542 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	2051      	movs	r0, #81	; 0x51
 8001522:	f7ff fe84 	bl	800122e <SD_SendCmd>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d129      	bne.n	8001580 <SD_disk_read+0xb0>
 800152c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f7ff fe0b 	bl	800114c <SD_RxDataBlock>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d021      	beq.n	8001580 <SD_disk_read+0xb0>
 800153c:	2300      	movs	r3, #0
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	e01e      	b.n	8001580 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	2052      	movs	r0, #82	; 0x52
 8001546:	f7ff fe72 	bl	800122e <SD_SendCmd>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d117      	bne.n	8001580 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001554:	68b8      	ldr	r0, [r7, #8]
 8001556:	f7ff fdf9 	bl	800114c <SD_RxDataBlock>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <SD_disk_read+0xa6>
				buff += 512;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001566:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3b01      	subs	r3, #1
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1ed      	bne.n	8001550 <SD_disk_read+0x80>
 8001574:	e000      	b.n	8001578 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001576:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001578:	2100      	movs	r1, #0
 800157a:	204c      	movs	r0, #76	; 0x4c
 800157c:	f7ff fe57 	bl	800122e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001580:	f7ff fd04 	bl	8000f8c <DESELECT>
	SPI_RxByte();
 8001584:	f7ff fd44 	bl	8001010 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2db      	uxtb	r3, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000218 	.word	0x20000218

080015a4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4603      	mov	r3, r0
 80015b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <SD_disk_write+0x1c>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <SD_disk_write+0x20>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e06b      	b.n	800169c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <SD_disk_write+0x100>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SD_disk_write+0x32>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e062      	b.n	800169c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <SD_disk_write+0x100>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SD_disk_write+0x44>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e059      	b.n	800169c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015e8:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <SD_disk_write+0x104>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <SD_disk_write+0x56>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	025b      	lsls	r3, r3, #9
 80015f8:	607b      	str	r3, [r7, #4]

	SELECT();
 80015fa:	f7ff fcb9 	bl	8000f70 <SELECT>

	if (count == 1)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d110      	bne.n	8001626 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	2058      	movs	r0, #88	; 0x58
 8001608:	f7ff fe11 	bl	800122e <SD_SendCmd>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d13a      	bne.n	8001688 <SD_disk_write+0xe4>
 8001612:	21fe      	movs	r1, #254	; 0xfe
 8001614:	68b8      	ldr	r0, [r7, #8]
 8001616:	f7ff fdc7 	bl	80011a8 <SD_TxDataBlock>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d033      	beq.n	8001688 <SD_disk_write+0xe4>
			count = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	e030      	b.n	8001688 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <SD_disk_write+0x104>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001632:	2100      	movs	r1, #0
 8001634:	2077      	movs	r0, #119	; 0x77
 8001636:	f7ff fdfa 	bl	800122e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800163a:	6839      	ldr	r1, [r7, #0]
 800163c:	2057      	movs	r0, #87	; 0x57
 800163e:	f7ff fdf6 	bl	800122e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	2059      	movs	r0, #89	; 0x59
 8001646:	f7ff fdf2 	bl	800122e <SD_SendCmd>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11b      	bne.n	8001688 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001650:	21fc      	movs	r1, #252	; 0xfc
 8001652:	68b8      	ldr	r0, [r7, #8]
 8001654:	f7ff fda8 	bl	80011a8 <SD_TxDataBlock>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00a      	beq.n	8001674 <SD_disk_write+0xd0>
				buff += 512;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001664:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	3b01      	subs	r3, #1
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ee      	bne.n	8001650 <SD_disk_write+0xac>
 8001672:	e000      	b.n	8001676 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001674:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001676:	21fd      	movs	r1, #253	; 0xfd
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff fd95 	bl	80011a8 <SD_TxDataBlock>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <SD_disk_write+0xe4>
			{
				count = 1;
 8001684:	2301      	movs	r3, #1
 8001686:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001688:	f7ff fc80 	bl	8000f8c <DESELECT>
	SPI_RxByte();
 800168c:	f7ff fcc0 	bl	8001010 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	bf14      	ite	ne
 8001696:	2301      	movne	r3, #1
 8001698:	2300      	moveq	r3, #0
 800169a:	b2db      	uxtb	r3, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000218 	.word	0x20000218

080016ac <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b08b      	sub	sp, #44	; 0x2c
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	603a      	str	r2, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	460b      	mov	r3, r1
 80016ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SD_disk_ioctl+0x1e>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e115      	b.n	80018f6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80016d0:	79bb      	ldrb	r3, [r7, #6]
 80016d2:	2b05      	cmp	r3, #5
 80016d4:	d124      	bne.n	8001720 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d012      	beq.n	8001704 <SD_disk_ioctl+0x58>
 80016de:	2b02      	cmp	r3, #2
 80016e0:	dc1a      	bgt.n	8001718 <SD_disk_ioctl+0x6c>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <SD_disk_ioctl+0x40>
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d006      	beq.n	80016f8 <SD_disk_ioctl+0x4c>
 80016ea:	e015      	b.n	8001718 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80016ec:	f7ff fd16 	bl	800111c <SD_PowerOff>
			res = RES_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016f6:	e0fc      	b.n	80018f2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80016f8:	f7ff fcce 	bl	8001098 <SD_PowerOn>
			res = RES_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001702:	e0f6      	b.n	80018f2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	1c5c      	adds	r4, r3, #1
 8001708:	f7ff fd14 	bl	8001134 <SD_CheckPower>
 800170c:	4603      	mov	r3, r0
 800170e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001716:	e0ec      	b.n	80018f2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001718:	2304      	movs	r3, #4
 800171a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800171e:	e0e8      	b.n	80018f2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001720:	4b77      	ldr	r3, [pc, #476]	; (8001900 <SD_disk_ioctl+0x254>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SD_disk_ioctl+0x86>
 800172e:	2303      	movs	r3, #3
 8001730:	e0e1      	b.n	80018f6 <SD_disk_ioctl+0x24a>

		SELECT();
 8001732:	f7ff fc1d 	bl	8000f70 <SELECT>

		switch (ctrl)
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	2b0d      	cmp	r3, #13
 800173a:	f200 80cb 	bhi.w	80018d4 <SD_disk_ioctl+0x228>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <SD_disk_ioctl+0x98>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	0800183f 	.word	0x0800183f
 8001748:	0800177d 	.word	0x0800177d
 800174c:	0800182f 	.word	0x0800182f
 8001750:	080018d5 	.word	0x080018d5
 8001754:	080018d5 	.word	0x080018d5
 8001758:	080018d5 	.word	0x080018d5
 800175c:	080018d5 	.word	0x080018d5
 8001760:	080018d5 	.word	0x080018d5
 8001764:	080018d5 	.word	0x080018d5
 8001768:	080018d5 	.word	0x080018d5
 800176c:	080018d5 	.word	0x080018d5
 8001770:	08001851 	.word	0x08001851
 8001774:	08001875 	.word	0x08001875
 8001778:	08001899 	.word	0x08001899
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800177c:	2100      	movs	r1, #0
 800177e:	2049      	movs	r0, #73	; 0x49
 8001780:	f7ff fd55 	bl	800122e <SD_SendCmd>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 80a8 	bne.w	80018dc <SD_disk_ioctl+0x230>
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2110      	movs	r1, #16
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fcda 	bl	800114c <SD_RxDataBlock>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 809e 	beq.w	80018dc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80017a0:	7b3b      	ldrb	r3, [r7, #12]
 80017a2:	099b      	lsrs	r3, r3, #6
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d10e      	bne.n	80017c8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80017aa:	7d7b      	ldrb	r3, [r7, #21]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	7d3b      	ldrb	r3, [r7, #20]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3301      	adds	r3, #1
 80017bc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80017be:	8bfb      	ldrh	r3, [r7, #30]
 80017c0:	029a      	lsls	r2, r3, #10
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e02e      	b.n	8001826 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017c8:	7c7b      	ldrb	r3, [r7, #17]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	7dbb      	ldrb	r3, [r7, #22]
 80017d2:	09db      	lsrs	r3, r3, #7
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	7d7b      	ldrb	r3, [r7, #21]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f003 0306 	and.w	r3, r3, #6
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3302      	adds	r3, #2
 80017ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017f0:	7d3b      	ldrb	r3, [r7, #20]
 80017f2:	099b      	lsrs	r3, r3, #6
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4413      	add	r3, r2
 8001802:	b29a      	uxth	r2, r3
 8001804:	7cbb      	ldrb	r3, [r7, #18]
 8001806:	029b      	lsls	r3, r3, #10
 8001808:	b29b      	uxth	r3, r3
 800180a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800180e:	b29b      	uxth	r3, r3
 8001810:	4413      	add	r3, r2
 8001812:	b29b      	uxth	r3, r3
 8001814:	3301      	adds	r3, #1
 8001816:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001818:	8bfa      	ldrh	r2, [r7, #30]
 800181a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800181e:	3b09      	subs	r3, #9
 8001820:	409a      	lsls	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800182c:	e056      	b.n	80018dc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001834:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800183c:	e055      	b.n	80018ea <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800183e:	f7ff fc11 	bl	8001064 <SD_ReadyWait>
 8001842:	4603      	mov	r3, r0
 8001844:	2bff      	cmp	r3, #255	; 0xff
 8001846:	d14b      	bne.n	80018e0 <SD_disk_ioctl+0x234>
 8001848:	2300      	movs	r3, #0
 800184a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800184e:	e047      	b.n	80018e0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001850:	2100      	movs	r1, #0
 8001852:	2049      	movs	r0, #73	; 0x49
 8001854:	f7ff fceb 	bl	800122e <SD_SendCmd>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d142      	bne.n	80018e4 <SD_disk_ioctl+0x238>
 800185e:	2110      	movs	r1, #16
 8001860:	6a38      	ldr	r0, [r7, #32]
 8001862:	f7ff fc73 	bl	800114c <SD_RxDataBlock>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d03b      	beq.n	80018e4 <SD_disk_ioctl+0x238>
 800186c:	2300      	movs	r3, #0
 800186e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001872:	e037      	b.n	80018e4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001874:	2100      	movs	r1, #0
 8001876:	204a      	movs	r0, #74	; 0x4a
 8001878:	f7ff fcd9 	bl	800122e <SD_SendCmd>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d132      	bne.n	80018e8 <SD_disk_ioctl+0x23c>
 8001882:	2110      	movs	r1, #16
 8001884:	6a38      	ldr	r0, [r7, #32]
 8001886:	f7ff fc61 	bl	800114c <SD_RxDataBlock>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d02b      	beq.n	80018e8 <SD_disk_ioctl+0x23c>
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001896:	e027      	b.n	80018e8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001898:	2100      	movs	r1, #0
 800189a:	207a      	movs	r0, #122	; 0x7a
 800189c:	f7ff fcc7 	bl	800122e <SD_SendCmd>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d116      	bne.n	80018d4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018ac:	e00b      	b.n	80018c6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80018ae:	6a3c      	ldr	r4, [r7, #32]
 80018b0:	1c63      	adds	r3, r4, #1
 80018b2:	623b      	str	r3, [r7, #32]
 80018b4:	f7ff fbac 	bl	8001010 <SPI_RxByte>
 80018b8:	4603      	mov	r3, r0
 80018ba:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80018bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018c0:	3301      	adds	r3, #1
 80018c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d9ef      	bls.n	80018ae <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80018d4:	2304      	movs	r3, #4
 80018d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018da:	e006      	b.n	80018ea <SD_disk_ioctl+0x23e>
			break;
 80018dc:	bf00      	nop
 80018de:	e004      	b.n	80018ea <SD_disk_ioctl+0x23e>
			break;
 80018e0:	bf00      	nop
 80018e2:	e002      	b.n	80018ea <SD_disk_ioctl+0x23e>
			break;
 80018e4:	bf00      	nop
 80018e6:	e000      	b.n	80018ea <SD_disk_ioctl+0x23e>
			break;
 80018e8:	bf00      	nop
		}

		DESELECT();
 80018ea:	f7ff fb4f 	bl	8000f8c <DESELECT>
		SPI_RxByte();
 80018ee:	f7ff fb8f 	bl	8001010 <SPI_RxByte>
	}

	return res;
 80018f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	372c      	adds	r7, #44	; 0x2c
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000000 	.word	0x20000000

08001904 <toggle_headlamp>:
#include <stdio.h>
#include "main.h"

int headlamp_on = 0;

void toggle_headlamp() {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_GetState(HEADLAMP_TIMER) == HAL_TIM_STATE_READY) {
 8001908:	481b      	ldr	r0, [pc, #108]	; (8001978 <toggle_headlamp+0x74>)
 800190a:	f005 f8cc 	bl	8006aa6 <HAL_TIM_Base_GetState>
 800190e:	4603      	mov	r3, r0
 8001910:	2b01      	cmp	r3, #1
 8001912:	d12f      	bne.n	8001974 <toggle_headlamp+0x70>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin,
 8001914:	2200      	movs	r2, #0
 8001916:	2101      	movs	r1, #1
 8001918:	4818      	ldr	r0, [pc, #96]	; (800197c <toggle_headlamp+0x78>)
 800191a:	f002 fdf7 	bl	800450c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		if (headlamp_on) {
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <toggle_headlamp+0x7c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00f      	beq.n	8001946 <toggle_headlamp+0x42>
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 10000);
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <toggle_headlamp+0x74>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f242 7210 	movw	r2, #10000	; 0x2710
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <toggle_headlamp+0x74>)
 8001932:	f242 7210 	movw	r2, #10000	; 0x2710
 8001936:	60da      	str	r2, [r3, #12]
			printf("Light off\n");
 8001938:	4812      	ldr	r0, [pc, #72]	; (8001984 <toggle_headlamp+0x80>)
 800193a:	f00a fac3 	bl	800bec4 <puts>
			headlamp_on = 0;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <toggle_headlamp+0x7c>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e00e      	b.n	8001964 <toggle_headlamp+0x60>
		} else {
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 2500);
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <toggle_headlamp+0x74>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <toggle_headlamp+0x74>)
 8001952:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001956:	60da      	str	r2, [r3, #12]
			printf("Light on\n");
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <toggle_headlamp+0x84>)
 800195a:	f00a fab3 	bl	800bec4 <puts>
			headlamp_on = 1;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <toggle_headlamp+0x7c>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]
		}
		FIX_TIMER_TRIGGER(HEADLAMP_TIMER);
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <toggle_headlamp+0x74>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0201 	mvn.w	r2, #1
 800196c:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 800196e:	4802      	ldr	r0, [pc, #8]	; (8001978 <toggle_headlamp+0x74>)
 8001970:	f004 fed8 	bl	8006724 <HAL_TIM_Base_Start_IT>
	}
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200003c8 	.word	0x200003c8
 800197c:	40020000 	.word	0x40020000
 8001980:	2000021c 	.word	0x2000021c
 8001984:	0800e220 	.word	0x0800e220
 8001988:	0800e22c 	.word	0x0800e22c

0800198c <Input_Touched>:
uint8_t status[8];
int input_connected = 1;

extern XBee_Data XBee_Send;

void Input_Touched(int button) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b090      	sub	sp, #64	; 0x40
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	char buffer[50];
	switch (button) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <Input_Touched+0x16>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d01b      	beq.n	80019d8 <Input_Touched+0x4c>
 80019a0:	e020      	b.n	80019e4 <Input_Touched+0x58>
	case 0:
		printf("Sending message\n");
 80019a2:	4814      	ldr	r0, [pc, #80]	; (80019f4 <Input_Touched+0x68>)
 80019a4:	f00a fa8e 	bl	800bec4 <puts>
		XBee_Send.command = PrintMessage;
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <Input_Touched+0x6c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
		XBee_Send.target = 0;
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <Input_Touched+0x6c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
		sprintf(buffer, "Hello from device %u", (unsigned int) UID);
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <Input_Touched+0x70>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4910      	ldr	r1, [pc, #64]	; (8001a00 <Input_Touched+0x74>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f00a fa98 	bl	800bef4 <siprintf>
		strcpy((char *) XBee_Send.data, buffer);
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	480e      	ldr	r0, [pc, #56]	; (8001a04 <Input_Touched+0x78>)
 80019cc:	f00a fab2 	bl	800bf34 <strcpy>
		XBee_Transmit(&XBee_Send);
 80019d0:	4809      	ldr	r0, [pc, #36]	; (80019f8 <Input_Touched+0x6c>)
 80019d2:	f001 f975 	bl	8002cc0 <XBee_Transmit>
		break;
 80019d6:	e009      	b.n	80019ec <Input_Touched+0x60>
	case 1:
		printf("Toggling headlamp\n");
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <Input_Touched+0x7c>)
 80019da:	f00a fa73 	bl	800bec4 <puts>
		toggle_headlamp();
 80019de:	f7ff ff91 	bl	8001904 <toggle_headlamp>
		break;
 80019e2:	e003      	b.n	80019ec <Input_Touched+0x60>
	default:
		printf("Button not configured\n");
 80019e4:	4809      	ldr	r0, [pc, #36]	; (8001a0c <Input_Touched+0x80>)
 80019e6:	f00a fa6d 	bl	800bec4 <puts>
	}
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3740      	adds	r7, #64	; 0x40
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	0800e238 	.word	0x0800e238
 80019f8:	20000694 	.word	0x20000694
 80019fc:	20002780 	.word	0x20002780
 8001a00:	0800e248 	.word	0x0800e248
 8001a04:	2000069c 	.word	0x2000069c
 8001a08:	0800e260 	.word	0x0800e260
 8001a0c:	0800e274 	.word	0x0800e274

08001a10 <Input_Write>:
	} else {
		printf("Button not configured\n");
	}
}

void Input_Write(uint16_t MemAddress, uint8_t *pData, uint16_t Size) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	80fb      	strh	r3, [r7, #6]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001a20:	88fa      	ldrh	r2, [r7, #6]
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	21b4      	movs	r1, #180	; 0xb4
 8001a34:	4807      	ldr	r0, [pc, #28]	; (8001a54 <Input_Write+0x44>)
 8001a36:	f002 fedf 	bl	80047f8 <HAL_I2C_Mem_Write>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	if (ret != HAL_OK) {
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <Input_Write+0x3a>
		input_connected = 0;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <Input_Write+0x48>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000270 	.word	0x20000270
 8001a58:	20000004 	.word	0x20000004

08001a5c <Input_Write_Byte>:

void Input_Write_Byte(uint16_t MemAddress, uint8_t pData) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	460a      	mov	r2, r1
 8001a66:	80fb      	strh	r3, [r7, #6]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	717b      	strb	r3, [r7, #5]
	uint8_t buf[] = { pData };
 8001a6c:	797b      	ldrb	r3, [r7, #5]
 8001a6e:	733b      	strb	r3, [r7, #12]
	Input_Write(MemAddress, buf, 1);
 8001a70:	f107 010c 	add.w	r1, r7, #12
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ffc9 	bl	8001a10 <Input_Write>
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <Input_Read>:

void Input_Read(uint16_t MemAddress, uint8_t *pData, uint16_t Size) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	80fb      	strh	r3, [r7, #6]
 8001a94:	4613      	mov	r3, r2
 8001a96:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(INPUT_I2C, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size,
 8001a98:	88fa      	ldrh	r2, [r7, #6]
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	88bb      	ldrh	r3, [r7, #4]
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	21b4      	movs	r1, #180	; 0xb4
 8001aac:	4807      	ldr	r0, [pc, #28]	; (8001acc <Input_Read+0x44>)
 8001aae:	f002 ff9d 	bl	80049ec <HAL_I2C_Mem_Read>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	if (ret != HAL_OK) {
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <Input_Read+0x3a>
		input_connected = 0;
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <Input_Read+0x48>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
	}
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000270 	.word	0x20000270
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <Input_Read_Byte>:

uint8_t Input_Read_Byte(uint16_t MemAddress) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[1];
	Input_Read(MemAddress, buf, 1);
 8001ade:	f107 010c 	add.w	r1, r7, #12
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ffce 	bl	8001a88 <Input_Read>
	return buf[0];
 8001aec:	7b3b      	ldrb	r3, [r7, #12]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <Input_Resolve>:

void Input_Resolve() {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
	uint8_t read = Input_Read_Byte(MPR121_TOUCHSTATUS_L);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff ffe8 	bl	8001ad4 <Input_Read_Byte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 8; i++) {
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	e020      	b.n	8001b50 <Input_Resolve+0x58>
		uint8_t button = read & (1 << i);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	b25a      	sxtb	r2, r3
 8001b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	70bb      	strb	r3, [r7, #2]
		if (button && !status[i]) {
 8001b22:	78bb      	ldrb	r3, [r7, #2]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00b      	beq.n	8001b40 <Input_Resolve+0x48>
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <Input_Resolve+0x68>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d103      	bne.n	8001b3c <Input_Resolve+0x44>
			Input_Touched(i);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff29 	bl	800198c <Input_Touched>
 8001b3a:	e001      	b.n	8001b40 <Input_Resolve+0x48>
		} else if (!button && status[i]) {
 8001b3c:	78bb      	ldrb	r3, [r7, #2]
 8001b3e:	2b00      	cmp	r3, #0
//			Input_Released(i);
		}
		status[i] = button;
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <Input_Resolve+0x68>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	78ba      	ldrb	r2, [r7, #2]
 8001b48:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b07      	cmp	r3, #7
 8001b54:	dddb      	ble.n	8001b0e <Input_Resolve+0x16>
	}
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000220 	.word	0x20000220

08001b64 <Input_Set_Thresholds>:

void Input_Set_Thresholds(uint8_t touch, uint8_t release) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 12; i++) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e017      	b.n	8001baa <Input_Set_Thresholds+0x46>
		Input_Write_Byte(MPR121_TOUCHTH_0 + 2 * i, touch);
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3341      	adds	r3, #65	; 0x41
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	79fa      	ldrb	r2, [r7, #7]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff66 	bl	8001a5c <Input_Write_Byte>
		Input_Write_Byte(MPR121_RELEASETH_0 + 2 * i, release);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	3321      	adds	r3, #33	; 0x21
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	79ba      	ldrb	r2, [r7, #6]
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff5c 	bl	8001a5c <Input_Write_Byte>
	for (uint8_t i = 0; i < 12; i++) {
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b0b      	cmp	r3, #11
 8001bae:	d9e4      	bls.n	8001b7a <Input_Set_Thresholds+0x16>
	}
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <Input_Init>:

void Input_Init() {
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
	Input_Write_Byte(MPR121_SOFTRESET, 0x63);
 8001bc0:	2163      	movs	r1, #99	; 0x63
 8001bc2:	2080      	movs	r0, #128	; 0x80
 8001bc4:	f7ff ff4a 	bl	8001a5c <Input_Write_Byte>
	HAL_Delay(1);
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f001 fb5d 	bl	8003288 <HAL_Delay>
	Input_Write_Byte(MPR121_ECR, 0x00);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	205e      	movs	r0, #94	; 0x5e
 8001bd2:	f7ff ff43 	bl	8001a5c <Input_Write_Byte>
	Input_Set_Thresholds(MPR121_TOUCH_THRESHOLD, MPR121_RELEASE_THRESHOLD);
 8001bd6:	2106      	movs	r1, #6
 8001bd8:	200c      	movs	r0, #12
 8001bda:	f7ff ffc3 	bl	8001b64 <Input_Set_Thresholds>
	Input_Write_Byte(MPR121_MHDR, 0x01);
 8001bde:	2101      	movs	r1, #1
 8001be0:	202b      	movs	r0, #43	; 0x2b
 8001be2:	f7ff ff3b 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_NHDR, 0x01);
 8001be6:	2101      	movs	r1, #1
 8001be8:	202c      	movs	r0, #44	; 0x2c
 8001bea:	f7ff ff37 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_NCLR, 0x0E);
 8001bee:	210e      	movs	r1, #14
 8001bf0:	202d      	movs	r0, #45	; 0x2d
 8001bf2:	f7ff ff33 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_FDLR, 0x00);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	202e      	movs	r0, #46	; 0x2e
 8001bfa:	f7ff ff2f 	bl	8001a5c <Input_Write_Byte>

	Input_Write_Byte(MPR121_MHDF, 0x01);
 8001bfe:	2101      	movs	r1, #1
 8001c00:	202f      	movs	r0, #47	; 0x2f
 8001c02:	f7ff ff2b 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_NHDF, 0x05);
 8001c06:	2105      	movs	r1, #5
 8001c08:	2030      	movs	r0, #48	; 0x30
 8001c0a:	f7ff ff27 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_NCLF, 0x01);
 8001c0e:	2101      	movs	r1, #1
 8001c10:	2031      	movs	r0, #49	; 0x31
 8001c12:	f7ff ff23 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_FDLF, 0x00);
 8001c16:	2100      	movs	r1, #0
 8001c18:	2032      	movs	r0, #50	; 0x32
 8001c1a:	f7ff ff1f 	bl	8001a5c <Input_Write_Byte>

	Input_Write_Byte(MPR121_NHDT, 0x00);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2033      	movs	r0, #51	; 0x33
 8001c22:	f7ff ff1b 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_NCLT, 0x00);
 8001c26:	2100      	movs	r1, #0
 8001c28:	2034      	movs	r0, #52	; 0x34
 8001c2a:	f7ff ff17 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_FDLT, 0x00);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2035      	movs	r0, #53	; 0x35
 8001c32:	f7ff ff13 	bl	8001a5c <Input_Write_Byte>

	Input_Write_Byte(MPR121_DEBOUNCE, 0);
 8001c36:	2100      	movs	r1, #0
 8001c38:	205b      	movs	r0, #91	; 0x5b
 8001c3a:	f7ff ff0f 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 8001c3e:	2110      	movs	r1, #16
 8001c40:	205c      	movs	r0, #92	; 0x5c
 8001c42:	f7ff ff0b 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 8001c46:	2120      	movs	r1, #32
 8001c48:	205d      	movs	r0, #93	; 0x5d
 8001c4a:	f7ff ff07 	bl	8001a5c <Input_Write_Byte>

	Input_Write_Byte(MPR121_AUTOCONFIG0, 0x0B);
 8001c4e:	210b      	movs	r1, #11
 8001c50:	207b      	movs	r0, #123	; 0x7b
 8001c52:	f7ff ff03 	bl	8001a5c <Input_Write_Byte>

	// correct values for Vdd = 3.3V
	Input_Write_Byte(MPR121_UPLIMIT, 200);     // ((Vdd - 0.7)/Vdd) * 256
 8001c56:	21c8      	movs	r1, #200	; 0xc8
 8001c58:	207d      	movs	r0, #125	; 0x7d
 8001c5a:	f7ff feff 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_TARGETLIMIT, 180); // UPLIMIT * 0.9
 8001c5e:	21b4      	movs	r1, #180	; 0xb4
 8001c60:	207f      	movs	r0, #127	; 0x7f
 8001c62:	f7ff fefb 	bl	8001a5c <Input_Write_Byte>
	Input_Write_Byte(MPR121_LOWLIMIT, 130);    // UPLIMIT * 0.65
 8001c66:	2182      	movs	r1, #130	; 0x82
 8001c68:	207e      	movs	r0, #126	; 0x7e
 8001c6a:	f7ff fef7 	bl	8001a5c <Input_Write_Byte>

	// enable X electrodes and start MPR121
	uint8_t ECR_SETTING = 0b10000000 + 8; // 5 bits for baseline tracking & proximity disabled + 8 electrodes running
 8001c6e:	2388      	movs	r3, #136	; 0x88
 8001c70:	71fb      	strb	r3, [r7, #7]
	Input_Write_Byte(MPR121_ECR, ECR_SETTING); // start with above ECR setting
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	4619      	mov	r1, r3
 8001c76:	205e      	movs	r0, #94	; 0x5e
 8001c78:	f7ff fef0 	bl	8001a5c <Input_Write_Byte>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <FS_Init>:
FATFS *pfs;
FIL fil;
DWORD fre_clust;
uint32_t total_space, free_space;

void FS_Init() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	if (f_mount(&fs, "/", 0) != FR_OK) {
 8001c88:	2200      	movs	r2, #0
 8001c8a:	492d      	ldr	r1, [pc, #180]	; (8001d40 <FS_Init+0xbc>)
 8001c8c:	482d      	ldr	r0, [pc, #180]	; (8001d44 <FS_Init+0xc0>)
 8001c8e:	f008 fccd 	bl	800a62c <f_mount>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <FS_Init+0x20>
		printf("Failed to mount SD Card\r\n");
 8001c98:	482b      	ldr	r0, [pc, #172]	; (8001d48 <FS_Init+0xc4>)
 8001c9a:	f00a f913 	bl	800bec4 <puts>
		exit(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f009 faf0 	bl	800b284 <exit>
	}

	if (f_getfree("", &fre_clust, &pfs) != FR_OK) {
 8001ca4:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <FS_Init+0xc8>)
 8001ca6:	492a      	ldr	r1, [pc, #168]	; (8001d50 <FS_Init+0xcc>)
 8001ca8:	482a      	ldr	r0, [pc, #168]	; (8001d54 <FS_Init+0xd0>)
 8001caa:	f009 f90d 	bl	800aec8 <f_getfree>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <FS_Init+0x3c>
		printf("Free space check failed\r\n");
 8001cb4:	4828      	ldr	r0, [pc, #160]	; (8001d58 <FS_Init+0xd4>)
 8001cb6:	f00a f905 	bl	800bec4 <puts>
		exit(1);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f009 fae2 	bl	800b284 <exit>
	}

	total_space = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <FS_Init+0xc8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	3b02      	subs	r3, #2
 8001cc8:	4a20      	ldr	r2, [pc, #128]	; (8001d4c <FS_Init+0xc8>)
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	8952      	ldrh	r2, [r2, #10]
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc1e 	bl	8000514 <__aeabi_ui2d>
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <FS_Init+0xd8>)
 8001cde:	f7fe fc93 	bl	8000608 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7fe ff65 	bl	8000bb8 <__aeabi_d2uiz>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <FS_Init+0xdc>)
 8001cf2:	6013      	str	r3, [r2, #0]
	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <FS_Init+0xc8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	895b      	ldrh	r3, [r3, #10]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <FS_Init+0xcc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc05 	bl	8000514 <__aeabi_ui2d>
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <FS_Init+0xd8>)
 8001d10:	f7fe fc7a 	bl	8000608 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe ff4c 	bl	8000bb8 <__aeabi_d2uiz>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <FS_Init+0xe0>)
 8001d24:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if (free_space < 1) {
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <FS_Init+0xe0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <FS_Init+0xb6>
		printf("Drive is full\r\n");
 8001d2e:	480e      	ldr	r0, [pc, #56]	; (8001d68 <FS_Init+0xe4>)
 8001d30:	f00a f8c8 	bl	800bec4 <puts>
		exit(1);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f009 faa5 	bl	800b284 <exit>
	}
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	0800e2a0 	.word	0x0800e2a0
 8001d44:	20000700 	.word	0x20000700
 8001d48:	0800e2a4 	.word	0x0800e2a4
 8001d4c:	20001738 	.word	0x20001738
 8001d50:	2000276c 	.word	0x2000276c
 8001d54:	0800e2c0 	.word	0x0800e2c0
 8001d58:	0800e2c4 	.word	0x0800e2c4
 8001d5c:	3fe00000 	.word	0x3fe00000
 8001d60:	20002770 	.word	0x20002770
 8001d64:	20002774 	.word	0x20002774
 8001d68:	0800e2e0 	.word	0x0800e2e0

08001d6c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d70:	f001 fa18 	bl	80031a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d74:	f000 f82a 	bl	8001dcc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d78:	f000 fa74 	bl	8002264 <MX_GPIO_Init>
	MX_DMA_Init();
 8001d7c:	f000 fa4a 	bl	8002214 <MX_DMA_Init>
	MX_I2C1_Init();
 8001d80:	f000 f8e2 	bl	8001f48 <MX_I2C1_Init>
	MX_SPI2_Init();
 8001d84:	f000 f93c 	bl	8002000 <MX_SPI2_Init>
	MX_SPI3_Init();
 8001d88:	f000 f970 	bl	800206c <MX_SPI3_Init>
	MX_USART2_UART_Init();
 8001d8c:	f000 fa18 	bl	80021c0 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8001d90:	f006 f9fe 	bl	8008190 <MX_FATFS_Init>
	MX_ADC1_Init();
 8001d94:	f000 f886 	bl	8001ea4 <MX_ADC1_Init>
	MX_TIM10_Init();
 8001d98:	f000 f9a0 	bl	80020dc <MX_TIM10_Init>
	MX_USART1_UART_Init();
 8001d9c:	f000 f9e6 	bl	800216c <MX_USART1_UART_Init>
	MX_I2C3_Init();
 8001da0:	f000 f900 	bl	8001fa4 <MX_I2C3_Init>
	MX_TIM11_Init();
 8001da4:	f000 f9be 	bl	8002124 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	XBee_Init();
 8001da8:	f001 f93e 	bl	8003028 <XBee_Init>
	Input_Init();
 8001dac:	f7ff ff05 	bl	8001bba <Input_Init>
	FS_Init();
 8001db0:	f7ff ff68 	bl	8001c84 <FS_Init>

	XBee_Broadcast_Identity("/me.wav");
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <main+0x58>)
 8001db6:	f001 f911 	bl	8002fdc <XBee_Broadcast_Identity>

	printf("System ready\n");
 8001dba:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <main+0x5c>)
 8001dbc:	f00a f882 	bl	800bec4 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001dc0:	e7fe      	b.n	8001dc0 <main+0x54>
 8001dc2:	bf00      	nop
 8001dc4:	0800e2f0 	.word	0x0800e2f0
 8001dc8:	0800e2f8 	.word	0x0800e2f8

08001dcc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b094      	sub	sp, #80	; 0x50
 8001dd0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001dd2:	f107 0320 	add.w	r3, r7, #32
 8001dd6:	2230      	movs	r2, #48	; 0x30
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f009 fa9a 	bl	800b314 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <SystemClock_Config+0xd0>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	4a28      	ldr	r2, [pc, #160]	; (8001e9c <SystemClock_Config+0xd0>)
 8001dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <SystemClock_Config+0xd0>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <SystemClock_Config+0xd4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e18:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <SystemClock_Config+0xd4>)
 8001e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <SystemClock_Config+0xd4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e30:	2301      	movs	r3, #1
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e34:	2310      	movs	r3, #16
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001e40:	2310      	movs	r3, #16
 8001e42:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001e44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e52:	f107 0320 	add.w	r3, r7, #32
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 fb4a 	bl	80054f0 <HAL_RCC_OscConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SystemClock_Config+0x9a>
		Error_Handler();
 8001e62:	f000 fabd 	bl	80023e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e66:	230f      	movs	r3, #15
 8001e68:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e76:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	2102      	movs	r1, #2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 fdac 	bl	80059e0 <HAL_RCC_ClockConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <SystemClock_Config+0xc6>
		Error_Handler();
 8001e8e:	f000 faa7 	bl	80023e0 <Error_Handler>
	}
}
 8001e92:	bf00      	nop
 8001e94:	3750      	adds	r7, #80	; 0x50
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000

08001ea4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001eaa:	463b      	mov	r3, r7
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001eb8:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <MX_ADC1_Init+0x9c>)
 8001eba:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001ebe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ec2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001ee6:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <MX_ADC1_Init+0xa0>)
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001f06:	f001 fa07 	bl	8003318 <HAL_ADC_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001f10:	f000 fa66 	bl	80023e0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001f14:	2308      	movs	r3, #8
 8001f16:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001f20:	463b      	mov	r3, r7
 8001f22:	4619      	mov	r1, r3
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_ADC1_Init+0x98>)
 8001f26:	f001 fa3b 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001f30:	f000 fa56 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000228 	.word	0x20000228
 8001f40:	40012000 	.word	0x40012000
 8001f44:	0f000001 	.word	0x0f000001

08001f48 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f4e:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <MX_I2C1_Init+0x54>)
 8001f50:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <MX_I2C1_Init+0x58>)
 8001f56:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f6a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f86:	f002 faf3 	bl	8004570 <HAL_I2C_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001f90:	f000 fa26 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000270 	.word	0x20000270
 8001f9c:	40005400 	.word	0x40005400
 8001fa0:	000186a0 	.word	0x000186a0

08001fa4 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <MX_I2C3_Init+0x50>)
 8001faa:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <MX_I2C3_Init+0x54>)
 8001fac:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_I2C3_Init+0x50>)
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <MX_I2C3_Init+0x58>)
 8001fb2:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_I2C3_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_I2C3_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_I2C3_Init+0x50>)
 8001fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fc6:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <MX_I2C3_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_I2C3_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <MX_I2C3_Init+0x50>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_I2C3_Init+0x50>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001fe0:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <MX_I2C3_Init+0x50>)
 8001fe2:	f002 fac5 	bl	8004570 <HAL_I2C_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8001fec:	f000 f9f8 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200002c4 	.word	0x200002c4
 8001ff8:	40005c00 	.word	0x40005c00
 8001ffc:	000186a0 	.word	0x000186a0

08002000 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <MX_SPI2_Init+0x64>)
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <MX_SPI2_Init+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_SPI2_Init+0x64>)
 800200c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002010:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_SPI2_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_SPI2_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_SPI2_Init+0x64>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_SPI2_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_SPI2_Init+0x64>)
 800202c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002030:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_SPI2_Init+0x64>)
 8002034:	2210      	movs	r2, #16
 8002036:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <MX_SPI2_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_SPI2_Init+0x64>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <MX_SPI2_Init+0x64>)
 8002046:	2200      	movs	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_SPI2_Init+0x64>)
 800204c:	220a      	movs	r2, #10
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <MX_SPI2_Init+0x64>)
 8002052:	f003 fee5 	bl	8005e20 <HAL_SPI_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_SPI2_Init+0x60>
		Error_Handler();
 800205c:	f000 f9c0 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000318 	.word	0x20000318
 8002068:	40003800 	.word	0x40003800

0800206c <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <MX_SPI3_Init+0x68>)
 8002072:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <MX_SPI3_Init+0x6c>)
 8002074:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <MX_SPI3_Init+0x68>)
 8002078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800207c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <MX_SPI3_Init+0x68>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <MX_SPI3_Init+0x68>)
 8002086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800208a:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <MX_SPI3_Init+0x68>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <MX_SPI3_Init+0x68>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002098:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <MX_SPI3_Init+0x68>)
 800209a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209e:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <MX_SPI3_Init+0x68>)
 80020a2:	2218      	movs	r2, #24
 80020a4:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <MX_SPI3_Init+0x68>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <MX_SPI3_Init+0x68>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <MX_SPI3_Init+0x68>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <MX_SPI3_Init+0x68>)
 80020ba:	220a      	movs	r2, #10
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_SPI3_Init+0x68>)
 80020c0:	f003 feae 	bl	8005e20 <HAL_SPI_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_SPI3_Init+0x62>
		Error_Handler();
 80020ca:	f000 f989 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000370 	.word	0x20000370
 80020d8:	40003c00 	.word	0x40003c00

080020dc <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MX_TIM10_Init+0x40>)
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <MX_TIM10_Init+0x44>)
 80020e4:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 8400 - 1;
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <MX_TIM10_Init+0x40>)
 80020e8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80020ec:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <MX_TIM10_Init+0x40>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_TIM10_Init+0x40>)
 80020f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020fa:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <MX_TIM10_Init+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <MX_TIM10_Init+0x40>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8002108:	4804      	ldr	r0, [pc, #16]	; (800211c <MX_TIM10_Init+0x40>)
 800210a:	f004 fabb 	bl	8006684 <HAL_TIM_Base_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM10_Init+0x3c>
		Error_Handler();
 8002114:	f000 f964 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200003c8 	.word	0x200003c8
 8002120:	40014400 	.word	0x40014400

08002124 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_TIM11_Init+0x40>)
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <MX_TIM11_Init+0x44>)
 800212c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 8400 - 1;
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <MX_TIM11_Init+0x40>)
 8002130:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002134:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <MX_TIM11_Init+0x40>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_TIM11_Init+0x40>)
 800213e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002142:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <MX_TIM11_Init+0x40>)
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_TIM11_Init+0x40>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8002150:	4804      	ldr	r0, [pc, #16]	; (8002164 <MX_TIM11_Init+0x40>)
 8002152:	f004 fa97 	bl	8006684 <HAL_TIM_Base_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM11_Init+0x3c>
		Error_Handler();
 800215c:	f000 f940 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000410 	.word	0x20000410
 8002168:	40014800 	.word	0x40014800

0800216c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <MX_USART1_UART_Init+0x50>)
 8002174:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002198:	f44f 7240 	mov.w	r2, #768	; 0x300
 800219c:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 80021a6:	f004 fd21 	bl	8006bec <HAL_UART_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_USART1_UART_Init+0x48>
		Error_Handler();
 80021b0:	f000 f916 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000458 	.word	0x20000458
 80021bc:	40011000 	.word	0x40011000

080021c0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <MX_USART2_UART_Init+0x50>)
 80021c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021f8:	f004 fcf8 	bl	8006bec <HAL_UART_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002202:	f000 f8ed 	bl	80023e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000049c 	.word	0x2000049c
 8002210:	40004400 	.word	0x40004400

08002214 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <MX_DMA_Init+0x4c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a0f      	ldr	r2, [pc, #60]	; (8002260 <MX_DMA_Init+0x4c>)
 8002224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <MX_DMA_Init+0x4c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2101      	movs	r1, #1
 800223a:	203a      	movs	r0, #58	; 0x3a
 800223c:	f001 fba9 	bl	8003992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002240:	203a      	movs	r0, #58	; 0x3a
 8002242:	f001 fbc2 	bl	80039ca <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2046      	movs	r0, #70	; 0x46
 800224c:	f001 fba1 	bl	8003992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002250:	2046      	movs	r0, #70	; 0x46
 8002252:	f001 fbba 	bl	80039ca <HAL_NVIC_EnableIRQ>

}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800

08002264 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <MX_GPIO_Init+0x148>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <MX_GPIO_Init+0x148>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b48      	ldr	r3, [pc, #288]	; (80023ac <MX_GPIO_Init+0x148>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b44      	ldr	r3, [pc, #272]	; (80023ac <MX_GPIO_Init+0x148>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a43      	ldr	r2, [pc, #268]	; (80023ac <MX_GPIO_Init+0x148>)
 80022a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <MX_GPIO_Init+0x148>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <MX_GPIO_Init+0x148>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a3c      	ldr	r2, [pc, #240]	; (80023ac <MX_GPIO_Init+0x148>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <MX_GPIO_Init+0x148>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b36      	ldr	r3, [pc, #216]	; (80023ac <MX_GPIO_Init+0x148>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a35      	ldr	r2, [pc, #212]	; (80023ac <MX_GPIO_Init+0x148>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b33      	ldr	r3, [pc, #204]	; (80023ac <MX_GPIO_Init+0x148>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_SPI2_CS_GPIO_Port, SD_SPI2_CS_Pin, GPIO_PIN_RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2102      	movs	r1, #2
 80022ee:	4830      	ldr	r0, [pc, #192]	; (80023b0 <MX_GPIO_Init+0x14c>)
 80022f0:	f002 f90c 	bl	800450c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, HEADLAMP_OUT_Pin | LD2_Pin, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2121      	movs	r1, #33	; 0x21
 80022f8:	482e      	ldr	r0, [pc, #184]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022fa:	f002 f907 	bl	800450c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 80022fe:	2200      	movs	r2, #0
 8002300:	2104      	movs	r1, #4
 8002302:	482d      	ldr	r0, [pc, #180]	; (80023b8 <MX_GPIO_Init+0x154>)
 8002304:	f002 f902 	bl	800450c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : B1_Pin INPUT_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | INPUT_INT1_Pin;
 8002308:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800230c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800230e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002312:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	4824      	ldr	r0, [pc, #144]	; (80023b0 <MX_GPIO_Init+0x14c>)
 8002320:	f001 ff70 	bl	8004204 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_SPI2_CS_Pin */
	GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 8002324:	2302      	movs	r3, #2
 8002326:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002328:	2301      	movs	r3, #1
 800232a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4619      	mov	r1, r3
 800233a:	481d      	ldr	r0, [pc, #116]	; (80023b0 <MX_GPIO_Init+0x14c>)
 800233c:	f001 ff62 	bl	8004204 <HAL_GPIO_Init>

	/*Configure GPIO pin : HEADLAMP_OUT_Pin */
	GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin;
 8002340:	2301      	movs	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002344:	2311      	movs	r3, #17
 8002346:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HEADLAMP_OUT_GPIO_Port, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	4817      	ldr	r0, [pc, #92]	; (80023b4 <MX_GPIO_Init+0x150>)
 8002358:	f001 ff54 	bl	8004204 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800235c:	2320      	movs	r3, #32
 800235e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4810      	ldr	r0, [pc, #64]	; (80023b4 <MX_GPIO_Init+0x150>)
 8002374:	f001 ff46 	bl	8004204 <HAL_GPIO_Init>

	/*Configure GPIO pin : DAC_SPI2_CS_Pin */
	GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 8002378:	2304      	movs	r3, #4
 800237a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237c:	2301      	movs	r3, #1
 800237e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	480a      	ldr	r0, [pc, #40]	; (80023b8 <MX_GPIO_Init+0x154>)
 8002390:	f001 ff38 	bl	8004204 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2101      	movs	r1, #1
 8002398:	2017      	movs	r0, #23
 800239a:	f001 fafa 	bl	8003992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800239e:	2017      	movs	r0, #23
 80023a0:	f001 fb13 	bl	80039ca <HAL_NVIC_EnableIRQ>

}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020800 	.word	0x40020800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40020400 	.word	0x40020400

080023bc <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80023c4:	1d39      	adds	r1, r7, #4
 80023c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ca:	2201      	movs	r2, #1
 80023cc:	4803      	ldr	r0, [pc, #12]	; (80023dc <__io_putchar+0x20>)
 80023ce:	f004 fc5a 	bl	8006c86 <HAL_UART_Transmit>
	return ch;
 80023d2:	687b      	ldr	r3, [r7, #4]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000049c 	.word	0x2000049c

080023e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e4:	b672      	cpsid	i
}
 80023e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023e8:	e7fe      	b.n	80023e8 <Error_Handler+0x8>
	...

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_MspInit+0x4c>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_MspInit+0x4c>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_MspInit+0x4c>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_MspInit+0x4c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <HAL_MspInit+0x4c>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_MspInit+0x4c>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800242a:	2006      	movs	r0, #6
 800242c:	f001 faa6 	bl	800397c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800

0800243c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_ADC_MspInit+0xb0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d141      	bne.n	80024e2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <HAL_ADC_MspInit+0xb4>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a22      	ldr	r2, [pc, #136]	; (80024f0 <HAL_ADC_MspInit+0xb4>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_ADC_MspInit+0xb4>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <HAL_ADC_MspInit+0xb4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_ADC_MspInit+0xb4>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_ADC_MspInit+0xb4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_ADC_MspInit+0xb4>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <HAL_ADC_MspInit+0xb4>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_ADC_MspInit+0xb4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 80024b2:	2301      	movs	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024b6:	2303      	movs	r3, #3
 80024b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	4619      	mov	r1, r3
 80024c4:	480b      	ldr	r0, [pc, #44]	; (80024f4 <HAL_ADC_MspInit+0xb8>)
 80024c6:	f001 fe9d 	bl	8004204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 80024ca:	2303      	movs	r3, #3
 80024cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ce:	2303      	movs	r3, #3
 80024d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	4806      	ldr	r0, [pc, #24]	; (80024f8 <HAL_ADC_MspInit+0xbc>)
 80024de:	f001 fe91 	bl	8004204 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40012000 	.word	0x40012000
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40020400 	.word	0x40020400

080024fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a42      	ldr	r2, [pc, #264]	; (8002624 <HAL_I2C_MspInit+0x128>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12c      	bne.n	8002578 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a40      	ldr	r2, [pc, #256]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800253a:	23c0      	movs	r3, #192	; 0xc0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253e:	2312      	movs	r3, #18
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800254a:	2304      	movs	r3, #4
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	4619      	mov	r1, r3
 8002554:	4835      	ldr	r0, [pc, #212]	; (800262c <HAL_I2C_MspInit+0x130>)
 8002556:	f001 fe55 	bl	8004204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	4b32      	ldr	r3, [pc, #200]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a31      	ldr	r2, [pc, #196]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002576:	e050      	b.n	800261a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a2c      	ldr	r2, [pc, #176]	; (8002630 <HAL_I2C_MspInit+0x134>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d14b      	bne.n	800261a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	4b28      	ldr	r3, [pc, #160]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a27      	ldr	r2, [pc, #156]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c0:	2312      	movs	r3, #18
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025cc:	2304      	movs	r3, #4
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4817      	ldr	r0, [pc, #92]	; (8002634 <HAL_I2C_MspInit+0x138>)
 80025d8:	f001 fe14 	bl	8004204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e2:	2312      	movs	r3, #18
 80025e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025ee:	2304      	movs	r3, #4
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	480f      	ldr	r0, [pc, #60]	; (8002638 <HAL_I2C_MspInit+0x13c>)
 80025fa:	f001 fe03 	bl	8004204 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002608:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
}
 800261a:	bf00      	nop
 800261c:	3730      	adds	r7, #48	; 0x30
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40005400 	.word	0x40005400
 8002628:	40023800 	.word	0x40023800
 800262c:	40020400 	.word	0x40020400
 8002630:	40005c00 	.word	0x40005c00
 8002634:	40020800 	.word	0x40020800
 8002638:	40020000 	.word	0x40020000

0800263c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	; 0x30
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a42      	ldr	r2, [pc, #264]	; (8002764 <HAL_SPI_MspInit+0x128>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d14b      	bne.n	80026f6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a40      	ldr	r2, [pc, #256]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 8002668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	4b3a      	ldr	r3, [pc, #232]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a39      	ldr	r2, [pc, #228]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b37      	ldr	r3, [pc, #220]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b33      	ldr	r3, [pc, #204]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a32      	ldr	r2, [pc, #200]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 80026b2:	230c      	movs	r3, #12
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026c2:	2305      	movs	r3, #5
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	4827      	ldr	r0, [pc, #156]	; (800276c <HAL_SPI_MspInit+0x130>)
 80026ce:	f001 fd99 	bl	8004204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 80026d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2303      	movs	r3, #3
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026e4:	2305      	movs	r3, #5
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80026e8:	f107 031c 	add.w	r3, r7, #28
 80026ec:	4619      	mov	r1, r3
 80026ee:	4820      	ldr	r0, [pc, #128]	; (8002770 <HAL_SPI_MspInit+0x134>)
 80026f0:	f001 fd88 	bl	8004204 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80026f4:	e031      	b.n	800275a <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <HAL_SPI_MspInit+0x138>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d12c      	bne.n	800275a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 800270a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270e:	6413      	str	r3, [r2, #64]	; 0x40
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6313      	str	r3, [r2, #48]	; 0x30
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_SPI_MspInit+0x12c>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DAC_SPI3_SCK_Pin|DAC_SPI3_MOSI_Pin;
 8002738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800274a:	2306      	movs	r3, #6
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <HAL_SPI_MspInit+0x130>)
 8002756:	f001 fd55 	bl	8004204 <HAL_GPIO_Init>
}
 800275a:	bf00      	nop
 800275c:	3730      	adds	r7, #48	; 0x30
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40003800 	.word	0x40003800
 8002768:	40023800 	.word	0x40023800
 800276c:	40020800 	.word	0x40020800
 8002770:	40020400 	.word	0x40020400
 8002774:	40003c00 	.word	0x40003c00

08002778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <HAL_TIM_Base_MspInit+0x80>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d116      	bne.n	80027b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_TIM_Base_MspInit+0x84>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <HAL_TIM_Base_MspInit+0x84>)
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <HAL_TIM_Base_MspInit+0x84>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	2019      	movs	r0, #25
 80027ac:	f001 f8f1 	bl	8003992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027b0:	2019      	movs	r0, #25
 80027b2:	f001 f90a 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80027b6:	e01a      	b.n	80027ee <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_TIM_Base_MspInit+0x88>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d115      	bne.n	80027ee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_TIM_Base_MspInit+0x84>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <HAL_TIM_Base_MspInit+0x84>)
 80027cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_TIM_Base_MspInit+0x84>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	201a      	movs	r0, #26
 80027e4:	f001 f8d5 	bl	8003992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027e8:	201a      	movs	r0, #26
 80027ea:	f001 f8ee 	bl	80039ca <HAL_NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40014400 	.word	0x40014400
 80027fc:	40023800 	.word	0x40023800
 8002800:	40014800 	.word	0x40014800

08002804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a65      	ldr	r2, [pc, #404]	; (80029b8 <HAL_UART_MspInit+0x1b4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	f040 8092 	bne.w	800294c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	4b63      	ldr	r3, [pc, #396]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	4a62      	ldr	r2, [pc, #392]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 8002832:	f043 0310 	orr.w	r3, r3, #16
 8002836:	6453      	str	r3, [r2, #68]	; 0x44
 8002838:	4b60      	ldr	r3, [pc, #384]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	4a5b      	ldr	r2, [pc, #364]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6313      	str	r3, [r2, #48]	; 0x30
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = XBEE_USART_TX_Pin|XBEE_USART_RX_Pin|XBEE_USART_CTS_Pin|XBEE_USART_RTS_Pin;
 8002860:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286e:	2303      	movs	r3, #3
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002872:	2307      	movs	r3, #7
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	4850      	ldr	r0, [pc, #320]	; (80029c0 <HAL_UART_MspInit+0x1bc>)
 800287e:	f001 fcc1 	bl	8004204 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002882:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 8002884:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <HAL_UART_MspInit+0x1c4>)
 8002886:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002888:	4b4e      	ldr	r3, [pc, #312]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 800288a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800288e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002890:	4b4c      	ldr	r3, [pc, #304]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002896:	4b4b      	ldr	r3, [pc, #300]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 8002898:	2200      	movs	r2, #0
 800289a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800289c:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 800289e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028a4:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028aa:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80028b0:	4b44      	ldr	r3, [pc, #272]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028b6:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028bc:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028c2:	4840      	ldr	r0, [pc, #256]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 80028c4:	f001 f89c 	bl	8003a00 <HAL_DMA_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80028ce:	f7ff fd87 	bl	80023e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a3b      	ldr	r2, [pc, #236]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 80028d6:	639a      	str	r2, [r3, #56]	; 0x38
 80028d8:	4a3a      	ldr	r2, [pc, #232]	; (80029c4 <HAL_UART_MspInit+0x1c0>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 80028e0:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <HAL_UART_MspInit+0x1cc>)
 80028e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80028e4:	4b39      	ldr	r3, [pc, #228]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 80028e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ec:	4b37      	ldr	r3, [pc, #220]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 80028ee:	2240      	movs	r2, #64	; 0x40
 80028f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028f8:	4b34      	ldr	r3, [pc, #208]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 80028fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 8002902:	2200      	movs	r2, #0
 8002904:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002906:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002912:	4b2e      	ldr	r3, [pc, #184]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 8002914:	2200      	movs	r2, #0
 8002916:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 800291a:	2200      	movs	r2, #0
 800291c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800291e:	482b      	ldr	r0, [pc, #172]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 8002920:	f001 f86e 	bl	8003a00 <HAL_DMA_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800292a:	f7ff fd59 	bl	80023e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a26      	ldr	r2, [pc, #152]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 8002932:	635a      	str	r2, [r3, #52]	; 0x34
 8002934:	4a25      	ldr	r2, [pc, #148]	; (80029cc <HAL_UART_MspInit+0x1c8>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2101      	movs	r1, #1
 800293e:	2025      	movs	r0, #37	; 0x25
 8002940:	f001 f827 	bl	8003992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002944:	2025      	movs	r0, #37	; 0x25
 8002946:	f001 f840 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800294a:	e030      	b.n	80029ae <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <HAL_UART_MspInit+0x1d0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d12b      	bne.n	80029ae <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 8002960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_UART_MspInit+0x1b8>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 800298e:	230c      	movs	r3, #12
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800299e:	2307      	movs	r3, #7
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	; (80029c0 <HAL_UART_MspInit+0x1bc>)
 80029aa:	f001 fc2b 	bl	8004204 <HAL_GPIO_Init>
}
 80029ae:	bf00      	nop
 80029b0:	3730      	adds	r7, #48	; 0x30
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40011000 	.word	0x40011000
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	200004e0 	.word	0x200004e0
 80029c8:	40026440 	.word	0x40026440
 80029cc:	20000540 	.word	0x20000540
 80029d0:	400264b8 	.word	0x400264b8
 80029d4:	40004400 	.word	0x40004400

080029d8 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile extern uint8_t Timer1, Timer2;

void SDTimer_Handler() {
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

	if (Timer1 > 0) {
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <SDTimer_Handler+0x40>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <SDTimer_Handler+0x1c>
		--Timer1;
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <SDTimer_Handler+0x40>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <SDTimer_Handler+0x40>)
 80029f2:	701a      	strb	r2, [r3, #0]
	}

	if (Timer2 > 0) {
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <SDTimer_Handler+0x44>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <SDTimer_Handler+0x34>
		--Timer2;
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <SDTimer_Handler+0x44>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <SDTimer_Handler+0x44>)
 8002a0a:	701a      	strb	r2, [r3, #0]
	}
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000214 	.word	0x20000214
 8002a1c:	20000216 	.word	0x20000216

08002a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002a24:	e7fe      	b.n	8002a24 <NMI_Handler+0x4>

08002a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2a:	e7fe      	b.n	8002a2a <HardFault_Handler+0x4>

08002a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <MemManage_Handler+0x4>

08002a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <BusFault_Handler+0x4>

08002a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <UsageFault_Handler+0x4>

08002a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <SysTick_Handler+0x30>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <SysTick_Handler+0x30>)
 8002a78:	701a      	strb	r2, [r3, #0]

	if (FatFsCnt >= 10) {
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <SysTick_Handler+0x30>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b09      	cmp	r3, #9
 8002a82:	d904      	bls.n	8002a8e <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <SysTick_Handler+0x30>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002a8a:	f7ff ffa5 	bl	80029d8 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a8e:	f000 fbdb 	bl	8003248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20002778 	.word	0x20002778

08002a9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT_INT1_Pin);
 8002aa0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002aa4:	f001 fd4c 	bl	8004540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002ab0:	4802      	ldr	r0, [pc, #8]	; (8002abc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ab2:	f003 fec8 	bl	8006846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	200003c8 	.word	0x200003c8

08002ac0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002ac4:	4802      	ldr	r0, [pc, #8]	; (8002ad0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002ac6:	f003 febe 	bl	8006846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000410 	.word	0x20000410

08002ad4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ad8:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <USART1_IRQHandler+0x10>)
 8002ada:	f004 fa15 	bl	8006f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000458 	.word	0x20000458

08002ae8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <DMA2_Stream2_IRQHandler+0x10>)
 8002aee:	f001 f91f 	bl	8003d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200004e0 	.word	0x200004e0

08002afc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <DMA2_Stream7_IRQHandler+0x10>)
 8002b02:	f001 f915 	bl	8003d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000540 	.word	0x20000540

08002b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
	return 1;
 8002b14:	2301      	movs	r3, #1
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_kill>:

int _kill(int pid, int sig)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b2a:	f008 fba5 	bl	800b278 <__errno>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2216      	movs	r2, #22
 8002b32:	601a      	str	r2, [r3, #0]
	return -1;
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_exit>:

void _exit (int status)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ffe7 	bl	8002b20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b52:	e7fe      	b.n	8002b52 <_exit+0x12>

08002b54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e00a      	b.n	8002b7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b66:	f3af 8000 	nop.w
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	60ba      	str	r2, [r7, #8]
 8002b72:	b2ca      	uxtb	r2, r1
 8002b74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	dbf0      	blt.n	8002b66 <_read+0x12>
	}

return len;
 8002b84:	687b      	ldr	r3, [r7, #4]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e009      	b.n	8002bb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	60ba      	str	r2, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fc07 	bl	80023bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dbf1      	blt.n	8002ba0 <_write+0x12>
	}
	return len;
 8002bbc:	687b      	ldr	r3, [r7, #4]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_close>:

int _close(int file)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
	return -1;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bee:	605a      	str	r2, [r3, #4]
	return 0;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_isatty>:

int _isatty(int file)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
	return 1;
 8002c06:	2301      	movs	r3, #1
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <_sbrk+0x5c>)
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <_sbrk+0x60>)
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <_sbrk+0x64>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <_sbrk+0x64>)
 8002c4e:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <_sbrk+0x68>)
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <_sbrk+0x64>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d207      	bcs.n	8002c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c60:	f008 fb0a 	bl	800b278 <__errno>
 8002c64:	4603      	mov	r3, r0
 8002c66:	220c      	movs	r2, #12
 8002c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6e:	e009      	b.n	8002c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <_sbrk+0x64>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <_sbrk+0x64>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <_sbrk+0x64>)
 8002c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20018000 	.word	0x20018000
 8002c90:	00000400 	.word	0x00000400
 8002c94:	2000277c 	.word	0x2000277c
 8002c98:	20002a70 	.word	0x20002a70

08002c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <SystemInit+0x20>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	4a05      	ldr	r2, [pc, #20]	; (8002cbc <SystemInit+0x20>)
 8002ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <XBee_Transmit>:
uint8_t *file_buf;
FSIZE_t fsize;
FSIZE_t rsize;
TCHAR rpath[MAX_PATH_LENGTH];

void XBee_Transmit(XBee_Data *data) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8002cc8:	f000 fad2 	bl	8003270 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]
	if (last_transmit == 0 || time < last_transmit || time - last_transmit > MIN_TRANSMIT_PERIOD) {
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <XBee_Transmit+0x44>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <XBee_Transmit+0x2c>
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <XBee_Transmit+0x44>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d305      	bcc.n	8002cec <XBee_Transmit+0x2c>
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <XBee_Transmit+0x44>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b64      	cmp	r3, #100	; 0x64
 8002cea:	d907      	bls.n	8002cfc <XBee_Transmit+0x3c>
		HAL_UART_Transmit_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8002cec:	226c      	movs	r2, #108	; 0x6c
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4805      	ldr	r0, [pc, #20]	; (8002d08 <XBee_Transmit+0x48>)
 8002cf2:	f004 f85b 	bl	8006dac <HAL_UART_Transmit_DMA>
		last_transmit = time;
 8002cf6:	4a03      	ldr	r2, [pc, #12]	; (8002d04 <XBee_Transmit+0x44>)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6013      	str	r3, [r2, #0]
	}
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	200027f0 	.word	0x200027f0
 8002d08:	20000458 	.word	0x20000458

08002d0c <XBee_Transmit_File>:
	}
	printf("Already transmitting file\n");
	return -1;
}

void XBee_Transmit_File() {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	printf("Transmitting file\n");
 8002d10:	4808      	ldr	r0, [pc, #32]	; (8002d34 <XBee_Transmit_File+0x28>)
 8002d12:	f009 f8d7 	bl	800bec4 <puts>
	HAL_UART_Transmit_DMA(XBEE_UART, file_buf, fsize);
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <XBee_Transmit_File+0x2c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <XBee_Transmit_File+0x30>)
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	b292      	uxth	r2, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	4807      	ldr	r0, [pc, #28]	; (8002d40 <XBee_Transmit_File+0x34>)
 8002d24:	f004 f842 	bl	8006dac <HAL_UART_Transmit_DMA>
	transmitting_file = 2;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <XBee_Transmit_File+0x38>)
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	601a      	str	r2, [r3, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	0800e398 	.word	0x0800e398
 8002d38:	200027fc 	.word	0x200027fc
 8002d3c:	20002800 	.word	0x20002800
 8002d40:	20000458 	.word	0x20000458
 8002d44:	200027f4 	.word	0x200027f4

08002d48 <XBee_Receive>:

void XBee_Receive(XBee_Data *data) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8002d50:	226c      	movs	r2, #108	; 0x6c
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4803      	ldr	r0, [pc, #12]	; (8002d64 <XBee_Receive+0x1c>)
 8002d56:	f004 f8a7 	bl	8006ea8 <HAL_UART_Receive_DMA>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000458 	.word	0x20000458

08002d68 <XBee_Receive_File>:

void XBee_Receive_File() {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
	if (!receiving_file) {
 8002d6c:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <XBee_Receive_File+0x48>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d118      	bne.n	8002da6 <XBee_Receive_File+0x3e>
		printf("Receiving file\n");
 8002d74:	480f      	ldr	r0, [pc, #60]	; (8002db4 <XBee_Receive_File+0x4c>)
 8002d76:	f009 f8a5 	bl	800bec4 <puts>
		file_buf = (uint8_t *) malloc(rsize);
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <XBee_Receive_File+0x50>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f008 fab8 	bl	800b2f4 <malloc>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <XBee_Receive_File+0x54>)
 8002d8a:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(XBEE_UART, file_buf, rsize);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <XBee_Receive_File+0x54>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <XBee_Receive_File+0x50>)
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	b292      	uxth	r2, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	4809      	ldr	r0, [pc, #36]	; (8002dc0 <XBee_Receive_File+0x58>)
 8002d9a:	f004 f885 	bl	8006ea8 <HAL_UART_Receive_DMA>
		receiving_file = 1;
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <XBee_Receive_File+0x48>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
	} else {
		printf("Already receiving file\n");
	}
}
 8002da4:	e002      	b.n	8002dac <XBee_Receive_File+0x44>
		printf("Already receiving file\n");
 8002da6:	4807      	ldr	r0, [pc, #28]	; (8002dc4 <XBee_Receive_File+0x5c>)
 8002da8:	f009 f88c 	bl	800bec4 <puts>
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	200027f8 	.word	0x200027f8
 8002db4:	0800e3ac 	.word	0x0800e3ac
 8002db8:	20002804 	.word	0x20002804
 8002dbc:	200027fc 	.word	0x200027fc
 8002dc0:	20000458 	.word	0x20000458
 8002dc4:	0800e3bc 	.word	0x0800e3bc

08002dc8 <XBee_Resolve>:

void XBee_Resolve() {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
	if (XBee_Received.target == 0 || XBee_Received.target == UID) {
 8002dce:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <XBee_Resolve+0x118>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <XBee_Resolve+0x1a>
 8002dd6:	4b42      	ldr	r3, [pc, #264]	; (8002ee0 <XBee_Resolve+0x118>)
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <XBee_Resolve+0x11c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d179      	bne.n	8002ed6 <XBee_Resolve+0x10e>
		switch (XBee_Received.command) {
 8002de2:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <XBee_Resolve+0x118>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d86b      	bhi.n	8002ec2 <XBee_Resolve+0xfa>
 8002dea:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <XBee_Resolve+0x28>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e09 	.word	0x08002e09
 8002df8:	08002e99 	.word	0x08002e99
 8002dfc:	08002eb5 	.word	0x08002eb5
		case PrintMessage:
			printf("%s\n", (char *) XBee_Received.data);
 8002e00:	4839      	ldr	r0, [pc, #228]	; (8002ee8 <XBee_Resolve+0x120>)
 8002e02:	f009 f85f 	bl	800bec4 <puts>
			break;
 8002e06:	e05f      	b.n	8002ec8 <XBee_Resolve+0x100>
		case BroadcastIdentity:
			if (num_registered_devices == MAX_DEVICES) {
 8002e08:	4b38      	ldr	r3, [pc, #224]	; (8002eec <XBee_Resolve+0x124>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b0a      	cmp	r3, #10
 8002e0e:	d103      	bne.n	8002e18 <XBee_Resolve+0x50>
				printf("Maximum registered network devices reached\n");
 8002e10:	4837      	ldr	r0, [pc, #220]	; (8002ef0 <XBee_Resolve+0x128>)
 8002e12:	f009 f857 	bl	800bec4 <puts>
				break;
 8002e16:	e057      	b.n	8002ec8 <XBee_Resolve+0x100>
			}
			uint32_t uid = *((uint32_t *) XBee_Received.data);
 8002e18:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <XBee_Resolve+0x120>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	603b      	str	r3, [r7, #0]
			for (int i = 0; i < num_registered_devices; i++) {
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	e013      	b.n	8002e4c <XBee_Resolve+0x84>
				if (devices[i].uid == uid) {
 8002e24:	4933      	ldr	r1, [pc, #204]	; (8002ef4 <XBee_Resolve+0x12c>)
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	440b      	add	r3, r1
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d105      	bne.n	8002e46 <XBee_Resolve+0x7e>
					printf("Already registered device %u\n", (unsigned int) uid);
 8002e3a:	6839      	ldr	r1, [r7, #0]
 8002e3c:	482e      	ldr	r0, [pc, #184]	; (8002ef8 <XBee_Resolve+0x130>)
 8002e3e:	f008 ffbb 	bl	800bdb8 <iprintf>
					goto done;
 8002e42:	bf00      	nop
			devices[num_registered_devices].uid = uid;
			strcpy(devices[num_registered_devices].file_path, (TCHAR *) &XBee_Received.data[sizeof(uint32_t)]);
			num_registered_devices++;
			printf("Registered new device with UID %u\n", (unsigned int) uid);
done:
			break;
 8002e44:	e040      	b.n	8002ec8 <XBee_Resolve+0x100>
			for (int i = 0; i < num_registered_devices; i++) {
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <XBee_Resolve+0x124>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	dbe6      	blt.n	8002e24 <XBee_Resolve+0x5c>
			devices[num_registered_devices].uid = uid;
 8002e56:	4b25      	ldr	r3, [pc, #148]	; (8002eec <XBee_Resolve+0x124>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4926      	ldr	r1, [pc, #152]	; (8002ef4 <XBee_Resolve+0x12c>)
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	601a      	str	r2, [r3, #0]
			strcpy(devices[num_registered_devices].file_path, (TCHAR *) &XBee_Received.data[sizeof(uint32_t)]);
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <XBee_Resolve+0x124>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <XBee_Resolve+0x12c>)
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	491f      	ldr	r1, [pc, #124]	; (8002efc <XBee_Resolve+0x134>)
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f009 f858 	bl	800bf34 <strcpy>
			num_registered_devices++;
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <XBee_Resolve+0x124>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <XBee_Resolve+0x124>)
 8002e8c:	6013      	str	r3, [r2, #0]
			printf("Registered new device with UID %u\n", (unsigned int) uid);
 8002e8e:	6839      	ldr	r1, [r7, #0]
 8002e90:	481b      	ldr	r0, [pc, #108]	; (8002f00 <XBee_Resolve+0x138>)
 8002e92:	f008 ff91 	bl	800bdb8 <iprintf>
			break;
 8002e96:	e017      	b.n	8002ec8 <XBee_Resolve+0x100>
		case ReceiveFile:
			printf("Preparing to receive file\n");
 8002e98:	481a      	ldr	r0, [pc, #104]	; (8002f04 <XBee_Resolve+0x13c>)
 8002e9a:	f009 f813 	bl	800bec4 <puts>
			rsize = *((FSIZE_t *) XBee_Received.data);
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <XBee_Resolve+0x120>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <XBee_Resolve+0x140>)
 8002ea4:	6013      	str	r3, [r2, #0]
			strcpy(rpath, (TCHAR *) &XBee_Received.data[sizeof(FSIZE_t)]);
 8002ea6:	4915      	ldr	r1, [pc, #84]	; (8002efc <XBee_Resolve+0x134>)
 8002ea8:	4818      	ldr	r0, [pc, #96]	; (8002f0c <XBee_Resolve+0x144>)
 8002eaa:	f009 f843 	bl	800bf34 <strcpy>
			XBee_Receive_File();
 8002eae:	f7ff ff5b 	bl	8002d68 <XBee_Receive_File>
			break;
 8002eb2:	e009      	b.n	8002ec8 <XBee_Resolve+0x100>
		case ImpactEvent:
			printf("Impacted detected on device %u\n", XBee_Received.data[0]);
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <XBee_Resolve+0x118>)
 8002eb6:	7a1b      	ldrb	r3, [r3, #8]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4815      	ldr	r0, [pc, #84]	; (8002f10 <XBee_Resolve+0x148>)
 8002ebc:	f008 ff7c 	bl	800bdb8 <iprintf>
			break;
 8002ec0:	e002      	b.n	8002ec8 <XBee_Resolve+0x100>
		default:
			printf("Unknown command received over network\n");
 8002ec2:	4814      	ldr	r0, [pc, #80]	; (8002f14 <XBee_Resolve+0x14c>)
 8002ec4:	f008 fffe 	bl	800bec4 <puts>
		}
		if (!receiving_file) {
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <XBee_Resolve+0x150>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <XBee_Resolve+0x10e>
			XBee_Receive(&XBee_Received);
 8002ed0:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <XBee_Resolve+0x118>)
 8002ed2:	f7ff ff39 	bl	8002d48 <XBee_Receive>
		}
	}
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20002784 	.word	0x20002784
 8002ee4:	20002780 	.word	0x20002780
 8002ee8:	2000278c 	.word	0x2000278c
 8002eec:	20000690 	.word	0x20000690
 8002ef0:	0800e3d4 	.word	0x0800e3d4
 8002ef4:	200005a0 	.word	0x200005a0
 8002ef8:	0800e400 	.word	0x0800e400
 8002efc:	20002790 	.word	0x20002790
 8002f00:	0800e420 	.word	0x0800e420
 8002f04:	0800e444 	.word	0x0800e444
 8002f08:	20002804 	.word	0x20002804
 8002f0c:	20002808 	.word	0x20002808
 8002f10:	0800e460 	.word	0x0800e460
 8002f14:	0800e480 	.word	0x0800e480
 8002f18:	200027f8 	.word	0x200027f8

08002f1c <XBee_Resolve_File>:

int XBee_Resolve_File() {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
	int ret = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
	ret = f_open(&fil, rpath, FA_OPEN_ALWAYS | FA_WRITE);
 8002f26:	2212      	movs	r2, #18
 8002f28:	4922      	ldr	r1, [pc, #136]	; (8002fb4 <XBee_Resolve_File+0x98>)
 8002f2a:	4823      	ldr	r0, [pc, #140]	; (8002fb8 <XBee_Resolve_File+0x9c>)
 8002f2c:	f007 fbc4 	bl	800a6b8 <f_open>
 8002f30:	4603      	mov	r3, r0
 8002f32:	607b      	str	r3, [r7, #4]
	if(ret != FR_OK) {
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d006      	beq.n	8002f48 <XBee_Resolve_File+0x2c>
		printf("Failed to open file (%i) \r\n", ret);
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	481f      	ldr	r0, [pc, #124]	; (8002fbc <XBee_Resolve_File+0xa0>)
 8002f3e:	f008 ff3b 	bl	800bdb8 <iprintf>
		return -1;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	e031      	b.n	8002fac <XBee_Resolve_File+0x90>
	}
	UINT bytes_written;
	ret = f_write(&fil, file_buf, rsize, &bytes_written);
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <XBee_Resolve_File+0xa4>)
 8002f4a:	6819      	ldr	r1, [r3, #0]
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <XBee_Resolve_File+0xa8>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	463b      	mov	r3, r7
 8002f52:	4819      	ldr	r0, [pc, #100]	; (8002fb8 <XBee_Resolve_File+0x9c>)
 8002f54:	f007 fd7c 	bl	800aa50 <f_write>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	607b      	str	r3, [r7, #4]
	if(ret != FR_OK) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <XBee_Resolve_File+0x54>
		printf("Failed to write file (%i) \r\n", ret);
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4818      	ldr	r0, [pc, #96]	; (8002fc8 <XBee_Resolve_File+0xac>)
 8002f66:	f008 ff27 	bl	800bdb8 <iprintf>
		return -1;
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	e01d      	b.n	8002fac <XBee_Resolve_File+0x90>
	}
	ret = f_close(&fil);
 8002f70:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <XBee_Resolve_File+0x9c>)
 8002f72:	f007 ff7f 	bl	800ae74 <f_close>
 8002f76:	4603      	mov	r3, r0
 8002f78:	607b      	str	r3, [r7, #4]
	if(ret != FR_OK) {
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <XBee_Resolve_File+0x72>
		printf("Failed to close file (%i) \r\n", ret);
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4812      	ldr	r0, [pc, #72]	; (8002fcc <XBee_Resolve_File+0xb0>)
 8002f84:	f008 ff18 	bl	800bdb8 <iprintf>
		return -1;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8c:	e00e      	b.n	8002fac <XBee_Resolve_File+0x90>
	}
	printf("Received file\n");
 8002f8e:	4810      	ldr	r0, [pc, #64]	; (8002fd0 <XBee_Resolve_File+0xb4>)
 8002f90:	f008 ff98 	bl	800bec4 <puts>
	free(file_buf);
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <XBee_Resolve_File+0xa4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f008 f9b3 	bl	800b304 <free>
	receiving_file = 0;
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <XBee_Resolve_File+0xb8>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
	XBee_Receive(&XBee_Received);
 8002fa4:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <XBee_Resolve_File+0xbc>)
 8002fa6:	f7ff fecf 	bl	8002d48 <XBee_Receive>
	return ret;
 8002faa:	687b      	ldr	r3, [r7, #4]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20002808 	.word	0x20002808
 8002fb8:	2000173c 	.word	0x2000173c
 8002fbc:	0800e324 	.word	0x0800e324
 8002fc0:	200027fc 	.word	0x200027fc
 8002fc4:	20002804 	.word	0x20002804
 8002fc8:	0800e4a8 	.word	0x0800e4a8
 8002fcc:	0800e35c 	.word	0x0800e35c
 8002fd0:	0800e4c8 	.word	0x0800e4c8
 8002fd4:	200027f8 	.word	0x200027f8
 8002fd8:	20002784 	.word	0x20002784

08002fdc <XBee_Broadcast_Identity>:

void XBee_Broadcast_Identity(TCHAR *file_path) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	printf("Broadcasting identity\n");
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <XBee_Broadcast_Identity+0x38>)
 8002fe6:	f008 ff6d 	bl	800bec4 <puts>
	XBee_Send.command = BroadcastIdentity;
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <XBee_Broadcast_Identity+0x3c>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
	XBee_Send.target = 0;
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <XBee_Broadcast_Identity+0x3c>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	605a      	str	r2, [r3, #4]
	*((uint32_t *) XBee_Send.data) = UID;
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <XBee_Broadcast_Identity+0x40>)
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <XBee_Broadcast_Identity+0x44>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6013      	str	r3, [r2, #0]
	strcpy((char *) &XBee_Send.data[sizeof(uint32_t)], file_path);
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4808      	ldr	r0, [pc, #32]	; (8003024 <XBee_Broadcast_Identity+0x48>)
 8003002:	f008 ff97 	bl	800bf34 <strcpy>
	XBee_Transmit(&XBee_Send);
 8003006:	4804      	ldr	r0, [pc, #16]	; (8003018 <XBee_Broadcast_Identity+0x3c>)
 8003008:	f7ff fe5a 	bl	8002cc0 <XBee_Transmit>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	0800e4d8 	.word	0x0800e4d8
 8003018:	20000694 	.word	0x20000694
 800301c:	2000069c 	.word	0x2000069c
 8003020:	20002780 	.word	0x20002780
 8003024:	200006a0 	.word	0x200006a0

08003028 <XBee_Init>:

void XBee_Init() {
 8003028:	b598      	push	{r3, r4, r7, lr}
 800302a:	af00      	add	r7, sp, #0
	UID = HAL_GetUIDw0() + HAL_GetUIDw1() + HAL_GetUIDw2();
 800302c:	f000 f950 	bl	80032d0 <HAL_GetUIDw0>
 8003030:	4604      	mov	r4, r0
 8003032:	f000 f959 	bl	80032e8 <HAL_GetUIDw1>
 8003036:	4603      	mov	r3, r0
 8003038:	441c      	add	r4, r3
 800303a:	f000 f961 	bl	8003300 <HAL_GetUIDw2>
 800303e:	4603      	mov	r3, r0
 8003040:	4423      	add	r3, r4
 8003042:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <XBee_Init+0x48>)
 8003044:	6013      	str	r3, [r2, #0]
	printf("UID: %u\n", (unsigned int) UID);
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <XBee_Init+0x48>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4619      	mov	r1, r3
 800304c:	4809      	ldr	r0, [pc, #36]	; (8003074 <XBee_Init+0x4c>)
 800304e:	f008 feb3 	bl	800bdb8 <iprintf>
	__HAL_TIM_SET_AUTORELOAD(FILE_TIMER, 5000);
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <XBee_Init+0x50>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <XBee_Init+0x50>)
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	60da      	str	r2, [r3, #12]
	XBee_Receive(&XBee_Received);
 8003064:	4805      	ldr	r0, [pc, #20]	; (800307c <XBee_Init+0x54>)
 8003066:	f7ff fe6f 	bl	8002d48 <XBee_Receive>
}
 800306a:	bf00      	nop
 800306c:	bd98      	pop	{r3, r4, r7, pc}
 800306e:	bf00      	nop
 8003070:	20002780 	.word	0x20002780
 8003074:	0800e4f0 	.word	0x0800e4f0
 8003078:	20000410 	.word	0x20000410
 800307c:	20002784 	.word	0x20002784

08003080 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	if (huart == XBEE_UART) {
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a05      	ldr	r2, [pc, #20]	; (80030a0 <HAL_UART_ErrorCallback+0x20>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d102      	bne.n	8003096 <HAL_UART_ErrorCallback+0x16>
		printf("XBee Error\n");
 8003090:	4804      	ldr	r0, [pc, #16]	; (80030a4 <HAL_UART_ErrorCallback+0x24>)
 8003092:	f008 ff17 	bl	800bec4 <puts>
	}
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000458 	.word	0x20000458
 80030a4:	0800e4fc 	.word	0x0800e4fc

080030a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	if (huart == XBEE_UART) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a15      	ldr	r2, [pc, #84]	; (8003108 <HAL_UART_TxCpltCallback+0x60>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d122      	bne.n	80030fe <HAL_UART_TxCpltCallback+0x56>
		if (transmitting_file == 1) {
 80030b8:	4b14      	ldr	r3, [pc, #80]	; (800310c <HAL_UART_TxCpltCallback+0x64>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10f      	bne.n	80030e0 <HAL_UART_TxCpltCallback+0x38>
			while (HAL_TIM_Base_GetState(FILE_TIMER) != HAL_TIM_STATE_READY);
 80030c0:	bf00      	nop
 80030c2:	4813      	ldr	r0, [pc, #76]	; (8003110 <HAL_UART_TxCpltCallback+0x68>)
 80030c4:	f003 fcef 	bl	8006aa6 <HAL_TIM_Base_GetState>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d1f9      	bne.n	80030c2 <HAL_UART_TxCpltCallback+0x1a>
			FIX_TIMER_TRIGGER(FILE_TIMER);
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_UART_TxCpltCallback+0x68>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f06f 0201 	mvn.w	r2, #1
 80030d6:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(FILE_TIMER);
 80030d8:	480d      	ldr	r0, [pc, #52]	; (8003110 <HAL_UART_TxCpltCallback+0x68>)
 80030da:	f003 fb23 	bl	8006724 <HAL_TIM_Base_Start_IT>
			printf("Transmitted file\n");
			free(file_buf);
			transmitting_file = 0;
		}
	}
}
 80030de:	e00e      	b.n	80030fe <HAL_UART_TxCpltCallback+0x56>
		} else if (transmitting_file == 2) {
 80030e0:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_UART_TxCpltCallback+0x64>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d10a      	bne.n	80030fe <HAL_UART_TxCpltCallback+0x56>
			printf("Transmitted file\n");
 80030e8:	480a      	ldr	r0, [pc, #40]	; (8003114 <HAL_UART_TxCpltCallback+0x6c>)
 80030ea:	f008 feeb 	bl	800bec4 <puts>
			free(file_buf);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_UART_TxCpltCallback+0x70>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f008 f906 	bl	800b304 <free>
			transmitting_file = 0;
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <HAL_UART_TxCpltCallback+0x64>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000458 	.word	0x20000458
 800310c:	200027f4 	.word	0x200027f4
 8003110:	20000410 	.word	0x20000410
 8003114:	0800e508 	.word	0x0800e508
 8003118:	200027fc 	.word	0x200027fc

0800311c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	if (huart == XBEE_UART) {
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a08      	ldr	r2, [pc, #32]	; (8003148 <HAL_UART_RxCpltCallback+0x2c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d108      	bne.n	800313e <HAL_UART_RxCpltCallback+0x22>
//		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
//				XBee_Received.command, (unsigned int) XBee_Received.target,
//				XBee_Received.data[0], XBee_Received.data[1],
//				XBee_Received.data[2]);
		if (!receiving_file) {
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <HAL_UART_RxCpltCallback+0x30>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_UART_RxCpltCallback+0x1e>
			XBee_Resolve();
 8003134:	f7ff fe48 	bl	8002dc8 <XBee_Resolve>
		} else {
			XBee_Resolve_File();
		}
	}
}
 8003138:	e001      	b.n	800313e <HAL_UART_RxCpltCallback+0x22>
			XBee_Resolve_File();
 800313a:	f7ff feef 	bl	8002f1c <XBee_Resolve_File>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000458 	.word	0x20000458
 800314c:	200027f8 	.word	0x200027f8

08003150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003154:	480d      	ldr	r0, [pc, #52]	; (800318c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003156:	490e      	ldr	r1, [pc, #56]	; (8003190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800315c:	e002      	b.n	8003164 <LoopCopyDataInit>

0800315e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003162:	3304      	adds	r3, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003168:	d3f9      	bcc.n	800315e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800316c:	4c0b      	ldr	r4, [pc, #44]	; (800319c <LoopFillZerobss+0x26>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003170:	e001      	b.n	8003176 <LoopFillZerobss>

08003172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003174:	3204      	adds	r2, #4

08003176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003178:	d3fb      	bcc.n	8003172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800317a:	f7ff fd8f 	bl	8002c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317e:	f008 f895 	bl	800b2ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003182:	f7fe fdf3 	bl	8001d6c <main>
  bx  lr    
 8003186:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003188:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003190:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003194:	0800edac 	.word	0x0800edac
  ldr r2, =_sbss
 8003198:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800319c:	20002a6c 	.word	0x20002a6c

080031a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC_IRQHandler>
	...

080031a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_Init+0x40>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_Init+0x40>)
 80031ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_Init+0x40>)
 80031ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_Init+0x40>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031cc:	2003      	movs	r0, #3
 80031ce:	f000 fbd5 	bl	800397c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f000 f808 	bl	80031e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d8:	f7ff f908 	bl	80023ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00

080031e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_InitTick+0x54>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_InitTick+0x58>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fbed 	bl	80039e6 <HAL_SYSTICK_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e00e      	b.n	8003234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	d80a      	bhi.n	8003232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800321c:	2200      	movs	r2, #0
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	f000 fbb5 	bl	8003992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <HAL_InitTick+0x5c>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000008 	.word	0x20000008
 8003240:	20000010 	.word	0x20000010
 8003244:	2000000c 	.word	0x2000000c

08003248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_IncTick+0x20>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_IncTick+0x24>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4413      	add	r3, r2
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_IncTick+0x24>)
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000010 	.word	0x20000010
 800326c:	2000281c 	.word	0x2000281c

08003270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_GetTick+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	2000281c 	.word	0x2000281c

08003288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff ffee 	bl	8003270 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d005      	beq.n	80032ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_Delay+0x44>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ae:	bf00      	nop
 80032b0:	f7ff ffde 	bl	8003270 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d8f7      	bhi.n	80032b0 <HAL_Delay+0x28>
  {
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000010 	.word	0x20000010

080032d0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <HAL_GetUIDw0+0x14>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	1fff7a10 	.word	0x1fff7a10

080032e8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <HAL_GetUIDw1+0x14>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	1fff7a14 	.word	0x1fff7a14

08003300 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_GetUIDw2+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	1fff7a18 	.word	0x1fff7a18

08003318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e033      	b.n	8003396 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff f880 	bl	800243c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800335e:	f023 0302 	bic.w	r3, r3, #2
 8003362:	f043 0202 	orr.w	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f93a 	bl	80035e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
 8003386:	e001      	b.n	800338c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x1c>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e105      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x228>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b09      	cmp	r3, #9
 80033ca:	d925      	bls.n	8003418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68d9      	ldr	r1, [r3, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	2207      	movs	r2, #7
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43da      	mvns	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	400a      	ands	r2, r1
 80033f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	4618      	mov	r0, r3
 8003404:	4603      	mov	r3, r0
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4403      	add	r3, r0
 800340a:	3b1e      	subs	r3, #30
 800340c:	409a      	lsls	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	e022      	b.n	800345e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	2207      	movs	r2, #7
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	400a      	ands	r2, r1
 800343a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6919      	ldr	r1, [r3, #16]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	4618      	mov	r0, r3
 800344e:	4603      	mov	r3, r0
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4403      	add	r3, r0
 8003454:	409a      	lsls	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b06      	cmp	r3, #6
 8003464:	d824      	bhi.n	80034b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3b05      	subs	r3, #5
 8003478:	221f      	movs	r2, #31
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	400a      	ands	r2, r1
 8003486:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	4618      	mov	r0, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	3b05      	subs	r3, #5
 80034a2:	fa00 f203 	lsl.w	r2, r0, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34
 80034ae:	e04c      	b.n	800354a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d824      	bhi.n	8003502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b23      	subs	r3, #35	; 0x23
 80034ca:	221f      	movs	r2, #31
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43da      	mvns	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	400a      	ands	r2, r1
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3b23      	subs	r3, #35	; 0x23
 80034f4:	fa00 f203 	lsl.w	r2, r0, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003500:	e023      	b.n	800354a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	3b41      	subs	r3, #65	; 0x41
 8003514:	221f      	movs	r2, #31
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	3b41      	subs	r3, #65	; 0x41
 800353e:	fa00 f203 	lsl.w	r2, r0, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_ADC_ConfigChannel+0x234>)
 800354c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <HAL_ADC_ConfigChannel+0x238>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d109      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1cc>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b12      	cmp	r3, #18
 800355e:	d105      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_ADC_ConfigChannel+0x238>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d123      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d003      	beq.n	8003586 <HAL_ADC_ConfigChannel+0x1e6>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b11      	cmp	r3, #17
 8003584:	d11b      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d111      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_ADC_ConfigChannel+0x23c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <HAL_ADC_ConfigChannel+0x240>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	0c9a      	lsrs	r2, r3, #18
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035b0:	e002      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40012300 	.word	0x40012300
 80035d8:	40012000 	.word	0x40012000
 80035dc:	20000008 	.word	0x20000008
 80035e0:	431bde83 	.word	0x431bde83

080035e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ec:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <ADC_Init+0x1f0>)
 80035ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	431a      	orrs	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800363c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800365e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <ADC_Init+0x1f4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800368a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6899      	ldr	r1, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	e00f      	b.n	80036e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0202 	bic.w	r2, r2, #2
 80036f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7e1b      	ldrb	r3, [r3, #24]
 80036fc:	005a      	lsls	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800371e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800372e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	3b01      	subs	r3, #1
 800373c:	035a      	lsls	r2, r3, #13
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	e007      	b.n	8003758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	3b01      	subs	r3, #1
 8003774:	051a      	lsls	r2, r3, #20
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800378c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800379a:	025a      	lsls	r2, r3, #9
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	029a      	lsls	r2, r3, #10
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40012300 	.word	0x40012300
 80037d8:	0f000001 	.word	0x0f000001

080037dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <__NVIC_SetPriorityGrouping+0x44>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f8:	4013      	ands	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380e:	4a04      	ldr	r2, [pc, #16]	; (8003820 <__NVIC_SetPriorityGrouping+0x44>)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	60d3      	str	r3, [r2, #12]
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <__NVIC_GetPriorityGrouping+0x18>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	f003 0307 	and.w	r3, r3, #7
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	2b00      	cmp	r3, #0
 8003850:	db0b      	blt.n	800386a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	f003 021f 	and.w	r2, r3, #31
 8003858:	4907      	ldr	r1, [pc, #28]	; (8003878 <__NVIC_EnableIRQ+0x38>)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	2001      	movs	r0, #1
 8003862:	fa00 f202 	lsl.w	r2, r0, r2
 8003866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	e000e100 	.word	0xe000e100

0800387c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388c:	2b00      	cmp	r3, #0
 800388e:	db0a      	blt.n	80038a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	490c      	ldr	r1, [pc, #48]	; (80038c8 <__NVIC_SetPriority+0x4c>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	0112      	lsls	r2, r2, #4
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	440b      	add	r3, r1
 80038a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a4:	e00a      	b.n	80038bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	4908      	ldr	r1, [pc, #32]	; (80038cc <__NVIC_SetPriority+0x50>)
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	3b04      	subs	r3, #4
 80038b4:	0112      	lsls	r2, r2, #4
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	440b      	add	r3, r1
 80038ba:	761a      	strb	r2, [r3, #24]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000e100 	.word	0xe000e100
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f1c3 0307 	rsb	r3, r3, #7
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	bf28      	it	cs
 80038ee:	2304      	movcs	r3, #4
 80038f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3304      	adds	r3, #4
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d902      	bls.n	8003900 <NVIC_EncodePriority+0x30>
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3b03      	subs	r3, #3
 80038fe:	e000      	b.n	8003902 <NVIC_EncodePriority+0x32>
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	f04f 32ff 	mov.w	r2, #4294967295
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43da      	mvns	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	401a      	ands	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003918:	f04f 31ff 	mov.w	r1, #4294967295
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	fa01 f303 	lsl.w	r3, r1, r3
 8003922:	43d9      	mvns	r1, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003928:	4313      	orrs	r3, r2
         );
}
 800392a:	4618      	mov	r0, r3
 800392c:	3724      	adds	r7, #36	; 0x24
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003948:	d301      	bcc.n	800394e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800394a:	2301      	movs	r3, #1
 800394c:	e00f      	b.n	800396e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800394e:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <SysTick_Config+0x40>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3b01      	subs	r3, #1
 8003954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003956:	210f      	movs	r1, #15
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	f7ff ff8e 	bl	800387c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <SysTick_Config+0x40>)
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003966:	4b04      	ldr	r3, [pc, #16]	; (8003978 <SysTick_Config+0x40>)
 8003968:	2207      	movs	r2, #7
 800396a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	e000e010 	.word	0xe000e010

0800397c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ff29 	bl	80037dc <__NVIC_SetPriorityGrouping>
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a4:	f7ff ff3e 	bl	8003824 <__NVIC_GetPriorityGrouping>
 80039a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7ff ff8e 	bl	80038d0 <NVIC_EncodePriority>
 80039b4:	4602      	mov	r2, r0
 80039b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff5d 	bl	800387c <__NVIC_SetPriority>
}
 80039c2:	bf00      	nop
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	4603      	mov	r3, r0
 80039d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff31 	bl	8003840 <__NVIC_EnableIRQ>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ffa2 	bl	8003938 <SysTick_Config>
 80039f4:	4603      	mov	r3, r0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7ff fc30 	bl	8003270 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e099      	b.n	8003b50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0201 	bic.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a3c:	e00f      	b.n	8003a5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a3e:	f7ff fc17 	bl	8003270 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b05      	cmp	r3, #5
 8003a4a:	d908      	bls.n	8003a5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2203      	movs	r2, #3
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e078      	b.n	8003b50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e8      	bne.n	8003a3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4b38      	ldr	r3, [pc, #224]	; (8003b58 <HAL_DMA_Init+0x158>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d107      	bne.n	8003ac8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0307 	bic.w	r3, r3, #7
 8003ade:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d117      	bne.n	8003b22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fb01 	bl	800410c <DMA_CheckFifoParam>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2240      	movs	r2, #64	; 0x40
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e016      	b.n	8003b50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fab8 	bl	80040a0 <DMA_CalcBaseAndBitshift>
 8003b30:	4603      	mov	r3, r0
 8003b32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	223f      	movs	r2, #63	; 0x3f
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	f010803f 	.word	0xf010803f

08003b5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_DMA_Start_IT+0x26>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e040      	b.n	8003c04 <HAL_DMA_Start_IT+0xa8>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d12f      	bne.n	8003bf6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fa4a 	bl	8004044 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb4:	223f      	movs	r2, #63	; 0x3f
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0216 	orr.w	r2, r2, #22
 8003bca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0208 	orr.w	r2, r2, #8
 8003be2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e005      	b.n	8003c02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c1a:	f7ff fb29 	bl	8003270 <HAL_GetTick>
 8003c1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d008      	beq.n	8003c3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e052      	b.n	8003ce4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0216 	bic.w	r2, r2, #22
 8003c4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <HAL_DMA_Abort+0x62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0208 	bic.w	r2, r2, #8
 8003c7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c8e:	e013      	b.n	8003cb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c90:	f7ff faee 	bl	8003270 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b05      	cmp	r3, #5
 8003c9c:	d90c      	bls.n	8003cb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e015      	b.n	8003ce4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e4      	bne.n	8003c90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	223f      	movs	r2, #63	; 0x3f
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d004      	beq.n	8003d0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2280      	movs	r2, #128	; 0x80
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e00c      	b.n	8003d24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2205      	movs	r2, #5
 8003d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0201 	bic.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d3c:	4b8e      	ldr	r3, [pc, #568]	; (8003f78 <HAL_DMA_IRQHandler+0x248>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a8e      	ldr	r2, [pc, #568]	; (8003f7c <HAL_DMA_IRQHandler+0x24c>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0a9b      	lsrs	r3, r3, #10
 8003d48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01a      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0204 	bic.w	r2, r2, #4
 8003d82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d88:	2208      	movs	r2, #8
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	f043 0201 	orr.w	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	2201      	movs	r2, #1
 8003da2:	409a      	lsls	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d012      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	f043 0202 	orr.w	r2, r3, #2
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d012      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00b      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	2204      	movs	r2, #4
 8003df6:	409a      	lsls	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	f043 0204 	orr.w	r2, r3, #4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d043      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03c      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d018      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d108      	bne.n	8003e60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d024      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	4798      	blx	r3
 8003e5e:	e01f      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01b      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
 8003e70:	e016      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d107      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0208 	bic.w	r2, r2, #8
 8003e8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 808f 	beq.w	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8087 	beq.w	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d136      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0216 	bic.w	r2, r2, #22
 8003ee8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d103      	bne.n	8003f0a <HAL_DMA_IRQHandler+0x1da>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0208 	bic.w	r2, r2, #8
 8003f18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	223f      	movs	r2, #63	; 0x3f
 8003f20:	409a      	lsls	r2, r3
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d07e      	beq.n	800403c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
        }
        return;
 8003f46:	e079      	b.n	800403c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01d      	beq.n	8003f92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10d      	bne.n	8003f80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d031      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
 8003f74:	e02c      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
 8003f76:	bf00      	nop
 8003f78:	20000008 	.word	0x20000008
 8003f7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d023      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
 8003f90:	e01e      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10f      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0210 	bic.w	r2, r2, #16
 8003fae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d032      	beq.n	800403e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d022      	beq.n	800402a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2205      	movs	r2, #5
 8003fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	d307      	bcc.n	8004018 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f2      	bne.n	8003ffc <HAL_DMA_IRQHandler+0x2cc>
 8004016:	e000      	b.n	800401a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004018:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
 800403a:	e000      	b.n	800403e <HAL_DMA_IRQHandler+0x30e>
        return;
 800403c:	bf00      	nop
    }
  }
}
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004060:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b40      	cmp	r3, #64	; 0x40
 8004070:	d108      	bne.n	8004084 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004082:	e007      	b.n	8004094 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	3b10      	subs	r3, #16
 80040b0:	4a14      	ldr	r2, [pc, #80]	; (8004104 <DMA_CalcBaseAndBitshift+0x64>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040ba:	4a13      	ldr	r2, [pc, #76]	; (8004108 <DMA_CalcBaseAndBitshift+0x68>)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d909      	bls.n	80040e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	1d1a      	adds	r2, r3, #4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	659a      	str	r2, [r3, #88]	; 0x58
 80040e0:	e007      	b.n	80040f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	aaaaaaab 	.word	0xaaaaaaab
 8004108:	0800e57c 	.word	0x0800e57c

0800410c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11f      	bne.n	8004166 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d856      	bhi.n	80041da <DMA_CheckFifoParam+0xce>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <DMA_CheckFifoParam+0x28>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004145 	.word	0x08004145
 8004138:	08004157 	.word	0x08004157
 800413c:	08004145 	.word	0x08004145
 8004140:	080041db 	.word	0x080041db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d046      	beq.n	80041de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004154:	e043      	b.n	80041de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800415e:	d140      	bne.n	80041e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004164:	e03d      	b.n	80041e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416e:	d121      	bne.n	80041b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d837      	bhi.n	80041e6 <DMA_CheckFifoParam+0xda>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <DMA_CheckFifoParam+0x70>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	0800418d 	.word	0x0800418d
 8004180:	08004193 	.word	0x08004193
 8004184:	0800418d 	.word	0x0800418d
 8004188:	080041a5 	.word	0x080041a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      break;
 8004190:	e030      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d025      	beq.n	80041ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a2:	e022      	b.n	80041ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ac:	d11f      	bne.n	80041ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041b2:	e01c      	b.n	80041ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d903      	bls.n	80041c2 <DMA_CheckFifoParam+0xb6>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d003      	beq.n	80041c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041c0:	e018      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
      break;
 80041c6:	e015      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00e      	beq.n	80041f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
      break;
 80041d8:	e00b      	b.n	80041f2 <DMA_CheckFifoParam+0xe6>
      break;
 80041da:	bf00      	nop
 80041dc:	e00a      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041de:	bf00      	nop
 80041e0:	e008      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041e2:	bf00      	nop
 80041e4:	e006      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041e6:	bf00      	nop
 80041e8:	e004      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041f2:	bf00      	nop
    }
  } 
  
  return status; 
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	e159      	b.n	80044d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004220:	2201      	movs	r2, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4013      	ands	r3, r2
 8004232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	429a      	cmp	r2, r3
 800423a:	f040 8148 	bne.w	80044ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d005      	beq.n	8004256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004252:	2b02      	cmp	r3, #2
 8004254:	d130      	bne.n	80042b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	2203      	movs	r2, #3
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800428c:	2201      	movs	r2, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f003 0201 	and.w	r2, r3, #1
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d017      	beq.n	80042f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	2203      	movs	r2, #3
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d123      	bne.n	8004348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	08da      	lsrs	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3208      	adds	r2, #8
 8004308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	220f      	movs	r2, #15
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	08da      	lsrs	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3208      	adds	r2, #8
 8004342:	69b9      	ldr	r1, [r7, #24]
 8004344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	2203      	movs	r2, #3
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0203 	and.w	r2, r3, #3
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a2 	beq.w	80044ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	4b57      	ldr	r3, [pc, #348]	; (80044ec <HAL_GPIO_Init+0x2e8>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	4a56      	ldr	r2, [pc, #344]	; (80044ec <HAL_GPIO_Init+0x2e8>)
 8004394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004398:	6453      	str	r3, [r2, #68]	; 0x44
 800439a:	4b54      	ldr	r3, [pc, #336]	; (80044ec <HAL_GPIO_Init+0x2e8>)
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043a6:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_GPIO_Init+0x2ec>)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	3302      	adds	r3, #2
 80043ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	220f      	movs	r2, #15
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a49      	ldr	r2, [pc, #292]	; (80044f4 <HAL_GPIO_Init+0x2f0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d019      	beq.n	8004406 <HAL_GPIO_Init+0x202>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a48      	ldr	r2, [pc, #288]	; (80044f8 <HAL_GPIO_Init+0x2f4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_GPIO_Init+0x1fe>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a47      	ldr	r2, [pc, #284]	; (80044fc <HAL_GPIO_Init+0x2f8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00d      	beq.n	80043fe <HAL_GPIO_Init+0x1fa>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a46      	ldr	r2, [pc, #280]	; (8004500 <HAL_GPIO_Init+0x2fc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d007      	beq.n	80043fa <HAL_GPIO_Init+0x1f6>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a45      	ldr	r2, [pc, #276]	; (8004504 <HAL_GPIO_Init+0x300>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_GPIO_Init+0x1f2>
 80043f2:	2304      	movs	r3, #4
 80043f4:	e008      	b.n	8004408 <HAL_GPIO_Init+0x204>
 80043f6:	2307      	movs	r3, #7
 80043f8:	e006      	b.n	8004408 <HAL_GPIO_Init+0x204>
 80043fa:	2303      	movs	r3, #3
 80043fc:	e004      	b.n	8004408 <HAL_GPIO_Init+0x204>
 80043fe:	2302      	movs	r3, #2
 8004400:	e002      	b.n	8004408 <HAL_GPIO_Init+0x204>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_GPIO_Init+0x204>
 8004406:	2300      	movs	r3, #0
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	f002 0203 	and.w	r2, r2, #3
 800440e:	0092      	lsls	r2, r2, #2
 8004410:	4093      	lsls	r3, r2
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004418:	4935      	ldr	r1, [pc, #212]	; (80044f0 <HAL_GPIO_Init+0x2ec>)
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	3302      	adds	r3, #2
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004426:	4b38      	ldr	r3, [pc, #224]	; (8004508 <HAL_GPIO_Init+0x304>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800444a:	4a2f      	ldr	r2, [pc, #188]	; (8004508 <HAL_GPIO_Init+0x304>)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004450:	4b2d      	ldr	r3, [pc, #180]	; (8004508 <HAL_GPIO_Init+0x304>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004474:	4a24      	ldr	r2, [pc, #144]	; (8004508 <HAL_GPIO_Init+0x304>)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800447a:	4b23      	ldr	r3, [pc, #140]	; (8004508 <HAL_GPIO_Init+0x304>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800449e:	4a1a      	ldr	r2, [pc, #104]	; (8004508 <HAL_GPIO_Init+0x304>)
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044a4:	4b18      	ldr	r3, [pc, #96]	; (8004508 <HAL_GPIO_Init+0x304>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044c8:	4a0f      	ldr	r2, [pc, #60]	; (8004508 <HAL_GPIO_Init+0x304>)
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3301      	adds	r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	f67f aea2 	bls.w	8004220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	3724      	adds	r7, #36	; 0x24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40013800 	.word	0x40013800
 80044f4:	40020000 	.word	0x40020000
 80044f8:	40020400 	.word	0x40020400
 80044fc:	40020800 	.word	0x40020800
 8004500:	40020c00 	.word	0x40020c00
 8004504:	40021000 	.word	0x40021000
 8004508:	40013c00 	.word	0x40013c00

0800450c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
 8004518:	4613      	mov	r3, r2
 800451a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800451c:	787b      	ldrb	r3, [r7, #1]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004522:	887a      	ldrh	r2, [r7, #2]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004528:	e003      	b.n	8004532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	041a      	lsls	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	619a      	str	r2, [r3, #24]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d006      	beq.n	8004564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004556:	4a05      	ldr	r2, [pc, #20]	; (800456c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fc fcf0 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40013c00 	.word	0x40013c00

08004570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e12b      	b.n	80047da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd ffb0 	bl	80024fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	; 0x24
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045d4:	f001 fbfc 	bl	8005dd0 <HAL_RCC_GetPCLK1Freq>
 80045d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4a81      	ldr	r2, [pc, #516]	; (80047e4 <HAL_I2C_Init+0x274>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d807      	bhi.n	80045f4 <HAL_I2C_Init+0x84>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a80      	ldr	r2, [pc, #512]	; (80047e8 <HAL_I2C_Init+0x278>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	bf94      	ite	ls
 80045ec:	2301      	movls	r3, #1
 80045ee:	2300      	movhi	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e006      	b.n	8004602 <HAL_I2C_Init+0x92>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a7d      	ldr	r2, [pc, #500]	; (80047ec <HAL_I2C_Init+0x27c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	bf94      	ite	ls
 80045fc:	2301      	movls	r3, #1
 80045fe:	2300      	movhi	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e0e7      	b.n	80047da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a78      	ldr	r2, [pc, #480]	; (80047f0 <HAL_I2C_Init+0x280>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	0c9b      	lsrs	r3, r3, #18
 8004614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4a6a      	ldr	r2, [pc, #424]	; (80047e4 <HAL_I2C_Init+0x274>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d802      	bhi.n	8004644 <HAL_I2C_Init+0xd4>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	3301      	adds	r3, #1
 8004642:	e009      	b.n	8004658 <HAL_I2C_Init+0xe8>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	4a69      	ldr	r2, [pc, #420]	; (80047f4 <HAL_I2C_Init+0x284>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	3301      	adds	r3, #1
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	430b      	orrs	r3, r1
 800465e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800466a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	495c      	ldr	r1, [pc, #368]	; (80047e4 <HAL_I2C_Init+0x274>)
 8004674:	428b      	cmp	r3, r1
 8004676:	d819      	bhi.n	80046ac <HAL_I2C_Init+0x13c>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e59      	subs	r1, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	fbb1 f3f3 	udiv	r3, r1, r3
 8004686:	1c59      	adds	r1, r3, #1
 8004688:	f640 73fc 	movw	r3, #4092	; 0xffc
 800468c:	400b      	ands	r3, r1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_I2C_Init+0x138>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1e59      	subs	r1, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a0:	3301      	adds	r3, #1
 80046a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a6:	e051      	b.n	800474c <HAL_I2C_Init+0x1dc>
 80046a8:	2304      	movs	r3, #4
 80046aa:	e04f      	b.n	800474c <HAL_I2C_Init+0x1dc>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d111      	bne.n	80046d8 <HAL_I2C_Init+0x168>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1e58      	subs	r0, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6859      	ldr	r1, [r3, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	440b      	add	r3, r1
 80046c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c6:	3301      	adds	r3, #1
 80046c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e012      	b.n	80046fe <HAL_I2C_Init+0x18e>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1e58      	subs	r0, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	0099      	lsls	r1, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ee:	3301      	adds	r3, #1
 80046f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_I2C_Init+0x196>
 8004702:	2301      	movs	r3, #1
 8004704:	e022      	b.n	800474c <HAL_I2C_Init+0x1dc>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10e      	bne.n	800472c <HAL_I2C_Init+0x1bc>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1e58      	subs	r0, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6859      	ldr	r1, [r3, #4]
 8004716:	460b      	mov	r3, r1
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	440b      	add	r3, r1
 800471c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004720:	3301      	adds	r3, #1
 8004722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472a:	e00f      	b.n	800474c <HAL_I2C_Init+0x1dc>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1e58      	subs	r0, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6859      	ldr	r1, [r3, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	0099      	lsls	r1, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004742:	3301      	adds	r3, #1
 8004744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	6809      	ldr	r1, [r1, #0]
 8004750:	4313      	orrs	r3, r2
 8004752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69da      	ldr	r2, [r3, #28]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800477a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6911      	ldr	r1, [r2, #16]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68d2      	ldr	r2, [r2, #12]
 8004786:	4311      	orrs	r1, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	430b      	orrs	r3, r1
 800478e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	000186a0 	.word	0x000186a0
 80047e8:	001e847f 	.word	0x001e847f
 80047ec:	003d08ff 	.word	0x003d08ff
 80047f0:	431bde83 	.word	0x431bde83
 80047f4:	10624dd3 	.word	0x10624dd3

080047f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	4608      	mov	r0, r1
 8004802:	4611      	mov	r1, r2
 8004804:	461a      	mov	r2, r3
 8004806:	4603      	mov	r3, r0
 8004808:	817b      	strh	r3, [r7, #10]
 800480a:	460b      	mov	r3, r1
 800480c:	813b      	strh	r3, [r7, #8]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004812:	f7fe fd2d 	bl	8003270 <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b20      	cmp	r3, #32
 8004822:	f040 80d9 	bne.w	80049d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	2319      	movs	r3, #25
 800482c:	2201      	movs	r2, #1
 800482e:	496d      	ldr	r1, [pc, #436]	; (80049e4 <HAL_I2C_Mem_Write+0x1ec>)
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fc7f 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
 800483e:	e0cc      	b.n	80049da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_I2C_Mem_Write+0x56>
 800484a:	2302      	movs	r3, #2
 800484c:	e0c5      	b.n	80049da <HAL_I2C_Mem_Write+0x1e2>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b01      	cmp	r3, #1
 8004862:	d007      	beq.n	8004874 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004882:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2221      	movs	r2, #33	; 0x21
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2240      	movs	r2, #64	; 0x40
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a3a      	ldr	r2, [r7, #32]
 800489e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a4d      	ldr	r2, [pc, #308]	; (80049e8 <HAL_I2C_Mem_Write+0x1f0>)
 80048b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048b6:	88f8      	ldrh	r0, [r7, #6]
 80048b8:	893a      	ldrh	r2, [r7, #8]
 80048ba:	8979      	ldrh	r1, [r7, #10]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4603      	mov	r3, r0
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 fab6 	bl	8004e38 <I2C_RequestMemoryWrite>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d052      	beq.n	8004978 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e081      	b.n	80049da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fd00 	bl	80052e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d107      	bne.n	80048fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e06b      	b.n	80049da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b04      	cmp	r3, #4
 800493e:	d11b      	bne.n	8004978 <HAL_I2C_Mem_Write+0x180>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d017      	beq.n	8004978 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1aa      	bne.n	80048d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fcec 	bl	8005362 <I2C_WaitOnBTFFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00d      	beq.n	80049ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	2b04      	cmp	r3, #4
 8004996:	d107      	bne.n	80049a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e016      	b.n	80049da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	00100002 	.word	0x00100002
 80049e8:	ffff0000 	.word	0xffff0000

080049ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08c      	sub	sp, #48	; 0x30
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	461a      	mov	r2, r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	817b      	strh	r3, [r7, #10]
 80049fe:	460b      	mov	r3, r1
 8004a00:	813b      	strh	r3, [r7, #8]
 8004a02:	4613      	mov	r3, r2
 8004a04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a06:	f7fe fc33 	bl	8003270 <HAL_GetTick>
 8004a0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	f040 8208 	bne.w	8004e2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	2319      	movs	r3, #25
 8004a20:	2201      	movs	r2, #1
 8004a22:	497b      	ldr	r1, [pc, #492]	; (8004c10 <HAL_I2C_Mem_Read+0x224>)
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fb85 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
 8004a32:	e1fb      	b.n	8004e2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2C_Mem_Read+0x56>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e1f4      	b.n	8004e2c <HAL_I2C_Mem_Read+0x440>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d007      	beq.n	8004a68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2222      	movs	r2, #34	; 0x22
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2240      	movs	r2, #64	; 0x40
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a5b      	ldr	r2, [pc, #364]	; (8004c14 <HAL_I2C_Mem_Read+0x228>)
 8004aa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aaa:	88f8      	ldrh	r0, [r7, #6]
 8004aac:	893a      	ldrh	r2, [r7, #8]
 8004aae:	8979      	ldrh	r1, [r7, #10]
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	4603      	mov	r3, r0
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 fa52 	bl	8004f64 <I2C_RequestMemoryRead>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e1b0      	b.n	8004e2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d113      	bne.n	8004afa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	623b      	str	r3, [r7, #32]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	623b      	str	r3, [r7, #32]
 8004ae6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e184      	b.n	8004e04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d11b      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e164      	b.n	8004e04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d11b      	bne.n	8004b7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	e144      	b.n	8004e04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b90:	e138      	b.n	8004e04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	f200 80f1 	bhi.w	8004d7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d123      	bne.n	8004bec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fc1b 	bl	80053e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e139      	b.n	8004e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bea:	e10b      	b.n	8004e04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d14e      	bne.n	8004c92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	4906      	ldr	r1, [pc, #24]	; (8004c18 <HAL_I2C_Mem_Read+0x22c>)
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fa98 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d008      	beq.n	8004c1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e10e      	b.n	8004e2c <HAL_I2C_Mem_Read+0x440>
 8004c0e:	bf00      	nop
 8004c10:	00100002 	.word	0x00100002
 8004c14:	ffff0000 	.word	0xffff0000
 8004c18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c90:	e0b8      	b.n	8004e04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4966      	ldr	r1, [pc, #408]	; (8004e34 <HAL_I2C_Mem_Read+0x448>)
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 fa49 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0bf      	b.n	8004e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691a      	ldr	r2, [r3, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	494f      	ldr	r1, [pc, #316]	; (8004e34 <HAL_I2C_Mem_Read+0x448>)
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fa1b 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e091      	b.n	8004e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d7c:	e042      	b.n	8004e04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fb2e 	bl	80053e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e04c      	b.n	8004e2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d118      	bne.n	8004e04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f47f aec2 	bne.w	8004b92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
  }
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3728      	adds	r7, #40	; 0x28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	00010004 	.word	0x00010004

08004e38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	4608      	mov	r0, r1
 8004e42:	4611      	mov	r1, r2
 8004e44:	461a      	mov	r2, r3
 8004e46:	4603      	mov	r3, r0
 8004e48:	817b      	strh	r3, [r7, #10]
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	813b      	strh	r3, [r7, #8]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f960 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e88:	d103      	bne.n	8004e92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e05f      	b.n	8004f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e96:	897b      	ldrh	r3, [r7, #10]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ea4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	492d      	ldr	r1, [pc, #180]	; (8004f60 <I2C_RequestMemoryWrite+0x128>)
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f998 	bl	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e04c      	b.n	8004f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed4:	6a39      	ldr	r1, [r7, #32]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 fa02 	bl	80052e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d107      	bne.n	8004efa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e02b      	b.n	8004f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d105      	bne.n	8004f10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f04:	893b      	ldrh	r3, [r7, #8]
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	611a      	str	r2, [r3, #16]
 8004f0e:	e021      	b.n	8004f54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f10:	893b      	ldrh	r3, [r7, #8]
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	6a39      	ldr	r1, [r7, #32]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f9dc 	bl	80052e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00d      	beq.n	8004f4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d107      	bne.n	8004f46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e005      	b.n	8004f56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f4a:	893b      	ldrh	r3, [r7, #8]
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	00010002 	.word	0x00010002

08004f64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	461a      	mov	r2, r3
 8004f72:	4603      	mov	r3, r0
 8004f74:	817b      	strh	r3, [r7, #10]
 8004f76:	460b      	mov	r3, r1
 8004f78:	813b      	strh	r3, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f8c2 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00d      	beq.n	8004fd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc4:	d103      	bne.n	8004fce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e0aa      	b.n	8005128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd2:	897b      	ldrh	r3, [r7, #10]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	4952      	ldr	r1, [pc, #328]	; (8005130 <I2C_RequestMemoryRead+0x1cc>)
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f8fa 	bl	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e097      	b.n	8005128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800500e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005010:	6a39      	ldr	r1, [r7, #32]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f964 	bl	80052e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2b04      	cmp	r3, #4
 8005024:	d107      	bne.n	8005036 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e076      	b.n	8005128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005040:	893b      	ldrh	r3, [r7, #8]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	611a      	str	r2, [r3, #16]
 800504a:	e021      	b.n	8005090 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800504c:	893b      	ldrh	r3, [r7, #8]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	b29b      	uxth	r3, r3
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505c:	6a39      	ldr	r1, [r7, #32]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f93e 	bl	80052e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	2b04      	cmp	r3, #4
 8005070:	d107      	bne.n	8005082 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e050      	b.n	8005128 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005086:	893b      	ldrh	r3, [r7, #8]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005092:	6a39      	ldr	r1, [r7, #32]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f923 	bl	80052e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00d      	beq.n	80050bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d107      	bne.n	80050b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e035      	b.n	8005128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f82b 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00d      	beq.n	8005100 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f2:	d103      	bne.n	80050fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e013      	b.n	8005128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005100:	897b      	ldrh	r3, [r7, #10]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	6a3a      	ldr	r2, [r7, #32]
 8005114:	4906      	ldr	r1, [pc, #24]	; (8005130 <I2C_RequestMemoryRead+0x1cc>)
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f863 	bl	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	00010002 	.word	0x00010002

08005134 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005144:	e025      	b.n	8005192 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d021      	beq.n	8005192 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fe f88f 	bl	8003270 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <I2C_WaitOnFlagUntilTimeout+0x30>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d116      	bne.n	8005192 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f043 0220 	orr.w	r2, r3, #32
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e023      	b.n	80051da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d10d      	bne.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	43da      	mvns	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	e00c      	b.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	43da      	mvns	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4013      	ands	r3, r2
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bf0c      	ite	eq
 80051ca:	2301      	moveq	r3, #1
 80051cc:	2300      	movne	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d0b6      	beq.n	8005146 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051f0:	e051      	b.n	8005296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005200:	d123      	bne.n	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005210:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800521a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f043 0204 	orr.w	r2, r3, #4
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e046      	b.n	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005250:	d021      	beq.n	8005296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fe f80d 	bl	8003270 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d116      	bne.n	8005296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e020      	b.n	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	0c1b      	lsrs	r3, r3, #16
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10c      	bne.n	80052ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	43da      	mvns	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bf14      	ite	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	2300      	moveq	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	e00b      	b.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	43da      	mvns	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d18d      	bne.n	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ec:	e02d      	b.n	800534a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f8ce 	bl	8005490 <I2C_IsAcknowledgeFailed>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e02d      	b.n	800535a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d021      	beq.n	800534a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005306:	f7fd ffb3 	bl	8003270 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	429a      	cmp	r2, r3
 8005314:	d302      	bcc.n	800531c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d116      	bne.n	800534a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e007      	b.n	800535a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005354:	2b80      	cmp	r3, #128	; 0x80
 8005356:	d1ca      	bne.n	80052ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800536e:	e02d      	b.n	80053cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f88d 	bl	8005490 <I2C_IsAcknowledgeFailed>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e02d      	b.n	80053dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d021      	beq.n	80053cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005388:	f7fd ff72 	bl	8003270 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	429a      	cmp	r2, r3
 8005396:	d302      	bcc.n	800539e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d116      	bne.n	80053cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	f043 0220 	orr.w	r2, r3, #32
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e007      	b.n	80053dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d1ca      	bne.n	8005370 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053f0:	e042      	b.n	8005478 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d119      	bne.n	8005434 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0210 	mvn.w	r2, #16
 8005408:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e029      	b.n	8005488 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005434:	f7fd ff1c 	bl	8003270 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	429a      	cmp	r2, r3
 8005442:	d302      	bcc.n	800544a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d116      	bne.n	8005478 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	f043 0220 	orr.w	r2, r3, #32
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e007      	b.n	8005488 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d1b5      	bne.n	80053f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a6:	d11b      	bne.n	80054e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	f043 0204 	orr.w	r2, r3, #4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e267      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d075      	beq.n	80055fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800550e:	4b88      	ldr	r3, [pc, #544]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	2b04      	cmp	r3, #4
 8005518:	d00c      	beq.n	8005534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551a:	4b85      	ldr	r3, [pc, #532]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005522:	2b08      	cmp	r3, #8
 8005524:	d112      	bne.n	800554c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005526:	4b82      	ldr	r3, [pc, #520]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005532:	d10b      	bne.n	800554c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005534:	4b7e      	ldr	r3, [pc, #504]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d05b      	beq.n	80055f8 <HAL_RCC_OscConfig+0x108>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d157      	bne.n	80055f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e242      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005554:	d106      	bne.n	8005564 <HAL_RCC_OscConfig+0x74>
 8005556:	4b76      	ldr	r3, [pc, #472]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a75      	ldr	r2, [pc, #468]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 800555c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	e01d      	b.n	80055a0 <HAL_RCC_OscConfig+0xb0>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800556c:	d10c      	bne.n	8005588 <HAL_RCC_OscConfig+0x98>
 800556e:	4b70      	ldr	r3, [pc, #448]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a6f      	ldr	r2, [pc, #444]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	4b6d      	ldr	r3, [pc, #436]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a6c      	ldr	r2, [pc, #432]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e00b      	b.n	80055a0 <HAL_RCC_OscConfig+0xb0>
 8005588:	4b69      	ldr	r3, [pc, #420]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a68      	ldr	r2, [pc, #416]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 800558e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	4b66      	ldr	r3, [pc, #408]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a65      	ldr	r2, [pc, #404]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 800559a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800559e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d013      	beq.n	80055d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fd fe62 	bl	8003270 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b0:	f7fd fe5e 	bl	8003270 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b64      	cmp	r3, #100	; 0x64
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e207      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c2:	4b5b      	ldr	r3, [pc, #364]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0xc0>
 80055ce:	e014      	b.n	80055fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fd fe4e 	bl	8003270 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d8:	f7fd fe4a 	bl	8003270 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b64      	cmp	r3, #100	; 0x64
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e1f3      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ea:	4b51      	ldr	r3, [pc, #324]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0xe8>
 80055f6:	e000      	b.n	80055fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d063      	beq.n	80056ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005606:	4b4a      	ldr	r3, [pc, #296]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00b      	beq.n	800562a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005612:	4b47      	ldr	r3, [pc, #284]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800561a:	2b08      	cmp	r3, #8
 800561c:	d11c      	bne.n	8005658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800561e:	4b44      	ldr	r3, [pc, #272]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d116      	bne.n	8005658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562a:	4b41      	ldr	r3, [pc, #260]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <HAL_RCC_OscConfig+0x152>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d001      	beq.n	8005642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e1c7      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005642:	4b3b      	ldr	r3, [pc, #236]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4937      	ldr	r1, [pc, #220]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005656:	e03a      	b.n	80056ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d020      	beq.n	80056a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005660:	4b34      	ldr	r3, [pc, #208]	; (8005734 <HAL_RCC_OscConfig+0x244>)
 8005662:	2201      	movs	r2, #1
 8005664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005666:	f7fd fe03 	bl	8003270 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566c:	e008      	b.n	8005680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800566e:	f7fd fdff 	bl	8003270 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e1a8      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005680:	4b2b      	ldr	r3, [pc, #172]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0f0      	beq.n	800566e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568c:	4b28      	ldr	r3, [pc, #160]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4925      	ldr	r1, [pc, #148]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 800569c:	4313      	orrs	r3, r2
 800569e:	600b      	str	r3, [r1, #0]
 80056a0:	e015      	b.n	80056ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056a2:	4b24      	ldr	r3, [pc, #144]	; (8005734 <HAL_RCC_OscConfig+0x244>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fd fde2 	bl	8003270 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056b0:	f7fd fdde 	bl	8003270 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e187      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056c2:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d036      	beq.n	8005748 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d016      	beq.n	8005710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056e2:	4b15      	ldr	r3, [pc, #84]	; (8005738 <HAL_RCC_OscConfig+0x248>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e8:	f7fd fdc2 	bl	8003270 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f0:	f7fd fdbe 	bl	8003270 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e167      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_RCC_OscConfig+0x240>)
 8005704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <HAL_RCC_OscConfig+0x200>
 800570e:	e01b      	b.n	8005748 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <HAL_RCC_OscConfig+0x248>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005716:	f7fd fdab 	bl	8003270 <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800571c:	e00e      	b.n	800573c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800571e:	f7fd fda7 	bl	8003270 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d907      	bls.n	800573c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e150      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
 8005730:	40023800 	.word	0x40023800
 8005734:	42470000 	.word	0x42470000
 8005738:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800573c:	4b88      	ldr	r3, [pc, #544]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 800573e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1ea      	bne.n	800571e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8097 	beq.w	8005884 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800575a:	4b81      	ldr	r3, [pc, #516]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10f      	bne.n	8005786 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005766:	2300      	movs	r3, #0
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	4b7d      	ldr	r3, [pc, #500]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	4a7c      	ldr	r2, [pc, #496]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 8005770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005774:	6413      	str	r3, [r2, #64]	; 0x40
 8005776:	4b7a      	ldr	r3, [pc, #488]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005786:	4b77      	ldr	r3, [pc, #476]	; (8005964 <HAL_RCC_OscConfig+0x474>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d118      	bne.n	80057c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005792:	4b74      	ldr	r3, [pc, #464]	; (8005964 <HAL_RCC_OscConfig+0x474>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a73      	ldr	r2, [pc, #460]	; (8005964 <HAL_RCC_OscConfig+0x474>)
 8005798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800579e:	f7fd fd67 	bl	8003270 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a6:	f7fd fd63 	bl	8003270 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e10c      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b8:	4b6a      	ldr	r3, [pc, #424]	; (8005964 <HAL_RCC_OscConfig+0x474>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d106      	bne.n	80057da <HAL_RCC_OscConfig+0x2ea>
 80057cc:	4b64      	ldr	r3, [pc, #400]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	4a63      	ldr	r2, [pc, #396]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	6713      	str	r3, [r2, #112]	; 0x70
 80057d8:	e01c      	b.n	8005814 <HAL_RCC_OscConfig+0x324>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b05      	cmp	r3, #5
 80057e0:	d10c      	bne.n	80057fc <HAL_RCC_OscConfig+0x30c>
 80057e2:	4b5f      	ldr	r3, [pc, #380]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	4a5e      	ldr	r2, [pc, #376]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 80057e8:	f043 0304 	orr.w	r3, r3, #4
 80057ec:	6713      	str	r3, [r2, #112]	; 0x70
 80057ee:	4b5c      	ldr	r3, [pc, #368]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	4a5b      	ldr	r2, [pc, #364]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	6713      	str	r3, [r2, #112]	; 0x70
 80057fa:	e00b      	b.n	8005814 <HAL_RCC_OscConfig+0x324>
 80057fc:	4b58      	ldr	r3, [pc, #352]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	4a57      	ldr	r2, [pc, #348]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 8005802:	f023 0301 	bic.w	r3, r3, #1
 8005806:	6713      	str	r3, [r2, #112]	; 0x70
 8005808:	4b55      	ldr	r3, [pc, #340]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 800580a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580c:	4a54      	ldr	r2, [pc, #336]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 800580e:	f023 0304 	bic.w	r3, r3, #4
 8005812:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d015      	beq.n	8005848 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581c:	f7fd fd28 	bl	8003270 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005822:	e00a      	b.n	800583a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005824:	f7fd fd24 	bl	8003270 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e0cb      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583a:	4b49      	ldr	r3, [pc, #292]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0ee      	beq.n	8005824 <HAL_RCC_OscConfig+0x334>
 8005846:	e014      	b.n	8005872 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005848:	f7fd fd12 	bl	8003270 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800584e:	e00a      	b.n	8005866 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005850:	f7fd fd0e 	bl	8003270 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	; 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e0b5      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005866:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1ee      	bne.n	8005850 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d105      	bne.n	8005884 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005878:	4b39      	ldr	r3, [pc, #228]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	4a38      	ldr	r2, [pc, #224]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 800587e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005882:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 80a1 	beq.w	80059d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800588e:	4b34      	ldr	r3, [pc, #208]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 030c 	and.w	r3, r3, #12
 8005896:	2b08      	cmp	r3, #8
 8005898:	d05c      	beq.n	8005954 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d141      	bne.n	8005926 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a2:	4b31      	ldr	r3, [pc, #196]	; (8005968 <HAL_RCC_OscConfig+0x478>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a8:	f7fd fce2 	bl	8003270 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b0:	f7fd fcde 	bl	8003270 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e087      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c2:	4b27      	ldr	r3, [pc, #156]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f0      	bne.n	80058b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69da      	ldr	r2, [r3, #28]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	3b01      	subs	r3, #1
 80058e8:	041b      	lsls	r3, r3, #16
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	061b      	lsls	r3, r3, #24
 80058f2:	491b      	ldr	r1, [pc, #108]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058f8:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <HAL_RCC_OscConfig+0x478>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fd fcb7 	bl	8003270 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005906:	f7fd fcb3 	bl	8003270 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e05c      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005918:	4b11      	ldr	r3, [pc, #68]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <HAL_RCC_OscConfig+0x416>
 8005924:	e054      	b.n	80059d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005926:	4b10      	ldr	r3, [pc, #64]	; (8005968 <HAL_RCC_OscConfig+0x478>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592c:	f7fd fca0 	bl	8003270 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005934:	f7fd fc9c 	bl	8003270 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e045      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005946:	4b06      	ldr	r3, [pc, #24]	; (8005960 <HAL_RCC_OscConfig+0x470>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0x444>
 8005952:	e03d      	b.n	80059d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d107      	bne.n	800596c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e038      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
 8005960:	40023800 	.word	0x40023800
 8005964:	40007000 	.word	0x40007000
 8005968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <HAL_RCC_OscConfig+0x4ec>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d028      	beq.n	80059cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005984:	429a      	cmp	r2, r3
 8005986:	d121      	bne.n	80059cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005992:	429a      	cmp	r2, r3
 8005994:	d11a      	bne.n	80059cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800599c:	4013      	ands	r3, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d111      	bne.n	80059cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	3b01      	subs	r3, #1
 80059b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d107      	bne.n	80059cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40023800 	.word	0x40023800

080059e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0cc      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059f4:	4b68      	ldr	r3, [pc, #416]	; (8005b98 <HAL_RCC_ClockConfig+0x1b8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d90c      	bls.n	8005a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a02:	4b65      	ldr	r3, [pc, #404]	; (8005b98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0a:	4b63      	ldr	r3, [pc, #396]	; (8005b98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0b8      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d020      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a34:	4b59      	ldr	r3, [pc, #356]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4a58      	ldr	r2, [pc, #352]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a4c:	4b53      	ldr	r3, [pc, #332]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	4a52      	ldr	r2, [pc, #328]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a58:	4b50      	ldr	r3, [pc, #320]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	494d      	ldr	r1, [pc, #308]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d044      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d107      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7e:	4b47      	ldr	r3, [pc, #284]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d119      	bne.n	8005abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e07f      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d003      	beq.n	8005a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d107      	bne.n	8005aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9e:	4b3f      	ldr	r3, [pc, #252]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e06f      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aae:	4b3b      	ldr	r3, [pc, #236]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e067      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005abe:	4b37      	ldr	r3, [pc, #220]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f023 0203 	bic.w	r2, r3, #3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4934      	ldr	r1, [pc, #208]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ad0:	f7fd fbce 	bl	8003270 <HAL_GetTick>
 8005ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad6:	e00a      	b.n	8005aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad8:	f7fd fbca 	bl	8003270 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e04f      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aee:	4b2b      	ldr	r3, [pc, #172]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 020c 	and.w	r2, r3, #12
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d1eb      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b00:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <HAL_RCC_ClockConfig+0x1b8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d20c      	bcs.n	8005b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0e:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <HAL_RCC_ClockConfig+0x1b8>)
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b16:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <HAL_RCC_ClockConfig+0x1b8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d001      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e032      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b34:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4916      	ldr	r1, [pc, #88]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d009      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b52:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	490e      	ldr	r1, [pc, #56]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b66:	f000 f821 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	091b      	lsrs	r3, r3, #4
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	490a      	ldr	r1, [pc, #40]	; (8005ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b78:	5ccb      	ldrb	r3, [r1, r3]
 8005b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fd fb2e 	bl	80031e8 <HAL_InitTick>

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	40023c00 	.word	0x40023c00
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	0800e564 	.word	0x0800e564
 8005ba4:	20000008 	.word	0x20000008
 8005ba8:	2000000c 	.word	0x2000000c

08005bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb0:	b094      	sub	sp, #80	; 0x50
 8005bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb8:	2300      	movs	r3, #0
 8005bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc4:	4b79      	ldr	r3, [pc, #484]	; (8005dac <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 030c 	and.w	r3, r3, #12
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d00d      	beq.n	8005bec <HAL_RCC_GetSysClockFreq+0x40>
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	f200 80e1 	bhi.w	8005d98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_RCC_GetSysClockFreq+0x34>
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d003      	beq.n	8005be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bde:	e0db      	b.n	8005d98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005be0:	4b73      	ldr	r3, [pc, #460]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005be2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005be4:	e0db      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005be6:	4b73      	ldr	r3, [pc, #460]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005be8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bea:	e0d8      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bec:	4b6f      	ldr	r3, [pc, #444]	; (8005dac <HAL_RCC_GetSysClockFreq+0x200>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bf4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bf6:	4b6d      	ldr	r3, [pc, #436]	; (8005dac <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d063      	beq.n	8005cca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c02:	4b6a      	ldr	r3, [pc, #424]	; (8005dac <HAL_RCC_GetSysClockFreq+0x200>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	099b      	lsrs	r3, r3, #6
 8005c08:	2200      	movs	r2, #0
 8005c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c14:	633b      	str	r3, [r7, #48]	; 0x30
 8005c16:	2300      	movs	r3, #0
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c1e:	4622      	mov	r2, r4
 8005c20:	462b      	mov	r3, r5
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f04f 0100 	mov.w	r1, #0
 8005c2a:	0159      	lsls	r1, r3, #5
 8005c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c30:	0150      	lsls	r0, r2, #5
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4621      	mov	r1, r4
 8005c38:	1a51      	subs	r1, r2, r1
 8005c3a:	6139      	str	r1, [r7, #16]
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c50:	4659      	mov	r1, fp
 8005c52:	018b      	lsls	r3, r1, #6
 8005c54:	4651      	mov	r1, sl
 8005c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c5a:	4651      	mov	r1, sl
 8005c5c:	018a      	lsls	r2, r1, #6
 8005c5e:	4651      	mov	r1, sl
 8005c60:	ebb2 0801 	subs.w	r8, r2, r1
 8005c64:	4659      	mov	r1, fp
 8005c66:	eb63 0901 	sbc.w	r9, r3, r1
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c7e:	4690      	mov	r8, r2
 8005c80:	4699      	mov	r9, r3
 8005c82:	4623      	mov	r3, r4
 8005c84:	eb18 0303 	adds.w	r3, r8, r3
 8005c88:	60bb      	str	r3, [r7, #8]
 8005c8a:	462b      	mov	r3, r5
 8005c8c:	eb49 0303 	adc.w	r3, r9, r3
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	f04f 0300 	mov.w	r3, #0
 8005c9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	024b      	lsls	r3, r1, #9
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ca8:	4621      	mov	r1, r4
 8005caa:	024a      	lsls	r2, r1, #9
 8005cac:	4610      	mov	r0, r2
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cbc:	f7fa ff9c 	bl	8000bf8 <__aeabi_uldivmod>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc8:	e058      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cca:	4b38      	ldr	r3, [pc, #224]	; (8005dac <HAL_RCC_GetSysClockFreq+0x200>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	099b      	lsrs	r3, r3, #6
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cda:	623b      	str	r3, [r7, #32]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	f04f 0000 	mov.w	r0, #0
 8005cec:	f04f 0100 	mov.w	r1, #0
 8005cf0:	0159      	lsls	r1, r3, #5
 8005cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cf6:	0150      	lsls	r0, r2, #5
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d02:	4649      	mov	r1, r9
 8005d04:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d1c:	ebb2 040a 	subs.w	r4, r2, sl
 8005d20:	eb63 050b 	sbc.w	r5, r3, fp
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	00eb      	lsls	r3, r5, #3
 8005d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d32:	00e2      	lsls	r2, r4, #3
 8005d34:	4614      	mov	r4, r2
 8005d36:	461d      	mov	r5, r3
 8005d38:	4643      	mov	r3, r8
 8005d3a:	18e3      	adds	r3, r4, r3
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	464b      	mov	r3, r9
 8005d40:	eb45 0303 	adc.w	r3, r5, r3
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d52:	4629      	mov	r1, r5
 8005d54:	028b      	lsls	r3, r1, #10
 8005d56:	4621      	mov	r1, r4
 8005d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	028a      	lsls	r2, r1, #10
 8005d60:	4610      	mov	r0, r2
 8005d62:	4619      	mov	r1, r3
 8005d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d66:	2200      	movs	r2, #0
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	61fa      	str	r2, [r7, #28]
 8005d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d70:	f7fa ff42 	bl	8000bf8 <__aeabi_uldivmod>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4613      	mov	r3, r2
 8005d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <HAL_RCC_GetSysClockFreq+0x200>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	0c1b      	lsrs	r3, r3, #16
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	3301      	adds	r3, #1
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d96:	e002      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3750      	adds	r7, #80	; 0x50
 8005da4:	46bd      	mov	sp, r7
 8005da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005daa:	bf00      	nop
 8005dac:	40023800 	.word	0x40023800
 8005db0:	00f42400 	.word	0x00f42400
 8005db4:	007a1200 	.word	0x007a1200

08005db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dbc:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20000008 	.word	0x20000008

08005dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dd4:	f7ff fff0 	bl	8005db8 <HAL_RCC_GetHCLKFreq>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	0a9b      	lsrs	r3, r3, #10
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	4903      	ldr	r1, [pc, #12]	; (8005df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005de6:	5ccb      	ldrb	r3, [r1, r3]
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40023800 	.word	0x40023800
 8005df4:	0800e574 	.word	0x0800e574

08005df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dfc:	f7ff ffdc 	bl	8005db8 <HAL_RCC_GetHCLKFreq>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	0b5b      	lsrs	r3, r3, #13
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	4903      	ldr	r1, [pc, #12]	; (8005e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	0800e574 	.word	0x0800e574

08005e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e07b      	b.n	8005f2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d108      	bne.n	8005e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e42:	d009      	beq.n	8005e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	61da      	str	r2, [r3, #28]
 8005e4a:	e005      	b.n	8005e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fc fbe2 	bl	800263c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005edc:	ea42 0103 	orr.w	r1, r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	f003 0104 	and.w	r1, r3, #4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	f003 0210 	and.w	r2, r3, #16
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69da      	ldr	r2, [r3, #28]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b088      	sub	sp, #32
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	603b      	str	r3, [r7, #0]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_SPI_Transmit+0x22>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e126      	b.n	80061a2 <HAL_SPI_Transmit+0x270>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f5c:	f7fd f988 	bl	8003270 <HAL_GetTick>
 8005f60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d002      	beq.n	8005f78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f72:	2302      	movs	r3, #2
 8005f74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f76:	e10b      	b.n	8006190 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_SPI_Transmit+0x52>
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f88:	e102      	b.n	8006190 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	88fa      	ldrh	r2, [r7, #6]
 8005fa2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd0:	d10f      	bne.n	8005ff2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ff0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b40      	cmp	r3, #64	; 0x40
 8005ffe:	d007      	beq.n	8006010 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800600e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006018:	d14b      	bne.n	80060b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_SPI_Transmit+0xf6>
 8006022:	8afb      	ldrh	r3, [r7, #22]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d13e      	bne.n	80060a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	881a      	ldrh	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	1c9a      	adds	r2, r3, #2
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800604c:	e02b      	b.n	80060a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b02      	cmp	r3, #2
 800605a:	d112      	bne.n	8006082 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	1c9a      	adds	r2, r3, #2
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006080:	e011      	b.n	80060a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006082:	f7fd f8f5 	bl	8003270 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d803      	bhi.n	800609a <HAL_SPI_Transmit+0x168>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d102      	bne.n	80060a0 <HAL_SPI_Transmit+0x16e>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d102      	bne.n	80060a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060a4:	e074      	b.n	8006190 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1ce      	bne.n	800604e <HAL_SPI_Transmit+0x11c>
 80060b0:	e04c      	b.n	800614c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Transmit+0x18e>
 80060ba:	8afb      	ldrh	r3, [r7, #22]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d140      	bne.n	8006142 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	7812      	ldrb	r2, [r2, #0]
 80060cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060dc:	b29b      	uxth	r3, r3
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060e6:	e02c      	b.n	8006142 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d113      	bne.n	800611e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	7812      	ldrb	r2, [r2, #0]
 8006102:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	86da      	strh	r2, [r3, #54]	; 0x36
 800611c:	e011      	b.n	8006142 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800611e:	f7fd f8a7 	bl	8003270 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d803      	bhi.n	8006136 <HAL_SPI_Transmit+0x204>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d102      	bne.n	800613c <HAL_SPI_Transmit+0x20a>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d102      	bne.n	8006142 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006140:	e026      	b.n	8006190 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1cd      	bne.n	80060e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fa55 	bl	8006600 <SPI_EndRxTxTransaction>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800616a:	2300      	movs	r3, #0
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e000      	b.n	8006190 <HAL_SPI_Transmit+0x25e>
  }

error:
 800618e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3720      	adds	r7, #32
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b08c      	sub	sp, #48	; 0x30
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061b8:	2301      	movs	r3, #1
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_SPI_TransmitReceive+0x26>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e18a      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x33c>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061d8:	f7fd f84a 	bl	8003270 <HAL_GetTick>
 80061dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061ee:	887b      	ldrh	r3, [r7, #2]
 80061f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d00f      	beq.n	800621a <HAL_SPI_TransmitReceive+0x70>
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006200:	d107      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x68>
 800620a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800620e:	2b04      	cmp	r3, #4
 8006210:	d003      	beq.n	800621a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006212:	2302      	movs	r3, #2
 8006214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006218:	e15b      	b.n	80064d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_SPI_TransmitReceive+0x82>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_SPI_TransmitReceive+0x82>
 8006226:	887b      	ldrh	r3, [r7, #2]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d103      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006232:	e14e      	b.n	80064d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b04      	cmp	r3, #4
 800623e:	d003      	beq.n	8006248 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2205      	movs	r2, #5
 8006244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	887a      	ldrh	r2, [r7, #2]
 8006258:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	887a      	ldrh	r2, [r7, #2]
 800625e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	887a      	ldrh	r2, [r7, #2]
 800626a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	887a      	ldrh	r2, [r7, #2]
 8006270:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d007      	beq.n	800629c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800629a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a4:	d178      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_SPI_TransmitReceive+0x10a>
 80062ae:	8b7b      	ldrh	r3, [r7, #26]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d166      	bne.n	8006382 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	881a      	ldrh	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	1c9a      	adds	r2, r3, #2
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062d8:	e053      	b.n	8006382 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d11b      	bne.n	8006320 <HAL_SPI_TransmitReceive+0x176>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d016      	beq.n	8006320 <HAL_SPI_TransmitReceive+0x176>
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d113      	bne.n	8006320 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	881a      	ldrh	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	1c9a      	adds	r2, r3, #2
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b01      	cmp	r3, #1
 800632c:	d119      	bne.n	8006362 <HAL_SPI_TransmitReceive+0x1b8>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d014      	beq.n	8006362 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	b292      	uxth	r2, r2
 8006344:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	1c9a      	adds	r2, r3, #2
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800635e:	2301      	movs	r3, #1
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006362:	f7fc ff85 	bl	8003270 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800636e:	429a      	cmp	r2, r3
 8006370:	d807      	bhi.n	8006382 <HAL_SPI_TransmitReceive+0x1d8>
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006378:	d003      	beq.n	8006382 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006380:	e0a7      	b.n	80064d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1a6      	bne.n	80062da <HAL_SPI_TransmitReceive+0x130>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1a1      	bne.n	80062da <HAL_SPI_TransmitReceive+0x130>
 8006396:	e07c      	b.n	8006492 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_SPI_TransmitReceive+0x1fc>
 80063a0:	8b7b      	ldrh	r3, [r7, #26]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d16b      	bne.n	800647e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	330c      	adds	r3, #12
 80063b0:	7812      	ldrb	r2, [r2, #0]
 80063b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063cc:	e057      	b.n	800647e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d11c      	bne.n	8006416 <HAL_SPI_TransmitReceive+0x26c>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d017      	beq.n	8006416 <HAL_SPI_TransmitReceive+0x26c>
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d114      	bne.n	8006416 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	7812      	ldrb	r2, [r2, #0]
 80063f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006408:	b29b      	uxth	r3, r3
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b01      	cmp	r3, #1
 8006422:	d119      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x2ae>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d014      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006454:	2301      	movs	r3, #1
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006458:	f7fc ff0a 	bl	8003270 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006464:	429a      	cmp	r2, r3
 8006466:	d803      	bhi.n	8006470 <HAL_SPI_TransmitReceive+0x2c6>
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646e:	d102      	bne.n	8006476 <HAL_SPI_TransmitReceive+0x2cc>
 8006470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800647c:	e029      	b.n	80064d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006482:	b29b      	uxth	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1a2      	bne.n	80063ce <HAL_SPI_TransmitReceive+0x224>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d19d      	bne.n	80063ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006494:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f8b2 	bl	8006600 <SPI_EndRxTxTransaction>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d006      	beq.n	80064b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064ae:	e010      	b.n	80064d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	e000      	b.n	80064d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3730      	adds	r7, #48	; 0x30
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006500:	f7fc feb6 	bl	8003270 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	4413      	add	r3, r2
 800650e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006510:	f7fc feae 	bl	8003270 <HAL_GetTick>
 8006514:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006516:	4b39      	ldr	r3, [pc, #228]	; (80065fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	015b      	lsls	r3, r3, #5
 800651c:	0d1b      	lsrs	r3, r3, #20
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	fb02 f303 	mul.w	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006526:	e054      	b.n	80065d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d050      	beq.n	80065d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006530:	f7fc fe9e 	bl	8003270 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	429a      	cmp	r2, r3
 800653e:	d902      	bls.n	8006546 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d13d      	bne.n	80065c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800655e:	d111      	bne.n	8006584 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006568:	d004      	beq.n	8006574 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006572:	d107      	bne.n	8006584 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658c:	d10f      	bne.n	80065ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e017      	b.n	80065f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d19b      	bne.n	8006528 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3720      	adds	r7, #32
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000008 	.word	0x20000008

08006600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800660c:	4b1b      	ldr	r3, [pc, #108]	; (800667c <SPI_EndRxTxTransaction+0x7c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a1b      	ldr	r2, [pc, #108]	; (8006680 <SPI_EndRxTxTransaction+0x80>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	0d5b      	lsrs	r3, r3, #21
 8006618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800661c:	fb02 f303 	mul.w	r3, r2, r3
 8006620:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662a:	d112      	bne.n	8006652 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2200      	movs	r2, #0
 8006634:	2180      	movs	r1, #128	; 0x80
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff ff5a 	bl	80064f0 <SPI_WaitFlagStateUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d016      	beq.n	8006670 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e00f      	b.n	8006672 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	3b01      	subs	r3, #1
 800665c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006668:	2b80      	cmp	r3, #128	; 0x80
 800666a:	d0f2      	beq.n	8006652 <SPI_EndRxTxTransaction+0x52>
 800666c:	e000      	b.n	8006670 <SPI_EndRxTxTransaction+0x70>
        break;
 800666e:	bf00      	nop
  }

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000008 	.word	0x20000008
 8006680:	165e9f81 	.word	0x165e9f81

08006684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e041      	b.n	800671a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fc f864 	bl	8002778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3304      	adds	r3, #4
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f000 f9fe 	bl	8006ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	d001      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e044      	b.n	80067c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1e      	ldr	r2, [pc, #120]	; (80067d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d018      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x6c>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006766:	d013      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x6c>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1a      	ldr	r2, [pc, #104]	; (80067d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00e      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x6c>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a19      	ldr	r2, [pc, #100]	; (80067dc <HAL_TIM_Base_Start_IT+0xb8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d009      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x6c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a17      	ldr	r2, [pc, #92]	; (80067e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d004      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x6c>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a16      	ldr	r2, [pc, #88]	; (80067e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d111      	bne.n	80067b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b06      	cmp	r3, #6
 80067a0:	d010      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b2:	e007      	b.n	80067c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40010000 	.word	0x40010000
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40014000 	.word	0x40014000

080067e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6a1a      	ldr	r2, [r3, #32]
 8006806:	f241 1311 	movw	r3, #4369	; 0x1111
 800680a:	4013      	ands	r3, r2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10f      	bne.n	8006830 <HAL_TIM_Base_Stop_IT+0x48>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6a1a      	ldr	r2, [r3, #32]
 8006816:	f240 4344 	movw	r3, #1092	; 0x444
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d107      	bne.n	8006830 <HAL_TIM_Base_Stop_IT+0x48>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0201 	bic.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b02      	cmp	r3, #2
 800685a:	d122      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b02      	cmp	r3, #2
 8006868:	d11b      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f06f 0202 	mvn.w	r2, #2
 8006872:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	f003 0303 	and.w	r3, r3, #3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f8ee 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 800688e:	e005      	b.n	800689c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f8e0 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8f1 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d122      	bne.n	80068f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d11b      	bne.n	80068f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f06f 0204 	mvn.w	r2, #4
 80068c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f8c4 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 80068e2:	e005      	b.n	80068f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f8b6 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f8c7 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b08      	cmp	r3, #8
 8006902:	d122      	bne.n	800694a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b08      	cmp	r3, #8
 8006910:	d11b      	bne.n	800694a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f06f 0208 	mvn.w	r2, #8
 800691a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2204      	movs	r2, #4
 8006920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f003 0303 	and.w	r3, r3, #3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f89a 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 8006936:	e005      	b.n	8006944 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f88c 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f89d 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b10      	cmp	r3, #16
 8006956:	d122      	bne.n	800699e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b10      	cmp	r3, #16
 8006964:	d11b      	bne.n	800699e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f06f 0210 	mvn.w	r2, #16
 800696e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2208      	movs	r2, #8
 8006974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f870 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 800698a:	e005      	b.n	8006998 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f862 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f873 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d10e      	bne.n	80069ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d107      	bne.n	80069ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0201 	mvn.w	r2, #1
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fa fa99 	bl	8000efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d4:	2b80      	cmp	r3, #128	; 0x80
 80069d6:	d10e      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e2:	2b80      	cmp	r3, #128	; 0x80
 80069e4:	d107      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f8f1 	bl	8006bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a00:	2b40      	cmp	r3, #64	; 0x40
 8006a02:	d10e      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	d107      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f838 	bl	8006a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d10e      	bne.n	8006a4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d107      	bne.n	8006a4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f06f 0220 	mvn.w	r2, #32
 8006a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f8bb 	bl	8006bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  return htim->State;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
	...

08006ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a34      	ldr	r2, [pc, #208]	; (8006ba8 <TIM_Base_SetConfig+0xe4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00f      	beq.n	8006afc <TIM_Base_SetConfig+0x38>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae2:	d00b      	beq.n	8006afc <TIM_Base_SetConfig+0x38>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a31      	ldr	r2, [pc, #196]	; (8006bac <TIM_Base_SetConfig+0xe8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d007      	beq.n	8006afc <TIM_Base_SetConfig+0x38>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a30      	ldr	r2, [pc, #192]	; (8006bb0 <TIM_Base_SetConfig+0xec>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_Base_SetConfig+0x38>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a2f      	ldr	r2, [pc, #188]	; (8006bb4 <TIM_Base_SetConfig+0xf0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d108      	bne.n	8006b0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a25      	ldr	r2, [pc, #148]	; (8006ba8 <TIM_Base_SetConfig+0xe4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01b      	beq.n	8006b4e <TIM_Base_SetConfig+0x8a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1c:	d017      	beq.n	8006b4e <TIM_Base_SetConfig+0x8a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a22      	ldr	r2, [pc, #136]	; (8006bac <TIM_Base_SetConfig+0xe8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <TIM_Base_SetConfig+0x8a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a21      	ldr	r2, [pc, #132]	; (8006bb0 <TIM_Base_SetConfig+0xec>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00f      	beq.n	8006b4e <TIM_Base_SetConfig+0x8a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a20      	ldr	r2, [pc, #128]	; (8006bb4 <TIM_Base_SetConfig+0xf0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00b      	beq.n	8006b4e <TIM_Base_SetConfig+0x8a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <TIM_Base_SetConfig+0xf4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d007      	beq.n	8006b4e <TIM_Base_SetConfig+0x8a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <TIM_Base_SetConfig+0xf8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d003      	beq.n	8006b4e <TIM_Base_SetConfig+0x8a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a1d      	ldr	r2, [pc, #116]	; (8006bc0 <TIM_Base_SetConfig+0xfc>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d108      	bne.n	8006b60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a08      	ldr	r2, [pc, #32]	; (8006ba8 <TIM_Base_SetConfig+0xe4>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d103      	bne.n	8006b94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	615a      	str	r2, [r3, #20]
}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40010000 	.word	0x40010000
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40014400 	.word	0x40014400
 8006bc0:	40014800 	.word	0x40014800

08006bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e03f      	b.n	8006c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fb fdf6 	bl	8002804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2224      	movs	r2, #36	; 0x24
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 f839 	bl	8007ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b08a      	sub	sp, #40	; 0x28
 8006c8a:	af02      	add	r7, sp, #8
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	603b      	str	r3, [r7, #0]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d17c      	bne.n	8006da0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_UART_Transmit+0x2c>
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e075      	b.n	8006da2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_UART_Transmit+0x3e>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e06e      	b.n	8006da2 <HAL_UART_Transmit+0x11c>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2221      	movs	r2, #33	; 0x21
 8006cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cda:	f7fc fac9 	bl	8003270 <HAL_GetTick>
 8006cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	88fa      	ldrh	r2, [r7, #6]
 8006ce4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	88fa      	ldrh	r2, [r7, #6]
 8006cea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf4:	d108      	bne.n	8006d08 <HAL_UART_Transmit+0x82>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	e003      	b.n	8006d10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d18:	e02a      	b.n	8006d70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2200      	movs	r2, #0
 8006d22:	2180      	movs	r1, #128	; 0x80
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fcf0 	bl	800770a <UART_WaitOnFlagUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e036      	b.n	8006da2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10b      	bne.n	8006d52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	3302      	adds	r3, #2
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	e007      	b.n	8006d62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	781a      	ldrb	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1cf      	bne.n	8006d1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2200      	movs	r2, #0
 8006d82:	2140      	movs	r1, #64	; 0x40
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 fcc0 	bl	800770a <UART_WaitOnFlagUntilTimeout>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e006      	b.n	8006da2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e000      	b.n	8006da2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006da0:	2302      	movs	r3, #2
  }
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08c      	sub	sp, #48	; 0x30
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d165      	bne.n	8006e92 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <HAL_UART_Transmit_DMA+0x26>
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e05e      	b.n	8006e94 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_UART_Transmit_DMA+0x38>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e057      	b.n	8006e94 <HAL_UART_Transmit_DMA+0xe8>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	88fa      	ldrh	r2, [r7, #6]
 8006df6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	88fa      	ldrh	r2, [r7, #6]
 8006dfc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2221      	movs	r2, #33	; 0x21
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e10:	4a22      	ldr	r2, [pc, #136]	; (8006e9c <HAL_UART_Transmit_DMA+0xf0>)
 8006e12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e18:	4a21      	ldr	r2, [pc, #132]	; (8006ea0 <HAL_UART_Transmit_DMA+0xf4>)
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e20:	4a20      	ldr	r2, [pc, #128]	; (8006ea4 <HAL_UART_Transmit_DMA+0xf8>)
 8006e22:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e28:	2200      	movs	r2, #0
 8006e2a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006e2c:	f107 0308 	add.w	r3, r7, #8
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	6819      	ldr	r1, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	461a      	mov	r2, r3
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	f7fc fe8a 	bl	8003b5c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e50:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	617b      	str	r3, [r7, #20]
   return(result);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3314      	adds	r3, #20
 8006e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e7a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e7c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6a39      	ldr	r1, [r7, #32]
 8006e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e5      	bne.n	8006e5a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e000      	b.n	8006e94 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006e92:	2302      	movs	r3, #2
  }
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3730      	adds	r7, #48	; 0x30
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	08007465 	.word	0x08007465
 8006ea0:	080074ff 	.word	0x080074ff
 8006ea4:	08007677 	.word	0x08007677

08006ea8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d11d      	bne.n	8006efe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <HAL_UART_Receive_DMA+0x26>
 8006ec8:	88fb      	ldrh	r3, [r7, #6]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e016      	b.n	8006f00 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_UART_Receive_DMA+0x38>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e00f      	b.n	8006f00 <HAL_UART_Receive_DMA+0x58>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fc77 	bl	80077e8 <UART_Start_Receive_DMA>
 8006efa:	4603      	mov	r3, r0
 8006efc:	e000      	b.n	8006f00 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006efe:	2302      	movs	r3, #2
  }
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b0ba      	sub	sp, #232	; 0xe8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10f      	bne.n	8006f6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <HAL_UART_IRQHandler+0x66>
 8006f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fde3 	bl	8007b32 <UART_Receive_IT>
      return;
 8006f6c:	e256      	b.n	800741c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 80de 	beq.w	8007134 <HAL_UART_IRQHandler+0x22c>
 8006f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d106      	bne.n	8006f92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 80d1 	beq.w	8007134 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00b      	beq.n	8006fb6 <HAL_UART_IRQHandler+0xae>
 8006f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f043 0201 	orr.w	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <HAL_UART_IRQHandler+0xd2>
 8006fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f043 0202 	orr.w	r2, r3, #2
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00b      	beq.n	8006ffe <HAL_UART_IRQHandler+0xf6>
 8006fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	f043 0204 	orr.w	r2, r3, #4
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d011      	beq.n	800702e <HAL_UART_IRQHandler+0x126>
 800700a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d105      	bne.n	8007022 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	f043 0208 	orr.w	r2, r3, #8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 81ed 	beq.w	8007412 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703c:	f003 0320 	and.w	r3, r3, #32
 8007040:	2b00      	cmp	r3, #0
 8007042:	d008      	beq.n	8007056 <HAL_UART_IRQHandler+0x14e>
 8007044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fd6e 	bl	8007b32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	2b40      	cmp	r3, #64	; 0x40
 8007062:	bf0c      	ite	eq
 8007064:	2301      	moveq	r3, #1
 8007066:	2300      	movne	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d103      	bne.n	8007082 <HAL_UART_IRQHandler+0x17a>
 800707a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800707e:	2b00      	cmp	r3, #0
 8007080:	d04f      	beq.n	8007122 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fc76 	bl	8007974 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007092:	2b40      	cmp	r3, #64	; 0x40
 8007094:	d141      	bne.n	800711a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3314      	adds	r3, #20
 800709c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80070ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3314      	adds	r3, #20
 80070be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1d9      	bne.n	8007096 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d013      	beq.n	8007112 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	4a7d      	ldr	r2, [pc, #500]	; (80072e4 <HAL_UART_IRQHandler+0x3dc>)
 80070f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fc fdf8 	bl	8003cec <HAL_DMA_Abort_IT>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d016      	beq.n	8007130 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007110:	e00e      	b.n	8007130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fb ffb4 	bl	8003080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007118:	e00a      	b.n	8007130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fb ffb0 	bl	8003080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007120:	e006      	b.n	8007130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fb ffac 	bl	8003080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800712e:	e170      	b.n	8007412 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007130:	bf00      	nop
    return;
 8007132:	e16e      	b.n	8007412 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007138:	2b01      	cmp	r3, #1
 800713a:	f040 814a 	bne.w	80073d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007142:	f003 0310 	and.w	r3, r3, #16
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 8143 	beq.w	80073d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800714c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 813c 	beq.w	80073d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	60bb      	str	r3, [r7, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	60bb      	str	r3, [r7, #8]
 800716e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	f040 80b4 	bne.w	80072e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800718c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8140 	beq.w	8007416 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800719a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800719e:	429a      	cmp	r2, r3
 80071a0:	f080 8139 	bcs.w	8007416 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b6:	f000 8088 	beq.w	80072ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	330c      	adds	r3, #12
 80071c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	330c      	adds	r3, #12
 80071e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80071e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1d9      	bne.n	80071ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3314      	adds	r3, #20
 800720c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3314      	adds	r3, #20
 8007226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800722a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800722e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800723c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e1      	bne.n	8007206 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3314      	adds	r3, #20
 8007248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3314      	adds	r3, #20
 8007262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800726c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e3      	bne.n	8007242 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	330c      	adds	r3, #12
 800728e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800729a:	f023 0310 	bic.w	r3, r3, #16
 800729e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	330c      	adds	r3, #12
 80072a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80072ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80072ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e3      	bne.n	8007288 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fc fca1 	bl	8003c0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f8b6 	bl	800744c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072e0:	e099      	b.n	8007416 <HAL_UART_IRQHandler+0x50e>
 80072e2:	bf00      	nop
 80072e4:	08007a3b 	.word	0x08007a3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 808b 	beq.w	800741a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 8086 	beq.w	800741a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	330c      	adds	r3, #12
 800732e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007332:	647a      	str	r2, [r7, #68]	; 0x44
 8007334:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e3      	bne.n	800730e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3314      	adds	r3, #20
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	623b      	str	r3, [r7, #32]
   return(result);
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3314      	adds	r3, #20
 8007366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800736a:	633a      	str	r2, [r7, #48]	; 0x30
 800736c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e3      	bne.n	8007346 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	330c      	adds	r3, #12
 8007392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	60fb      	str	r3, [r7, #12]
   return(result);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0310 	bic.w	r3, r3, #16
 80073a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	330c      	adds	r3, #12
 80073ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80073b0:	61fa      	str	r2, [r7, #28]
 80073b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	69b9      	ldr	r1, [r7, #24]
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	617b      	str	r3, [r7, #20]
   return(result);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e3      	bne.n	800738c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f83e 	bl	800744c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073d0:	e023      	b.n	800741a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d009      	beq.n	80073f2 <HAL_UART_IRQHandler+0x4ea>
 80073de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fb39 	bl	8007a62 <UART_Transmit_IT>
    return;
 80073f0:	e014      	b.n	800741c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00e      	beq.n	800741c <HAL_UART_IRQHandler+0x514>
 80073fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d008      	beq.n	800741c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fb79 	bl	8007b02 <UART_EndTransmit_IT>
    return;
 8007410:	e004      	b.n	800741c <HAL_UART_IRQHandler+0x514>
    return;
 8007412:	bf00      	nop
 8007414:	e002      	b.n	800741c <HAL_UART_IRQHandler+0x514>
      return;
 8007416:	bf00      	nop
 8007418:	e000      	b.n	800741c <HAL_UART_IRQHandler+0x514>
      return;
 800741a:	bf00      	nop
  }
}
 800741c:	37e8      	adds	r7, #232	; 0xe8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop

08007424 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b090      	sub	sp, #64	; 0x40
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747c:	2b00      	cmp	r3, #0
 800747e:	d137      	bne.n	80074f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	2200      	movs	r2, #0
 8007484:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3314      	adds	r3, #20
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	623b      	str	r3, [r7, #32]
   return(result);
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800749c:	63bb      	str	r3, [r7, #56]	; 0x38
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3314      	adds	r3, #20
 80074a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074a6:	633a      	str	r2, [r7, #48]	; 0x30
 80074a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e5      	bne.n	8007486 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	330c      	adds	r3, #12
 80074c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
 80074d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074da:	61fa      	str	r2, [r7, #28]
 80074dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	69b9      	ldr	r1, [r7, #24]
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	617b      	str	r3, [r7, #20]
   return(result);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e5      	bne.n	80074ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074ee:	e002      	b.n	80074f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80074f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80074f2:	f7fb fdd9 	bl	80030a8 <HAL_UART_TxCpltCallback>
}
 80074f6:	bf00      	nop
 80074f8:	3740      	adds	r7, #64	; 0x40
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff ff89 	bl	8007424 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b09c      	sub	sp, #112	; 0x70
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007532:	2b00      	cmp	r3, #0
 8007534:	d172      	bne.n	800761c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007538:	2200      	movs	r2, #0
 800753a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800753c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800754c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007552:	66bb      	str	r3, [r7, #104]	; 0x68
 8007554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800755c:	65ba      	str	r2, [r7, #88]	; 0x58
 800755e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800756a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e5      	bne.n	800753c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3314      	adds	r3, #20
 8007576:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	667b      	str	r3, [r7, #100]	; 0x64
 8007588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3314      	adds	r3, #20
 800758e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007590:	647a      	str	r2, [r7, #68]	; 0x44
 8007592:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800759e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e5      	bne.n	8007570 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3314      	adds	r3, #20
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	623b      	str	r3, [r7, #32]
   return(result);
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ba:	663b      	str	r3, [r7, #96]	; 0x60
 80075bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3314      	adds	r3, #20
 80075c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075c4:	633a      	str	r2, [r7, #48]	; 0x30
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e5      	bne.n	80075a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d119      	bne.n	800761c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	330c      	adds	r3, #12
 80075ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0310 	bic.w	r3, r3, #16
 80075fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	330c      	adds	r3, #12
 8007606:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007608:	61fa      	str	r2, [r7, #28]
 800760a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	69b9      	ldr	r1, [r7, #24]
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	617b      	str	r3, [r7, #20]
   return(result);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e5      	bne.n	80075e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	2b01      	cmp	r3, #1
 8007622:	d106      	bne.n	8007632 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007628:	4619      	mov	r1, r3
 800762a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800762c:	f7ff ff0e 	bl	800744c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007630:	e002      	b.n	8007638 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007632:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007634:	f7fb fd72 	bl	800311c <HAL_UART_RxCpltCallback>
}
 8007638:	bf00      	nop
 800763a:	3770      	adds	r7, #112	; 0x70
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	2b01      	cmp	r3, #1
 8007654:	d108      	bne.n	8007668 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800765a:	085b      	lsrs	r3, r3, #1
 800765c:	b29b      	uxth	r3, r3
 800765e:	4619      	mov	r1, r3
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7ff fef3 	bl	800744c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007666:	e002      	b.n	800766e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f7ff fee5 	bl	8007438 <HAL_UART_RxHalfCpltCallback>
}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	bf0c      	ite	eq
 8007696:	2301      	moveq	r3, #1
 8007698:	2300      	movne	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b21      	cmp	r3, #33	; 0x21
 80076a8:	d108      	bne.n	80076bc <UART_DMAError+0x46>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2200      	movs	r2, #0
 80076b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076b6:	68b8      	ldr	r0, [r7, #8]
 80076b8:	f000 f934 	bl	8007924 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	bf0c      	ite	eq
 80076ca:	2301      	moveq	r3, #1
 80076cc:	2300      	movne	r3, #0
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b22      	cmp	r3, #34	; 0x22
 80076dc:	d108      	bne.n	80076f0 <UART_DMAError+0x7a>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076ea:	68b8      	ldr	r0, [r7, #8]
 80076ec:	f000 f942 	bl	8007974 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	f043 0210 	orr.w	r2, r3, #16
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076fc:	68b8      	ldr	r0, [r7, #8]
 80076fe:	f7fb fcbf 	bl	8003080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007702:	bf00      	nop
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b090      	sub	sp, #64	; 0x40
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	603b      	str	r3, [r7, #0]
 8007716:	4613      	mov	r3, r2
 8007718:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800771a:	e050      	b.n	80077be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d04c      	beq.n	80077be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <UART_WaitOnFlagUntilTimeout+0x30>
 800772a:	f7fb fda1 	bl	8003270 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007736:	429a      	cmp	r2, r3
 8007738:	d241      	bcs.n	80077be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	330c      	adds	r3, #12
 8007740:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800775a:	637a      	str	r2, [r7, #52]	; 0x34
 800775c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e5      	bne.n	800773a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3314      	adds	r3, #20
 8007774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	613b      	str	r3, [r7, #16]
   return(result);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	63bb      	str	r3, [r7, #56]	; 0x38
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3314      	adds	r3, #20
 800778c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800778e:	623a      	str	r2, [r7, #32]
 8007790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	69f9      	ldr	r1, [r7, #28]
 8007794:	6a3a      	ldr	r2, [r7, #32]
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	61bb      	str	r3, [r7, #24]
   return(result);
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e5      	bne.n	800776e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e00f      	b.n	80077de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	4013      	ands	r3, r2
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	bf0c      	ite	eq
 80077ce:	2301      	moveq	r3, #1
 80077d0:	2300      	movne	r3, #0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d09f      	beq.n	800771c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3740      	adds	r7, #64	; 0x40
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b098      	sub	sp, #96	; 0x60
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	88fa      	ldrh	r2, [r7, #6]
 8007800:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2222      	movs	r2, #34	; 0x22
 800780c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	4a40      	ldr	r2, [pc, #256]	; (8007918 <UART_Start_Receive_DMA+0x130>)
 8007816:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	4a3f      	ldr	r2, [pc, #252]	; (800791c <UART_Start_Receive_DMA+0x134>)
 800781e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	4a3e      	ldr	r2, [pc, #248]	; (8007920 <UART_Start_Receive_DMA+0x138>)
 8007826:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	2200      	movs	r2, #0
 800782e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007830:	f107 0308 	add.w	r3, r7, #8
 8007834:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3304      	adds	r3, #4
 8007840:	4619      	mov	r1, r3
 8007842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	88fb      	ldrh	r3, [r7, #6]
 8007848:	f7fc f988 	bl	8003b5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800784c:	2300      	movs	r3, #0
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d019      	beq.n	80078a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	330c      	adds	r3, #12
 8007878:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007888:	65bb      	str	r3, [r7, #88]	; 0x58
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007892:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007894:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e5      	bne.n	8007872 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3314      	adds	r3, #20
 80078ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	f043 0301 	orr.w	r3, r3, #1
 80078bc:	657b      	str	r3, [r7, #84]	; 0x54
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3314      	adds	r3, #20
 80078c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e5      	bne.n	80078a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3314      	adds	r3, #20
 80078e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	617b      	str	r3, [r7, #20]
   return(result);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f0:	653b      	str	r3, [r7, #80]	; 0x50
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3314      	adds	r3, #20
 80078f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078fa:	627a      	str	r2, [r7, #36]	; 0x24
 80078fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	6a39      	ldr	r1, [r7, #32]
 8007900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	61fb      	str	r3, [r7, #28]
   return(result);
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e5      	bne.n	80078da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3760      	adds	r7, #96	; 0x60
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	0800751b 	.word	0x0800751b
 800791c:	08007641 	.word	0x08007641
 8007920:	08007677 	.word	0x08007677

08007924 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007924:	b480      	push	{r7}
 8007926:	b089      	sub	sp, #36	; 0x24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	330c      	adds	r3, #12
 8007932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	60bb      	str	r3, [r7, #8]
   return(result);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	330c      	adds	r3, #12
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	61ba      	str	r2, [r7, #24]
 800794e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	6979      	ldr	r1, [r7, #20]
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	613b      	str	r3, [r7, #16]
   return(result);
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e5      	bne.n	800792c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007968:	bf00      	nop
 800796a:	3724      	adds	r7, #36	; 0x24
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007974:	b480      	push	{r7}
 8007976:	b095      	sub	sp, #84	; 0x54
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	330c      	adds	r3, #12
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330c      	adds	r3, #12
 800799a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800799c:	643a      	str	r2, [r7, #64]	; 0x40
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e5      	bne.n	800797c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3314      	adds	r3, #20
 80079b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f023 0301 	bic.w	r3, r3, #1
 80079c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3314      	adds	r3, #20
 80079ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e5      	bne.n	80079b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d119      	bne.n	8007a20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f023 0310 	bic.w	r3, r3, #16
 8007a02:	647b      	str	r3, [r7, #68]	; 0x44
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a0c:	61ba      	str	r2, [r7, #24]
 8007a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	6979      	ldr	r1, [r7, #20]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	613b      	str	r3, [r7, #16]
   return(result);
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e5      	bne.n	80079ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a2e:	bf00      	nop
 8007a30:	3754      	adds	r7, #84	; 0x54
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f7fb fb13 	bl	8003080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b21      	cmp	r3, #33	; 0x21
 8007a74:	d13e      	bne.n	8007af4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7e:	d114      	bne.n	8007aaa <UART_Transmit_IT+0x48>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d110      	bne.n	8007aaa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	1c9a      	adds	r2, r3, #2
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	621a      	str	r2, [r3, #32]
 8007aa8:	e008      	b.n	8007abc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	1c59      	adds	r1, r3, #1
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6211      	str	r1, [r2, #32]
 8007ab4:	781a      	ldrb	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10f      	bne.n	8007af0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ade:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	e000      	b.n	8007af6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007af4:	2302      	movs	r3, #2
  }
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7fb fac0 	bl	80030a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b08c      	sub	sp, #48	; 0x30
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b22      	cmp	r3, #34	; 0x22
 8007b44:	f040 80ab 	bne.w	8007c9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b50:	d117      	bne.n	8007b82 <UART_Receive_IT+0x50>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d113      	bne.n	8007b82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7a:	1c9a      	adds	r2, r3, #2
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8007b80:	e026      	b.n	8007bd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b94:	d007      	beq.n	8007ba6 <UART_Receive_IT+0x74>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10a      	bne.n	8007bb4 <UART_Receive_IT+0x82>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb0:	701a      	strb	r2, [r3, #0]
 8007bb2:	e008      	b.n	8007bc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d15a      	bne.n	8007c9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0220 	bic.w	r2, r2, #32
 8007bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695a      	ldr	r2, [r3, #20]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0201 	bic.w	r2, r2, #1
 8007c12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d135      	bne.n	8007c90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	330c      	adds	r3, #12
 8007c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f023 0310 	bic.w	r3, r3, #16
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	330c      	adds	r3, #12
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	623a      	str	r2, [r7, #32]
 8007c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4e:	69f9      	ldr	r1, [r7, #28]
 8007c50:	6a3a      	ldr	r2, [r7, #32]
 8007c52:	e841 2300 	strex	r3, r2, [r1]
 8007c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1e5      	bne.n	8007c2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0310 	and.w	r3, r3, #16
 8007c68:	2b10      	cmp	r3, #16
 8007c6a:	d10a      	bne.n	8007c82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff fbdf 	bl	800744c <HAL_UARTEx_RxEventCallback>
 8007c8e:	e002      	b.n	8007c96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7fb fa43 	bl	800311c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e002      	b.n	8007ca0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e000      	b.n	8007ca0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c9e:	2302      	movs	r3, #2
  }
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3730      	adds	r7, #48	; 0x30
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cac:	b0c0      	sub	sp, #256	; 0x100
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc4:	68d9      	ldr	r1, [r3, #12]
 8007cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	ea40 0301 	orr.w	r3, r0, r1
 8007cd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d00:	f021 010c 	bic.w	r1, r1, #12
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d22:	6999      	ldr	r1, [r3, #24]
 8007d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	ea40 0301 	orr.w	r3, r0, r1
 8007d2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	4b8f      	ldr	r3, [pc, #572]	; (8007f74 <UART_SetConfig+0x2cc>)
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d005      	beq.n	8007d48 <UART_SetConfig+0xa0>
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	4b8d      	ldr	r3, [pc, #564]	; (8007f78 <UART_SetConfig+0x2d0>)
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d104      	bne.n	8007d52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d48:	f7fe f856 	bl	8005df8 <HAL_RCC_GetPCLK2Freq>
 8007d4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d50:	e003      	b.n	8007d5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d52:	f7fe f83d 	bl	8005dd0 <HAL_RCC_GetPCLK1Freq>
 8007d56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d64:	f040 810c 	bne.w	8007f80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	1891      	adds	r1, r2, r2
 8007d80:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d82:	415b      	adcs	r3, r3
 8007d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	eb12 0801 	adds.w	r8, r2, r1
 8007d90:	4629      	mov	r1, r5
 8007d92:	eb43 0901 	adc.w	r9, r3, r1
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007daa:	4690      	mov	r8, r2
 8007dac:	4699      	mov	r9, r3
 8007dae:	4623      	mov	r3, r4
 8007db0:	eb18 0303 	adds.w	r3, r8, r3
 8007db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007db8:	462b      	mov	r3, r5
 8007dba:	eb49 0303 	adc.w	r3, r9, r3
 8007dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	18db      	adds	r3, r3, r3
 8007dda:	653b      	str	r3, [r7, #80]	; 0x50
 8007ddc:	4613      	mov	r3, r2
 8007dde:	eb42 0303 	adc.w	r3, r2, r3
 8007de2:	657b      	str	r3, [r7, #84]	; 0x54
 8007de4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007de8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007dec:	f7f8 ff04 	bl	8000bf8 <__aeabi_uldivmod>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4b61      	ldr	r3, [pc, #388]	; (8007f7c <UART_SetConfig+0x2d4>)
 8007df6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	011c      	lsls	r4, r3, #4
 8007dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e10:	4642      	mov	r2, r8
 8007e12:	464b      	mov	r3, r9
 8007e14:	1891      	adds	r1, r2, r2
 8007e16:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e18:	415b      	adcs	r3, r3
 8007e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e20:	4641      	mov	r1, r8
 8007e22:	eb12 0a01 	adds.w	sl, r2, r1
 8007e26:	4649      	mov	r1, r9
 8007e28:	eb43 0b01 	adc.w	fp, r3, r1
 8007e2c:	f04f 0200 	mov.w	r2, #0
 8007e30:	f04f 0300 	mov.w	r3, #0
 8007e34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e40:	4692      	mov	sl, r2
 8007e42:	469b      	mov	fp, r3
 8007e44:	4643      	mov	r3, r8
 8007e46:	eb1a 0303 	adds.w	r3, sl, r3
 8007e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e4e:	464b      	mov	r3, r9
 8007e50:	eb4b 0303 	adc.w	r3, fp, r3
 8007e54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	18db      	adds	r3, r3, r3
 8007e70:	643b      	str	r3, [r7, #64]	; 0x40
 8007e72:	4613      	mov	r3, r2
 8007e74:	eb42 0303 	adc.w	r3, r2, r3
 8007e78:	647b      	str	r3, [r7, #68]	; 0x44
 8007e7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e82:	f7f8 feb9 	bl	8000bf8 <__aeabi_uldivmod>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	4b3b      	ldr	r3, [pc, #236]	; (8007f7c <UART_SetConfig+0x2d4>)
 8007e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e92:	095b      	lsrs	r3, r3, #5
 8007e94:	2264      	movs	r2, #100	; 0x64
 8007e96:	fb02 f303 	mul.w	r3, r2, r3
 8007e9a:	1acb      	subs	r3, r1, r3
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ea2:	4b36      	ldr	r3, [pc, #216]	; (8007f7c <UART_SetConfig+0x2d4>)
 8007ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8007ea8:	095b      	lsrs	r3, r3, #5
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007eb0:	441c      	add	r4, r3
 8007eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ebc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ec0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	1891      	adds	r1, r2, r2
 8007eca:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ecc:	415b      	adcs	r3, r3
 8007ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ed4:	4641      	mov	r1, r8
 8007ed6:	1851      	adds	r1, r2, r1
 8007ed8:	6339      	str	r1, [r7, #48]	; 0x30
 8007eda:	4649      	mov	r1, r9
 8007edc:	414b      	adcs	r3, r1
 8007ede:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	f04f 0300 	mov.w	r3, #0
 8007ee8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007eec:	4659      	mov	r1, fp
 8007eee:	00cb      	lsls	r3, r1, #3
 8007ef0:	4651      	mov	r1, sl
 8007ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ef6:	4651      	mov	r1, sl
 8007ef8:	00ca      	lsls	r2, r1, #3
 8007efa:	4610      	mov	r0, r2
 8007efc:	4619      	mov	r1, r3
 8007efe:	4603      	mov	r3, r0
 8007f00:	4642      	mov	r2, r8
 8007f02:	189b      	adds	r3, r3, r2
 8007f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f08:	464b      	mov	r3, r9
 8007f0a:	460a      	mov	r2, r1
 8007f0c:	eb42 0303 	adc.w	r3, r2, r3
 8007f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f28:	460b      	mov	r3, r1
 8007f2a:	18db      	adds	r3, r3, r3
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f2e:	4613      	mov	r3, r2
 8007f30:	eb42 0303 	adc.w	r3, r2, r3
 8007f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f3e:	f7f8 fe5b 	bl	8000bf8 <__aeabi_uldivmod>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <UART_SetConfig+0x2d4>)
 8007f48:	fba3 1302 	umull	r1, r3, r3, r2
 8007f4c:	095b      	lsrs	r3, r3, #5
 8007f4e:	2164      	movs	r1, #100	; 0x64
 8007f50:	fb01 f303 	mul.w	r3, r1, r3
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	3332      	adds	r3, #50	; 0x32
 8007f5a:	4a08      	ldr	r2, [pc, #32]	; (8007f7c <UART_SetConfig+0x2d4>)
 8007f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f60:	095b      	lsrs	r3, r3, #5
 8007f62:	f003 0207 	and.w	r2, r3, #7
 8007f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4422      	add	r2, r4
 8007f6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f70:	e105      	b.n	800817e <UART_SetConfig+0x4d6>
 8007f72:	bf00      	nop
 8007f74:	40011000 	.word	0x40011000
 8007f78:	40011400 	.word	0x40011400
 8007f7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f84:	2200      	movs	r2, #0
 8007f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f92:	4642      	mov	r2, r8
 8007f94:	464b      	mov	r3, r9
 8007f96:	1891      	adds	r1, r2, r2
 8007f98:	6239      	str	r1, [r7, #32]
 8007f9a:	415b      	adcs	r3, r3
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	1854      	adds	r4, r2, r1
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	eb43 0501 	adc.w	r5, r3, r1
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	f04f 0300 	mov.w	r3, #0
 8007fb4:	00eb      	lsls	r3, r5, #3
 8007fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fba:	00e2      	lsls	r2, r4, #3
 8007fbc:	4614      	mov	r4, r2
 8007fbe:	461d      	mov	r5, r3
 8007fc0:	4643      	mov	r3, r8
 8007fc2:	18e3      	adds	r3, r4, r3
 8007fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fc8:	464b      	mov	r3, r9
 8007fca:	eb45 0303 	adc.w	r3, r5, r3
 8007fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fe2:	f04f 0200 	mov.w	r2, #0
 8007fe6:	f04f 0300 	mov.w	r3, #0
 8007fea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007fee:	4629      	mov	r1, r5
 8007ff0:	008b      	lsls	r3, r1, #2
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	008a      	lsls	r2, r1, #2
 8007ffc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008000:	f7f8 fdfa 	bl	8000bf8 <__aeabi_uldivmod>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4b60      	ldr	r3, [pc, #384]	; (800818c <UART_SetConfig+0x4e4>)
 800800a:	fba3 2302 	umull	r2, r3, r3, r2
 800800e:	095b      	lsrs	r3, r3, #5
 8008010:	011c      	lsls	r4, r3, #4
 8008012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008016:	2200      	movs	r2, #0
 8008018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800801c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008020:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008024:	4642      	mov	r2, r8
 8008026:	464b      	mov	r3, r9
 8008028:	1891      	adds	r1, r2, r2
 800802a:	61b9      	str	r1, [r7, #24]
 800802c:	415b      	adcs	r3, r3
 800802e:	61fb      	str	r3, [r7, #28]
 8008030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008034:	4641      	mov	r1, r8
 8008036:	1851      	adds	r1, r2, r1
 8008038:	6139      	str	r1, [r7, #16]
 800803a:	4649      	mov	r1, r9
 800803c:	414b      	adcs	r3, r1
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	f04f 0300 	mov.w	r3, #0
 8008048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800804c:	4659      	mov	r1, fp
 800804e:	00cb      	lsls	r3, r1, #3
 8008050:	4651      	mov	r1, sl
 8008052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008056:	4651      	mov	r1, sl
 8008058:	00ca      	lsls	r2, r1, #3
 800805a:	4610      	mov	r0, r2
 800805c:	4619      	mov	r1, r3
 800805e:	4603      	mov	r3, r0
 8008060:	4642      	mov	r2, r8
 8008062:	189b      	adds	r3, r3, r2
 8008064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008068:	464b      	mov	r3, r9
 800806a:	460a      	mov	r2, r1
 800806c:	eb42 0303 	adc.w	r3, r2, r3
 8008070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	67bb      	str	r3, [r7, #120]	; 0x78
 800807e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800808c:	4649      	mov	r1, r9
 800808e:	008b      	lsls	r3, r1, #2
 8008090:	4641      	mov	r1, r8
 8008092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008096:	4641      	mov	r1, r8
 8008098:	008a      	lsls	r2, r1, #2
 800809a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800809e:	f7f8 fdab 	bl	8000bf8 <__aeabi_uldivmod>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4b39      	ldr	r3, [pc, #228]	; (800818c <UART_SetConfig+0x4e4>)
 80080a8:	fba3 1302 	umull	r1, r3, r3, r2
 80080ac:	095b      	lsrs	r3, r3, #5
 80080ae:	2164      	movs	r1, #100	; 0x64
 80080b0:	fb01 f303 	mul.w	r3, r1, r3
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	3332      	adds	r3, #50	; 0x32
 80080ba:	4a34      	ldr	r2, [pc, #208]	; (800818c <UART_SetConfig+0x4e4>)
 80080bc:	fba2 2303 	umull	r2, r3, r2, r3
 80080c0:	095b      	lsrs	r3, r3, #5
 80080c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080c6:	441c      	add	r4, r3
 80080c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080cc:	2200      	movs	r2, #0
 80080ce:	673b      	str	r3, [r7, #112]	; 0x70
 80080d0:	677a      	str	r2, [r7, #116]	; 0x74
 80080d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80080d6:	4642      	mov	r2, r8
 80080d8:	464b      	mov	r3, r9
 80080da:	1891      	adds	r1, r2, r2
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	415b      	adcs	r3, r3
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080e6:	4641      	mov	r1, r8
 80080e8:	1851      	adds	r1, r2, r1
 80080ea:	6039      	str	r1, [r7, #0]
 80080ec:	4649      	mov	r1, r9
 80080ee:	414b      	adcs	r3, r1
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080fe:	4659      	mov	r1, fp
 8008100:	00cb      	lsls	r3, r1, #3
 8008102:	4651      	mov	r1, sl
 8008104:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008108:	4651      	mov	r1, sl
 800810a:	00ca      	lsls	r2, r1, #3
 800810c:	4610      	mov	r0, r2
 800810e:	4619      	mov	r1, r3
 8008110:	4603      	mov	r3, r0
 8008112:	4642      	mov	r2, r8
 8008114:	189b      	adds	r3, r3, r2
 8008116:	66bb      	str	r3, [r7, #104]	; 0x68
 8008118:	464b      	mov	r3, r9
 800811a:	460a      	mov	r2, r1
 800811c:	eb42 0303 	adc.w	r3, r2, r3
 8008120:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	663b      	str	r3, [r7, #96]	; 0x60
 800812c:	667a      	str	r2, [r7, #100]	; 0x64
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800813a:	4649      	mov	r1, r9
 800813c:	008b      	lsls	r3, r1, #2
 800813e:	4641      	mov	r1, r8
 8008140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008144:	4641      	mov	r1, r8
 8008146:	008a      	lsls	r2, r1, #2
 8008148:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800814c:	f7f8 fd54 	bl	8000bf8 <__aeabi_uldivmod>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4b0d      	ldr	r3, [pc, #52]	; (800818c <UART_SetConfig+0x4e4>)
 8008156:	fba3 1302 	umull	r1, r3, r3, r2
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	2164      	movs	r1, #100	; 0x64
 800815e:	fb01 f303 	mul.w	r3, r1, r3
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	3332      	adds	r3, #50	; 0x32
 8008168:	4a08      	ldr	r2, [pc, #32]	; (800818c <UART_SetConfig+0x4e4>)
 800816a:	fba2 2303 	umull	r2, r3, r2, r3
 800816e:	095b      	lsrs	r3, r3, #5
 8008170:	f003 020f 	and.w	r2, r3, #15
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4422      	add	r2, r4
 800817c:	609a      	str	r2, [r3, #8]
}
 800817e:	bf00      	nop
 8008180:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008184:	46bd      	mov	sp, r7
 8008186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800818a:	bf00      	nop
 800818c:	51eb851f 	.word	0x51eb851f

08008190 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008194:	4904      	ldr	r1, [pc, #16]	; (80081a8 <MX_FATFS_Init+0x18>)
 8008196:	4805      	ldr	r0, [pc, #20]	; (80081ac <MX_FATFS_Init+0x1c>)
 8008198:	f002 ff98 	bl	800b0cc <FATFS_LinkDriver>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <MX_FATFS_Init+0x20>)
 80081a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081a4:	bf00      	nop
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20002824 	.word	0x20002824
 80081ac:	20000014 	.word	0x20000014
 80081b0:	20002820 	.word	0x20002820

080081b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80081b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	4603      	mov	r3, r0
 80081cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80081ce:	79fb      	ldrb	r3, [r7, #7]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7f9 f881 	bl	80012d8 <SD_disk_initialize>
 80081d6:	4603      	mov	r3, r0
 80081d8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	4603      	mov	r3, r0
 80081ea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7f9 f958 	bl	80014a4 <SD_disk_status>
 80081f4:	4603      	mov	r3, r0
 80081f6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	607a      	str	r2, [r7, #4]
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8008210:	7bf8      	ldrb	r0, [r7, #15]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	68b9      	ldr	r1, [r7, #8]
 8008218:	f7f9 f95a 	bl	80014d0 <SD_disk_read>
 800821c:	4603      	mov	r3, r0
 800821e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8008238:	7bf8      	ldrb	r0, [r7, #15]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	f7f9 f9b0 	bl	80015a4 <SD_disk_write>
 8008244:	4603      	mov	r3, r0
 8008246:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	603a      	str	r2, [r7, #0]
 800825a:	71fb      	strb	r3, [r7, #7]
 800825c:	460b      	mov	r3, r1
 800825e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	79b9      	ldrb	r1, [r7, #6]
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f7f9 fa20 	bl	80016ac <SD_disk_ioctl>
 800826c:	4603      	mov	r3, r0
 800826e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	4a08      	ldr	r2, [pc, #32]	; (80082a8 <disk_status+0x30>)
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	79fa      	ldrb	r2, [r7, #7]
 8008290:	4905      	ldr	r1, [pc, #20]	; (80082a8 <disk_status+0x30>)
 8008292:	440a      	add	r2, r1
 8008294:	7a12      	ldrb	r2, [r2, #8]
 8008296:	4610      	mov	r0, r2
 8008298:	4798      	blx	r3
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20002a50 	.word	0x20002a50

080082ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	4a0d      	ldr	r2, [pc, #52]	; (80082f4 <disk_initialize+0x48>)
 80082be:	5cd3      	ldrb	r3, [r2, r3]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d111      	bne.n	80082e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	4a0b      	ldr	r2, [pc, #44]	; (80082f4 <disk_initialize+0x48>)
 80082c8:	2101      	movs	r1, #1
 80082ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	4a09      	ldr	r2, [pc, #36]	; (80082f4 <disk_initialize+0x48>)
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	79fa      	ldrb	r2, [r7, #7]
 80082da:	4906      	ldr	r1, [pc, #24]	; (80082f4 <disk_initialize+0x48>)
 80082dc:	440a      	add	r2, r1
 80082de:	7a12      	ldrb	r2, [r2, #8]
 80082e0:	4610      	mov	r0, r2
 80082e2:	4798      	blx	r3
 80082e4:	4603      	mov	r3, r0
 80082e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20002a50 	.word	0x20002a50

080082f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80082f8:	b590      	push	{r4, r7, lr}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	607a      	str	r2, [r7, #4]
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	4a0a      	ldr	r2, [pc, #40]	; (8008334 <disk_read+0x3c>)
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	689c      	ldr	r4, [r3, #8]
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	4a07      	ldr	r2, [pc, #28]	; (8008334 <disk_read+0x3c>)
 8008318:	4413      	add	r3, r2
 800831a:	7a18      	ldrb	r0, [r3, #8]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	68b9      	ldr	r1, [r7, #8]
 8008322:	47a0      	blx	r4
 8008324:	4603      	mov	r3, r0
 8008326:	75fb      	strb	r3, [r7, #23]
  return res;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
}
 800832a:	4618      	mov	r0, r3
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	bd90      	pop	{r4, r7, pc}
 8008332:	bf00      	nop
 8008334:	20002a50 	.word	0x20002a50

08008338 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008338:	b590      	push	{r4, r7, lr}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	607a      	str	r2, [r7, #4]
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	4a0a      	ldr	r2, [pc, #40]	; (8008374 <disk_write+0x3c>)
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	68dc      	ldr	r4, [r3, #12]
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	4a07      	ldr	r2, [pc, #28]	; (8008374 <disk_write+0x3c>)
 8008358:	4413      	add	r3, r2
 800835a:	7a18      	ldrb	r0, [r3, #8]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	47a0      	blx	r4
 8008364:	4603      	mov	r3, r0
 8008366:	75fb      	strb	r3, [r7, #23]
  return res;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
}
 800836a:	4618      	mov	r0, r3
 800836c:	371c      	adds	r7, #28
 800836e:	46bd      	mov	sp, r7
 8008370:	bd90      	pop	{r4, r7, pc}
 8008372:	bf00      	nop
 8008374:	20002a50 	.word	0x20002a50

08008378 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	603a      	str	r2, [r7, #0]
 8008382:	71fb      	strb	r3, [r7, #7]
 8008384:	460b      	mov	r3, r1
 8008386:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	4a09      	ldr	r2, [pc, #36]	; (80083b0 <disk_ioctl+0x38>)
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	79fa      	ldrb	r2, [r7, #7]
 8008396:	4906      	ldr	r1, [pc, #24]	; (80083b0 <disk_ioctl+0x38>)
 8008398:	440a      	add	r2, r1
 800839a:	7a10      	ldrb	r0, [r2, #8]
 800839c:	79b9      	ldrb	r1, [r7, #6]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4798      	blx	r3
 80083a2:	4603      	mov	r3, r0
 80083a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20002a50 	.word	0x20002a50

080083b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3301      	adds	r3, #1
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80083c4:	89fb      	ldrh	r3, [r7, #14]
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	b21a      	sxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	b21b      	sxth	r3, r3
 80083d0:	4313      	orrs	r3, r2
 80083d2:	b21b      	sxth	r3, r3
 80083d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80083d6:	89fb      	ldrh	r3, [r7, #14]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3303      	adds	r3, #3
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	021b      	lsls	r3, r3, #8
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	3202      	adds	r2, #2
 80083fc:	7812      	ldrb	r2, [r2, #0]
 80083fe:	4313      	orrs	r3, r2
 8008400:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	3201      	adds	r2, #1
 800840a:	7812      	ldrb	r2, [r2, #0]
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	7812      	ldrb	r2, [r2, #0]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
	return rv;
 800841c:	68fb      	ldr	r3, [r7, #12]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	887a      	ldrh	r2, [r7, #2]
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	701a      	strb	r2, [r3, #0]
 8008442:	887b      	ldrh	r3, [r7, #2]
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	607a      	str	r2, [r7, #4]
 800844e:	887a      	ldrh	r2, [r7, #2]
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	0a1b      	lsrs	r3, r3, #8
 800847a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	607a      	str	r2, [r7, #4]
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	b2d2      	uxtb	r2, r2
 8008486:	701a      	strb	r2, [r3, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	0a1b      	lsrs	r3, r3, #8
 800848c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	0a1b      	lsrs	r3, r3, #8
 800849e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	607a      	str	r2, [r7, #4]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	b2d2      	uxtb	r2, r2
 80084aa:	701a      	strb	r2, [r3, #0]
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00d      	beq.n	80084ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	1c53      	adds	r3, r2, #1
 80084d6:	613b      	str	r3, [r7, #16]
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	1c59      	adds	r1, r3, #1
 80084dc:	6179      	str	r1, [r7, #20]
 80084de:	7812      	ldrb	r2, [r2, #0]
 80084e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1f1      	bne.n	80084d2 <mem_cpy+0x1a>
	}
}
 80084ee:	bf00      	nop
 80084f0:	371c      	adds	r7, #28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80084fa:	b480      	push	{r7}
 80084fc:	b087      	sub	sp, #28
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	617a      	str	r2, [r7, #20]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	b2d2      	uxtb	r2, r2
 8008514:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3b01      	subs	r3, #1
 800851a:	607b      	str	r3, [r7, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1f3      	bne.n	800850a <mem_set+0x10>
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008530:	b480      	push	{r7}
 8008532:	b089      	sub	sp, #36	; 0x24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	61fb      	str	r3, [r7, #28]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	61fa      	str	r2, [r7, #28]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	4619      	mov	r1, r3
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	61ba      	str	r2, [r7, #24]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	1acb      	subs	r3, r1, r3
 800855c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3b01      	subs	r3, #1
 8008562:	607b      	str	r3, [r7, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <mem_cmp+0x40>
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d0eb      	beq.n	8008548 <mem_cmp+0x18>

	return r;
 8008570:	697b      	ldr	r3, [r7, #20]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3724      	adds	r7, #36	; 0x24
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008588:	e002      	b.n	8008590 <chk_chr+0x12>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3301      	adds	r3, #1
 800858e:	607b      	str	r3, [r7, #4]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <chk_chr+0x26>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d1f2      	bne.n	800858a <chk_chr+0xc>
	return *str;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	781b      	ldrb	r3, [r3, #0]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80085be:	2300      	movs	r3, #0
 80085c0:	60bb      	str	r3, [r7, #8]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	e029      	b.n	800861c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80085c8:	4a27      	ldr	r2, [pc, #156]	; (8008668 <chk_lock+0xb4>)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	4413      	add	r3, r2
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d01d      	beq.n	8008612 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80085d6:	4a24      	ldr	r2, [pc, #144]	; (8008668 <chk_lock+0xb4>)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	4413      	add	r3, r2
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d116      	bne.n	8008616 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80085e8:	4a1f      	ldr	r2, [pc, #124]	; (8008668 <chk_lock+0xb4>)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	011b      	lsls	r3, r3, #4
 80085ee:	4413      	add	r3, r2
 80085f0:	3304      	adds	r3, #4
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d10c      	bne.n	8008616 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80085fc:	4a1a      	ldr	r2, [pc, #104]	; (8008668 <chk_lock+0xb4>)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	011b      	lsls	r3, r3, #4
 8008602:	4413      	add	r3, r2
 8008604:	3308      	adds	r3, #8
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800860c:	429a      	cmp	r2, r3
 800860e:	d102      	bne.n	8008616 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008610:	e007      	b.n	8008622 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008612:	2301      	movs	r3, #1
 8008614:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3301      	adds	r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d9d2      	bls.n	80085c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b02      	cmp	r3, #2
 8008626:	d109      	bne.n	800863c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d102      	bne.n	8008634 <chk_lock+0x80>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b02      	cmp	r3, #2
 8008632:	d101      	bne.n	8008638 <chk_lock+0x84>
 8008634:	2300      	movs	r3, #0
 8008636:	e010      	b.n	800865a <chk_lock+0xa6>
 8008638:	2312      	movs	r3, #18
 800863a:	e00e      	b.n	800865a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d108      	bne.n	8008654 <chk_lock+0xa0>
 8008642:	4a09      	ldr	r2, [pc, #36]	; (8008668 <chk_lock+0xb4>)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	011b      	lsls	r3, r3, #4
 8008648:	4413      	add	r3, r2
 800864a:	330c      	adds	r3, #12
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008652:	d101      	bne.n	8008658 <chk_lock+0xa4>
 8008654:	2310      	movs	r3, #16
 8008656:	e000      	b.n	800865a <chk_lock+0xa6>
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	20002830 	.word	0x20002830

0800866c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008672:	2300      	movs	r3, #0
 8008674:	607b      	str	r3, [r7, #4]
 8008676:	e002      	b.n	800867e <enq_lock+0x12>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3301      	adds	r3, #1
 800867c:	607b      	str	r3, [r7, #4]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d806      	bhi.n	8008692 <enq_lock+0x26>
 8008684:	4a09      	ldr	r2, [pc, #36]	; (80086ac <enq_lock+0x40>)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	4413      	add	r3, r2
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f2      	bne.n	8008678 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b02      	cmp	r3, #2
 8008696:	bf14      	ite	ne
 8008698:	2301      	movne	r3, #1
 800869a:	2300      	moveq	r3, #0
 800869c:	b2db      	uxtb	r3, r3
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	20002830 	.word	0x20002830

080086b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	e01f      	b.n	8008700 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80086c0:	4a41      	ldr	r2, [pc, #260]	; (80087c8 <inc_lock+0x118>)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	4413      	add	r3, r2
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d113      	bne.n	80086fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80086d2:	4a3d      	ldr	r2, [pc, #244]	; (80087c8 <inc_lock+0x118>)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	4413      	add	r3, r2
 80086da:	3304      	adds	r3, #4
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d109      	bne.n	80086fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80086e6:	4a38      	ldr	r2, [pc, #224]	; (80087c8 <inc_lock+0x118>)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	011b      	lsls	r3, r3, #4
 80086ec:	4413      	add	r3, r2
 80086ee:	3308      	adds	r3, #8
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d006      	beq.n	8008708 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3301      	adds	r3, #1
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d9dc      	bls.n	80086c0 <inc_lock+0x10>
 8008706:	e000      	b.n	800870a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008708:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d132      	bne.n	8008776 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e002      	b.n	800871c <inc_lock+0x6c>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d806      	bhi.n	8008730 <inc_lock+0x80>
 8008722:	4a29      	ldr	r2, [pc, #164]	; (80087c8 <inc_lock+0x118>)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	011b      	lsls	r3, r3, #4
 8008728:	4413      	add	r3, r2
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f2      	bne.n	8008716 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d101      	bne.n	800873a <inc_lock+0x8a>
 8008736:	2300      	movs	r3, #0
 8008738:	e040      	b.n	80087bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	4922      	ldr	r1, [pc, #136]	; (80087c8 <inc_lock+0x118>)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	440b      	add	r3, r1
 8008746:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	491e      	ldr	r1, [pc, #120]	; (80087c8 <inc_lock+0x118>)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	440b      	add	r3, r1
 8008754:	3304      	adds	r3, #4
 8008756:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	695a      	ldr	r2, [r3, #20]
 800875c:	491a      	ldr	r1, [pc, #104]	; (80087c8 <inc_lock+0x118>)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	440b      	add	r3, r1
 8008764:	3308      	adds	r3, #8
 8008766:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008768:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <inc_lock+0x118>)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	4413      	add	r3, r2
 8008770:	330c      	adds	r3, #12
 8008772:	2200      	movs	r2, #0
 8008774:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d009      	beq.n	8008790 <inc_lock+0xe0>
 800877c:	4a12      	ldr	r2, [pc, #72]	; (80087c8 <inc_lock+0x118>)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	011b      	lsls	r3, r3, #4
 8008782:	4413      	add	r3, r2
 8008784:	330c      	adds	r3, #12
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <inc_lock+0xe0>
 800878c:	2300      	movs	r3, #0
 800878e:	e015      	b.n	80087bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d108      	bne.n	80087a8 <inc_lock+0xf8>
 8008796:	4a0c      	ldr	r2, [pc, #48]	; (80087c8 <inc_lock+0x118>)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	011b      	lsls	r3, r3, #4
 800879c:	4413      	add	r3, r2
 800879e:	330c      	adds	r3, #12
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	3301      	adds	r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	e001      	b.n	80087ac <inc_lock+0xfc>
 80087a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087ac:	4906      	ldr	r1, [pc, #24]	; (80087c8 <inc_lock+0x118>)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	011b      	lsls	r3, r3, #4
 80087b2:	440b      	add	r3, r1
 80087b4:	330c      	adds	r3, #12
 80087b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3301      	adds	r3, #1
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	20002830 	.word	0x20002830

080087cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	607b      	str	r3, [r7, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d825      	bhi.n	800882c <dec_lock+0x60>
		n = Files[i].ctr;
 80087e0:	4a17      	ldr	r2, [pc, #92]	; (8008840 <dec_lock+0x74>)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	011b      	lsls	r3, r3, #4
 80087e6:	4413      	add	r3, r2
 80087e8:	330c      	adds	r3, #12
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80087ee:	89fb      	ldrh	r3, [r7, #14]
 80087f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f4:	d101      	bne.n	80087fa <dec_lock+0x2e>
 80087f6:	2300      	movs	r3, #0
 80087f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80087fa:	89fb      	ldrh	r3, [r7, #14]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <dec_lock+0x3a>
 8008800:	89fb      	ldrh	r3, [r7, #14]
 8008802:	3b01      	subs	r3, #1
 8008804:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008806:	4a0e      	ldr	r2, [pc, #56]	; (8008840 <dec_lock+0x74>)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	4413      	add	r3, r2
 800880e:	330c      	adds	r3, #12
 8008810:	89fa      	ldrh	r2, [r7, #14]
 8008812:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008814:	89fb      	ldrh	r3, [r7, #14]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d105      	bne.n	8008826 <dec_lock+0x5a>
 800881a:	4a09      	ldr	r2, [pc, #36]	; (8008840 <dec_lock+0x74>)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	4413      	add	r3, r2
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	737b      	strb	r3, [r7, #13]
 800882a:	e001      	b.n	8008830 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800882c:	2302      	movs	r3, #2
 800882e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008830:	7b7b      	ldrb	r3, [r7, #13]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	20002830 	.word	0x20002830

08008844 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800884c:	2300      	movs	r3, #0
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	e010      	b.n	8008874 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008852:	4a0d      	ldr	r2, [pc, #52]	; (8008888 <clear_lock+0x44>)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	4413      	add	r3, r2
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	429a      	cmp	r2, r3
 8008860:	d105      	bne.n	800886e <clear_lock+0x2a>
 8008862:	4a09      	ldr	r2, [pc, #36]	; (8008888 <clear_lock+0x44>)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	4413      	add	r3, r2
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3301      	adds	r3, #1
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d9eb      	bls.n	8008852 <clear_lock+0xe>
	}
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	20002830 	.word	0x20002830

0800888c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	78db      	ldrb	r3, [r3, #3]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d034      	beq.n	800890a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	7858      	ldrb	r0, [r3, #1]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80088b0:	2301      	movs	r3, #1
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	f7ff fd40 	bl	8008338 <disk_write>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80088be:	2301      	movs	r3, #1
 80088c0:	73fb      	strb	r3, [r7, #15]
 80088c2:	e022      	b.n	800890a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	1ad2      	subs	r2, r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d217      	bcs.n	800890a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	789b      	ldrb	r3, [r3, #2]
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	e010      	b.n	8008904 <sync_window+0x78>
					wsect += fs->fsize;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	4413      	add	r3, r2
 80088ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7858      	ldrb	r0, [r3, #1]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80088f6:	2301      	movs	r3, #1
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	f7ff fd1d 	bl	8008338 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	3b01      	subs	r3, #1
 8008902:	613b      	str	r3, [r7, #16]
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d8eb      	bhi.n	80088e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	429a      	cmp	r2, r3
 800892a:	d01b      	beq.n	8008964 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff ffad 	bl	800888c <sync_window>
 8008932:	4603      	mov	r3, r0
 8008934:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d113      	bne.n	8008964 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	7858      	ldrb	r0, [r3, #1]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008946:	2301      	movs	r3, #1
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	f7ff fcd5 	bl	80082f8 <disk_read>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008954:	f04f 33ff 	mov.w	r3, #4294967295
 8008958:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800895a:	2301      	movs	r3, #1
 800895c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff ff87 	bl	800888c <sync_window>
 800897e:	4603      	mov	r3, r0
 8008980:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d159      	bne.n	8008a3c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b03      	cmp	r3, #3
 800898e:	d149      	bne.n	8008a24 <sync_fs+0xb4>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	791b      	ldrb	r3, [r3, #4]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d145      	bne.n	8008a24 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	899b      	ldrh	r3, [r3, #12]
 80089a2:	461a      	mov	r2, r3
 80089a4:	2100      	movs	r1, #0
 80089a6:	f7ff fda8 	bl	80084fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3338      	adds	r3, #56	; 0x38
 80089ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80089b2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff fd37 	bl	800842a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3338      	adds	r3, #56	; 0x38
 80089c0:	4921      	ldr	r1, [pc, #132]	; (8008a48 <sync_fs+0xd8>)
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fd4c 	bl	8008460 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3338      	adds	r3, #56	; 0x38
 80089cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80089d0:	491e      	ldr	r1, [pc, #120]	; (8008a4c <sync_fs+0xdc>)
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff fd44 	bl	8008460 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3338      	adds	r3, #56	; 0x38
 80089dc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f7ff fd3a 	bl	8008460 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3338      	adds	r3, #56	; 0x38
 80089f0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	4619      	mov	r1, r3
 80089fa:	4610      	mov	r0, r2
 80089fc:	f7ff fd30 	bl	8008460 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	7858      	ldrb	r0, [r3, #1]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f7ff fc8d 	bl	8008338 <disk_write>
			fs->fsi_flag = 0;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	785b      	ldrb	r3, [r3, #1]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7ff fca3 	bl	8008378 <disk_ioctl>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <sync_fs+0xcc>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	41615252 	.word	0x41615252
 8008a4c:	61417272 	.word	0x61417272

08008a50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	3b02      	subs	r3, #2
 8008a5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	3b02      	subs	r3, #2
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d301      	bcc.n	8008a70 <clust2sect+0x20>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e008      	b.n	8008a82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	895b      	ldrh	r3, [r3, #10]
 8008a74:	461a      	mov	r2, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	fb03 f202 	mul.w	r2, r3, r2
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	4413      	add	r3, r2
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b086      	sub	sp, #24
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d904      	bls.n	8008aae <get_fat+0x20>
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d302      	bcc.n	8008ab4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008aae:	2301      	movs	r3, #1
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	e0bb      	b.n	8008c2c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	f000 8083 	beq.w	8008bca <get_fat+0x13c>
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	f300 80a7 	bgt.w	8008c18 <get_fat+0x18a>
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d002      	beq.n	8008ad4 <get_fat+0x46>
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d056      	beq.n	8008b80 <get_fat+0xf2>
 8008ad2:	e0a1      	b.n	8008c18 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	085b      	lsrs	r3, r3, #1
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	4413      	add	r3, r2
 8008ae0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	899b      	ldrh	r3, [r3, #12]
 8008aea:	4619      	mov	r1, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8008af2:	4413      	add	r3, r2
 8008af4:	4619      	mov	r1, r3
 8008af6:	6938      	ldr	r0, [r7, #16]
 8008af8:	f7ff ff0c 	bl	8008914 <move_window>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f040 808d 	bne.w	8008c1e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	60fa      	str	r2, [r7, #12]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	8992      	ldrh	r2, [r2, #12]
 8008b0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b12:	fb01 f202 	mul.w	r2, r1, r2
 8008b16:	1a9b      	subs	r3, r3, r2
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	899b      	ldrh	r3, [r3, #12]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b32:	4413      	add	r3, r2
 8008b34:	4619      	mov	r1, r3
 8008b36:	6938      	ldr	r0, [r7, #16]
 8008b38:	f7ff feec 	bl	8008914 <move_window>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d16f      	bne.n	8008c22 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	899b      	ldrh	r3, [r3, #12]
 8008b46:	461a      	mov	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b4e:	fb01 f202 	mul.w	r2, r1, r2
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4413      	add	r3, r2
 8008b58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	461a      	mov	r2, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <get_fat+0xe8>
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	091b      	lsrs	r3, r3, #4
 8008b74:	e002      	b.n	8008b7c <get_fat+0xee>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b7c:	617b      	str	r3, [r7, #20]
			break;
 8008b7e:	e055      	b.n	8008c2c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	899b      	ldrh	r3, [r3, #12]
 8008b88:	085b      	lsrs	r3, r3, #1
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b94:	4413      	add	r3, r2
 8008b96:	4619      	mov	r1, r3
 8008b98:	6938      	ldr	r0, [r7, #16]
 8008b9a:	f7ff febb 	bl	8008914 <move_window>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d140      	bne.n	8008c26 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	8992      	ldrh	r2, [r2, #12]
 8008bb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bb6:	fb00 f202 	mul.w	r2, r0, r2
 8008bba:	1a9b      	subs	r3, r3, r2
 8008bbc:	440b      	add	r3, r1
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7ff fbf8 	bl	80083b4 <ld_word>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	617b      	str	r3, [r7, #20]
			break;
 8008bc8:	e030      	b.n	8008c2c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	899b      	ldrh	r3, [r3, #12]
 8008bd2:	089b      	lsrs	r3, r3, #2
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bde:	4413      	add	r3, r2
 8008be0:	4619      	mov	r1, r3
 8008be2:	6938      	ldr	r0, [r7, #16]
 8008be4:	f7ff fe96 	bl	8008914 <move_window>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d11d      	bne.n	8008c2a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	8992      	ldrh	r2, [r2, #12]
 8008bfc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c00:	fb00 f202 	mul.w	r2, r0, r2
 8008c04:	1a9b      	subs	r3, r3, r2
 8008c06:	440b      	add	r3, r1
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fbeb 	bl	80083e4 <ld_dword>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c14:	617b      	str	r3, [r7, #20]
			break;
 8008c16:	e009      	b.n	8008c2c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008c18:	2301      	movs	r3, #1
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e006      	b.n	8008c2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c1e:	bf00      	nop
 8008c20:	e004      	b.n	8008c2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c22:	bf00      	nop
 8008c24:	e002      	b.n	8008c2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c26:	bf00      	nop
 8008c28:	e000      	b.n	8008c2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c2a:	bf00      	nop
		}
	}

	return val;
 8008c2c:	697b      	ldr	r3, [r7, #20]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008c36:	b590      	push	{r4, r7, lr}
 8008c38:	b089      	sub	sp, #36	; 0x24
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008c42:	2302      	movs	r3, #2
 8008c44:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	f240 8102 	bls.w	8008e52 <put_fat+0x21c>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	f080 80fc 	bcs.w	8008e52 <put_fat+0x21c>
		switch (fs->fs_type) {
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	f000 80b6 	beq.w	8008dd0 <put_fat+0x19a>
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	f300 80fd 	bgt.w	8008e64 <put_fat+0x22e>
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d003      	beq.n	8008c76 <put_fat+0x40>
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	f000 8083 	beq.w	8008d7a <put_fat+0x144>
 8008c74:	e0f6      	b.n	8008e64 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	085b      	lsrs	r3, r3, #1
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	4413      	add	r3, r2
 8008c82:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	899b      	ldrh	r3, [r3, #12]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c94:	4413      	add	r3, r2
 8008c96:	4619      	mov	r1, r3
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7ff fe3b 	bl	8008914 <move_window>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ca2:	7ffb      	ldrb	r3, [r7, #31]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f040 80d6 	bne.w	8008e56 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	61ba      	str	r2, [r7, #24]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	8992      	ldrh	r2, [r2, #12]
 8008cba:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cbe:	fb00 f202 	mul.w	r2, r0, r2
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00d      	beq.n	8008cee <put_fat+0xb8>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	b25b      	sxtb	r3, r3
 8008cd8:	f003 030f 	and.w	r3, r3, #15
 8008cdc:	b25a      	sxtb	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	b25b      	sxtb	r3, r3
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	b25b      	sxtb	r3, r3
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	e001      	b.n	8008cf2 <put_fat+0xbc>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	899b      	ldrh	r3, [r3, #12]
 8008d04:	4619      	mov	r1, r3
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d0c:	4413      	add	r3, r2
 8008d0e:	4619      	mov	r1, r3
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f7ff fdff 	bl	8008914 <move_window>
 8008d16:	4603      	mov	r3, r0
 8008d18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d1a:	7ffb      	ldrb	r3, [r7, #31]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f040 809c 	bne.w	8008e5a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	899b      	ldrh	r3, [r3, #12]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d34:	fb00 f202 	mul.w	r2, r0, r2
 8008d38:	1a9b      	subs	r3, r3, r2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <put_fat+0x11a>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	091b      	lsrs	r3, r3, #4
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	e00e      	b.n	8008d6e <put_fat+0x138>
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	b25b      	sxtb	r3, r3
 8008d56:	f023 030f 	bic.w	r3, r3, #15
 8008d5a:	b25a      	sxtb	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	b25b      	sxtb	r3, r3
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	b25b      	sxtb	r3, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	b25b      	sxtb	r3, r3
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	70da      	strb	r2, [r3, #3]
			break;
 8008d78:	e074      	b.n	8008e64 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	899b      	ldrh	r3, [r3, #12]
 8008d82:	085b      	lsrs	r3, r3, #1
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	4619      	mov	r1, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d8e:	4413      	add	r3, r2
 8008d90:	4619      	mov	r1, r3
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff fdbe 	bl	8008914 <move_window>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d9c:	7ffb      	ldrb	r3, [r7, #31]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d15d      	bne.n	8008e5e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	8992      	ldrh	r2, [r2, #12]
 8008db0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008db4:	fb00 f202 	mul.w	r2, r0, r2
 8008db8:	1a9b      	subs	r3, r3, r2
 8008dba:	440b      	add	r3, r1
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	b292      	uxth	r2, r2
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff fb31 	bl	800842a <st_word>
			fs->wflag = 1;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	70da      	strb	r2, [r3, #3]
			break;
 8008dce:	e049      	b.n	8008e64 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	899b      	ldrh	r3, [r3, #12]
 8008dd8:	089b      	lsrs	r3, r3, #2
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	4619      	mov	r1, r3
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008de4:	4413      	add	r3, r2
 8008de6:	4619      	mov	r1, r3
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7ff fd93 	bl	8008914 <move_window>
 8008dee:	4603      	mov	r3, r0
 8008df0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008df2:	7ffb      	ldrb	r3, [r7, #31]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d134      	bne.n	8008e62 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	8992      	ldrh	r2, [r2, #12]
 8008e0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e10:	fb00 f202 	mul.w	r2, r0, r2
 8008e14:	1a9b      	subs	r3, r3, r2
 8008e16:	440b      	add	r3, r1
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff fae3 	bl	80083e4 <ld_dword>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008e24:	4323      	orrs	r3, r4
 8008e26:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	8992      	ldrh	r2, [r2, #12]
 8008e36:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e3a:	fb00 f202 	mul.w	r2, r0, r2
 8008e3e:	1a9b      	subs	r3, r3, r2
 8008e40:	440b      	add	r3, r1
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7ff fb0b 	bl	8008460 <st_dword>
			fs->wflag = 1;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	70da      	strb	r2, [r3, #3]
			break;
 8008e50:	e008      	b.n	8008e64 <put_fat+0x22e>
		}
	}
 8008e52:	bf00      	nop
 8008e54:	e006      	b.n	8008e64 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008e56:	bf00      	nop
 8008e58:	e004      	b.n	8008e64 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008e5a:	bf00      	nop
 8008e5c:	e002      	b.n	8008e64 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008e5e:	bf00      	nop
 8008e60:	e000      	b.n	8008e64 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008e62:	bf00      	nop
	return res;
 8008e64:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3724      	adds	r7, #36	; 0x24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd90      	pop	{r4, r7, pc}

08008e6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b088      	sub	sp, #32
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d904      	bls.n	8008e94 <remove_chain+0x26>
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d301      	bcc.n	8008e98 <remove_chain+0x2a>
 8008e94:	2302      	movs	r3, #2
 8008e96:	e04b      	b.n	8008f30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00c      	beq.n	8008eb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	69b8      	ldr	r0, [r7, #24]
 8008ea6:	f7ff fec6 	bl	8008c36 <put_fat>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008eae:	7ffb      	ldrb	r3, [r7, #31]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <remove_chain+0x4a>
 8008eb4:	7ffb      	ldrb	r3, [r7, #31]
 8008eb6:	e03b      	b.n	8008f30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008eb8:	68b9      	ldr	r1, [r7, #8]
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fde7 	bl	8008a8e <get_fat>
 8008ec0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d031      	beq.n	8008f2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d101      	bne.n	8008ed2 <remove_chain+0x64>
 8008ece:	2302      	movs	r3, #2
 8008ed0:	e02e      	b.n	8008f30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed8:	d101      	bne.n	8008ede <remove_chain+0x70>
 8008eda:	2301      	movs	r3, #1
 8008edc:	e028      	b.n	8008f30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008ede:	2200      	movs	r2, #0
 8008ee0:	68b9      	ldr	r1, [r7, #8]
 8008ee2:	69b8      	ldr	r0, [r7, #24]
 8008ee4:	f7ff fea7 	bl	8008c36 <put_fat>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008eec:	7ffb      	ldrb	r3, [r7, #31]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <remove_chain+0x88>
 8008ef2:	7ffb      	ldrb	r3, [r7, #31]
 8008ef4:	e01c      	b.n	8008f30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	699a      	ldr	r2, [r3, #24]
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	3b02      	subs	r3, #2
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d20b      	bcs.n	8008f1c <remove_chain+0xae>
			fs->free_clst++;
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	791b      	ldrb	r3, [r3, #4]
 8008f12:	f043 0301 	orr.w	r3, r3, #1
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d3c6      	bcc.n	8008eb8 <remove_chain+0x4a>
 8008f2a:	e000      	b.n	8008f2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008f2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3720      	adds	r7, #32
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10d      	bne.n	8008f6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d004      	beq.n	8008f64 <create_chain+0x2c>
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d31b      	bcc.n	8008f9c <create_chain+0x64>
 8008f64:	2301      	movs	r3, #1
 8008f66:	61bb      	str	r3, [r7, #24]
 8008f68:	e018      	b.n	8008f9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff fd8e 	bl	8008a8e <get_fat>
 8008f72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d801      	bhi.n	8008f7e <create_chain+0x46>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e070      	b.n	8009060 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f84:	d101      	bne.n	8008f8a <create_chain+0x52>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	e06a      	b.n	8009060 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d201      	bcs.n	8008f98 <create_chain+0x60>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	e063      	b.n	8009060 <create_chain+0x128>
		scl = clst;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d307      	bcc.n	8008fc0 <create_chain+0x88>
				ncl = 2;
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d901      	bls.n	8008fc0 <create_chain+0x88>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e04f      	b.n	8009060 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008fc0:	69f9      	ldr	r1, [r7, #28]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff fd63 	bl	8008a8e <get_fat>
 8008fc8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00e      	beq.n	8008fee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d003      	beq.n	8008fde <create_chain+0xa6>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fdc:	d101      	bne.n	8008fe2 <create_chain+0xaa>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	e03e      	b.n	8009060 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d1da      	bne.n	8008fa0 <create_chain+0x68>
 8008fea:	2300      	movs	r3, #0
 8008fec:	e038      	b.n	8009060 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008fee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff4:	69f9      	ldr	r1, [r7, #28]
 8008ff6:	6938      	ldr	r0, [r7, #16]
 8008ff8:	f7ff fe1d 	bl	8008c36 <put_fat>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <create_chain+0xe2>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d006      	beq.n	800901a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800900c:	69fa      	ldr	r2, [r7, #28]
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6938      	ldr	r0, [r7, #16]
 8009012:	f7ff fe10 	bl	8008c36 <put_fat>
 8009016:	4603      	mov	r3, r0
 8009018:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d116      	bne.n	800904e <create_chain+0x116>
		fs->last_clst = ncl;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	3b02      	subs	r3, #2
 8009030:	429a      	cmp	r2, r3
 8009032:	d804      	bhi.n	800903e <create_chain+0x106>
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	1e5a      	subs	r2, r3, #1
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	791b      	ldrb	r3, [r3, #4]
 8009042:	f043 0301 	orr.w	r3, r3, #1
 8009046:	b2da      	uxtb	r2, r3
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	711a      	strb	r2, [r3, #4]
 800904c:	e007      	b.n	800905e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d102      	bne.n	800905a <create_chain+0x122>
 8009054:	f04f 33ff 	mov.w	r3, #4294967295
 8009058:	e000      	b.n	800905c <create_chain+0x124>
 800905a:	2301      	movs	r3, #1
 800905c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800905e:	69fb      	ldr	r3, [r7, #28]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3720      	adds	r7, #32
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009068:	b480      	push	{r7}
 800906a:	b087      	sub	sp, #28
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	3304      	adds	r3, #4
 800907e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	899b      	ldrh	r3, [r3, #12]
 8009084:	461a      	mov	r2, r3
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	fbb3 f3f2 	udiv	r3, r3, r2
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	8952      	ldrh	r2, [r2, #10]
 8009090:	fbb3 f3f2 	udiv	r3, r3, r2
 8009094:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	1d1a      	adds	r2, r3, #4
 800909a:	613a      	str	r2, [r7, #16]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <clmt_clust+0x42>
 80090a6:	2300      	movs	r3, #0
 80090a8:	e010      	b.n	80090cc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d307      	bcc.n	80090c2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	617b      	str	r3, [r7, #20]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	3304      	adds	r3, #4
 80090be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80090c0:	e7e9      	b.n	8009096 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80090c2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	4413      	add	r3, r2
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	371c      	adds	r7, #28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090ee:	d204      	bcs.n	80090fa <dir_sdi+0x22>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	f003 031f 	and.w	r3, r3, #31
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <dir_sdi+0x26>
		return FR_INT_ERR;
 80090fa:	2302      	movs	r3, #2
 80090fc:	e071      	b.n	80091e2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d106      	bne.n	800911e <dir_sdi+0x46>
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b02      	cmp	r3, #2
 8009116:	d902      	bls.n	800911e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10c      	bne.n	800913e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	095b      	lsrs	r3, r3, #5
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	8912      	ldrh	r2, [r2, #8]
 800912c:	4293      	cmp	r3, r2
 800912e:	d301      	bcc.n	8009134 <dir_sdi+0x5c>
 8009130:	2302      	movs	r3, #2
 8009132:	e056      	b.n	80091e2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	61da      	str	r2, [r3, #28]
 800913c:	e02d      	b.n	800919a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	895b      	ldrh	r3, [r3, #10]
 8009142:	461a      	mov	r2, r3
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	899b      	ldrh	r3, [r3, #12]
 8009148:	fb02 f303 	mul.w	r3, r2, r3
 800914c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800914e:	e019      	b.n	8009184 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6979      	ldr	r1, [r7, #20]
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff fc9a 	bl	8008a8e <get_fat>
 800915a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009162:	d101      	bne.n	8009168 <dir_sdi+0x90>
 8009164:	2301      	movs	r3, #1
 8009166:	e03c      	b.n	80091e2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d904      	bls.n	8009178 <dir_sdi+0xa0>
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	429a      	cmp	r2, r3
 8009176:	d301      	bcc.n	800917c <dir_sdi+0xa4>
 8009178:	2302      	movs	r3, #2
 800917a:	e032      	b.n	80091e2 <dir_sdi+0x10a>
			ofs -= csz;
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	429a      	cmp	r2, r3
 800918a:	d2e1      	bcs.n	8009150 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800918c:	6979      	ldr	r1, [r7, #20]
 800918e:	6938      	ldr	r0, [r7, #16]
 8009190:	f7ff fc5e 	bl	8008a50 <clust2sect>
 8009194:	4602      	mov	r2, r0
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <dir_sdi+0xd4>
 80091a8:	2302      	movs	r3, #2
 80091aa:	e01a      	b.n	80091e2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	69da      	ldr	r2, [r3, #28]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	899b      	ldrh	r3, [r3, #12]
 80091b4:	4619      	mov	r1, r3
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80091bc:	441a      	add	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	899b      	ldrh	r3, [r3, #12]
 80091cc:	461a      	mov	r2, r3
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80091d4:	fb00 f202 	mul.w	r2, r0, r2
 80091d8:	1a9b      	subs	r3, r3, r2
 80091da:	18ca      	adds	r2, r1, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	3320      	adds	r3, #32
 8009200:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <dir_next+0x28>
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009210:	d301      	bcc.n	8009216 <dir_next+0x2c>
 8009212:	2304      	movs	r3, #4
 8009214:	e0bb      	b.n	800938e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	899b      	ldrh	r3, [r3, #12]
 800921a:	461a      	mov	r2, r3
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009222:	fb01 f202 	mul.w	r2, r1, r2
 8009226:	1a9b      	subs	r3, r3, r2
 8009228:	2b00      	cmp	r3, #0
 800922a:	f040 809d 	bne.w	8009368 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10b      	bne.n	8009258 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	095b      	lsrs	r3, r3, #5
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	8912      	ldrh	r2, [r2, #8]
 8009248:	4293      	cmp	r3, r2
 800924a:	f0c0 808d 	bcc.w	8009368 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	61da      	str	r2, [r3, #28]
 8009254:	2304      	movs	r3, #4
 8009256:	e09a      	b.n	800938e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	899b      	ldrh	r3, [r3, #12]
 800925c:	461a      	mov	r2, r3
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	fbb3 f3f2 	udiv	r3, r3, r2
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	8952      	ldrh	r2, [r2, #10]
 8009268:	3a01      	subs	r2, #1
 800926a:	4013      	ands	r3, r2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d17b      	bne.n	8009368 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	4619      	mov	r1, r3
 8009278:	4610      	mov	r0, r2
 800927a:	f7ff fc08 	bl	8008a8e <get_fat>
 800927e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d801      	bhi.n	800928a <dir_next+0xa0>
 8009286:	2302      	movs	r3, #2
 8009288:	e081      	b.n	800938e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009290:	d101      	bne.n	8009296 <dir_next+0xac>
 8009292:	2301      	movs	r3, #1
 8009294:	e07b      	b.n	800938e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	429a      	cmp	r2, r3
 800929e:	d359      	bcc.n	8009354 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d104      	bne.n	80092b0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	61da      	str	r2, [r3, #28]
 80092ac:	2304      	movs	r3, #4
 80092ae:	e06e      	b.n	800938e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	4619      	mov	r1, r3
 80092b8:	4610      	mov	r0, r2
 80092ba:	f7ff fe3d 	bl	8008f38 <create_chain>
 80092be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <dir_next+0xe0>
 80092c6:	2307      	movs	r3, #7
 80092c8:	e061      	b.n	800938e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d101      	bne.n	80092d4 <dir_next+0xea>
 80092d0:	2302      	movs	r3, #2
 80092d2:	e05c      	b.n	800938e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092da:	d101      	bne.n	80092e0 <dir_next+0xf6>
 80092dc:	2301      	movs	r3, #1
 80092de:	e056      	b.n	800938e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fad3 	bl	800888c <sync_window>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <dir_next+0x106>
 80092ec:	2301      	movs	r3, #1
 80092ee:	e04e      	b.n	800938e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	899b      	ldrh	r3, [r3, #12]
 80092fa:	461a      	mov	r2, r3
 80092fc:	2100      	movs	r1, #0
 80092fe:	f7ff f8fc 	bl	80084fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009302:	2300      	movs	r3, #0
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	6979      	ldr	r1, [r7, #20]
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff fba1 	bl	8008a50 <clust2sect>
 800930e:	4602      	mov	r2, r0
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	635a      	str	r2, [r3, #52]	; 0x34
 8009314:	e012      	b.n	800933c <dir_next+0x152>
						fs->wflag = 1;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7ff fab5 	bl	800888c <sync_window>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <dir_next+0x142>
 8009328:	2301      	movs	r3, #1
 800932a:	e030      	b.n	800938e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	3301      	adds	r3, #1
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	635a      	str	r2, [r3, #52]	; 0x34
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	895b      	ldrh	r3, [r3, #10]
 8009340:	461a      	mov	r2, r3
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	4293      	cmp	r3, r2
 8009346:	d3e6      	bcc.n	8009316 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800935a:	6979      	ldr	r1, [r7, #20]
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff fb77 	bl	8008a50 <clust2sect>
 8009362:	4602      	mov	r2, r0
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	899b      	ldrh	r3, [r3, #12]
 8009378:	461a      	mov	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009380:	fb00 f202 	mul.w	r2, r0, r2
 8009384:	1a9b      	subs	r3, r3, r2
 8009386:	18ca      	adds	r2, r1, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b086      	sub	sp, #24
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80093a6:	2100      	movs	r1, #0
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff fe95 	bl	80090d8 <dir_sdi>
 80093ae:	4603      	mov	r3, r0
 80093b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d12b      	bne.n	8009410 <dir_alloc+0x7a>
		n = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	4619      	mov	r1, r3
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7ff faa6 	bl	8008914 <move_window>
 80093c8:	4603      	mov	r3, r0
 80093ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d11d      	bne.n	800940e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2be5      	cmp	r3, #229	; 0xe5
 80093da:	d004      	beq.n	80093e6 <dir_alloc+0x50>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d107      	bne.n	80093f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	3301      	adds	r3, #1
 80093ea:	613b      	str	r3, [r7, #16]
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d102      	bne.n	80093fa <dir_alloc+0x64>
 80093f4:	e00c      	b.n	8009410 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80093f6:	2300      	movs	r3, #0
 80093f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80093fa:	2101      	movs	r1, #1
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff fef4 	bl	80091ea <dir_next>
 8009402:	4603      	mov	r3, r0
 8009404:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0d7      	beq.n	80093bc <dir_alloc+0x26>
 800940c:	e000      	b.n	8009410 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800940e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009410:	7dfb      	ldrb	r3, [r7, #23]
 8009412:	2b04      	cmp	r3, #4
 8009414:	d101      	bne.n	800941a <dir_alloc+0x84>
 8009416:	2307      	movs	r3, #7
 8009418:	75fb      	strb	r3, [r7, #23]
	return res;
 800941a:	7dfb      	ldrb	r3, [r7, #23]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	331a      	adds	r3, #26
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe ffbe 	bl	80083b4 <ld_word>
 8009438:	4603      	mov	r3, r0
 800943a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b03      	cmp	r3, #3
 8009442:	d109      	bne.n	8009458 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	3314      	adds	r3, #20
 8009448:	4618      	mov	r0, r3
 800944a:	f7fe ffb3 	bl	80083b4 <ld_word>
 800944e:	4603      	mov	r3, r0
 8009450:	041b      	lsls	r3, r3, #16
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	4313      	orrs	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009458:	68fb      	ldr	r3, [r7, #12]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	331a      	adds	r3, #26
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	b292      	uxth	r2, r2
 8009476:	4611      	mov	r1, r2
 8009478:	4618      	mov	r0, r3
 800947a:	f7fe ffd6 	bl	800842a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	2b03      	cmp	r3, #3
 8009484:	d109      	bne.n	800949a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f103 0214 	add.w	r2, r3, #20
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	0c1b      	lsrs	r3, r3, #16
 8009490:	b29b      	uxth	r3, r3
 8009492:	4619      	mov	r1, r3
 8009494:	4610      	mov	r0, r2
 8009496:	f7fe ffc8 	bl	800842a <st_word>
	}
}
 800949a:	bf00      	nop
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80094a4:	b590      	push	{r4, r7, lr}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	331a      	adds	r3, #26
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe ff7e 	bl	80083b4 <ld_word>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <cmp_lfn+0x1e>
 80094be:	2300      	movs	r3, #0
 80094c0:	e059      	b.n	8009576 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094ca:	1e5a      	subs	r2, r3, #1
 80094cc:	4613      	mov	r3, r2
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80094d8:	2301      	movs	r3, #1
 80094da:	81fb      	strh	r3, [r7, #14]
 80094dc:	2300      	movs	r3, #0
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	e033      	b.n	800954a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80094e2:	4a27      	ldr	r2, [pc, #156]	; (8009580 <cmp_lfn+0xdc>)
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	4413      	add	r3, r2
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	4413      	add	r3, r2
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe ff5f 	bl	80083b4 <ld_word>
 80094f6:	4603      	mov	r3, r0
 80094f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80094fa:	89fb      	ldrh	r3, [r7, #14]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d01a      	beq.n	8009536 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2bfe      	cmp	r3, #254	; 0xfe
 8009504:	d812      	bhi.n	800952c <cmp_lfn+0x88>
 8009506:	89bb      	ldrh	r3, [r7, #12]
 8009508:	4618      	mov	r0, r3
 800950a:	f001 fe2b 	bl	800b164 <ff_wtoupper>
 800950e:	4603      	mov	r3, r0
 8009510:	461c      	mov	r4, r3
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	617a      	str	r2, [r7, #20]
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4413      	add	r3, r2
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	4618      	mov	r0, r3
 8009522:	f001 fe1f 	bl	800b164 <ff_wtoupper>
 8009526:	4603      	mov	r3, r0
 8009528:	429c      	cmp	r4, r3
 800952a:	d001      	beq.n	8009530 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800952c:	2300      	movs	r3, #0
 800952e:	e022      	b.n	8009576 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009530:	89bb      	ldrh	r3, [r7, #12]
 8009532:	81fb      	strh	r3, [r7, #14]
 8009534:	e006      	b.n	8009544 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009536:	89bb      	ldrh	r3, [r7, #12]
 8009538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800953c:	4293      	cmp	r3, r2
 800953e:	d001      	beq.n	8009544 <cmp_lfn+0xa0>
 8009540:	2300      	movs	r3, #0
 8009542:	e018      	b.n	8009576 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	3301      	adds	r3, #1
 8009548:	613b      	str	r3, [r7, #16]
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b0c      	cmp	r3, #12
 800954e:	d9c8      	bls.n	80094e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00b      	beq.n	8009574 <cmp_lfn+0xd0>
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d008      	beq.n	8009574 <cmp_lfn+0xd0>
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	4413      	add	r3, r2
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <cmp_lfn+0xd0>
 8009570:	2300      	movs	r3, #0
 8009572:	e000      	b.n	8009576 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009574:	2301      	movs	r3, #1
}
 8009576:	4618      	mov	r0, r3
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	bd90      	pop	{r4, r7, pc}
 800957e:	bf00      	nop
 8009580:	0800e604 	.word	0x0800e604

08009584 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b088      	sub	sp, #32
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	4611      	mov	r1, r2
 8009590:	461a      	mov	r2, r3
 8009592:	460b      	mov	r3, r1
 8009594:	71fb      	strb	r3, [r7, #7]
 8009596:	4613      	mov	r3, r2
 8009598:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	330d      	adds	r3, #13
 800959e:	79ba      	ldrb	r2, [r7, #6]
 80095a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	330b      	adds	r3, #11
 80095a6:	220f      	movs	r2, #15
 80095a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	330c      	adds	r3, #12
 80095ae:	2200      	movs	r2, #0
 80095b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	331a      	adds	r3, #26
 80095b6:	2100      	movs	r1, #0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe ff36 	bl	800842a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	1e5a      	subs	r2, r3, #1
 80095c2:	4613      	mov	r3, r2
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	4413      	add	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	82fb      	strh	r3, [r7, #22]
 80095d2:	2300      	movs	r3, #0
 80095d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80095d6:	8afb      	ldrh	r3, [r7, #22]
 80095d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095dc:	4293      	cmp	r3, r2
 80095de:	d007      	beq.n	80095f0 <put_lfn+0x6c>
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	61fa      	str	r2, [r7, #28]
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	4413      	add	r3, r2
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80095f0:	4a17      	ldr	r2, [pc, #92]	; (8009650 <put_lfn+0xcc>)
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	4413      	add	r3, r2
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	8afa      	ldrh	r2, [r7, #22]
 8009600:	4611      	mov	r1, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f7fe ff11 	bl	800842a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009608:	8afb      	ldrh	r3, [r7, #22]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d102      	bne.n	8009614 <put_lfn+0x90>
 800960e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009612:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	3301      	adds	r3, #1
 8009618:	61bb      	str	r3, [r7, #24]
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b0c      	cmp	r3, #12
 800961e:	d9da      	bls.n	80095d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009620:	8afb      	ldrh	r3, [r7, #22]
 8009622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009626:	4293      	cmp	r3, r2
 8009628:	d006      	beq.n	8009638 <put_lfn+0xb4>
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	4413      	add	r3, r2
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d103      	bne.n	8009640 <put_lfn+0xbc>
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800963e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	79fa      	ldrb	r2, [r7, #7]
 8009644:	701a      	strb	r2, [r3, #0]
}
 8009646:	bf00      	nop
 8009648:	3720      	adds	r7, #32
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	0800e604 	.word	0x0800e604

08009654 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08c      	sub	sp, #48	; 0x30
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009662:	220b      	movs	r2, #11
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f7fe ff26 	bl	80084b8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b05      	cmp	r3, #5
 8009670:	d92b      	bls.n	80096ca <gen_numname+0x76>
		sr = seq;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009676:	e022      	b.n	80096be <gen_numname+0x6a>
			wc = *lfn++;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	1c9a      	adds	r2, r3, #2
 800967c:	607a      	str	r2, [r7, #4]
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009682:	2300      	movs	r3, #0
 8009684:	62bb      	str	r3, [r7, #40]	; 0x28
 8009686:	e017      	b.n	80096b8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	005a      	lsls	r2, r3, #1
 800968c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	4413      	add	r3, r2
 8009694:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009696:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009698:	085b      	lsrs	r3, r3, #1
 800969a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <gen_numname+0x5e>
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80096ac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80096b0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	3301      	adds	r3, #1
 80096b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	2b0f      	cmp	r3, #15
 80096bc:	d9e4      	bls.n	8009688 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1d8      	bne.n	8009678 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80096ca:	2307      	movs	r3, #7
 80096cc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	f003 030f 	and.w	r3, r3, #15
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	3330      	adds	r3, #48	; 0x30
 80096da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80096de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096e2:	2b39      	cmp	r3, #57	; 0x39
 80096e4:	d904      	bls.n	80096f0 <gen_numname+0x9c>
 80096e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096ea:	3307      	adds	r3, #7
 80096ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	1e5a      	subs	r2, r3, #1
 80096f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80096f6:	3330      	adds	r3, #48	; 0x30
 80096f8:	443b      	add	r3, r7
 80096fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80096fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	091b      	lsrs	r3, r3, #4
 8009706:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1df      	bne.n	80096ce <gen_numname+0x7a>
	ns[i] = '~';
 800970e:	f107 0214 	add.w	r2, r7, #20
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	4413      	add	r3, r2
 8009716:	227e      	movs	r2, #126	; 0x7e
 8009718:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800971a:	2300      	movs	r3, #0
 800971c:	627b      	str	r3, [r7, #36]	; 0x24
 800971e:	e002      	b.n	8009726 <gen_numname+0xd2>
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	3301      	adds	r3, #1
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
 8009726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972a:	429a      	cmp	r2, r3
 800972c:	d205      	bcs.n	800973a <gen_numname+0xe6>
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	4413      	add	r3, r2
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b20      	cmp	r3, #32
 8009738:	d1f2      	bne.n	8009720 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	2b07      	cmp	r3, #7
 800973e:	d807      	bhi.n	8009750 <gen_numname+0xfc>
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	62ba      	str	r2, [r7, #40]	; 0x28
 8009746:	3330      	adds	r3, #48	; 0x30
 8009748:	443b      	add	r3, r7
 800974a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800974e:	e000      	b.n	8009752 <gen_numname+0xfe>
 8009750:	2120      	movs	r1, #32
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	1c5a      	adds	r2, r3, #1
 8009756:	627a      	str	r2, [r7, #36]	; 0x24
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4413      	add	r3, r2
 800975c:	460a      	mov	r2, r1
 800975e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	2b07      	cmp	r3, #7
 8009764:	d9e9      	bls.n	800973a <gen_numname+0xe6>
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	3730      	adds	r7, #48	; 0x30
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800977c:	230b      	movs	r3, #11
 800977e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	b2da      	uxtb	r2, r3
 8009784:	0852      	lsrs	r2, r2, #1
 8009786:	01db      	lsls	r3, r3, #7
 8009788:	4313      	orrs	r3, r2
 800978a:	b2da      	uxtb	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	1c59      	adds	r1, r3, #1
 8009790:	6079      	str	r1, [r7, #4]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	4413      	add	r3, r2
 8009796:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	3b01      	subs	r3, #1
 800979c:	60bb      	str	r3, [r7, #8]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1ed      	bne.n	8009780 <sum_sfn+0x10>
	return sum;
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b086      	sub	sp, #24
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80097c0:	2100      	movs	r1, #0
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fc88 	bl	80090d8 <dir_sdi>
 80097c8:	4603      	mov	r3, r0
 80097ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <dir_find+0x24>
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	e0a9      	b.n	800992a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80097d6:	23ff      	movs	r3, #255	; 0xff
 80097d8:	753b      	strb	r3, [r7, #20]
 80097da:	7d3b      	ldrb	r3, [r7, #20]
 80097dc:	757b      	strb	r3, [r7, #21]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f04f 32ff 	mov.w	r2, #4294967295
 80097e4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	69db      	ldr	r3, [r3, #28]
 80097ea:	4619      	mov	r1, r3
 80097ec:	6938      	ldr	r0, [r7, #16]
 80097ee:	f7ff f891 	bl	8008914 <move_window>
 80097f2:	4603      	mov	r3, r0
 80097f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f040 8090 	bne.w	800991e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009806:	7dbb      	ldrb	r3, [r7, #22]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d102      	bne.n	8009812 <dir_find+0x60>
 800980c:	2304      	movs	r3, #4
 800980e:	75fb      	strb	r3, [r7, #23]
 8009810:	e08a      	b.n	8009928 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	330b      	adds	r3, #11
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800981e:	73fb      	strb	r3, [r7, #15]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	7bfa      	ldrb	r2, [r7, #15]
 8009824:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009826:	7dbb      	ldrb	r3, [r7, #22]
 8009828:	2be5      	cmp	r3, #229	; 0xe5
 800982a:	d007      	beq.n	800983c <dir_find+0x8a>
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	2b00      	cmp	r3, #0
 8009834:	d009      	beq.n	800984a <dir_find+0x98>
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	2b0f      	cmp	r3, #15
 800983a:	d006      	beq.n	800984a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800983c:	23ff      	movs	r3, #255	; 0xff
 800983e:	757b      	strb	r3, [r7, #21]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f04f 32ff 	mov.w	r2, #4294967295
 8009846:	631a      	str	r2, [r3, #48]	; 0x30
 8009848:	e05e      	b.n	8009908 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	2b0f      	cmp	r3, #15
 800984e:	d136      	bne.n	80098be <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	d154      	bne.n	8009908 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800985e:	7dbb      	ldrb	r3, [r7, #22]
 8009860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00d      	beq.n	8009884 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	7b5b      	ldrb	r3, [r3, #13]
 800986e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009870:	7dbb      	ldrb	r3, [r7, #22]
 8009872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009876:	75bb      	strb	r3, [r7, #22]
 8009878:	7dbb      	ldrb	r3, [r7, #22]
 800987a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	695a      	ldr	r2, [r3, #20]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009884:	7dba      	ldrb	r2, [r7, #22]
 8009886:	7d7b      	ldrb	r3, [r7, #21]
 8009888:	429a      	cmp	r2, r3
 800988a:	d115      	bne.n	80098b8 <dir_find+0x106>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	330d      	adds	r3, #13
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	7d3a      	ldrb	r2, [r7, #20]
 8009896:	429a      	cmp	r2, r3
 8009898:	d10e      	bne.n	80098b8 <dir_find+0x106>
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	691a      	ldr	r2, [r3, #16]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f7ff fdfd 	bl	80094a4 <cmp_lfn>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <dir_find+0x106>
 80098b0:	7d7b      	ldrb	r3, [r7, #21]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	e000      	b.n	80098ba <dir_find+0x108>
 80098b8:	23ff      	movs	r3, #255	; 0xff
 80098ba:	757b      	strb	r3, [r7, #21]
 80098bc:	e024      	b.n	8009908 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80098be:	7d7b      	ldrb	r3, [r7, #21]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d109      	bne.n	80098d8 <dir_find+0x126>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff ff51 	bl	8009770 <sum_sfn>
 80098ce:	4603      	mov	r3, r0
 80098d0:	461a      	mov	r2, r3
 80098d2:	7d3b      	ldrb	r3, [r7, #20]
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d024      	beq.n	8009922 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <dir_find+0x14a>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a18      	ldr	r0, [r3, #32]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3324      	adds	r3, #36	; 0x24
 80098ee:	220b      	movs	r2, #11
 80098f0:	4619      	mov	r1, r3
 80098f2:	f7fe fe1d 	bl	8008530 <mem_cmp>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d014      	beq.n	8009926 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80098fc:	23ff      	movs	r3, #255	; 0xff
 80098fe:	757b      	strb	r3, [r7, #21]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f04f 32ff 	mov.w	r2, #4294967295
 8009906:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009908:	2100      	movs	r1, #0
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff fc6d 	bl	80091ea <dir_next>
 8009910:	4603      	mov	r3, r0
 8009912:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f43f af65 	beq.w	80097e6 <dir_find+0x34>
 800991c:	e004      	b.n	8009928 <dir_find+0x176>
		if (res != FR_OK) break;
 800991e:	bf00      	nop
 8009920:	e002      	b.n	8009928 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009922:	bf00      	nop
 8009924:	e000      	b.n	8009928 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009926:	bf00      	nop

	return res;
 8009928:	7dfb      	ldrb	r3, [r7, #23]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08c      	sub	sp, #48	; 0x30
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009948:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <dir_register+0x20>
 8009950:	2306      	movs	r3, #6
 8009952:	e0e0      	b.n	8009b16 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009954:	2300      	movs	r3, #0
 8009956:	627b      	str	r3, [r7, #36]	; 0x24
 8009958:	e002      	b.n	8009960 <dir_register+0x2c>
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	3301      	adds	r3, #1
 800995e:	627b      	str	r3, [r7, #36]	; 0x24
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	691a      	ldr	r2, [r3, #16]
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	005b      	lsls	r3, r3, #1
 8009968:	4413      	add	r3, r2
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1f4      	bne.n	800995a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009976:	f107 030c 	add.w	r3, r7, #12
 800997a:	220c      	movs	r2, #12
 800997c:	4618      	mov	r0, r3
 800997e:	f7fe fd9b 	bl	80084b8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d032      	beq.n	80099f2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2240      	movs	r2, #64	; 0x40
 8009990:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009994:	2301      	movs	r3, #1
 8009996:	62bb      	str	r3, [r7, #40]	; 0x28
 8009998:	e016      	b.n	80099c8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	f107 010c 	add.w	r1, r7, #12
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	f7ff fe53 	bl	8009654 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7ff feff 	bl	80097b2 <dir_find>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80099ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d106      	bne.n	80099d0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	3301      	adds	r3, #1
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	2b63      	cmp	r3, #99	; 0x63
 80099cc:	d9e5      	bls.n	800999a <dir_register+0x66>
 80099ce:	e000      	b.n	80099d2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80099d0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	2b64      	cmp	r3, #100	; 0x64
 80099d6:	d101      	bne.n	80099dc <dir_register+0xa8>
 80099d8:	2307      	movs	r3, #7
 80099da:	e09c      	b.n	8009b16 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80099dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d002      	beq.n	80099ea <dir_register+0xb6>
 80099e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099e8:	e095      	b.n	8009b16 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80099ea:	7dfa      	ldrb	r2, [r7, #23]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d007      	beq.n	8009a0c <dir_register+0xd8>
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	330c      	adds	r3, #12
 8009a00:	4a47      	ldr	r2, [pc, #284]	; (8009b20 <dir_register+0x1ec>)
 8009a02:	fba2 2303 	umull	r2, r3, r2, r3
 8009a06:	089b      	lsrs	r3, r3, #2
 8009a08:	3301      	adds	r3, #1
 8009a0a:	e000      	b.n	8009a0e <dir_register+0xda>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009a10:	6a39      	ldr	r1, [r7, #32]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7ff fcbf 	bl	8009396 <dir_alloc>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d148      	bne.n	8009ab8 <dir_register+0x184>
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	623b      	str	r3, [r7, #32]
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d042      	beq.n	8009ab8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	695a      	ldr	r2, [r3, #20]
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	015b      	lsls	r3, r3, #5
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7ff fb4a 	bl	80090d8 <dir_sdi>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d132      	bne.n	8009ab8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3324      	adds	r3, #36	; 0x24
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff fe8a 	bl	8009770 <sum_sfn>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	4619      	mov	r1, r3
 8009a66:	69f8      	ldr	r0, [r7, #28]
 8009a68:	f7fe ff54 	bl	8008914 <move_window>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d11d      	bne.n	8009ab6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	6918      	ldr	r0, [r3, #16]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a19      	ldr	r1, [r3, #32]
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	7efb      	ldrb	r3, [r7, #27]
 8009a88:	f7ff fd7c 	bl	8009584 <put_lfn>
				fs->wflag = 1;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009a92:	2100      	movs	r1, #0
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff fba8 	bl	80091ea <dir_next>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d107      	bne.n	8009ab8 <dir_register+0x184>
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	623b      	str	r3, [r7, #32]
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1d5      	bne.n	8009a60 <dir_register+0x12c>
 8009ab4:	e000      	b.n	8009ab8 <dir_register+0x184>
				if (res != FR_OK) break;
 8009ab6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d128      	bne.n	8009b12 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	69f8      	ldr	r0, [r7, #28]
 8009ac8:	f7fe ff24 	bl	8008914 <move_window>
 8009acc:	4603      	mov	r3, r0
 8009ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d11b      	bne.n	8009b12 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe fd09 	bl	80084fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a18      	ldr	r0, [r3, #32]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3324      	adds	r3, #36	; 0x24
 8009af0:	220b      	movs	r2, #11
 8009af2:	4619      	mov	r1, r3
 8009af4:	f7fe fce0 	bl	80084b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	330c      	adds	r3, #12
 8009b04:	f002 0218 	and.w	r2, r2, #24
 8009b08:	b2d2      	uxtb	r2, r2
 8009b0a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3730      	adds	r7, #48	; 0x30
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	4ec4ec4f 	.word	0x4ec4ec4f

08009b24 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b08a      	sub	sp, #40	; 0x28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	613b      	str	r3, [r7, #16]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	617b      	str	r3, [r7, #20]
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	61ba      	str	r2, [r7, #24]
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b54:	2b1f      	cmp	r3, #31
 8009b56:	d940      	bls.n	8009bda <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b5a:	2b2f      	cmp	r3, #47	; 0x2f
 8009b5c:	d006      	beq.n	8009b6c <create_name+0x48>
 8009b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b60:	2b5c      	cmp	r3, #92	; 0x5c
 8009b62:	d110      	bne.n	8009b86 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009b64:	e002      	b.n	8009b6c <create_name+0x48>
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	61bb      	str	r3, [r7, #24]
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	4413      	add	r3, r2
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b2f      	cmp	r3, #47	; 0x2f
 8009b76:	d0f6      	beq.n	8009b66 <create_name+0x42>
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	2b5c      	cmp	r3, #92	; 0x5c
 8009b82:	d0f0      	beq.n	8009b66 <create_name+0x42>
			break;
 8009b84:	e02a      	b.n	8009bdc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2bfe      	cmp	r3, #254	; 0xfe
 8009b8a:	d901      	bls.n	8009b90 <create_name+0x6c>
 8009b8c:	2306      	movs	r3, #6
 8009b8e:	e17d      	b.n	8009e8c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009b90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b98:	2101      	movs	r1, #1
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f001 faa6 	bl	800b0ec <ff_convert>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <create_name+0x8a>
 8009baa:	2306      	movs	r3, #6
 8009bac:	e16e      	b.n	8009e8c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009bae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8009bb2:	d809      	bhi.n	8009bc8 <create_name+0xa4>
 8009bb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	488d      	ldr	r0, [pc, #564]	; (8009df0 <create_name+0x2cc>)
 8009bba:	f7fe fce0 	bl	800857e <chk_chr>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <create_name+0xa4>
 8009bc4:	2306      	movs	r3, #6
 8009bc6:	e161      	b.n	8009e8c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	617a      	str	r2, [r7, #20]
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009bd6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009bd8:	e7b4      	b.n	8009b44 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009bda:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	441a      	add	r2, r3
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009be8:	2b1f      	cmp	r3, #31
 8009bea:	d801      	bhi.n	8009bf0 <create_name+0xcc>
 8009bec:	2304      	movs	r3, #4
 8009bee:	e000      	b.n	8009bf2 <create_name+0xce>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009bf6:	e011      	b.n	8009c1c <create_name+0xf8>
		w = lfn[di - 1];
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	005b      	lsls	r3, r3, #1
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c0c:	2b20      	cmp	r3, #32
 8009c0e:	d002      	beq.n	8009c16 <create_name+0xf2>
 8009c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c12:	2b2e      	cmp	r3, #46	; 0x2e
 8009c14:	d106      	bne.n	8009c24 <create_name+0x100>
		di--;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1ea      	bne.n	8009bf8 <create_name+0xd4>
 8009c22:	e000      	b.n	8009c26 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009c24:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <create_name+0x118>
 8009c38:	2306      	movs	r3, #6
 8009c3a:	e127      	b.n	8009e8c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3324      	adds	r3, #36	; 0x24
 8009c40:	220b      	movs	r2, #11
 8009c42:	2120      	movs	r1, #32
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fc58 	bl	80084fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	61bb      	str	r3, [r7, #24]
 8009c4e:	e002      	b.n	8009c56 <create_name+0x132>
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	3301      	adds	r3, #1
 8009c54:	61bb      	str	r3, [r7, #24]
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	2b20      	cmp	r3, #32
 8009c62:	d0f5      	beq.n	8009c50 <create_name+0x12c>
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c70:	d0ee      	beq.n	8009c50 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d009      	beq.n	8009c8c <create_name+0x168>
 8009c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c7c:	f043 0303 	orr.w	r3, r3, #3
 8009c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009c84:	e002      	b.n	8009c8c <create_name+0x168>
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d009      	beq.n	8009ca6 <create_name+0x182>
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ca4:	d1ef      	bne.n	8009c86 <create_name+0x162>

	i = b = 0; ni = 8;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009cac:	2300      	movs	r3, #0
 8009cae:	623b      	str	r3, [r7, #32]
 8009cb0:	2308      	movs	r3, #8
 8009cb2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	61ba      	str	r2, [r7, #24]
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 8090 	beq.w	8009dec <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009ccc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cce:	2b20      	cmp	r3, #32
 8009cd0:	d006      	beq.n	8009ce0 <create_name+0x1bc>
 8009cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8009cd6:	d10a      	bne.n	8009cee <create_name+0x1ca>
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d006      	beq.n	8009cee <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ce4:	f043 0303 	orr.w	r3, r3, #3
 8009ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009cec:	e07d      	b.n	8009dea <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009cee:	6a3a      	ldr	r2, [r7, #32]
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d203      	bcs.n	8009cfe <create_name+0x1da>
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d123      	bne.n	8009d46 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	2b0b      	cmp	r3, #11
 8009d02:	d106      	bne.n	8009d12 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d08:	f043 0303 	orr.w	r3, r3, #3
 8009d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d10:	e075      	b.n	8009dfe <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d005      	beq.n	8009d26 <create_name+0x202>
 8009d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d1e:	f043 0303 	orr.w	r3, r3, #3
 8009d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009d26:	69ba      	ldr	r2, [r7, #24]
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d866      	bhi.n	8009dfc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	61bb      	str	r3, [r7, #24]
 8009d32:	2308      	movs	r3, #8
 8009d34:	623b      	str	r3, [r7, #32]
 8009d36:	230b      	movs	r3, #11
 8009d38:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009d3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009d44:	e051      	b.n	8009dea <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d48:	2b7f      	cmp	r3, #127	; 0x7f
 8009d4a:	d914      	bls.n	8009d76 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d4e:	2100      	movs	r1, #0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 f9cb 	bl	800b0ec <ff_convert>
 8009d56:	4603      	mov	r3, r0
 8009d58:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <create_name+0x246>
 8009d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d62:	3b80      	subs	r3, #128	; 0x80
 8009d64:	4a23      	ldr	r2, [pc, #140]	; (8009df4 <create_name+0x2d0>)
 8009d66:	5cd3      	ldrb	r3, [r2, r3]
 8009d68:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d6e:	f043 0302 	orr.w	r3, r3, #2
 8009d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d007      	beq.n	8009d8c <create_name+0x268>
 8009d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d7e:	4619      	mov	r1, r3
 8009d80:	481d      	ldr	r0, [pc, #116]	; (8009df8 <create_name+0x2d4>)
 8009d82:	f7fe fbfc 	bl	800857e <chk_chr>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d008      	beq.n	8009d9e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009d8c:	235f      	movs	r3, #95	; 0x5f
 8009d8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d94:	f043 0303 	orr.w	r3, r3, #3
 8009d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d9c:	e01b      	b.n	8009dd6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009da0:	2b40      	cmp	r3, #64	; 0x40
 8009da2:	d909      	bls.n	8009db8 <create_name+0x294>
 8009da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009da6:	2b5a      	cmp	r3, #90	; 0x5a
 8009da8:	d806      	bhi.n	8009db8 <create_name+0x294>
					b |= 2;
 8009daa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dae:	f043 0302 	orr.w	r3, r3, #2
 8009db2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009db6:	e00e      	b.n	8009dd6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dba:	2b60      	cmp	r3, #96	; 0x60
 8009dbc:	d90b      	bls.n	8009dd6 <create_name+0x2b2>
 8009dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dc0:	2b7a      	cmp	r3, #122	; 0x7a
 8009dc2:	d808      	bhi.n	8009dd6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dc8:	f043 0301 	orr.w	r3, r3, #1
 8009dcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dd2:	3b20      	subs	r3, #32
 8009dd4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	623a      	str	r2, [r7, #32]
 8009ddc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009dde:	b2d1      	uxtb	r1, r2
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	4413      	add	r3, r2
 8009de4:	460a      	mov	r2, r1
 8009de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009dea:	e763      	b.n	8009cb4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009dec:	bf00      	nop
 8009dee:	e006      	b.n	8009dfe <create_name+0x2da>
 8009df0:	0800e51c 	.word	0x0800e51c
 8009df4:	0800e584 	.word	0x0800e584
 8009df8:	0800e528 	.word	0x0800e528
			if (si > di) break;			/* No extension */
 8009dfc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e04:	2be5      	cmp	r3, #229	; 0xe5
 8009e06:	d103      	bne.n	8009e10 <create_name+0x2ec>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2205      	movs	r2, #5
 8009e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	2b08      	cmp	r3, #8
 8009e14:	d104      	bne.n	8009e20 <create_name+0x2fc>
 8009e16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e24:	f003 030c 	and.w	r3, r3, #12
 8009e28:	2b0c      	cmp	r3, #12
 8009e2a:	d005      	beq.n	8009e38 <create_name+0x314>
 8009e2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e30:	f003 0303 	and.w	r3, r3, #3
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	d105      	bne.n	8009e44 <create_name+0x320>
 8009e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e3c:	f043 0302 	orr.w	r3, r3, #2
 8009e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e48:	f003 0302 	and.w	r3, r3, #2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d117      	bne.n	8009e80 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009e50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e54:	f003 0303 	and.w	r3, r3, #3
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d105      	bne.n	8009e68 <create_name+0x344>
 8009e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e60:	f043 0310 	orr.w	r3, r3, #16
 8009e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009e68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e6c:	f003 030c 	and.w	r3, r3, #12
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d105      	bne.n	8009e80 <create_name+0x35c>
 8009e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e78:	f043 0308 	orr.w	r3, r3, #8
 8009e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009e86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009e8a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3728      	adds	r7, #40	; 0x28
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009ea8:	e002      	b.n	8009eb0 <follow_path+0x1c>
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	3301      	adds	r3, #1
 8009eae:	603b      	str	r3, [r7, #0]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b2f      	cmp	r3, #47	; 0x2f
 8009eb6:	d0f8      	beq.n	8009eaa <follow_path+0x16>
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b5c      	cmp	r3, #92	; 0x5c
 8009ebe:	d0f4      	beq.n	8009eaa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	2b1f      	cmp	r3, #31
 8009ecc:	d80a      	bhi.n	8009ee4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2280      	movs	r2, #128	; 0x80
 8009ed2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7ff f8fd 	bl	80090d8 <dir_sdi>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	75fb      	strb	r3, [r7, #23]
 8009ee2:	e048      	b.n	8009f76 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ee4:	463b      	mov	r3, r7
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fe1b 	bl	8009b24 <create_name>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d139      	bne.n	8009f6c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff fc5a 	bl	80097b2 <dir_find>
 8009efe:	4603      	mov	r3, r0
 8009f00:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f08:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00a      	beq.n	8009f26 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	d12c      	bne.n	8009f70 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f16:	7afb      	ldrb	r3, [r7, #11]
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d127      	bne.n	8009f70 <follow_path+0xdc>
 8009f20:	2305      	movs	r3, #5
 8009f22:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009f24:	e024      	b.n	8009f70 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f26:	7afb      	ldrb	r3, [r7, #11]
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d121      	bne.n	8009f74 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	799b      	ldrb	r3, [r3, #6]
 8009f34:	f003 0310 	and.w	r3, r3, #16
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d102      	bne.n	8009f42 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009f3c:	2305      	movs	r3, #5
 8009f3e:	75fb      	strb	r3, [r7, #23]
 8009f40:	e019      	b.n	8009f76 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	695b      	ldr	r3, [r3, #20]
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	8992      	ldrh	r2, [r2, #12]
 8009f50:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f54:	fb00 f202 	mul.w	r2, r0, r2
 8009f58:	1a9b      	subs	r3, r3, r2
 8009f5a:	440b      	add	r3, r1
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f7ff fa60 	bl	8009424 <ld_clust>
 8009f64:	4602      	mov	r2, r0
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f6a:	e7bb      	b.n	8009ee4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009f6c:	bf00      	nop
 8009f6e:	e002      	b.n	8009f76 <follow_path+0xe2>
				break;
 8009f70:	bf00      	nop
 8009f72:	e000      	b.n	8009f76 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f74:	bf00      	nop
			}
		}
	}

	return res;
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009f88:	f04f 33ff 	mov.w	r3, #4294967295
 8009f8c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d031      	beq.n	8009ffa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	e002      	b.n	8009fa4 <get_ldnumber+0x24>
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2b1f      	cmp	r3, #31
 8009faa:	d903      	bls.n	8009fb4 <get_ldnumber+0x34>
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	2b3a      	cmp	r3, #58	; 0x3a
 8009fb2:	d1f4      	bne.n	8009f9e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b3a      	cmp	r3, #58	; 0x3a
 8009fba:	d11c      	bne.n	8009ff6 <get_ldnumber+0x76>
			tp = *path;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	1c5a      	adds	r2, r3, #1
 8009fc6:	60fa      	str	r2, [r7, #12]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	3b30      	subs	r3, #48	; 0x30
 8009fcc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	2b09      	cmp	r3, #9
 8009fd2:	d80e      	bhi.n	8009ff2 <get_ldnumber+0x72>
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d10a      	bne.n	8009ff2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d107      	bne.n	8009ff2 <get_ldnumber+0x72>
					vol = (int)i;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	617b      	str	r3, [r7, #20]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	e002      	b.n	8009ffc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009ffa:	693b      	ldr	r3, [r7, #16]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	371c      	adds	r7, #28
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	70da      	strb	r2, [r3, #3]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f04f 32ff 	mov.w	r2, #4294967295
 800a01e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7fe fc76 	bl	8008914 <move_window>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <check_fs+0x2a>
 800a02e:	2304      	movs	r3, #4
 800a030:	e038      	b.n	800a0a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3338      	adds	r3, #56	; 0x38
 800a036:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe f9ba 	bl	80083b4 <ld_word>
 800a040:	4603      	mov	r3, r0
 800a042:	461a      	mov	r2, r3
 800a044:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a048:	429a      	cmp	r2, r3
 800a04a:	d001      	beq.n	800a050 <check_fs+0x48>
 800a04c:	2303      	movs	r3, #3
 800a04e:	e029      	b.n	800a0a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a056:	2be9      	cmp	r3, #233	; 0xe9
 800a058:	d009      	beq.n	800a06e <check_fs+0x66>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a060:	2beb      	cmp	r3, #235	; 0xeb
 800a062:	d11e      	bne.n	800a0a2 <check_fs+0x9a>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a06a:	2b90      	cmp	r3, #144	; 0x90
 800a06c:	d119      	bne.n	800a0a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	3338      	adds	r3, #56	; 0x38
 800a072:	3336      	adds	r3, #54	; 0x36
 800a074:	4618      	mov	r0, r3
 800a076:	f7fe f9b5 	bl	80083e4 <ld_dword>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a080:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <check_fs+0xa4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d101      	bne.n	800a08a <check_fs+0x82>
 800a086:	2300      	movs	r3, #0
 800a088:	e00c      	b.n	800a0a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3338      	adds	r3, #56	; 0x38
 800a08e:	3352      	adds	r3, #82	; 0x52
 800a090:	4618      	mov	r0, r3
 800a092:	f7fe f9a7 	bl	80083e4 <ld_dword>
 800a096:	4603      	mov	r3, r0
 800a098:	4a05      	ldr	r2, [pc, #20]	; (800a0b0 <check_fs+0xa8>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d101      	bne.n	800a0a2 <check_fs+0x9a>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	e000      	b.n	800a0a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a0a2:	2302      	movs	r3, #2
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	00544146 	.word	0x00544146
 800a0b0:	33544146 	.word	0x33544146

0800a0b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b096      	sub	sp, #88	; 0x58
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f7ff ff59 	bl	8009f80 <get_ldnumber>
 800a0ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	da01      	bge.n	800a0da <find_volume+0x26>
 800a0d6:	230b      	movs	r3, #11
 800a0d8:	e265      	b.n	800a5a6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a0da:	4a9f      	ldr	r2, [pc, #636]	; (800a358 <find_volume+0x2a4>)
 800a0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d101      	bne.n	800a0ee <find_volume+0x3a>
 800a0ea:	230c      	movs	r3, #12
 800a0ec:	e25b      	b.n	800a5a6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	f023 0301 	bic.w	r3, r3, #1
 800a0fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d01a      	beq.n	800a13a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	785b      	ldrb	r3, [r3, #1]
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe f8b5 	bl	8008278 <disk_status>
 800a10e:	4603      	mov	r3, r0
 800a110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a114:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10c      	bne.n	800a13a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a120:	79fb      	ldrb	r3, [r7, #7]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d007      	beq.n	800a136 <find_volume+0x82>
 800a126:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a12a:	f003 0304 	and.w	r3, r3, #4
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a132:	230a      	movs	r3, #10
 800a134:	e237      	b.n	800a5a6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a136:	2300      	movs	r3, #0
 800a138:	e235      	b.n	800a5a6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a142:	b2da      	uxtb	r2, r3
 800a144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a146:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	785b      	ldrb	r3, [r3, #1]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fe f8ad 	bl	80082ac <disk_initialize>
 800a152:	4603      	mov	r3, r0
 800a154:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a158:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a164:	2303      	movs	r3, #3
 800a166:	e21e      	b.n	800a5a6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d007      	beq.n	800a17e <find_volume+0xca>
 800a16e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a172:	f003 0304 	and.w	r3, r3, #4
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a17a:	230a      	movs	r3, #10
 800a17c:	e213      	b.n	800a5a6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a180:	7858      	ldrb	r0, [r3, #1]
 800a182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a184:	330c      	adds	r3, #12
 800a186:	461a      	mov	r2, r3
 800a188:	2102      	movs	r1, #2
 800a18a:	f7fe f8f5 	bl	8008378 <disk_ioctl>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <find_volume+0xe4>
 800a194:	2301      	movs	r3, #1
 800a196:	e206      	b.n	800a5a6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19a:	899b      	ldrh	r3, [r3, #12]
 800a19c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a0:	d80d      	bhi.n	800a1be <find_volume+0x10a>
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a4:	899b      	ldrh	r3, [r3, #12]
 800a1a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1aa:	d308      	bcc.n	800a1be <find_volume+0x10a>
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	899b      	ldrh	r3, [r3, #12]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	899b      	ldrh	r3, [r3, #12]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <find_volume+0x10e>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e1f1      	b.n	800a5a6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a1c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1ca:	f7ff ff1d 	bl	800a008 <check_fs>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a1d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d149      	bne.n	800a270 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a1dc:	2300      	movs	r3, #0
 800a1de:	643b      	str	r3, [r7, #64]	; 0x40
 800a1e0:	e01e      	b.n	800a220 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a1f0:	4413      	add	r3, r2
 800a1f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d006      	beq.n	800a20c <find_volume+0x158>
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	3308      	adds	r3, #8
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe f8ee 	bl	80083e4 <ld_dword>
 800a208:	4602      	mov	r2, r0
 800a20a:	e000      	b.n	800a20e <find_volume+0x15a>
 800a20c:	2200      	movs	r2, #0
 800a20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	3358      	adds	r3, #88	; 0x58
 800a214:	443b      	add	r3, r7
 800a216:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a21c:	3301      	adds	r3, #1
 800a21e:	643b      	str	r3, [r7, #64]	; 0x40
 800a220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a222:	2b03      	cmp	r3, #3
 800a224:	d9dd      	bls.n	800a1e2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a226:	2300      	movs	r3, #0
 800a228:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <find_volume+0x182>
 800a230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a232:	3b01      	subs	r3, #1
 800a234:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	3358      	adds	r3, #88	; 0x58
 800a23c:	443b      	add	r3, r7
 800a23e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a242:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a246:	2b00      	cmp	r3, #0
 800a248:	d005      	beq.n	800a256 <find_volume+0x1a2>
 800a24a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a24c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a24e:	f7ff fedb 	bl	800a008 <check_fs>
 800a252:	4603      	mov	r3, r0
 800a254:	e000      	b.n	800a258 <find_volume+0x1a4>
 800a256:	2303      	movs	r3, #3
 800a258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a25c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a260:	2b01      	cmp	r3, #1
 800a262:	d905      	bls.n	800a270 <find_volume+0x1bc>
 800a264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a266:	3301      	adds	r3, #1
 800a268:	643b      	str	r3, [r7, #64]	; 0x40
 800a26a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d9e2      	bls.n	800a236 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a274:	2b04      	cmp	r3, #4
 800a276:	d101      	bne.n	800a27c <find_volume+0x1c8>
 800a278:	2301      	movs	r3, #1
 800a27a:	e194      	b.n	800a5a6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a27c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a280:	2b01      	cmp	r3, #1
 800a282:	d901      	bls.n	800a288 <find_volume+0x1d4>
 800a284:	230d      	movs	r3, #13
 800a286:	e18e      	b.n	800a5a6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	3338      	adds	r3, #56	; 0x38
 800a28c:	330b      	adds	r3, #11
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe f890 	bl	80083b4 <ld_word>
 800a294:	4603      	mov	r3, r0
 800a296:	461a      	mov	r2, r3
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	899b      	ldrh	r3, [r3, #12]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d001      	beq.n	800a2a4 <find_volume+0x1f0>
 800a2a0:	230d      	movs	r3, #13
 800a2a2:	e180      	b.n	800a5a6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a6:	3338      	adds	r3, #56	; 0x38
 800a2a8:	3316      	adds	r3, #22
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fe f882 	bl	80083b4 <ld_word>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d106      	bne.n	800a2c8 <find_volume+0x214>
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2bc:	3338      	adds	r3, #56	; 0x38
 800a2be:	3324      	adds	r3, #36	; 0x24
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe f88f 	bl	80083e4 <ld_dword>
 800a2c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2cc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	789b      	ldrb	r3, [r3, #2]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d005      	beq.n	800a2ec <find_volume+0x238>
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	789b      	ldrb	r3, [r3, #2]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d001      	beq.n	800a2ec <find_volume+0x238>
 800a2e8:	230d      	movs	r3, #13
 800a2ea:	e15c      	b.n	800a5a6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	789b      	ldrb	r3, [r3, #2]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2f4:	fb02 f303 	mul.w	r3, r2, r3
 800a2f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a300:	b29a      	uxth	r2, r3
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a308:	895b      	ldrh	r3, [r3, #10]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d008      	beq.n	800a320 <find_volume+0x26c>
 800a30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a310:	895b      	ldrh	r3, [r3, #10]
 800a312:	461a      	mov	r2, r3
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	895b      	ldrh	r3, [r3, #10]
 800a318:	3b01      	subs	r3, #1
 800a31a:	4013      	ands	r3, r2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <find_volume+0x270>
 800a320:	230d      	movs	r3, #13
 800a322:	e140      	b.n	800a5a6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a326:	3338      	adds	r3, #56	; 0x38
 800a328:	3311      	adds	r3, #17
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe f842 	bl	80083b4 <ld_word>
 800a330:	4603      	mov	r3, r0
 800a332:	461a      	mov	r2, r3
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	891b      	ldrh	r3, [r3, #8]
 800a33c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a33e:	8992      	ldrh	r2, [r2, #12]
 800a340:	0952      	lsrs	r2, r2, #5
 800a342:	b292      	uxth	r2, r2
 800a344:	fbb3 f1f2 	udiv	r1, r3, r2
 800a348:	fb01 f202 	mul.w	r2, r1, r2
 800a34c:	1a9b      	subs	r3, r3, r2
 800a34e:	b29b      	uxth	r3, r3
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <find_volume+0x2a8>
 800a354:	230d      	movs	r3, #13
 800a356:	e126      	b.n	800a5a6 <find_volume+0x4f2>
 800a358:	20002828 	.word	0x20002828

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35e:	3338      	adds	r3, #56	; 0x38
 800a360:	3313      	adds	r3, #19
 800a362:	4618      	mov	r0, r3
 800a364:	f7fe f826 	bl	80083b4 <ld_word>
 800a368:	4603      	mov	r3, r0
 800a36a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d106      	bne.n	800a380 <find_volume+0x2cc>
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	3338      	adds	r3, #56	; 0x38
 800a376:	3320      	adds	r3, #32
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fe f833 	bl	80083e4 <ld_dword>
 800a37e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	3338      	adds	r3, #56	; 0x38
 800a384:	330e      	adds	r3, #14
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe f814 	bl	80083b4 <ld_word>
 800a38c:	4603      	mov	r3, r0
 800a38e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a390:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <find_volume+0x2e6>
 800a396:	230d      	movs	r3, #13
 800a398:	e105      	b.n	800a5a6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a39a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39e:	4413      	add	r3, r2
 800a3a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3a2:	8911      	ldrh	r1, [r2, #8]
 800a3a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3a6:	8992      	ldrh	r2, [r2, #12]
 800a3a8:	0952      	lsrs	r2, r2, #5
 800a3aa:	b292      	uxth	r2, r2
 800a3ac:	fbb1 f2f2 	udiv	r2, r1, r2
 800a3b0:	b292      	uxth	r2, r2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a3b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d201      	bcs.n	800a3c2 <find_volume+0x30e>
 800a3be:	230d      	movs	r3, #13
 800a3c0:	e0f1      	b.n	800a5a6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a3c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3ca:	8952      	ldrh	r2, [r2, #10]
 800a3cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <find_volume+0x328>
 800a3d8:	230d      	movs	r3, #13
 800a3da:	e0e4      	b.n	800a5a6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d802      	bhi.n	800a3f2 <find_volume+0x33e>
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d802      	bhi.n	800a402 <find_volume+0x34e>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	1c9a      	adds	r2, r3, #2
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a40e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a410:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a414:	441a      	add	r2, r3
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a41a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	441a      	add	r2, r3
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a424:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d11e      	bne.n	800a46a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	3338      	adds	r3, #56	; 0x38
 800a430:	332a      	adds	r3, #42	; 0x2a
 800a432:	4618      	mov	r0, r3
 800a434:	f7fd ffbe 	bl	80083b4 <ld_word>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <find_volume+0x38e>
 800a43e:	230d      	movs	r3, #13
 800a440:	e0b1      	b.n	800a5a6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	891b      	ldrh	r3, [r3, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <find_volume+0x39a>
 800a44a:	230d      	movs	r3, #13
 800a44c:	e0ab      	b.n	800a5a6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	3338      	adds	r3, #56	; 0x38
 800a452:	332c      	adds	r3, #44	; 0x2c
 800a454:	4618      	mov	r0, r3
 800a456:	f7fd ffc5 	bl	80083e4 <ld_dword>
 800a45a:	4602      	mov	r2, r0
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	647b      	str	r3, [r7, #68]	; 0x44
 800a468:	e01f      	b.n	800a4aa <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	891b      	ldrh	r3, [r3, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <find_volume+0x3c2>
 800a472:	230d      	movs	r3, #13
 800a474:	e097      	b.n	800a5a6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a47c:	441a      	add	r2, r3
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a482:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a486:	2b02      	cmp	r3, #2
 800a488:	d103      	bne.n	800a492 <find_volume+0x3de>
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	e00a      	b.n	800a4a8 <find_volume+0x3f4>
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	69da      	ldr	r2, [r3, #28]
 800a496:	4613      	mov	r3, r2
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	4413      	add	r3, r2
 800a49c:	085a      	lsrs	r2, r3, #1
 800a49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a0:	69db      	ldr	r3, [r3, #28]
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a4a8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ac:	6a1a      	ldr	r2, [r3, #32]
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	899b      	ldrh	r3, [r3, #12]
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b6:	440b      	add	r3, r1
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4bc:	8989      	ldrh	r1, [r1, #12]
 800a4be:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d201      	bcs.n	800a4ca <find_volume+0x416>
 800a4c6:	230d      	movs	r3, #13
 800a4c8:	e06d      	b.n	800a5a6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d0:	619a      	str	r2, [r3, #24]
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d4:	699a      	ldr	r2, [r3, #24]
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4dc:	2280      	movs	r2, #128	; 0x80
 800a4de:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a4e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	d149      	bne.n	800a57c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ea:	3338      	adds	r3, #56	; 0x38
 800a4ec:	3330      	adds	r3, #48	; 0x30
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fd ff60 	bl	80083b4 <ld_word>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d140      	bne.n	800a57c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	4619      	mov	r1, r3
 800a500:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a502:	f7fe fa07 	bl	8008914 <move_window>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d137      	bne.n	800a57c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	2200      	movs	r2, #0
 800a510:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	3338      	adds	r3, #56	; 0x38
 800a516:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fd ff4a 	bl	80083b4 <ld_word>
 800a520:	4603      	mov	r3, r0
 800a522:	461a      	mov	r2, r3
 800a524:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a528:	429a      	cmp	r2, r3
 800a52a:	d127      	bne.n	800a57c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52e:	3338      	adds	r3, #56	; 0x38
 800a530:	4618      	mov	r0, r3
 800a532:	f7fd ff57 	bl	80083e4 <ld_dword>
 800a536:	4603      	mov	r3, r0
 800a538:	4a1d      	ldr	r2, [pc, #116]	; (800a5b0 <find_volume+0x4fc>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d11e      	bne.n	800a57c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	3338      	adds	r3, #56	; 0x38
 800a542:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a546:	4618      	mov	r0, r3
 800a548:	f7fd ff4c 	bl	80083e4 <ld_dword>
 800a54c:	4603      	mov	r3, r0
 800a54e:	4a19      	ldr	r2, [pc, #100]	; (800a5b4 <find_volume+0x500>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d113      	bne.n	800a57c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	3338      	adds	r3, #56	; 0x38
 800a558:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fd ff41 	bl	80083e4 <ld_dword>
 800a562:	4602      	mov	r2, r0
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56a:	3338      	adds	r3, #56	; 0x38
 800a56c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a570:	4618      	mov	r0, r3
 800a572:	f7fd ff37 	bl	80083e4 <ld_dword>
 800a576:	4602      	mov	r2, r0
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a582:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a584:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <find_volume+0x504>)
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	3301      	adds	r3, #1
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <find_volume+0x504>)
 800a58e:	801a      	strh	r2, [r3, #0]
 800a590:	4b09      	ldr	r3, [pc, #36]	; (800a5b8 <find_volume+0x504>)
 800a592:	881a      	ldrh	r2, [r3, #0]
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	4a08      	ldr	r2, [pc, #32]	; (800a5bc <find_volume+0x508>)
 800a59c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a59e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5a0:	f7fe f950 	bl	8008844 <clear_lock>
#endif
	return FR_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3758      	adds	r7, #88	; 0x58
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	41615252 	.word	0x41615252
 800a5b4:	61417272 	.word	0x61417272
 800a5b8:	2000282c 	.word	0x2000282c
 800a5bc:	20002850 	.word	0x20002850

0800a5c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a5ca:	2309      	movs	r3, #9
 800a5cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d01c      	beq.n	800a60e <validate+0x4e>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d018      	beq.n	800a60e <validate+0x4e>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d013      	beq.n	800a60e <validate+0x4e>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	889a      	ldrh	r2, [r3, #4]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	88db      	ldrh	r3, [r3, #6]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d10c      	bne.n	800a60e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	785b      	ldrb	r3, [r3, #1]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fd fe3c 	bl	8008278 <disk_status>
 800a600:	4603      	mov	r3, r0
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <validate+0x4e>
			res = FR_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d102      	bne.n	800a61a <validate+0x5a>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	e000      	b.n	800a61c <validate+0x5c>
 800a61a:	2300      	movs	r3, #0
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	6013      	str	r3, [r2, #0]
	return res;
 800a620:	7bfb      	ldrb	r3, [r7, #15]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
	...

0800a62c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	4613      	mov	r3, r2
 800a638:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a63e:	f107 0310 	add.w	r3, r7, #16
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fc9c 	bl	8009f80 <get_ldnumber>
 800a648:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	da01      	bge.n	800a654 <f_mount+0x28>
 800a650:	230b      	movs	r3, #11
 800a652:	e02b      	b.n	800a6ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a654:	4a17      	ldr	r2, [pc, #92]	; (800a6b4 <f_mount+0x88>)
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a65c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a664:	69b8      	ldr	r0, [r7, #24]
 800a666:	f7fe f8ed 	bl	8008844 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	2200      	movs	r2, #0
 800a66e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	490d      	ldr	r1, [pc, #52]	; (800a6b4 <f_mount+0x88>)
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <f_mount+0x66>
 800a68c:	79fb      	ldrb	r3, [r7, #7]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d001      	beq.n	800a696 <f_mount+0x6a>
 800a692:	2300      	movs	r3, #0
 800a694:	e00a      	b.n	800a6ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a696:	f107 010c 	add.w	r1, r7, #12
 800a69a:	f107 0308 	add.w	r3, r7, #8
 800a69e:	2200      	movs	r2, #0
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff fd07 	bl	800a0b4 <find_volume>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3720      	adds	r7, #32
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20002828 	.word	0x20002828

0800a6b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b09a      	sub	sp, #104	; 0x68
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d101      	bne.n	800a6d0 <f_open+0x18>
 800a6cc:	2309      	movs	r3, #9
 800a6ce:	e1bb      	b.n	800aa48 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a6d0:	79fb      	ldrb	r3, [r7, #7]
 800a6d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a6d8:	79fa      	ldrb	r2, [r7, #7]
 800a6da:	f107 0114 	add.w	r1, r7, #20
 800a6de:	f107 0308 	add.w	r3, r7, #8
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff fce6 	bl	800a0b4 <find_volume>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a6ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f040 819f 	bne.w	800aa36 <f_open+0x37e>
		dj.obj.fs = fs;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	f107 0318 	add.w	r3, r7, #24
 800a702:	4611      	mov	r1, r2
 800a704:	4618      	mov	r0, r3
 800a706:	f7ff fbc5 	bl	8009e94 <follow_path>
 800a70a:	4603      	mov	r3, r0
 800a70c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a710:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a714:	2b00      	cmp	r3, #0
 800a716:	d11a      	bne.n	800a74e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a718:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a71c:	b25b      	sxtb	r3, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	da03      	bge.n	800a72a <f_open+0x72>
				res = FR_INVALID_NAME;
 800a722:	2306      	movs	r3, #6
 800a724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a728:	e011      	b.n	800a74e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	f023 0301 	bic.w	r3, r3, #1
 800a730:	2b00      	cmp	r3, #0
 800a732:	bf14      	ite	ne
 800a734:	2301      	movne	r3, #1
 800a736:	2300      	moveq	r3, #0
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	461a      	mov	r2, r3
 800a73c:	f107 0318 	add.w	r3, r7, #24
 800a740:	4611      	mov	r1, r2
 800a742:	4618      	mov	r0, r3
 800a744:	f7fd ff36 	bl	80085b4 <chk_lock>
 800a748:	4603      	mov	r3, r0
 800a74a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a74e:	79fb      	ldrb	r3, [r7, #7]
 800a750:	f003 031c 	and.w	r3, r3, #28
 800a754:	2b00      	cmp	r3, #0
 800a756:	d07f      	beq.n	800a858 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a758:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d017      	beq.n	800a790 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a760:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a764:	2b04      	cmp	r3, #4
 800a766:	d10e      	bne.n	800a786 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a768:	f7fd ff80 	bl	800866c <enq_lock>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d006      	beq.n	800a780 <f_open+0xc8>
 800a772:	f107 0318 	add.w	r3, r7, #24
 800a776:	4618      	mov	r0, r3
 800a778:	f7ff f8dc 	bl	8009934 <dir_register>
 800a77c:	4603      	mov	r3, r0
 800a77e:	e000      	b.n	800a782 <f_open+0xca>
 800a780:	2312      	movs	r3, #18
 800a782:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a786:	79fb      	ldrb	r3, [r7, #7]
 800a788:	f043 0308 	orr.w	r3, r3, #8
 800a78c:	71fb      	strb	r3, [r7, #7]
 800a78e:	e010      	b.n	800a7b2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a790:	7fbb      	ldrb	r3, [r7, #30]
 800a792:	f003 0311 	and.w	r3, r3, #17
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <f_open+0xea>
					res = FR_DENIED;
 800a79a:	2307      	movs	r3, #7
 800a79c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a7a0:	e007      	b.n	800a7b2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <f_open+0xfa>
 800a7ac:	2308      	movs	r3, #8
 800a7ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a7b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d168      	bne.n	800a88c <f_open+0x1d4>
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	f003 0308 	and.w	r3, r3, #8
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d063      	beq.n	800a88c <f_open+0x1d4>
				dw = GET_FATTIME();
 800a7c4:	f7fd fcf6 	bl	80081b4 <get_fattime>
 800a7c8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7cc:	330e      	adds	r3, #14
 800a7ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fd fe45 	bl	8008460 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d8:	3316      	adds	r3, #22
 800a7da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fd fe3f 	bl	8008460 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	330b      	adds	r3, #11
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fe fe17 	bl	8009424 <ld_clust>
 800a7f6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe fe2f 	bl	8009462 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a806:	331c      	adds	r3, #28
 800a808:	2100      	movs	r1, #0
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fd fe28 	bl	8008460 <st_dword>
					fs->wflag = 1;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	2201      	movs	r2, #1
 800a814:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d037      	beq.n	800a88c <f_open+0x1d4>
						dw = fs->winsect;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a820:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a822:	f107 0318 	add.w	r3, r7, #24
 800a826:	2200      	movs	r2, #0
 800a828:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fe fb1f 	bl	8008e6e <remove_chain>
 800a830:	4603      	mov	r3, r0
 800a832:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a836:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d126      	bne.n	800a88c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a842:	4618      	mov	r0, r3
 800a844:	f7fe f866 	bl	8008914 <move_window>
 800a848:	4603      	mov	r3, r0
 800a84a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a852:	3a01      	subs	r2, #1
 800a854:	615a      	str	r2, [r3, #20]
 800a856:	e019      	b.n	800a88c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a858:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d115      	bne.n	800a88c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a860:	7fbb      	ldrb	r3, [r7, #30]
 800a862:	f003 0310 	and.w	r3, r3, #16
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a86a:	2304      	movs	r3, #4
 800a86c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a870:	e00c      	b.n	800a88c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	f003 0302 	and.w	r3, r3, #2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d007      	beq.n	800a88c <f_open+0x1d4>
 800a87c:	7fbb      	ldrb	r3, [r7, #30]
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d002      	beq.n	800a88c <f_open+0x1d4>
						res = FR_DENIED;
 800a886:	2307      	movs	r3, #7
 800a888:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a88c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a890:	2b00      	cmp	r3, #0
 800a892:	d128      	bne.n	800a8e6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a894:	79fb      	ldrb	r3, [r7, #7]
 800a896:	f003 0308 	and.w	r3, r3, #8
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a89e:	79fb      	ldrb	r3, [r7, #7]
 800a8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a8ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	f023 0301 	bic.w	r3, r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bf14      	ite	ne
 800a8be:	2301      	movne	r3, #1
 800a8c0:	2300      	moveq	r3, #0
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	f107 0318 	add.w	r3, r7, #24
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fd feef 	bl	80086b0 <inc_lock>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d102      	bne.n	800a8e6 <f_open+0x22e>
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a8e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f040 80a3 	bne.w	800aa36 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe fd94 	bl	8009424 <ld_clust>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a904:	331c      	adds	r3, #28
 800a906:	4618      	mov	r0, r3
 800a908:	f7fd fd6c 	bl	80083e4 <ld_dword>
 800a90c:	4602      	mov	r2, r0
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	88da      	ldrh	r2, [r3, #6]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	79fa      	ldrb	r2, [r7, #7]
 800a92a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2200      	movs	r2, #0
 800a930:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3330      	adds	r3, #48	; 0x30
 800a942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a946:	2100      	movs	r1, #0
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fd fdd6 	bl	80084fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	f003 0320 	and.w	r3, r3, #32
 800a954:	2b00      	cmp	r3, #0
 800a956:	d06e      	beq.n	800aa36 <f_open+0x37e>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d06a      	beq.n	800aa36 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	68da      	ldr	r2, [r3, #12]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	895b      	ldrh	r3, [r3, #10]
 800a96c:	461a      	mov	r2, r3
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	899b      	ldrh	r3, [r3, #12]
 800a972:	fb02 f303 	mul.w	r3, r2, r3
 800a976:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a984:	e016      	b.n	800a9b4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe f87f 	bl	8008a8e <get_fat>
 800a990:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a994:	2b01      	cmp	r3, #1
 800a996:	d802      	bhi.n	800a99e <f_open+0x2e6>
 800a998:	2302      	movs	r3, #2
 800a99a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a99e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a4:	d102      	bne.n	800a9ac <f_open+0x2f4>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a9ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d103      	bne.n	800a9c4 <f_open+0x30c>
 800a9bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d8e0      	bhi.n	800a986 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a9ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d131      	bne.n	800aa36 <f_open+0x37e>
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	899b      	ldrh	r3, [r3, #12]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9da:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9de:	fb01 f202 	mul.w	r2, r1, r2
 800a9e2:	1a9b      	subs	r3, r3, r2
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d026      	beq.n	800aa36 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe f82f 	bl	8008a50 <clust2sect>
 800a9f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a9f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d103      	bne.n	800aa02 <f_open+0x34a>
						res = FR_INT_ERR;
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aa00:	e019      	b.n	800aa36 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	899b      	ldrh	r3, [r3, #12]
 800aa06:	461a      	mov	r2, r3
 800aa08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa10:	441a      	add	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	7858      	ldrb	r0, [r3, #1]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a1a      	ldr	r2, [r3, #32]
 800aa24:	2301      	movs	r3, #1
 800aa26:	f7fd fc67 	bl	80082f8 <disk_read>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <f_open+0x37e>
 800aa30:	2301      	movs	r3, #1
 800aa32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aa36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <f_open+0x38c>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aa44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3768      	adds	r7, #104	; 0x68
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08c      	sub	sp, #48	; 0x30
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f107 0210 	add.w	r2, r7, #16
 800aa6e:	4611      	mov	r1, r2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff fda5 	bl	800a5c0 <validate>
 800aa76:	4603      	mov	r3, r0
 800aa78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aa7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d107      	bne.n	800aa94 <f_write+0x44>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	7d5b      	ldrb	r3, [r3, #21]
 800aa88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aa8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <f_write+0x4a>
 800aa94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa98:	e16a      	b.n	800ad70 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	7d1b      	ldrb	r3, [r3, #20]
 800aa9e:	f003 0302 	and.w	r3, r3, #2
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <f_write+0x5a>
 800aaa6:	2307      	movs	r3, #7
 800aaa8:	e162      	b.n	800ad70 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	699a      	ldr	r2, [r3, #24]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	441a      	add	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	f080 814c 	bcs.w	800ad54 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	43db      	mvns	r3, r3
 800aac2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aac4:	e146      	b.n	800ad54 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	8992      	ldrh	r2, [r2, #12]
 800aace:	fbb3 f1f2 	udiv	r1, r3, r2
 800aad2:	fb01 f202 	mul.w	r2, r1, r2
 800aad6:	1a9b      	subs	r3, r3, r2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f040 80f1 	bne.w	800acc0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	8992      	ldrh	r2, [r2, #12]
 800aae6:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	8952      	ldrh	r2, [r2, #10]
 800aaee:	3a01      	subs	r2, #1
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d143      	bne.n	800ab82 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10c      	bne.n	800ab1c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d11a      	bne.n	800ab44 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2100      	movs	r1, #0
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe fa10 	bl	8008f38 <create_chain>
 800ab18:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab1a:	e013      	b.n	800ab44 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d007      	beq.n	800ab34 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7fe fa9c 	bl	8009068 <clmt_clust>
 800ab30:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab32:	e007      	b.n	800ab44 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	69db      	ldr	r3, [r3, #28]
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	f7fe f9fb 	bl	8008f38 <create_chain>
 800ab42:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 8109 	beq.w	800ad5e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d104      	bne.n	800ab5c <f_write+0x10c>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2202      	movs	r2, #2
 800ab56:	755a      	strb	r2, [r3, #21]
 800ab58:	2302      	movs	r3, #2
 800ab5a:	e109      	b.n	800ad70 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab62:	d104      	bne.n	800ab6e <f_write+0x11e>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2201      	movs	r2, #1
 800ab68:	755a      	strb	r2, [r3, #21]
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e100      	b.n	800ad70 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab72:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <f_write+0x132>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab80:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	7d1b      	ldrb	r3, [r3, #20]
 800ab86:	b25b      	sxtb	r3, r3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	da18      	bge.n	800abbe <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	7858      	ldrb	r0, [r3, #1]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6a1a      	ldr	r2, [r3, #32]
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	f7fd fbcc 	bl	8008338 <disk_write>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d004      	beq.n	800abb0 <f_write+0x160>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2201      	movs	r2, #1
 800abaa:	755a      	strb	r2, [r3, #21]
 800abac:	2301      	movs	r3, #1
 800abae:	e0df      	b.n	800ad70 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	7d1b      	ldrb	r3, [r3, #20]
 800abb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abb8:	b2da      	uxtb	r2, r3
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	69db      	ldr	r3, [r3, #28]
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f7fd ff42 	bl	8008a50 <clust2sect>
 800abcc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d104      	bne.n	800abde <f_write+0x18e>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2202      	movs	r2, #2
 800abd8:	755a      	strb	r2, [r3, #21]
 800abda:	2302      	movs	r3, #2
 800abdc:	e0c8      	b.n	800ad70 <f_write+0x320>
			sect += csect;
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	4413      	add	r3, r2
 800abe4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	899b      	ldrh	r3, [r3, #12]
 800abea:	461a      	mov	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	fbb3 f3f2 	udiv	r3, r3, r2
 800abf2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d043      	beq.n	800ac82 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800abfa:	69ba      	ldr	r2, [r7, #24]
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	4413      	add	r3, r2
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	8952      	ldrh	r2, [r2, #10]
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d905      	bls.n	800ac14 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	895b      	ldrh	r3, [r3, #10]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	7858      	ldrb	r0, [r3, #1]
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	69f9      	ldr	r1, [r7, #28]
 800ac1e:	f7fd fb8b 	bl	8008338 <disk_write>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d004      	beq.n	800ac32 <f_write+0x1e2>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	755a      	strb	r2, [r3, #21]
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e09e      	b.n	800ad70 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6a1a      	ldr	r2, [r3, #32]
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	6a3a      	ldr	r2, [r7, #32]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d918      	bls.n	800ac72 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6a1a      	ldr	r2, [r3, #32]
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	8992      	ldrh	r2, [r2, #12]
 800ac52:	fb02 f303 	mul.w	r3, r2, r3
 800ac56:	69fa      	ldr	r2, [r7, #28]
 800ac58:	18d1      	adds	r1, r2, r3
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	899b      	ldrh	r3, [r3, #12]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f7fd fc2a 	bl	80084b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	7d1b      	ldrb	r3, [r3, #20]
 800ac68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	899b      	ldrh	r3, [r3, #12]
 800ac76:	461a      	mov	r2, r3
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	fb02 f303 	mul.w	r3, r2, r3
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ac80:	e04b      	b.n	800ad1a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d016      	beq.n	800acba <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	699a      	ldr	r2, [r3, #24]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d210      	bcs.n	800acba <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	7858      	ldrb	r0, [r3, #1]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aca2:	2301      	movs	r3, #1
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	f7fd fb27 	bl	80082f8 <disk_read>
 800acaa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800acac:	2b00      	cmp	r3, #0
 800acae:	d004      	beq.n	800acba <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2201      	movs	r2, #1
 800acb4:	755a      	strb	r2, [r3, #21]
 800acb6:	2301      	movs	r3, #1
 800acb8:	e05a      	b.n	800ad70 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	697a      	ldr	r2, [r7, #20]
 800acbe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	899b      	ldrh	r3, [r3, #12]
 800acc4:	4618      	mov	r0, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	699b      	ldr	r3, [r3, #24]
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	8992      	ldrh	r2, [r2, #12]
 800acce:	fbb3 f1f2 	udiv	r1, r3, r2
 800acd2:	fb01 f202 	mul.w	r2, r1, r2
 800acd6:	1a9b      	subs	r3, r3, r2
 800acd8:	1ac3      	subs	r3, r0, r3
 800acda:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800acdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d901      	bls.n	800ace8 <f_write+0x298>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	8992      	ldrh	r2, [r2, #12]
 800acf6:	fbb3 f0f2 	udiv	r0, r3, r2
 800acfa:	fb00 f202 	mul.w	r2, r0, r2
 800acfe:	1a9b      	subs	r3, r3, r2
 800ad00:	440b      	add	r3, r1
 800ad02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad04:	69f9      	ldr	r1, [r7, #28]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fd fbd6 	bl	80084b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	7d1b      	ldrb	r3, [r3, #20]
 800ad10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ad1a:	69fa      	ldr	r2, [r7, #28]
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	4413      	add	r3, r2
 800ad20:	61fb      	str	r3, [r7, #28]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	699a      	ldr	r2, [r3, #24]
 800ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad28:	441a      	add	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	619a      	str	r2, [r3, #24]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	68da      	ldr	r2, [r3, #12]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	bf38      	it	cc
 800ad3a:	461a      	movcc	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	60da      	str	r2, [r3, #12]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	441a      	add	r2, r3
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f47f aeb5 	bne.w	800aac6 <f_write+0x76>
 800ad5c:	e000      	b.n	800ad60 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ad5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	7d1b      	ldrb	r3, [r3, #20]
 800ad64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3730      	adds	r7, #48	; 0x30
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f107 0208 	add.w	r2, r7, #8
 800ad86:	4611      	mov	r1, r2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7ff fc19 	bl	800a5c0 <validate>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d168      	bne.n	800ae6a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	7d1b      	ldrb	r3, [r3, #20]
 800ad9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d062      	beq.n	800ae6a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	7d1b      	ldrb	r3, [r3, #20]
 800ada8:	b25b      	sxtb	r3, r3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	da15      	bge.n	800adda <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	7858      	ldrb	r0, [r3, #1]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a1a      	ldr	r2, [r3, #32]
 800adbc:	2301      	movs	r3, #1
 800adbe:	f7fd fabb 	bl	8008338 <disk_write>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <f_sync+0x54>
 800adc8:	2301      	movs	r3, #1
 800adca:	e04f      	b.n	800ae6c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	7d1b      	ldrb	r3, [r3, #20]
 800add0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800add4:	b2da      	uxtb	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800adda:	f7fd f9eb 	bl	80081b4 <get_fattime>
 800adde:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	4619      	mov	r1, r3
 800ade8:	4610      	mov	r0, r2
 800adea:	f7fd fd93 	bl	8008914 <move_window>
 800adee:	4603      	mov	r3, r0
 800adf0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d138      	bne.n	800ae6a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	330b      	adds	r3, #11
 800ae02:	781a      	ldrb	r2, [r3, #0]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	330b      	adds	r3, #11
 800ae08:	f042 0220 	orr.w	r2, r2, #32
 800ae0c:	b2d2      	uxtb	r2, r2
 800ae0e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	68f9      	ldr	r1, [r7, #12]
 800ae1c:	f7fe fb21 	bl	8009462 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f103 021c 	add.w	r2, r3, #28
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	f7fd fb17 	bl	8008460 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	3316      	adds	r3, #22
 800ae36:	6939      	ldr	r1, [r7, #16]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7fd fb11 	bl	8008460 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3312      	adds	r3, #18
 800ae42:	2100      	movs	r1, #0
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fd faf0 	bl	800842a <st_word>
					fs->wflag = 1;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fd fd8c 	bl	8008970 <sync_fs>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	7d1b      	ldrb	r3, [r3, #20]
 800ae60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff ff7b 	bl	800ad78 <f_sync>
 800ae82:	4603      	mov	r3, r0
 800ae84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d118      	bne.n	800aebe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f107 0208 	add.w	r2, r7, #8
 800ae92:	4611      	mov	r1, r2
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7ff fb93 	bl	800a5c0 <validate>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10c      	bne.n	800aebe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fd fc8f 	bl	80087cc <dec_lock>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d102      	bne.n	800aebe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b092      	sub	sp, #72	; 0x48
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800aed4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aed8:	f107 030c 	add.w	r3, r7, #12
 800aedc:	2200      	movs	r2, #0
 800aede:	4618      	mov	r0, r3
 800aee0:	f7ff f8e8 	bl	800a0b4 <find_volume>
 800aee4:	4603      	mov	r3, r0
 800aee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800aeea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f040 8099 	bne.w	800b026 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800aef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	699a      	ldr	r2, [r3, #24]
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	69db      	ldr	r3, [r3, #28]
 800af02:	3b02      	subs	r3, #2
 800af04:	429a      	cmp	r2, r3
 800af06:	d804      	bhi.n	800af12 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	699a      	ldr	r2, [r3, #24]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	601a      	str	r2, [r3, #0]
 800af10:	e089      	b.n	800b026 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800af16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d128      	bne.n	800af70 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800af1e:	2302      	movs	r3, #2
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af24:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800af26:	f107 0314 	add.w	r3, r7, #20
 800af2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fd fdae 	bl	8008a8e <get_fat>
 800af32:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800af34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3a:	d103      	bne.n	800af44 <f_getfree+0x7c>
 800af3c:	2301      	movs	r3, #1
 800af3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800af42:	e063      	b.n	800b00c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	2b01      	cmp	r3, #1
 800af48:	d103      	bne.n	800af52 <f_getfree+0x8a>
 800af4a:	2302      	movs	r3, #2
 800af4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800af50:	e05c      	b.n	800b00c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800af52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af54:	2b00      	cmp	r3, #0
 800af56:	d102      	bne.n	800af5e <f_getfree+0x96>
 800af58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af5a:	3301      	adds	r3, #1
 800af5c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800af5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af60:	3301      	adds	r3, #1
 800af62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	69db      	ldr	r3, [r3, #28]
 800af68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d3db      	bcc.n	800af26 <f_getfree+0x5e>
 800af6e:	e04d      	b.n	800b00c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af72:	69db      	ldr	r3, [r3, #28]
 800af74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	637b      	str	r3, [r7, #52]	; 0x34
 800af80:	2300      	movs	r3, #0
 800af82:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800af84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af86:	2b00      	cmp	r3, #0
 800af88:	d113      	bne.n	800afb2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800af8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	63ba      	str	r2, [r7, #56]	; 0x38
 800af92:	4619      	mov	r1, r3
 800af94:	f7fd fcbe 	bl	8008914 <move_window>
 800af98:	4603      	mov	r3, r0
 800af9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800af9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d131      	bne.n	800b00a <f_getfree+0x142>
							p = fs->win;
 800afa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa8:	3338      	adds	r3, #56	; 0x38
 800afaa:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afae:	899b      	ldrh	r3, [r3, #12]
 800afb0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d10f      	bne.n	800afda <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800afba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afbc:	f7fd f9fa 	bl	80083b4 <ld_word>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d102      	bne.n	800afcc <f_getfree+0x104>
 800afc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc8:	3301      	adds	r3, #1
 800afca:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	3302      	adds	r3, #2
 800afd0:	633b      	str	r3, [r7, #48]	; 0x30
 800afd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd4:	3b02      	subs	r3, #2
 800afd6:	637b      	str	r3, [r7, #52]	; 0x34
 800afd8:	e010      	b.n	800affc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800afda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afdc:	f7fd fa02 	bl	80083e4 <ld_dword>
 800afe0:	4603      	mov	r3, r0
 800afe2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d102      	bne.n	800aff0 <f_getfree+0x128>
 800afea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afec:	3301      	adds	r3, #1
 800afee:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	3304      	adds	r3, #4
 800aff4:	633b      	str	r3, [r7, #48]	; 0x30
 800aff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff8:	3b04      	subs	r3, #4
 800affa:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800affc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800affe:	3b01      	subs	r3, #1
 800b000:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1bd      	bne.n	800af84 <f_getfree+0xbc>
 800b008:	e000      	b.n	800b00c <f_getfree+0x144>
							if (res != FR_OK) break;
 800b00a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b010:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b016:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	791a      	ldrb	r2, [r3, #4]
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	f042 0201 	orr.w	r2, r2, #1
 800b022:	b2d2      	uxtb	r2, r2
 800b024:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b026:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3748      	adds	r7, #72	; 0x48
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
	...

0800b034 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	4613      	mov	r3, r2
 800b040:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b042:	2301      	movs	r3, #1
 800b044:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b04a:	4b1f      	ldr	r3, [pc, #124]	; (800b0c8 <FATFS_LinkDriverEx+0x94>)
 800b04c:	7a5b      	ldrb	r3, [r3, #9]
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b00      	cmp	r3, #0
 800b052:	d131      	bne.n	800b0b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b054:	4b1c      	ldr	r3, [pc, #112]	; (800b0c8 <FATFS_LinkDriverEx+0x94>)
 800b056:	7a5b      	ldrb	r3, [r3, #9]
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	461a      	mov	r2, r3
 800b05c:	4b1a      	ldr	r3, [pc, #104]	; (800b0c8 <FATFS_LinkDriverEx+0x94>)
 800b05e:	2100      	movs	r1, #0
 800b060:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b062:	4b19      	ldr	r3, [pc, #100]	; (800b0c8 <FATFS_LinkDriverEx+0x94>)
 800b064:	7a5b      	ldrb	r3, [r3, #9]
 800b066:	b2db      	uxtb	r3, r3
 800b068:	4a17      	ldr	r2, [pc, #92]	; (800b0c8 <FATFS_LinkDriverEx+0x94>)
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b072:	4b15      	ldr	r3, [pc, #84]	; (800b0c8 <FATFS_LinkDriverEx+0x94>)
 800b074:	7a5b      	ldrb	r3, [r3, #9]
 800b076:	b2db      	uxtb	r3, r3
 800b078:	461a      	mov	r2, r3
 800b07a:	4b13      	ldr	r3, [pc, #76]	; (800b0c8 <FATFS_LinkDriverEx+0x94>)
 800b07c:	4413      	add	r3, r2
 800b07e:	79fa      	ldrb	r2, [r7, #7]
 800b080:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b082:	4b11      	ldr	r3, [pc, #68]	; (800b0c8 <FATFS_LinkDriverEx+0x94>)
 800b084:	7a5b      	ldrb	r3, [r3, #9]
 800b086:	b2db      	uxtb	r3, r3
 800b088:	1c5a      	adds	r2, r3, #1
 800b08a:	b2d1      	uxtb	r1, r2
 800b08c:	4a0e      	ldr	r2, [pc, #56]	; (800b0c8 <FATFS_LinkDriverEx+0x94>)
 800b08e:	7251      	strb	r1, [r2, #9]
 800b090:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b092:	7dbb      	ldrb	r3, [r7, #22]
 800b094:	3330      	adds	r3, #48	; 0x30
 800b096:	b2da      	uxtb	r2, r3
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	223a      	movs	r2, #58	; 0x3a
 800b0a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	3302      	adds	r3, #2
 800b0a8:	222f      	movs	r2, #47	; 0x2f
 800b0aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	3303      	adds	r3, #3
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	371c      	adds	r7, #28
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	20002a50 	.word	0x20002a50

0800b0cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7ff ffaa 	bl	800b034 <FATFS_LinkDriverEx>
 800b0e0:	4603      	mov	r3, r0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	6039      	str	r1, [r7, #0]
 800b0f6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b0f8:	88fb      	ldrh	r3, [r7, #6]
 800b0fa:	2b7f      	cmp	r3, #127	; 0x7f
 800b0fc:	d802      	bhi.n	800b104 <ff_convert+0x18>
		c = chr;
 800b0fe:	88fb      	ldrh	r3, [r7, #6]
 800b100:	81fb      	strh	r3, [r7, #14]
 800b102:	e025      	b.n	800b150 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00b      	beq.n	800b122 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b10a:	88fb      	ldrh	r3, [r7, #6]
 800b10c:	2bff      	cmp	r3, #255	; 0xff
 800b10e:	d805      	bhi.n	800b11c <ff_convert+0x30>
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	3b80      	subs	r3, #128	; 0x80
 800b114:	4a12      	ldr	r2, [pc, #72]	; (800b160 <ff_convert+0x74>)
 800b116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b11a:	e000      	b.n	800b11e <ff_convert+0x32>
 800b11c:	2300      	movs	r3, #0
 800b11e:	81fb      	strh	r3, [r7, #14]
 800b120:	e016      	b.n	800b150 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b122:	2300      	movs	r3, #0
 800b124:	81fb      	strh	r3, [r7, #14]
 800b126:	e009      	b.n	800b13c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b128:	89fb      	ldrh	r3, [r7, #14]
 800b12a:	4a0d      	ldr	r2, [pc, #52]	; (800b160 <ff_convert+0x74>)
 800b12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b130:	88fa      	ldrh	r2, [r7, #6]
 800b132:	429a      	cmp	r2, r3
 800b134:	d006      	beq.n	800b144 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b136:	89fb      	ldrh	r3, [r7, #14]
 800b138:	3301      	adds	r3, #1
 800b13a:	81fb      	strh	r3, [r7, #14]
 800b13c:	89fb      	ldrh	r3, [r7, #14]
 800b13e:	2b7f      	cmp	r3, #127	; 0x7f
 800b140:	d9f2      	bls.n	800b128 <ff_convert+0x3c>
 800b142:	e000      	b.n	800b146 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b144:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b146:	89fb      	ldrh	r3, [r7, #14]
 800b148:	3380      	adds	r3, #128	; 0x80
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b150:	89fb      	ldrh	r3, [r7, #14]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	0800e614 	.word	0x0800e614

0800b164 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b164:	b480      	push	{r7}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	4603      	mov	r3, r0
 800b16c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b16e:	88fb      	ldrh	r3, [r7, #6]
 800b170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b174:	d201      	bcs.n	800b17a <ff_wtoupper+0x16>
 800b176:	4b3e      	ldr	r3, [pc, #248]	; (800b270 <ff_wtoupper+0x10c>)
 800b178:	e000      	b.n	800b17c <ff_wtoupper+0x18>
 800b17a:	4b3e      	ldr	r3, [pc, #248]	; (800b274 <ff_wtoupper+0x110>)
 800b17c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	1c9a      	adds	r2, r3, #2
 800b182:	617a      	str	r2, [r7, #20]
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b188:	8a7b      	ldrh	r3, [r7, #18]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d068      	beq.n	800b260 <ff_wtoupper+0xfc>
 800b18e:	88fa      	ldrh	r2, [r7, #6]
 800b190:	8a7b      	ldrh	r3, [r7, #18]
 800b192:	429a      	cmp	r2, r3
 800b194:	d364      	bcc.n	800b260 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	1c9a      	adds	r2, r3, #2
 800b19a:	617a      	str	r2, [r7, #20]
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	823b      	strh	r3, [r7, #16]
 800b1a0:	8a3b      	ldrh	r3, [r7, #16]
 800b1a2:	0a1b      	lsrs	r3, r3, #8
 800b1a4:	81fb      	strh	r3, [r7, #14]
 800b1a6:	8a3b      	ldrh	r3, [r7, #16]
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b1ac:	88fa      	ldrh	r2, [r7, #6]
 800b1ae:	8a79      	ldrh	r1, [r7, #18]
 800b1b0:	8a3b      	ldrh	r3, [r7, #16]
 800b1b2:	440b      	add	r3, r1
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	da49      	bge.n	800b24c <ff_wtoupper+0xe8>
			switch (cmd) {
 800b1b8:	89fb      	ldrh	r3, [r7, #14]
 800b1ba:	2b08      	cmp	r3, #8
 800b1bc:	d84f      	bhi.n	800b25e <ff_wtoupper+0xfa>
 800b1be:	a201      	add	r2, pc, #4	; (adr r2, 800b1c4 <ff_wtoupper+0x60>)
 800b1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c4:	0800b1e9 	.word	0x0800b1e9
 800b1c8:	0800b1fb 	.word	0x0800b1fb
 800b1cc:	0800b211 	.word	0x0800b211
 800b1d0:	0800b219 	.word	0x0800b219
 800b1d4:	0800b221 	.word	0x0800b221
 800b1d8:	0800b229 	.word	0x0800b229
 800b1dc:	0800b231 	.word	0x0800b231
 800b1e0:	0800b239 	.word	0x0800b239
 800b1e4:	0800b241 	.word	0x0800b241
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b1e8:	88fa      	ldrh	r2, [r7, #6]
 800b1ea:	8a7b      	ldrh	r3, [r7, #18]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	80fb      	strh	r3, [r7, #6]
 800b1f8:	e027      	b.n	800b24a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b1fa:	88fa      	ldrh	r2, [r7, #6]
 800b1fc:	8a7b      	ldrh	r3, [r7, #18]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	b29b      	uxth	r3, r3
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	b29b      	uxth	r3, r3
 800b208:	88fa      	ldrh	r2, [r7, #6]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	80fb      	strh	r3, [r7, #6]
 800b20e:	e01c      	b.n	800b24a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b210:	88fb      	ldrh	r3, [r7, #6]
 800b212:	3b10      	subs	r3, #16
 800b214:	80fb      	strh	r3, [r7, #6]
 800b216:	e018      	b.n	800b24a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b218:	88fb      	ldrh	r3, [r7, #6]
 800b21a:	3b20      	subs	r3, #32
 800b21c:	80fb      	strh	r3, [r7, #6]
 800b21e:	e014      	b.n	800b24a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b220:	88fb      	ldrh	r3, [r7, #6]
 800b222:	3b30      	subs	r3, #48	; 0x30
 800b224:	80fb      	strh	r3, [r7, #6]
 800b226:	e010      	b.n	800b24a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b228:	88fb      	ldrh	r3, [r7, #6]
 800b22a:	3b1a      	subs	r3, #26
 800b22c:	80fb      	strh	r3, [r7, #6]
 800b22e:	e00c      	b.n	800b24a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b230:	88fb      	ldrh	r3, [r7, #6]
 800b232:	3308      	adds	r3, #8
 800b234:	80fb      	strh	r3, [r7, #6]
 800b236:	e008      	b.n	800b24a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b238:	88fb      	ldrh	r3, [r7, #6]
 800b23a:	3b50      	subs	r3, #80	; 0x50
 800b23c:	80fb      	strh	r3, [r7, #6]
 800b23e:	e004      	b.n	800b24a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b240:	88fb      	ldrh	r3, [r7, #6]
 800b242:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b246:	80fb      	strh	r3, [r7, #6]
 800b248:	bf00      	nop
			}
			break;
 800b24a:	e008      	b.n	800b25e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b24c:	89fb      	ldrh	r3, [r7, #14]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d195      	bne.n	800b17e <ff_wtoupper+0x1a>
 800b252:	8a3b      	ldrh	r3, [r7, #16]
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	697a      	ldr	r2, [r7, #20]
 800b258:	4413      	add	r3, r2
 800b25a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b25c:	e78f      	b.n	800b17e <ff_wtoupper+0x1a>
			break;
 800b25e:	bf00      	nop
	}

	return chr;
 800b260:	88fb      	ldrh	r3, [r7, #6]
}
 800b262:	4618      	mov	r0, r3
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	0800e714 	.word	0x0800e714
 800b274:	0800e908 	.word	0x0800e908

0800b278 <__errno>:
 800b278:	4b01      	ldr	r3, [pc, #4]	; (800b280 <__errno+0x8>)
 800b27a:	6818      	ldr	r0, [r3, #0]
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	20000028 	.word	0x20000028

0800b284 <exit>:
 800b284:	b508      	push	{r3, lr}
 800b286:	4b07      	ldr	r3, [pc, #28]	; (800b2a4 <exit+0x20>)
 800b288:	4604      	mov	r4, r0
 800b28a:	b113      	cbz	r3, 800b292 <exit+0xe>
 800b28c:	2100      	movs	r1, #0
 800b28e:	f3af 8000 	nop.w
 800b292:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <exit+0x24>)
 800b294:	6818      	ldr	r0, [r3, #0]
 800b296:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b298:	b103      	cbz	r3, 800b29c <exit+0x18>
 800b29a:	4798      	blx	r3
 800b29c:	4620      	mov	r0, r4
 800b29e:	f7f7 fc4f 	bl	8002b40 <_exit>
 800b2a2:	bf00      	nop
 800b2a4:	00000000 	.word	0x00000000
 800b2a8:	0800e9c4 	.word	0x0800e9c4

0800b2ac <__libc_init_array>:
 800b2ac:	b570      	push	{r4, r5, r6, lr}
 800b2ae:	4d0d      	ldr	r5, [pc, #52]	; (800b2e4 <__libc_init_array+0x38>)
 800b2b0:	4c0d      	ldr	r4, [pc, #52]	; (800b2e8 <__libc_init_array+0x3c>)
 800b2b2:	1b64      	subs	r4, r4, r5
 800b2b4:	10a4      	asrs	r4, r4, #2
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	42a6      	cmp	r6, r4
 800b2ba:	d109      	bne.n	800b2d0 <__libc_init_array+0x24>
 800b2bc:	4d0b      	ldr	r5, [pc, #44]	; (800b2ec <__libc_init_array+0x40>)
 800b2be:	4c0c      	ldr	r4, [pc, #48]	; (800b2f0 <__libc_init_array+0x44>)
 800b2c0:	f002 ffa2 	bl	800e208 <_init>
 800b2c4:	1b64      	subs	r4, r4, r5
 800b2c6:	10a4      	asrs	r4, r4, #2
 800b2c8:	2600      	movs	r6, #0
 800b2ca:	42a6      	cmp	r6, r4
 800b2cc:	d105      	bne.n	800b2da <__libc_init_array+0x2e>
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2d4:	4798      	blx	r3
 800b2d6:	3601      	adds	r6, #1
 800b2d8:	e7ee      	b.n	800b2b8 <__libc_init_array+0xc>
 800b2da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2de:	4798      	blx	r3
 800b2e0:	3601      	adds	r6, #1
 800b2e2:	e7f2      	b.n	800b2ca <__libc_init_array+0x1e>
 800b2e4:	0800eda4 	.word	0x0800eda4
 800b2e8:	0800eda4 	.word	0x0800eda4
 800b2ec:	0800eda4 	.word	0x0800eda4
 800b2f0:	0800eda8 	.word	0x0800eda8

0800b2f4 <malloc>:
 800b2f4:	4b02      	ldr	r3, [pc, #8]	; (800b300 <malloc+0xc>)
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	f000 b87f 	b.w	800b3fc <_malloc_r>
 800b2fe:	bf00      	nop
 800b300:	20000028 	.word	0x20000028

0800b304 <free>:
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <free+0xc>)
 800b306:	4601      	mov	r1, r0
 800b308:	6818      	ldr	r0, [r3, #0]
 800b30a:	f000 b80b 	b.w	800b324 <_free_r>
 800b30e:	bf00      	nop
 800b310:	20000028 	.word	0x20000028

0800b314 <memset>:
 800b314:	4402      	add	r2, r0
 800b316:	4603      	mov	r3, r0
 800b318:	4293      	cmp	r3, r2
 800b31a:	d100      	bne.n	800b31e <memset+0xa>
 800b31c:	4770      	bx	lr
 800b31e:	f803 1b01 	strb.w	r1, [r3], #1
 800b322:	e7f9      	b.n	800b318 <memset+0x4>

0800b324 <_free_r>:
 800b324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b326:	2900      	cmp	r1, #0
 800b328:	d044      	beq.n	800b3b4 <_free_r+0x90>
 800b32a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b32e:	9001      	str	r0, [sp, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	f1a1 0404 	sub.w	r4, r1, #4
 800b336:	bfb8      	it	lt
 800b338:	18e4      	addlt	r4, r4, r3
 800b33a:	f001 ff71 	bl	800d220 <__malloc_lock>
 800b33e:	4a1e      	ldr	r2, [pc, #120]	; (800b3b8 <_free_r+0x94>)
 800b340:	9801      	ldr	r0, [sp, #4]
 800b342:	6813      	ldr	r3, [r2, #0]
 800b344:	b933      	cbnz	r3, 800b354 <_free_r+0x30>
 800b346:	6063      	str	r3, [r4, #4]
 800b348:	6014      	str	r4, [r2, #0]
 800b34a:	b003      	add	sp, #12
 800b34c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b350:	f001 bf6c 	b.w	800d22c <__malloc_unlock>
 800b354:	42a3      	cmp	r3, r4
 800b356:	d908      	bls.n	800b36a <_free_r+0x46>
 800b358:	6825      	ldr	r5, [r4, #0]
 800b35a:	1961      	adds	r1, r4, r5
 800b35c:	428b      	cmp	r3, r1
 800b35e:	bf01      	itttt	eq
 800b360:	6819      	ldreq	r1, [r3, #0]
 800b362:	685b      	ldreq	r3, [r3, #4]
 800b364:	1949      	addeq	r1, r1, r5
 800b366:	6021      	streq	r1, [r4, #0]
 800b368:	e7ed      	b.n	800b346 <_free_r+0x22>
 800b36a:	461a      	mov	r2, r3
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	b10b      	cbz	r3, 800b374 <_free_r+0x50>
 800b370:	42a3      	cmp	r3, r4
 800b372:	d9fa      	bls.n	800b36a <_free_r+0x46>
 800b374:	6811      	ldr	r1, [r2, #0]
 800b376:	1855      	adds	r5, r2, r1
 800b378:	42a5      	cmp	r5, r4
 800b37a:	d10b      	bne.n	800b394 <_free_r+0x70>
 800b37c:	6824      	ldr	r4, [r4, #0]
 800b37e:	4421      	add	r1, r4
 800b380:	1854      	adds	r4, r2, r1
 800b382:	42a3      	cmp	r3, r4
 800b384:	6011      	str	r1, [r2, #0]
 800b386:	d1e0      	bne.n	800b34a <_free_r+0x26>
 800b388:	681c      	ldr	r4, [r3, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	6053      	str	r3, [r2, #4]
 800b38e:	4421      	add	r1, r4
 800b390:	6011      	str	r1, [r2, #0]
 800b392:	e7da      	b.n	800b34a <_free_r+0x26>
 800b394:	d902      	bls.n	800b39c <_free_r+0x78>
 800b396:	230c      	movs	r3, #12
 800b398:	6003      	str	r3, [r0, #0]
 800b39a:	e7d6      	b.n	800b34a <_free_r+0x26>
 800b39c:	6825      	ldr	r5, [r4, #0]
 800b39e:	1961      	adds	r1, r4, r5
 800b3a0:	428b      	cmp	r3, r1
 800b3a2:	bf04      	itt	eq
 800b3a4:	6819      	ldreq	r1, [r3, #0]
 800b3a6:	685b      	ldreq	r3, [r3, #4]
 800b3a8:	6063      	str	r3, [r4, #4]
 800b3aa:	bf04      	itt	eq
 800b3ac:	1949      	addeq	r1, r1, r5
 800b3ae:	6021      	streq	r1, [r4, #0]
 800b3b0:	6054      	str	r4, [r2, #4]
 800b3b2:	e7ca      	b.n	800b34a <_free_r+0x26>
 800b3b4:	b003      	add	sp, #12
 800b3b6:	bd30      	pop	{r4, r5, pc}
 800b3b8:	20002a5c 	.word	0x20002a5c

0800b3bc <sbrk_aligned>:
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	4e0e      	ldr	r6, [pc, #56]	; (800b3f8 <sbrk_aligned+0x3c>)
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	6831      	ldr	r1, [r6, #0]
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	b911      	cbnz	r1, 800b3ce <sbrk_aligned+0x12>
 800b3c8:	f000 fd84 	bl	800bed4 <_sbrk_r>
 800b3cc:	6030      	str	r0, [r6, #0]
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	f000 fd7f 	bl	800bed4 <_sbrk_r>
 800b3d6:	1c43      	adds	r3, r0, #1
 800b3d8:	d00a      	beq.n	800b3f0 <sbrk_aligned+0x34>
 800b3da:	1cc4      	adds	r4, r0, #3
 800b3dc:	f024 0403 	bic.w	r4, r4, #3
 800b3e0:	42a0      	cmp	r0, r4
 800b3e2:	d007      	beq.n	800b3f4 <sbrk_aligned+0x38>
 800b3e4:	1a21      	subs	r1, r4, r0
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	f000 fd74 	bl	800bed4 <_sbrk_r>
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	d101      	bne.n	800b3f4 <sbrk_aligned+0x38>
 800b3f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}
 800b3f8:	20002a60 	.word	0x20002a60

0800b3fc <_malloc_r>:
 800b3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b400:	1ccd      	adds	r5, r1, #3
 800b402:	f025 0503 	bic.w	r5, r5, #3
 800b406:	3508      	adds	r5, #8
 800b408:	2d0c      	cmp	r5, #12
 800b40a:	bf38      	it	cc
 800b40c:	250c      	movcc	r5, #12
 800b40e:	2d00      	cmp	r5, #0
 800b410:	4607      	mov	r7, r0
 800b412:	db01      	blt.n	800b418 <_malloc_r+0x1c>
 800b414:	42a9      	cmp	r1, r5
 800b416:	d905      	bls.n	800b424 <_malloc_r+0x28>
 800b418:	230c      	movs	r3, #12
 800b41a:	603b      	str	r3, [r7, #0]
 800b41c:	2600      	movs	r6, #0
 800b41e:	4630      	mov	r0, r6
 800b420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b424:	4e2e      	ldr	r6, [pc, #184]	; (800b4e0 <_malloc_r+0xe4>)
 800b426:	f001 fefb 	bl	800d220 <__malloc_lock>
 800b42a:	6833      	ldr	r3, [r6, #0]
 800b42c:	461c      	mov	r4, r3
 800b42e:	bb34      	cbnz	r4, 800b47e <_malloc_r+0x82>
 800b430:	4629      	mov	r1, r5
 800b432:	4638      	mov	r0, r7
 800b434:	f7ff ffc2 	bl	800b3bc <sbrk_aligned>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	4604      	mov	r4, r0
 800b43c:	d14d      	bne.n	800b4da <_malloc_r+0xde>
 800b43e:	6834      	ldr	r4, [r6, #0]
 800b440:	4626      	mov	r6, r4
 800b442:	2e00      	cmp	r6, #0
 800b444:	d140      	bne.n	800b4c8 <_malloc_r+0xcc>
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	4631      	mov	r1, r6
 800b44a:	4638      	mov	r0, r7
 800b44c:	eb04 0803 	add.w	r8, r4, r3
 800b450:	f000 fd40 	bl	800bed4 <_sbrk_r>
 800b454:	4580      	cmp	r8, r0
 800b456:	d13a      	bne.n	800b4ce <_malloc_r+0xd2>
 800b458:	6821      	ldr	r1, [r4, #0]
 800b45a:	3503      	adds	r5, #3
 800b45c:	1a6d      	subs	r5, r5, r1
 800b45e:	f025 0503 	bic.w	r5, r5, #3
 800b462:	3508      	adds	r5, #8
 800b464:	2d0c      	cmp	r5, #12
 800b466:	bf38      	it	cc
 800b468:	250c      	movcc	r5, #12
 800b46a:	4629      	mov	r1, r5
 800b46c:	4638      	mov	r0, r7
 800b46e:	f7ff ffa5 	bl	800b3bc <sbrk_aligned>
 800b472:	3001      	adds	r0, #1
 800b474:	d02b      	beq.n	800b4ce <_malloc_r+0xd2>
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	442b      	add	r3, r5
 800b47a:	6023      	str	r3, [r4, #0]
 800b47c:	e00e      	b.n	800b49c <_malloc_r+0xa0>
 800b47e:	6822      	ldr	r2, [r4, #0]
 800b480:	1b52      	subs	r2, r2, r5
 800b482:	d41e      	bmi.n	800b4c2 <_malloc_r+0xc6>
 800b484:	2a0b      	cmp	r2, #11
 800b486:	d916      	bls.n	800b4b6 <_malloc_r+0xba>
 800b488:	1961      	adds	r1, r4, r5
 800b48a:	42a3      	cmp	r3, r4
 800b48c:	6025      	str	r5, [r4, #0]
 800b48e:	bf18      	it	ne
 800b490:	6059      	strne	r1, [r3, #4]
 800b492:	6863      	ldr	r3, [r4, #4]
 800b494:	bf08      	it	eq
 800b496:	6031      	streq	r1, [r6, #0]
 800b498:	5162      	str	r2, [r4, r5]
 800b49a:	604b      	str	r3, [r1, #4]
 800b49c:	4638      	mov	r0, r7
 800b49e:	f104 060b 	add.w	r6, r4, #11
 800b4a2:	f001 fec3 	bl	800d22c <__malloc_unlock>
 800b4a6:	f026 0607 	bic.w	r6, r6, #7
 800b4aa:	1d23      	adds	r3, r4, #4
 800b4ac:	1af2      	subs	r2, r6, r3
 800b4ae:	d0b6      	beq.n	800b41e <_malloc_r+0x22>
 800b4b0:	1b9b      	subs	r3, r3, r6
 800b4b2:	50a3      	str	r3, [r4, r2]
 800b4b4:	e7b3      	b.n	800b41e <_malloc_r+0x22>
 800b4b6:	6862      	ldr	r2, [r4, #4]
 800b4b8:	42a3      	cmp	r3, r4
 800b4ba:	bf0c      	ite	eq
 800b4bc:	6032      	streq	r2, [r6, #0]
 800b4be:	605a      	strne	r2, [r3, #4]
 800b4c0:	e7ec      	b.n	800b49c <_malloc_r+0xa0>
 800b4c2:	4623      	mov	r3, r4
 800b4c4:	6864      	ldr	r4, [r4, #4]
 800b4c6:	e7b2      	b.n	800b42e <_malloc_r+0x32>
 800b4c8:	4634      	mov	r4, r6
 800b4ca:	6876      	ldr	r6, [r6, #4]
 800b4cc:	e7b9      	b.n	800b442 <_malloc_r+0x46>
 800b4ce:	230c      	movs	r3, #12
 800b4d0:	603b      	str	r3, [r7, #0]
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	f001 feaa 	bl	800d22c <__malloc_unlock>
 800b4d8:	e7a1      	b.n	800b41e <_malloc_r+0x22>
 800b4da:	6025      	str	r5, [r4, #0]
 800b4dc:	e7de      	b.n	800b49c <_malloc_r+0xa0>
 800b4de:	bf00      	nop
 800b4e0:	20002a5c 	.word	0x20002a5c

0800b4e4 <__cvt>:
 800b4e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e8:	ec55 4b10 	vmov	r4, r5, d0
 800b4ec:	2d00      	cmp	r5, #0
 800b4ee:	460e      	mov	r6, r1
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	462b      	mov	r3, r5
 800b4f4:	bfbb      	ittet	lt
 800b4f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b4fa:	461d      	movlt	r5, r3
 800b4fc:	2300      	movge	r3, #0
 800b4fe:	232d      	movlt	r3, #45	; 0x2d
 800b500:	700b      	strb	r3, [r1, #0]
 800b502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b504:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b508:	4691      	mov	r9, r2
 800b50a:	f023 0820 	bic.w	r8, r3, #32
 800b50e:	bfbc      	itt	lt
 800b510:	4622      	movlt	r2, r4
 800b512:	4614      	movlt	r4, r2
 800b514:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b518:	d005      	beq.n	800b526 <__cvt+0x42>
 800b51a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b51e:	d100      	bne.n	800b522 <__cvt+0x3e>
 800b520:	3601      	adds	r6, #1
 800b522:	2102      	movs	r1, #2
 800b524:	e000      	b.n	800b528 <__cvt+0x44>
 800b526:	2103      	movs	r1, #3
 800b528:	ab03      	add	r3, sp, #12
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	ab02      	add	r3, sp, #8
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	ec45 4b10 	vmov	d0, r4, r5
 800b534:	4653      	mov	r3, sl
 800b536:	4632      	mov	r2, r6
 800b538:	f000 fe52 	bl	800c1e0 <_dtoa_r>
 800b53c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b540:	4607      	mov	r7, r0
 800b542:	d102      	bne.n	800b54a <__cvt+0x66>
 800b544:	f019 0f01 	tst.w	r9, #1
 800b548:	d022      	beq.n	800b590 <__cvt+0xac>
 800b54a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b54e:	eb07 0906 	add.w	r9, r7, r6
 800b552:	d110      	bne.n	800b576 <__cvt+0x92>
 800b554:	783b      	ldrb	r3, [r7, #0]
 800b556:	2b30      	cmp	r3, #48	; 0x30
 800b558:	d10a      	bne.n	800b570 <__cvt+0x8c>
 800b55a:	2200      	movs	r2, #0
 800b55c:	2300      	movs	r3, #0
 800b55e:	4620      	mov	r0, r4
 800b560:	4629      	mov	r1, r5
 800b562:	f7f5 fab9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b566:	b918      	cbnz	r0, 800b570 <__cvt+0x8c>
 800b568:	f1c6 0601 	rsb	r6, r6, #1
 800b56c:	f8ca 6000 	str.w	r6, [sl]
 800b570:	f8da 3000 	ldr.w	r3, [sl]
 800b574:	4499      	add	r9, r3
 800b576:	2200      	movs	r2, #0
 800b578:	2300      	movs	r3, #0
 800b57a:	4620      	mov	r0, r4
 800b57c:	4629      	mov	r1, r5
 800b57e:	f7f5 faab 	bl	8000ad8 <__aeabi_dcmpeq>
 800b582:	b108      	cbz	r0, 800b588 <__cvt+0xa4>
 800b584:	f8cd 900c 	str.w	r9, [sp, #12]
 800b588:	2230      	movs	r2, #48	; 0x30
 800b58a:	9b03      	ldr	r3, [sp, #12]
 800b58c:	454b      	cmp	r3, r9
 800b58e:	d307      	bcc.n	800b5a0 <__cvt+0xbc>
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b594:	1bdb      	subs	r3, r3, r7
 800b596:	4638      	mov	r0, r7
 800b598:	6013      	str	r3, [r2, #0]
 800b59a:	b004      	add	sp, #16
 800b59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a0:	1c59      	adds	r1, r3, #1
 800b5a2:	9103      	str	r1, [sp, #12]
 800b5a4:	701a      	strb	r2, [r3, #0]
 800b5a6:	e7f0      	b.n	800b58a <__cvt+0xa6>

0800b5a8 <__exponent>:
 800b5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	bfb8      	it	lt
 800b5b0:	4249      	neglt	r1, r1
 800b5b2:	f803 2b02 	strb.w	r2, [r3], #2
 800b5b6:	bfb4      	ite	lt
 800b5b8:	222d      	movlt	r2, #45	; 0x2d
 800b5ba:	222b      	movge	r2, #43	; 0x2b
 800b5bc:	2909      	cmp	r1, #9
 800b5be:	7042      	strb	r2, [r0, #1]
 800b5c0:	dd2a      	ble.n	800b618 <__exponent+0x70>
 800b5c2:	f10d 0407 	add.w	r4, sp, #7
 800b5c6:	46a4      	mov	ip, r4
 800b5c8:	270a      	movs	r7, #10
 800b5ca:	46a6      	mov	lr, r4
 800b5cc:	460a      	mov	r2, r1
 800b5ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800b5d2:	fb07 1516 	mls	r5, r7, r6, r1
 800b5d6:	3530      	adds	r5, #48	; 0x30
 800b5d8:	2a63      	cmp	r2, #99	; 0x63
 800b5da:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b5e2:	4631      	mov	r1, r6
 800b5e4:	dcf1      	bgt.n	800b5ca <__exponent+0x22>
 800b5e6:	3130      	adds	r1, #48	; 0x30
 800b5e8:	f1ae 0502 	sub.w	r5, lr, #2
 800b5ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5f0:	1c44      	adds	r4, r0, #1
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	4561      	cmp	r1, ip
 800b5f6:	d30a      	bcc.n	800b60e <__exponent+0x66>
 800b5f8:	f10d 0209 	add.w	r2, sp, #9
 800b5fc:	eba2 020e 	sub.w	r2, r2, lr
 800b600:	4565      	cmp	r5, ip
 800b602:	bf88      	it	hi
 800b604:	2200      	movhi	r2, #0
 800b606:	4413      	add	r3, r2
 800b608:	1a18      	subs	r0, r3, r0
 800b60a:	b003      	add	sp, #12
 800b60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b612:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b616:	e7ed      	b.n	800b5f4 <__exponent+0x4c>
 800b618:	2330      	movs	r3, #48	; 0x30
 800b61a:	3130      	adds	r1, #48	; 0x30
 800b61c:	7083      	strb	r3, [r0, #2]
 800b61e:	70c1      	strb	r1, [r0, #3]
 800b620:	1d03      	adds	r3, r0, #4
 800b622:	e7f1      	b.n	800b608 <__exponent+0x60>

0800b624 <_printf_float>:
 800b624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b628:	ed2d 8b02 	vpush	{d8}
 800b62c:	b08d      	sub	sp, #52	; 0x34
 800b62e:	460c      	mov	r4, r1
 800b630:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b634:	4616      	mov	r6, r2
 800b636:	461f      	mov	r7, r3
 800b638:	4605      	mov	r5, r0
 800b63a:	f001 fd77 	bl	800d12c <_localeconv_r>
 800b63e:	f8d0 a000 	ldr.w	sl, [r0]
 800b642:	4650      	mov	r0, sl
 800b644:	f7f4 fdcc 	bl	80001e0 <strlen>
 800b648:	2300      	movs	r3, #0
 800b64a:	930a      	str	r3, [sp, #40]	; 0x28
 800b64c:	6823      	ldr	r3, [r4, #0]
 800b64e:	9305      	str	r3, [sp, #20]
 800b650:	f8d8 3000 	ldr.w	r3, [r8]
 800b654:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b658:	3307      	adds	r3, #7
 800b65a:	f023 0307 	bic.w	r3, r3, #7
 800b65e:	f103 0208 	add.w	r2, r3, #8
 800b662:	f8c8 2000 	str.w	r2, [r8]
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b66e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b672:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b676:	9307      	str	r3, [sp, #28]
 800b678:	f8cd 8018 	str.w	r8, [sp, #24]
 800b67c:	ee08 0a10 	vmov	s16, r0
 800b680:	4b9f      	ldr	r3, [pc, #636]	; (800b900 <_printf_float+0x2dc>)
 800b682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b686:	f04f 32ff 	mov.w	r2, #4294967295
 800b68a:	f7f5 fa57 	bl	8000b3c <__aeabi_dcmpun>
 800b68e:	bb88      	cbnz	r0, 800b6f4 <_printf_float+0xd0>
 800b690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b694:	4b9a      	ldr	r3, [pc, #616]	; (800b900 <_printf_float+0x2dc>)
 800b696:	f04f 32ff 	mov.w	r2, #4294967295
 800b69a:	f7f5 fa31 	bl	8000b00 <__aeabi_dcmple>
 800b69e:	bb48      	cbnz	r0, 800b6f4 <_printf_float+0xd0>
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	f7f5 fa20 	bl	8000aec <__aeabi_dcmplt>
 800b6ac:	b110      	cbz	r0, 800b6b4 <_printf_float+0x90>
 800b6ae:	232d      	movs	r3, #45	; 0x2d
 800b6b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6b4:	4b93      	ldr	r3, [pc, #588]	; (800b904 <_printf_float+0x2e0>)
 800b6b6:	4894      	ldr	r0, [pc, #592]	; (800b908 <_printf_float+0x2e4>)
 800b6b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b6bc:	bf94      	ite	ls
 800b6be:	4698      	movls	r8, r3
 800b6c0:	4680      	movhi	r8, r0
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	6123      	str	r3, [r4, #16]
 800b6c6:	9b05      	ldr	r3, [sp, #20]
 800b6c8:	f023 0204 	bic.w	r2, r3, #4
 800b6cc:	6022      	str	r2, [r4, #0]
 800b6ce:	f04f 0900 	mov.w	r9, #0
 800b6d2:	9700      	str	r7, [sp, #0]
 800b6d4:	4633      	mov	r3, r6
 800b6d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b6d8:	4621      	mov	r1, r4
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f000 f9d8 	bl	800ba90 <_printf_common>
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	f040 8090 	bne.w	800b806 <_printf_float+0x1e2>
 800b6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ea:	b00d      	add	sp, #52	; 0x34
 800b6ec:	ecbd 8b02 	vpop	{d8}
 800b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f4:	4642      	mov	r2, r8
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	f7f5 fa1e 	bl	8000b3c <__aeabi_dcmpun>
 800b700:	b140      	cbz	r0, 800b714 <_printf_float+0xf0>
 800b702:	464b      	mov	r3, r9
 800b704:	2b00      	cmp	r3, #0
 800b706:	bfbc      	itt	lt
 800b708:	232d      	movlt	r3, #45	; 0x2d
 800b70a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b70e:	487f      	ldr	r0, [pc, #508]	; (800b90c <_printf_float+0x2e8>)
 800b710:	4b7f      	ldr	r3, [pc, #508]	; (800b910 <_printf_float+0x2ec>)
 800b712:	e7d1      	b.n	800b6b8 <_printf_float+0x94>
 800b714:	6863      	ldr	r3, [r4, #4]
 800b716:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b71a:	9206      	str	r2, [sp, #24]
 800b71c:	1c5a      	adds	r2, r3, #1
 800b71e:	d13f      	bne.n	800b7a0 <_printf_float+0x17c>
 800b720:	2306      	movs	r3, #6
 800b722:	6063      	str	r3, [r4, #4]
 800b724:	9b05      	ldr	r3, [sp, #20]
 800b726:	6861      	ldr	r1, [r4, #4]
 800b728:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b72c:	2300      	movs	r3, #0
 800b72e:	9303      	str	r3, [sp, #12]
 800b730:	ab0a      	add	r3, sp, #40	; 0x28
 800b732:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b736:	ab09      	add	r3, sp, #36	; 0x24
 800b738:	ec49 8b10 	vmov	d0, r8, r9
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	6022      	str	r2, [r4, #0]
 800b740:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b744:	4628      	mov	r0, r5
 800b746:	f7ff fecd 	bl	800b4e4 <__cvt>
 800b74a:	9b06      	ldr	r3, [sp, #24]
 800b74c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b74e:	2b47      	cmp	r3, #71	; 0x47
 800b750:	4680      	mov	r8, r0
 800b752:	d108      	bne.n	800b766 <_printf_float+0x142>
 800b754:	1cc8      	adds	r0, r1, #3
 800b756:	db02      	blt.n	800b75e <_printf_float+0x13a>
 800b758:	6863      	ldr	r3, [r4, #4]
 800b75a:	4299      	cmp	r1, r3
 800b75c:	dd41      	ble.n	800b7e2 <_printf_float+0x1be>
 800b75e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b762:	fa5f fb8b 	uxtb.w	fp, fp
 800b766:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b76a:	d820      	bhi.n	800b7ae <_printf_float+0x18a>
 800b76c:	3901      	subs	r1, #1
 800b76e:	465a      	mov	r2, fp
 800b770:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b774:	9109      	str	r1, [sp, #36]	; 0x24
 800b776:	f7ff ff17 	bl	800b5a8 <__exponent>
 800b77a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b77c:	1813      	adds	r3, r2, r0
 800b77e:	2a01      	cmp	r2, #1
 800b780:	4681      	mov	r9, r0
 800b782:	6123      	str	r3, [r4, #16]
 800b784:	dc02      	bgt.n	800b78c <_printf_float+0x168>
 800b786:	6822      	ldr	r2, [r4, #0]
 800b788:	07d2      	lsls	r2, r2, #31
 800b78a:	d501      	bpl.n	800b790 <_printf_float+0x16c>
 800b78c:	3301      	adds	r3, #1
 800b78e:	6123      	str	r3, [r4, #16]
 800b790:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b794:	2b00      	cmp	r3, #0
 800b796:	d09c      	beq.n	800b6d2 <_printf_float+0xae>
 800b798:	232d      	movs	r3, #45	; 0x2d
 800b79a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b79e:	e798      	b.n	800b6d2 <_printf_float+0xae>
 800b7a0:	9a06      	ldr	r2, [sp, #24]
 800b7a2:	2a47      	cmp	r2, #71	; 0x47
 800b7a4:	d1be      	bne.n	800b724 <_printf_float+0x100>
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1bc      	bne.n	800b724 <_printf_float+0x100>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e7b9      	b.n	800b722 <_printf_float+0xfe>
 800b7ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b7b2:	d118      	bne.n	800b7e6 <_printf_float+0x1c2>
 800b7b4:	2900      	cmp	r1, #0
 800b7b6:	6863      	ldr	r3, [r4, #4]
 800b7b8:	dd0b      	ble.n	800b7d2 <_printf_float+0x1ae>
 800b7ba:	6121      	str	r1, [r4, #16]
 800b7bc:	b913      	cbnz	r3, 800b7c4 <_printf_float+0x1a0>
 800b7be:	6822      	ldr	r2, [r4, #0]
 800b7c0:	07d0      	lsls	r0, r2, #31
 800b7c2:	d502      	bpl.n	800b7ca <_printf_float+0x1a6>
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	440b      	add	r3, r1
 800b7c8:	6123      	str	r3, [r4, #16]
 800b7ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800b7cc:	f04f 0900 	mov.w	r9, #0
 800b7d0:	e7de      	b.n	800b790 <_printf_float+0x16c>
 800b7d2:	b913      	cbnz	r3, 800b7da <_printf_float+0x1b6>
 800b7d4:	6822      	ldr	r2, [r4, #0]
 800b7d6:	07d2      	lsls	r2, r2, #31
 800b7d8:	d501      	bpl.n	800b7de <_printf_float+0x1ba>
 800b7da:	3302      	adds	r3, #2
 800b7dc:	e7f4      	b.n	800b7c8 <_printf_float+0x1a4>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e7f2      	b.n	800b7c8 <_printf_float+0x1a4>
 800b7e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7e8:	4299      	cmp	r1, r3
 800b7ea:	db05      	blt.n	800b7f8 <_printf_float+0x1d4>
 800b7ec:	6823      	ldr	r3, [r4, #0]
 800b7ee:	6121      	str	r1, [r4, #16]
 800b7f0:	07d8      	lsls	r0, r3, #31
 800b7f2:	d5ea      	bpl.n	800b7ca <_printf_float+0x1a6>
 800b7f4:	1c4b      	adds	r3, r1, #1
 800b7f6:	e7e7      	b.n	800b7c8 <_printf_float+0x1a4>
 800b7f8:	2900      	cmp	r1, #0
 800b7fa:	bfd4      	ite	le
 800b7fc:	f1c1 0202 	rsble	r2, r1, #2
 800b800:	2201      	movgt	r2, #1
 800b802:	4413      	add	r3, r2
 800b804:	e7e0      	b.n	800b7c8 <_printf_float+0x1a4>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	055a      	lsls	r2, r3, #21
 800b80a:	d407      	bmi.n	800b81c <_printf_float+0x1f8>
 800b80c:	6923      	ldr	r3, [r4, #16]
 800b80e:	4642      	mov	r2, r8
 800b810:	4631      	mov	r1, r6
 800b812:	4628      	mov	r0, r5
 800b814:	47b8      	blx	r7
 800b816:	3001      	adds	r0, #1
 800b818:	d12c      	bne.n	800b874 <_printf_float+0x250>
 800b81a:	e764      	b.n	800b6e6 <_printf_float+0xc2>
 800b81c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b820:	f240 80e0 	bls.w	800b9e4 <_printf_float+0x3c0>
 800b824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b828:	2200      	movs	r2, #0
 800b82a:	2300      	movs	r3, #0
 800b82c:	f7f5 f954 	bl	8000ad8 <__aeabi_dcmpeq>
 800b830:	2800      	cmp	r0, #0
 800b832:	d034      	beq.n	800b89e <_printf_float+0x27a>
 800b834:	4a37      	ldr	r2, [pc, #220]	; (800b914 <_printf_float+0x2f0>)
 800b836:	2301      	movs	r3, #1
 800b838:	4631      	mov	r1, r6
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b8      	blx	r7
 800b83e:	3001      	adds	r0, #1
 800b840:	f43f af51 	beq.w	800b6e6 <_printf_float+0xc2>
 800b844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b848:	429a      	cmp	r2, r3
 800b84a:	db02      	blt.n	800b852 <_printf_float+0x22e>
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	07d8      	lsls	r0, r3, #31
 800b850:	d510      	bpl.n	800b874 <_printf_float+0x250>
 800b852:	ee18 3a10 	vmov	r3, s16
 800b856:	4652      	mov	r2, sl
 800b858:	4631      	mov	r1, r6
 800b85a:	4628      	mov	r0, r5
 800b85c:	47b8      	blx	r7
 800b85e:	3001      	adds	r0, #1
 800b860:	f43f af41 	beq.w	800b6e6 <_printf_float+0xc2>
 800b864:	f04f 0800 	mov.w	r8, #0
 800b868:	f104 091a 	add.w	r9, r4, #26
 800b86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b86e:	3b01      	subs	r3, #1
 800b870:	4543      	cmp	r3, r8
 800b872:	dc09      	bgt.n	800b888 <_printf_float+0x264>
 800b874:	6823      	ldr	r3, [r4, #0]
 800b876:	079b      	lsls	r3, r3, #30
 800b878:	f100 8105 	bmi.w	800ba86 <_printf_float+0x462>
 800b87c:	68e0      	ldr	r0, [r4, #12]
 800b87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b880:	4298      	cmp	r0, r3
 800b882:	bfb8      	it	lt
 800b884:	4618      	movlt	r0, r3
 800b886:	e730      	b.n	800b6ea <_printf_float+0xc6>
 800b888:	2301      	movs	r3, #1
 800b88a:	464a      	mov	r2, r9
 800b88c:	4631      	mov	r1, r6
 800b88e:	4628      	mov	r0, r5
 800b890:	47b8      	blx	r7
 800b892:	3001      	adds	r0, #1
 800b894:	f43f af27 	beq.w	800b6e6 <_printf_float+0xc2>
 800b898:	f108 0801 	add.w	r8, r8, #1
 800b89c:	e7e6      	b.n	800b86c <_printf_float+0x248>
 800b89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	dc39      	bgt.n	800b918 <_printf_float+0x2f4>
 800b8a4:	4a1b      	ldr	r2, [pc, #108]	; (800b914 <_printf_float+0x2f0>)
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	47b8      	blx	r7
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	f43f af19 	beq.w	800b6e6 <_printf_float+0xc2>
 800b8b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	d102      	bne.n	800b8c2 <_printf_float+0x29e>
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	07d9      	lsls	r1, r3, #31
 800b8c0:	d5d8      	bpl.n	800b874 <_printf_float+0x250>
 800b8c2:	ee18 3a10 	vmov	r3, s16
 800b8c6:	4652      	mov	r2, sl
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	47b8      	blx	r7
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	f43f af09 	beq.w	800b6e6 <_printf_float+0xc2>
 800b8d4:	f04f 0900 	mov.w	r9, #0
 800b8d8:	f104 0a1a 	add.w	sl, r4, #26
 800b8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8de:	425b      	negs	r3, r3
 800b8e0:	454b      	cmp	r3, r9
 800b8e2:	dc01      	bgt.n	800b8e8 <_printf_float+0x2c4>
 800b8e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e6:	e792      	b.n	800b80e <_printf_float+0x1ea>
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	4652      	mov	r2, sl
 800b8ec:	4631      	mov	r1, r6
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	47b8      	blx	r7
 800b8f2:	3001      	adds	r0, #1
 800b8f4:	f43f aef7 	beq.w	800b6e6 <_printf_float+0xc2>
 800b8f8:	f109 0901 	add.w	r9, r9, #1
 800b8fc:	e7ee      	b.n	800b8dc <_printf_float+0x2b8>
 800b8fe:	bf00      	nop
 800b900:	7fefffff 	.word	0x7fefffff
 800b904:	0800e9c8 	.word	0x0800e9c8
 800b908:	0800e9cc 	.word	0x0800e9cc
 800b90c:	0800e9d4 	.word	0x0800e9d4
 800b910:	0800e9d0 	.word	0x0800e9d0
 800b914:	0800e9d8 	.word	0x0800e9d8
 800b918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b91a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b91c:	429a      	cmp	r2, r3
 800b91e:	bfa8      	it	ge
 800b920:	461a      	movge	r2, r3
 800b922:	2a00      	cmp	r2, #0
 800b924:	4691      	mov	r9, r2
 800b926:	dc37      	bgt.n	800b998 <_printf_float+0x374>
 800b928:	f04f 0b00 	mov.w	fp, #0
 800b92c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b930:	f104 021a 	add.w	r2, r4, #26
 800b934:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b936:	9305      	str	r3, [sp, #20]
 800b938:	eba3 0309 	sub.w	r3, r3, r9
 800b93c:	455b      	cmp	r3, fp
 800b93e:	dc33      	bgt.n	800b9a8 <_printf_float+0x384>
 800b940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b944:	429a      	cmp	r2, r3
 800b946:	db3b      	blt.n	800b9c0 <_printf_float+0x39c>
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	07da      	lsls	r2, r3, #31
 800b94c:	d438      	bmi.n	800b9c0 <_printf_float+0x39c>
 800b94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b950:	9a05      	ldr	r2, [sp, #20]
 800b952:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b954:	1a9a      	subs	r2, r3, r2
 800b956:	eba3 0901 	sub.w	r9, r3, r1
 800b95a:	4591      	cmp	r9, r2
 800b95c:	bfa8      	it	ge
 800b95e:	4691      	movge	r9, r2
 800b960:	f1b9 0f00 	cmp.w	r9, #0
 800b964:	dc35      	bgt.n	800b9d2 <_printf_float+0x3ae>
 800b966:	f04f 0800 	mov.w	r8, #0
 800b96a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b96e:	f104 0a1a 	add.w	sl, r4, #26
 800b972:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b976:	1a9b      	subs	r3, r3, r2
 800b978:	eba3 0309 	sub.w	r3, r3, r9
 800b97c:	4543      	cmp	r3, r8
 800b97e:	f77f af79 	ble.w	800b874 <_printf_float+0x250>
 800b982:	2301      	movs	r3, #1
 800b984:	4652      	mov	r2, sl
 800b986:	4631      	mov	r1, r6
 800b988:	4628      	mov	r0, r5
 800b98a:	47b8      	blx	r7
 800b98c:	3001      	adds	r0, #1
 800b98e:	f43f aeaa 	beq.w	800b6e6 <_printf_float+0xc2>
 800b992:	f108 0801 	add.w	r8, r8, #1
 800b996:	e7ec      	b.n	800b972 <_printf_float+0x34e>
 800b998:	4613      	mov	r3, r2
 800b99a:	4631      	mov	r1, r6
 800b99c:	4642      	mov	r2, r8
 800b99e:	4628      	mov	r0, r5
 800b9a0:	47b8      	blx	r7
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	d1c0      	bne.n	800b928 <_printf_float+0x304>
 800b9a6:	e69e      	b.n	800b6e6 <_printf_float+0xc2>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	9205      	str	r2, [sp, #20]
 800b9b0:	47b8      	blx	r7
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	f43f ae97 	beq.w	800b6e6 <_printf_float+0xc2>
 800b9b8:	9a05      	ldr	r2, [sp, #20]
 800b9ba:	f10b 0b01 	add.w	fp, fp, #1
 800b9be:	e7b9      	b.n	800b934 <_printf_float+0x310>
 800b9c0:	ee18 3a10 	vmov	r3, s16
 800b9c4:	4652      	mov	r2, sl
 800b9c6:	4631      	mov	r1, r6
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	47b8      	blx	r7
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	d1be      	bne.n	800b94e <_printf_float+0x32a>
 800b9d0:	e689      	b.n	800b6e6 <_printf_float+0xc2>
 800b9d2:	9a05      	ldr	r2, [sp, #20]
 800b9d4:	464b      	mov	r3, r9
 800b9d6:	4442      	add	r2, r8
 800b9d8:	4631      	mov	r1, r6
 800b9da:	4628      	mov	r0, r5
 800b9dc:	47b8      	blx	r7
 800b9de:	3001      	adds	r0, #1
 800b9e0:	d1c1      	bne.n	800b966 <_printf_float+0x342>
 800b9e2:	e680      	b.n	800b6e6 <_printf_float+0xc2>
 800b9e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9e6:	2a01      	cmp	r2, #1
 800b9e8:	dc01      	bgt.n	800b9ee <_printf_float+0x3ca>
 800b9ea:	07db      	lsls	r3, r3, #31
 800b9ec:	d538      	bpl.n	800ba60 <_printf_float+0x43c>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	47b8      	blx	r7
 800b9f8:	3001      	adds	r0, #1
 800b9fa:	f43f ae74 	beq.w	800b6e6 <_printf_float+0xc2>
 800b9fe:	ee18 3a10 	vmov	r3, s16
 800ba02:	4652      	mov	r2, sl
 800ba04:	4631      	mov	r1, r6
 800ba06:	4628      	mov	r0, r5
 800ba08:	47b8      	blx	r7
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	f43f ae6b 	beq.w	800b6e6 <_printf_float+0xc2>
 800ba10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba14:	2200      	movs	r2, #0
 800ba16:	2300      	movs	r3, #0
 800ba18:	f7f5 f85e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba1c:	b9d8      	cbnz	r0, 800ba56 <_printf_float+0x432>
 800ba1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba20:	f108 0201 	add.w	r2, r8, #1
 800ba24:	3b01      	subs	r3, #1
 800ba26:	4631      	mov	r1, r6
 800ba28:	4628      	mov	r0, r5
 800ba2a:	47b8      	blx	r7
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	d10e      	bne.n	800ba4e <_printf_float+0x42a>
 800ba30:	e659      	b.n	800b6e6 <_printf_float+0xc2>
 800ba32:	2301      	movs	r3, #1
 800ba34:	4652      	mov	r2, sl
 800ba36:	4631      	mov	r1, r6
 800ba38:	4628      	mov	r0, r5
 800ba3a:	47b8      	blx	r7
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	f43f ae52 	beq.w	800b6e6 <_printf_float+0xc2>
 800ba42:	f108 0801 	add.w	r8, r8, #1
 800ba46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	4543      	cmp	r3, r8
 800ba4c:	dcf1      	bgt.n	800ba32 <_printf_float+0x40e>
 800ba4e:	464b      	mov	r3, r9
 800ba50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba54:	e6dc      	b.n	800b810 <_printf_float+0x1ec>
 800ba56:	f04f 0800 	mov.w	r8, #0
 800ba5a:	f104 0a1a 	add.w	sl, r4, #26
 800ba5e:	e7f2      	b.n	800ba46 <_printf_float+0x422>
 800ba60:	2301      	movs	r3, #1
 800ba62:	4642      	mov	r2, r8
 800ba64:	e7df      	b.n	800ba26 <_printf_float+0x402>
 800ba66:	2301      	movs	r3, #1
 800ba68:	464a      	mov	r2, r9
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	47b8      	blx	r7
 800ba70:	3001      	adds	r0, #1
 800ba72:	f43f ae38 	beq.w	800b6e6 <_printf_float+0xc2>
 800ba76:	f108 0801 	add.w	r8, r8, #1
 800ba7a:	68e3      	ldr	r3, [r4, #12]
 800ba7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba7e:	1a5b      	subs	r3, r3, r1
 800ba80:	4543      	cmp	r3, r8
 800ba82:	dcf0      	bgt.n	800ba66 <_printf_float+0x442>
 800ba84:	e6fa      	b.n	800b87c <_printf_float+0x258>
 800ba86:	f04f 0800 	mov.w	r8, #0
 800ba8a:	f104 0919 	add.w	r9, r4, #25
 800ba8e:	e7f4      	b.n	800ba7a <_printf_float+0x456>

0800ba90 <_printf_common>:
 800ba90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba94:	4616      	mov	r6, r2
 800ba96:	4699      	mov	r9, r3
 800ba98:	688a      	ldr	r2, [r1, #8]
 800ba9a:	690b      	ldr	r3, [r1, #16]
 800ba9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800baa0:	4293      	cmp	r3, r2
 800baa2:	bfb8      	it	lt
 800baa4:	4613      	movlt	r3, r2
 800baa6:	6033      	str	r3, [r6, #0]
 800baa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baac:	4607      	mov	r7, r0
 800baae:	460c      	mov	r4, r1
 800bab0:	b10a      	cbz	r2, 800bab6 <_printf_common+0x26>
 800bab2:	3301      	adds	r3, #1
 800bab4:	6033      	str	r3, [r6, #0]
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	0699      	lsls	r1, r3, #26
 800baba:	bf42      	ittt	mi
 800babc:	6833      	ldrmi	r3, [r6, #0]
 800babe:	3302      	addmi	r3, #2
 800bac0:	6033      	strmi	r3, [r6, #0]
 800bac2:	6825      	ldr	r5, [r4, #0]
 800bac4:	f015 0506 	ands.w	r5, r5, #6
 800bac8:	d106      	bne.n	800bad8 <_printf_common+0x48>
 800baca:	f104 0a19 	add.w	sl, r4, #25
 800bace:	68e3      	ldr	r3, [r4, #12]
 800bad0:	6832      	ldr	r2, [r6, #0]
 800bad2:	1a9b      	subs	r3, r3, r2
 800bad4:	42ab      	cmp	r3, r5
 800bad6:	dc26      	bgt.n	800bb26 <_printf_common+0x96>
 800bad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800badc:	1e13      	subs	r3, r2, #0
 800bade:	6822      	ldr	r2, [r4, #0]
 800bae0:	bf18      	it	ne
 800bae2:	2301      	movne	r3, #1
 800bae4:	0692      	lsls	r2, r2, #26
 800bae6:	d42b      	bmi.n	800bb40 <_printf_common+0xb0>
 800bae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800baec:	4649      	mov	r1, r9
 800baee:	4638      	mov	r0, r7
 800baf0:	47c0      	blx	r8
 800baf2:	3001      	adds	r0, #1
 800baf4:	d01e      	beq.n	800bb34 <_printf_common+0xa4>
 800baf6:	6823      	ldr	r3, [r4, #0]
 800baf8:	68e5      	ldr	r5, [r4, #12]
 800bafa:	6832      	ldr	r2, [r6, #0]
 800bafc:	f003 0306 	and.w	r3, r3, #6
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	bf08      	it	eq
 800bb04:	1aad      	subeq	r5, r5, r2
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	6922      	ldr	r2, [r4, #16]
 800bb0a:	bf0c      	ite	eq
 800bb0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb10:	2500      	movne	r5, #0
 800bb12:	4293      	cmp	r3, r2
 800bb14:	bfc4      	itt	gt
 800bb16:	1a9b      	subgt	r3, r3, r2
 800bb18:	18ed      	addgt	r5, r5, r3
 800bb1a:	2600      	movs	r6, #0
 800bb1c:	341a      	adds	r4, #26
 800bb1e:	42b5      	cmp	r5, r6
 800bb20:	d11a      	bne.n	800bb58 <_printf_common+0xc8>
 800bb22:	2000      	movs	r0, #0
 800bb24:	e008      	b.n	800bb38 <_printf_common+0xa8>
 800bb26:	2301      	movs	r3, #1
 800bb28:	4652      	mov	r2, sl
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	47c0      	blx	r8
 800bb30:	3001      	adds	r0, #1
 800bb32:	d103      	bne.n	800bb3c <_printf_common+0xac>
 800bb34:	f04f 30ff 	mov.w	r0, #4294967295
 800bb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3c:	3501      	adds	r5, #1
 800bb3e:	e7c6      	b.n	800bace <_printf_common+0x3e>
 800bb40:	18e1      	adds	r1, r4, r3
 800bb42:	1c5a      	adds	r2, r3, #1
 800bb44:	2030      	movs	r0, #48	; 0x30
 800bb46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb4a:	4422      	add	r2, r4
 800bb4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb54:	3302      	adds	r3, #2
 800bb56:	e7c7      	b.n	800bae8 <_printf_common+0x58>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	4622      	mov	r2, r4
 800bb5c:	4649      	mov	r1, r9
 800bb5e:	4638      	mov	r0, r7
 800bb60:	47c0      	blx	r8
 800bb62:	3001      	adds	r0, #1
 800bb64:	d0e6      	beq.n	800bb34 <_printf_common+0xa4>
 800bb66:	3601      	adds	r6, #1
 800bb68:	e7d9      	b.n	800bb1e <_printf_common+0x8e>
	...

0800bb6c <_printf_i>:
 800bb6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb70:	7e0f      	ldrb	r7, [r1, #24]
 800bb72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb74:	2f78      	cmp	r7, #120	; 0x78
 800bb76:	4691      	mov	r9, r2
 800bb78:	4680      	mov	r8, r0
 800bb7a:	460c      	mov	r4, r1
 800bb7c:	469a      	mov	sl, r3
 800bb7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb82:	d807      	bhi.n	800bb94 <_printf_i+0x28>
 800bb84:	2f62      	cmp	r7, #98	; 0x62
 800bb86:	d80a      	bhi.n	800bb9e <_printf_i+0x32>
 800bb88:	2f00      	cmp	r7, #0
 800bb8a:	f000 80d8 	beq.w	800bd3e <_printf_i+0x1d2>
 800bb8e:	2f58      	cmp	r7, #88	; 0x58
 800bb90:	f000 80a3 	beq.w	800bcda <_printf_i+0x16e>
 800bb94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb9c:	e03a      	b.n	800bc14 <_printf_i+0xa8>
 800bb9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bba2:	2b15      	cmp	r3, #21
 800bba4:	d8f6      	bhi.n	800bb94 <_printf_i+0x28>
 800bba6:	a101      	add	r1, pc, #4	; (adr r1, 800bbac <_printf_i+0x40>)
 800bba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbac:	0800bc05 	.word	0x0800bc05
 800bbb0:	0800bc19 	.word	0x0800bc19
 800bbb4:	0800bb95 	.word	0x0800bb95
 800bbb8:	0800bb95 	.word	0x0800bb95
 800bbbc:	0800bb95 	.word	0x0800bb95
 800bbc0:	0800bb95 	.word	0x0800bb95
 800bbc4:	0800bc19 	.word	0x0800bc19
 800bbc8:	0800bb95 	.word	0x0800bb95
 800bbcc:	0800bb95 	.word	0x0800bb95
 800bbd0:	0800bb95 	.word	0x0800bb95
 800bbd4:	0800bb95 	.word	0x0800bb95
 800bbd8:	0800bd25 	.word	0x0800bd25
 800bbdc:	0800bc49 	.word	0x0800bc49
 800bbe0:	0800bd07 	.word	0x0800bd07
 800bbe4:	0800bb95 	.word	0x0800bb95
 800bbe8:	0800bb95 	.word	0x0800bb95
 800bbec:	0800bd47 	.word	0x0800bd47
 800bbf0:	0800bb95 	.word	0x0800bb95
 800bbf4:	0800bc49 	.word	0x0800bc49
 800bbf8:	0800bb95 	.word	0x0800bb95
 800bbfc:	0800bb95 	.word	0x0800bb95
 800bc00:	0800bd0f 	.word	0x0800bd0f
 800bc04:	682b      	ldr	r3, [r5, #0]
 800bc06:	1d1a      	adds	r2, r3, #4
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	602a      	str	r2, [r5, #0]
 800bc0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc14:	2301      	movs	r3, #1
 800bc16:	e0a3      	b.n	800bd60 <_printf_i+0x1f4>
 800bc18:	6820      	ldr	r0, [r4, #0]
 800bc1a:	6829      	ldr	r1, [r5, #0]
 800bc1c:	0606      	lsls	r6, r0, #24
 800bc1e:	f101 0304 	add.w	r3, r1, #4
 800bc22:	d50a      	bpl.n	800bc3a <_printf_i+0xce>
 800bc24:	680e      	ldr	r6, [r1, #0]
 800bc26:	602b      	str	r3, [r5, #0]
 800bc28:	2e00      	cmp	r6, #0
 800bc2a:	da03      	bge.n	800bc34 <_printf_i+0xc8>
 800bc2c:	232d      	movs	r3, #45	; 0x2d
 800bc2e:	4276      	negs	r6, r6
 800bc30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc34:	485e      	ldr	r0, [pc, #376]	; (800bdb0 <_printf_i+0x244>)
 800bc36:	230a      	movs	r3, #10
 800bc38:	e019      	b.n	800bc6e <_printf_i+0x102>
 800bc3a:	680e      	ldr	r6, [r1, #0]
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc42:	bf18      	it	ne
 800bc44:	b236      	sxthne	r6, r6
 800bc46:	e7ef      	b.n	800bc28 <_printf_i+0xbc>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	6820      	ldr	r0, [r4, #0]
 800bc4c:	1d19      	adds	r1, r3, #4
 800bc4e:	6029      	str	r1, [r5, #0]
 800bc50:	0601      	lsls	r1, r0, #24
 800bc52:	d501      	bpl.n	800bc58 <_printf_i+0xec>
 800bc54:	681e      	ldr	r6, [r3, #0]
 800bc56:	e002      	b.n	800bc5e <_printf_i+0xf2>
 800bc58:	0646      	lsls	r6, r0, #25
 800bc5a:	d5fb      	bpl.n	800bc54 <_printf_i+0xe8>
 800bc5c:	881e      	ldrh	r6, [r3, #0]
 800bc5e:	4854      	ldr	r0, [pc, #336]	; (800bdb0 <_printf_i+0x244>)
 800bc60:	2f6f      	cmp	r7, #111	; 0x6f
 800bc62:	bf0c      	ite	eq
 800bc64:	2308      	moveq	r3, #8
 800bc66:	230a      	movne	r3, #10
 800bc68:	2100      	movs	r1, #0
 800bc6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc6e:	6865      	ldr	r5, [r4, #4]
 800bc70:	60a5      	str	r5, [r4, #8]
 800bc72:	2d00      	cmp	r5, #0
 800bc74:	bfa2      	ittt	ge
 800bc76:	6821      	ldrge	r1, [r4, #0]
 800bc78:	f021 0104 	bicge.w	r1, r1, #4
 800bc7c:	6021      	strge	r1, [r4, #0]
 800bc7e:	b90e      	cbnz	r6, 800bc84 <_printf_i+0x118>
 800bc80:	2d00      	cmp	r5, #0
 800bc82:	d04d      	beq.n	800bd20 <_printf_i+0x1b4>
 800bc84:	4615      	mov	r5, r2
 800bc86:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc8a:	fb03 6711 	mls	r7, r3, r1, r6
 800bc8e:	5dc7      	ldrb	r7, [r0, r7]
 800bc90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc94:	4637      	mov	r7, r6
 800bc96:	42bb      	cmp	r3, r7
 800bc98:	460e      	mov	r6, r1
 800bc9a:	d9f4      	bls.n	800bc86 <_printf_i+0x11a>
 800bc9c:	2b08      	cmp	r3, #8
 800bc9e:	d10b      	bne.n	800bcb8 <_printf_i+0x14c>
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	07de      	lsls	r6, r3, #31
 800bca4:	d508      	bpl.n	800bcb8 <_printf_i+0x14c>
 800bca6:	6923      	ldr	r3, [r4, #16]
 800bca8:	6861      	ldr	r1, [r4, #4]
 800bcaa:	4299      	cmp	r1, r3
 800bcac:	bfde      	ittt	le
 800bcae:	2330      	movle	r3, #48	; 0x30
 800bcb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcb8:	1b52      	subs	r2, r2, r5
 800bcba:	6122      	str	r2, [r4, #16]
 800bcbc:	f8cd a000 	str.w	sl, [sp]
 800bcc0:	464b      	mov	r3, r9
 800bcc2:	aa03      	add	r2, sp, #12
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	4640      	mov	r0, r8
 800bcc8:	f7ff fee2 	bl	800ba90 <_printf_common>
 800bccc:	3001      	adds	r0, #1
 800bcce:	d14c      	bne.n	800bd6a <_printf_i+0x1fe>
 800bcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd4:	b004      	add	sp, #16
 800bcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcda:	4835      	ldr	r0, [pc, #212]	; (800bdb0 <_printf_i+0x244>)
 800bcdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bce0:	6829      	ldr	r1, [r5, #0]
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bce8:	6029      	str	r1, [r5, #0]
 800bcea:	061d      	lsls	r5, r3, #24
 800bcec:	d514      	bpl.n	800bd18 <_printf_i+0x1ac>
 800bcee:	07df      	lsls	r7, r3, #31
 800bcf0:	bf44      	itt	mi
 800bcf2:	f043 0320 	orrmi.w	r3, r3, #32
 800bcf6:	6023      	strmi	r3, [r4, #0]
 800bcf8:	b91e      	cbnz	r6, 800bd02 <_printf_i+0x196>
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	f023 0320 	bic.w	r3, r3, #32
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	2310      	movs	r3, #16
 800bd04:	e7b0      	b.n	800bc68 <_printf_i+0xfc>
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	f043 0320 	orr.w	r3, r3, #32
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	2378      	movs	r3, #120	; 0x78
 800bd10:	4828      	ldr	r0, [pc, #160]	; (800bdb4 <_printf_i+0x248>)
 800bd12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd16:	e7e3      	b.n	800bce0 <_printf_i+0x174>
 800bd18:	0659      	lsls	r1, r3, #25
 800bd1a:	bf48      	it	mi
 800bd1c:	b2b6      	uxthmi	r6, r6
 800bd1e:	e7e6      	b.n	800bcee <_printf_i+0x182>
 800bd20:	4615      	mov	r5, r2
 800bd22:	e7bb      	b.n	800bc9c <_printf_i+0x130>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	6826      	ldr	r6, [r4, #0]
 800bd28:	6961      	ldr	r1, [r4, #20]
 800bd2a:	1d18      	adds	r0, r3, #4
 800bd2c:	6028      	str	r0, [r5, #0]
 800bd2e:	0635      	lsls	r5, r6, #24
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	d501      	bpl.n	800bd38 <_printf_i+0x1cc>
 800bd34:	6019      	str	r1, [r3, #0]
 800bd36:	e002      	b.n	800bd3e <_printf_i+0x1d2>
 800bd38:	0670      	lsls	r0, r6, #25
 800bd3a:	d5fb      	bpl.n	800bd34 <_printf_i+0x1c8>
 800bd3c:	8019      	strh	r1, [r3, #0]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	6123      	str	r3, [r4, #16]
 800bd42:	4615      	mov	r5, r2
 800bd44:	e7ba      	b.n	800bcbc <_printf_i+0x150>
 800bd46:	682b      	ldr	r3, [r5, #0]
 800bd48:	1d1a      	adds	r2, r3, #4
 800bd4a:	602a      	str	r2, [r5, #0]
 800bd4c:	681d      	ldr	r5, [r3, #0]
 800bd4e:	6862      	ldr	r2, [r4, #4]
 800bd50:	2100      	movs	r1, #0
 800bd52:	4628      	mov	r0, r5
 800bd54:	f7f4 fa4c 	bl	80001f0 <memchr>
 800bd58:	b108      	cbz	r0, 800bd5e <_printf_i+0x1f2>
 800bd5a:	1b40      	subs	r0, r0, r5
 800bd5c:	6060      	str	r0, [r4, #4]
 800bd5e:	6863      	ldr	r3, [r4, #4]
 800bd60:	6123      	str	r3, [r4, #16]
 800bd62:	2300      	movs	r3, #0
 800bd64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd68:	e7a8      	b.n	800bcbc <_printf_i+0x150>
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	4649      	mov	r1, r9
 800bd70:	4640      	mov	r0, r8
 800bd72:	47d0      	blx	sl
 800bd74:	3001      	adds	r0, #1
 800bd76:	d0ab      	beq.n	800bcd0 <_printf_i+0x164>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	079b      	lsls	r3, r3, #30
 800bd7c:	d413      	bmi.n	800bda6 <_printf_i+0x23a>
 800bd7e:	68e0      	ldr	r0, [r4, #12]
 800bd80:	9b03      	ldr	r3, [sp, #12]
 800bd82:	4298      	cmp	r0, r3
 800bd84:	bfb8      	it	lt
 800bd86:	4618      	movlt	r0, r3
 800bd88:	e7a4      	b.n	800bcd4 <_printf_i+0x168>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	4632      	mov	r2, r6
 800bd8e:	4649      	mov	r1, r9
 800bd90:	4640      	mov	r0, r8
 800bd92:	47d0      	blx	sl
 800bd94:	3001      	adds	r0, #1
 800bd96:	d09b      	beq.n	800bcd0 <_printf_i+0x164>
 800bd98:	3501      	adds	r5, #1
 800bd9a:	68e3      	ldr	r3, [r4, #12]
 800bd9c:	9903      	ldr	r1, [sp, #12]
 800bd9e:	1a5b      	subs	r3, r3, r1
 800bda0:	42ab      	cmp	r3, r5
 800bda2:	dcf2      	bgt.n	800bd8a <_printf_i+0x21e>
 800bda4:	e7eb      	b.n	800bd7e <_printf_i+0x212>
 800bda6:	2500      	movs	r5, #0
 800bda8:	f104 0619 	add.w	r6, r4, #25
 800bdac:	e7f5      	b.n	800bd9a <_printf_i+0x22e>
 800bdae:	bf00      	nop
 800bdb0:	0800e9da 	.word	0x0800e9da
 800bdb4:	0800e9eb 	.word	0x0800e9eb

0800bdb8 <iprintf>:
 800bdb8:	b40f      	push	{r0, r1, r2, r3}
 800bdba:	4b0a      	ldr	r3, [pc, #40]	; (800bde4 <iprintf+0x2c>)
 800bdbc:	b513      	push	{r0, r1, r4, lr}
 800bdbe:	681c      	ldr	r4, [r3, #0]
 800bdc0:	b124      	cbz	r4, 800bdcc <iprintf+0x14>
 800bdc2:	69a3      	ldr	r3, [r4, #24]
 800bdc4:	b913      	cbnz	r3, 800bdcc <iprintf+0x14>
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f001 f912 	bl	800cff0 <__sinit>
 800bdcc:	ab05      	add	r3, sp, #20
 800bdce:	9a04      	ldr	r2, [sp, #16]
 800bdd0:	68a1      	ldr	r1, [r4, #8]
 800bdd2:	9301      	str	r3, [sp, #4]
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f001 ff4f 	bl	800dc78 <_vfiprintf_r>
 800bdda:	b002      	add	sp, #8
 800bddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde0:	b004      	add	sp, #16
 800bde2:	4770      	bx	lr
 800bde4:	20000028 	.word	0x20000028

0800bde8 <_puts_r>:
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	460e      	mov	r6, r1
 800bdec:	4605      	mov	r5, r0
 800bdee:	b118      	cbz	r0, 800bdf8 <_puts_r+0x10>
 800bdf0:	6983      	ldr	r3, [r0, #24]
 800bdf2:	b90b      	cbnz	r3, 800bdf8 <_puts_r+0x10>
 800bdf4:	f001 f8fc 	bl	800cff0 <__sinit>
 800bdf8:	69ab      	ldr	r3, [r5, #24]
 800bdfa:	68ac      	ldr	r4, [r5, #8]
 800bdfc:	b913      	cbnz	r3, 800be04 <_puts_r+0x1c>
 800bdfe:	4628      	mov	r0, r5
 800be00:	f001 f8f6 	bl	800cff0 <__sinit>
 800be04:	4b2c      	ldr	r3, [pc, #176]	; (800beb8 <_puts_r+0xd0>)
 800be06:	429c      	cmp	r4, r3
 800be08:	d120      	bne.n	800be4c <_puts_r+0x64>
 800be0a:	686c      	ldr	r4, [r5, #4]
 800be0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be0e:	07db      	lsls	r3, r3, #31
 800be10:	d405      	bmi.n	800be1e <_puts_r+0x36>
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	0598      	lsls	r0, r3, #22
 800be16:	d402      	bmi.n	800be1e <_puts_r+0x36>
 800be18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be1a:	f001 f98c 	bl	800d136 <__retarget_lock_acquire_recursive>
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	0719      	lsls	r1, r3, #28
 800be22:	d51d      	bpl.n	800be60 <_puts_r+0x78>
 800be24:	6923      	ldr	r3, [r4, #16]
 800be26:	b1db      	cbz	r3, 800be60 <_puts_r+0x78>
 800be28:	3e01      	subs	r6, #1
 800be2a:	68a3      	ldr	r3, [r4, #8]
 800be2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be30:	3b01      	subs	r3, #1
 800be32:	60a3      	str	r3, [r4, #8]
 800be34:	bb39      	cbnz	r1, 800be86 <_puts_r+0x9e>
 800be36:	2b00      	cmp	r3, #0
 800be38:	da38      	bge.n	800beac <_puts_r+0xc4>
 800be3a:	4622      	mov	r2, r4
 800be3c:	210a      	movs	r1, #10
 800be3e:	4628      	mov	r0, r5
 800be40:	f000 f880 	bl	800bf44 <__swbuf_r>
 800be44:	3001      	adds	r0, #1
 800be46:	d011      	beq.n	800be6c <_puts_r+0x84>
 800be48:	250a      	movs	r5, #10
 800be4a:	e011      	b.n	800be70 <_puts_r+0x88>
 800be4c:	4b1b      	ldr	r3, [pc, #108]	; (800bebc <_puts_r+0xd4>)
 800be4e:	429c      	cmp	r4, r3
 800be50:	d101      	bne.n	800be56 <_puts_r+0x6e>
 800be52:	68ac      	ldr	r4, [r5, #8]
 800be54:	e7da      	b.n	800be0c <_puts_r+0x24>
 800be56:	4b1a      	ldr	r3, [pc, #104]	; (800bec0 <_puts_r+0xd8>)
 800be58:	429c      	cmp	r4, r3
 800be5a:	bf08      	it	eq
 800be5c:	68ec      	ldreq	r4, [r5, #12]
 800be5e:	e7d5      	b.n	800be0c <_puts_r+0x24>
 800be60:	4621      	mov	r1, r4
 800be62:	4628      	mov	r0, r5
 800be64:	f000 f8c0 	bl	800bfe8 <__swsetup_r>
 800be68:	2800      	cmp	r0, #0
 800be6a:	d0dd      	beq.n	800be28 <_puts_r+0x40>
 800be6c:	f04f 35ff 	mov.w	r5, #4294967295
 800be70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be72:	07da      	lsls	r2, r3, #31
 800be74:	d405      	bmi.n	800be82 <_puts_r+0x9a>
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	059b      	lsls	r3, r3, #22
 800be7a:	d402      	bmi.n	800be82 <_puts_r+0x9a>
 800be7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be7e:	f001 f95b 	bl	800d138 <__retarget_lock_release_recursive>
 800be82:	4628      	mov	r0, r5
 800be84:	bd70      	pop	{r4, r5, r6, pc}
 800be86:	2b00      	cmp	r3, #0
 800be88:	da04      	bge.n	800be94 <_puts_r+0xac>
 800be8a:	69a2      	ldr	r2, [r4, #24]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	dc06      	bgt.n	800be9e <_puts_r+0xb6>
 800be90:	290a      	cmp	r1, #10
 800be92:	d004      	beq.n	800be9e <_puts_r+0xb6>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	6022      	str	r2, [r4, #0]
 800be9a:	7019      	strb	r1, [r3, #0]
 800be9c:	e7c5      	b.n	800be2a <_puts_r+0x42>
 800be9e:	4622      	mov	r2, r4
 800bea0:	4628      	mov	r0, r5
 800bea2:	f000 f84f 	bl	800bf44 <__swbuf_r>
 800bea6:	3001      	adds	r0, #1
 800bea8:	d1bf      	bne.n	800be2a <_puts_r+0x42>
 800beaa:	e7df      	b.n	800be6c <_puts_r+0x84>
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	250a      	movs	r5, #10
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	6022      	str	r2, [r4, #0]
 800beb4:	701d      	strb	r5, [r3, #0]
 800beb6:	e7db      	b.n	800be70 <_puts_r+0x88>
 800beb8:	0800eaac 	.word	0x0800eaac
 800bebc:	0800eacc 	.word	0x0800eacc
 800bec0:	0800ea8c 	.word	0x0800ea8c

0800bec4 <puts>:
 800bec4:	4b02      	ldr	r3, [pc, #8]	; (800bed0 <puts+0xc>)
 800bec6:	4601      	mov	r1, r0
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	f7ff bf8d 	b.w	800bde8 <_puts_r>
 800bece:	bf00      	nop
 800bed0:	20000028 	.word	0x20000028

0800bed4 <_sbrk_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d06      	ldr	r5, [pc, #24]	; (800bef0 <_sbrk_r+0x1c>)
 800bed8:	2300      	movs	r3, #0
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	602b      	str	r3, [r5, #0]
 800bee0:	f7f6 fea6 	bl	8002c30 <_sbrk>
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	d102      	bne.n	800beee <_sbrk_r+0x1a>
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	b103      	cbz	r3, 800beee <_sbrk_r+0x1a>
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	20002a68 	.word	0x20002a68

0800bef4 <siprintf>:
 800bef4:	b40e      	push	{r1, r2, r3}
 800bef6:	b500      	push	{lr}
 800bef8:	b09c      	sub	sp, #112	; 0x70
 800befa:	ab1d      	add	r3, sp, #116	; 0x74
 800befc:	9002      	str	r0, [sp, #8]
 800befe:	9006      	str	r0, [sp, #24]
 800bf00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf04:	4809      	ldr	r0, [pc, #36]	; (800bf2c <siprintf+0x38>)
 800bf06:	9107      	str	r1, [sp, #28]
 800bf08:	9104      	str	r1, [sp, #16]
 800bf0a:	4909      	ldr	r1, [pc, #36]	; (800bf30 <siprintf+0x3c>)
 800bf0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf10:	9105      	str	r1, [sp, #20]
 800bf12:	6800      	ldr	r0, [r0, #0]
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	a902      	add	r1, sp, #8
 800bf18:	f001 fd84 	bl	800da24 <_svfiprintf_r>
 800bf1c:	9b02      	ldr	r3, [sp, #8]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	701a      	strb	r2, [r3, #0]
 800bf22:	b01c      	add	sp, #112	; 0x70
 800bf24:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf28:	b003      	add	sp, #12
 800bf2a:	4770      	bx	lr
 800bf2c:	20000028 	.word	0x20000028
 800bf30:	ffff0208 	.word	0xffff0208

0800bf34 <strcpy>:
 800bf34:	4603      	mov	r3, r0
 800bf36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf3a:	f803 2b01 	strb.w	r2, [r3], #1
 800bf3e:	2a00      	cmp	r2, #0
 800bf40:	d1f9      	bne.n	800bf36 <strcpy+0x2>
 800bf42:	4770      	bx	lr

0800bf44 <__swbuf_r>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	460e      	mov	r6, r1
 800bf48:	4614      	mov	r4, r2
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	b118      	cbz	r0, 800bf56 <__swbuf_r+0x12>
 800bf4e:	6983      	ldr	r3, [r0, #24]
 800bf50:	b90b      	cbnz	r3, 800bf56 <__swbuf_r+0x12>
 800bf52:	f001 f84d 	bl	800cff0 <__sinit>
 800bf56:	4b21      	ldr	r3, [pc, #132]	; (800bfdc <__swbuf_r+0x98>)
 800bf58:	429c      	cmp	r4, r3
 800bf5a:	d12b      	bne.n	800bfb4 <__swbuf_r+0x70>
 800bf5c:	686c      	ldr	r4, [r5, #4]
 800bf5e:	69a3      	ldr	r3, [r4, #24]
 800bf60:	60a3      	str	r3, [r4, #8]
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	071a      	lsls	r2, r3, #28
 800bf66:	d52f      	bpl.n	800bfc8 <__swbuf_r+0x84>
 800bf68:	6923      	ldr	r3, [r4, #16]
 800bf6a:	b36b      	cbz	r3, 800bfc8 <__swbuf_r+0x84>
 800bf6c:	6923      	ldr	r3, [r4, #16]
 800bf6e:	6820      	ldr	r0, [r4, #0]
 800bf70:	1ac0      	subs	r0, r0, r3
 800bf72:	6963      	ldr	r3, [r4, #20]
 800bf74:	b2f6      	uxtb	r6, r6
 800bf76:	4283      	cmp	r3, r0
 800bf78:	4637      	mov	r7, r6
 800bf7a:	dc04      	bgt.n	800bf86 <__swbuf_r+0x42>
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	4628      	mov	r0, r5
 800bf80:	f000 ffa2 	bl	800cec8 <_fflush_r>
 800bf84:	bb30      	cbnz	r0, 800bfd4 <__swbuf_r+0x90>
 800bf86:	68a3      	ldr	r3, [r4, #8]
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	60a3      	str	r3, [r4, #8]
 800bf8c:	6823      	ldr	r3, [r4, #0]
 800bf8e:	1c5a      	adds	r2, r3, #1
 800bf90:	6022      	str	r2, [r4, #0]
 800bf92:	701e      	strb	r6, [r3, #0]
 800bf94:	6963      	ldr	r3, [r4, #20]
 800bf96:	3001      	adds	r0, #1
 800bf98:	4283      	cmp	r3, r0
 800bf9a:	d004      	beq.n	800bfa6 <__swbuf_r+0x62>
 800bf9c:	89a3      	ldrh	r3, [r4, #12]
 800bf9e:	07db      	lsls	r3, r3, #31
 800bfa0:	d506      	bpl.n	800bfb0 <__swbuf_r+0x6c>
 800bfa2:	2e0a      	cmp	r6, #10
 800bfa4:	d104      	bne.n	800bfb0 <__swbuf_r+0x6c>
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	f000 ff8d 	bl	800cec8 <_fflush_r>
 800bfae:	b988      	cbnz	r0, 800bfd4 <__swbuf_r+0x90>
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb4:	4b0a      	ldr	r3, [pc, #40]	; (800bfe0 <__swbuf_r+0x9c>)
 800bfb6:	429c      	cmp	r4, r3
 800bfb8:	d101      	bne.n	800bfbe <__swbuf_r+0x7a>
 800bfba:	68ac      	ldr	r4, [r5, #8]
 800bfbc:	e7cf      	b.n	800bf5e <__swbuf_r+0x1a>
 800bfbe:	4b09      	ldr	r3, [pc, #36]	; (800bfe4 <__swbuf_r+0xa0>)
 800bfc0:	429c      	cmp	r4, r3
 800bfc2:	bf08      	it	eq
 800bfc4:	68ec      	ldreq	r4, [r5, #12]
 800bfc6:	e7ca      	b.n	800bf5e <__swbuf_r+0x1a>
 800bfc8:	4621      	mov	r1, r4
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f000 f80c 	bl	800bfe8 <__swsetup_r>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d0cb      	beq.n	800bf6c <__swbuf_r+0x28>
 800bfd4:	f04f 37ff 	mov.w	r7, #4294967295
 800bfd8:	e7ea      	b.n	800bfb0 <__swbuf_r+0x6c>
 800bfda:	bf00      	nop
 800bfdc:	0800eaac 	.word	0x0800eaac
 800bfe0:	0800eacc 	.word	0x0800eacc
 800bfe4:	0800ea8c 	.word	0x0800ea8c

0800bfe8 <__swsetup_r>:
 800bfe8:	4b32      	ldr	r3, [pc, #200]	; (800c0b4 <__swsetup_r+0xcc>)
 800bfea:	b570      	push	{r4, r5, r6, lr}
 800bfec:	681d      	ldr	r5, [r3, #0]
 800bfee:	4606      	mov	r6, r0
 800bff0:	460c      	mov	r4, r1
 800bff2:	b125      	cbz	r5, 800bffe <__swsetup_r+0x16>
 800bff4:	69ab      	ldr	r3, [r5, #24]
 800bff6:	b913      	cbnz	r3, 800bffe <__swsetup_r+0x16>
 800bff8:	4628      	mov	r0, r5
 800bffa:	f000 fff9 	bl	800cff0 <__sinit>
 800bffe:	4b2e      	ldr	r3, [pc, #184]	; (800c0b8 <__swsetup_r+0xd0>)
 800c000:	429c      	cmp	r4, r3
 800c002:	d10f      	bne.n	800c024 <__swsetup_r+0x3c>
 800c004:	686c      	ldr	r4, [r5, #4]
 800c006:	89a3      	ldrh	r3, [r4, #12]
 800c008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c00c:	0719      	lsls	r1, r3, #28
 800c00e:	d42c      	bmi.n	800c06a <__swsetup_r+0x82>
 800c010:	06dd      	lsls	r5, r3, #27
 800c012:	d411      	bmi.n	800c038 <__swsetup_r+0x50>
 800c014:	2309      	movs	r3, #9
 800c016:	6033      	str	r3, [r6, #0]
 800c018:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c01c:	81a3      	strh	r3, [r4, #12]
 800c01e:	f04f 30ff 	mov.w	r0, #4294967295
 800c022:	e03e      	b.n	800c0a2 <__swsetup_r+0xba>
 800c024:	4b25      	ldr	r3, [pc, #148]	; (800c0bc <__swsetup_r+0xd4>)
 800c026:	429c      	cmp	r4, r3
 800c028:	d101      	bne.n	800c02e <__swsetup_r+0x46>
 800c02a:	68ac      	ldr	r4, [r5, #8]
 800c02c:	e7eb      	b.n	800c006 <__swsetup_r+0x1e>
 800c02e:	4b24      	ldr	r3, [pc, #144]	; (800c0c0 <__swsetup_r+0xd8>)
 800c030:	429c      	cmp	r4, r3
 800c032:	bf08      	it	eq
 800c034:	68ec      	ldreq	r4, [r5, #12]
 800c036:	e7e6      	b.n	800c006 <__swsetup_r+0x1e>
 800c038:	0758      	lsls	r0, r3, #29
 800c03a:	d512      	bpl.n	800c062 <__swsetup_r+0x7a>
 800c03c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c03e:	b141      	cbz	r1, 800c052 <__swsetup_r+0x6a>
 800c040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c044:	4299      	cmp	r1, r3
 800c046:	d002      	beq.n	800c04e <__swsetup_r+0x66>
 800c048:	4630      	mov	r0, r6
 800c04a:	f7ff f96b 	bl	800b324 <_free_r>
 800c04e:	2300      	movs	r3, #0
 800c050:	6363      	str	r3, [r4, #52]	; 0x34
 800c052:	89a3      	ldrh	r3, [r4, #12]
 800c054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	2300      	movs	r3, #0
 800c05c:	6063      	str	r3, [r4, #4]
 800c05e:	6923      	ldr	r3, [r4, #16]
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f043 0308 	orr.w	r3, r3, #8
 800c068:	81a3      	strh	r3, [r4, #12]
 800c06a:	6923      	ldr	r3, [r4, #16]
 800c06c:	b94b      	cbnz	r3, 800c082 <__swsetup_r+0x9a>
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c078:	d003      	beq.n	800c082 <__swsetup_r+0x9a>
 800c07a:	4621      	mov	r1, r4
 800c07c:	4630      	mov	r0, r6
 800c07e:	f001 f881 	bl	800d184 <__smakebuf_r>
 800c082:	89a0      	ldrh	r0, [r4, #12]
 800c084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c088:	f010 0301 	ands.w	r3, r0, #1
 800c08c:	d00a      	beq.n	800c0a4 <__swsetup_r+0xbc>
 800c08e:	2300      	movs	r3, #0
 800c090:	60a3      	str	r3, [r4, #8]
 800c092:	6963      	ldr	r3, [r4, #20]
 800c094:	425b      	negs	r3, r3
 800c096:	61a3      	str	r3, [r4, #24]
 800c098:	6923      	ldr	r3, [r4, #16]
 800c09a:	b943      	cbnz	r3, 800c0ae <__swsetup_r+0xc6>
 800c09c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0a0:	d1ba      	bne.n	800c018 <__swsetup_r+0x30>
 800c0a2:	bd70      	pop	{r4, r5, r6, pc}
 800c0a4:	0781      	lsls	r1, r0, #30
 800c0a6:	bf58      	it	pl
 800c0a8:	6963      	ldrpl	r3, [r4, #20]
 800c0aa:	60a3      	str	r3, [r4, #8]
 800c0ac:	e7f4      	b.n	800c098 <__swsetup_r+0xb0>
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	e7f7      	b.n	800c0a2 <__swsetup_r+0xba>
 800c0b2:	bf00      	nop
 800c0b4:	20000028 	.word	0x20000028
 800c0b8:	0800eaac 	.word	0x0800eaac
 800c0bc:	0800eacc 	.word	0x0800eacc
 800c0c0:	0800ea8c 	.word	0x0800ea8c

0800c0c4 <quorem>:
 800c0c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c8:	6903      	ldr	r3, [r0, #16]
 800c0ca:	690c      	ldr	r4, [r1, #16]
 800c0cc:	42a3      	cmp	r3, r4
 800c0ce:	4607      	mov	r7, r0
 800c0d0:	f2c0 8081 	blt.w	800c1d6 <quorem+0x112>
 800c0d4:	3c01      	subs	r4, #1
 800c0d6:	f101 0814 	add.w	r8, r1, #20
 800c0da:	f100 0514 	add.w	r5, r0, #20
 800c0de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0e2:	9301      	str	r3, [sp, #4]
 800c0e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c0e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c0f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c0f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c0fc:	d331      	bcc.n	800c162 <quorem+0x9e>
 800c0fe:	f04f 0e00 	mov.w	lr, #0
 800c102:	4640      	mov	r0, r8
 800c104:	46ac      	mov	ip, r5
 800c106:	46f2      	mov	sl, lr
 800c108:	f850 2b04 	ldr.w	r2, [r0], #4
 800c10c:	b293      	uxth	r3, r2
 800c10e:	fb06 e303 	mla	r3, r6, r3, lr
 800c112:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c116:	b29b      	uxth	r3, r3
 800c118:	ebaa 0303 	sub.w	r3, sl, r3
 800c11c:	f8dc a000 	ldr.w	sl, [ip]
 800c120:	0c12      	lsrs	r2, r2, #16
 800c122:	fa13 f38a 	uxtah	r3, r3, sl
 800c126:	fb06 e202 	mla	r2, r6, r2, lr
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	9b00      	ldr	r3, [sp, #0]
 800c12e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c132:	b292      	uxth	r2, r2
 800c134:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c138:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c13c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c140:	4581      	cmp	r9, r0
 800c142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c146:	f84c 3b04 	str.w	r3, [ip], #4
 800c14a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c14e:	d2db      	bcs.n	800c108 <quorem+0x44>
 800c150:	f855 300b 	ldr.w	r3, [r5, fp]
 800c154:	b92b      	cbnz	r3, 800c162 <quorem+0x9e>
 800c156:	9b01      	ldr	r3, [sp, #4]
 800c158:	3b04      	subs	r3, #4
 800c15a:	429d      	cmp	r5, r3
 800c15c:	461a      	mov	r2, r3
 800c15e:	d32e      	bcc.n	800c1be <quorem+0xfa>
 800c160:	613c      	str	r4, [r7, #16]
 800c162:	4638      	mov	r0, r7
 800c164:	f001 faea 	bl	800d73c <__mcmp>
 800c168:	2800      	cmp	r0, #0
 800c16a:	db24      	blt.n	800c1b6 <quorem+0xf2>
 800c16c:	3601      	adds	r6, #1
 800c16e:	4628      	mov	r0, r5
 800c170:	f04f 0c00 	mov.w	ip, #0
 800c174:	f858 2b04 	ldr.w	r2, [r8], #4
 800c178:	f8d0 e000 	ldr.w	lr, [r0]
 800c17c:	b293      	uxth	r3, r2
 800c17e:	ebac 0303 	sub.w	r3, ip, r3
 800c182:	0c12      	lsrs	r2, r2, #16
 800c184:	fa13 f38e 	uxtah	r3, r3, lr
 800c188:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c18c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c190:	b29b      	uxth	r3, r3
 800c192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c196:	45c1      	cmp	r9, r8
 800c198:	f840 3b04 	str.w	r3, [r0], #4
 800c19c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c1a0:	d2e8      	bcs.n	800c174 <quorem+0xb0>
 800c1a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1aa:	b922      	cbnz	r2, 800c1b6 <quorem+0xf2>
 800c1ac:	3b04      	subs	r3, #4
 800c1ae:	429d      	cmp	r5, r3
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	d30a      	bcc.n	800c1ca <quorem+0x106>
 800c1b4:	613c      	str	r4, [r7, #16]
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	b003      	add	sp, #12
 800c1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1be:	6812      	ldr	r2, [r2, #0]
 800c1c0:	3b04      	subs	r3, #4
 800c1c2:	2a00      	cmp	r2, #0
 800c1c4:	d1cc      	bne.n	800c160 <quorem+0x9c>
 800c1c6:	3c01      	subs	r4, #1
 800c1c8:	e7c7      	b.n	800c15a <quorem+0x96>
 800c1ca:	6812      	ldr	r2, [r2, #0]
 800c1cc:	3b04      	subs	r3, #4
 800c1ce:	2a00      	cmp	r2, #0
 800c1d0:	d1f0      	bne.n	800c1b4 <quorem+0xf0>
 800c1d2:	3c01      	subs	r4, #1
 800c1d4:	e7eb      	b.n	800c1ae <quorem+0xea>
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	e7ee      	b.n	800c1b8 <quorem+0xf4>
 800c1da:	0000      	movs	r0, r0
 800c1dc:	0000      	movs	r0, r0
	...

0800c1e0 <_dtoa_r>:
 800c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e4:	ed2d 8b04 	vpush	{d8-d9}
 800c1e8:	ec57 6b10 	vmov	r6, r7, d0
 800c1ec:	b093      	sub	sp, #76	; 0x4c
 800c1ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c1f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c1f4:	9106      	str	r1, [sp, #24]
 800c1f6:	ee10 aa10 	vmov	sl, s0
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c1fe:	930c      	str	r3, [sp, #48]	; 0x30
 800c200:	46bb      	mov	fp, r7
 800c202:	b975      	cbnz	r5, 800c222 <_dtoa_r+0x42>
 800c204:	2010      	movs	r0, #16
 800c206:	f7ff f875 	bl	800b2f4 <malloc>
 800c20a:	4602      	mov	r2, r0
 800c20c:	6260      	str	r0, [r4, #36]	; 0x24
 800c20e:	b920      	cbnz	r0, 800c21a <_dtoa_r+0x3a>
 800c210:	4ba7      	ldr	r3, [pc, #668]	; (800c4b0 <_dtoa_r+0x2d0>)
 800c212:	21ea      	movs	r1, #234	; 0xea
 800c214:	48a7      	ldr	r0, [pc, #668]	; (800c4b4 <_dtoa_r+0x2d4>)
 800c216:	f001 feb5 	bl	800df84 <__assert_func>
 800c21a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c21e:	6005      	str	r5, [r0, #0]
 800c220:	60c5      	str	r5, [r0, #12]
 800c222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c224:	6819      	ldr	r1, [r3, #0]
 800c226:	b151      	cbz	r1, 800c23e <_dtoa_r+0x5e>
 800c228:	685a      	ldr	r2, [r3, #4]
 800c22a:	604a      	str	r2, [r1, #4]
 800c22c:	2301      	movs	r3, #1
 800c22e:	4093      	lsls	r3, r2
 800c230:	608b      	str	r3, [r1, #8]
 800c232:	4620      	mov	r0, r4
 800c234:	f001 f840 	bl	800d2b8 <_Bfree>
 800c238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c23a:	2200      	movs	r2, #0
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	1e3b      	subs	r3, r7, #0
 800c240:	bfaa      	itet	ge
 800c242:	2300      	movge	r3, #0
 800c244:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c248:	f8c8 3000 	strge.w	r3, [r8]
 800c24c:	4b9a      	ldr	r3, [pc, #616]	; (800c4b8 <_dtoa_r+0x2d8>)
 800c24e:	bfbc      	itt	lt
 800c250:	2201      	movlt	r2, #1
 800c252:	f8c8 2000 	strlt.w	r2, [r8]
 800c256:	ea33 030b 	bics.w	r3, r3, fp
 800c25a:	d11b      	bne.n	800c294 <_dtoa_r+0xb4>
 800c25c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c25e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c262:	6013      	str	r3, [r2, #0]
 800c264:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c268:	4333      	orrs	r3, r6
 800c26a:	f000 8592 	beq.w	800cd92 <_dtoa_r+0xbb2>
 800c26e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c270:	b963      	cbnz	r3, 800c28c <_dtoa_r+0xac>
 800c272:	4b92      	ldr	r3, [pc, #584]	; (800c4bc <_dtoa_r+0x2dc>)
 800c274:	e022      	b.n	800c2bc <_dtoa_r+0xdc>
 800c276:	4b92      	ldr	r3, [pc, #584]	; (800c4c0 <_dtoa_r+0x2e0>)
 800c278:	9301      	str	r3, [sp, #4]
 800c27a:	3308      	adds	r3, #8
 800c27c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	9801      	ldr	r0, [sp, #4]
 800c282:	b013      	add	sp, #76	; 0x4c
 800c284:	ecbd 8b04 	vpop	{d8-d9}
 800c288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28c:	4b8b      	ldr	r3, [pc, #556]	; (800c4bc <_dtoa_r+0x2dc>)
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	3303      	adds	r3, #3
 800c292:	e7f3      	b.n	800c27c <_dtoa_r+0x9c>
 800c294:	2200      	movs	r2, #0
 800c296:	2300      	movs	r3, #0
 800c298:	4650      	mov	r0, sl
 800c29a:	4659      	mov	r1, fp
 800c29c:	f7f4 fc1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2a0:	ec4b ab19 	vmov	d9, sl, fp
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	b158      	cbz	r0, 800c2c0 <_dtoa_r+0xe0>
 800c2a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f000 856b 	beq.w	800cd8c <_dtoa_r+0xbac>
 800c2b6:	4883      	ldr	r0, [pc, #524]	; (800c4c4 <_dtoa_r+0x2e4>)
 800c2b8:	6018      	str	r0, [r3, #0]
 800c2ba:	1e43      	subs	r3, r0, #1
 800c2bc:	9301      	str	r3, [sp, #4]
 800c2be:	e7df      	b.n	800c280 <_dtoa_r+0xa0>
 800c2c0:	ec4b ab10 	vmov	d0, sl, fp
 800c2c4:	aa10      	add	r2, sp, #64	; 0x40
 800c2c6:	a911      	add	r1, sp, #68	; 0x44
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f001 fadd 	bl	800d888 <__d2b>
 800c2ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c2d2:	ee08 0a10 	vmov	s16, r0
 800c2d6:	2d00      	cmp	r5, #0
 800c2d8:	f000 8084 	beq.w	800c3e4 <_dtoa_r+0x204>
 800c2dc:	ee19 3a90 	vmov	r3, s19
 800c2e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c2e8:	4656      	mov	r6, sl
 800c2ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c2ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c2f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c2f6:	4b74      	ldr	r3, [pc, #464]	; (800c4c8 <_dtoa_r+0x2e8>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	f7f3 ffcb 	bl	8000298 <__aeabi_dsub>
 800c302:	a365      	add	r3, pc, #404	; (adr r3, 800c498 <_dtoa_r+0x2b8>)
 800c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c308:	f7f4 f97e 	bl	8000608 <__aeabi_dmul>
 800c30c:	a364      	add	r3, pc, #400	; (adr r3, 800c4a0 <_dtoa_r+0x2c0>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	f7f3 ffc3 	bl	800029c <__adddf3>
 800c316:	4606      	mov	r6, r0
 800c318:	4628      	mov	r0, r5
 800c31a:	460f      	mov	r7, r1
 800c31c:	f7f4 f90a 	bl	8000534 <__aeabi_i2d>
 800c320:	a361      	add	r3, pc, #388	; (adr r3, 800c4a8 <_dtoa_r+0x2c8>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	f7f4 f96f 	bl	8000608 <__aeabi_dmul>
 800c32a:	4602      	mov	r2, r0
 800c32c:	460b      	mov	r3, r1
 800c32e:	4630      	mov	r0, r6
 800c330:	4639      	mov	r1, r7
 800c332:	f7f3 ffb3 	bl	800029c <__adddf3>
 800c336:	4606      	mov	r6, r0
 800c338:	460f      	mov	r7, r1
 800c33a:	f7f4 fc15 	bl	8000b68 <__aeabi_d2iz>
 800c33e:	2200      	movs	r2, #0
 800c340:	9000      	str	r0, [sp, #0]
 800c342:	2300      	movs	r3, #0
 800c344:	4630      	mov	r0, r6
 800c346:	4639      	mov	r1, r7
 800c348:	f7f4 fbd0 	bl	8000aec <__aeabi_dcmplt>
 800c34c:	b150      	cbz	r0, 800c364 <_dtoa_r+0x184>
 800c34e:	9800      	ldr	r0, [sp, #0]
 800c350:	f7f4 f8f0 	bl	8000534 <__aeabi_i2d>
 800c354:	4632      	mov	r2, r6
 800c356:	463b      	mov	r3, r7
 800c358:	f7f4 fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800c35c:	b910      	cbnz	r0, 800c364 <_dtoa_r+0x184>
 800c35e:	9b00      	ldr	r3, [sp, #0]
 800c360:	3b01      	subs	r3, #1
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	9b00      	ldr	r3, [sp, #0]
 800c366:	2b16      	cmp	r3, #22
 800c368:	d85a      	bhi.n	800c420 <_dtoa_r+0x240>
 800c36a:	9a00      	ldr	r2, [sp, #0]
 800c36c:	4b57      	ldr	r3, [pc, #348]	; (800c4cc <_dtoa_r+0x2ec>)
 800c36e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	ec51 0b19 	vmov	r0, r1, d9
 800c37a:	f7f4 fbb7 	bl	8000aec <__aeabi_dcmplt>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d050      	beq.n	800c424 <_dtoa_r+0x244>
 800c382:	9b00      	ldr	r3, [sp, #0]
 800c384:	3b01      	subs	r3, #1
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	2300      	movs	r3, #0
 800c38a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c38c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c38e:	1b5d      	subs	r5, r3, r5
 800c390:	1e6b      	subs	r3, r5, #1
 800c392:	9305      	str	r3, [sp, #20]
 800c394:	bf45      	ittet	mi
 800c396:	f1c5 0301 	rsbmi	r3, r5, #1
 800c39a:	9304      	strmi	r3, [sp, #16]
 800c39c:	2300      	movpl	r3, #0
 800c39e:	2300      	movmi	r3, #0
 800c3a0:	bf4c      	ite	mi
 800c3a2:	9305      	strmi	r3, [sp, #20]
 800c3a4:	9304      	strpl	r3, [sp, #16]
 800c3a6:	9b00      	ldr	r3, [sp, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	db3d      	blt.n	800c428 <_dtoa_r+0x248>
 800c3ac:	9b05      	ldr	r3, [sp, #20]
 800c3ae:	9a00      	ldr	r2, [sp, #0]
 800c3b0:	920a      	str	r2, [sp, #40]	; 0x28
 800c3b2:	4413      	add	r3, r2
 800c3b4:	9305      	str	r3, [sp, #20]
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	9307      	str	r3, [sp, #28]
 800c3ba:	9b06      	ldr	r3, [sp, #24]
 800c3bc:	2b09      	cmp	r3, #9
 800c3be:	f200 8089 	bhi.w	800c4d4 <_dtoa_r+0x2f4>
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	bfc4      	itt	gt
 800c3c6:	3b04      	subgt	r3, #4
 800c3c8:	9306      	strgt	r3, [sp, #24]
 800c3ca:	9b06      	ldr	r3, [sp, #24]
 800c3cc:	f1a3 0302 	sub.w	r3, r3, #2
 800c3d0:	bfcc      	ite	gt
 800c3d2:	2500      	movgt	r5, #0
 800c3d4:	2501      	movle	r5, #1
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	f200 8087 	bhi.w	800c4ea <_dtoa_r+0x30a>
 800c3dc:	e8df f003 	tbb	[pc, r3]
 800c3e0:	59383a2d 	.word	0x59383a2d
 800c3e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c3e8:	441d      	add	r5, r3
 800c3ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c3ee:	2b20      	cmp	r3, #32
 800c3f0:	bfc1      	itttt	gt
 800c3f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c3f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c3fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800c3fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c402:	bfda      	itte	le
 800c404:	f1c3 0320 	rsble	r3, r3, #32
 800c408:	fa06 f003 	lslle.w	r0, r6, r3
 800c40c:	4318      	orrgt	r0, r3
 800c40e:	f7f4 f881 	bl	8000514 <__aeabi_ui2d>
 800c412:	2301      	movs	r3, #1
 800c414:	4606      	mov	r6, r0
 800c416:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c41a:	3d01      	subs	r5, #1
 800c41c:	930e      	str	r3, [sp, #56]	; 0x38
 800c41e:	e76a      	b.n	800c2f6 <_dtoa_r+0x116>
 800c420:	2301      	movs	r3, #1
 800c422:	e7b2      	b.n	800c38a <_dtoa_r+0x1aa>
 800c424:	900b      	str	r0, [sp, #44]	; 0x2c
 800c426:	e7b1      	b.n	800c38c <_dtoa_r+0x1ac>
 800c428:	9b04      	ldr	r3, [sp, #16]
 800c42a:	9a00      	ldr	r2, [sp, #0]
 800c42c:	1a9b      	subs	r3, r3, r2
 800c42e:	9304      	str	r3, [sp, #16]
 800c430:	4253      	negs	r3, r2
 800c432:	9307      	str	r3, [sp, #28]
 800c434:	2300      	movs	r3, #0
 800c436:	930a      	str	r3, [sp, #40]	; 0x28
 800c438:	e7bf      	b.n	800c3ba <_dtoa_r+0x1da>
 800c43a:	2300      	movs	r3, #0
 800c43c:	9308      	str	r3, [sp, #32]
 800c43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c440:	2b00      	cmp	r3, #0
 800c442:	dc55      	bgt.n	800c4f0 <_dtoa_r+0x310>
 800c444:	2301      	movs	r3, #1
 800c446:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c44a:	461a      	mov	r2, r3
 800c44c:	9209      	str	r2, [sp, #36]	; 0x24
 800c44e:	e00c      	b.n	800c46a <_dtoa_r+0x28a>
 800c450:	2301      	movs	r3, #1
 800c452:	e7f3      	b.n	800c43c <_dtoa_r+0x25c>
 800c454:	2300      	movs	r3, #0
 800c456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c458:	9308      	str	r3, [sp, #32]
 800c45a:	9b00      	ldr	r3, [sp, #0]
 800c45c:	4413      	add	r3, r2
 800c45e:	9302      	str	r3, [sp, #8]
 800c460:	3301      	adds	r3, #1
 800c462:	2b01      	cmp	r3, #1
 800c464:	9303      	str	r3, [sp, #12]
 800c466:	bfb8      	it	lt
 800c468:	2301      	movlt	r3, #1
 800c46a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c46c:	2200      	movs	r2, #0
 800c46e:	6042      	str	r2, [r0, #4]
 800c470:	2204      	movs	r2, #4
 800c472:	f102 0614 	add.w	r6, r2, #20
 800c476:	429e      	cmp	r6, r3
 800c478:	6841      	ldr	r1, [r0, #4]
 800c47a:	d93d      	bls.n	800c4f8 <_dtoa_r+0x318>
 800c47c:	4620      	mov	r0, r4
 800c47e:	f000 fedb 	bl	800d238 <_Balloc>
 800c482:	9001      	str	r0, [sp, #4]
 800c484:	2800      	cmp	r0, #0
 800c486:	d13b      	bne.n	800c500 <_dtoa_r+0x320>
 800c488:	4b11      	ldr	r3, [pc, #68]	; (800c4d0 <_dtoa_r+0x2f0>)
 800c48a:	4602      	mov	r2, r0
 800c48c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c490:	e6c0      	b.n	800c214 <_dtoa_r+0x34>
 800c492:	2301      	movs	r3, #1
 800c494:	e7df      	b.n	800c456 <_dtoa_r+0x276>
 800c496:	bf00      	nop
 800c498:	636f4361 	.word	0x636f4361
 800c49c:	3fd287a7 	.word	0x3fd287a7
 800c4a0:	8b60c8b3 	.word	0x8b60c8b3
 800c4a4:	3fc68a28 	.word	0x3fc68a28
 800c4a8:	509f79fb 	.word	0x509f79fb
 800c4ac:	3fd34413 	.word	0x3fd34413
 800c4b0:	0800ea09 	.word	0x0800ea09
 800c4b4:	0800ea20 	.word	0x0800ea20
 800c4b8:	7ff00000 	.word	0x7ff00000
 800c4bc:	0800ea05 	.word	0x0800ea05
 800c4c0:	0800e9fc 	.word	0x0800e9fc
 800c4c4:	0800e9d9 	.word	0x0800e9d9
 800c4c8:	3ff80000 	.word	0x3ff80000
 800c4cc:	0800eb70 	.word	0x0800eb70
 800c4d0:	0800ea7b 	.word	0x0800ea7b
 800c4d4:	2501      	movs	r5, #1
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	9306      	str	r3, [sp, #24]
 800c4da:	9508      	str	r5, [sp, #32]
 800c4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	2312      	movs	r3, #18
 800c4e8:	e7b0      	b.n	800c44c <_dtoa_r+0x26c>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	9308      	str	r3, [sp, #32]
 800c4ee:	e7f5      	b.n	800c4dc <_dtoa_r+0x2fc>
 800c4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c4f6:	e7b8      	b.n	800c46a <_dtoa_r+0x28a>
 800c4f8:	3101      	adds	r1, #1
 800c4fa:	6041      	str	r1, [r0, #4]
 800c4fc:	0052      	lsls	r2, r2, #1
 800c4fe:	e7b8      	b.n	800c472 <_dtoa_r+0x292>
 800c500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c502:	9a01      	ldr	r2, [sp, #4]
 800c504:	601a      	str	r2, [r3, #0]
 800c506:	9b03      	ldr	r3, [sp, #12]
 800c508:	2b0e      	cmp	r3, #14
 800c50a:	f200 809d 	bhi.w	800c648 <_dtoa_r+0x468>
 800c50e:	2d00      	cmp	r5, #0
 800c510:	f000 809a 	beq.w	800c648 <_dtoa_r+0x468>
 800c514:	9b00      	ldr	r3, [sp, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	dd32      	ble.n	800c580 <_dtoa_r+0x3a0>
 800c51a:	4ab7      	ldr	r2, [pc, #732]	; (800c7f8 <_dtoa_r+0x618>)
 800c51c:	f003 030f 	and.w	r3, r3, #15
 800c520:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c524:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c528:	9b00      	ldr	r3, [sp, #0]
 800c52a:	05d8      	lsls	r0, r3, #23
 800c52c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c530:	d516      	bpl.n	800c560 <_dtoa_r+0x380>
 800c532:	4bb2      	ldr	r3, [pc, #712]	; (800c7fc <_dtoa_r+0x61c>)
 800c534:	ec51 0b19 	vmov	r0, r1, d9
 800c538:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c53c:	f7f4 f98e 	bl	800085c <__aeabi_ddiv>
 800c540:	f007 070f 	and.w	r7, r7, #15
 800c544:	4682      	mov	sl, r0
 800c546:	468b      	mov	fp, r1
 800c548:	2503      	movs	r5, #3
 800c54a:	4eac      	ldr	r6, [pc, #688]	; (800c7fc <_dtoa_r+0x61c>)
 800c54c:	b957      	cbnz	r7, 800c564 <_dtoa_r+0x384>
 800c54e:	4642      	mov	r2, r8
 800c550:	464b      	mov	r3, r9
 800c552:	4650      	mov	r0, sl
 800c554:	4659      	mov	r1, fp
 800c556:	f7f4 f981 	bl	800085c <__aeabi_ddiv>
 800c55a:	4682      	mov	sl, r0
 800c55c:	468b      	mov	fp, r1
 800c55e:	e028      	b.n	800c5b2 <_dtoa_r+0x3d2>
 800c560:	2502      	movs	r5, #2
 800c562:	e7f2      	b.n	800c54a <_dtoa_r+0x36a>
 800c564:	07f9      	lsls	r1, r7, #31
 800c566:	d508      	bpl.n	800c57a <_dtoa_r+0x39a>
 800c568:	4640      	mov	r0, r8
 800c56a:	4649      	mov	r1, r9
 800c56c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c570:	f7f4 f84a 	bl	8000608 <__aeabi_dmul>
 800c574:	3501      	adds	r5, #1
 800c576:	4680      	mov	r8, r0
 800c578:	4689      	mov	r9, r1
 800c57a:	107f      	asrs	r7, r7, #1
 800c57c:	3608      	adds	r6, #8
 800c57e:	e7e5      	b.n	800c54c <_dtoa_r+0x36c>
 800c580:	f000 809b 	beq.w	800c6ba <_dtoa_r+0x4da>
 800c584:	9b00      	ldr	r3, [sp, #0]
 800c586:	4f9d      	ldr	r7, [pc, #628]	; (800c7fc <_dtoa_r+0x61c>)
 800c588:	425e      	negs	r6, r3
 800c58a:	4b9b      	ldr	r3, [pc, #620]	; (800c7f8 <_dtoa_r+0x618>)
 800c58c:	f006 020f 	and.w	r2, r6, #15
 800c590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	ec51 0b19 	vmov	r0, r1, d9
 800c59c:	f7f4 f834 	bl	8000608 <__aeabi_dmul>
 800c5a0:	1136      	asrs	r6, r6, #4
 800c5a2:	4682      	mov	sl, r0
 800c5a4:	468b      	mov	fp, r1
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	2502      	movs	r5, #2
 800c5aa:	2e00      	cmp	r6, #0
 800c5ac:	d17a      	bne.n	800c6a4 <_dtoa_r+0x4c4>
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1d3      	bne.n	800c55a <_dtoa_r+0x37a>
 800c5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f000 8082 	beq.w	800c6be <_dtoa_r+0x4de>
 800c5ba:	4b91      	ldr	r3, [pc, #580]	; (800c800 <_dtoa_r+0x620>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	4650      	mov	r0, sl
 800c5c0:	4659      	mov	r1, fp
 800c5c2:	f7f4 fa93 	bl	8000aec <__aeabi_dcmplt>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d079      	beq.n	800c6be <_dtoa_r+0x4de>
 800c5ca:	9b03      	ldr	r3, [sp, #12]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d076      	beq.n	800c6be <_dtoa_r+0x4de>
 800c5d0:	9b02      	ldr	r3, [sp, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	dd36      	ble.n	800c644 <_dtoa_r+0x464>
 800c5d6:	9b00      	ldr	r3, [sp, #0]
 800c5d8:	4650      	mov	r0, sl
 800c5da:	4659      	mov	r1, fp
 800c5dc:	1e5f      	subs	r7, r3, #1
 800c5de:	2200      	movs	r2, #0
 800c5e0:	4b88      	ldr	r3, [pc, #544]	; (800c804 <_dtoa_r+0x624>)
 800c5e2:	f7f4 f811 	bl	8000608 <__aeabi_dmul>
 800c5e6:	9e02      	ldr	r6, [sp, #8]
 800c5e8:	4682      	mov	sl, r0
 800c5ea:	468b      	mov	fp, r1
 800c5ec:	3501      	adds	r5, #1
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f7f3 ffa0 	bl	8000534 <__aeabi_i2d>
 800c5f4:	4652      	mov	r2, sl
 800c5f6:	465b      	mov	r3, fp
 800c5f8:	f7f4 f806 	bl	8000608 <__aeabi_dmul>
 800c5fc:	4b82      	ldr	r3, [pc, #520]	; (800c808 <_dtoa_r+0x628>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	f7f3 fe4c 	bl	800029c <__adddf3>
 800c604:	46d0      	mov	r8, sl
 800c606:	46d9      	mov	r9, fp
 800c608:	4682      	mov	sl, r0
 800c60a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c60e:	2e00      	cmp	r6, #0
 800c610:	d158      	bne.n	800c6c4 <_dtoa_r+0x4e4>
 800c612:	4b7e      	ldr	r3, [pc, #504]	; (800c80c <_dtoa_r+0x62c>)
 800c614:	2200      	movs	r2, #0
 800c616:	4640      	mov	r0, r8
 800c618:	4649      	mov	r1, r9
 800c61a:	f7f3 fe3d 	bl	8000298 <__aeabi_dsub>
 800c61e:	4652      	mov	r2, sl
 800c620:	465b      	mov	r3, fp
 800c622:	4680      	mov	r8, r0
 800c624:	4689      	mov	r9, r1
 800c626:	f7f4 fa7f 	bl	8000b28 <__aeabi_dcmpgt>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	f040 8295 	bne.w	800cb5a <_dtoa_r+0x97a>
 800c630:	4652      	mov	r2, sl
 800c632:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c636:	4640      	mov	r0, r8
 800c638:	4649      	mov	r1, r9
 800c63a:	f7f4 fa57 	bl	8000aec <__aeabi_dcmplt>
 800c63e:	2800      	cmp	r0, #0
 800c640:	f040 8289 	bne.w	800cb56 <_dtoa_r+0x976>
 800c644:	ec5b ab19 	vmov	sl, fp, d9
 800c648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f2c0 8148 	blt.w	800c8e0 <_dtoa_r+0x700>
 800c650:	9a00      	ldr	r2, [sp, #0]
 800c652:	2a0e      	cmp	r2, #14
 800c654:	f300 8144 	bgt.w	800c8e0 <_dtoa_r+0x700>
 800c658:	4b67      	ldr	r3, [pc, #412]	; (800c7f8 <_dtoa_r+0x618>)
 800c65a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c65e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c664:	2b00      	cmp	r3, #0
 800c666:	f280 80d5 	bge.w	800c814 <_dtoa_r+0x634>
 800c66a:	9b03      	ldr	r3, [sp, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f300 80d1 	bgt.w	800c814 <_dtoa_r+0x634>
 800c672:	f040 826f 	bne.w	800cb54 <_dtoa_r+0x974>
 800c676:	4b65      	ldr	r3, [pc, #404]	; (800c80c <_dtoa_r+0x62c>)
 800c678:	2200      	movs	r2, #0
 800c67a:	4640      	mov	r0, r8
 800c67c:	4649      	mov	r1, r9
 800c67e:	f7f3 ffc3 	bl	8000608 <__aeabi_dmul>
 800c682:	4652      	mov	r2, sl
 800c684:	465b      	mov	r3, fp
 800c686:	f7f4 fa45 	bl	8000b14 <__aeabi_dcmpge>
 800c68a:	9e03      	ldr	r6, [sp, #12]
 800c68c:	4637      	mov	r7, r6
 800c68e:	2800      	cmp	r0, #0
 800c690:	f040 8245 	bne.w	800cb1e <_dtoa_r+0x93e>
 800c694:	9d01      	ldr	r5, [sp, #4]
 800c696:	2331      	movs	r3, #49	; 0x31
 800c698:	f805 3b01 	strb.w	r3, [r5], #1
 800c69c:	9b00      	ldr	r3, [sp, #0]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	e240      	b.n	800cb26 <_dtoa_r+0x946>
 800c6a4:	07f2      	lsls	r2, r6, #31
 800c6a6:	d505      	bpl.n	800c6b4 <_dtoa_r+0x4d4>
 800c6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6ac:	f7f3 ffac 	bl	8000608 <__aeabi_dmul>
 800c6b0:	3501      	adds	r5, #1
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	1076      	asrs	r6, r6, #1
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	e777      	b.n	800c5aa <_dtoa_r+0x3ca>
 800c6ba:	2502      	movs	r5, #2
 800c6bc:	e779      	b.n	800c5b2 <_dtoa_r+0x3d2>
 800c6be:	9f00      	ldr	r7, [sp, #0]
 800c6c0:	9e03      	ldr	r6, [sp, #12]
 800c6c2:	e794      	b.n	800c5ee <_dtoa_r+0x40e>
 800c6c4:	9901      	ldr	r1, [sp, #4]
 800c6c6:	4b4c      	ldr	r3, [pc, #304]	; (800c7f8 <_dtoa_r+0x618>)
 800c6c8:	4431      	add	r1, r6
 800c6ca:	910d      	str	r1, [sp, #52]	; 0x34
 800c6cc:	9908      	ldr	r1, [sp, #32]
 800c6ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c6d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c6d6:	2900      	cmp	r1, #0
 800c6d8:	d043      	beq.n	800c762 <_dtoa_r+0x582>
 800c6da:	494d      	ldr	r1, [pc, #308]	; (800c810 <_dtoa_r+0x630>)
 800c6dc:	2000      	movs	r0, #0
 800c6de:	f7f4 f8bd 	bl	800085c <__aeabi_ddiv>
 800c6e2:	4652      	mov	r2, sl
 800c6e4:	465b      	mov	r3, fp
 800c6e6:	f7f3 fdd7 	bl	8000298 <__aeabi_dsub>
 800c6ea:	9d01      	ldr	r5, [sp, #4]
 800c6ec:	4682      	mov	sl, r0
 800c6ee:	468b      	mov	fp, r1
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	4640      	mov	r0, r8
 800c6f4:	f7f4 fa38 	bl	8000b68 <__aeabi_d2iz>
 800c6f8:	4606      	mov	r6, r0
 800c6fa:	f7f3 ff1b 	bl	8000534 <__aeabi_i2d>
 800c6fe:	4602      	mov	r2, r0
 800c700:	460b      	mov	r3, r1
 800c702:	4640      	mov	r0, r8
 800c704:	4649      	mov	r1, r9
 800c706:	f7f3 fdc7 	bl	8000298 <__aeabi_dsub>
 800c70a:	3630      	adds	r6, #48	; 0x30
 800c70c:	f805 6b01 	strb.w	r6, [r5], #1
 800c710:	4652      	mov	r2, sl
 800c712:	465b      	mov	r3, fp
 800c714:	4680      	mov	r8, r0
 800c716:	4689      	mov	r9, r1
 800c718:	f7f4 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d163      	bne.n	800c7e8 <_dtoa_r+0x608>
 800c720:	4642      	mov	r2, r8
 800c722:	464b      	mov	r3, r9
 800c724:	4936      	ldr	r1, [pc, #216]	; (800c800 <_dtoa_r+0x620>)
 800c726:	2000      	movs	r0, #0
 800c728:	f7f3 fdb6 	bl	8000298 <__aeabi_dsub>
 800c72c:	4652      	mov	r2, sl
 800c72e:	465b      	mov	r3, fp
 800c730:	f7f4 f9dc 	bl	8000aec <__aeabi_dcmplt>
 800c734:	2800      	cmp	r0, #0
 800c736:	f040 80b5 	bne.w	800c8a4 <_dtoa_r+0x6c4>
 800c73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c73c:	429d      	cmp	r5, r3
 800c73e:	d081      	beq.n	800c644 <_dtoa_r+0x464>
 800c740:	4b30      	ldr	r3, [pc, #192]	; (800c804 <_dtoa_r+0x624>)
 800c742:	2200      	movs	r2, #0
 800c744:	4650      	mov	r0, sl
 800c746:	4659      	mov	r1, fp
 800c748:	f7f3 ff5e 	bl	8000608 <__aeabi_dmul>
 800c74c:	4b2d      	ldr	r3, [pc, #180]	; (800c804 <_dtoa_r+0x624>)
 800c74e:	4682      	mov	sl, r0
 800c750:	468b      	mov	fp, r1
 800c752:	4640      	mov	r0, r8
 800c754:	4649      	mov	r1, r9
 800c756:	2200      	movs	r2, #0
 800c758:	f7f3 ff56 	bl	8000608 <__aeabi_dmul>
 800c75c:	4680      	mov	r8, r0
 800c75e:	4689      	mov	r9, r1
 800c760:	e7c6      	b.n	800c6f0 <_dtoa_r+0x510>
 800c762:	4650      	mov	r0, sl
 800c764:	4659      	mov	r1, fp
 800c766:	f7f3 ff4f 	bl	8000608 <__aeabi_dmul>
 800c76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c76c:	9d01      	ldr	r5, [sp, #4]
 800c76e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c770:	4682      	mov	sl, r0
 800c772:	468b      	mov	fp, r1
 800c774:	4649      	mov	r1, r9
 800c776:	4640      	mov	r0, r8
 800c778:	f7f4 f9f6 	bl	8000b68 <__aeabi_d2iz>
 800c77c:	4606      	mov	r6, r0
 800c77e:	f7f3 fed9 	bl	8000534 <__aeabi_i2d>
 800c782:	3630      	adds	r6, #48	; 0x30
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4640      	mov	r0, r8
 800c78a:	4649      	mov	r1, r9
 800c78c:	f7f3 fd84 	bl	8000298 <__aeabi_dsub>
 800c790:	f805 6b01 	strb.w	r6, [r5], #1
 800c794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c796:	429d      	cmp	r5, r3
 800c798:	4680      	mov	r8, r0
 800c79a:	4689      	mov	r9, r1
 800c79c:	f04f 0200 	mov.w	r2, #0
 800c7a0:	d124      	bne.n	800c7ec <_dtoa_r+0x60c>
 800c7a2:	4b1b      	ldr	r3, [pc, #108]	; (800c810 <_dtoa_r+0x630>)
 800c7a4:	4650      	mov	r0, sl
 800c7a6:	4659      	mov	r1, fp
 800c7a8:	f7f3 fd78 	bl	800029c <__adddf3>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	4640      	mov	r0, r8
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	f7f4 f9b8 	bl	8000b28 <__aeabi_dcmpgt>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d173      	bne.n	800c8a4 <_dtoa_r+0x6c4>
 800c7bc:	4652      	mov	r2, sl
 800c7be:	465b      	mov	r3, fp
 800c7c0:	4913      	ldr	r1, [pc, #76]	; (800c810 <_dtoa_r+0x630>)
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	f7f3 fd68 	bl	8000298 <__aeabi_dsub>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	4649      	mov	r1, r9
 800c7d0:	f7f4 f98c 	bl	8000aec <__aeabi_dcmplt>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	f43f af35 	beq.w	800c644 <_dtoa_r+0x464>
 800c7da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c7dc:	1e6b      	subs	r3, r5, #1
 800c7de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c7e4:	2b30      	cmp	r3, #48	; 0x30
 800c7e6:	d0f8      	beq.n	800c7da <_dtoa_r+0x5fa>
 800c7e8:	9700      	str	r7, [sp, #0]
 800c7ea:	e049      	b.n	800c880 <_dtoa_r+0x6a0>
 800c7ec:	4b05      	ldr	r3, [pc, #20]	; (800c804 <_dtoa_r+0x624>)
 800c7ee:	f7f3 ff0b 	bl	8000608 <__aeabi_dmul>
 800c7f2:	4680      	mov	r8, r0
 800c7f4:	4689      	mov	r9, r1
 800c7f6:	e7bd      	b.n	800c774 <_dtoa_r+0x594>
 800c7f8:	0800eb70 	.word	0x0800eb70
 800c7fc:	0800eb48 	.word	0x0800eb48
 800c800:	3ff00000 	.word	0x3ff00000
 800c804:	40240000 	.word	0x40240000
 800c808:	401c0000 	.word	0x401c0000
 800c80c:	40140000 	.word	0x40140000
 800c810:	3fe00000 	.word	0x3fe00000
 800c814:	9d01      	ldr	r5, [sp, #4]
 800c816:	4656      	mov	r6, sl
 800c818:	465f      	mov	r7, fp
 800c81a:	4642      	mov	r2, r8
 800c81c:	464b      	mov	r3, r9
 800c81e:	4630      	mov	r0, r6
 800c820:	4639      	mov	r1, r7
 800c822:	f7f4 f81b 	bl	800085c <__aeabi_ddiv>
 800c826:	f7f4 f99f 	bl	8000b68 <__aeabi_d2iz>
 800c82a:	4682      	mov	sl, r0
 800c82c:	f7f3 fe82 	bl	8000534 <__aeabi_i2d>
 800c830:	4642      	mov	r2, r8
 800c832:	464b      	mov	r3, r9
 800c834:	f7f3 fee8 	bl	8000608 <__aeabi_dmul>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	4630      	mov	r0, r6
 800c83e:	4639      	mov	r1, r7
 800c840:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c844:	f7f3 fd28 	bl	8000298 <__aeabi_dsub>
 800c848:	f805 6b01 	strb.w	r6, [r5], #1
 800c84c:	9e01      	ldr	r6, [sp, #4]
 800c84e:	9f03      	ldr	r7, [sp, #12]
 800c850:	1bae      	subs	r6, r5, r6
 800c852:	42b7      	cmp	r7, r6
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	d135      	bne.n	800c8c6 <_dtoa_r+0x6e6>
 800c85a:	f7f3 fd1f 	bl	800029c <__adddf3>
 800c85e:	4642      	mov	r2, r8
 800c860:	464b      	mov	r3, r9
 800c862:	4606      	mov	r6, r0
 800c864:	460f      	mov	r7, r1
 800c866:	f7f4 f95f 	bl	8000b28 <__aeabi_dcmpgt>
 800c86a:	b9d0      	cbnz	r0, 800c8a2 <_dtoa_r+0x6c2>
 800c86c:	4642      	mov	r2, r8
 800c86e:	464b      	mov	r3, r9
 800c870:	4630      	mov	r0, r6
 800c872:	4639      	mov	r1, r7
 800c874:	f7f4 f930 	bl	8000ad8 <__aeabi_dcmpeq>
 800c878:	b110      	cbz	r0, 800c880 <_dtoa_r+0x6a0>
 800c87a:	f01a 0f01 	tst.w	sl, #1
 800c87e:	d110      	bne.n	800c8a2 <_dtoa_r+0x6c2>
 800c880:	4620      	mov	r0, r4
 800c882:	ee18 1a10 	vmov	r1, s16
 800c886:	f000 fd17 	bl	800d2b8 <_Bfree>
 800c88a:	2300      	movs	r3, #0
 800c88c:	9800      	ldr	r0, [sp, #0]
 800c88e:	702b      	strb	r3, [r5, #0]
 800c890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c892:	3001      	adds	r0, #1
 800c894:	6018      	str	r0, [r3, #0]
 800c896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f43f acf1 	beq.w	800c280 <_dtoa_r+0xa0>
 800c89e:	601d      	str	r5, [r3, #0]
 800c8a0:	e4ee      	b.n	800c280 <_dtoa_r+0xa0>
 800c8a2:	9f00      	ldr	r7, [sp, #0]
 800c8a4:	462b      	mov	r3, r5
 800c8a6:	461d      	mov	r5, r3
 800c8a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8ac:	2a39      	cmp	r2, #57	; 0x39
 800c8ae:	d106      	bne.n	800c8be <_dtoa_r+0x6de>
 800c8b0:	9a01      	ldr	r2, [sp, #4]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d1f7      	bne.n	800c8a6 <_dtoa_r+0x6c6>
 800c8b6:	9901      	ldr	r1, [sp, #4]
 800c8b8:	2230      	movs	r2, #48	; 0x30
 800c8ba:	3701      	adds	r7, #1
 800c8bc:	700a      	strb	r2, [r1, #0]
 800c8be:	781a      	ldrb	r2, [r3, #0]
 800c8c0:	3201      	adds	r2, #1
 800c8c2:	701a      	strb	r2, [r3, #0]
 800c8c4:	e790      	b.n	800c7e8 <_dtoa_r+0x608>
 800c8c6:	4ba6      	ldr	r3, [pc, #664]	; (800cb60 <_dtoa_r+0x980>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f7f3 fe9d 	bl	8000608 <__aeabi_dmul>
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	460f      	mov	r7, r1
 800c8d6:	f7f4 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d09d      	beq.n	800c81a <_dtoa_r+0x63a>
 800c8de:	e7cf      	b.n	800c880 <_dtoa_r+0x6a0>
 800c8e0:	9a08      	ldr	r2, [sp, #32]
 800c8e2:	2a00      	cmp	r2, #0
 800c8e4:	f000 80d7 	beq.w	800ca96 <_dtoa_r+0x8b6>
 800c8e8:	9a06      	ldr	r2, [sp, #24]
 800c8ea:	2a01      	cmp	r2, #1
 800c8ec:	f300 80ba 	bgt.w	800ca64 <_dtoa_r+0x884>
 800c8f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8f2:	2a00      	cmp	r2, #0
 800c8f4:	f000 80b2 	beq.w	800ca5c <_dtoa_r+0x87c>
 800c8f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c8fc:	9e07      	ldr	r6, [sp, #28]
 800c8fe:	9d04      	ldr	r5, [sp, #16]
 800c900:	9a04      	ldr	r2, [sp, #16]
 800c902:	441a      	add	r2, r3
 800c904:	9204      	str	r2, [sp, #16]
 800c906:	9a05      	ldr	r2, [sp, #20]
 800c908:	2101      	movs	r1, #1
 800c90a:	441a      	add	r2, r3
 800c90c:	4620      	mov	r0, r4
 800c90e:	9205      	str	r2, [sp, #20]
 800c910:	f000 fd8a 	bl	800d428 <__i2b>
 800c914:	4607      	mov	r7, r0
 800c916:	2d00      	cmp	r5, #0
 800c918:	dd0c      	ble.n	800c934 <_dtoa_r+0x754>
 800c91a:	9b05      	ldr	r3, [sp, #20]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	dd09      	ble.n	800c934 <_dtoa_r+0x754>
 800c920:	42ab      	cmp	r3, r5
 800c922:	9a04      	ldr	r2, [sp, #16]
 800c924:	bfa8      	it	ge
 800c926:	462b      	movge	r3, r5
 800c928:	1ad2      	subs	r2, r2, r3
 800c92a:	9204      	str	r2, [sp, #16]
 800c92c:	9a05      	ldr	r2, [sp, #20]
 800c92e:	1aed      	subs	r5, r5, r3
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	9305      	str	r3, [sp, #20]
 800c934:	9b07      	ldr	r3, [sp, #28]
 800c936:	b31b      	cbz	r3, 800c980 <_dtoa_r+0x7a0>
 800c938:	9b08      	ldr	r3, [sp, #32]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f000 80af 	beq.w	800ca9e <_dtoa_r+0x8be>
 800c940:	2e00      	cmp	r6, #0
 800c942:	dd13      	ble.n	800c96c <_dtoa_r+0x78c>
 800c944:	4639      	mov	r1, r7
 800c946:	4632      	mov	r2, r6
 800c948:	4620      	mov	r0, r4
 800c94a:	f000 fe2d 	bl	800d5a8 <__pow5mult>
 800c94e:	ee18 2a10 	vmov	r2, s16
 800c952:	4601      	mov	r1, r0
 800c954:	4607      	mov	r7, r0
 800c956:	4620      	mov	r0, r4
 800c958:	f000 fd7c 	bl	800d454 <__multiply>
 800c95c:	ee18 1a10 	vmov	r1, s16
 800c960:	4680      	mov	r8, r0
 800c962:	4620      	mov	r0, r4
 800c964:	f000 fca8 	bl	800d2b8 <_Bfree>
 800c968:	ee08 8a10 	vmov	s16, r8
 800c96c:	9b07      	ldr	r3, [sp, #28]
 800c96e:	1b9a      	subs	r2, r3, r6
 800c970:	d006      	beq.n	800c980 <_dtoa_r+0x7a0>
 800c972:	ee18 1a10 	vmov	r1, s16
 800c976:	4620      	mov	r0, r4
 800c978:	f000 fe16 	bl	800d5a8 <__pow5mult>
 800c97c:	ee08 0a10 	vmov	s16, r0
 800c980:	2101      	movs	r1, #1
 800c982:	4620      	mov	r0, r4
 800c984:	f000 fd50 	bl	800d428 <__i2b>
 800c988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	4606      	mov	r6, r0
 800c98e:	f340 8088 	ble.w	800caa2 <_dtoa_r+0x8c2>
 800c992:	461a      	mov	r2, r3
 800c994:	4601      	mov	r1, r0
 800c996:	4620      	mov	r0, r4
 800c998:	f000 fe06 	bl	800d5a8 <__pow5mult>
 800c99c:	9b06      	ldr	r3, [sp, #24]
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	f340 8081 	ble.w	800caa8 <_dtoa_r+0x8c8>
 800c9a6:	f04f 0800 	mov.w	r8, #0
 800c9aa:	6933      	ldr	r3, [r6, #16]
 800c9ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c9b0:	6918      	ldr	r0, [r3, #16]
 800c9b2:	f000 fce9 	bl	800d388 <__hi0bits>
 800c9b6:	f1c0 0020 	rsb	r0, r0, #32
 800c9ba:	9b05      	ldr	r3, [sp, #20]
 800c9bc:	4418      	add	r0, r3
 800c9be:	f010 001f 	ands.w	r0, r0, #31
 800c9c2:	f000 8092 	beq.w	800caea <_dtoa_r+0x90a>
 800c9c6:	f1c0 0320 	rsb	r3, r0, #32
 800c9ca:	2b04      	cmp	r3, #4
 800c9cc:	f340 808a 	ble.w	800cae4 <_dtoa_r+0x904>
 800c9d0:	f1c0 001c 	rsb	r0, r0, #28
 800c9d4:	9b04      	ldr	r3, [sp, #16]
 800c9d6:	4403      	add	r3, r0
 800c9d8:	9304      	str	r3, [sp, #16]
 800c9da:	9b05      	ldr	r3, [sp, #20]
 800c9dc:	4403      	add	r3, r0
 800c9de:	4405      	add	r5, r0
 800c9e0:	9305      	str	r3, [sp, #20]
 800c9e2:	9b04      	ldr	r3, [sp, #16]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	dd07      	ble.n	800c9f8 <_dtoa_r+0x818>
 800c9e8:	ee18 1a10 	vmov	r1, s16
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f000 fe34 	bl	800d65c <__lshift>
 800c9f4:	ee08 0a10 	vmov	s16, r0
 800c9f8:	9b05      	ldr	r3, [sp, #20]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	dd05      	ble.n	800ca0a <_dtoa_r+0x82a>
 800c9fe:	4631      	mov	r1, r6
 800ca00:	461a      	mov	r2, r3
 800ca02:	4620      	mov	r0, r4
 800ca04:	f000 fe2a 	bl	800d65c <__lshift>
 800ca08:	4606      	mov	r6, r0
 800ca0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d06e      	beq.n	800caee <_dtoa_r+0x90e>
 800ca10:	ee18 0a10 	vmov	r0, s16
 800ca14:	4631      	mov	r1, r6
 800ca16:	f000 fe91 	bl	800d73c <__mcmp>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	da67      	bge.n	800caee <_dtoa_r+0x90e>
 800ca1e:	9b00      	ldr	r3, [sp, #0]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	ee18 1a10 	vmov	r1, s16
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	220a      	movs	r2, #10
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f000 fc65 	bl	800d2fc <__multadd>
 800ca32:	9b08      	ldr	r3, [sp, #32]
 800ca34:	ee08 0a10 	vmov	s16, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f000 81b1 	beq.w	800cda0 <_dtoa_r+0xbc0>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	4639      	mov	r1, r7
 800ca42:	220a      	movs	r2, #10
 800ca44:	4620      	mov	r0, r4
 800ca46:	f000 fc59 	bl	800d2fc <__multadd>
 800ca4a:	9b02      	ldr	r3, [sp, #8]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	4607      	mov	r7, r0
 800ca50:	f300 808e 	bgt.w	800cb70 <_dtoa_r+0x990>
 800ca54:	9b06      	ldr	r3, [sp, #24]
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	dc51      	bgt.n	800cafe <_dtoa_r+0x91e>
 800ca5a:	e089      	b.n	800cb70 <_dtoa_r+0x990>
 800ca5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca62:	e74b      	b.n	800c8fc <_dtoa_r+0x71c>
 800ca64:	9b03      	ldr	r3, [sp, #12]
 800ca66:	1e5e      	subs	r6, r3, #1
 800ca68:	9b07      	ldr	r3, [sp, #28]
 800ca6a:	42b3      	cmp	r3, r6
 800ca6c:	bfbf      	itttt	lt
 800ca6e:	9b07      	ldrlt	r3, [sp, #28]
 800ca70:	9607      	strlt	r6, [sp, #28]
 800ca72:	1af2      	sublt	r2, r6, r3
 800ca74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ca76:	bfb6      	itet	lt
 800ca78:	189b      	addlt	r3, r3, r2
 800ca7a:	1b9e      	subge	r6, r3, r6
 800ca7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	bfb8      	it	lt
 800ca82:	2600      	movlt	r6, #0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	bfb7      	itett	lt
 800ca88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ca8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ca90:	1a9d      	sublt	r5, r3, r2
 800ca92:	2300      	movlt	r3, #0
 800ca94:	e734      	b.n	800c900 <_dtoa_r+0x720>
 800ca96:	9e07      	ldr	r6, [sp, #28]
 800ca98:	9d04      	ldr	r5, [sp, #16]
 800ca9a:	9f08      	ldr	r7, [sp, #32]
 800ca9c:	e73b      	b.n	800c916 <_dtoa_r+0x736>
 800ca9e:	9a07      	ldr	r2, [sp, #28]
 800caa0:	e767      	b.n	800c972 <_dtoa_r+0x792>
 800caa2:	9b06      	ldr	r3, [sp, #24]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	dc18      	bgt.n	800cada <_dtoa_r+0x8fa>
 800caa8:	f1ba 0f00 	cmp.w	sl, #0
 800caac:	d115      	bne.n	800cada <_dtoa_r+0x8fa>
 800caae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cab2:	b993      	cbnz	r3, 800cada <_dtoa_r+0x8fa>
 800cab4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cab8:	0d1b      	lsrs	r3, r3, #20
 800caba:	051b      	lsls	r3, r3, #20
 800cabc:	b183      	cbz	r3, 800cae0 <_dtoa_r+0x900>
 800cabe:	9b04      	ldr	r3, [sp, #16]
 800cac0:	3301      	adds	r3, #1
 800cac2:	9304      	str	r3, [sp, #16]
 800cac4:	9b05      	ldr	r3, [sp, #20]
 800cac6:	3301      	adds	r3, #1
 800cac8:	9305      	str	r3, [sp, #20]
 800caca:	f04f 0801 	mov.w	r8, #1
 800cace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f47f af6a 	bne.w	800c9aa <_dtoa_r+0x7ca>
 800cad6:	2001      	movs	r0, #1
 800cad8:	e76f      	b.n	800c9ba <_dtoa_r+0x7da>
 800cada:	f04f 0800 	mov.w	r8, #0
 800cade:	e7f6      	b.n	800cace <_dtoa_r+0x8ee>
 800cae0:	4698      	mov	r8, r3
 800cae2:	e7f4      	b.n	800cace <_dtoa_r+0x8ee>
 800cae4:	f43f af7d 	beq.w	800c9e2 <_dtoa_r+0x802>
 800cae8:	4618      	mov	r0, r3
 800caea:	301c      	adds	r0, #28
 800caec:	e772      	b.n	800c9d4 <_dtoa_r+0x7f4>
 800caee:	9b03      	ldr	r3, [sp, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dc37      	bgt.n	800cb64 <_dtoa_r+0x984>
 800caf4:	9b06      	ldr	r3, [sp, #24]
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	dd34      	ble.n	800cb64 <_dtoa_r+0x984>
 800cafa:	9b03      	ldr	r3, [sp, #12]
 800cafc:	9302      	str	r3, [sp, #8]
 800cafe:	9b02      	ldr	r3, [sp, #8]
 800cb00:	b96b      	cbnz	r3, 800cb1e <_dtoa_r+0x93e>
 800cb02:	4631      	mov	r1, r6
 800cb04:	2205      	movs	r2, #5
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 fbf8 	bl	800d2fc <__multadd>
 800cb0c:	4601      	mov	r1, r0
 800cb0e:	4606      	mov	r6, r0
 800cb10:	ee18 0a10 	vmov	r0, s16
 800cb14:	f000 fe12 	bl	800d73c <__mcmp>
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	f73f adbb 	bgt.w	800c694 <_dtoa_r+0x4b4>
 800cb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb20:	9d01      	ldr	r5, [sp, #4]
 800cb22:	43db      	mvns	r3, r3
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	f04f 0800 	mov.w	r8, #0
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f000 fbc3 	bl	800d2b8 <_Bfree>
 800cb32:	2f00      	cmp	r7, #0
 800cb34:	f43f aea4 	beq.w	800c880 <_dtoa_r+0x6a0>
 800cb38:	f1b8 0f00 	cmp.w	r8, #0
 800cb3c:	d005      	beq.n	800cb4a <_dtoa_r+0x96a>
 800cb3e:	45b8      	cmp	r8, r7
 800cb40:	d003      	beq.n	800cb4a <_dtoa_r+0x96a>
 800cb42:	4641      	mov	r1, r8
 800cb44:	4620      	mov	r0, r4
 800cb46:	f000 fbb7 	bl	800d2b8 <_Bfree>
 800cb4a:	4639      	mov	r1, r7
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f000 fbb3 	bl	800d2b8 <_Bfree>
 800cb52:	e695      	b.n	800c880 <_dtoa_r+0x6a0>
 800cb54:	2600      	movs	r6, #0
 800cb56:	4637      	mov	r7, r6
 800cb58:	e7e1      	b.n	800cb1e <_dtoa_r+0x93e>
 800cb5a:	9700      	str	r7, [sp, #0]
 800cb5c:	4637      	mov	r7, r6
 800cb5e:	e599      	b.n	800c694 <_dtoa_r+0x4b4>
 800cb60:	40240000 	.word	0x40240000
 800cb64:	9b08      	ldr	r3, [sp, #32]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f000 80ca 	beq.w	800cd00 <_dtoa_r+0xb20>
 800cb6c:	9b03      	ldr	r3, [sp, #12]
 800cb6e:	9302      	str	r3, [sp, #8]
 800cb70:	2d00      	cmp	r5, #0
 800cb72:	dd05      	ble.n	800cb80 <_dtoa_r+0x9a0>
 800cb74:	4639      	mov	r1, r7
 800cb76:	462a      	mov	r2, r5
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f000 fd6f 	bl	800d65c <__lshift>
 800cb7e:	4607      	mov	r7, r0
 800cb80:	f1b8 0f00 	cmp.w	r8, #0
 800cb84:	d05b      	beq.n	800cc3e <_dtoa_r+0xa5e>
 800cb86:	6879      	ldr	r1, [r7, #4]
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f000 fb55 	bl	800d238 <_Balloc>
 800cb8e:	4605      	mov	r5, r0
 800cb90:	b928      	cbnz	r0, 800cb9e <_dtoa_r+0x9be>
 800cb92:	4b87      	ldr	r3, [pc, #540]	; (800cdb0 <_dtoa_r+0xbd0>)
 800cb94:	4602      	mov	r2, r0
 800cb96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cb9a:	f7ff bb3b 	b.w	800c214 <_dtoa_r+0x34>
 800cb9e:	693a      	ldr	r2, [r7, #16]
 800cba0:	3202      	adds	r2, #2
 800cba2:	0092      	lsls	r2, r2, #2
 800cba4:	f107 010c 	add.w	r1, r7, #12
 800cba8:	300c      	adds	r0, #12
 800cbaa:	f000 fb2b 	bl	800d204 <memcpy>
 800cbae:	2201      	movs	r2, #1
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f000 fd52 	bl	800d65c <__lshift>
 800cbb8:	9b01      	ldr	r3, [sp, #4]
 800cbba:	f103 0901 	add.w	r9, r3, #1
 800cbbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	9305      	str	r3, [sp, #20]
 800cbc6:	f00a 0301 	and.w	r3, sl, #1
 800cbca:	46b8      	mov	r8, r7
 800cbcc:	9304      	str	r3, [sp, #16]
 800cbce:	4607      	mov	r7, r0
 800cbd0:	4631      	mov	r1, r6
 800cbd2:	ee18 0a10 	vmov	r0, s16
 800cbd6:	f7ff fa75 	bl	800c0c4 <quorem>
 800cbda:	4641      	mov	r1, r8
 800cbdc:	9002      	str	r0, [sp, #8]
 800cbde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cbe2:	ee18 0a10 	vmov	r0, s16
 800cbe6:	f000 fda9 	bl	800d73c <__mcmp>
 800cbea:	463a      	mov	r2, r7
 800cbec:	9003      	str	r0, [sp, #12]
 800cbee:	4631      	mov	r1, r6
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f000 fdbf 	bl	800d774 <__mdiff>
 800cbf6:	68c2      	ldr	r2, [r0, #12]
 800cbf8:	f109 3bff 	add.w	fp, r9, #4294967295
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	bb02      	cbnz	r2, 800cc42 <_dtoa_r+0xa62>
 800cc00:	4601      	mov	r1, r0
 800cc02:	ee18 0a10 	vmov	r0, s16
 800cc06:	f000 fd99 	bl	800d73c <__mcmp>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	4620      	mov	r0, r4
 800cc10:	9207      	str	r2, [sp, #28]
 800cc12:	f000 fb51 	bl	800d2b8 <_Bfree>
 800cc16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cc1a:	ea43 0102 	orr.w	r1, r3, r2
 800cc1e:	9b04      	ldr	r3, [sp, #16]
 800cc20:	430b      	orrs	r3, r1
 800cc22:	464d      	mov	r5, r9
 800cc24:	d10f      	bne.n	800cc46 <_dtoa_r+0xa66>
 800cc26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cc2a:	d02a      	beq.n	800cc82 <_dtoa_r+0xaa2>
 800cc2c:	9b03      	ldr	r3, [sp, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	dd02      	ble.n	800cc38 <_dtoa_r+0xa58>
 800cc32:	9b02      	ldr	r3, [sp, #8]
 800cc34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cc38:	f88b a000 	strb.w	sl, [fp]
 800cc3c:	e775      	b.n	800cb2a <_dtoa_r+0x94a>
 800cc3e:	4638      	mov	r0, r7
 800cc40:	e7ba      	b.n	800cbb8 <_dtoa_r+0x9d8>
 800cc42:	2201      	movs	r2, #1
 800cc44:	e7e2      	b.n	800cc0c <_dtoa_r+0xa2c>
 800cc46:	9b03      	ldr	r3, [sp, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	db04      	blt.n	800cc56 <_dtoa_r+0xa76>
 800cc4c:	9906      	ldr	r1, [sp, #24]
 800cc4e:	430b      	orrs	r3, r1
 800cc50:	9904      	ldr	r1, [sp, #16]
 800cc52:	430b      	orrs	r3, r1
 800cc54:	d122      	bne.n	800cc9c <_dtoa_r+0xabc>
 800cc56:	2a00      	cmp	r2, #0
 800cc58:	ddee      	ble.n	800cc38 <_dtoa_r+0xa58>
 800cc5a:	ee18 1a10 	vmov	r1, s16
 800cc5e:	2201      	movs	r2, #1
 800cc60:	4620      	mov	r0, r4
 800cc62:	f000 fcfb 	bl	800d65c <__lshift>
 800cc66:	4631      	mov	r1, r6
 800cc68:	ee08 0a10 	vmov	s16, r0
 800cc6c:	f000 fd66 	bl	800d73c <__mcmp>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	dc03      	bgt.n	800cc7c <_dtoa_r+0xa9c>
 800cc74:	d1e0      	bne.n	800cc38 <_dtoa_r+0xa58>
 800cc76:	f01a 0f01 	tst.w	sl, #1
 800cc7a:	d0dd      	beq.n	800cc38 <_dtoa_r+0xa58>
 800cc7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cc80:	d1d7      	bne.n	800cc32 <_dtoa_r+0xa52>
 800cc82:	2339      	movs	r3, #57	; 0x39
 800cc84:	f88b 3000 	strb.w	r3, [fp]
 800cc88:	462b      	mov	r3, r5
 800cc8a:	461d      	mov	r5, r3
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cc92:	2a39      	cmp	r2, #57	; 0x39
 800cc94:	d071      	beq.n	800cd7a <_dtoa_r+0xb9a>
 800cc96:	3201      	adds	r2, #1
 800cc98:	701a      	strb	r2, [r3, #0]
 800cc9a:	e746      	b.n	800cb2a <_dtoa_r+0x94a>
 800cc9c:	2a00      	cmp	r2, #0
 800cc9e:	dd07      	ble.n	800ccb0 <_dtoa_r+0xad0>
 800cca0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cca4:	d0ed      	beq.n	800cc82 <_dtoa_r+0xaa2>
 800cca6:	f10a 0301 	add.w	r3, sl, #1
 800ccaa:	f88b 3000 	strb.w	r3, [fp]
 800ccae:	e73c      	b.n	800cb2a <_dtoa_r+0x94a>
 800ccb0:	9b05      	ldr	r3, [sp, #20]
 800ccb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ccb6:	4599      	cmp	r9, r3
 800ccb8:	d047      	beq.n	800cd4a <_dtoa_r+0xb6a>
 800ccba:	ee18 1a10 	vmov	r1, s16
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	220a      	movs	r2, #10
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f000 fb1a 	bl	800d2fc <__multadd>
 800ccc8:	45b8      	cmp	r8, r7
 800ccca:	ee08 0a10 	vmov	s16, r0
 800ccce:	f04f 0300 	mov.w	r3, #0
 800ccd2:	f04f 020a 	mov.w	r2, #10
 800ccd6:	4641      	mov	r1, r8
 800ccd8:	4620      	mov	r0, r4
 800ccda:	d106      	bne.n	800ccea <_dtoa_r+0xb0a>
 800ccdc:	f000 fb0e 	bl	800d2fc <__multadd>
 800cce0:	4680      	mov	r8, r0
 800cce2:	4607      	mov	r7, r0
 800cce4:	f109 0901 	add.w	r9, r9, #1
 800cce8:	e772      	b.n	800cbd0 <_dtoa_r+0x9f0>
 800ccea:	f000 fb07 	bl	800d2fc <__multadd>
 800ccee:	4639      	mov	r1, r7
 800ccf0:	4680      	mov	r8, r0
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	220a      	movs	r2, #10
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f000 fb00 	bl	800d2fc <__multadd>
 800ccfc:	4607      	mov	r7, r0
 800ccfe:	e7f1      	b.n	800cce4 <_dtoa_r+0xb04>
 800cd00:	9b03      	ldr	r3, [sp, #12]
 800cd02:	9302      	str	r3, [sp, #8]
 800cd04:	9d01      	ldr	r5, [sp, #4]
 800cd06:	ee18 0a10 	vmov	r0, s16
 800cd0a:	4631      	mov	r1, r6
 800cd0c:	f7ff f9da 	bl	800c0c4 <quorem>
 800cd10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd14:	9b01      	ldr	r3, [sp, #4]
 800cd16:	f805 ab01 	strb.w	sl, [r5], #1
 800cd1a:	1aea      	subs	r2, r5, r3
 800cd1c:	9b02      	ldr	r3, [sp, #8]
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	dd09      	ble.n	800cd36 <_dtoa_r+0xb56>
 800cd22:	ee18 1a10 	vmov	r1, s16
 800cd26:	2300      	movs	r3, #0
 800cd28:	220a      	movs	r2, #10
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f000 fae6 	bl	800d2fc <__multadd>
 800cd30:	ee08 0a10 	vmov	s16, r0
 800cd34:	e7e7      	b.n	800cd06 <_dtoa_r+0xb26>
 800cd36:	9b02      	ldr	r3, [sp, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	bfc8      	it	gt
 800cd3c:	461d      	movgt	r5, r3
 800cd3e:	9b01      	ldr	r3, [sp, #4]
 800cd40:	bfd8      	it	le
 800cd42:	2501      	movle	r5, #1
 800cd44:	441d      	add	r5, r3
 800cd46:	f04f 0800 	mov.w	r8, #0
 800cd4a:	ee18 1a10 	vmov	r1, s16
 800cd4e:	2201      	movs	r2, #1
 800cd50:	4620      	mov	r0, r4
 800cd52:	f000 fc83 	bl	800d65c <__lshift>
 800cd56:	4631      	mov	r1, r6
 800cd58:	ee08 0a10 	vmov	s16, r0
 800cd5c:	f000 fcee 	bl	800d73c <__mcmp>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	dc91      	bgt.n	800cc88 <_dtoa_r+0xaa8>
 800cd64:	d102      	bne.n	800cd6c <_dtoa_r+0xb8c>
 800cd66:	f01a 0f01 	tst.w	sl, #1
 800cd6a:	d18d      	bne.n	800cc88 <_dtoa_r+0xaa8>
 800cd6c:	462b      	mov	r3, r5
 800cd6e:	461d      	mov	r5, r3
 800cd70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd74:	2a30      	cmp	r2, #48	; 0x30
 800cd76:	d0fa      	beq.n	800cd6e <_dtoa_r+0xb8e>
 800cd78:	e6d7      	b.n	800cb2a <_dtoa_r+0x94a>
 800cd7a:	9a01      	ldr	r2, [sp, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d184      	bne.n	800cc8a <_dtoa_r+0xaaa>
 800cd80:	9b00      	ldr	r3, [sp, #0]
 800cd82:	3301      	adds	r3, #1
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	2331      	movs	r3, #49	; 0x31
 800cd88:	7013      	strb	r3, [r2, #0]
 800cd8a:	e6ce      	b.n	800cb2a <_dtoa_r+0x94a>
 800cd8c:	4b09      	ldr	r3, [pc, #36]	; (800cdb4 <_dtoa_r+0xbd4>)
 800cd8e:	f7ff ba95 	b.w	800c2bc <_dtoa_r+0xdc>
 800cd92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f47f aa6e 	bne.w	800c276 <_dtoa_r+0x96>
 800cd9a:	4b07      	ldr	r3, [pc, #28]	; (800cdb8 <_dtoa_r+0xbd8>)
 800cd9c:	f7ff ba8e 	b.w	800c2bc <_dtoa_r+0xdc>
 800cda0:	9b02      	ldr	r3, [sp, #8]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	dcae      	bgt.n	800cd04 <_dtoa_r+0xb24>
 800cda6:	9b06      	ldr	r3, [sp, #24]
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	f73f aea8 	bgt.w	800cafe <_dtoa_r+0x91e>
 800cdae:	e7a9      	b.n	800cd04 <_dtoa_r+0xb24>
 800cdb0:	0800ea7b 	.word	0x0800ea7b
 800cdb4:	0800e9d8 	.word	0x0800e9d8
 800cdb8:	0800e9fc 	.word	0x0800e9fc

0800cdbc <__sflush_r>:
 800cdbc:	898a      	ldrh	r2, [r1, #12]
 800cdbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	0710      	lsls	r0, r2, #28
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	d458      	bmi.n	800ce7c <__sflush_r+0xc0>
 800cdca:	684b      	ldr	r3, [r1, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	dc05      	bgt.n	800cddc <__sflush_r+0x20>
 800cdd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	dc02      	bgt.n	800cddc <__sflush_r+0x20>
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdde:	2e00      	cmp	r6, #0
 800cde0:	d0f9      	beq.n	800cdd6 <__sflush_r+0x1a>
 800cde2:	2300      	movs	r3, #0
 800cde4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cde8:	682f      	ldr	r7, [r5, #0]
 800cdea:	602b      	str	r3, [r5, #0]
 800cdec:	d032      	beq.n	800ce54 <__sflush_r+0x98>
 800cdee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	075a      	lsls	r2, r3, #29
 800cdf4:	d505      	bpl.n	800ce02 <__sflush_r+0x46>
 800cdf6:	6863      	ldr	r3, [r4, #4]
 800cdf8:	1ac0      	subs	r0, r0, r3
 800cdfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdfc:	b10b      	cbz	r3, 800ce02 <__sflush_r+0x46>
 800cdfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce00:	1ac0      	subs	r0, r0, r3
 800ce02:	2300      	movs	r3, #0
 800ce04:	4602      	mov	r2, r0
 800ce06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce08:	6a21      	ldr	r1, [r4, #32]
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	47b0      	blx	r6
 800ce0e:	1c43      	adds	r3, r0, #1
 800ce10:	89a3      	ldrh	r3, [r4, #12]
 800ce12:	d106      	bne.n	800ce22 <__sflush_r+0x66>
 800ce14:	6829      	ldr	r1, [r5, #0]
 800ce16:	291d      	cmp	r1, #29
 800ce18:	d82c      	bhi.n	800ce74 <__sflush_r+0xb8>
 800ce1a:	4a2a      	ldr	r2, [pc, #168]	; (800cec4 <__sflush_r+0x108>)
 800ce1c:	40ca      	lsrs	r2, r1
 800ce1e:	07d6      	lsls	r6, r2, #31
 800ce20:	d528      	bpl.n	800ce74 <__sflush_r+0xb8>
 800ce22:	2200      	movs	r2, #0
 800ce24:	6062      	str	r2, [r4, #4]
 800ce26:	04d9      	lsls	r1, r3, #19
 800ce28:	6922      	ldr	r2, [r4, #16]
 800ce2a:	6022      	str	r2, [r4, #0]
 800ce2c:	d504      	bpl.n	800ce38 <__sflush_r+0x7c>
 800ce2e:	1c42      	adds	r2, r0, #1
 800ce30:	d101      	bne.n	800ce36 <__sflush_r+0x7a>
 800ce32:	682b      	ldr	r3, [r5, #0]
 800ce34:	b903      	cbnz	r3, 800ce38 <__sflush_r+0x7c>
 800ce36:	6560      	str	r0, [r4, #84]	; 0x54
 800ce38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce3a:	602f      	str	r7, [r5, #0]
 800ce3c:	2900      	cmp	r1, #0
 800ce3e:	d0ca      	beq.n	800cdd6 <__sflush_r+0x1a>
 800ce40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce44:	4299      	cmp	r1, r3
 800ce46:	d002      	beq.n	800ce4e <__sflush_r+0x92>
 800ce48:	4628      	mov	r0, r5
 800ce4a:	f7fe fa6b 	bl	800b324 <_free_r>
 800ce4e:	2000      	movs	r0, #0
 800ce50:	6360      	str	r0, [r4, #52]	; 0x34
 800ce52:	e7c1      	b.n	800cdd8 <__sflush_r+0x1c>
 800ce54:	6a21      	ldr	r1, [r4, #32]
 800ce56:	2301      	movs	r3, #1
 800ce58:	4628      	mov	r0, r5
 800ce5a:	47b0      	blx	r6
 800ce5c:	1c41      	adds	r1, r0, #1
 800ce5e:	d1c7      	bne.n	800cdf0 <__sflush_r+0x34>
 800ce60:	682b      	ldr	r3, [r5, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d0c4      	beq.n	800cdf0 <__sflush_r+0x34>
 800ce66:	2b1d      	cmp	r3, #29
 800ce68:	d001      	beq.n	800ce6e <__sflush_r+0xb2>
 800ce6a:	2b16      	cmp	r3, #22
 800ce6c:	d101      	bne.n	800ce72 <__sflush_r+0xb6>
 800ce6e:	602f      	str	r7, [r5, #0]
 800ce70:	e7b1      	b.n	800cdd6 <__sflush_r+0x1a>
 800ce72:	89a3      	ldrh	r3, [r4, #12]
 800ce74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce78:	81a3      	strh	r3, [r4, #12]
 800ce7a:	e7ad      	b.n	800cdd8 <__sflush_r+0x1c>
 800ce7c:	690f      	ldr	r7, [r1, #16]
 800ce7e:	2f00      	cmp	r7, #0
 800ce80:	d0a9      	beq.n	800cdd6 <__sflush_r+0x1a>
 800ce82:	0793      	lsls	r3, r2, #30
 800ce84:	680e      	ldr	r6, [r1, #0]
 800ce86:	bf08      	it	eq
 800ce88:	694b      	ldreq	r3, [r1, #20]
 800ce8a:	600f      	str	r7, [r1, #0]
 800ce8c:	bf18      	it	ne
 800ce8e:	2300      	movne	r3, #0
 800ce90:	eba6 0807 	sub.w	r8, r6, r7
 800ce94:	608b      	str	r3, [r1, #8]
 800ce96:	f1b8 0f00 	cmp.w	r8, #0
 800ce9a:	dd9c      	ble.n	800cdd6 <__sflush_r+0x1a>
 800ce9c:	6a21      	ldr	r1, [r4, #32]
 800ce9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cea0:	4643      	mov	r3, r8
 800cea2:	463a      	mov	r2, r7
 800cea4:	4628      	mov	r0, r5
 800cea6:	47b0      	blx	r6
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	dc06      	bgt.n	800ceba <__sflush_r+0xfe>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb8:	e78e      	b.n	800cdd8 <__sflush_r+0x1c>
 800ceba:	4407      	add	r7, r0
 800cebc:	eba8 0800 	sub.w	r8, r8, r0
 800cec0:	e7e9      	b.n	800ce96 <__sflush_r+0xda>
 800cec2:	bf00      	nop
 800cec4:	20400001 	.word	0x20400001

0800cec8 <_fflush_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	690b      	ldr	r3, [r1, #16]
 800cecc:	4605      	mov	r5, r0
 800cece:	460c      	mov	r4, r1
 800ced0:	b913      	cbnz	r3, 800ced8 <_fflush_r+0x10>
 800ced2:	2500      	movs	r5, #0
 800ced4:	4628      	mov	r0, r5
 800ced6:	bd38      	pop	{r3, r4, r5, pc}
 800ced8:	b118      	cbz	r0, 800cee2 <_fflush_r+0x1a>
 800ceda:	6983      	ldr	r3, [r0, #24]
 800cedc:	b90b      	cbnz	r3, 800cee2 <_fflush_r+0x1a>
 800cede:	f000 f887 	bl	800cff0 <__sinit>
 800cee2:	4b14      	ldr	r3, [pc, #80]	; (800cf34 <_fflush_r+0x6c>)
 800cee4:	429c      	cmp	r4, r3
 800cee6:	d11b      	bne.n	800cf20 <_fflush_r+0x58>
 800cee8:	686c      	ldr	r4, [r5, #4]
 800ceea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d0ef      	beq.n	800ced2 <_fflush_r+0xa>
 800cef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cef4:	07d0      	lsls	r0, r2, #31
 800cef6:	d404      	bmi.n	800cf02 <_fflush_r+0x3a>
 800cef8:	0599      	lsls	r1, r3, #22
 800cefa:	d402      	bmi.n	800cf02 <_fflush_r+0x3a>
 800cefc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cefe:	f000 f91a 	bl	800d136 <__retarget_lock_acquire_recursive>
 800cf02:	4628      	mov	r0, r5
 800cf04:	4621      	mov	r1, r4
 800cf06:	f7ff ff59 	bl	800cdbc <__sflush_r>
 800cf0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf0c:	07da      	lsls	r2, r3, #31
 800cf0e:	4605      	mov	r5, r0
 800cf10:	d4e0      	bmi.n	800ced4 <_fflush_r+0xc>
 800cf12:	89a3      	ldrh	r3, [r4, #12]
 800cf14:	059b      	lsls	r3, r3, #22
 800cf16:	d4dd      	bmi.n	800ced4 <_fflush_r+0xc>
 800cf18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf1a:	f000 f90d 	bl	800d138 <__retarget_lock_release_recursive>
 800cf1e:	e7d9      	b.n	800ced4 <_fflush_r+0xc>
 800cf20:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <_fflush_r+0x70>)
 800cf22:	429c      	cmp	r4, r3
 800cf24:	d101      	bne.n	800cf2a <_fflush_r+0x62>
 800cf26:	68ac      	ldr	r4, [r5, #8]
 800cf28:	e7df      	b.n	800ceea <_fflush_r+0x22>
 800cf2a:	4b04      	ldr	r3, [pc, #16]	; (800cf3c <_fflush_r+0x74>)
 800cf2c:	429c      	cmp	r4, r3
 800cf2e:	bf08      	it	eq
 800cf30:	68ec      	ldreq	r4, [r5, #12]
 800cf32:	e7da      	b.n	800ceea <_fflush_r+0x22>
 800cf34:	0800eaac 	.word	0x0800eaac
 800cf38:	0800eacc 	.word	0x0800eacc
 800cf3c:	0800ea8c 	.word	0x0800ea8c

0800cf40 <std>:
 800cf40:	2300      	movs	r3, #0
 800cf42:	b510      	push	{r4, lr}
 800cf44:	4604      	mov	r4, r0
 800cf46:	e9c0 3300 	strd	r3, r3, [r0]
 800cf4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf4e:	6083      	str	r3, [r0, #8]
 800cf50:	8181      	strh	r1, [r0, #12]
 800cf52:	6643      	str	r3, [r0, #100]	; 0x64
 800cf54:	81c2      	strh	r2, [r0, #14]
 800cf56:	6183      	str	r3, [r0, #24]
 800cf58:	4619      	mov	r1, r3
 800cf5a:	2208      	movs	r2, #8
 800cf5c:	305c      	adds	r0, #92	; 0x5c
 800cf5e:	f7fe f9d9 	bl	800b314 <memset>
 800cf62:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <std+0x38>)
 800cf64:	6263      	str	r3, [r4, #36]	; 0x24
 800cf66:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <std+0x3c>)
 800cf68:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf6a:	4b05      	ldr	r3, [pc, #20]	; (800cf80 <std+0x40>)
 800cf6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf6e:	4b05      	ldr	r3, [pc, #20]	; (800cf84 <std+0x44>)
 800cf70:	6224      	str	r4, [r4, #32]
 800cf72:	6323      	str	r3, [r4, #48]	; 0x30
 800cf74:	bd10      	pop	{r4, pc}
 800cf76:	bf00      	nop
 800cf78:	0800ded9 	.word	0x0800ded9
 800cf7c:	0800defb 	.word	0x0800defb
 800cf80:	0800df33 	.word	0x0800df33
 800cf84:	0800df57 	.word	0x0800df57

0800cf88 <_cleanup_r>:
 800cf88:	4901      	ldr	r1, [pc, #4]	; (800cf90 <_cleanup_r+0x8>)
 800cf8a:	f000 b8af 	b.w	800d0ec <_fwalk_reent>
 800cf8e:	bf00      	nop
 800cf90:	0800cec9 	.word	0x0800cec9

0800cf94 <__sfmoreglue>:
 800cf94:	b570      	push	{r4, r5, r6, lr}
 800cf96:	2268      	movs	r2, #104	; 0x68
 800cf98:	1e4d      	subs	r5, r1, #1
 800cf9a:	4355      	muls	r5, r2
 800cf9c:	460e      	mov	r6, r1
 800cf9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfa2:	f7fe fa2b 	bl	800b3fc <_malloc_r>
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	b140      	cbz	r0, 800cfbc <__sfmoreglue+0x28>
 800cfaa:	2100      	movs	r1, #0
 800cfac:	e9c0 1600 	strd	r1, r6, [r0]
 800cfb0:	300c      	adds	r0, #12
 800cfb2:	60a0      	str	r0, [r4, #8]
 800cfb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfb8:	f7fe f9ac 	bl	800b314 <memset>
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	bd70      	pop	{r4, r5, r6, pc}

0800cfc0 <__sfp_lock_acquire>:
 800cfc0:	4801      	ldr	r0, [pc, #4]	; (800cfc8 <__sfp_lock_acquire+0x8>)
 800cfc2:	f000 b8b8 	b.w	800d136 <__retarget_lock_acquire_recursive>
 800cfc6:	bf00      	nop
 800cfc8:	20002a65 	.word	0x20002a65

0800cfcc <__sfp_lock_release>:
 800cfcc:	4801      	ldr	r0, [pc, #4]	; (800cfd4 <__sfp_lock_release+0x8>)
 800cfce:	f000 b8b3 	b.w	800d138 <__retarget_lock_release_recursive>
 800cfd2:	bf00      	nop
 800cfd4:	20002a65 	.word	0x20002a65

0800cfd8 <__sinit_lock_acquire>:
 800cfd8:	4801      	ldr	r0, [pc, #4]	; (800cfe0 <__sinit_lock_acquire+0x8>)
 800cfda:	f000 b8ac 	b.w	800d136 <__retarget_lock_acquire_recursive>
 800cfde:	bf00      	nop
 800cfe0:	20002a66 	.word	0x20002a66

0800cfe4 <__sinit_lock_release>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__sinit_lock_release+0x8>)
 800cfe6:	f000 b8a7 	b.w	800d138 <__retarget_lock_release_recursive>
 800cfea:	bf00      	nop
 800cfec:	20002a66 	.word	0x20002a66

0800cff0 <__sinit>:
 800cff0:	b510      	push	{r4, lr}
 800cff2:	4604      	mov	r4, r0
 800cff4:	f7ff fff0 	bl	800cfd8 <__sinit_lock_acquire>
 800cff8:	69a3      	ldr	r3, [r4, #24]
 800cffa:	b11b      	cbz	r3, 800d004 <__sinit+0x14>
 800cffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d000:	f7ff bff0 	b.w	800cfe4 <__sinit_lock_release>
 800d004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d008:	6523      	str	r3, [r4, #80]	; 0x50
 800d00a:	4b13      	ldr	r3, [pc, #76]	; (800d058 <__sinit+0x68>)
 800d00c:	4a13      	ldr	r2, [pc, #76]	; (800d05c <__sinit+0x6c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	62a2      	str	r2, [r4, #40]	; 0x28
 800d012:	42a3      	cmp	r3, r4
 800d014:	bf04      	itt	eq
 800d016:	2301      	moveq	r3, #1
 800d018:	61a3      	streq	r3, [r4, #24]
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 f820 	bl	800d060 <__sfp>
 800d020:	6060      	str	r0, [r4, #4]
 800d022:	4620      	mov	r0, r4
 800d024:	f000 f81c 	bl	800d060 <__sfp>
 800d028:	60a0      	str	r0, [r4, #8]
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 f818 	bl	800d060 <__sfp>
 800d030:	2200      	movs	r2, #0
 800d032:	60e0      	str	r0, [r4, #12]
 800d034:	2104      	movs	r1, #4
 800d036:	6860      	ldr	r0, [r4, #4]
 800d038:	f7ff ff82 	bl	800cf40 <std>
 800d03c:	68a0      	ldr	r0, [r4, #8]
 800d03e:	2201      	movs	r2, #1
 800d040:	2109      	movs	r1, #9
 800d042:	f7ff ff7d 	bl	800cf40 <std>
 800d046:	68e0      	ldr	r0, [r4, #12]
 800d048:	2202      	movs	r2, #2
 800d04a:	2112      	movs	r1, #18
 800d04c:	f7ff ff78 	bl	800cf40 <std>
 800d050:	2301      	movs	r3, #1
 800d052:	61a3      	str	r3, [r4, #24]
 800d054:	e7d2      	b.n	800cffc <__sinit+0xc>
 800d056:	bf00      	nop
 800d058:	0800e9c4 	.word	0x0800e9c4
 800d05c:	0800cf89 	.word	0x0800cf89

0800d060 <__sfp>:
 800d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d062:	4607      	mov	r7, r0
 800d064:	f7ff ffac 	bl	800cfc0 <__sfp_lock_acquire>
 800d068:	4b1e      	ldr	r3, [pc, #120]	; (800d0e4 <__sfp+0x84>)
 800d06a:	681e      	ldr	r6, [r3, #0]
 800d06c:	69b3      	ldr	r3, [r6, #24]
 800d06e:	b913      	cbnz	r3, 800d076 <__sfp+0x16>
 800d070:	4630      	mov	r0, r6
 800d072:	f7ff ffbd 	bl	800cff0 <__sinit>
 800d076:	3648      	adds	r6, #72	; 0x48
 800d078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	d503      	bpl.n	800d088 <__sfp+0x28>
 800d080:	6833      	ldr	r3, [r6, #0]
 800d082:	b30b      	cbz	r3, 800d0c8 <__sfp+0x68>
 800d084:	6836      	ldr	r6, [r6, #0]
 800d086:	e7f7      	b.n	800d078 <__sfp+0x18>
 800d088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d08c:	b9d5      	cbnz	r5, 800d0c4 <__sfp+0x64>
 800d08e:	4b16      	ldr	r3, [pc, #88]	; (800d0e8 <__sfp+0x88>)
 800d090:	60e3      	str	r3, [r4, #12]
 800d092:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d096:	6665      	str	r5, [r4, #100]	; 0x64
 800d098:	f000 f84c 	bl	800d134 <__retarget_lock_init_recursive>
 800d09c:	f7ff ff96 	bl	800cfcc <__sfp_lock_release>
 800d0a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0a8:	6025      	str	r5, [r4, #0]
 800d0aa:	61a5      	str	r5, [r4, #24]
 800d0ac:	2208      	movs	r2, #8
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0b4:	f7fe f92e 	bl	800b314 <memset>
 800d0b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0c4:	3468      	adds	r4, #104	; 0x68
 800d0c6:	e7d9      	b.n	800d07c <__sfp+0x1c>
 800d0c8:	2104      	movs	r1, #4
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	f7ff ff62 	bl	800cf94 <__sfmoreglue>
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	6030      	str	r0, [r6, #0]
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d1d5      	bne.n	800d084 <__sfp+0x24>
 800d0d8:	f7ff ff78 	bl	800cfcc <__sfp_lock_release>
 800d0dc:	230c      	movs	r3, #12
 800d0de:	603b      	str	r3, [r7, #0]
 800d0e0:	e7ee      	b.n	800d0c0 <__sfp+0x60>
 800d0e2:	bf00      	nop
 800d0e4:	0800e9c4 	.word	0x0800e9c4
 800d0e8:	ffff0001 	.word	0xffff0001

0800d0ec <_fwalk_reent>:
 800d0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	4688      	mov	r8, r1
 800d0f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0f8:	2700      	movs	r7, #0
 800d0fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0fe:	f1b9 0901 	subs.w	r9, r9, #1
 800d102:	d505      	bpl.n	800d110 <_fwalk_reent+0x24>
 800d104:	6824      	ldr	r4, [r4, #0]
 800d106:	2c00      	cmp	r4, #0
 800d108:	d1f7      	bne.n	800d0fa <_fwalk_reent+0xe>
 800d10a:	4638      	mov	r0, r7
 800d10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d110:	89ab      	ldrh	r3, [r5, #12]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d907      	bls.n	800d126 <_fwalk_reent+0x3a>
 800d116:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d11a:	3301      	adds	r3, #1
 800d11c:	d003      	beq.n	800d126 <_fwalk_reent+0x3a>
 800d11e:	4629      	mov	r1, r5
 800d120:	4630      	mov	r0, r6
 800d122:	47c0      	blx	r8
 800d124:	4307      	orrs	r7, r0
 800d126:	3568      	adds	r5, #104	; 0x68
 800d128:	e7e9      	b.n	800d0fe <_fwalk_reent+0x12>
	...

0800d12c <_localeconv_r>:
 800d12c:	4800      	ldr	r0, [pc, #0]	; (800d130 <_localeconv_r+0x4>)
 800d12e:	4770      	bx	lr
 800d130:	2000017c 	.word	0x2000017c

0800d134 <__retarget_lock_init_recursive>:
 800d134:	4770      	bx	lr

0800d136 <__retarget_lock_acquire_recursive>:
 800d136:	4770      	bx	lr

0800d138 <__retarget_lock_release_recursive>:
 800d138:	4770      	bx	lr

0800d13a <__swhatbuf_r>:
 800d13a:	b570      	push	{r4, r5, r6, lr}
 800d13c:	460e      	mov	r6, r1
 800d13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d142:	2900      	cmp	r1, #0
 800d144:	b096      	sub	sp, #88	; 0x58
 800d146:	4614      	mov	r4, r2
 800d148:	461d      	mov	r5, r3
 800d14a:	da08      	bge.n	800d15e <__swhatbuf_r+0x24>
 800d14c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d150:	2200      	movs	r2, #0
 800d152:	602a      	str	r2, [r5, #0]
 800d154:	061a      	lsls	r2, r3, #24
 800d156:	d410      	bmi.n	800d17a <__swhatbuf_r+0x40>
 800d158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d15c:	e00e      	b.n	800d17c <__swhatbuf_r+0x42>
 800d15e:	466a      	mov	r2, sp
 800d160:	f000 ff50 	bl	800e004 <_fstat_r>
 800d164:	2800      	cmp	r0, #0
 800d166:	dbf1      	blt.n	800d14c <__swhatbuf_r+0x12>
 800d168:	9a01      	ldr	r2, [sp, #4]
 800d16a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d16e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d172:	425a      	negs	r2, r3
 800d174:	415a      	adcs	r2, r3
 800d176:	602a      	str	r2, [r5, #0]
 800d178:	e7ee      	b.n	800d158 <__swhatbuf_r+0x1e>
 800d17a:	2340      	movs	r3, #64	; 0x40
 800d17c:	2000      	movs	r0, #0
 800d17e:	6023      	str	r3, [r4, #0]
 800d180:	b016      	add	sp, #88	; 0x58
 800d182:	bd70      	pop	{r4, r5, r6, pc}

0800d184 <__smakebuf_r>:
 800d184:	898b      	ldrh	r3, [r1, #12]
 800d186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d188:	079d      	lsls	r5, r3, #30
 800d18a:	4606      	mov	r6, r0
 800d18c:	460c      	mov	r4, r1
 800d18e:	d507      	bpl.n	800d1a0 <__smakebuf_r+0x1c>
 800d190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d194:	6023      	str	r3, [r4, #0]
 800d196:	6123      	str	r3, [r4, #16]
 800d198:	2301      	movs	r3, #1
 800d19a:	6163      	str	r3, [r4, #20]
 800d19c:	b002      	add	sp, #8
 800d19e:	bd70      	pop	{r4, r5, r6, pc}
 800d1a0:	ab01      	add	r3, sp, #4
 800d1a2:	466a      	mov	r2, sp
 800d1a4:	f7ff ffc9 	bl	800d13a <__swhatbuf_r>
 800d1a8:	9900      	ldr	r1, [sp, #0]
 800d1aa:	4605      	mov	r5, r0
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f7fe f925 	bl	800b3fc <_malloc_r>
 800d1b2:	b948      	cbnz	r0, 800d1c8 <__smakebuf_r+0x44>
 800d1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1b8:	059a      	lsls	r2, r3, #22
 800d1ba:	d4ef      	bmi.n	800d19c <__smakebuf_r+0x18>
 800d1bc:	f023 0303 	bic.w	r3, r3, #3
 800d1c0:	f043 0302 	orr.w	r3, r3, #2
 800d1c4:	81a3      	strh	r3, [r4, #12]
 800d1c6:	e7e3      	b.n	800d190 <__smakebuf_r+0xc>
 800d1c8:	4b0d      	ldr	r3, [pc, #52]	; (800d200 <__smakebuf_r+0x7c>)
 800d1ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	6020      	str	r0, [r4, #0]
 800d1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1d4:	81a3      	strh	r3, [r4, #12]
 800d1d6:	9b00      	ldr	r3, [sp, #0]
 800d1d8:	6163      	str	r3, [r4, #20]
 800d1da:	9b01      	ldr	r3, [sp, #4]
 800d1dc:	6120      	str	r0, [r4, #16]
 800d1de:	b15b      	cbz	r3, 800d1f8 <__smakebuf_r+0x74>
 800d1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f000 ff1f 	bl	800e028 <_isatty_r>
 800d1ea:	b128      	cbz	r0, 800d1f8 <__smakebuf_r+0x74>
 800d1ec:	89a3      	ldrh	r3, [r4, #12]
 800d1ee:	f023 0303 	bic.w	r3, r3, #3
 800d1f2:	f043 0301 	orr.w	r3, r3, #1
 800d1f6:	81a3      	strh	r3, [r4, #12]
 800d1f8:	89a0      	ldrh	r0, [r4, #12]
 800d1fa:	4305      	orrs	r5, r0
 800d1fc:	81a5      	strh	r5, [r4, #12]
 800d1fe:	e7cd      	b.n	800d19c <__smakebuf_r+0x18>
 800d200:	0800cf89 	.word	0x0800cf89

0800d204 <memcpy>:
 800d204:	440a      	add	r2, r1
 800d206:	4291      	cmp	r1, r2
 800d208:	f100 33ff 	add.w	r3, r0, #4294967295
 800d20c:	d100      	bne.n	800d210 <memcpy+0xc>
 800d20e:	4770      	bx	lr
 800d210:	b510      	push	{r4, lr}
 800d212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d21a:	4291      	cmp	r1, r2
 800d21c:	d1f9      	bne.n	800d212 <memcpy+0xe>
 800d21e:	bd10      	pop	{r4, pc}

0800d220 <__malloc_lock>:
 800d220:	4801      	ldr	r0, [pc, #4]	; (800d228 <__malloc_lock+0x8>)
 800d222:	f7ff bf88 	b.w	800d136 <__retarget_lock_acquire_recursive>
 800d226:	bf00      	nop
 800d228:	20002a64 	.word	0x20002a64

0800d22c <__malloc_unlock>:
 800d22c:	4801      	ldr	r0, [pc, #4]	; (800d234 <__malloc_unlock+0x8>)
 800d22e:	f7ff bf83 	b.w	800d138 <__retarget_lock_release_recursive>
 800d232:	bf00      	nop
 800d234:	20002a64 	.word	0x20002a64

0800d238 <_Balloc>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d23c:	4604      	mov	r4, r0
 800d23e:	460d      	mov	r5, r1
 800d240:	b976      	cbnz	r6, 800d260 <_Balloc+0x28>
 800d242:	2010      	movs	r0, #16
 800d244:	f7fe f856 	bl	800b2f4 <malloc>
 800d248:	4602      	mov	r2, r0
 800d24a:	6260      	str	r0, [r4, #36]	; 0x24
 800d24c:	b920      	cbnz	r0, 800d258 <_Balloc+0x20>
 800d24e:	4b18      	ldr	r3, [pc, #96]	; (800d2b0 <_Balloc+0x78>)
 800d250:	4818      	ldr	r0, [pc, #96]	; (800d2b4 <_Balloc+0x7c>)
 800d252:	2166      	movs	r1, #102	; 0x66
 800d254:	f000 fe96 	bl	800df84 <__assert_func>
 800d258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d25c:	6006      	str	r6, [r0, #0]
 800d25e:	60c6      	str	r6, [r0, #12]
 800d260:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d262:	68f3      	ldr	r3, [r6, #12]
 800d264:	b183      	cbz	r3, 800d288 <_Balloc+0x50>
 800d266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d26e:	b9b8      	cbnz	r0, 800d2a0 <_Balloc+0x68>
 800d270:	2101      	movs	r1, #1
 800d272:	fa01 f605 	lsl.w	r6, r1, r5
 800d276:	1d72      	adds	r2, r6, #5
 800d278:	0092      	lsls	r2, r2, #2
 800d27a:	4620      	mov	r0, r4
 800d27c:	f000 fb60 	bl	800d940 <_calloc_r>
 800d280:	b160      	cbz	r0, 800d29c <_Balloc+0x64>
 800d282:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d286:	e00e      	b.n	800d2a6 <_Balloc+0x6e>
 800d288:	2221      	movs	r2, #33	; 0x21
 800d28a:	2104      	movs	r1, #4
 800d28c:	4620      	mov	r0, r4
 800d28e:	f000 fb57 	bl	800d940 <_calloc_r>
 800d292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d294:	60f0      	str	r0, [r6, #12]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1e4      	bne.n	800d266 <_Balloc+0x2e>
 800d29c:	2000      	movs	r0, #0
 800d29e:	bd70      	pop	{r4, r5, r6, pc}
 800d2a0:	6802      	ldr	r2, [r0, #0]
 800d2a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2ac:	e7f7      	b.n	800d29e <_Balloc+0x66>
 800d2ae:	bf00      	nop
 800d2b0:	0800ea09 	.word	0x0800ea09
 800d2b4:	0800eaec 	.word	0x0800eaec

0800d2b8 <_Bfree>:
 800d2b8:	b570      	push	{r4, r5, r6, lr}
 800d2ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d2bc:	4605      	mov	r5, r0
 800d2be:	460c      	mov	r4, r1
 800d2c0:	b976      	cbnz	r6, 800d2e0 <_Bfree+0x28>
 800d2c2:	2010      	movs	r0, #16
 800d2c4:	f7fe f816 	bl	800b2f4 <malloc>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	6268      	str	r0, [r5, #36]	; 0x24
 800d2cc:	b920      	cbnz	r0, 800d2d8 <_Bfree+0x20>
 800d2ce:	4b09      	ldr	r3, [pc, #36]	; (800d2f4 <_Bfree+0x3c>)
 800d2d0:	4809      	ldr	r0, [pc, #36]	; (800d2f8 <_Bfree+0x40>)
 800d2d2:	218a      	movs	r1, #138	; 0x8a
 800d2d4:	f000 fe56 	bl	800df84 <__assert_func>
 800d2d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2dc:	6006      	str	r6, [r0, #0]
 800d2de:	60c6      	str	r6, [r0, #12]
 800d2e0:	b13c      	cbz	r4, 800d2f2 <_Bfree+0x3a>
 800d2e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d2e4:	6862      	ldr	r2, [r4, #4]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2ec:	6021      	str	r1, [r4, #0]
 800d2ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}
 800d2f4:	0800ea09 	.word	0x0800ea09
 800d2f8:	0800eaec 	.word	0x0800eaec

0800d2fc <__multadd>:
 800d2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d300:	690d      	ldr	r5, [r1, #16]
 800d302:	4607      	mov	r7, r0
 800d304:	460c      	mov	r4, r1
 800d306:	461e      	mov	r6, r3
 800d308:	f101 0c14 	add.w	ip, r1, #20
 800d30c:	2000      	movs	r0, #0
 800d30e:	f8dc 3000 	ldr.w	r3, [ip]
 800d312:	b299      	uxth	r1, r3
 800d314:	fb02 6101 	mla	r1, r2, r1, r6
 800d318:	0c1e      	lsrs	r6, r3, #16
 800d31a:	0c0b      	lsrs	r3, r1, #16
 800d31c:	fb02 3306 	mla	r3, r2, r6, r3
 800d320:	b289      	uxth	r1, r1
 800d322:	3001      	adds	r0, #1
 800d324:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d328:	4285      	cmp	r5, r0
 800d32a:	f84c 1b04 	str.w	r1, [ip], #4
 800d32e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d332:	dcec      	bgt.n	800d30e <__multadd+0x12>
 800d334:	b30e      	cbz	r6, 800d37a <__multadd+0x7e>
 800d336:	68a3      	ldr	r3, [r4, #8]
 800d338:	42ab      	cmp	r3, r5
 800d33a:	dc19      	bgt.n	800d370 <__multadd+0x74>
 800d33c:	6861      	ldr	r1, [r4, #4]
 800d33e:	4638      	mov	r0, r7
 800d340:	3101      	adds	r1, #1
 800d342:	f7ff ff79 	bl	800d238 <_Balloc>
 800d346:	4680      	mov	r8, r0
 800d348:	b928      	cbnz	r0, 800d356 <__multadd+0x5a>
 800d34a:	4602      	mov	r2, r0
 800d34c:	4b0c      	ldr	r3, [pc, #48]	; (800d380 <__multadd+0x84>)
 800d34e:	480d      	ldr	r0, [pc, #52]	; (800d384 <__multadd+0x88>)
 800d350:	21b5      	movs	r1, #181	; 0xb5
 800d352:	f000 fe17 	bl	800df84 <__assert_func>
 800d356:	6922      	ldr	r2, [r4, #16]
 800d358:	3202      	adds	r2, #2
 800d35a:	f104 010c 	add.w	r1, r4, #12
 800d35e:	0092      	lsls	r2, r2, #2
 800d360:	300c      	adds	r0, #12
 800d362:	f7ff ff4f 	bl	800d204 <memcpy>
 800d366:	4621      	mov	r1, r4
 800d368:	4638      	mov	r0, r7
 800d36a:	f7ff ffa5 	bl	800d2b8 <_Bfree>
 800d36e:	4644      	mov	r4, r8
 800d370:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d374:	3501      	adds	r5, #1
 800d376:	615e      	str	r6, [r3, #20]
 800d378:	6125      	str	r5, [r4, #16]
 800d37a:	4620      	mov	r0, r4
 800d37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d380:	0800ea7b 	.word	0x0800ea7b
 800d384:	0800eaec 	.word	0x0800eaec

0800d388 <__hi0bits>:
 800d388:	0c03      	lsrs	r3, r0, #16
 800d38a:	041b      	lsls	r3, r3, #16
 800d38c:	b9d3      	cbnz	r3, 800d3c4 <__hi0bits+0x3c>
 800d38e:	0400      	lsls	r0, r0, #16
 800d390:	2310      	movs	r3, #16
 800d392:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d396:	bf04      	itt	eq
 800d398:	0200      	lsleq	r0, r0, #8
 800d39a:	3308      	addeq	r3, #8
 800d39c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d3a0:	bf04      	itt	eq
 800d3a2:	0100      	lsleq	r0, r0, #4
 800d3a4:	3304      	addeq	r3, #4
 800d3a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d3aa:	bf04      	itt	eq
 800d3ac:	0080      	lsleq	r0, r0, #2
 800d3ae:	3302      	addeq	r3, #2
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	db05      	blt.n	800d3c0 <__hi0bits+0x38>
 800d3b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d3b8:	f103 0301 	add.w	r3, r3, #1
 800d3bc:	bf08      	it	eq
 800d3be:	2320      	moveq	r3, #32
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	4770      	bx	lr
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	e7e4      	b.n	800d392 <__hi0bits+0xa>

0800d3c8 <__lo0bits>:
 800d3c8:	6803      	ldr	r3, [r0, #0]
 800d3ca:	f013 0207 	ands.w	r2, r3, #7
 800d3ce:	4601      	mov	r1, r0
 800d3d0:	d00b      	beq.n	800d3ea <__lo0bits+0x22>
 800d3d2:	07da      	lsls	r2, r3, #31
 800d3d4:	d423      	bmi.n	800d41e <__lo0bits+0x56>
 800d3d6:	0798      	lsls	r0, r3, #30
 800d3d8:	bf49      	itett	mi
 800d3da:	085b      	lsrmi	r3, r3, #1
 800d3dc:	089b      	lsrpl	r3, r3, #2
 800d3de:	2001      	movmi	r0, #1
 800d3e0:	600b      	strmi	r3, [r1, #0]
 800d3e2:	bf5c      	itt	pl
 800d3e4:	600b      	strpl	r3, [r1, #0]
 800d3e6:	2002      	movpl	r0, #2
 800d3e8:	4770      	bx	lr
 800d3ea:	b298      	uxth	r0, r3
 800d3ec:	b9a8      	cbnz	r0, 800d41a <__lo0bits+0x52>
 800d3ee:	0c1b      	lsrs	r3, r3, #16
 800d3f0:	2010      	movs	r0, #16
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	b90a      	cbnz	r2, 800d3fa <__lo0bits+0x32>
 800d3f6:	3008      	adds	r0, #8
 800d3f8:	0a1b      	lsrs	r3, r3, #8
 800d3fa:	071a      	lsls	r2, r3, #28
 800d3fc:	bf04      	itt	eq
 800d3fe:	091b      	lsreq	r3, r3, #4
 800d400:	3004      	addeq	r0, #4
 800d402:	079a      	lsls	r2, r3, #30
 800d404:	bf04      	itt	eq
 800d406:	089b      	lsreq	r3, r3, #2
 800d408:	3002      	addeq	r0, #2
 800d40a:	07da      	lsls	r2, r3, #31
 800d40c:	d403      	bmi.n	800d416 <__lo0bits+0x4e>
 800d40e:	085b      	lsrs	r3, r3, #1
 800d410:	f100 0001 	add.w	r0, r0, #1
 800d414:	d005      	beq.n	800d422 <__lo0bits+0x5a>
 800d416:	600b      	str	r3, [r1, #0]
 800d418:	4770      	bx	lr
 800d41a:	4610      	mov	r0, r2
 800d41c:	e7e9      	b.n	800d3f2 <__lo0bits+0x2a>
 800d41e:	2000      	movs	r0, #0
 800d420:	4770      	bx	lr
 800d422:	2020      	movs	r0, #32
 800d424:	4770      	bx	lr
	...

0800d428 <__i2b>:
 800d428:	b510      	push	{r4, lr}
 800d42a:	460c      	mov	r4, r1
 800d42c:	2101      	movs	r1, #1
 800d42e:	f7ff ff03 	bl	800d238 <_Balloc>
 800d432:	4602      	mov	r2, r0
 800d434:	b928      	cbnz	r0, 800d442 <__i2b+0x1a>
 800d436:	4b05      	ldr	r3, [pc, #20]	; (800d44c <__i2b+0x24>)
 800d438:	4805      	ldr	r0, [pc, #20]	; (800d450 <__i2b+0x28>)
 800d43a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d43e:	f000 fda1 	bl	800df84 <__assert_func>
 800d442:	2301      	movs	r3, #1
 800d444:	6144      	str	r4, [r0, #20]
 800d446:	6103      	str	r3, [r0, #16]
 800d448:	bd10      	pop	{r4, pc}
 800d44a:	bf00      	nop
 800d44c:	0800ea7b 	.word	0x0800ea7b
 800d450:	0800eaec 	.word	0x0800eaec

0800d454 <__multiply>:
 800d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d458:	4691      	mov	r9, r2
 800d45a:	690a      	ldr	r2, [r1, #16]
 800d45c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d460:	429a      	cmp	r2, r3
 800d462:	bfb8      	it	lt
 800d464:	460b      	movlt	r3, r1
 800d466:	460c      	mov	r4, r1
 800d468:	bfbc      	itt	lt
 800d46a:	464c      	movlt	r4, r9
 800d46c:	4699      	movlt	r9, r3
 800d46e:	6927      	ldr	r7, [r4, #16]
 800d470:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d474:	68a3      	ldr	r3, [r4, #8]
 800d476:	6861      	ldr	r1, [r4, #4]
 800d478:	eb07 060a 	add.w	r6, r7, sl
 800d47c:	42b3      	cmp	r3, r6
 800d47e:	b085      	sub	sp, #20
 800d480:	bfb8      	it	lt
 800d482:	3101      	addlt	r1, #1
 800d484:	f7ff fed8 	bl	800d238 <_Balloc>
 800d488:	b930      	cbnz	r0, 800d498 <__multiply+0x44>
 800d48a:	4602      	mov	r2, r0
 800d48c:	4b44      	ldr	r3, [pc, #272]	; (800d5a0 <__multiply+0x14c>)
 800d48e:	4845      	ldr	r0, [pc, #276]	; (800d5a4 <__multiply+0x150>)
 800d490:	f240 115d 	movw	r1, #349	; 0x15d
 800d494:	f000 fd76 	bl	800df84 <__assert_func>
 800d498:	f100 0514 	add.w	r5, r0, #20
 800d49c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d4a0:	462b      	mov	r3, r5
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	4543      	cmp	r3, r8
 800d4a6:	d321      	bcc.n	800d4ec <__multiply+0x98>
 800d4a8:	f104 0314 	add.w	r3, r4, #20
 800d4ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4b0:	f109 0314 	add.w	r3, r9, #20
 800d4b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d4b8:	9202      	str	r2, [sp, #8]
 800d4ba:	1b3a      	subs	r2, r7, r4
 800d4bc:	3a15      	subs	r2, #21
 800d4be:	f022 0203 	bic.w	r2, r2, #3
 800d4c2:	3204      	adds	r2, #4
 800d4c4:	f104 0115 	add.w	r1, r4, #21
 800d4c8:	428f      	cmp	r7, r1
 800d4ca:	bf38      	it	cc
 800d4cc:	2204      	movcc	r2, #4
 800d4ce:	9201      	str	r2, [sp, #4]
 800d4d0:	9a02      	ldr	r2, [sp, #8]
 800d4d2:	9303      	str	r3, [sp, #12]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d80c      	bhi.n	800d4f2 <__multiply+0x9e>
 800d4d8:	2e00      	cmp	r6, #0
 800d4da:	dd03      	ble.n	800d4e4 <__multiply+0x90>
 800d4dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d05a      	beq.n	800d59a <__multiply+0x146>
 800d4e4:	6106      	str	r6, [r0, #16]
 800d4e6:	b005      	add	sp, #20
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	f843 2b04 	str.w	r2, [r3], #4
 800d4f0:	e7d8      	b.n	800d4a4 <__multiply+0x50>
 800d4f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d4f6:	f1ba 0f00 	cmp.w	sl, #0
 800d4fa:	d024      	beq.n	800d546 <__multiply+0xf2>
 800d4fc:	f104 0e14 	add.w	lr, r4, #20
 800d500:	46a9      	mov	r9, r5
 800d502:	f04f 0c00 	mov.w	ip, #0
 800d506:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d50a:	f8d9 1000 	ldr.w	r1, [r9]
 800d50e:	fa1f fb82 	uxth.w	fp, r2
 800d512:	b289      	uxth	r1, r1
 800d514:	fb0a 110b 	mla	r1, sl, fp, r1
 800d518:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d51c:	f8d9 2000 	ldr.w	r2, [r9]
 800d520:	4461      	add	r1, ip
 800d522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d526:	fb0a c20b 	mla	r2, sl, fp, ip
 800d52a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d52e:	b289      	uxth	r1, r1
 800d530:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d534:	4577      	cmp	r7, lr
 800d536:	f849 1b04 	str.w	r1, [r9], #4
 800d53a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d53e:	d8e2      	bhi.n	800d506 <__multiply+0xb2>
 800d540:	9a01      	ldr	r2, [sp, #4]
 800d542:	f845 c002 	str.w	ip, [r5, r2]
 800d546:	9a03      	ldr	r2, [sp, #12]
 800d548:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d54c:	3304      	adds	r3, #4
 800d54e:	f1b9 0f00 	cmp.w	r9, #0
 800d552:	d020      	beq.n	800d596 <__multiply+0x142>
 800d554:	6829      	ldr	r1, [r5, #0]
 800d556:	f104 0c14 	add.w	ip, r4, #20
 800d55a:	46ae      	mov	lr, r5
 800d55c:	f04f 0a00 	mov.w	sl, #0
 800d560:	f8bc b000 	ldrh.w	fp, [ip]
 800d564:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d568:	fb09 220b 	mla	r2, r9, fp, r2
 800d56c:	4492      	add	sl, r2
 800d56e:	b289      	uxth	r1, r1
 800d570:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d574:	f84e 1b04 	str.w	r1, [lr], #4
 800d578:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d57c:	f8be 1000 	ldrh.w	r1, [lr]
 800d580:	0c12      	lsrs	r2, r2, #16
 800d582:	fb09 1102 	mla	r1, r9, r2, r1
 800d586:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d58a:	4567      	cmp	r7, ip
 800d58c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d590:	d8e6      	bhi.n	800d560 <__multiply+0x10c>
 800d592:	9a01      	ldr	r2, [sp, #4]
 800d594:	50a9      	str	r1, [r5, r2]
 800d596:	3504      	adds	r5, #4
 800d598:	e79a      	b.n	800d4d0 <__multiply+0x7c>
 800d59a:	3e01      	subs	r6, #1
 800d59c:	e79c      	b.n	800d4d8 <__multiply+0x84>
 800d59e:	bf00      	nop
 800d5a0:	0800ea7b 	.word	0x0800ea7b
 800d5a4:	0800eaec 	.word	0x0800eaec

0800d5a8 <__pow5mult>:
 800d5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5ac:	4615      	mov	r5, r2
 800d5ae:	f012 0203 	ands.w	r2, r2, #3
 800d5b2:	4606      	mov	r6, r0
 800d5b4:	460f      	mov	r7, r1
 800d5b6:	d007      	beq.n	800d5c8 <__pow5mult+0x20>
 800d5b8:	4c25      	ldr	r4, [pc, #148]	; (800d650 <__pow5mult+0xa8>)
 800d5ba:	3a01      	subs	r2, #1
 800d5bc:	2300      	movs	r3, #0
 800d5be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5c2:	f7ff fe9b 	bl	800d2fc <__multadd>
 800d5c6:	4607      	mov	r7, r0
 800d5c8:	10ad      	asrs	r5, r5, #2
 800d5ca:	d03d      	beq.n	800d648 <__pow5mult+0xa0>
 800d5cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d5ce:	b97c      	cbnz	r4, 800d5f0 <__pow5mult+0x48>
 800d5d0:	2010      	movs	r0, #16
 800d5d2:	f7fd fe8f 	bl	800b2f4 <malloc>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	6270      	str	r0, [r6, #36]	; 0x24
 800d5da:	b928      	cbnz	r0, 800d5e8 <__pow5mult+0x40>
 800d5dc:	4b1d      	ldr	r3, [pc, #116]	; (800d654 <__pow5mult+0xac>)
 800d5de:	481e      	ldr	r0, [pc, #120]	; (800d658 <__pow5mult+0xb0>)
 800d5e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d5e4:	f000 fcce 	bl	800df84 <__assert_func>
 800d5e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5ec:	6004      	str	r4, [r0, #0]
 800d5ee:	60c4      	str	r4, [r0, #12]
 800d5f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d5f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5f8:	b94c      	cbnz	r4, 800d60e <__pow5mult+0x66>
 800d5fa:	f240 2171 	movw	r1, #625	; 0x271
 800d5fe:	4630      	mov	r0, r6
 800d600:	f7ff ff12 	bl	800d428 <__i2b>
 800d604:	2300      	movs	r3, #0
 800d606:	f8c8 0008 	str.w	r0, [r8, #8]
 800d60a:	4604      	mov	r4, r0
 800d60c:	6003      	str	r3, [r0, #0]
 800d60e:	f04f 0900 	mov.w	r9, #0
 800d612:	07eb      	lsls	r3, r5, #31
 800d614:	d50a      	bpl.n	800d62c <__pow5mult+0x84>
 800d616:	4639      	mov	r1, r7
 800d618:	4622      	mov	r2, r4
 800d61a:	4630      	mov	r0, r6
 800d61c:	f7ff ff1a 	bl	800d454 <__multiply>
 800d620:	4639      	mov	r1, r7
 800d622:	4680      	mov	r8, r0
 800d624:	4630      	mov	r0, r6
 800d626:	f7ff fe47 	bl	800d2b8 <_Bfree>
 800d62a:	4647      	mov	r7, r8
 800d62c:	106d      	asrs	r5, r5, #1
 800d62e:	d00b      	beq.n	800d648 <__pow5mult+0xa0>
 800d630:	6820      	ldr	r0, [r4, #0]
 800d632:	b938      	cbnz	r0, 800d644 <__pow5mult+0x9c>
 800d634:	4622      	mov	r2, r4
 800d636:	4621      	mov	r1, r4
 800d638:	4630      	mov	r0, r6
 800d63a:	f7ff ff0b 	bl	800d454 <__multiply>
 800d63e:	6020      	str	r0, [r4, #0]
 800d640:	f8c0 9000 	str.w	r9, [r0]
 800d644:	4604      	mov	r4, r0
 800d646:	e7e4      	b.n	800d612 <__pow5mult+0x6a>
 800d648:	4638      	mov	r0, r7
 800d64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64e:	bf00      	nop
 800d650:	0800ec38 	.word	0x0800ec38
 800d654:	0800ea09 	.word	0x0800ea09
 800d658:	0800eaec 	.word	0x0800eaec

0800d65c <__lshift>:
 800d65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d660:	460c      	mov	r4, r1
 800d662:	6849      	ldr	r1, [r1, #4]
 800d664:	6923      	ldr	r3, [r4, #16]
 800d666:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d66a:	68a3      	ldr	r3, [r4, #8]
 800d66c:	4607      	mov	r7, r0
 800d66e:	4691      	mov	r9, r2
 800d670:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d674:	f108 0601 	add.w	r6, r8, #1
 800d678:	42b3      	cmp	r3, r6
 800d67a:	db0b      	blt.n	800d694 <__lshift+0x38>
 800d67c:	4638      	mov	r0, r7
 800d67e:	f7ff fddb 	bl	800d238 <_Balloc>
 800d682:	4605      	mov	r5, r0
 800d684:	b948      	cbnz	r0, 800d69a <__lshift+0x3e>
 800d686:	4602      	mov	r2, r0
 800d688:	4b2a      	ldr	r3, [pc, #168]	; (800d734 <__lshift+0xd8>)
 800d68a:	482b      	ldr	r0, [pc, #172]	; (800d738 <__lshift+0xdc>)
 800d68c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d690:	f000 fc78 	bl	800df84 <__assert_func>
 800d694:	3101      	adds	r1, #1
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	e7ee      	b.n	800d678 <__lshift+0x1c>
 800d69a:	2300      	movs	r3, #0
 800d69c:	f100 0114 	add.w	r1, r0, #20
 800d6a0:	f100 0210 	add.w	r2, r0, #16
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	4553      	cmp	r3, sl
 800d6a8:	db37      	blt.n	800d71a <__lshift+0xbe>
 800d6aa:	6920      	ldr	r0, [r4, #16]
 800d6ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6b0:	f104 0314 	add.w	r3, r4, #20
 800d6b4:	f019 091f 	ands.w	r9, r9, #31
 800d6b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d6c0:	d02f      	beq.n	800d722 <__lshift+0xc6>
 800d6c2:	f1c9 0e20 	rsb	lr, r9, #32
 800d6c6:	468a      	mov	sl, r1
 800d6c8:	f04f 0c00 	mov.w	ip, #0
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	fa02 f209 	lsl.w	r2, r2, r9
 800d6d2:	ea42 020c 	orr.w	r2, r2, ip
 800d6d6:	f84a 2b04 	str.w	r2, [sl], #4
 800d6da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6de:	4298      	cmp	r0, r3
 800d6e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d6e4:	d8f2      	bhi.n	800d6cc <__lshift+0x70>
 800d6e6:	1b03      	subs	r3, r0, r4
 800d6e8:	3b15      	subs	r3, #21
 800d6ea:	f023 0303 	bic.w	r3, r3, #3
 800d6ee:	3304      	adds	r3, #4
 800d6f0:	f104 0215 	add.w	r2, r4, #21
 800d6f4:	4290      	cmp	r0, r2
 800d6f6:	bf38      	it	cc
 800d6f8:	2304      	movcc	r3, #4
 800d6fa:	f841 c003 	str.w	ip, [r1, r3]
 800d6fe:	f1bc 0f00 	cmp.w	ip, #0
 800d702:	d001      	beq.n	800d708 <__lshift+0xac>
 800d704:	f108 0602 	add.w	r6, r8, #2
 800d708:	3e01      	subs	r6, #1
 800d70a:	4638      	mov	r0, r7
 800d70c:	612e      	str	r6, [r5, #16]
 800d70e:	4621      	mov	r1, r4
 800d710:	f7ff fdd2 	bl	800d2b8 <_Bfree>
 800d714:	4628      	mov	r0, r5
 800d716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d71e:	3301      	adds	r3, #1
 800d720:	e7c1      	b.n	800d6a6 <__lshift+0x4a>
 800d722:	3904      	subs	r1, #4
 800d724:	f853 2b04 	ldr.w	r2, [r3], #4
 800d728:	f841 2f04 	str.w	r2, [r1, #4]!
 800d72c:	4298      	cmp	r0, r3
 800d72e:	d8f9      	bhi.n	800d724 <__lshift+0xc8>
 800d730:	e7ea      	b.n	800d708 <__lshift+0xac>
 800d732:	bf00      	nop
 800d734:	0800ea7b 	.word	0x0800ea7b
 800d738:	0800eaec 	.word	0x0800eaec

0800d73c <__mcmp>:
 800d73c:	b530      	push	{r4, r5, lr}
 800d73e:	6902      	ldr	r2, [r0, #16]
 800d740:	690c      	ldr	r4, [r1, #16]
 800d742:	1b12      	subs	r2, r2, r4
 800d744:	d10e      	bne.n	800d764 <__mcmp+0x28>
 800d746:	f100 0314 	add.w	r3, r0, #20
 800d74a:	3114      	adds	r1, #20
 800d74c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d750:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d754:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d758:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d75c:	42a5      	cmp	r5, r4
 800d75e:	d003      	beq.n	800d768 <__mcmp+0x2c>
 800d760:	d305      	bcc.n	800d76e <__mcmp+0x32>
 800d762:	2201      	movs	r2, #1
 800d764:	4610      	mov	r0, r2
 800d766:	bd30      	pop	{r4, r5, pc}
 800d768:	4283      	cmp	r3, r0
 800d76a:	d3f3      	bcc.n	800d754 <__mcmp+0x18>
 800d76c:	e7fa      	b.n	800d764 <__mcmp+0x28>
 800d76e:	f04f 32ff 	mov.w	r2, #4294967295
 800d772:	e7f7      	b.n	800d764 <__mcmp+0x28>

0800d774 <__mdiff>:
 800d774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d778:	460c      	mov	r4, r1
 800d77a:	4606      	mov	r6, r0
 800d77c:	4611      	mov	r1, r2
 800d77e:	4620      	mov	r0, r4
 800d780:	4690      	mov	r8, r2
 800d782:	f7ff ffdb 	bl	800d73c <__mcmp>
 800d786:	1e05      	subs	r5, r0, #0
 800d788:	d110      	bne.n	800d7ac <__mdiff+0x38>
 800d78a:	4629      	mov	r1, r5
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7ff fd53 	bl	800d238 <_Balloc>
 800d792:	b930      	cbnz	r0, 800d7a2 <__mdiff+0x2e>
 800d794:	4b3a      	ldr	r3, [pc, #232]	; (800d880 <__mdiff+0x10c>)
 800d796:	4602      	mov	r2, r0
 800d798:	f240 2132 	movw	r1, #562	; 0x232
 800d79c:	4839      	ldr	r0, [pc, #228]	; (800d884 <__mdiff+0x110>)
 800d79e:	f000 fbf1 	bl	800df84 <__assert_func>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ac:	bfa4      	itt	ge
 800d7ae:	4643      	movge	r3, r8
 800d7b0:	46a0      	movge	r8, r4
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d7b8:	bfa6      	itte	ge
 800d7ba:	461c      	movge	r4, r3
 800d7bc:	2500      	movge	r5, #0
 800d7be:	2501      	movlt	r5, #1
 800d7c0:	f7ff fd3a 	bl	800d238 <_Balloc>
 800d7c4:	b920      	cbnz	r0, 800d7d0 <__mdiff+0x5c>
 800d7c6:	4b2e      	ldr	r3, [pc, #184]	; (800d880 <__mdiff+0x10c>)
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d7ce:	e7e5      	b.n	800d79c <__mdiff+0x28>
 800d7d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d7d4:	6926      	ldr	r6, [r4, #16]
 800d7d6:	60c5      	str	r5, [r0, #12]
 800d7d8:	f104 0914 	add.w	r9, r4, #20
 800d7dc:	f108 0514 	add.w	r5, r8, #20
 800d7e0:	f100 0e14 	add.w	lr, r0, #20
 800d7e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d7e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d7ec:	f108 0210 	add.w	r2, r8, #16
 800d7f0:	46f2      	mov	sl, lr
 800d7f2:	2100      	movs	r1, #0
 800d7f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d7f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d7fc:	fa1f f883 	uxth.w	r8, r3
 800d800:	fa11 f18b 	uxtah	r1, r1, fp
 800d804:	0c1b      	lsrs	r3, r3, #16
 800d806:	eba1 0808 	sub.w	r8, r1, r8
 800d80a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d80e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d812:	fa1f f888 	uxth.w	r8, r8
 800d816:	1419      	asrs	r1, r3, #16
 800d818:	454e      	cmp	r6, r9
 800d81a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d81e:	f84a 3b04 	str.w	r3, [sl], #4
 800d822:	d8e7      	bhi.n	800d7f4 <__mdiff+0x80>
 800d824:	1b33      	subs	r3, r6, r4
 800d826:	3b15      	subs	r3, #21
 800d828:	f023 0303 	bic.w	r3, r3, #3
 800d82c:	3304      	adds	r3, #4
 800d82e:	3415      	adds	r4, #21
 800d830:	42a6      	cmp	r6, r4
 800d832:	bf38      	it	cc
 800d834:	2304      	movcc	r3, #4
 800d836:	441d      	add	r5, r3
 800d838:	4473      	add	r3, lr
 800d83a:	469e      	mov	lr, r3
 800d83c:	462e      	mov	r6, r5
 800d83e:	4566      	cmp	r6, ip
 800d840:	d30e      	bcc.n	800d860 <__mdiff+0xec>
 800d842:	f10c 0203 	add.w	r2, ip, #3
 800d846:	1b52      	subs	r2, r2, r5
 800d848:	f022 0203 	bic.w	r2, r2, #3
 800d84c:	3d03      	subs	r5, #3
 800d84e:	45ac      	cmp	ip, r5
 800d850:	bf38      	it	cc
 800d852:	2200      	movcc	r2, #0
 800d854:	441a      	add	r2, r3
 800d856:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d85a:	b17b      	cbz	r3, 800d87c <__mdiff+0x108>
 800d85c:	6107      	str	r7, [r0, #16]
 800d85e:	e7a3      	b.n	800d7a8 <__mdiff+0x34>
 800d860:	f856 8b04 	ldr.w	r8, [r6], #4
 800d864:	fa11 f288 	uxtah	r2, r1, r8
 800d868:	1414      	asrs	r4, r2, #16
 800d86a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d86e:	b292      	uxth	r2, r2
 800d870:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d874:	f84e 2b04 	str.w	r2, [lr], #4
 800d878:	1421      	asrs	r1, r4, #16
 800d87a:	e7e0      	b.n	800d83e <__mdiff+0xca>
 800d87c:	3f01      	subs	r7, #1
 800d87e:	e7ea      	b.n	800d856 <__mdiff+0xe2>
 800d880:	0800ea7b 	.word	0x0800ea7b
 800d884:	0800eaec 	.word	0x0800eaec

0800d888 <__d2b>:
 800d888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d88c:	4689      	mov	r9, r1
 800d88e:	2101      	movs	r1, #1
 800d890:	ec57 6b10 	vmov	r6, r7, d0
 800d894:	4690      	mov	r8, r2
 800d896:	f7ff fccf 	bl	800d238 <_Balloc>
 800d89a:	4604      	mov	r4, r0
 800d89c:	b930      	cbnz	r0, 800d8ac <__d2b+0x24>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	4b25      	ldr	r3, [pc, #148]	; (800d938 <__d2b+0xb0>)
 800d8a2:	4826      	ldr	r0, [pc, #152]	; (800d93c <__d2b+0xb4>)
 800d8a4:	f240 310a 	movw	r1, #778	; 0x30a
 800d8a8:	f000 fb6c 	bl	800df84 <__assert_func>
 800d8ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d8b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d8b4:	bb35      	cbnz	r5, 800d904 <__d2b+0x7c>
 800d8b6:	2e00      	cmp	r6, #0
 800d8b8:	9301      	str	r3, [sp, #4]
 800d8ba:	d028      	beq.n	800d90e <__d2b+0x86>
 800d8bc:	4668      	mov	r0, sp
 800d8be:	9600      	str	r6, [sp, #0]
 800d8c0:	f7ff fd82 	bl	800d3c8 <__lo0bits>
 800d8c4:	9900      	ldr	r1, [sp, #0]
 800d8c6:	b300      	cbz	r0, 800d90a <__d2b+0x82>
 800d8c8:	9a01      	ldr	r2, [sp, #4]
 800d8ca:	f1c0 0320 	rsb	r3, r0, #32
 800d8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d2:	430b      	orrs	r3, r1
 800d8d4:	40c2      	lsrs	r2, r0
 800d8d6:	6163      	str	r3, [r4, #20]
 800d8d8:	9201      	str	r2, [sp, #4]
 800d8da:	9b01      	ldr	r3, [sp, #4]
 800d8dc:	61a3      	str	r3, [r4, #24]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	bf14      	ite	ne
 800d8e2:	2202      	movne	r2, #2
 800d8e4:	2201      	moveq	r2, #1
 800d8e6:	6122      	str	r2, [r4, #16]
 800d8e8:	b1d5      	cbz	r5, 800d920 <__d2b+0x98>
 800d8ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d8ee:	4405      	add	r5, r0
 800d8f0:	f8c9 5000 	str.w	r5, [r9]
 800d8f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d8f8:	f8c8 0000 	str.w	r0, [r8]
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	b003      	add	sp, #12
 800d900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d908:	e7d5      	b.n	800d8b6 <__d2b+0x2e>
 800d90a:	6161      	str	r1, [r4, #20]
 800d90c:	e7e5      	b.n	800d8da <__d2b+0x52>
 800d90e:	a801      	add	r0, sp, #4
 800d910:	f7ff fd5a 	bl	800d3c8 <__lo0bits>
 800d914:	9b01      	ldr	r3, [sp, #4]
 800d916:	6163      	str	r3, [r4, #20]
 800d918:	2201      	movs	r2, #1
 800d91a:	6122      	str	r2, [r4, #16]
 800d91c:	3020      	adds	r0, #32
 800d91e:	e7e3      	b.n	800d8e8 <__d2b+0x60>
 800d920:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d924:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d928:	f8c9 0000 	str.w	r0, [r9]
 800d92c:	6918      	ldr	r0, [r3, #16]
 800d92e:	f7ff fd2b 	bl	800d388 <__hi0bits>
 800d932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d936:	e7df      	b.n	800d8f8 <__d2b+0x70>
 800d938:	0800ea7b 	.word	0x0800ea7b
 800d93c:	0800eaec 	.word	0x0800eaec

0800d940 <_calloc_r>:
 800d940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d942:	fba1 2402 	umull	r2, r4, r1, r2
 800d946:	b94c      	cbnz	r4, 800d95c <_calloc_r+0x1c>
 800d948:	4611      	mov	r1, r2
 800d94a:	9201      	str	r2, [sp, #4]
 800d94c:	f7fd fd56 	bl	800b3fc <_malloc_r>
 800d950:	9a01      	ldr	r2, [sp, #4]
 800d952:	4605      	mov	r5, r0
 800d954:	b930      	cbnz	r0, 800d964 <_calloc_r+0x24>
 800d956:	4628      	mov	r0, r5
 800d958:	b003      	add	sp, #12
 800d95a:	bd30      	pop	{r4, r5, pc}
 800d95c:	220c      	movs	r2, #12
 800d95e:	6002      	str	r2, [r0, #0]
 800d960:	2500      	movs	r5, #0
 800d962:	e7f8      	b.n	800d956 <_calloc_r+0x16>
 800d964:	4621      	mov	r1, r4
 800d966:	f7fd fcd5 	bl	800b314 <memset>
 800d96a:	e7f4      	b.n	800d956 <_calloc_r+0x16>

0800d96c <__ssputs_r>:
 800d96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d970:	688e      	ldr	r6, [r1, #8]
 800d972:	429e      	cmp	r6, r3
 800d974:	4682      	mov	sl, r0
 800d976:	460c      	mov	r4, r1
 800d978:	4690      	mov	r8, r2
 800d97a:	461f      	mov	r7, r3
 800d97c:	d838      	bhi.n	800d9f0 <__ssputs_r+0x84>
 800d97e:	898a      	ldrh	r2, [r1, #12]
 800d980:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d984:	d032      	beq.n	800d9ec <__ssputs_r+0x80>
 800d986:	6825      	ldr	r5, [r4, #0]
 800d988:	6909      	ldr	r1, [r1, #16]
 800d98a:	eba5 0901 	sub.w	r9, r5, r1
 800d98e:	6965      	ldr	r5, [r4, #20]
 800d990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d998:	3301      	adds	r3, #1
 800d99a:	444b      	add	r3, r9
 800d99c:	106d      	asrs	r5, r5, #1
 800d99e:	429d      	cmp	r5, r3
 800d9a0:	bf38      	it	cc
 800d9a2:	461d      	movcc	r5, r3
 800d9a4:	0553      	lsls	r3, r2, #21
 800d9a6:	d531      	bpl.n	800da0c <__ssputs_r+0xa0>
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	f7fd fd27 	bl	800b3fc <_malloc_r>
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	b950      	cbnz	r0, 800d9c8 <__ssputs_r+0x5c>
 800d9b2:	230c      	movs	r3, #12
 800d9b4:	f8ca 3000 	str.w	r3, [sl]
 800d9b8:	89a3      	ldrh	r3, [r4, #12]
 800d9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9be:	81a3      	strh	r3, [r4, #12]
 800d9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c8:	6921      	ldr	r1, [r4, #16]
 800d9ca:	464a      	mov	r2, r9
 800d9cc:	f7ff fc1a 	bl	800d204 <memcpy>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	6126      	str	r6, [r4, #16]
 800d9de:	6165      	str	r5, [r4, #20]
 800d9e0:	444e      	add	r6, r9
 800d9e2:	eba5 0509 	sub.w	r5, r5, r9
 800d9e6:	6026      	str	r6, [r4, #0]
 800d9e8:	60a5      	str	r5, [r4, #8]
 800d9ea:	463e      	mov	r6, r7
 800d9ec:	42be      	cmp	r6, r7
 800d9ee:	d900      	bls.n	800d9f2 <__ssputs_r+0x86>
 800d9f0:	463e      	mov	r6, r7
 800d9f2:	6820      	ldr	r0, [r4, #0]
 800d9f4:	4632      	mov	r2, r6
 800d9f6:	4641      	mov	r1, r8
 800d9f8:	f000 fb4a 	bl	800e090 <memmove>
 800d9fc:	68a3      	ldr	r3, [r4, #8]
 800d9fe:	1b9b      	subs	r3, r3, r6
 800da00:	60a3      	str	r3, [r4, #8]
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	4433      	add	r3, r6
 800da06:	6023      	str	r3, [r4, #0]
 800da08:	2000      	movs	r0, #0
 800da0a:	e7db      	b.n	800d9c4 <__ssputs_r+0x58>
 800da0c:	462a      	mov	r2, r5
 800da0e:	f000 fb59 	bl	800e0c4 <_realloc_r>
 800da12:	4606      	mov	r6, r0
 800da14:	2800      	cmp	r0, #0
 800da16:	d1e1      	bne.n	800d9dc <__ssputs_r+0x70>
 800da18:	6921      	ldr	r1, [r4, #16]
 800da1a:	4650      	mov	r0, sl
 800da1c:	f7fd fc82 	bl	800b324 <_free_r>
 800da20:	e7c7      	b.n	800d9b2 <__ssputs_r+0x46>
	...

0800da24 <_svfiprintf_r>:
 800da24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da28:	4698      	mov	r8, r3
 800da2a:	898b      	ldrh	r3, [r1, #12]
 800da2c:	061b      	lsls	r3, r3, #24
 800da2e:	b09d      	sub	sp, #116	; 0x74
 800da30:	4607      	mov	r7, r0
 800da32:	460d      	mov	r5, r1
 800da34:	4614      	mov	r4, r2
 800da36:	d50e      	bpl.n	800da56 <_svfiprintf_r+0x32>
 800da38:	690b      	ldr	r3, [r1, #16]
 800da3a:	b963      	cbnz	r3, 800da56 <_svfiprintf_r+0x32>
 800da3c:	2140      	movs	r1, #64	; 0x40
 800da3e:	f7fd fcdd 	bl	800b3fc <_malloc_r>
 800da42:	6028      	str	r0, [r5, #0]
 800da44:	6128      	str	r0, [r5, #16]
 800da46:	b920      	cbnz	r0, 800da52 <_svfiprintf_r+0x2e>
 800da48:	230c      	movs	r3, #12
 800da4a:	603b      	str	r3, [r7, #0]
 800da4c:	f04f 30ff 	mov.w	r0, #4294967295
 800da50:	e0d1      	b.n	800dbf6 <_svfiprintf_r+0x1d2>
 800da52:	2340      	movs	r3, #64	; 0x40
 800da54:	616b      	str	r3, [r5, #20]
 800da56:	2300      	movs	r3, #0
 800da58:	9309      	str	r3, [sp, #36]	; 0x24
 800da5a:	2320      	movs	r3, #32
 800da5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da60:	f8cd 800c 	str.w	r8, [sp, #12]
 800da64:	2330      	movs	r3, #48	; 0x30
 800da66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc10 <_svfiprintf_r+0x1ec>
 800da6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da6e:	f04f 0901 	mov.w	r9, #1
 800da72:	4623      	mov	r3, r4
 800da74:	469a      	mov	sl, r3
 800da76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da7a:	b10a      	cbz	r2, 800da80 <_svfiprintf_r+0x5c>
 800da7c:	2a25      	cmp	r2, #37	; 0x25
 800da7e:	d1f9      	bne.n	800da74 <_svfiprintf_r+0x50>
 800da80:	ebba 0b04 	subs.w	fp, sl, r4
 800da84:	d00b      	beq.n	800da9e <_svfiprintf_r+0x7a>
 800da86:	465b      	mov	r3, fp
 800da88:	4622      	mov	r2, r4
 800da8a:	4629      	mov	r1, r5
 800da8c:	4638      	mov	r0, r7
 800da8e:	f7ff ff6d 	bl	800d96c <__ssputs_r>
 800da92:	3001      	adds	r0, #1
 800da94:	f000 80aa 	beq.w	800dbec <_svfiprintf_r+0x1c8>
 800da98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da9a:	445a      	add	r2, fp
 800da9c:	9209      	str	r2, [sp, #36]	; 0x24
 800da9e:	f89a 3000 	ldrb.w	r3, [sl]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f000 80a2 	beq.w	800dbec <_svfiprintf_r+0x1c8>
 800daa8:	2300      	movs	r3, #0
 800daaa:	f04f 32ff 	mov.w	r2, #4294967295
 800daae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dab2:	f10a 0a01 	add.w	sl, sl, #1
 800dab6:	9304      	str	r3, [sp, #16]
 800dab8:	9307      	str	r3, [sp, #28]
 800daba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dabe:	931a      	str	r3, [sp, #104]	; 0x68
 800dac0:	4654      	mov	r4, sl
 800dac2:	2205      	movs	r2, #5
 800dac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac8:	4851      	ldr	r0, [pc, #324]	; (800dc10 <_svfiprintf_r+0x1ec>)
 800daca:	f7f2 fb91 	bl	80001f0 <memchr>
 800dace:	9a04      	ldr	r2, [sp, #16]
 800dad0:	b9d8      	cbnz	r0, 800db0a <_svfiprintf_r+0xe6>
 800dad2:	06d0      	lsls	r0, r2, #27
 800dad4:	bf44      	itt	mi
 800dad6:	2320      	movmi	r3, #32
 800dad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dadc:	0711      	lsls	r1, r2, #28
 800dade:	bf44      	itt	mi
 800dae0:	232b      	movmi	r3, #43	; 0x2b
 800dae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dae6:	f89a 3000 	ldrb.w	r3, [sl]
 800daea:	2b2a      	cmp	r3, #42	; 0x2a
 800daec:	d015      	beq.n	800db1a <_svfiprintf_r+0xf6>
 800daee:	9a07      	ldr	r2, [sp, #28]
 800daf0:	4654      	mov	r4, sl
 800daf2:	2000      	movs	r0, #0
 800daf4:	f04f 0c0a 	mov.w	ip, #10
 800daf8:	4621      	mov	r1, r4
 800dafa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dafe:	3b30      	subs	r3, #48	; 0x30
 800db00:	2b09      	cmp	r3, #9
 800db02:	d94e      	bls.n	800dba2 <_svfiprintf_r+0x17e>
 800db04:	b1b0      	cbz	r0, 800db34 <_svfiprintf_r+0x110>
 800db06:	9207      	str	r2, [sp, #28]
 800db08:	e014      	b.n	800db34 <_svfiprintf_r+0x110>
 800db0a:	eba0 0308 	sub.w	r3, r0, r8
 800db0e:	fa09 f303 	lsl.w	r3, r9, r3
 800db12:	4313      	orrs	r3, r2
 800db14:	9304      	str	r3, [sp, #16]
 800db16:	46a2      	mov	sl, r4
 800db18:	e7d2      	b.n	800dac0 <_svfiprintf_r+0x9c>
 800db1a:	9b03      	ldr	r3, [sp, #12]
 800db1c:	1d19      	adds	r1, r3, #4
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	9103      	str	r1, [sp, #12]
 800db22:	2b00      	cmp	r3, #0
 800db24:	bfbb      	ittet	lt
 800db26:	425b      	neglt	r3, r3
 800db28:	f042 0202 	orrlt.w	r2, r2, #2
 800db2c:	9307      	strge	r3, [sp, #28]
 800db2e:	9307      	strlt	r3, [sp, #28]
 800db30:	bfb8      	it	lt
 800db32:	9204      	strlt	r2, [sp, #16]
 800db34:	7823      	ldrb	r3, [r4, #0]
 800db36:	2b2e      	cmp	r3, #46	; 0x2e
 800db38:	d10c      	bne.n	800db54 <_svfiprintf_r+0x130>
 800db3a:	7863      	ldrb	r3, [r4, #1]
 800db3c:	2b2a      	cmp	r3, #42	; 0x2a
 800db3e:	d135      	bne.n	800dbac <_svfiprintf_r+0x188>
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	1d1a      	adds	r2, r3, #4
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	9203      	str	r2, [sp, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	bfb8      	it	lt
 800db4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800db50:	3402      	adds	r4, #2
 800db52:	9305      	str	r3, [sp, #20]
 800db54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc20 <_svfiprintf_r+0x1fc>
 800db58:	7821      	ldrb	r1, [r4, #0]
 800db5a:	2203      	movs	r2, #3
 800db5c:	4650      	mov	r0, sl
 800db5e:	f7f2 fb47 	bl	80001f0 <memchr>
 800db62:	b140      	cbz	r0, 800db76 <_svfiprintf_r+0x152>
 800db64:	2340      	movs	r3, #64	; 0x40
 800db66:	eba0 000a 	sub.w	r0, r0, sl
 800db6a:	fa03 f000 	lsl.w	r0, r3, r0
 800db6e:	9b04      	ldr	r3, [sp, #16]
 800db70:	4303      	orrs	r3, r0
 800db72:	3401      	adds	r4, #1
 800db74:	9304      	str	r3, [sp, #16]
 800db76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db7a:	4826      	ldr	r0, [pc, #152]	; (800dc14 <_svfiprintf_r+0x1f0>)
 800db7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db80:	2206      	movs	r2, #6
 800db82:	f7f2 fb35 	bl	80001f0 <memchr>
 800db86:	2800      	cmp	r0, #0
 800db88:	d038      	beq.n	800dbfc <_svfiprintf_r+0x1d8>
 800db8a:	4b23      	ldr	r3, [pc, #140]	; (800dc18 <_svfiprintf_r+0x1f4>)
 800db8c:	bb1b      	cbnz	r3, 800dbd6 <_svfiprintf_r+0x1b2>
 800db8e:	9b03      	ldr	r3, [sp, #12]
 800db90:	3307      	adds	r3, #7
 800db92:	f023 0307 	bic.w	r3, r3, #7
 800db96:	3308      	adds	r3, #8
 800db98:	9303      	str	r3, [sp, #12]
 800db9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db9c:	4433      	add	r3, r6
 800db9e:	9309      	str	r3, [sp, #36]	; 0x24
 800dba0:	e767      	b.n	800da72 <_svfiprintf_r+0x4e>
 800dba2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dba6:	460c      	mov	r4, r1
 800dba8:	2001      	movs	r0, #1
 800dbaa:	e7a5      	b.n	800daf8 <_svfiprintf_r+0xd4>
 800dbac:	2300      	movs	r3, #0
 800dbae:	3401      	adds	r4, #1
 800dbb0:	9305      	str	r3, [sp, #20]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	f04f 0c0a 	mov.w	ip, #10
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbbe:	3a30      	subs	r2, #48	; 0x30
 800dbc0:	2a09      	cmp	r2, #9
 800dbc2:	d903      	bls.n	800dbcc <_svfiprintf_r+0x1a8>
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d0c5      	beq.n	800db54 <_svfiprintf_r+0x130>
 800dbc8:	9105      	str	r1, [sp, #20]
 800dbca:	e7c3      	b.n	800db54 <_svfiprintf_r+0x130>
 800dbcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e7f0      	b.n	800dbb8 <_svfiprintf_r+0x194>
 800dbd6:	ab03      	add	r3, sp, #12
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	462a      	mov	r2, r5
 800dbdc:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <_svfiprintf_r+0x1f8>)
 800dbde:	a904      	add	r1, sp, #16
 800dbe0:	4638      	mov	r0, r7
 800dbe2:	f7fd fd1f 	bl	800b624 <_printf_float>
 800dbe6:	1c42      	adds	r2, r0, #1
 800dbe8:	4606      	mov	r6, r0
 800dbea:	d1d6      	bne.n	800db9a <_svfiprintf_r+0x176>
 800dbec:	89ab      	ldrh	r3, [r5, #12]
 800dbee:	065b      	lsls	r3, r3, #25
 800dbf0:	f53f af2c 	bmi.w	800da4c <_svfiprintf_r+0x28>
 800dbf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbf6:	b01d      	add	sp, #116	; 0x74
 800dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfc:	ab03      	add	r3, sp, #12
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	462a      	mov	r2, r5
 800dc02:	4b06      	ldr	r3, [pc, #24]	; (800dc1c <_svfiprintf_r+0x1f8>)
 800dc04:	a904      	add	r1, sp, #16
 800dc06:	4638      	mov	r0, r7
 800dc08:	f7fd ffb0 	bl	800bb6c <_printf_i>
 800dc0c:	e7eb      	b.n	800dbe6 <_svfiprintf_r+0x1c2>
 800dc0e:	bf00      	nop
 800dc10:	0800ec44 	.word	0x0800ec44
 800dc14:	0800ec4e 	.word	0x0800ec4e
 800dc18:	0800b625 	.word	0x0800b625
 800dc1c:	0800d96d 	.word	0x0800d96d
 800dc20:	0800ec4a 	.word	0x0800ec4a

0800dc24 <__sfputc_r>:
 800dc24:	6893      	ldr	r3, [r2, #8]
 800dc26:	3b01      	subs	r3, #1
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	b410      	push	{r4}
 800dc2c:	6093      	str	r3, [r2, #8]
 800dc2e:	da08      	bge.n	800dc42 <__sfputc_r+0x1e>
 800dc30:	6994      	ldr	r4, [r2, #24]
 800dc32:	42a3      	cmp	r3, r4
 800dc34:	db01      	blt.n	800dc3a <__sfputc_r+0x16>
 800dc36:	290a      	cmp	r1, #10
 800dc38:	d103      	bne.n	800dc42 <__sfputc_r+0x1e>
 800dc3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc3e:	f7fe b981 	b.w	800bf44 <__swbuf_r>
 800dc42:	6813      	ldr	r3, [r2, #0]
 800dc44:	1c58      	adds	r0, r3, #1
 800dc46:	6010      	str	r0, [r2, #0]
 800dc48:	7019      	strb	r1, [r3, #0]
 800dc4a:	4608      	mov	r0, r1
 800dc4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <__sfputs_r>:
 800dc52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc54:	4606      	mov	r6, r0
 800dc56:	460f      	mov	r7, r1
 800dc58:	4614      	mov	r4, r2
 800dc5a:	18d5      	adds	r5, r2, r3
 800dc5c:	42ac      	cmp	r4, r5
 800dc5e:	d101      	bne.n	800dc64 <__sfputs_r+0x12>
 800dc60:	2000      	movs	r0, #0
 800dc62:	e007      	b.n	800dc74 <__sfputs_r+0x22>
 800dc64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc68:	463a      	mov	r2, r7
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f7ff ffda 	bl	800dc24 <__sfputc_r>
 800dc70:	1c43      	adds	r3, r0, #1
 800dc72:	d1f3      	bne.n	800dc5c <__sfputs_r+0xa>
 800dc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc78 <_vfiprintf_r>:
 800dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	460d      	mov	r5, r1
 800dc7e:	b09d      	sub	sp, #116	; 0x74
 800dc80:	4614      	mov	r4, r2
 800dc82:	4698      	mov	r8, r3
 800dc84:	4606      	mov	r6, r0
 800dc86:	b118      	cbz	r0, 800dc90 <_vfiprintf_r+0x18>
 800dc88:	6983      	ldr	r3, [r0, #24]
 800dc8a:	b90b      	cbnz	r3, 800dc90 <_vfiprintf_r+0x18>
 800dc8c:	f7ff f9b0 	bl	800cff0 <__sinit>
 800dc90:	4b89      	ldr	r3, [pc, #548]	; (800deb8 <_vfiprintf_r+0x240>)
 800dc92:	429d      	cmp	r5, r3
 800dc94:	d11b      	bne.n	800dcce <_vfiprintf_r+0x56>
 800dc96:	6875      	ldr	r5, [r6, #4]
 800dc98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc9a:	07d9      	lsls	r1, r3, #31
 800dc9c:	d405      	bmi.n	800dcaa <_vfiprintf_r+0x32>
 800dc9e:	89ab      	ldrh	r3, [r5, #12]
 800dca0:	059a      	lsls	r2, r3, #22
 800dca2:	d402      	bmi.n	800dcaa <_vfiprintf_r+0x32>
 800dca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dca6:	f7ff fa46 	bl	800d136 <__retarget_lock_acquire_recursive>
 800dcaa:	89ab      	ldrh	r3, [r5, #12]
 800dcac:	071b      	lsls	r3, r3, #28
 800dcae:	d501      	bpl.n	800dcb4 <_vfiprintf_r+0x3c>
 800dcb0:	692b      	ldr	r3, [r5, #16]
 800dcb2:	b9eb      	cbnz	r3, 800dcf0 <_vfiprintf_r+0x78>
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f7fe f996 	bl	800bfe8 <__swsetup_r>
 800dcbc:	b1c0      	cbz	r0, 800dcf0 <_vfiprintf_r+0x78>
 800dcbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcc0:	07dc      	lsls	r4, r3, #31
 800dcc2:	d50e      	bpl.n	800dce2 <_vfiprintf_r+0x6a>
 800dcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc8:	b01d      	add	sp, #116	; 0x74
 800dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcce:	4b7b      	ldr	r3, [pc, #492]	; (800debc <_vfiprintf_r+0x244>)
 800dcd0:	429d      	cmp	r5, r3
 800dcd2:	d101      	bne.n	800dcd8 <_vfiprintf_r+0x60>
 800dcd4:	68b5      	ldr	r5, [r6, #8]
 800dcd6:	e7df      	b.n	800dc98 <_vfiprintf_r+0x20>
 800dcd8:	4b79      	ldr	r3, [pc, #484]	; (800dec0 <_vfiprintf_r+0x248>)
 800dcda:	429d      	cmp	r5, r3
 800dcdc:	bf08      	it	eq
 800dcde:	68f5      	ldreq	r5, [r6, #12]
 800dce0:	e7da      	b.n	800dc98 <_vfiprintf_r+0x20>
 800dce2:	89ab      	ldrh	r3, [r5, #12]
 800dce4:	0598      	lsls	r0, r3, #22
 800dce6:	d4ed      	bmi.n	800dcc4 <_vfiprintf_r+0x4c>
 800dce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcea:	f7ff fa25 	bl	800d138 <__retarget_lock_release_recursive>
 800dcee:	e7e9      	b.n	800dcc4 <_vfiprintf_r+0x4c>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf4:	2320      	movs	r3, #32
 800dcf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcfe:	2330      	movs	r3, #48	; 0x30
 800dd00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dec4 <_vfiprintf_r+0x24c>
 800dd04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd08:	f04f 0901 	mov.w	r9, #1
 800dd0c:	4623      	mov	r3, r4
 800dd0e:	469a      	mov	sl, r3
 800dd10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd14:	b10a      	cbz	r2, 800dd1a <_vfiprintf_r+0xa2>
 800dd16:	2a25      	cmp	r2, #37	; 0x25
 800dd18:	d1f9      	bne.n	800dd0e <_vfiprintf_r+0x96>
 800dd1a:	ebba 0b04 	subs.w	fp, sl, r4
 800dd1e:	d00b      	beq.n	800dd38 <_vfiprintf_r+0xc0>
 800dd20:	465b      	mov	r3, fp
 800dd22:	4622      	mov	r2, r4
 800dd24:	4629      	mov	r1, r5
 800dd26:	4630      	mov	r0, r6
 800dd28:	f7ff ff93 	bl	800dc52 <__sfputs_r>
 800dd2c:	3001      	adds	r0, #1
 800dd2e:	f000 80aa 	beq.w	800de86 <_vfiprintf_r+0x20e>
 800dd32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd34:	445a      	add	r2, fp
 800dd36:	9209      	str	r2, [sp, #36]	; 0x24
 800dd38:	f89a 3000 	ldrb.w	r3, [sl]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f000 80a2 	beq.w	800de86 <_vfiprintf_r+0x20e>
 800dd42:	2300      	movs	r3, #0
 800dd44:	f04f 32ff 	mov.w	r2, #4294967295
 800dd48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd4c:	f10a 0a01 	add.w	sl, sl, #1
 800dd50:	9304      	str	r3, [sp, #16]
 800dd52:	9307      	str	r3, [sp, #28]
 800dd54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd58:	931a      	str	r3, [sp, #104]	; 0x68
 800dd5a:	4654      	mov	r4, sl
 800dd5c:	2205      	movs	r2, #5
 800dd5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd62:	4858      	ldr	r0, [pc, #352]	; (800dec4 <_vfiprintf_r+0x24c>)
 800dd64:	f7f2 fa44 	bl	80001f0 <memchr>
 800dd68:	9a04      	ldr	r2, [sp, #16]
 800dd6a:	b9d8      	cbnz	r0, 800dda4 <_vfiprintf_r+0x12c>
 800dd6c:	06d1      	lsls	r1, r2, #27
 800dd6e:	bf44      	itt	mi
 800dd70:	2320      	movmi	r3, #32
 800dd72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd76:	0713      	lsls	r3, r2, #28
 800dd78:	bf44      	itt	mi
 800dd7a:	232b      	movmi	r3, #43	; 0x2b
 800dd7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd80:	f89a 3000 	ldrb.w	r3, [sl]
 800dd84:	2b2a      	cmp	r3, #42	; 0x2a
 800dd86:	d015      	beq.n	800ddb4 <_vfiprintf_r+0x13c>
 800dd88:	9a07      	ldr	r2, [sp, #28]
 800dd8a:	4654      	mov	r4, sl
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	f04f 0c0a 	mov.w	ip, #10
 800dd92:	4621      	mov	r1, r4
 800dd94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd98:	3b30      	subs	r3, #48	; 0x30
 800dd9a:	2b09      	cmp	r3, #9
 800dd9c:	d94e      	bls.n	800de3c <_vfiprintf_r+0x1c4>
 800dd9e:	b1b0      	cbz	r0, 800ddce <_vfiprintf_r+0x156>
 800dda0:	9207      	str	r2, [sp, #28]
 800dda2:	e014      	b.n	800ddce <_vfiprintf_r+0x156>
 800dda4:	eba0 0308 	sub.w	r3, r0, r8
 800dda8:	fa09 f303 	lsl.w	r3, r9, r3
 800ddac:	4313      	orrs	r3, r2
 800ddae:	9304      	str	r3, [sp, #16]
 800ddb0:	46a2      	mov	sl, r4
 800ddb2:	e7d2      	b.n	800dd5a <_vfiprintf_r+0xe2>
 800ddb4:	9b03      	ldr	r3, [sp, #12]
 800ddb6:	1d19      	adds	r1, r3, #4
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	9103      	str	r1, [sp, #12]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	bfbb      	ittet	lt
 800ddc0:	425b      	neglt	r3, r3
 800ddc2:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc6:	9307      	strge	r3, [sp, #28]
 800ddc8:	9307      	strlt	r3, [sp, #28]
 800ddca:	bfb8      	it	lt
 800ddcc:	9204      	strlt	r2, [sp, #16]
 800ddce:	7823      	ldrb	r3, [r4, #0]
 800ddd0:	2b2e      	cmp	r3, #46	; 0x2e
 800ddd2:	d10c      	bne.n	800ddee <_vfiprintf_r+0x176>
 800ddd4:	7863      	ldrb	r3, [r4, #1]
 800ddd6:	2b2a      	cmp	r3, #42	; 0x2a
 800ddd8:	d135      	bne.n	800de46 <_vfiprintf_r+0x1ce>
 800ddda:	9b03      	ldr	r3, [sp, #12]
 800dddc:	1d1a      	adds	r2, r3, #4
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	9203      	str	r2, [sp, #12]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	bfb8      	it	lt
 800dde6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddea:	3402      	adds	r4, #2
 800ddec:	9305      	str	r3, [sp, #20]
 800ddee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ded4 <_vfiprintf_r+0x25c>
 800ddf2:	7821      	ldrb	r1, [r4, #0]
 800ddf4:	2203      	movs	r2, #3
 800ddf6:	4650      	mov	r0, sl
 800ddf8:	f7f2 f9fa 	bl	80001f0 <memchr>
 800ddfc:	b140      	cbz	r0, 800de10 <_vfiprintf_r+0x198>
 800ddfe:	2340      	movs	r3, #64	; 0x40
 800de00:	eba0 000a 	sub.w	r0, r0, sl
 800de04:	fa03 f000 	lsl.w	r0, r3, r0
 800de08:	9b04      	ldr	r3, [sp, #16]
 800de0a:	4303      	orrs	r3, r0
 800de0c:	3401      	adds	r4, #1
 800de0e:	9304      	str	r3, [sp, #16]
 800de10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de14:	482c      	ldr	r0, [pc, #176]	; (800dec8 <_vfiprintf_r+0x250>)
 800de16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de1a:	2206      	movs	r2, #6
 800de1c:	f7f2 f9e8 	bl	80001f0 <memchr>
 800de20:	2800      	cmp	r0, #0
 800de22:	d03f      	beq.n	800dea4 <_vfiprintf_r+0x22c>
 800de24:	4b29      	ldr	r3, [pc, #164]	; (800decc <_vfiprintf_r+0x254>)
 800de26:	bb1b      	cbnz	r3, 800de70 <_vfiprintf_r+0x1f8>
 800de28:	9b03      	ldr	r3, [sp, #12]
 800de2a:	3307      	adds	r3, #7
 800de2c:	f023 0307 	bic.w	r3, r3, #7
 800de30:	3308      	adds	r3, #8
 800de32:	9303      	str	r3, [sp, #12]
 800de34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de36:	443b      	add	r3, r7
 800de38:	9309      	str	r3, [sp, #36]	; 0x24
 800de3a:	e767      	b.n	800dd0c <_vfiprintf_r+0x94>
 800de3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800de40:	460c      	mov	r4, r1
 800de42:	2001      	movs	r0, #1
 800de44:	e7a5      	b.n	800dd92 <_vfiprintf_r+0x11a>
 800de46:	2300      	movs	r3, #0
 800de48:	3401      	adds	r4, #1
 800de4a:	9305      	str	r3, [sp, #20]
 800de4c:	4619      	mov	r1, r3
 800de4e:	f04f 0c0a 	mov.w	ip, #10
 800de52:	4620      	mov	r0, r4
 800de54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de58:	3a30      	subs	r2, #48	; 0x30
 800de5a:	2a09      	cmp	r2, #9
 800de5c:	d903      	bls.n	800de66 <_vfiprintf_r+0x1ee>
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d0c5      	beq.n	800ddee <_vfiprintf_r+0x176>
 800de62:	9105      	str	r1, [sp, #20]
 800de64:	e7c3      	b.n	800ddee <_vfiprintf_r+0x176>
 800de66:	fb0c 2101 	mla	r1, ip, r1, r2
 800de6a:	4604      	mov	r4, r0
 800de6c:	2301      	movs	r3, #1
 800de6e:	e7f0      	b.n	800de52 <_vfiprintf_r+0x1da>
 800de70:	ab03      	add	r3, sp, #12
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	462a      	mov	r2, r5
 800de76:	4b16      	ldr	r3, [pc, #88]	; (800ded0 <_vfiprintf_r+0x258>)
 800de78:	a904      	add	r1, sp, #16
 800de7a:	4630      	mov	r0, r6
 800de7c:	f7fd fbd2 	bl	800b624 <_printf_float>
 800de80:	4607      	mov	r7, r0
 800de82:	1c78      	adds	r0, r7, #1
 800de84:	d1d6      	bne.n	800de34 <_vfiprintf_r+0x1bc>
 800de86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de88:	07d9      	lsls	r1, r3, #31
 800de8a:	d405      	bmi.n	800de98 <_vfiprintf_r+0x220>
 800de8c:	89ab      	ldrh	r3, [r5, #12]
 800de8e:	059a      	lsls	r2, r3, #22
 800de90:	d402      	bmi.n	800de98 <_vfiprintf_r+0x220>
 800de92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de94:	f7ff f950 	bl	800d138 <__retarget_lock_release_recursive>
 800de98:	89ab      	ldrh	r3, [r5, #12]
 800de9a:	065b      	lsls	r3, r3, #25
 800de9c:	f53f af12 	bmi.w	800dcc4 <_vfiprintf_r+0x4c>
 800dea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dea2:	e711      	b.n	800dcc8 <_vfiprintf_r+0x50>
 800dea4:	ab03      	add	r3, sp, #12
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	462a      	mov	r2, r5
 800deaa:	4b09      	ldr	r3, [pc, #36]	; (800ded0 <_vfiprintf_r+0x258>)
 800deac:	a904      	add	r1, sp, #16
 800deae:	4630      	mov	r0, r6
 800deb0:	f7fd fe5c 	bl	800bb6c <_printf_i>
 800deb4:	e7e4      	b.n	800de80 <_vfiprintf_r+0x208>
 800deb6:	bf00      	nop
 800deb8:	0800eaac 	.word	0x0800eaac
 800debc:	0800eacc 	.word	0x0800eacc
 800dec0:	0800ea8c 	.word	0x0800ea8c
 800dec4:	0800ec44 	.word	0x0800ec44
 800dec8:	0800ec4e 	.word	0x0800ec4e
 800decc:	0800b625 	.word	0x0800b625
 800ded0:	0800dc53 	.word	0x0800dc53
 800ded4:	0800ec4a 	.word	0x0800ec4a

0800ded8 <__sread>:
 800ded8:	b510      	push	{r4, lr}
 800deda:	460c      	mov	r4, r1
 800dedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dee0:	f000 f920 	bl	800e124 <_read_r>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	bfab      	itete	ge
 800dee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800deea:	89a3      	ldrhlt	r3, [r4, #12]
 800deec:	181b      	addge	r3, r3, r0
 800deee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800def2:	bfac      	ite	ge
 800def4:	6563      	strge	r3, [r4, #84]	; 0x54
 800def6:	81a3      	strhlt	r3, [r4, #12]
 800def8:	bd10      	pop	{r4, pc}

0800defa <__swrite>:
 800defa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800defe:	461f      	mov	r7, r3
 800df00:	898b      	ldrh	r3, [r1, #12]
 800df02:	05db      	lsls	r3, r3, #23
 800df04:	4605      	mov	r5, r0
 800df06:	460c      	mov	r4, r1
 800df08:	4616      	mov	r6, r2
 800df0a:	d505      	bpl.n	800df18 <__swrite+0x1e>
 800df0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df10:	2302      	movs	r3, #2
 800df12:	2200      	movs	r2, #0
 800df14:	f000 f898 	bl	800e048 <_lseek_r>
 800df18:	89a3      	ldrh	r3, [r4, #12]
 800df1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df22:	81a3      	strh	r3, [r4, #12]
 800df24:	4632      	mov	r2, r6
 800df26:	463b      	mov	r3, r7
 800df28:	4628      	mov	r0, r5
 800df2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df2e:	f000 b817 	b.w	800df60 <_write_r>

0800df32 <__sseek>:
 800df32:	b510      	push	{r4, lr}
 800df34:	460c      	mov	r4, r1
 800df36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df3a:	f000 f885 	bl	800e048 <_lseek_r>
 800df3e:	1c43      	adds	r3, r0, #1
 800df40:	89a3      	ldrh	r3, [r4, #12]
 800df42:	bf15      	itete	ne
 800df44:	6560      	strne	r0, [r4, #84]	; 0x54
 800df46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df4e:	81a3      	strheq	r3, [r4, #12]
 800df50:	bf18      	it	ne
 800df52:	81a3      	strhne	r3, [r4, #12]
 800df54:	bd10      	pop	{r4, pc}

0800df56 <__sclose>:
 800df56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df5a:	f000 b831 	b.w	800dfc0 <_close_r>
	...

0800df60 <_write_r>:
 800df60:	b538      	push	{r3, r4, r5, lr}
 800df62:	4d07      	ldr	r5, [pc, #28]	; (800df80 <_write_r+0x20>)
 800df64:	4604      	mov	r4, r0
 800df66:	4608      	mov	r0, r1
 800df68:	4611      	mov	r1, r2
 800df6a:	2200      	movs	r2, #0
 800df6c:	602a      	str	r2, [r5, #0]
 800df6e:	461a      	mov	r2, r3
 800df70:	f7f4 fe0d 	bl	8002b8e <_write>
 800df74:	1c43      	adds	r3, r0, #1
 800df76:	d102      	bne.n	800df7e <_write_r+0x1e>
 800df78:	682b      	ldr	r3, [r5, #0]
 800df7a:	b103      	cbz	r3, 800df7e <_write_r+0x1e>
 800df7c:	6023      	str	r3, [r4, #0]
 800df7e:	bd38      	pop	{r3, r4, r5, pc}
 800df80:	20002a68 	.word	0x20002a68

0800df84 <__assert_func>:
 800df84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df86:	4614      	mov	r4, r2
 800df88:	461a      	mov	r2, r3
 800df8a:	4b09      	ldr	r3, [pc, #36]	; (800dfb0 <__assert_func+0x2c>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4605      	mov	r5, r0
 800df90:	68d8      	ldr	r0, [r3, #12]
 800df92:	b14c      	cbz	r4, 800dfa8 <__assert_func+0x24>
 800df94:	4b07      	ldr	r3, [pc, #28]	; (800dfb4 <__assert_func+0x30>)
 800df96:	9100      	str	r1, [sp, #0]
 800df98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df9c:	4906      	ldr	r1, [pc, #24]	; (800dfb8 <__assert_func+0x34>)
 800df9e:	462b      	mov	r3, r5
 800dfa0:	f000 f81e 	bl	800dfe0 <fiprintf>
 800dfa4:	f000 f8dd 	bl	800e162 <abort>
 800dfa8:	4b04      	ldr	r3, [pc, #16]	; (800dfbc <__assert_func+0x38>)
 800dfaa:	461c      	mov	r4, r3
 800dfac:	e7f3      	b.n	800df96 <__assert_func+0x12>
 800dfae:	bf00      	nop
 800dfb0:	20000028 	.word	0x20000028
 800dfb4:	0800ec55 	.word	0x0800ec55
 800dfb8:	0800ec62 	.word	0x0800ec62
 800dfbc:	0800ec90 	.word	0x0800ec90

0800dfc0 <_close_r>:
 800dfc0:	b538      	push	{r3, r4, r5, lr}
 800dfc2:	4d06      	ldr	r5, [pc, #24]	; (800dfdc <_close_r+0x1c>)
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	4608      	mov	r0, r1
 800dfca:	602b      	str	r3, [r5, #0]
 800dfcc:	f7f4 fdfb 	bl	8002bc6 <_close>
 800dfd0:	1c43      	adds	r3, r0, #1
 800dfd2:	d102      	bne.n	800dfda <_close_r+0x1a>
 800dfd4:	682b      	ldr	r3, [r5, #0]
 800dfd6:	b103      	cbz	r3, 800dfda <_close_r+0x1a>
 800dfd8:	6023      	str	r3, [r4, #0]
 800dfda:	bd38      	pop	{r3, r4, r5, pc}
 800dfdc:	20002a68 	.word	0x20002a68

0800dfe0 <fiprintf>:
 800dfe0:	b40e      	push	{r1, r2, r3}
 800dfe2:	b503      	push	{r0, r1, lr}
 800dfe4:	4601      	mov	r1, r0
 800dfe6:	ab03      	add	r3, sp, #12
 800dfe8:	4805      	ldr	r0, [pc, #20]	; (800e000 <fiprintf+0x20>)
 800dfea:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfee:	6800      	ldr	r0, [r0, #0]
 800dff0:	9301      	str	r3, [sp, #4]
 800dff2:	f7ff fe41 	bl	800dc78 <_vfiprintf_r>
 800dff6:	b002      	add	sp, #8
 800dff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dffc:	b003      	add	sp, #12
 800dffe:	4770      	bx	lr
 800e000:	20000028 	.word	0x20000028

0800e004 <_fstat_r>:
 800e004:	b538      	push	{r3, r4, r5, lr}
 800e006:	4d07      	ldr	r5, [pc, #28]	; (800e024 <_fstat_r+0x20>)
 800e008:	2300      	movs	r3, #0
 800e00a:	4604      	mov	r4, r0
 800e00c:	4608      	mov	r0, r1
 800e00e:	4611      	mov	r1, r2
 800e010:	602b      	str	r3, [r5, #0]
 800e012:	f7f4 fde4 	bl	8002bde <_fstat>
 800e016:	1c43      	adds	r3, r0, #1
 800e018:	d102      	bne.n	800e020 <_fstat_r+0x1c>
 800e01a:	682b      	ldr	r3, [r5, #0]
 800e01c:	b103      	cbz	r3, 800e020 <_fstat_r+0x1c>
 800e01e:	6023      	str	r3, [r4, #0]
 800e020:	bd38      	pop	{r3, r4, r5, pc}
 800e022:	bf00      	nop
 800e024:	20002a68 	.word	0x20002a68

0800e028 <_isatty_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	4d06      	ldr	r5, [pc, #24]	; (800e044 <_isatty_r+0x1c>)
 800e02c:	2300      	movs	r3, #0
 800e02e:	4604      	mov	r4, r0
 800e030:	4608      	mov	r0, r1
 800e032:	602b      	str	r3, [r5, #0]
 800e034:	f7f4 fde3 	bl	8002bfe <_isatty>
 800e038:	1c43      	adds	r3, r0, #1
 800e03a:	d102      	bne.n	800e042 <_isatty_r+0x1a>
 800e03c:	682b      	ldr	r3, [r5, #0]
 800e03e:	b103      	cbz	r3, 800e042 <_isatty_r+0x1a>
 800e040:	6023      	str	r3, [r4, #0]
 800e042:	bd38      	pop	{r3, r4, r5, pc}
 800e044:	20002a68 	.word	0x20002a68

0800e048 <_lseek_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	4d07      	ldr	r5, [pc, #28]	; (800e068 <_lseek_r+0x20>)
 800e04c:	4604      	mov	r4, r0
 800e04e:	4608      	mov	r0, r1
 800e050:	4611      	mov	r1, r2
 800e052:	2200      	movs	r2, #0
 800e054:	602a      	str	r2, [r5, #0]
 800e056:	461a      	mov	r2, r3
 800e058:	f7f4 fddc 	bl	8002c14 <_lseek>
 800e05c:	1c43      	adds	r3, r0, #1
 800e05e:	d102      	bne.n	800e066 <_lseek_r+0x1e>
 800e060:	682b      	ldr	r3, [r5, #0]
 800e062:	b103      	cbz	r3, 800e066 <_lseek_r+0x1e>
 800e064:	6023      	str	r3, [r4, #0]
 800e066:	bd38      	pop	{r3, r4, r5, pc}
 800e068:	20002a68 	.word	0x20002a68

0800e06c <__ascii_mbtowc>:
 800e06c:	b082      	sub	sp, #8
 800e06e:	b901      	cbnz	r1, 800e072 <__ascii_mbtowc+0x6>
 800e070:	a901      	add	r1, sp, #4
 800e072:	b142      	cbz	r2, 800e086 <__ascii_mbtowc+0x1a>
 800e074:	b14b      	cbz	r3, 800e08a <__ascii_mbtowc+0x1e>
 800e076:	7813      	ldrb	r3, [r2, #0]
 800e078:	600b      	str	r3, [r1, #0]
 800e07a:	7812      	ldrb	r2, [r2, #0]
 800e07c:	1e10      	subs	r0, r2, #0
 800e07e:	bf18      	it	ne
 800e080:	2001      	movne	r0, #1
 800e082:	b002      	add	sp, #8
 800e084:	4770      	bx	lr
 800e086:	4610      	mov	r0, r2
 800e088:	e7fb      	b.n	800e082 <__ascii_mbtowc+0x16>
 800e08a:	f06f 0001 	mvn.w	r0, #1
 800e08e:	e7f8      	b.n	800e082 <__ascii_mbtowc+0x16>

0800e090 <memmove>:
 800e090:	4288      	cmp	r0, r1
 800e092:	b510      	push	{r4, lr}
 800e094:	eb01 0402 	add.w	r4, r1, r2
 800e098:	d902      	bls.n	800e0a0 <memmove+0x10>
 800e09a:	4284      	cmp	r4, r0
 800e09c:	4623      	mov	r3, r4
 800e09e:	d807      	bhi.n	800e0b0 <memmove+0x20>
 800e0a0:	1e43      	subs	r3, r0, #1
 800e0a2:	42a1      	cmp	r1, r4
 800e0a4:	d008      	beq.n	800e0b8 <memmove+0x28>
 800e0a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0ae:	e7f8      	b.n	800e0a2 <memmove+0x12>
 800e0b0:	4402      	add	r2, r0
 800e0b2:	4601      	mov	r1, r0
 800e0b4:	428a      	cmp	r2, r1
 800e0b6:	d100      	bne.n	800e0ba <memmove+0x2a>
 800e0b8:	bd10      	pop	{r4, pc}
 800e0ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0c2:	e7f7      	b.n	800e0b4 <memmove+0x24>

0800e0c4 <_realloc_r>:
 800e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c8:	4680      	mov	r8, r0
 800e0ca:	4614      	mov	r4, r2
 800e0cc:	460e      	mov	r6, r1
 800e0ce:	b921      	cbnz	r1, 800e0da <_realloc_r+0x16>
 800e0d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d4:	4611      	mov	r1, r2
 800e0d6:	f7fd b991 	b.w	800b3fc <_malloc_r>
 800e0da:	b92a      	cbnz	r2, 800e0e8 <_realloc_r+0x24>
 800e0dc:	f7fd f922 	bl	800b324 <_free_r>
 800e0e0:	4625      	mov	r5, r4
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e8:	f000 f842 	bl	800e170 <_malloc_usable_size_r>
 800e0ec:	4284      	cmp	r4, r0
 800e0ee:	4607      	mov	r7, r0
 800e0f0:	d802      	bhi.n	800e0f8 <_realloc_r+0x34>
 800e0f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0f6:	d812      	bhi.n	800e11e <_realloc_r+0x5a>
 800e0f8:	4621      	mov	r1, r4
 800e0fa:	4640      	mov	r0, r8
 800e0fc:	f7fd f97e 	bl	800b3fc <_malloc_r>
 800e100:	4605      	mov	r5, r0
 800e102:	2800      	cmp	r0, #0
 800e104:	d0ed      	beq.n	800e0e2 <_realloc_r+0x1e>
 800e106:	42bc      	cmp	r4, r7
 800e108:	4622      	mov	r2, r4
 800e10a:	4631      	mov	r1, r6
 800e10c:	bf28      	it	cs
 800e10e:	463a      	movcs	r2, r7
 800e110:	f7ff f878 	bl	800d204 <memcpy>
 800e114:	4631      	mov	r1, r6
 800e116:	4640      	mov	r0, r8
 800e118:	f7fd f904 	bl	800b324 <_free_r>
 800e11c:	e7e1      	b.n	800e0e2 <_realloc_r+0x1e>
 800e11e:	4635      	mov	r5, r6
 800e120:	e7df      	b.n	800e0e2 <_realloc_r+0x1e>
	...

0800e124 <_read_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4d07      	ldr	r5, [pc, #28]	; (800e144 <_read_r+0x20>)
 800e128:	4604      	mov	r4, r0
 800e12a:	4608      	mov	r0, r1
 800e12c:	4611      	mov	r1, r2
 800e12e:	2200      	movs	r2, #0
 800e130:	602a      	str	r2, [r5, #0]
 800e132:	461a      	mov	r2, r3
 800e134:	f7f4 fd0e 	bl	8002b54 <_read>
 800e138:	1c43      	adds	r3, r0, #1
 800e13a:	d102      	bne.n	800e142 <_read_r+0x1e>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	b103      	cbz	r3, 800e142 <_read_r+0x1e>
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	bd38      	pop	{r3, r4, r5, pc}
 800e144:	20002a68 	.word	0x20002a68

0800e148 <__ascii_wctomb>:
 800e148:	b149      	cbz	r1, 800e15e <__ascii_wctomb+0x16>
 800e14a:	2aff      	cmp	r2, #255	; 0xff
 800e14c:	bf85      	ittet	hi
 800e14e:	238a      	movhi	r3, #138	; 0x8a
 800e150:	6003      	strhi	r3, [r0, #0]
 800e152:	700a      	strbls	r2, [r1, #0]
 800e154:	f04f 30ff 	movhi.w	r0, #4294967295
 800e158:	bf98      	it	ls
 800e15a:	2001      	movls	r0, #1
 800e15c:	4770      	bx	lr
 800e15e:	4608      	mov	r0, r1
 800e160:	4770      	bx	lr

0800e162 <abort>:
 800e162:	b508      	push	{r3, lr}
 800e164:	2006      	movs	r0, #6
 800e166:	f000 f833 	bl	800e1d0 <raise>
 800e16a:	2001      	movs	r0, #1
 800e16c:	f7f4 fce8 	bl	8002b40 <_exit>

0800e170 <_malloc_usable_size_r>:
 800e170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e174:	1f18      	subs	r0, r3, #4
 800e176:	2b00      	cmp	r3, #0
 800e178:	bfbc      	itt	lt
 800e17a:	580b      	ldrlt	r3, [r1, r0]
 800e17c:	18c0      	addlt	r0, r0, r3
 800e17e:	4770      	bx	lr

0800e180 <_raise_r>:
 800e180:	291f      	cmp	r1, #31
 800e182:	b538      	push	{r3, r4, r5, lr}
 800e184:	4604      	mov	r4, r0
 800e186:	460d      	mov	r5, r1
 800e188:	d904      	bls.n	800e194 <_raise_r+0x14>
 800e18a:	2316      	movs	r3, #22
 800e18c:	6003      	str	r3, [r0, #0]
 800e18e:	f04f 30ff 	mov.w	r0, #4294967295
 800e192:	bd38      	pop	{r3, r4, r5, pc}
 800e194:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e196:	b112      	cbz	r2, 800e19e <_raise_r+0x1e>
 800e198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e19c:	b94b      	cbnz	r3, 800e1b2 <_raise_r+0x32>
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f000 f830 	bl	800e204 <_getpid_r>
 800e1a4:	462a      	mov	r2, r5
 800e1a6:	4601      	mov	r1, r0
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1ae:	f000 b817 	b.w	800e1e0 <_kill_r>
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d00a      	beq.n	800e1cc <_raise_r+0x4c>
 800e1b6:	1c59      	adds	r1, r3, #1
 800e1b8:	d103      	bne.n	800e1c2 <_raise_r+0x42>
 800e1ba:	2316      	movs	r3, #22
 800e1bc:	6003      	str	r3, [r0, #0]
 800e1be:	2001      	movs	r0, #1
 800e1c0:	e7e7      	b.n	800e192 <_raise_r+0x12>
 800e1c2:	2400      	movs	r4, #0
 800e1c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	4798      	blx	r3
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	e7e0      	b.n	800e192 <_raise_r+0x12>

0800e1d0 <raise>:
 800e1d0:	4b02      	ldr	r3, [pc, #8]	; (800e1dc <raise+0xc>)
 800e1d2:	4601      	mov	r1, r0
 800e1d4:	6818      	ldr	r0, [r3, #0]
 800e1d6:	f7ff bfd3 	b.w	800e180 <_raise_r>
 800e1da:	bf00      	nop
 800e1dc:	20000028 	.word	0x20000028

0800e1e0 <_kill_r>:
 800e1e0:	b538      	push	{r3, r4, r5, lr}
 800e1e2:	4d07      	ldr	r5, [pc, #28]	; (800e200 <_kill_r+0x20>)
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	4608      	mov	r0, r1
 800e1ea:	4611      	mov	r1, r2
 800e1ec:	602b      	str	r3, [r5, #0]
 800e1ee:	f7f4 fc97 	bl	8002b20 <_kill>
 800e1f2:	1c43      	adds	r3, r0, #1
 800e1f4:	d102      	bne.n	800e1fc <_kill_r+0x1c>
 800e1f6:	682b      	ldr	r3, [r5, #0]
 800e1f8:	b103      	cbz	r3, 800e1fc <_kill_r+0x1c>
 800e1fa:	6023      	str	r3, [r4, #0]
 800e1fc:	bd38      	pop	{r3, r4, r5, pc}
 800e1fe:	bf00      	nop
 800e200:	20002a68 	.word	0x20002a68

0800e204 <_getpid_r>:
 800e204:	f7f4 bc84 	b.w	8002b10 <_getpid>

0800e208 <_init>:
 800e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20a:	bf00      	nop
 800e20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20e:	bc08      	pop	{r3}
 800e210:	469e      	mov	lr, r3
 800e212:	4770      	bx	lr

0800e214 <_fini>:
 800e214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e216:	bf00      	nop
 800e218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e21a:	bc08      	pop	{r3}
 800e21c:	469e      	mov	lr, r3
 800e21e:	4770      	bx	lr
