
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08009648  08009648  00019648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aec  08009aec  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009af4  08009af4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200001f4  08009cf0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08009cf0  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016603  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030af  00000000  00000000  00036827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  000398d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  0003ad30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a963  00000000  00000000  0003c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194fe  00000000  00000000  000569bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb90  00000000  00000000  0006feb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fa49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006688  00000000  00000000  0010fa9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800962c 	.word	0x0800962c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800962c 	.word	0x0800962c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <SELECT+0x18>)
 8000ec6:	f002 fe3f 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f001 fcfa 	bl	80028c4 <HAL_Delay>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2102      	movs	r1, #2
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <DESELECT+0x18>)
 8000ee2:	f002 fe31 	bl	8003b48 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f001 fcec 	bl	80028c4 <HAL_Delay>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020800 	.word	0x40020800

08000ef4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000efe:	bf00      	nop
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <SPI_TxByte+0x30>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d1f8      	bne.n	8000f00 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f0e:	1df9      	adds	r1, r7, #7
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	2201      	movs	r2, #1
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <SPI_TxByte+0x30>)
 8000f16:	f003 fc96 	bl	8004846 <HAL_SPI_Transmit>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200002b8 	.word	0x200002b8

08000f28 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f34:	bf00      	nop
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SPI_TxBuffer+0x30>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d1f8      	bne.n	8000f36 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f44:	887a      	ldrh	r2, [r7, #2]
 8000f46:	2364      	movs	r3, #100	; 0x64
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <SPI_TxBuffer+0x30>)
 8000f4c:	f003 fc7b 	bl	8004846 <HAL_SPI_Transmit>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200002b8 	.word	0x200002b8

08000f5c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f62:	23ff      	movs	r3, #255	; 0xff
 8000f64:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f66:	bf00      	nop
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <SPI_RxByte+0x34>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d1f8      	bne.n	8000f68 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f76:	1dba      	adds	r2, r7, #6
 8000f78:	1df9      	adds	r1, r7, #7
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <SPI_RxByte+0x34>)
 8000f82:	f003 fd9c 	bl	8004abe <HAL_SPI_TransmitReceive>

	return data;
 8000f86:	79bb      	ldrb	r3, [r7, #6]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200002b8 	.word	0x200002b8

08000f94 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000f9c:	f7ff ffde 	bl	8000f5c <SPI_RxByte>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	701a      	strb	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <SD_ReadyWait+0x30>)
 8000fb8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fbc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000fbe:	f7ff ffcd 	bl	8000f5c <SPI_RxByte>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2bff      	cmp	r3, #255	; 0xff
 8000fca:	d003      	beq.n	8000fd4 <SD_ReadyWait+0x24>
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SD_ReadyWait+0x30>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f4      	bne.n	8000fbe <SD_ReadyWait+0xe>

	return res;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000212 	.word	0x20000212

08000fe4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000fea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000fee:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000ff0:	f7ff ff72 	bl	8000ed8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	e005      	b.n	8001006 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ffa:	20ff      	movs	r0, #255	; 0xff
 8000ffc:	f7ff ff7a 	bl	8000ef4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	3301      	adds	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b09      	cmp	r3, #9
 800100a:	ddf6      	ble.n	8000ffa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800100c:	f7ff ff56 	bl	8000ebc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001010:	2340      	movs	r3, #64	; 0x40
 8001012:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001024:	2395      	movs	r3, #149	; 0x95
 8001026:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001028:	463b      	mov	r3, r7
 800102a:	2106      	movs	r1, #6
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff7b 	bl	8000f28 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001032:	e002      	b.n	800103a <SD_PowerOn+0x56>
	{
		cnt--;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3b01      	subs	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800103a:	f7ff ff8f 	bl	8000f5c <SPI_RxByte>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	d002      	beq.n	800104a <SD_PowerOn+0x66>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f4      	bne.n	8001034 <SD_PowerOn+0x50>
	}

	DESELECT();
 800104a:	f7ff ff45 	bl	8000ed8 <DESELECT>
	SPI_TxByte(0XFF);
 800104e:	20ff      	movs	r0, #255	; 0xff
 8001050:	f7ff ff50 	bl	8000ef4 <SPI_TxByte>

	PowerFlag = 1;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <SD_PowerOn+0x80>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000215 	.word	0x20000215

08001068 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <SD_PowerOff+0x14>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000215 	.word	0x20000215

08001080 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <SD_CheckPower+0x14>)
 8001086:	781b      	ldrb	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000215 	.word	0x20000215

08001098 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <SD_RxDataBlock+0x58>)
 80010a4:	22c8      	movs	r2, #200	; 0xc8
 80010a6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80010a8:	f7ff ff58 	bl	8000f5c <SPI_RxByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2bff      	cmp	r3, #255	; 0xff
 80010b4:	d103      	bne.n	80010be <SD_RxDataBlock+0x26>
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <SD_RxDataBlock+0x58>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f4      	bne.n	80010a8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	2bfe      	cmp	r3, #254	; 0xfe
 80010c2:	d001      	beq.n	80010c8 <SD_RxDataBlock+0x30>
 80010c4:	2300      	movs	r3, #0
 80010c6:	e00f      	b.n	80010e8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff60 	bl	8000f94 <SPI_RxBytePtr>
	} while(len--);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	1e5a      	subs	r2, r3, #1
 80010d8:	603a      	str	r2, [r7, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f4      	bne.n	80010c8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80010de:	f7ff ff3d 	bl	8000f5c <SPI_RxByte>
	SPI_RxByte();
 80010e2:	f7ff ff3b 	bl	8000f5c <SPI_RxByte>

	return TRUE;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000210 	.word	0x20000210

080010f4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001104:	f7ff ff54 	bl	8000fb0 <SD_ReadyWait>
 8001108:	4603      	mov	r3, r0
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d001      	beq.n	8001112 <SD_TxDataBlock+0x1e>
 800110e:	2300      	movs	r3, #0
 8001110:	e02f      	b.n	8001172 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff feed 	bl	8000ef4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2bfd      	cmp	r3, #253	; 0xfd
 800111e:	d020      	beq.n	8001162 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff feff 	bl	8000f28 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800112a:	f7ff ff17 	bl	8000f5c <SPI_RxByte>
		SPI_RxByte();
 800112e:	f7ff ff15 	bl	8000f5c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001132:	e00b      	b.n	800114c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001134:	f7ff ff12 	bl	8000f5c <SPI_RxByte>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	2b05      	cmp	r3, #5
 8001144:	d006      	beq.n	8001154 <SD_TxDataBlock+0x60>
			i++;
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	3301      	adds	r3, #1
 800114a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	2b40      	cmp	r3, #64	; 0x40
 8001150:	d9f0      	bls.n	8001134 <SD_TxDataBlock+0x40>
 8001152:	e000      	b.n	8001156 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001154:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001156:	bf00      	nop
 8001158:	f7ff ff00 	bl	8000f5c <SPI_RxByte>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0fa      	beq.n	8001158 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	2b05      	cmp	r3, #5
 800116a:	d101      	bne.n	8001170 <SD_TxDataBlock+0x7c>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	6039      	str	r1, [r7, #0]
 8001184:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001186:	f7ff ff13 	bl	8000fb0 <SD_ReadyWait>
 800118a:	4603      	mov	r3, r0
 800118c:	2bff      	cmp	r3, #255	; 0xff
 800118e:	d001      	beq.n	8001194 <SD_SendCmd+0x1a>
 8001190:	23ff      	movs	r3, #255	; 0xff
 8001192:	e042      	b.n	800121a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff feac 	bl	8000ef4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	0e1b      	lsrs	r3, r3, #24
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fea6 	bl	8000ef4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	0c1b      	lsrs	r3, r3, #16
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fea0 	bl	8000ef4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fe9a 	bl	8000ef4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fe95 	bl	8000ef4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b40      	cmp	r3, #64	; 0x40
 80011ce:	d102      	bne.n	80011d6 <SD_SendCmd+0x5c>
 80011d0:	2395      	movs	r3, #149	; 0x95
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e007      	b.n	80011e6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b48      	cmp	r3, #72	; 0x48
 80011da:	d102      	bne.n	80011e2 <SD_SendCmd+0x68>
 80011dc:	2387      	movs	r3, #135	; 0x87
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e001      	b.n	80011e6 <SD_SendCmd+0x6c>
	else crc = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fe83 	bl	8000ef4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b4c      	cmp	r3, #76	; 0x4c
 80011f2:	d101      	bne.n	80011f8 <SD_SendCmd+0x7e>
 80011f4:	f7ff feb2 	bl	8000f5c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80011f8:	230a      	movs	r3, #10
 80011fa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80011fc:	f7ff feae 	bl	8000f5c <SPI_RxByte>
 8001200:	4603      	mov	r3, r0
 8001202:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001204:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001208:	2b00      	cmp	r3, #0
 800120a:	da05      	bge.n	8001218 <SD_SendCmd+0x9e>
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	3b01      	subs	r3, #1
 8001210:	73bb      	strb	r3, [r7, #14]
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f1      	bne.n	80011fc <SD_SendCmd+0x82>

	return res;
 8001218:	7b7b      	ldrb	r3, [r7, #13]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SD_disk_initialize+0x14>
 8001234:	2301      	movs	r3, #1
 8001236:	e0d1      	b.n	80013dc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001238:	4b6a      	ldr	r3, [pc, #424]	; (80013e4 <SD_disk_initialize+0x1c0>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <SD_disk_initialize+0x2a>
 8001246:	4b67      	ldr	r3, [pc, #412]	; (80013e4 <SD_disk_initialize+0x1c0>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	e0c6      	b.n	80013dc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800124e:	f7ff fec9 	bl	8000fe4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001252:	f7ff fe33 	bl	8000ebc <SELECT>

	/* check disk type */
	type = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800125a:	2100      	movs	r1, #0
 800125c:	2040      	movs	r0, #64	; 0x40
 800125e:	f7ff ff8c 	bl	800117a <SD_SendCmd>
 8001262:	4603      	mov	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	f040 80a1 	bne.w	80013ac <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800126a:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <SD_disk_initialize+0x1c4>)
 800126c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001270:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001272:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001276:	2048      	movs	r0, #72	; 0x48
 8001278:	f7ff ff7f 	bl	800117a <SD_SendCmd>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d155      	bne.n	800132e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e00c      	b.n	80012a2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001288:	7bfc      	ldrb	r4, [r7, #15]
 800128a:	f7ff fe67 	bl	8000f5c <SPI_RxByte>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	f104 0310 	add.w	r3, r4, #16
 8001296:	443b      	add	r3, r7
 8001298:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	3301      	adds	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d9ef      	bls.n	8001288 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012a8:	7abb      	ldrb	r3, [r7, #10]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d17e      	bne.n	80013ac <SD_disk_initialize+0x188>
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	2baa      	cmp	r3, #170	; 0xaa
 80012b2:	d17b      	bne.n	80013ac <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012b4:	2100      	movs	r1, #0
 80012b6:	2077      	movs	r0, #119	; 0x77
 80012b8:	f7ff ff5f 	bl	800117a <SD_SendCmd>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d807      	bhi.n	80012d2 <SD_disk_initialize+0xae>
 80012c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012c6:	2069      	movs	r0, #105	; 0x69
 80012c8:	f7ff ff57 	bl	800117a <SD_SendCmd>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <SD_disk_initialize+0x1c4>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ec      	bne.n	80012b4 <SD_disk_initialize+0x90>
 80012da:	e000      	b.n	80012de <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012dc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <SD_disk_initialize+0x1c4>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d062      	beq.n	80013ac <SD_disk_initialize+0x188>
 80012e6:	2100      	movs	r1, #0
 80012e8:	207a      	movs	r0, #122	; 0x7a
 80012ea:	f7ff ff46 	bl	800117a <SD_SendCmd>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d15b      	bne.n	80013ac <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e00c      	b.n	8001314 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80012fa:	7bfc      	ldrb	r4, [r7, #15]
 80012fc:	f7ff fe2e 	bl	8000f5c <SPI_RxByte>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	f104 0310 	add.w	r3, r4, #16
 8001308:	443b      	add	r3, r7
 800130a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	3301      	adds	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d9ef      	bls.n	80012fa <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800131a:	7a3b      	ldrb	r3, [r7, #8]
 800131c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SD_disk_initialize+0x104>
 8001324:	230c      	movs	r3, #12
 8001326:	e000      	b.n	800132a <SD_disk_initialize+0x106>
 8001328:	2304      	movs	r3, #4
 800132a:	73bb      	strb	r3, [r7, #14]
 800132c:	e03e      	b.n	80013ac <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800132e:	2100      	movs	r1, #0
 8001330:	2077      	movs	r0, #119	; 0x77
 8001332:	f7ff ff22 	bl	800117a <SD_SendCmd>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	d808      	bhi.n	800134e <SD_disk_initialize+0x12a>
 800133c:	2100      	movs	r1, #0
 800133e:	2069      	movs	r0, #105	; 0x69
 8001340:	f7ff ff1b 	bl	800117a <SD_SendCmd>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d801      	bhi.n	800134e <SD_disk_initialize+0x12a>
 800134a:	2302      	movs	r3, #2
 800134c:	e000      	b.n	8001350 <SD_disk_initialize+0x12c>
 800134e:	2301      	movs	r3, #1
 8001350:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d10e      	bne.n	8001376 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001358:	2100      	movs	r1, #0
 800135a:	2077      	movs	r0, #119	; 0x77
 800135c:	f7ff ff0d 	bl	800117a <SD_SendCmd>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d80e      	bhi.n	8001384 <SD_disk_initialize+0x160>
 8001366:	2100      	movs	r1, #0
 8001368:	2069      	movs	r0, #105	; 0x69
 800136a:	f7ff ff06 	bl	800117a <SD_SendCmd>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d107      	bne.n	8001384 <SD_disk_initialize+0x160>
 8001374:	e00c      	b.n	8001390 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001376:	2100      	movs	r1, #0
 8001378:	2041      	movs	r0, #65	; 0x41
 800137a:	f7ff fefe 	bl	800117a <SD_SendCmd>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <SD_disk_initialize+0x1c4>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e2      	bne.n	8001352 <SD_disk_initialize+0x12e>
 800138c:	e000      	b.n	8001390 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800138e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <SD_disk_initialize+0x1c4>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <SD_disk_initialize+0x184>
 8001398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139c:	2050      	movs	r0, #80	; 0x50
 800139e:	f7ff feec 	bl	800117a <SD_SendCmd>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SD_disk_initialize+0x188>
 80013a8:	2300      	movs	r3, #0
 80013aa:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <SD_disk_initialize+0x1c8>)
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80013b2:	f7ff fd91 	bl	8000ed8 <DESELECT>
	SPI_RxByte();
 80013b6:	f7ff fdd1 	bl	8000f5c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80013ba:	7bbb      	ldrb	r3, [r7, #14]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <SD_disk_initialize+0x1c0>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SD_disk_initialize+0x1c0>)
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	e001      	b.n	80013d6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80013d2:	f7ff fe49 	bl	8001068 <SD_PowerOff>
	}

	return Stat;
 80013d6:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <SD_disk_initialize+0x1c0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b2db      	uxtb	r3, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000210 	.word	0x20000210
 80013ec:	20000214 	.word	0x20000214

080013f0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SD_disk_status+0x14>
 8001400:	2301      	movs	r3, #1
 8001402:	e002      	b.n	800140a <SD_disk_status+0x1a>
	return Stat;
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SD_disk_status+0x28>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000

0800141c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <SD_disk_read+0x1c>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <SD_disk_read+0x20>
 8001438:	2304      	movs	r3, #4
 800143a:	e051      	b.n	80014e0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <SD_disk_read+0xcc>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SD_disk_read+0x32>
 800144a:	2303      	movs	r3, #3
 800144c:	e048      	b.n	80014e0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <SD_disk_read+0xd0>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <SD_disk_read+0x44>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	025b      	lsls	r3, r3, #9
 800145e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001460:	f7ff fd2c 	bl	8000ebc <SELECT>

	if (count == 1)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d111      	bne.n	800148e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	2051      	movs	r0, #81	; 0x51
 800146e:	f7ff fe84 	bl	800117a <SD_SendCmd>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d129      	bne.n	80014cc <SD_disk_read+0xb0>
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f7ff fe0b 	bl	8001098 <SD_RxDataBlock>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d021      	beq.n	80014cc <SD_disk_read+0xb0>
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	e01e      	b.n	80014cc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2052      	movs	r0, #82	; 0x52
 8001492:	f7ff fe72 	bl	800117a <SD_SendCmd>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d117      	bne.n	80014cc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f7ff fdf9 	bl	8001098 <SD_RxDataBlock>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00a      	beq.n	80014c2 <SD_disk_read+0xa6>
				buff += 512;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014b2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1ed      	bne.n	800149c <SD_disk_read+0x80>
 80014c0:	e000      	b.n	80014c4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80014c2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80014c4:	2100      	movs	r1, #0
 80014c6:	204c      	movs	r0, #76	; 0x4c
 80014c8:	f7ff fe57 	bl	800117a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80014cc:	f7ff fd04 	bl	8000ed8 <DESELECT>
	SPI_RxByte();
 80014d0:	f7ff fd44 	bl	8000f5c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000214 	.word	0x20000214

080014f0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <SD_disk_write+0x1c>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <SD_disk_write+0x20>
 800150c:	2304      	movs	r3, #4
 800150e:	e06b      	b.n	80015e8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001510:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <SD_disk_write+0x100>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SD_disk_write+0x32>
 800151e:	2303      	movs	r3, #3
 8001520:	e062      	b.n	80015e8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <SD_disk_write+0x100>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SD_disk_write+0x44>
 8001530:	2302      	movs	r3, #2
 8001532:	e059      	b.n	80015e8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <SD_disk_write+0x104>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <SD_disk_write+0x56>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	025b      	lsls	r3, r3, #9
 8001544:	607b      	str	r3, [r7, #4]

	SELECT();
 8001546:	f7ff fcb9 	bl	8000ebc <SELECT>

	if (count == 1)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d110      	bne.n	8001572 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	2058      	movs	r0, #88	; 0x58
 8001554:	f7ff fe11 	bl	800117a <SD_SendCmd>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d13a      	bne.n	80015d4 <SD_disk_write+0xe4>
 800155e:	21fe      	movs	r1, #254	; 0xfe
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	f7ff fdc7 	bl	80010f4 <SD_TxDataBlock>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d033      	beq.n	80015d4 <SD_disk_write+0xe4>
			count = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	e030      	b.n	80015d4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <SD_disk_write+0x104>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800157e:	2100      	movs	r1, #0
 8001580:	2077      	movs	r0, #119	; 0x77
 8001582:	f7ff fdfa 	bl	800117a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	2057      	movs	r0, #87	; 0x57
 800158a:	f7ff fdf6 	bl	800117a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	2059      	movs	r0, #89	; 0x59
 8001592:	f7ff fdf2 	bl	800117a <SD_SendCmd>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d11b      	bne.n	80015d4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800159c:	21fc      	movs	r1, #252	; 0xfc
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f7ff fda8 	bl	80010f4 <SD_TxDataBlock>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00a      	beq.n	80015c0 <SD_disk_write+0xd0>
				buff += 512;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ee      	bne.n	800159c <SD_disk_write+0xac>
 80015be:	e000      	b.n	80015c2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015c0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80015c2:	21fd      	movs	r1, #253	; 0xfd
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fd95 	bl	80010f4 <SD_TxDataBlock>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <SD_disk_write+0xe4>
			{
				count = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80015d4:	f7ff fc80 	bl	8000ed8 <DESELECT>
	SPI_RxByte();
 80015d8:	f7ff fcc0 	bl	8000f5c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000214 	.word	0x20000214

080015f8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08b      	sub	sp, #44	; 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	603a      	str	r2, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	460b      	mov	r3, r1
 8001606:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SD_disk_ioctl+0x1e>
 8001612:	2304      	movs	r3, #4
 8001614:	e115      	b.n	8001842 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d124      	bne.n	800166c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d012      	beq.n	8001650 <SD_disk_ioctl+0x58>
 800162a:	2b02      	cmp	r3, #2
 800162c:	dc1a      	bgt.n	8001664 <SD_disk_ioctl+0x6c>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <SD_disk_ioctl+0x40>
 8001632:	2b01      	cmp	r3, #1
 8001634:	d006      	beq.n	8001644 <SD_disk_ioctl+0x4c>
 8001636:	e015      	b.n	8001664 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001638:	f7ff fd16 	bl	8001068 <SD_PowerOff>
			res = RES_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001642:	e0fc      	b.n	800183e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001644:	f7ff fcce 	bl	8000fe4 <SD_PowerOn>
			res = RES_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800164e:	e0f6      	b.n	800183e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	1c5c      	adds	r4, r3, #1
 8001654:	f7ff fd14 	bl	8001080 <SD_CheckPower>
 8001658:	4603      	mov	r3, r0
 800165a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001662:	e0ec      	b.n	800183e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001664:	2304      	movs	r3, #4
 8001666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800166a:	e0e8      	b.n	800183e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800166c:	4b77      	ldr	r3, [pc, #476]	; (800184c <SD_disk_ioctl+0x254>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SD_disk_ioctl+0x86>
 800167a:	2303      	movs	r3, #3
 800167c:	e0e1      	b.n	8001842 <SD_disk_ioctl+0x24a>

		SELECT();
 800167e:	f7ff fc1d 	bl	8000ebc <SELECT>

		switch (ctrl)
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	2b0d      	cmp	r3, #13
 8001686:	f200 80cb 	bhi.w	8001820 <SD_disk_ioctl+0x228>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <SD_disk_ioctl+0x98>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	0800178b 	.word	0x0800178b
 8001694:	080016c9 	.word	0x080016c9
 8001698:	0800177b 	.word	0x0800177b
 800169c:	08001821 	.word	0x08001821
 80016a0:	08001821 	.word	0x08001821
 80016a4:	08001821 	.word	0x08001821
 80016a8:	08001821 	.word	0x08001821
 80016ac:	08001821 	.word	0x08001821
 80016b0:	08001821 	.word	0x08001821
 80016b4:	08001821 	.word	0x08001821
 80016b8:	08001821 	.word	0x08001821
 80016bc:	0800179d 	.word	0x0800179d
 80016c0:	080017c1 	.word	0x080017c1
 80016c4:	080017e5 	.word	0x080017e5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80016c8:	2100      	movs	r1, #0
 80016ca:	2049      	movs	r0, #73	; 0x49
 80016cc:	f7ff fd55 	bl	800117a <SD_SendCmd>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80a8 	bne.w	8001828 <SD_disk_ioctl+0x230>
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2110      	movs	r1, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fcda 	bl	8001098 <SD_RxDataBlock>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 809e 	beq.w	8001828 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10e      	bne.n	8001714 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	7d3b      	ldrb	r3, [r7, #20]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b29b      	uxth	r3, r3
 8001702:	4413      	add	r3, r2
 8001704:	b29b      	uxth	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800170a:	8bfb      	ldrh	r3, [r7, #30]
 800170c:	029a      	lsls	r2, r3, #10
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e02e      	b.n	8001772 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001714:	7c7b      	ldrb	r3, [r7, #17]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	b2da      	uxtb	r2, r3
 800171c:	7dbb      	ldrb	r3, [r7, #22]
 800171e:	09db      	lsrs	r3, r3, #7
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b2da      	uxtb	r2, r3
 8001726:	7d7b      	ldrb	r3, [r7, #21]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f003 0306 	and.w	r3, r3, #6
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4413      	add	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3302      	adds	r3, #2
 8001738:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800173c:	7d3b      	ldrb	r3, [r7, #20]
 800173e:	099b      	lsrs	r3, r3, #6
 8001740:	b2db      	uxtb	r3, r3
 8001742:	b29a      	uxth	r2, r3
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	b29b      	uxth	r3, r3
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	b29b      	uxth	r3, r3
 800174c:	4413      	add	r3, r2
 800174e:	b29a      	uxth	r2, r3
 8001750:	7cbb      	ldrb	r3, [r7, #18]
 8001752:	029b      	lsls	r3, r3, #10
 8001754:	b29b      	uxth	r3, r3
 8001756:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800175a:	b29b      	uxth	r3, r3
 800175c:	4413      	add	r3, r2
 800175e:	b29b      	uxth	r3, r3
 8001760:	3301      	adds	r3, #1
 8001762:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001764:	8bfa      	ldrh	r2, [r7, #30]
 8001766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800176a:	3b09      	subs	r3, #9
 800176c:	409a      	lsls	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001778:	e056      	b.n	8001828 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001780:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001788:	e055      	b.n	8001836 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800178a:	f7ff fc11 	bl	8000fb0 <SD_ReadyWait>
 800178e:	4603      	mov	r3, r0
 8001790:	2bff      	cmp	r3, #255	; 0xff
 8001792:	d14b      	bne.n	800182c <SD_disk_ioctl+0x234>
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800179a:	e047      	b.n	800182c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800179c:	2100      	movs	r1, #0
 800179e:	2049      	movs	r0, #73	; 0x49
 80017a0:	f7ff fceb 	bl	800117a <SD_SendCmd>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d142      	bne.n	8001830 <SD_disk_ioctl+0x238>
 80017aa:	2110      	movs	r1, #16
 80017ac:	6a38      	ldr	r0, [r7, #32]
 80017ae:	f7ff fc73 	bl	8001098 <SD_RxDataBlock>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d03b      	beq.n	8001830 <SD_disk_ioctl+0x238>
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017be:	e037      	b.n	8001830 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017c0:	2100      	movs	r1, #0
 80017c2:	204a      	movs	r0, #74	; 0x4a
 80017c4:	f7ff fcd9 	bl	800117a <SD_SendCmd>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d132      	bne.n	8001834 <SD_disk_ioctl+0x23c>
 80017ce:	2110      	movs	r1, #16
 80017d0:	6a38      	ldr	r0, [r7, #32]
 80017d2:	f7ff fc61 	bl	8001098 <SD_RxDataBlock>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d02b      	beq.n	8001834 <SD_disk_ioctl+0x23c>
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017e2:	e027      	b.n	8001834 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80017e4:	2100      	movs	r1, #0
 80017e6:	207a      	movs	r0, #122	; 0x7a
 80017e8:	f7ff fcc7 	bl	800117a <SD_SendCmd>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d116      	bne.n	8001820 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017f8:	e00b      	b.n	8001812 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80017fa:	6a3c      	ldr	r4, [r7, #32]
 80017fc:	1c63      	adds	r3, r4, #1
 80017fe:	623b      	str	r3, [r7, #32]
 8001800:	f7ff fbac 	bl	8000f5c <SPI_RxByte>
 8001804:	4603      	mov	r3, r0
 8001806:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001808:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800180c:	3301      	adds	r3, #1
 800180e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001812:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001816:	2b03      	cmp	r3, #3
 8001818:	d9ef      	bls.n	80017fa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001820:	2304      	movs	r3, #4
 8001822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001826:	e006      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 8001828:	bf00      	nop
 800182a:	e004      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 800182c:	bf00      	nop
 800182e:	e002      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 8001830:	bf00      	nop
 8001832:	e000      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 8001834:	bf00      	nop
		}

		DESELECT();
 8001836:	f7ff fb4f 	bl	8000ed8 <DESELECT>
		SPI_RxByte();
 800183a:	f7ff fb8f 	bl	8000f5c <SPI_RxByte>
	}

	return res;
 800183e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001842:	4618      	mov	r0, r3
 8001844:	372c      	adds	r7, #44	; 0x2c
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	20000000 	.word	0x20000000

08001850 <toggle_headlamp>:
#include "headlamp.h"
#include <stdio.h>

int headlamp_on = 0;

void toggle_headlamp() {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_GetState(HEADLAMP_TIMER) == HAL_TIM_STATE_READY) {
 8001854:	4819      	ldr	r0, [pc, #100]	; (80018bc <toggle_headlamp+0x6c>)
 8001856:	f003 fdb0 	bl	80053ba <HAL_TIM_Base_GetState>
 800185a:	4603      	mov	r3, r0
 800185c:	2b01      	cmp	r3, #1
 800185e:	d12a      	bne.n	80018b6 <toggle_headlamp+0x66>
		HAL_GPIO_WritePin(HEADLAMP_GPIO_BANK, HEADLAMP_GPIO_PIN,
 8001860:	2200      	movs	r2, #0
 8001862:	2102      	movs	r1, #2
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <toggle_headlamp+0x70>)
 8001866:	f002 f96f 	bl	8003b48 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		if (headlamp_on) {
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <toggle_headlamp+0x74>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00f      	beq.n	8001892 <toggle_headlamp+0x42>
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 10000);
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <toggle_headlamp+0x6c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f242 7210 	movw	r2, #10000	; 0x2710
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <toggle_headlamp+0x6c>)
 800187e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001882:	60da      	str	r2, [r3, #12]
			printf("Light off\n");
 8001884:	4810      	ldr	r0, [pc, #64]	; (80018c8 <toggle_headlamp+0x78>)
 8001886:	f005 fe1d 	bl	80074c4 <puts>
			headlamp_on = 0;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <toggle_headlamp+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	e00e      	b.n	80018b0 <toggle_headlamp+0x60>
		} else {
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 2500);
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <toggle_headlamp+0x6c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <toggle_headlamp+0x6c>)
 800189e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80018a2:	60da      	str	r2, [r3, #12]
			printf("Light on\n");
 80018a4:	4809      	ldr	r0, [pc, #36]	; (80018cc <toggle_headlamp+0x7c>)
 80018a6:	f005 fe0d 	bl	80074c4 <puts>
			headlamp_on = 1;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <toggle_headlamp+0x74>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
		}
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <toggle_headlamp+0x6c>)
 80018b2:	f003 fbc1 	bl	8005038 <HAL_TIM_Base_Start_IT>
	}
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000368 	.word	0x20000368
 80018c0:	40020c00 	.word	0x40020c00
 80018c4:	20000218 	.word	0x20000218
 80018c8:	08009648 	.word	0x08009648
 80018cc:	08009654 	.word	0x08009654

080018d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	if (htim == HEADLAMP_TIMER) {
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d107      	bne.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_WritePin(HEADLAMP_GPIO_BANK, HEADLAMP_GPIO_PIN, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	2102      	movs	r1, #2
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80018e6:	f002 f92f 	bl	8003b48 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018ec:	f003 fc06 	bl	80050fc <HAL_TIM_Base_Stop_IT>
	}
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000368 	.word	0x20000368
 80018fc:	40020c00 	.word	0x40020c00

08001900 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001904:	f000 ff6c 	bl	80027e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001908:	f000 f818 	bl	800193c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800190c:	f000 fa10 	bl	8001d30 <MX_GPIO_Init>
	MX_DMA_Init();
 8001910:	f000 f9e6 	bl	8001ce0 <MX_DMA_Init>
	MX_I2C1_Init();
 8001914:	f000 f8d0 	bl	8001ab8 <MX_I2C1_Init>
	MX_SPI2_Init();
 8001918:	f000 f8fc 	bl	8001b14 <MX_SPI2_Init>
	MX_SPI3_Init();
 800191c:	f000 f930 	bl	8001b80 <MX_SPI3_Init>
	MX_USART2_UART_Init();
 8001920:	f000 f9b4 	bl	8001c8c <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8001924:	f004 ffe4 	bl	80068f0 <MX_FATFS_Init>
	MX_ADC1_Init();
 8001928:	f000 f874 	bl	8001a14 <MX_ADC1_Init>
	MX_TIM10_Init();
 800192c:	f000 f960 	bl	8001bf0 <MX_TIM10_Init>
	MX_USART1_UART_Init();
 8001930:	f000 f982 	bl	8001c38 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	XBee_Init();
 8001934:	f000 fed0 	bl	80026d8 <XBee_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001938:	e7fe      	b.n	8001938 <main+0x38>
	...

0800193c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	; 0x50
 8001940:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	2230      	movs	r2, #48	; 0x30
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f005 f8c2 	bl	8006ad4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <SystemClock_Config+0xd0>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <SystemClock_Config+0xd0>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <SystemClock_Config+0xd0>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800197c:	2300      	movs	r3, #0
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <SystemClock_Config+0xd4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001988:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <SystemClock_Config+0xd4>)
 800198a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <SystemClock_Config+0xd4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800199c:	2302      	movs	r3, #2
 800199e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a0:	2301      	movs	r3, #1
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a4:	2310      	movs	r3, #16
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a8:	2302      	movs	r3, #2
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80019b0:	2310      	movs	r3, #16
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80019b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019ba:	2304      	movs	r3, #4
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80019be:	2307      	movs	r3, #7
 80019c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fa1c 	bl	8003e04 <HAL_RCC_OscConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SystemClock_Config+0x9a>
		Error_Handler();
 80019d2:	f000 fa55 	bl	8001e80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019d6:	230f      	movs	r3, #15
 80019d8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019da:	2302      	movs	r3, #2
 80019dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2102      	movs	r1, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 fc7e 	bl	80042f4 <HAL_RCC_ClockConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0xc6>
		Error_Handler();
 80019fe:	f000 fa3f 	bl	8001e80 <Error_Handler>
	}
}
 8001a02:	bf00      	nop
 8001a04:	3750      	adds	r7, #80	; 0x50
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000

08001a14 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a28:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <MX_ADC1_Init+0x9c>)
 8001a2a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a32:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a56:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <MX_ADC1_Init+0xa0>)
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001a74:	480d      	ldr	r0, [pc, #52]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a76:	f000 ff6d 	bl	8002954 <HAL_ADC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001a80:	f000 f9fe 	bl	8001e80 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001a84:	2308      	movs	r3, #8
 8001a86:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a90:	463b      	mov	r3, r7
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_ADC1_Init+0x98>)
 8001a96:	f000 ffa1 	bl	80029dc <HAL_ADC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001aa0:	f000 f9ee 	bl	8001e80 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	2000021c 	.word	0x2000021c
 8001ab0:	40012000 	.word	0x40012000
 8001ab4:	0f000001 	.word	0x0f000001

08001ab8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <MX_I2C1_Init+0x50>)
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <MX_I2C1_Init+0x54>)
 8001ac0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_I2C1_Init+0x50>)
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <MX_I2C1_Init+0x58>)
 8001ac6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_I2C1_Init+0x50>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_I2C1_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_I2C1_Init+0x50>)
 8001ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ada:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <MX_I2C1_Init+0x50>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_I2C1_Init+0x50>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <MX_I2C1_Init+0x50>)
 8001af6:	f002 f841 	bl	8003b7c <HAL_I2C_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001b00:	f000 f9be 	bl	8001e80 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000264 	.word	0x20000264
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	000186a0 	.word	0x000186a0

08001b14 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <MX_SPI2_Init+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b24:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b44:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b48:	2210      	movs	r2, #16
 8001b4a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b60:	220a      	movs	r2, #10
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_SPI2_Init+0x64>)
 8001b66:	f002 fde5 	bl	8004734 <HAL_SPI_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_SPI2_Init+0x60>
		Error_Handler();
 8001b70:	f000 f986 	bl	8001e80 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200002b8 	.word	0x200002b8
 8001b7c:	40003800 	.word	0x40003800

08001b80 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001b86:	4a19      	ldr	r2, [pc, #100]	; (8001bec <MX_SPI3_Init+0x6c>)
 8001b88:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001b8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b90:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b9e:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb2:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001bb6:	2218      	movs	r2, #24
 8001bb8:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001bce:	220a      	movs	r2, #10
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_SPI3_Init+0x68>)
 8001bd4:	f002 fdae 	bl	8004734 <HAL_SPI_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_SPI3_Init+0x62>
		Error_Handler();
 8001bde:	f000 f94f 	bl	8001e80 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000310 	.word	0x20000310
 8001bec:	40003c00 	.word	0x40003c00

08001bf0 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_TIM10_Init+0x40>)
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <MX_TIM10_Init+0x44>)
 8001bf8:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 8400 - 1;
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <MX_TIM10_Init+0x40>)
 8001bfc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001c00:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_TIM10_Init+0x40>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_TIM10_Init+0x40>)
 8001c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0e:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <MX_TIM10_Init+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_TIM10_Init+0x40>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <MX_TIM10_Init+0x40>)
 8001c1e:	f003 f9bb 	bl	8004f98 <HAL_TIM_Base_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM10_Init+0x3c>
		Error_Handler();
 8001c28:	f000 f92a 	bl	8001e80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000368 	.word	0x20000368
 8001c34:	40014400 	.word	0x40014400

08001c38 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <MX_USART1_UART_Init+0x50>)
 8001c40:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c48:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c70:	f003 fc46 	bl	8005500 <HAL_UART_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001c7a:	f000 f901 	bl	8001e80 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200003b0 	.word	0x200003b0
 8001c88:	40011000 	.word	0x40011000

08001c8c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <MX_USART2_UART_Init+0x50>)
 8001c94:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c9c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	f003 fc1c 	bl	8005500 <HAL_UART_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001cce:	f000 f8d7 	bl	8001e80 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200003f4 	.word	0x200003f4
 8001cdc:	40004400 	.word	0x40004400

08001ce0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <MX_DMA_Init+0x4c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <MX_DMA_Init+0x4c>)
 8001cf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <MX_DMA_Init+0x4c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	203a      	movs	r0, #58	; 0x3a
 8001d08:	f001 f961 	bl	8002fce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001d0c:	203a      	movs	r0, #58	; 0x3a
 8001d0e:	f001 f97a 	bl	8003006 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2046      	movs	r0, #70	; 0x46
 8001d18:	f001 f959 	bl	8002fce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001d1c:	2046      	movs	r0, #70	; 0x46
 8001d1e:	f001 f972 	bl	8003006 <HAL_NVIC_EnableIRQ>

}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b40      	ldr	r3, [pc, #256]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a3f      	ldr	r2, [pc, #252]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a38      	ldr	r2, [pc, #224]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a31      	ldr	r2, [pc, #196]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a2a      	ldr	r2, [pc, #168]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <MX_GPIO_Init+0x11c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_SPI2_CS_GPIO_Port, SD_SPI2_CS_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2102      	movs	r1, #2
 8001dba:	4825      	ldr	r0, [pc, #148]	; (8001e50 <MX_GPIO_Init+0x120>)
 8001dbc:	f001 fec4 	bl	8003b48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2120      	movs	r1, #32
 8001dc4:	4823      	ldr	r0, [pc, #140]	; (8001e54 <MX_GPIO_Init+0x124>)
 8001dc6:	f001 febf 	bl	8003b48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4822      	ldr	r0, [pc, #136]	; (8001e58 <MX_GPIO_Init+0x128>)
 8001dd0:	f001 feba 	bl	8003b48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001dde:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4819      	ldr	r0, [pc, #100]	; (8001e50 <MX_GPIO_Init+0x120>)
 8001dec:	f001 fd28 	bl	8003840 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_SPI2_CS_Pin */
	GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 8001df0:	2302      	movs	r3, #2
 8001df2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	4812      	ldr	r0, [pc, #72]	; (8001e50 <MX_GPIO_Init+0x120>)
 8001e08:	f001 fd1a 	bl	8003840 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	480c      	ldr	r0, [pc, #48]	; (8001e54 <MX_GPIO_Init+0x124>)
 8001e24:	f001 fd0c 	bl	8003840 <HAL_GPIO_Init>

	/*Configure GPIO pin : DAC_SPI2_CS_Pin */
	GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4806      	ldr	r0, [pc, #24]	; (8001e58 <MX_GPIO_Init+0x128>)
 8001e40:	f001 fcfe 	bl	8003840 <HAL_GPIO_Init>

}
 8001e44:	bf00      	nop
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40020400 	.word	0x40020400

08001e5c <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001e64:	1d39      	adds	r1, r7, #4
 8001e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <__io_putchar+0x20>)
 8001e6e:	f003 fb94 	bl	800559a <HAL_UART_Transmit>
	return ch;
 8001e72:	687b      	ldr	r3, [r7, #4]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200003f4 	.word	0x200003f4

08001e80 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e84:	b672      	cpsid	i
}
 8001e86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e88:	e7fe      	b.n	8001e88 <Error_Handler+0x8>
	...

08001e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eca:	2007      	movs	r0, #7
 8001ecc:	f001 f874 	bl	8002fb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a24      	ldr	r2, [pc, #144]	; (8001f8c <HAL_ADC_MspInit+0xb0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d141      	bne.n	8001f82 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_ADC_MspInit+0xb4>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_ADC_MspInit+0xb4>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_ADC_MspInit+0xb4>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_ADC_MspInit+0xb4>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <HAL_ADC_MspInit+0xb4>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_ADC_MspInit+0xb4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_ADC_MspInit+0xb4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <HAL_ADC_MspInit+0xb4>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_ADC_MspInit+0xb4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 8001f52:	2301      	movs	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f56:	2303      	movs	r3, #3
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	480b      	ldr	r0, [pc, #44]	; (8001f94 <HAL_ADC_MspInit+0xb8>)
 8001f66:	f001 fc6b 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4806      	ldr	r0, [pc, #24]	; (8001f98 <HAL_ADC_MspInit+0xbc>)
 8001f7e:	f001 fc5f 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40012000 	.word	0x40012000
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020400 	.word	0x40020400

08001f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	; (8002020 <HAL_I2C_MspInit+0x84>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d12b      	bne.n	8002016 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_I2C_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_I2C_MspInit+0x88>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_I2C_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001fda:	23c0      	movs	r3, #192	; 0xc0
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fde:	2312      	movs	r3, #18
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fea:	2304      	movs	r3, #4
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <HAL_I2C_MspInit+0x8c>)
 8001ff6:	f001 fc23 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_I2C_MspInit+0x88>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <HAL_I2C_MspInit+0x88>)
 8002004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_I2C_MspInit+0x88>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	; 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40005400 	.word	0x40005400
 8002024:	40023800 	.word	0x40023800
 8002028:	40020400 	.word	0x40020400

0800202c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08c      	sub	sp, #48	; 0x30
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a42      	ldr	r2, [pc, #264]	; (8002154 <HAL_SPI_MspInit+0x128>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d14b      	bne.n	80020e6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a40      	ldr	r2, [pc, #256]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a39      	ldr	r2, [pc, #228]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 80020a2:	230c      	movs	r3, #12
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020b2:	2305      	movs	r3, #5
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	4827      	ldr	r0, [pc, #156]	; (800215c <HAL_SPI_MspInit+0x130>)
 80020be:	f001 fbbf 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 80020c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020d4:	2305      	movs	r3, #5
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4820      	ldr	r0, [pc, #128]	; (8002160 <HAL_SPI_MspInit+0x134>)
 80020e0:	f001 fbae 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020e4:	e031      	b.n	800214a <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_SPI_MspInit+0x138>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d12c      	bne.n	800214a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 80020fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	4a10      	ldr	r2, [pc, #64]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	6313      	str	r3, [r2, #48]	; 0x30
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_SPI_MspInit+0x12c>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DAC_SPI3_SCK_Pin|DAC_SPI3_MOSI_Pin;
 8002128:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800213a:	2306      	movs	r3, #6
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213e:	f107 031c 	add.w	r3, r7, #28
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <HAL_SPI_MspInit+0x130>)
 8002146:	f001 fb7b 	bl	8003840 <HAL_GPIO_Init>
}
 800214a:	bf00      	nop
 800214c:	3730      	adds	r7, #48	; 0x30
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40003800 	.word	0x40003800
 8002158:	40023800 	.word	0x40023800
 800215c:	40020800 	.word	0x40020800
 8002160:	40020400 	.word	0x40020400
 8002164:	40003c00 	.word	0x40003c00

08002168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <HAL_TIM_Base_MspInit+0x48>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d115      	bne.n	80021a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_TIM_Base_MspInit+0x4c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <HAL_TIM_Base_MspInit+0x4c>)
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_TIM_Base_MspInit+0x4c>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2019      	movs	r0, #25
 800219c:	f000 ff17 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021a0:	2019      	movs	r0, #25
 80021a2:	f000 ff30 	bl	8003006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40014400 	.word	0x40014400
 80021b4:	40023800 	.word	0x40023800

080021b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a65      	ldr	r2, [pc, #404]	; (800236c <HAL_UART_MspInit+0x1b4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	f040 8093 	bne.w	8002302 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	4a62      	ldr	r2, [pc, #392]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 80021e6:	f043 0310 	orr.w	r3, r3, #16
 80021ea:	6453      	str	r3, [r2, #68]	; 0x44
 80021ec:	4b60      	ldr	r3, [pc, #384]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	4b5c      	ldr	r3, [pc, #368]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4a5b      	ldr	r2, [pc, #364]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6313      	str	r3, [r2, #48]	; 0x30
 8002208:	4b59      	ldr	r3, [pc, #356]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = XBEE_USART_TX_Pin|XBEE_USART_RX_Pin;
 8002214:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002226:	2307      	movs	r3, #7
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4850      	ldr	r0, [pc, #320]	; (8002374 <HAL_UART_MspInit+0x1bc>)
 8002232:	f001 fb05 	bl	8003840 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002236:	4b50      	ldr	r3, [pc, #320]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 8002238:	4a50      	ldr	r2, [pc, #320]	; (800237c <HAL_UART_MspInit+0x1c4>)
 800223a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800223c:	4b4e      	ldr	r3, [pc, #312]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 800223e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002242:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002244:	4b4c      	ldr	r3, [pc, #304]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800224a:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002250:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 8002252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002256:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002258:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 800225a:	2200      	movs	r2, #0
 800225c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225e:	4b46      	ldr	r3, [pc, #280]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002264:	4b44      	ldr	r3, [pc, #272]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 8002266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800226a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800226c:	4b42      	ldr	r3, [pc, #264]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 800226e:	2200      	movs	r2, #0
 8002270:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 8002274:	2200      	movs	r2, #0
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002278:	483f      	ldr	r0, [pc, #252]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 800227a:	f000 fedf 	bl	800303c <HAL_DMA_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002284:	f7ff fdfc 	bl	8001e80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a3b      	ldr	r2, [pc, #236]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 800228c:	639a      	str	r2, [r3, #56]	; 0x38
 800228e:	4a3a      	ldr	r2, [pc, #232]	; (8002378 <HAL_UART_MspInit+0x1c0>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002294:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 8002296:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <HAL_UART_MspInit+0x1cc>)
 8002298:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 800229c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022a2:	4b37      	ldr	r3, [pc, #220]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022a4:	2240      	movs	r2, #64	; 0x40
 80022a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a8:	4b35      	ldr	r3, [pc, #212]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022c8:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ce:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022d4:	482a      	ldr	r0, [pc, #168]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022d6:	f000 feb1 	bl	800303c <HAL_DMA_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80022e0:	f7ff fdce 	bl	8001e80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a26      	ldr	r2, [pc, #152]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022e8:	635a      	str	r2, [r3, #52]	; 0x34
 80022ea:	4a25      	ldr	r2, [pc, #148]	; (8002380 <HAL_UART_MspInit+0x1c8>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	2025      	movs	r0, #37	; 0x25
 80022f6:	f000 fe6a 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022fa:	2025      	movs	r0, #37	; 0x25
 80022fc:	f000 fe83 	bl	8003006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002300:	e030      	b.n	8002364 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a20      	ldr	r2, [pc, #128]	; (8002388 <HAL_UART_MspInit+0x1d0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d12b      	bne.n	8002364 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 8002316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231a:	6413      	str	r3, [r2, #64]	; 0x40
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6313      	str	r3, [r2, #48]	; 0x30
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_UART_MspInit+0x1b8>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002344:	230c      	movs	r3, #12
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002354:	2307      	movs	r3, #7
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	4619      	mov	r1, r3
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <HAL_UART_MspInit+0x1bc>)
 8002360:	f001 fa6e 	bl	8003840 <HAL_GPIO_Init>
}
 8002364:	bf00      	nop
 8002366:	3730      	adds	r7, #48	; 0x30
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40011000 	.word	0x40011000
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000
 8002378:	20000438 	.word	0x20000438
 800237c:	40026440 	.word	0x40026440
 8002380:	20000498 	.word	0x20000498
 8002384:	400264b8 	.word	0x400264b8
 8002388:	40004400 	.word	0x40004400

0800238c <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile extern uint8_t Timer1, Timer2;

void SDTimer_Handler() {
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

	if (Timer1 > 0) {
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <SDTimer_Handler+0x40>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <SDTimer_Handler+0x1c>
		--Timer1;
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <SDTimer_Handler+0x40>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <SDTimer_Handler+0x40>)
 80023a6:	701a      	strb	r2, [r3, #0]
	}

	if (Timer2 > 0) {
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <SDTimer_Handler+0x44>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d006      	beq.n	80023c0 <SDTimer_Handler+0x34>
		--Timer2;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <SDTimer_Handler+0x44>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SDTimer_Handler+0x44>)
 80023be:	701a      	strb	r2, [r3, #0]
	}
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000210 	.word	0x20000210
 80023d0:	20000212 	.word	0x20000212

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <NMI_Handler+0x4>

080023da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <HardFault_Handler+0x4>

080023e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <MemManage_Handler+0x4>

080023e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <BusFault_Handler+0x4>

080023ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <UsageFault_Handler+0x4>

080023f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <SysTick_Handler+0x30>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	3301      	adds	r3, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <SysTick_Handler+0x30>)
 800242c:	701a      	strb	r2, [r3, #0]

	if (FatFsCnt >= 10) {
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <SysTick_Handler+0x30>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b09      	cmp	r3, #9
 8002436:	d904      	bls.n	8002442 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <SysTick_Handler+0x30>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800243e:	f7ff ffa5 	bl	800238c <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002442:	f000 fa1f 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200004f8 	.word	0x200004f8

08002450 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002456:	f002 fe80 	bl	800515a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000368 	.word	0x20000368

08002464 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <USART1_IRQHandler+0x10>)
 800246a:	f003 f959 	bl	8005720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200003b0 	.word	0x200003b0

08002478 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <DMA2_Stream2_IRQHandler+0x10>)
 800247e:	f000 ff75 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000438 	.word	0x20000438

0800248c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA2_Stream7_IRQHandler+0x10>)
 8002492:	f000 ff6b 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000498 	.word	0x20000498

080024a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
	return 1;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_kill>:

int _kill(int pid, int sig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024ba:	f004 fae1 	bl	8006a80 <__errno>
 80024be:	4603      	mov	r3, r0
 80024c0:	2216      	movs	r2, #22
 80024c2:	601a      	str	r2, [r3, #0]
	return -1;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_exit>:

void _exit (int status)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ffe7 	bl	80024b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024e2:	e7fe      	b.n	80024e2 <_exit+0x12>

080024e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e00a      	b.n	800250c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024f6:	f3af 8000 	nop.w
 80024fa:	4601      	mov	r1, r0
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	60ba      	str	r2, [r7, #8]
 8002502:	b2ca      	uxtb	r2, r1
 8002504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3301      	adds	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	429a      	cmp	r2, r3
 8002512:	dbf0      	blt.n	80024f6 <_read+0x12>
	}

return len;
 8002514:	687b      	ldr	r3, [r7, #4]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e009      	b.n	8002544 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	60ba      	str	r2, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fc8f 	bl	8001e5c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3301      	adds	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	dbf1      	blt.n	8002530 <_write+0x12>
	}
	return len;
 800254c:	687b      	ldr	r3, [r7, #4]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_close>:

int _close(int file)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
	return -1;
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800257e:	605a      	str	r2, [r3, #4]
	return 0;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <_isatty>:

int _isatty(int file)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
	return 1;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
	return 0;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <_sbrk+0x5c>)
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <_sbrk+0x60>)
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <_sbrk+0x64>)
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <_sbrk+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d207      	bcs.n	8002600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f0:	f004 fa46 	bl	8006a80 <__errno>
 80025f4:	4603      	mov	r3, r0
 80025f6:	220c      	movs	r2, #12
 80025f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	e009      	b.n	8002614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <_sbrk+0x64>)
 8002610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002612:	68fb      	ldr	r3, [r7, #12]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20018000 	.word	0x20018000
 8002620:	00000400 	.word	0x00000400
 8002624:	200004fc 	.word	0x200004fc
 8002628:	20000598 	.word	0x20000598

0800262c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <SystemInit+0x20>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <SystemInit+0x20>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <XBee_Receive>:

void XBee_Transmit(XBee_Data *data) {
	HAL_UART_Transmit_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
}

void XBee_Receive(XBee_Data *data) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8002658:	226c      	movs	r2, #108	; 0x6c
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4803      	ldr	r0, [pc, #12]	; (800266c <XBee_Receive+0x1c>)
 800265e:	f003 f82e 	bl	80056be <HAL_UART_Receive_DMA>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200003b0 	.word	0x200003b0

08002670 <XBee_Resolve>:

void XBee_Resolve() {
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	if (XBee_Received.target == 0 || XBee_Received.target == UID) {
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <XBee_Resolve+0x54>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <XBee_Resolve+0x18>
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <XBee_Resolve+0x54>)
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <XBee_Resolve+0x58>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d11a      	bne.n	80026be <XBee_Resolve+0x4e>
		switch (XBee_Received.command) {
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <XBee_Resolve+0x54>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d00d      	beq.n	80026ae <XBee_Resolve+0x3e>
 8002692:	2b02      	cmp	r3, #2
 8002694:	dc0f      	bgt.n	80026b6 <XBee_Resolve+0x46>
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <XBee_Resolve+0x30>
 800269a:	2b01      	cmp	r3, #1
 800269c:	d004      	beq.n	80026a8 <XBee_Resolve+0x38>
 800269e:	e00a      	b.n	80026b6 <XBee_Resolve+0x46>
		case PrintMessage:
			printf("Message\n");
 80026a0:	480a      	ldr	r0, [pc, #40]	; (80026cc <XBee_Resolve+0x5c>)
 80026a2:	f004 ff0f 	bl	80074c4 <puts>
			break;
 80026a6:	e00b      	b.n	80026c0 <XBee_Resolve+0x50>
		case ToggleHeadlamp:
			toggle_headlamp();
 80026a8:	f7ff f8d2 	bl	8001850 <toggle_headlamp>
			break;
 80026ac:	e008      	b.n	80026c0 <XBee_Resolve+0x50>
		case Placeholder:
			printf("Placeholder\n");
 80026ae:	4808      	ldr	r0, [pc, #32]	; (80026d0 <XBee_Resolve+0x60>)
 80026b0:	f004 ff08 	bl	80074c4 <puts>
			break;
 80026b4:	e004      	b.n	80026c0 <XBee_Resolve+0x50>
		default:
			printf("Unknown command received over network\n");
 80026b6:	4807      	ldr	r0, [pc, #28]	; (80026d4 <XBee_Resolve+0x64>)
 80026b8:	f004 ff04 	bl	80074c4 <puts>
		}
	}
}
 80026bc:	e000      	b.n	80026c0 <XBee_Resolve+0x50>
	}
 80026be:	bf00      	nop
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000504 	.word	0x20000504
 80026c8:	20000500 	.word	0x20000500
 80026cc:	08009660 	.word	0x08009660
 80026d0:	08009668 	.word	0x08009668
 80026d4:	08009674 	.word	0x08009674

080026d8 <XBee_Init>:

void XBee_Init() {
 80026d8:	b598      	push	{r3, r4, r7, lr}
 80026da:	af00      	add	r7, sp, #0
	UID = HAL_GetUIDw0() + HAL_GetUIDw1() + HAL_GetUIDw2();
 80026dc:	f000 f916 	bl	800290c <HAL_GetUIDw0>
 80026e0:	4604      	mov	r4, r0
 80026e2:	f000 f91f 	bl	8002924 <HAL_GetUIDw1>
 80026e6:	4603      	mov	r3, r0
 80026e8:	441c      	add	r4, r3
 80026ea:	f000 f927 	bl	800293c <HAL_GetUIDw2>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4423      	add	r3, r4
 80026f2:	4a06      	ldr	r2, [pc, #24]	; (800270c <XBee_Init+0x34>)
 80026f4:	6013      	str	r3, [r2, #0]
	printf("UID: %u\n", (unsigned int) UID);
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <XBee_Init+0x34>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4804      	ldr	r0, [pc, #16]	; (8002710 <XBee_Init+0x38>)
 80026fe:	f004 fe5b 	bl	80073b8 <iprintf>
	XBee_Receive(&XBee_Received);
 8002702:	4804      	ldr	r0, [pc, #16]	; (8002714 <XBee_Init+0x3c>)
 8002704:	f7ff ffa4 	bl	8002650 <XBee_Receive>
}
 8002708:	bf00      	nop
 800270a:	bd98      	pop	{r3, r4, r7, pc}
 800270c:	20000500 	.word	0x20000500
 8002710:	0800969c 	.word	0x0800969c
 8002714:	20000504 	.word	0x20000504

08002718 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	printf("Transmitted\n");
 8002720:	4803      	ldr	r0, [pc, #12]	; (8002730 <HAL_UART_TxCpltCallback+0x18>)
 8002722:	f004 fecf 	bl	80074c4 <puts>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	080096a8 	.word	0x080096a8

08002734 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b085      	sub	sp, #20
 8002738:	af02      	add	r7, sp, #8
 800273a:	6078      	str	r0, [r7, #4]
	if (huart == XBEE_UART) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_UART_RxCpltCallback+0x4c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d119      	bne.n	8002778 <HAL_UART_RxCpltCallback+0x44>
		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
				XBee_Received.command, (unsigned int) XBee_Received.target,
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_UART_RxCpltCallback+0x50>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b2db      	uxtb	r3, r3
		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
 800274a:	4618      	mov	r0, r3
				XBee_Received.command, (unsigned int) XBee_Received.target,
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_UART_RxCpltCallback+0x50>)
 800274e:	685a      	ldr	r2, [r3, #4]
				XBee_Received.data[0], XBee_Received.data[1],
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_UART_RxCpltCallback+0x50>)
 8002752:	7a1b      	ldrb	r3, [r3, #8]
 8002754:	b2db      	uxtb	r3, r3
		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
 8002756:	461c      	mov	r4, r3
				XBee_Received.data[0], XBee_Received.data[1],
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_UART_RxCpltCallback+0x50>)
 800275a:	7a5b      	ldrb	r3, [r3, #9]
 800275c:	b2db      	uxtb	r3, r3
		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
 800275e:	4619      	mov	r1, r3
				XBee_Received.data[2]);
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_UART_RxCpltCallback+0x50>)
 8002762:	7a9b      	ldrb	r3, [r3, #10]
 8002764:	b2db      	uxtb	r3, r3
		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	9100      	str	r1, [sp, #0]
 800276a:	4623      	mov	r3, r4
 800276c:	4601      	mov	r1, r0
 800276e:	4806      	ldr	r0, [pc, #24]	; (8002788 <HAL_UART_RxCpltCallback+0x54>)
 8002770:	f004 fe22 	bl	80073b8 <iprintf>
		XBee_Resolve();
 8002774:	f7ff ff7c 	bl	8002670 <XBee_Resolve>
	}
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	200003b0 	.word	0x200003b0
 8002784:	20000504 	.word	0x20000504
 8002788:	080096b4 	.word	0x080096b4

0800278c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002790:	480d      	ldr	r0, [pc, #52]	; (80027c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002792:	490e      	ldr	r1, [pc, #56]	; (80027cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002798:	e002      	b.n	80027a0 <LoopCopyDataInit>

0800279a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800279c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279e:	3304      	adds	r3, #4

080027a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a4:	d3f9      	bcc.n	800279a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a6:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027a8:	4c0b      	ldr	r4, [pc, #44]	; (80027d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027ac:	e001      	b.n	80027b2 <LoopFillZerobss>

080027ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b0:	3204      	adds	r2, #4

080027b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b4:	d3fb      	bcc.n	80027ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027b6:	f7ff ff39 	bl	800262c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ba:	f004 f967 	bl	8006a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027be:	f7ff f89f 	bl	8001900 <main>
  bx  lr    
 80027c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80027d0:	08009afc 	.word	0x08009afc
  ldr r2, =_sbss
 80027d4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80027d8:	20000598 	.word	0x20000598

080027dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <HAL_Init+0x40>)
 80027ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <HAL_Init+0x40>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_Init+0x40>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 fbd5 	bl	8002fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	2000      	movs	r0, #0
 8002810:	f000 f808 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fb3a 	bl	8001e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_InitTick+0x54>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_InitTick+0x58>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800283a:	fbb3 f3f1 	udiv	r3, r3, r1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fbed 	bl	8003022 <HAL_SYSTICK_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00e      	b.n	8002870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d80a      	bhi.n	800286e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f000 fbb5 	bl	8002fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002864:	4a06      	ldr	r2, [pc, #24]	; (8002880 <HAL_InitTick+0x5c>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000004 	.word	0x20000004
 800287c:	2000000c 	.word	0x2000000c
 8002880:	20000008 	.word	0x20000008

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	2000000c 	.word	0x2000000c
 80028a8:	20000570 	.word	0x20000570

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000570 	.word	0x20000570

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff ffee 	bl	80028ac <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_Delay+0x44>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ea:	bf00      	nop
 80028ec:	f7ff ffde 	bl	80028ac <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2000000c 	.word	0x2000000c

0800290c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_GetUIDw0+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	1fff7a10 	.word	0x1fff7a10

08002924 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_GetUIDw1+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	1fff7a14 	.word	0x1fff7a14

0800293c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_GetUIDw2+0x14>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	1fff7a18 	.word	0x1fff7a18

08002954 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e033      	b.n	80029d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff fab2 	bl	8001edc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d118      	bne.n	80029c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800299a:	f023 0302 	bic.w	r3, r3, #2
 800299e:	f043 0202 	orr.w	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f93a 	bl	8002c20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
 80029c2:	e001      	b.n	80029c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x1c>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e105      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x228>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d925      	bls.n	8002a54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68d9      	ldr	r1, [r3, #12]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b1e      	subs	r3, #30
 8002a1e:	2207      	movs	r2, #7
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43da      	mvns	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68d9      	ldr	r1, [r3, #12]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	4603      	mov	r3, r0
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4403      	add	r3, r0
 8002a46:	3b1e      	subs	r3, #30
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	e022      	b.n	8002a9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6919      	ldr	r1, [r3, #16]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	2207      	movs	r2, #7
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	400a      	ands	r2, r1
 8002a76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6919      	ldr	r1, [r3, #16]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4618      	mov	r0, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4403      	add	r3, r0
 8002a90:	409a      	lsls	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d824      	bhi.n	8002aec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b05      	subs	r3, #5
 8002ab4:	221f      	movs	r2, #31
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	3b05      	subs	r3, #5
 8002ade:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8002aea:	e04c      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d824      	bhi.n	8002b3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	3b23      	subs	r3, #35	; 0x23
 8002b06:	221f      	movs	r2, #31
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	400a      	ands	r2, r1
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b23      	subs	r3, #35	; 0x23
 8002b30:	fa00 f203 	lsl.w	r2, r0, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b3c:	e023      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b41      	subs	r3, #65	; 0x41
 8002b50:	221f      	movs	r2, #31
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	3b41      	subs	r3, #65	; 0x41
 8002b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_ADC_ConfigChannel+0x234>)
 8002b88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <HAL_ADC_ConfigChannel+0x238>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d109      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1cc>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b12      	cmp	r3, #18
 8002b9a:	d105      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a19      	ldr	r2, [pc, #100]	; (8002c14 <HAL_ADC_ConfigChannel+0x238>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d123      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x21e>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d003      	beq.n	8002bc2 <HAL_ADC_ConfigChannel+0x1e6>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b11      	cmp	r3, #17
 8002bc0:	d11b      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d111      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_ADC_ConfigChannel+0x23c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_ADC_ConfigChannel+0x240>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	0c9a      	lsrs	r2, r3, #18
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	40012300 	.word	0x40012300
 8002c14:	40012000 	.word	0x40012000
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	431bde83 	.word	0x431bde83

08002c20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c28:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <ADC_Init+0x1f0>)
 8002c2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	021a      	lsls	r2, r3, #8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	4a58      	ldr	r2, [pc, #352]	; (8002e14 <ADC_Init+0x1f4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d022      	beq.n	8002cfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6899      	ldr	r1, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6899      	ldr	r1, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	e00f      	b.n	8002d1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0202 	bic.w	r2, r2, #2
 8002d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7e1b      	ldrb	r3, [r3, #24]
 8002d38:	005a      	lsls	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	3b01      	subs	r3, #1
 8002d78:	035a      	lsls	r2, r3, #13
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	e007      	b.n	8002d94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	051a      	lsls	r2, r3, #20
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6899      	ldr	r1, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dd6:	025a      	lsls	r2, r3, #9
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6899      	ldr	r1, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	029a      	lsls	r2, r3, #10
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	609a      	str	r2, [r3, #8]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	40012300 	.word	0x40012300
 8002e14:	0f000001 	.word	0x0f000001

08002e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e34:	4013      	ands	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4a:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	60d3      	str	r3, [r2, #12]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <__NVIC_GetPriorityGrouping+0x18>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f003 0307 	and.w	r3, r3, #7
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	db0b      	blt.n	8002ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	4907      	ldr	r1, [pc, #28]	; (8002eb4 <__NVIC_EnableIRQ+0x38>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e100 	.word	0xe000e100

08002eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	490c      	ldr	r1, [pc, #48]	; (8002f04 <__NVIC_SetPriority+0x4c>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	440b      	add	r3, r1
 8002edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee0:	e00a      	b.n	8002ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4908      	ldr	r1, [pc, #32]	; (8002f08 <__NVIC_SetPriority+0x50>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000e100 	.word	0xe000e100
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf28      	it	cs
 8002f2a:	2304      	movcs	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d902      	bls.n	8002f3c <NVIC_EncodePriority+0x30>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <NVIC_EncodePriority+0x32>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f54:	f04f 31ff 	mov.w	r1, #4294967295
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	4313      	orrs	r3, r2
         );
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f84:	d301      	bcc.n	8002f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00f      	b.n	8002faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <SysTick_Config+0x40>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f92:	210f      	movs	r1, #15
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f7ff ff8e 	bl	8002eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <SysTick_Config+0x40>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <SysTick_Config+0x40>)
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	e000e010 	.word	0xe000e010

08002fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff29 	bl	8002e18 <__NVIC_SetPriorityGrouping>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe0:	f7ff ff3e 	bl	8002e60 <__NVIC_GetPriorityGrouping>
 8002fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7ff ff8e 	bl	8002f0c <NVIC_EncodePriority>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff5d 	bl	8002eb8 <__NVIC_SetPriority>
}
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff31 	bl	8002e7c <__NVIC_EnableIRQ>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ffa2 	bl	8002f74 <SysTick_Config>
 8003030:	4603      	mov	r3, r0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7ff fc30 	bl	80028ac <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e099      	b.n	800318c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003078:	e00f      	b.n	800309a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800307a:	f7ff fc17 	bl	80028ac <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b05      	cmp	r3, #5
 8003086:	d908      	bls.n	800309a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2203      	movs	r2, #3
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e078      	b.n	800318c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e8      	bne.n	800307a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4b38      	ldr	r3, [pc, #224]	; (8003194 <HAL_DMA_Init+0x158>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d107      	bne.n	8003104 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4313      	orrs	r3, r2
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0307 	bic.w	r3, r3, #7
 800311a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2b04      	cmp	r3, #4
 800312c:	d117      	bne.n	800315e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00e      	beq.n	800315e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fb01 	bl	8003748 <DMA_CheckFifoParam>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800315a:	2301      	movs	r3, #1
 800315c:	e016      	b.n	800318c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fab8 	bl	80036dc <DMA_CalcBaseAndBitshift>
 800316c:	4603      	mov	r3, r0
 800316e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	223f      	movs	r2, #63	; 0x3f
 8003176:	409a      	lsls	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	f010803f 	.word	0xf010803f

08003198 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_DMA_Start_IT+0x26>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e040      	b.n	8003240 <HAL_DMA_Start_IT+0xa8>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d12f      	bne.n	8003232 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2202      	movs	r2, #2
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fa4a 	bl	8003680 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	223f      	movs	r2, #63	; 0x3f
 80031f2:	409a      	lsls	r2, r3
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0216 	orr.w	r2, r2, #22
 8003206:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0208 	orr.w	r2, r2, #8
 800321e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e005      	b.n	800323e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800323a:	2302      	movs	r3, #2
 800323c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003256:	f7ff fb29 	bl	80028ac <HAL_GetTick>
 800325a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d008      	beq.n	800327a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e052      	b.n	8003320 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0216 	bic.w	r2, r2, #22
 8003288:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003298:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <HAL_DMA_Abort+0x62>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0208 	bic.w	r2, r2, #8
 80032b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0201 	bic.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ca:	e013      	b.n	80032f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032cc:	f7ff faee 	bl	80028ac <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d90c      	bls.n	80032f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2203      	movs	r2, #3
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e015      	b.n	8003320 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e4      	bne.n	80032cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	223f      	movs	r2, #63	; 0x3f
 8003308:	409a      	lsls	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d004      	beq.n	8003346 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e00c      	b.n	8003360 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2205      	movs	r2, #5
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003378:	4b8e      	ldr	r3, [pc, #568]	; (80035b4 <HAL_DMA_IRQHandler+0x248>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a8e      	ldr	r2, [pc, #568]	; (80035b8 <HAL_DMA_IRQHandler+0x24c>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0a9b      	lsrs	r3, r3, #10
 8003384:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	2208      	movs	r2, #8
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01a      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	2208      	movs	r2, #8
 80033c6:	409a      	lsls	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	2201      	movs	r2, #1
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d012      	beq.n	800340e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	2201      	movs	r2, #1
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0202 	orr.w	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	2204      	movs	r2, #4
 8003414:	409a      	lsls	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d012      	beq.n	8003444 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00b      	beq.n	8003444 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2204      	movs	r2, #4
 8003432:	409a      	lsls	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2210      	movs	r2, #16
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d043      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d03c      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	2210      	movs	r2, #16
 8003468:	409a      	lsls	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d018      	beq.n	80034ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d024      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
 800349a:	e01f      	b.n	80034dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01b      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
 80034ac:	e016      	b.n	80034dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0208 	bic.w	r2, r2, #8
 80034ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	2220      	movs	r2, #32
 80034e2:	409a      	lsls	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 808f 	beq.w	800360c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8087 	beq.w	800360c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	2220      	movs	r2, #32
 8003504:	409a      	lsls	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b05      	cmp	r3, #5
 8003514:	d136      	bne.n	8003584 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0216 	bic.w	r2, r2, #22
 8003524:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003534:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_DMA_IRQHandler+0x1da>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0208 	bic.w	r2, r2, #8
 8003554:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	223f      	movs	r2, #63	; 0x3f
 800355c:	409a      	lsls	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003576:	2b00      	cmp	r3, #0
 8003578:	d07e      	beq.n	8003678 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
        }
        return;
 8003582:	e079      	b.n	8003678 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01d      	beq.n	80035ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d031      	beq.n	800360c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
 80035b0:	e02c      	b.n	800360c <HAL_DMA_IRQHandler+0x2a0>
 80035b2:	bf00      	nop
 80035b4:	20000004 	.word	0x20000004
 80035b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d023      	beq.n	800360c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
 80035cc:	e01e      	b.n	800360c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10f      	bne.n	80035fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0210 	bic.w	r2, r2, #16
 80035ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	2b00      	cmp	r3, #0
 8003612:	d032      	beq.n	800367a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d022      	beq.n	8003666 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2205      	movs	r2, #5
 8003624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	3301      	adds	r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	429a      	cmp	r2, r3
 8003642:	d307      	bcc.n	8003654 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f2      	bne.n	8003638 <HAL_DMA_IRQHandler+0x2cc>
 8003652:	e000      	b.n	8003656 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003654:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
 8003676:	e000      	b.n	800367a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003678:	bf00      	nop
    }
  }
}
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800369c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d108      	bne.n	80036c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036be:	e007      	b.n	80036d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3b10      	subs	r3, #16
 80036ec:	4a14      	ldr	r2, [pc, #80]	; (8003740 <DMA_CalcBaseAndBitshift+0x64>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036f6:	4a13      	ldr	r2, [pc, #76]	; (8003744 <DMA_CalcBaseAndBitshift+0x68>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d909      	bls.n	800371e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	1d1a      	adds	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	659a      	str	r2, [r3, #88]	; 0x58
 800371c:	e007      	b.n	800372e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	aaaaaaab 	.word	0xaaaaaaab
 8003744:	08009708 	.word	0x08009708

08003748 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d11f      	bne.n	80037a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d856      	bhi.n	8003816 <DMA_CheckFifoParam+0xce>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <DMA_CheckFifoParam+0x28>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003781 	.word	0x08003781
 8003774:	08003793 	.word	0x08003793
 8003778:	08003781 	.word	0x08003781
 800377c:	08003817 	.word	0x08003817
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d046      	beq.n	800381a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e043      	b.n	800381a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800379a:	d140      	bne.n	800381e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a0:	e03d      	b.n	800381e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037aa:	d121      	bne.n	80037f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d837      	bhi.n	8003822 <DMA_CheckFifoParam+0xda>
 80037b2:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <DMA_CheckFifoParam+0x70>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	080037c9 	.word	0x080037c9
 80037bc:	080037cf 	.word	0x080037cf
 80037c0:	080037c9 	.word	0x080037c9
 80037c4:	080037e1 	.word	0x080037e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e030      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d025      	beq.n	8003826 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037de:	e022      	b.n	8003826 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037e8:	d11f      	bne.n	800382a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ee:	e01c      	b.n	800382a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d903      	bls.n	80037fe <DMA_CheckFifoParam+0xb6>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d003      	beq.n	8003804 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037fc:	e018      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      break;
 8003802:	e015      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00e      	beq.n	800382e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      break;
 8003814:	e00b      	b.n	800382e <DMA_CheckFifoParam+0xe6>
      break;
 8003816:	bf00      	nop
 8003818:	e00a      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
 800381c:	e008      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
 8003820:	e006      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
 8003824:	e004      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;   
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800382e:	bf00      	nop
    }
  } 
  
  return status; 
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e159      	b.n	8003b10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	f040 8148 	bne.w	8003b0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d005      	beq.n	8003892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388e:	2b02      	cmp	r3, #2
 8003890:	d130      	bne.n	80038f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	2203      	movs	r2, #3
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 0201 	and.w	r2, r3, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d017      	beq.n	8003930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d123      	bne.n	8003984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	08da      	lsrs	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3208      	adds	r2, #8
 800397e:	69b9      	ldr	r1, [r7, #24]
 8003980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a2 	beq.w	8003b0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <HAL_GPIO_Init+0x2e8>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	4a56      	ldr	r2, [pc, #344]	; (8003b28 <HAL_GPIO_Init+0x2e8>)
 80039d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d4:	6453      	str	r3, [r2, #68]	; 0x44
 80039d6:	4b54      	ldr	r3, [pc, #336]	; (8003b28 <HAL_GPIO_Init+0x2e8>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	4a52      	ldr	r2, [pc, #328]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a49      	ldr	r2, [pc, #292]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d019      	beq.n	8003a42 <HAL_GPIO_Init+0x202>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a48      	ldr	r2, [pc, #288]	; (8003b34 <HAL_GPIO_Init+0x2f4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_GPIO_Init+0x1fe>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a47      	ldr	r2, [pc, #284]	; (8003b38 <HAL_GPIO_Init+0x2f8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00d      	beq.n	8003a3a <HAL_GPIO_Init+0x1fa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a46      	ldr	r2, [pc, #280]	; (8003b3c <HAL_GPIO_Init+0x2fc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_Init+0x1f6>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a45      	ldr	r2, [pc, #276]	; (8003b40 <HAL_GPIO_Init+0x300>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_GPIO_Init+0x1f2>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e008      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a32:	2307      	movs	r3, #7
 8003a34:	e006      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a36:	2303      	movs	r3, #3
 8003a38:	e004      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e002      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a42:	2300      	movs	r3, #0
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f002 0203 	and.w	r2, r2, #3
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	4093      	lsls	r3, r2
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a54:	4935      	ldr	r1, [pc, #212]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a62:	4b38      	ldr	r3, [pc, #224]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a86:	4a2f      	ldr	r2, [pc, #188]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a8c:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab0:	4a24      	ldr	r2, [pc, #144]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ab6:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ada:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae0:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b04:	4a0f      	ldr	r2, [pc, #60]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	f67f aea2 	bls.w	800385c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40013800 	.word	0x40013800
 8003b30:	40020000 	.word	0x40020000
 8003b34:	40020400 	.word	0x40020400
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	40020c00 	.word	0x40020c00
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40013c00 	.word	0x40013c00

08003b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
 8003b54:	4613      	mov	r3, r2
 8003b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b64:	e003      	b.n	8003b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b66:	887b      	ldrh	r3, [r7, #2]
 8003b68:	041a      	lsls	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	619a      	str	r2, [r3, #24]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e12b      	b.n	8003de6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fe f9fa 	bl	8001f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2224      	movs	r2, #36	; 0x24
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003be0:	f000 fd80 	bl	80046e4 <HAL_RCC_GetPCLK1Freq>
 8003be4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4a81      	ldr	r2, [pc, #516]	; (8003df0 <HAL_I2C_Init+0x274>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d807      	bhi.n	8003c00 <HAL_I2C_Init+0x84>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a80      	ldr	r2, [pc, #512]	; (8003df4 <HAL_I2C_Init+0x278>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bf94      	ite	ls
 8003bf8:	2301      	movls	r3, #1
 8003bfa:	2300      	movhi	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e006      	b.n	8003c0e <HAL_I2C_Init+0x92>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a7d      	ldr	r2, [pc, #500]	; (8003df8 <HAL_I2C_Init+0x27c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	bf94      	ite	ls
 8003c08:	2301      	movls	r3, #1
 8003c0a:	2300      	movhi	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e0e7      	b.n	8003de6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a78      	ldr	r2, [pc, #480]	; (8003dfc <HAL_I2C_Init+0x280>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	0c9b      	lsrs	r3, r3, #18
 8003c20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	4a6a      	ldr	r2, [pc, #424]	; (8003df0 <HAL_I2C_Init+0x274>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d802      	bhi.n	8003c50 <HAL_I2C_Init+0xd4>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	e009      	b.n	8003c64 <HAL_I2C_Init+0xe8>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	4a69      	ldr	r2, [pc, #420]	; (8003e00 <HAL_I2C_Init+0x284>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	3301      	adds	r3, #1
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	495c      	ldr	r1, [pc, #368]	; (8003df0 <HAL_I2C_Init+0x274>)
 8003c80:	428b      	cmp	r3, r1
 8003c82:	d819      	bhi.n	8003cb8 <HAL_I2C_Init+0x13c>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1e59      	subs	r1, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c92:	1c59      	adds	r1, r3, #1
 8003c94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c98:	400b      	ands	r3, r1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_I2C_Init+0x138>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1e59      	subs	r1, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb2:	e051      	b.n	8003d58 <HAL_I2C_Init+0x1dc>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	e04f      	b.n	8003d58 <HAL_I2C_Init+0x1dc>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d111      	bne.n	8003ce4 <HAL_I2C_Init+0x168>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1e58      	subs	r0, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	440b      	add	r3, r1
 8003cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf0c      	ite	eq
 8003cdc:	2301      	moveq	r3, #1
 8003cde:	2300      	movne	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e012      	b.n	8003d0a <HAL_I2C_Init+0x18e>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1e58      	subs	r0, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	0099      	lsls	r1, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Init+0x196>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e022      	b.n	8003d58 <HAL_I2C_Init+0x1dc>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10e      	bne.n	8003d38 <HAL_I2C_Init+0x1bc>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1e58      	subs	r0, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6859      	ldr	r1, [r3, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	440b      	add	r3, r1
 8003d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d36:	e00f      	b.n	8003d58 <HAL_I2C_Init+0x1dc>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1e58      	subs	r0, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	0099      	lsls	r1, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	6809      	ldr	r1, [r1, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6911      	ldr	r1, [r2, #16]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68d2      	ldr	r2, [r2, #12]
 8003d92:	4311      	orrs	r1, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	000186a0 	.word	0x000186a0
 8003df4:	001e847f 	.word	0x001e847f
 8003df8:	003d08ff 	.word	0x003d08ff
 8003dfc:	431bde83 	.word	0x431bde83
 8003e00:	10624dd3 	.word	0x10624dd3

08003e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e267      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d075      	beq.n	8003f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e22:	4b88      	ldr	r3, [pc, #544]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d00c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2e:	4b85      	ldr	r3, [pc, #532]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d112      	bne.n	8003e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e3a:	4b82      	ldr	r3, [pc, #520]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e46:	d10b      	bne.n	8003e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	4b7e      	ldr	r3, [pc, #504]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d05b      	beq.n	8003f0c <HAL_RCC_OscConfig+0x108>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d157      	bne.n	8003f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e242      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e68:	d106      	bne.n	8003e78 <HAL_RCC_OscConfig+0x74>
 8003e6a:	4b76      	ldr	r3, [pc, #472]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a75      	ldr	r2, [pc, #468]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e01d      	b.n	8003eb4 <HAL_RCC_OscConfig+0xb0>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x98>
 8003e82:	4b70      	ldr	r3, [pc, #448]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a6f      	ldr	r2, [pc, #444]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b6d      	ldr	r3, [pc, #436]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a6c      	ldr	r2, [pc, #432]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCC_OscConfig+0xb0>
 8003e9c:	4b69      	ldr	r3, [pc, #420]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a68      	ldr	r2, [pc, #416]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b66      	ldr	r3, [pc, #408]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a65      	ldr	r2, [pc, #404]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d013      	beq.n	8003ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fcf6 	bl	80028ac <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fe fcf2 	bl	80028ac <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e207      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	4b5b      	ldr	r3, [pc, #364]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0xc0>
 8003ee2:	e014      	b.n	8003f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fce2 	bl	80028ac <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eec:	f7fe fcde 	bl	80028ac <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e1f3      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efe:	4b51      	ldr	r3, [pc, #324]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0xe8>
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d063      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f1a:	4b4a      	ldr	r3, [pc, #296]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f26:	4b47      	ldr	r3, [pc, #284]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d11c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f32:	4b44      	ldr	r3, [pc, #272]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d116      	bne.n	8003f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3e:	4b41      	ldr	r3, [pc, #260]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_RCC_OscConfig+0x152>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e1c7      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f56:	4b3b      	ldr	r3, [pc, #236]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4937      	ldr	r1, [pc, #220]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	e03a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d020      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f74:	4b34      	ldr	r3, [pc, #208]	; (8004048 <HAL_RCC_OscConfig+0x244>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fe fc97 	bl	80028ac <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fe fc93 	bl	80028ac <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e1a8      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	4b2b      	ldr	r3, [pc, #172]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa0:	4b28      	ldr	r3, [pc, #160]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4925      	ldr	r1, [pc, #148]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]
 8003fb4:	e015      	b.n	8003fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb6:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_RCC_OscConfig+0x244>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fc76 	bl	80028ac <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc4:	f7fe fc72 	bl	80028ac <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e187      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d036      	beq.n	800405c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_RCC_OscConfig+0x248>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fe fc56 	bl	80028ac <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004004:	f7fe fc52 	bl	80028ac <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e167      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_RCC_OscConfig+0x240>)
 8004018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x200>
 8004022:	e01b      	b.n	800405c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004024:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RCC_OscConfig+0x248>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402a:	f7fe fc3f 	bl	80028ac <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004030:	e00e      	b.n	8004050 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004032:	f7fe fc3b 	bl	80028ac <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d907      	bls.n	8004050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e150      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
 8004044:	40023800 	.word	0x40023800
 8004048:	42470000 	.word	0x42470000
 800404c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004050:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1ea      	bne.n	8004032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8097 	beq.w	8004198 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406a:	2300      	movs	r3, #0
 800406c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800406e:	4b81      	ldr	r3, [pc, #516]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10f      	bne.n	800409a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	4b7d      	ldr	r3, [pc, #500]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	4a7c      	ldr	r2, [pc, #496]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004088:	6413      	str	r3, [r2, #64]	; 0x40
 800408a:	4b7a      	ldr	r3, [pc, #488]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004096:	2301      	movs	r3, #1
 8004098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409a:	4b77      	ldr	r3, [pc, #476]	; (8004278 <HAL_RCC_OscConfig+0x474>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d118      	bne.n	80040d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a6:	4b74      	ldr	r3, [pc, #464]	; (8004278 <HAL_RCC_OscConfig+0x474>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a73      	ldr	r2, [pc, #460]	; (8004278 <HAL_RCC_OscConfig+0x474>)
 80040ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b2:	f7fe fbfb 	bl	80028ac <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ba:	f7fe fbf7 	bl	80028ac <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e10c      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	4b6a      	ldr	r3, [pc, #424]	; (8004278 <HAL_RCC_OscConfig+0x474>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d106      	bne.n	80040ee <HAL_RCC_OscConfig+0x2ea>
 80040e0:	4b64      	ldr	r3, [pc, #400]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	4a63      	ldr	r2, [pc, #396]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	6713      	str	r3, [r2, #112]	; 0x70
 80040ec:	e01c      	b.n	8004128 <HAL_RCC_OscConfig+0x324>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d10c      	bne.n	8004110 <HAL_RCC_OscConfig+0x30c>
 80040f6:	4b5f      	ldr	r3, [pc, #380]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	4a5e      	ldr	r2, [pc, #376]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 80040fc:	f043 0304 	orr.w	r3, r3, #4
 8004100:	6713      	str	r3, [r2, #112]	; 0x70
 8004102:	4b5c      	ldr	r3, [pc, #368]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	4a5b      	ldr	r2, [pc, #364]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	6713      	str	r3, [r2, #112]	; 0x70
 800410e:	e00b      	b.n	8004128 <HAL_RCC_OscConfig+0x324>
 8004110:	4b58      	ldr	r3, [pc, #352]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	4a57      	ldr	r2, [pc, #348]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	6713      	str	r3, [r2, #112]	; 0x70
 800411c:	4b55      	ldr	r3, [pc, #340]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	4a54      	ldr	r2, [pc, #336]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004122:	f023 0304 	bic.w	r3, r3, #4
 8004126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d015      	beq.n	800415c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004130:	f7fe fbbc 	bl	80028ac <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004136:	e00a      	b.n	800414e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004138:	f7fe fbb8 	bl	80028ac <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f241 3288 	movw	r2, #5000	; 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e0cb      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414e:	4b49      	ldr	r3, [pc, #292]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0ee      	beq.n	8004138 <HAL_RCC_OscConfig+0x334>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415c:	f7fe fba6 	bl	80028ac <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004162:	e00a      	b.n	800417a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fe fba2 	bl	80028ac <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e0b5      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417a:	4b3e      	ldr	r3, [pc, #248]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ee      	bne.n	8004164 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004186:	7dfb      	ldrb	r3, [r7, #23]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418c:	4b39      	ldr	r3, [pc, #228]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	4a38      	ldr	r2, [pc, #224]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004196:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80a1 	beq.w	80042e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a2:	4b34      	ldr	r3, [pc, #208]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d05c      	beq.n	8004268 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d141      	bne.n	800423a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	4b31      	ldr	r3, [pc, #196]	; (800427c <HAL_RCC_OscConfig+0x478>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fe fb76 	bl	80028ac <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c4:	f7fe fb72 	bl	80028ac <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e087      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d6:	4b27      	ldr	r3, [pc, #156]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	019b      	lsls	r3, r3, #6
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	3b01      	subs	r3, #1
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	491b      	ldr	r1, [pc, #108]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 8004208:	4313      	orrs	r3, r2
 800420a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800420c:	4b1b      	ldr	r3, [pc, #108]	; (800427c <HAL_RCC_OscConfig+0x478>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fe fb4b 	bl	80028ac <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421a:	f7fe fb47 	bl	80028ac <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e05c      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422c:	4b11      	ldr	r3, [pc, #68]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x416>
 8004238:	e054      	b.n	80042e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423a:	4b10      	ldr	r3, [pc, #64]	; (800427c <HAL_RCC_OscConfig+0x478>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fe fb34 	bl	80028ac <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004248:	f7fe fb30 	bl	80028ac <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e045      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_RCC_OscConfig+0x470>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x444>
 8004266:	e03d      	b.n	80042e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d107      	bne.n	8004280 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e038      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
 8004274:	40023800 	.word	0x40023800
 8004278:	40007000 	.word	0x40007000
 800427c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_RCC_OscConfig+0x4ec>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d028      	beq.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d121      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d11a      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042b0:	4013      	ands	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d111      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	3b01      	subs	r3, #1
 80042ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800

080042f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0cc      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b68      	ldr	r3, [pc, #416]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d90c      	bls.n	8004330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b65      	ldr	r3, [pc, #404]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b63      	ldr	r3, [pc, #396]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0b8      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004348:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4a58      	ldr	r2, [pc, #352]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004360:	4b53      	ldr	r3, [pc, #332]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4a52      	ldr	r2, [pc, #328]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800436a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800436c:	4b50      	ldr	r3, [pc, #320]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	494d      	ldr	r1, [pc, #308]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d044      	beq.n	8004414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d119      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e07f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d003      	beq.n	80043b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b3f      	ldr	r3, [pc, #252]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e06f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e067      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4934      	ldr	r1, [pc, #208]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e4:	f7fe fa62 	bl	80028ac <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ec:	f7fe fa5e 	bl	80028ac <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e04f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 020c 	and.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	429a      	cmp	r2, r3
 8004412:	d1eb      	bne.n	80043ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004414:	4b25      	ldr	r3, [pc, #148]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d20c      	bcs.n	800443c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e032      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004448:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4916      	ldr	r1, [pc, #88]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004466:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	490e      	ldr	r1, [pc, #56]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800447a:	f000 f821 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 800447e:	4602      	mov	r2, r0
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	490a      	ldr	r1, [pc, #40]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 800448c:	5ccb      	ldrb	r3, [r1, r3]
 800448e:	fa22 f303 	lsr.w	r3, r2, r3
 8004492:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe f9c2 	bl	8002824 <HAL_InitTick>

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00
 80044b0:	40023800 	.word	0x40023800
 80044b4:	080096f0 	.word	0x080096f0
 80044b8:	20000004 	.word	0x20000004
 80044bc:	20000008 	.word	0x20000008

080044c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c4:	b094      	sub	sp, #80	; 0x50
 80044c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	647b      	str	r3, [r7, #68]	; 0x44
 80044cc:	2300      	movs	r3, #0
 80044ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044d0:	2300      	movs	r3, #0
 80044d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d8:	4b79      	ldr	r3, [pc, #484]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d00d      	beq.n	8004500 <HAL_RCC_GetSysClockFreq+0x40>
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	f200 80e1 	bhi.w	80046ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x34>
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d003      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0x3a>
 80044f2:	e0db      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f4:	4b73      	ldr	r3, [pc, #460]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80044f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044f8:	e0db      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044fa:	4b73      	ldr	r3, [pc, #460]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80044fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044fe:	e0d8      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004500:	4b6f      	ldr	r3, [pc, #444]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004508:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800450a:	4b6d      	ldr	r3, [pc, #436]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d063      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004516:	4b6a      	ldr	r3, [pc, #424]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	099b      	lsrs	r3, r3, #6
 800451c:	2200      	movs	r2, #0
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004520:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
 800452a:	2300      	movs	r3, #0
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
 800452e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004532:	4622      	mov	r2, r4
 8004534:	462b      	mov	r3, r5
 8004536:	f04f 0000 	mov.w	r0, #0
 800453a:	f04f 0100 	mov.w	r1, #0
 800453e:	0159      	lsls	r1, r3, #5
 8004540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004544:	0150      	lsls	r0, r2, #5
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4621      	mov	r1, r4
 800454c:	1a51      	subs	r1, r2, r1
 800454e:	6139      	str	r1, [r7, #16]
 8004550:	4629      	mov	r1, r5
 8004552:	eb63 0301 	sbc.w	r3, r3, r1
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004564:	4659      	mov	r1, fp
 8004566:	018b      	lsls	r3, r1, #6
 8004568:	4651      	mov	r1, sl
 800456a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800456e:	4651      	mov	r1, sl
 8004570:	018a      	lsls	r2, r1, #6
 8004572:	4651      	mov	r1, sl
 8004574:	ebb2 0801 	subs.w	r8, r2, r1
 8004578:	4659      	mov	r1, fp
 800457a:	eb63 0901 	sbc.w	r9, r3, r1
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800458a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004592:	4690      	mov	r8, r2
 8004594:	4699      	mov	r9, r3
 8004596:	4623      	mov	r3, r4
 8004598:	eb18 0303 	adds.w	r3, r8, r3
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	462b      	mov	r3, r5
 80045a0:	eb49 0303 	adc.w	r3, r9, r3
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045b2:	4629      	mov	r1, r5
 80045b4:	024b      	lsls	r3, r1, #9
 80045b6:	4621      	mov	r1, r4
 80045b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045bc:	4621      	mov	r1, r4
 80045be:	024a      	lsls	r2, r1, #9
 80045c0:	4610      	mov	r0, r2
 80045c2:	4619      	mov	r1, r3
 80045c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c6:	2200      	movs	r2, #0
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045d0:	f7fc faf2 	bl	8000bb8 <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4613      	mov	r3, r2
 80045da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045dc:	e058      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045de:	4b38      	ldr	r3, [pc, #224]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	099b      	lsrs	r3, r3, #6
 80045e4:	2200      	movs	r2, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	4611      	mov	r1, r2
 80045ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	2300      	movs	r3, #0
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
 80045f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f8:	4642      	mov	r2, r8
 80045fa:	464b      	mov	r3, r9
 80045fc:	f04f 0000 	mov.w	r0, #0
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	0159      	lsls	r1, r3, #5
 8004606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800460a:	0150      	lsls	r0, r2, #5
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4641      	mov	r1, r8
 8004612:	ebb2 0a01 	subs.w	sl, r2, r1
 8004616:	4649      	mov	r1, r9
 8004618:	eb63 0b01 	sbc.w	fp, r3, r1
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004628:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800462c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004630:	ebb2 040a 	subs.w	r4, r2, sl
 8004634:	eb63 050b 	sbc.w	r5, r3, fp
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	00eb      	lsls	r3, r5, #3
 8004642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004646:	00e2      	lsls	r2, r4, #3
 8004648:	4614      	mov	r4, r2
 800464a:	461d      	mov	r5, r3
 800464c:	4643      	mov	r3, r8
 800464e:	18e3      	adds	r3, r4, r3
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	464b      	mov	r3, r9
 8004654:	eb45 0303 	adc.w	r3, r5, r3
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004666:	4629      	mov	r1, r5
 8004668:	028b      	lsls	r3, r1, #10
 800466a:	4621      	mov	r1, r4
 800466c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004670:	4621      	mov	r1, r4
 8004672:	028a      	lsls	r2, r1, #10
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467a:	2200      	movs	r2, #0
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	61fa      	str	r2, [r7, #28]
 8004680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004684:	f7fc fa98 	bl	8000bb8 <__aeabi_uldivmod>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4613      	mov	r3, r2
 800468e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	0c1b      	lsrs	r3, r3, #16
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	3301      	adds	r3, #1
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046aa:	e002      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80046ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3750      	adds	r7, #80	; 0x50
 80046b8:	46bd      	mov	sp, r7
 80046ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800
 80046c4:	00f42400 	.word	0x00f42400
 80046c8:	007a1200 	.word	0x007a1200

080046cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d0:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d2:	681b      	ldr	r3, [r3, #0]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000004 	.word	0x20000004

080046e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046e8:	f7ff fff0 	bl	80046cc <HAL_RCC_GetHCLKFreq>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	0a9b      	lsrs	r3, r3, #10
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	4903      	ldr	r1, [pc, #12]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fa:	5ccb      	ldrb	r3, [r1, r3]
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40023800 	.word	0x40023800
 8004708:	08009700 	.word	0x08009700

0800470c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004710:	f7ff ffdc 	bl	80046cc <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0b5b      	lsrs	r3, r3, #13
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4903      	ldr	r1, [pc, #12]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40023800 	.word	0x40023800
 8004730:	08009700 	.word	0x08009700

08004734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e07b      	b.n	800483e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	2b00      	cmp	r3, #0
 800474c:	d108      	bne.n	8004760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004756:	d009      	beq.n	800476c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	61da      	str	r2, [r3, #28]
 800475e:	e005      	b.n	800476c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fd fc50 	bl	800202c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f0:	ea42 0103 	orr.w	r1, r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	f003 0104 	and.w	r1, r3, #4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	f003 0210 	and.w	r2, r3, #16
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800482c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b088      	sub	sp, #32
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	603b      	str	r3, [r7, #0]
 8004852:	4613      	mov	r3, r2
 8004854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_SPI_Transmit+0x22>
 8004864:	2302      	movs	r3, #2
 8004866:	e126      	b.n	8004ab6 <HAL_SPI_Transmit+0x270>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004870:	f7fe f81c 	bl	80028ac <HAL_GetTick>
 8004874:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d002      	beq.n	800488c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004886:	2302      	movs	r3, #2
 8004888:	77fb      	strb	r3, [r7, #31]
    goto error;
 800488a:	e10b      	b.n	8004aa4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_SPI_Transmit+0x52>
 8004892:	88fb      	ldrh	r3, [r7, #6]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800489c:	e102      	b.n	8004aa4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2203      	movs	r2, #3
 80048a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e4:	d10f      	bne.n	8004906 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004904:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d007      	beq.n	8004924 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492c:	d14b      	bne.n	80049c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_SPI_Transmit+0xf6>
 8004936:	8afb      	ldrh	r3, [r7, #22]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d13e      	bne.n	80049ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004960:	e02b      	b.n	80049ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b02      	cmp	r3, #2
 800496e:	d112      	bne.n	8004996 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	881a      	ldrh	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	1c9a      	adds	r2, r3, #2
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	86da      	strh	r2, [r3, #54]	; 0x36
 8004994:	e011      	b.n	80049ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004996:	f7fd ff89 	bl	80028ac <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d803      	bhi.n	80049ae <HAL_SPI_Transmit+0x168>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d102      	bne.n	80049b4 <HAL_SPI_Transmit+0x16e>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049b8:	e074      	b.n	8004aa4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1ce      	bne.n	8004962 <HAL_SPI_Transmit+0x11c>
 80049c4:	e04c      	b.n	8004a60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Transmit+0x18e>
 80049ce:	8afb      	ldrh	r3, [r7, #22]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d140      	bne.n	8004a56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049fa:	e02c      	b.n	8004a56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d113      	bne.n	8004a32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	7812      	ldrb	r2, [r2, #0]
 8004a16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a30:	e011      	b.n	8004a56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a32:	f7fd ff3b 	bl	80028ac <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d803      	bhi.n	8004a4a <HAL_SPI_Transmit+0x204>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d102      	bne.n	8004a50 <HAL_SPI_Transmit+0x20a>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a54:	e026      	b.n	8004aa4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1cd      	bne.n	80049fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	6839      	ldr	r1, [r7, #0]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fa55 	bl	8004f14 <SPI_EndRxTxTransaction>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e000      	b.n	8004aa4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004aa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ab4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b08c      	sub	sp, #48	; 0x30
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004acc:	2301      	movs	r3, #1
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x26>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e18a      	b.n	8004dfa <HAL_SPI_TransmitReceive+0x33c>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aec:	f7fd fede 	bl	80028ac <HAL_GetTick>
 8004af0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b02:	887b      	ldrh	r3, [r7, #2]
 8004b04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d00f      	beq.n	8004b2e <HAL_SPI_TransmitReceive+0x70>
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b14:	d107      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x68>
 8004b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d003      	beq.n	8004b2e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
 8004b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b2c:	e15b      	b.n	8004de6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_SPI_TransmitReceive+0x82>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_SPI_TransmitReceive+0x82>
 8004b3a:	887b      	ldrh	r3, [r7, #2]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b46:	e14e      	b.n	8004de6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d003      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2205      	movs	r2, #5
 8004b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	887a      	ldrh	r2, [r7, #2]
 8004b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	887a      	ldrh	r2, [r7, #2]
 8004b72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	887a      	ldrh	r2, [r7, #2]
 8004b7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d007      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb8:	d178      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x10a>
 8004bc2:	8b7b      	ldrh	r3, [r7, #26]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d166      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	881a      	ldrh	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	1c9a      	adds	r2, r3, #2
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bec:	e053      	b.n	8004c96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d11b      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x176>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x176>
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d113      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	881a      	ldrh	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	1c9a      	adds	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d119      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x1b8>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d014      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	b292      	uxth	r2, r2
 8004c58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	1c9a      	adds	r2, r3, #2
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c72:	2301      	movs	r3, #1
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c76:	f7fd fe19 	bl	80028ac <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d807      	bhi.n	8004c96 <HAL_SPI_TransmitReceive+0x1d8>
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d003      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c94:	e0a7      	b.n	8004de6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1a6      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x130>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1a1      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x130>
 8004caa:	e07c      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SPI_TransmitReceive+0x1fc>
 8004cb4:	8b7b      	ldrh	r3, [r7, #26]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d16b      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	7812      	ldrb	r2, [r2, #0]
 8004cc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce0:	e057      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d11c      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x26c>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d017      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x26c>
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d114      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d119      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x2ae>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d014      	beq.n	8004d6c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d6c:	f7fd fd9e 	bl	80028ac <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d803      	bhi.n	8004d84 <HAL_SPI_TransmitReceive+0x2c6>
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d102      	bne.n	8004d8a <HAL_SPI_TransmitReceive+0x2cc>
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d103      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d90:	e029      	b.n	8004de6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1a2      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x224>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d19d      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f8b2 	bl	8004f14 <SPI_EndRxTxTransaction>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004dc2:	e010      	b.n	8004de6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10b      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	e000      	b.n	8004de6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004de4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004df6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3730      	adds	r7, #48	; 0x30
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e14:	f7fd fd4a 	bl	80028ac <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	4413      	add	r3, r2
 8004e22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e24:	f7fd fd42 	bl	80028ac <HAL_GetTick>
 8004e28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e2a:	4b39      	ldr	r3, [pc, #228]	; (8004f10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	015b      	lsls	r3, r3, #5
 8004e30:	0d1b      	lsrs	r3, r3, #20
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e3a:	e054      	b.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d050      	beq.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e44:	f7fd fd32 	bl	80028ac <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d902      	bls.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d13d      	bne.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e72:	d111      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7c:	d004      	beq.n	8004e88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e86:	d107      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea0:	d10f      	bne.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e017      	b.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	bf0c      	ite	eq
 8004ef6:	2301      	moveq	r3, #1
 8004ef8:	2300      	movne	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d19b      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000004 	.word	0x20000004

08004f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <SPI_EndRxTxTransaction+0x7c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1b      	ldr	r2, [pc, #108]	; (8004f94 <SPI_EndRxTxTransaction+0x80>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	0d5b      	lsrs	r3, r3, #21
 8004f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f30:	fb02 f303 	mul.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f3e:	d112      	bne.n	8004f66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	2180      	movs	r1, #128	; 0x80
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff ff5a 	bl	8004e04 <SPI_WaitFlagStateUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d016      	beq.n	8004f84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e00f      	b.n	8004f86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7c:	2b80      	cmp	r3, #128	; 0x80
 8004f7e:	d0f2      	beq.n	8004f66 <SPI_EndRxTxTransaction+0x52>
 8004f80:	e000      	b.n	8004f84 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f82:	bf00      	nop
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000004 	.word	0x20000004
 8004f94:	165e9f81 	.word	0x165e9f81

08004f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e041      	b.n	800502e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fd f8d2 	bl	8002168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f000 f9fe 	bl	80053d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d001      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e044      	b.n	80050da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d018      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507a:	d013      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x6c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1a      	ldr	r2, [pc, #104]	; (80050ec <HAL_TIM_Base_Start_IT+0xb4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a19      	ldr	r2, [pc, #100]	; (80050f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a17      	ldr	r2, [pc, #92]	; (80050f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_TIM_Base_Start_IT+0x6c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a16      	ldr	r2, [pc, #88]	; (80050f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d111      	bne.n	80050c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b06      	cmp	r3, #6
 80050b4:	d010      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c6:	e007      	b.n	80050d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800
 80050f4:	40000c00 	.word	0x40000c00
 80050f8:	40014000 	.word	0x40014000

080050fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6a1a      	ldr	r2, [r3, #32]
 800511a:	f241 1311 	movw	r3, #4369	; 0x1111
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10f      	bne.n	8005144 <HAL_TIM_Base_Stop_IT+0x48>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	f240 4344 	movw	r3, #1092	; 0x444
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_TIM_Base_Stop_IT+0x48>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b02      	cmp	r3, #2
 800516e:	d122      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b02      	cmp	r3, #2
 800517c:	d11b      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f06f 0202 	mvn.w	r2, #2
 8005186:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f8ee 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 80051a2:	e005      	b.n	80051b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f8e0 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8f1 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d122      	bne.n	800520a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d11b      	bne.n	800520a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f06f 0204 	mvn.w	r2, #4
 80051da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8c4 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 80051f6:	e005      	b.n	8005204 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f8b6 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8c7 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b08      	cmp	r3, #8
 8005216:	d122      	bne.n	800525e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b08      	cmp	r3, #8
 8005224:	d11b      	bne.n	800525e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f06f 0208 	mvn.w	r2, #8
 800522e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2204      	movs	r2, #4
 8005234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f89a 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 800524a:	e005      	b.n	8005258 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f88c 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f89d 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b10      	cmp	r3, #16
 800526a:	d122      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2b10      	cmp	r3, #16
 8005278:	d11b      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f06f 0210 	mvn.w	r2, #16
 8005282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2208      	movs	r2, #8
 8005288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f870 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 800529e:	e005      	b.n	80052ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f862 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f873 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d10e      	bne.n	80052de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f06f 0201 	mvn.w	r2, #1
 80052d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7fc faf9 	bl	80018d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	2b80      	cmp	r3, #128	; 0x80
 80052ea:	d10e      	bne.n	800530a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	d107      	bne.n	800530a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f8f1 	bl	80054ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d10e      	bne.n	8005336 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d107      	bne.n	8005336 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800532e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f838 	bl	80053a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b20      	cmp	r3, #32
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b20      	cmp	r3, #32
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0220 	mvn.w	r2, #32
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f8bb 	bl	80054d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  return htim->State;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a34      	ldr	r2, [pc, #208]	; (80054bc <TIM_Base_SetConfig+0xe4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00f      	beq.n	8005410 <TIM_Base_SetConfig+0x38>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f6:	d00b      	beq.n	8005410 <TIM_Base_SetConfig+0x38>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a31      	ldr	r2, [pc, #196]	; (80054c0 <TIM_Base_SetConfig+0xe8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d007      	beq.n	8005410 <TIM_Base_SetConfig+0x38>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a30      	ldr	r2, [pc, #192]	; (80054c4 <TIM_Base_SetConfig+0xec>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_Base_SetConfig+0x38>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a2f      	ldr	r2, [pc, #188]	; (80054c8 <TIM_Base_SetConfig+0xf0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d108      	bne.n	8005422 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a25      	ldr	r2, [pc, #148]	; (80054bc <TIM_Base_SetConfig+0xe4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d01b      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d017      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a22      	ldr	r2, [pc, #136]	; (80054c0 <TIM_Base_SetConfig+0xe8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a21      	ldr	r2, [pc, #132]	; (80054c4 <TIM_Base_SetConfig+0xec>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00f      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a20      	ldr	r2, [pc, #128]	; (80054c8 <TIM_Base_SetConfig+0xf0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00b      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a1f      	ldr	r2, [pc, #124]	; (80054cc <TIM_Base_SetConfig+0xf4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <TIM_Base_SetConfig+0xf8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <TIM_Base_SetConfig+0xfc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d108      	bne.n	8005474 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a08      	ldr	r2, [pc, #32]	; (80054bc <TIM_Base_SetConfig+0xe4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d103      	bne.n	80054a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	615a      	str	r2, [r3, #20]
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40000800 	.word	0x40000800
 80054c8:	40000c00 	.word	0x40000c00
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800

080054d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e03f      	b.n	8005592 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fc fe46 	bl	80021b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	; 0x24
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 ff5f 	bl	8006408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b08a      	sub	sp, #40	; 0x28
 800559e:	af02      	add	r7, sp, #8
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d17c      	bne.n	80056b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <HAL_UART_Transmit+0x2c>
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e075      	b.n	80056b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_UART_Transmit+0x3e>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e06e      	b.n	80056b6 <HAL_UART_Transmit+0x11c>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2221      	movs	r2, #33	; 0x21
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055ee:	f7fd f95d 	bl	80028ac <HAL_GetTick>
 80055f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	88fa      	ldrh	r2, [r7, #6]
 80055f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	88fa      	ldrh	r2, [r7, #6]
 80055fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005608:	d108      	bne.n	800561c <HAL_UART_Transmit+0x82>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	e003      	b.n	8005624 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005620:	2300      	movs	r3, #0
 8005622:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800562c:	e02a      	b.n	8005684 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	2180      	movs	r1, #128	; 0x80
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fc17 	bl	8005e6c <UART_WaitOnFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e036      	b.n	80056b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10b      	bne.n	8005666 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800565c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	3302      	adds	r3, #2
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	e007      	b.n	8005676 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	3301      	adds	r3, #1
 8005674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1cf      	bne.n	800562e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	2140      	movs	r1, #64	; 0x40
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fbe7 	bl	8005e6c <UART_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e006      	b.n	80056b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e000      	b.n	80056b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056b4:	2302      	movs	r3, #2
  }
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	4613      	mov	r3, r2
 80056ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d11d      	bne.n	8005714 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_UART_Receive_DMA+0x26>
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e016      	b.n	8005716 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_UART_Receive_DMA+0x38>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e00f      	b.n	8005716 <HAL_UART_Receive_DMA+0x58>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	461a      	mov	r2, r3
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 fc1c 	bl	8005f48 <UART_Start_Receive_DMA>
 8005710:	4603      	mov	r3, r0
 8005712:	e000      	b.n	8005716 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b0ba      	sub	sp, #232	; 0xe8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005746:	2300      	movs	r3, #0
 8005748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800574c:	2300      	movs	r3, #0
 800574e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800575e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10f      	bne.n	8005786 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_UART_IRQHandler+0x66>
 8005772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fd87 	bl	8006292 <UART_Receive_IT>
      return;
 8005784:	e256      	b.n	8005c34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80de 	beq.w	800594c <HAL_UART_IRQHandler+0x22c>
 8005790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80d1 	beq.w	800594c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <HAL_UART_IRQHandler+0xae>
 80057b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f043 0201 	orr.w	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_UART_IRQHandler+0xd2>
 80057da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f043 0202 	orr.w	r2, r3, #2
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_UART_IRQHandler+0xf6>
 80057fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	f043 0204 	orr.w	r2, r3, #4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d011      	beq.n	8005846 <HAL_UART_IRQHandler+0x126>
 8005822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800582e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f043 0208 	orr.w	r2, r3, #8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 81ed 	beq.w	8005c2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_UART_IRQHandler+0x14e>
 800585c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fd12 	bl	8006292 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	bf0c      	ite	eq
 800587c:	2301      	moveq	r3, #1
 800587e:	2300      	movne	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <HAL_UART_IRQHandler+0x17a>
 8005892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d04f      	beq.n	800593a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fc1a 	bl	80060d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d141      	bne.n	8005932 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3314      	adds	r3, #20
 80058b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1d9      	bne.n	80058ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d013      	beq.n	800592a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	4a7d      	ldr	r2, [pc, #500]	; (8005afc <HAL_UART_IRQHandler+0x3dc>)
 8005908:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	4618      	mov	r0, r3
 8005910:	f7fd fd0a 	bl	8003328 <HAL_DMA_Abort_IT>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d016      	beq.n	8005948 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005924:	4610      	mov	r0, r2
 8005926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005928:	e00e      	b.n	8005948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f990 	bl	8005c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	e00a      	b.n	8005948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f98c 	bl	8005c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	e006      	b.n	8005948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f988 	bl	8005c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005946:	e170      	b.n	8005c2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	bf00      	nop
    return;
 800594a:	e16e      	b.n	8005c2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	2b01      	cmp	r3, #1
 8005952:	f040 814a 	bne.w	8005bea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 8143 	beq.w	8005bea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 813c 	beq.w	8005bea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005972:	2300      	movs	r3, #0
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	f040 80b4 	bne.w	8005b00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8140 	beq.w	8005c2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059b6:	429a      	cmp	r2, r3
 80059b8:	f080 8139 	bcs.w	8005c2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ce:	f000 8088 	beq.w	8005ae2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	330c      	adds	r3, #12
 80059d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	330c      	adds	r3, #12
 80059fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1d9      	bne.n	80059d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e1      	bne.n	8005a1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3314      	adds	r3, #20
 8005a60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3314      	adds	r3, #20
 8005a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e3      	bne.n	8005a5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab2:	f023 0310 	bic.w	r3, r3, #16
 8005ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ac4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ac6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005aca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e3      	bne.n	8005aa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fd fbb3 	bl	8003248 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f8b6 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005af8:	e099      	b.n	8005c2e <HAL_UART_IRQHandler+0x50e>
 8005afa:	bf00      	nop
 8005afc:	0800619b 	.word	0x0800619b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 808b 	beq.w	8005c32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8086 	beq.w	8005c32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8005b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e3      	bne.n	8005b26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3314      	adds	r3, #20
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b82:	633a      	str	r2, [r7, #48]	; 0x30
 8005b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e3      	bne.n	8005b5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0310 	bic.w	r3, r3, #16
 8005bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005bc8:	61fa      	str	r2, [r7, #28]
 8005bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	69b9      	ldr	r1, [r7, #24]
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e3      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f83e 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005be8:	e023      	b.n	8005c32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_UART_IRQHandler+0x4ea>
 8005bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fadd 	bl	80061c2 <UART_Transmit_IT>
    return;
 8005c08:	e014      	b.n	8005c34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00e      	beq.n	8005c34 <HAL_UART_IRQHandler+0x514>
 8005c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d008      	beq.n	8005c34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fb1d 	bl	8006262 <UART_EndTransmit_IT>
    return;
 8005c28:	e004      	b.n	8005c34 <HAL_UART_IRQHandler+0x514>
    return;
 8005c2a:	bf00      	nop
 8005c2c:	e002      	b.n	8005c34 <HAL_UART_IRQHandler+0x514>
      return;
 8005c2e:	bf00      	nop
 8005c30:	e000      	b.n	8005c34 <HAL_UART_IRQHandler+0x514>
      return;
 8005c32:	bf00      	nop
  }
}
 8005c34:	37e8      	adds	r7, #232	; 0xe8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop

08005c3c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b09c      	sub	sp, #112	; 0x70
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d172      	bne.n	8005d7e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cc0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e5      	bne.n	8005c9e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3314      	adds	r3, #20
 8005cd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3314      	adds	r3, #20
 8005cf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005cf2:	647a      	str	r2, [r7, #68]	; 0x44
 8005cf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e5      	bne.n	8005cd2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3314      	adds	r3, #20
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	623b      	str	r3, [r7, #32]
   return(result);
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3314      	adds	r3, #20
 8005d24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d26:	633a      	str	r2, [r7, #48]	; 0x30
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e5      	bne.n	8005d06 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d119      	bne.n	8005d7e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	330c      	adds	r3, #12
 8005d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f023 0310 	bic.w	r3, r3, #16
 8005d60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	330c      	adds	r3, #12
 8005d68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d6a:	61fa      	str	r2, [r7, #28]
 8005d6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	69b9      	ldr	r1, [r7, #24]
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	617b      	str	r3, [r7, #20]
   return(result);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e5      	bne.n	8005d4a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d106      	bne.n	8005d94 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d8e:	f7ff ff69 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d92:	e002      	b.n	8005d9a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005d94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d96:	f7fc fccd 	bl	8002734 <HAL_UART_RxCpltCallback>
}
 8005d9a:	bf00      	nop
 8005d9c:	3770      	adds	r7, #112	; 0x70
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d108      	bne.n	8005dca <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f7ff ff4e 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dc8:	e002      	b.n	8005dd0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7ff ff36 	bl	8005c3c <HAL_UART_RxHalfCpltCallback>
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df4:	2b80      	cmp	r3, #128	; 0x80
 8005df6:	bf0c      	ite	eq
 8005df8:	2301      	moveq	r3, #1
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b21      	cmp	r3, #33	; 0x21
 8005e0a:	d108      	bne.n	8005e1e <UART_DMAError+0x46>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2200      	movs	r2, #0
 8005e16:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005e18:	68b8      	ldr	r0, [r7, #8]
 8005e1a:	f000 f933 	bl	8006084 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	bf0c      	ite	eq
 8005e2c:	2301      	moveq	r3, #1
 8005e2e:	2300      	movne	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b22      	cmp	r3, #34	; 0x22
 8005e3e:	d108      	bne.n	8005e52 <UART_DMAError+0x7a>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005e4c:	68b8      	ldr	r0, [r7, #8]
 8005e4e:	f000 f941 	bl	80060d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f043 0210 	orr.w	r2, r3, #16
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e5e:	68b8      	ldr	r0, [r7, #8]
 8005e60:	f7ff fef6 	bl	8005c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e64:	bf00      	nop
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b090      	sub	sp, #64	; 0x40
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7c:	e050      	b.n	8005f20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d04c      	beq.n	8005f20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e8c:	f7fc fd0e 	bl	80028ac <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d241      	bcs.n	8005f20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ebc:	637a      	str	r2, [r7, #52]	; 0x34
 8005ebe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e5      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3314      	adds	r3, #20
 8005ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f023 0301 	bic.w	r3, r3, #1
 8005ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3314      	adds	r3, #20
 8005eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ef0:	623a      	str	r2, [r7, #32]
 8005ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	69f9      	ldr	r1, [r7, #28]
 8005ef6:	6a3a      	ldr	r2, [r7, #32]
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e5      	bne.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e00f      	b.n	8005f40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d09f      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3740      	adds	r7, #64	; 0x40
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b098      	sub	sp, #96	; 0x60
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4613      	mov	r3, r2
 8005f54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2222      	movs	r2, #34	; 0x22
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	4a40      	ldr	r2, [pc, #256]	; (8006078 <UART_Start_Receive_DMA+0x130>)
 8005f76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	4a3f      	ldr	r2, [pc, #252]	; (800607c <UART_Start_Receive_DMA+0x134>)
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	4a3e      	ldr	r2, [pc, #248]	; (8006080 <UART_Start_Receive_DMA+0x138>)
 8005f86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f90:	f107 0308 	add.w	r3, r7, #8
 8005f94:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	f7fd f8f6 	bl	8003198 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005fac:	2300      	movs	r3, #0
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d019      	beq.n	8006006 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ff2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005ff4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e5      	bne.n	8005fd2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	f043 0301 	orr.w	r3, r3, #1
 800601c:	657b      	str	r3, [r7, #84]	; 0x54
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3314      	adds	r3, #20
 8006024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006026:	63ba      	str	r2, [r7, #56]	; 0x38
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800602c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e5      	bne.n	8006006 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3314      	adds	r3, #20
 8006040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	617b      	str	r3, [r7, #20]
   return(result);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006050:	653b      	str	r3, [r7, #80]	; 0x50
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3314      	adds	r3, #20
 8006058:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800605a:	627a      	str	r2, [r7, #36]	; 0x24
 800605c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6a39      	ldr	r1, [r7, #32]
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	61fb      	str	r3, [r7, #28]
   return(result);
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e5      	bne.n	800603a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3760      	adds	r7, #96	; 0x60
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	08005c7d 	.word	0x08005c7d
 800607c:	08005da3 	.word	0x08005da3
 8006080:	08005dd9 	.word	0x08005dd9

08006084 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b089      	sub	sp, #36	; 0x24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	60bb      	str	r3, [r7, #8]
   return(result);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	61ba      	str	r2, [r7, #24]
 80060ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6979      	ldr	r1, [r7, #20]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e5      	bne.n	800608c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80060c8:	bf00      	nop
 80060ca:	3724      	adds	r7, #36	; 0x24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b095      	sub	sp, #84	; 0x54
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	330c      	adds	r3, #12
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060fc:	643a      	str	r2, [r7, #64]	; 0x40
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e5      	bne.n	80060dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3314      	adds	r3, #20
 8006116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	64bb      	str	r3, [r7, #72]	; 0x48
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3314      	adds	r3, #20
 800612e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	2b01      	cmp	r3, #1
 800614a:	d119      	bne.n	8006180 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	330c      	adds	r3, #12
 8006152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	60bb      	str	r3, [r7, #8]
   return(result);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f023 0310 	bic.w	r3, r3, #16
 8006162:	647b      	str	r3, [r7, #68]	; 0x44
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800616c:	61ba      	str	r2, [r7, #24]
 800616e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	6979      	ldr	r1, [r7, #20]
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	e841 2300 	strex	r3, r2, [r1]
 8006178:	613b      	str	r3, [r7, #16]
   return(result);
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e5      	bne.n	800614c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800618e:	bf00      	nop
 8006190:	3754      	adds	r7, #84	; 0x54
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff fd4b 	bl	8005c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b21      	cmp	r3, #33	; 0x21
 80061d4:	d13e      	bne.n	8006254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061de:	d114      	bne.n	800620a <UART_Transmit_IT+0x48>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d110      	bne.n	800620a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	1c9a      	adds	r2, r3, #2
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	621a      	str	r2, [r3, #32]
 8006208:	e008      	b.n	800621c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6211      	str	r1, [r2, #32]
 8006214:	781a      	ldrb	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29b      	uxth	r3, r3
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	4619      	mov	r1, r3
 800622a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10f      	bne.n	8006250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800623e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800624e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006278:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fc fa48 	bl	8002718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b08c      	sub	sp, #48	; 0x30
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b22      	cmp	r3, #34	; 0x22
 80062a4:	f040 80ab 	bne.w	80063fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b0:	d117      	bne.n	80062e2 <UART_Receive_IT+0x50>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d113      	bne.n	80062e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	1c9a      	adds	r2, r3, #2
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	629a      	str	r2, [r3, #40]	; 0x28
 80062e0:	e026      	b.n	8006330 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f4:	d007      	beq.n	8006306 <UART_Receive_IT+0x74>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10a      	bne.n	8006314 <UART_Receive_IT+0x82>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	e008      	b.n	8006326 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006320:	b2da      	uxtb	r2, r3
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29b      	uxth	r3, r3
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4619      	mov	r1, r3
 800633e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006340:	2b00      	cmp	r3, #0
 8006342:	d15a      	bne.n	80063fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0220 	bic.w	r2, r2, #32
 8006352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695a      	ldr	r2, [r3, #20]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0201 	bic.w	r2, r2, #1
 8006372:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	2b01      	cmp	r3, #1
 8006382:	d135      	bne.n	80063f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	613b      	str	r3, [r7, #16]
   return(result);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f023 0310 	bic.w	r3, r3, #16
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	330c      	adds	r3, #12
 80063a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063aa:	623a      	str	r2, [r7, #32]
 80063ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	69f9      	ldr	r1, [r7, #28]
 80063b0:	6a3a      	ldr	r2, [r7, #32]
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e5      	bne.n	800638a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d10a      	bne.n	80063e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff fc3b 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
 80063ee:	e002      	b.n	80063f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fc f99f 	bl	8002734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e002      	b.n	8006400 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e000      	b.n	8006400 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80063fe:	2302      	movs	r3, #2
  }
}
 8006400:	4618      	mov	r0, r3
 8006402:	3730      	adds	r7, #48	; 0x30
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800640c:	b0c0      	sub	sp, #256	; 0x100
 800640e:	af00      	add	r7, sp, #0
 8006410:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	68d9      	ldr	r1, [r3, #12]
 8006426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	ea40 0301 	orr.w	r3, r0, r1
 8006430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	431a      	orrs	r2, r3
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	431a      	orrs	r2, r3
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006460:	f021 010c 	bic.w	r1, r1, #12
 8006464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800646e:	430b      	orrs	r3, r1
 8006470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800647e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006482:	6999      	ldr	r1, [r3, #24]
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	ea40 0301 	orr.w	r3, r0, r1
 800648e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b8f      	ldr	r3, [pc, #572]	; (80066d4 <UART_SetConfig+0x2cc>)
 8006498:	429a      	cmp	r2, r3
 800649a:	d005      	beq.n	80064a8 <UART_SetConfig+0xa0>
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4b8d      	ldr	r3, [pc, #564]	; (80066d8 <UART_SetConfig+0x2d0>)
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d104      	bne.n	80064b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064a8:	f7fe f930 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 80064ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064b0:	e003      	b.n	80064ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064b2:	f7fe f917 	bl	80046e4 <HAL_RCC_GetPCLK1Freq>
 80064b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c4:	f040 810c 	bne.w	80066e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064da:	4622      	mov	r2, r4
 80064dc:	462b      	mov	r3, r5
 80064de:	1891      	adds	r1, r2, r2
 80064e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80064e2:	415b      	adcs	r3, r3
 80064e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064ea:	4621      	mov	r1, r4
 80064ec:	eb12 0801 	adds.w	r8, r2, r1
 80064f0:	4629      	mov	r1, r5
 80064f2:	eb43 0901 	adc.w	r9, r3, r1
 80064f6:	f04f 0200 	mov.w	r2, #0
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800650a:	4690      	mov	r8, r2
 800650c:	4699      	mov	r9, r3
 800650e:	4623      	mov	r3, r4
 8006510:	eb18 0303 	adds.w	r3, r8, r3
 8006514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006518:	462b      	mov	r3, r5
 800651a:	eb49 0303 	adc.w	r3, r9, r3
 800651e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800652e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006536:	460b      	mov	r3, r1
 8006538:	18db      	adds	r3, r3, r3
 800653a:	653b      	str	r3, [r7, #80]	; 0x50
 800653c:	4613      	mov	r3, r2
 800653e:	eb42 0303 	adc.w	r3, r2, r3
 8006542:	657b      	str	r3, [r7, #84]	; 0x54
 8006544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800654c:	f7fa fb34 	bl	8000bb8 <__aeabi_uldivmod>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4b61      	ldr	r3, [pc, #388]	; (80066dc <UART_SetConfig+0x2d4>)
 8006556:	fba3 2302 	umull	r2, r3, r3, r2
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	011c      	lsls	r4, r3, #4
 800655e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006562:	2200      	movs	r2, #0
 8006564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006568:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800656c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006570:	4642      	mov	r2, r8
 8006572:	464b      	mov	r3, r9
 8006574:	1891      	adds	r1, r2, r2
 8006576:	64b9      	str	r1, [r7, #72]	; 0x48
 8006578:	415b      	adcs	r3, r3
 800657a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800657c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006580:	4641      	mov	r1, r8
 8006582:	eb12 0a01 	adds.w	sl, r2, r1
 8006586:	4649      	mov	r1, r9
 8006588:	eb43 0b01 	adc.w	fp, r3, r1
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800659c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065a0:	4692      	mov	sl, r2
 80065a2:	469b      	mov	fp, r3
 80065a4:	4643      	mov	r3, r8
 80065a6:	eb1a 0303 	adds.w	r3, sl, r3
 80065aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ae:	464b      	mov	r3, r9
 80065b0:	eb4b 0303 	adc.w	r3, fp, r3
 80065b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065cc:	460b      	mov	r3, r1
 80065ce:	18db      	adds	r3, r3, r3
 80065d0:	643b      	str	r3, [r7, #64]	; 0x40
 80065d2:	4613      	mov	r3, r2
 80065d4:	eb42 0303 	adc.w	r3, r2, r3
 80065d8:	647b      	str	r3, [r7, #68]	; 0x44
 80065da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065e2:	f7fa fae9 	bl	8000bb8 <__aeabi_uldivmod>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4611      	mov	r1, r2
 80065ec:	4b3b      	ldr	r3, [pc, #236]	; (80066dc <UART_SetConfig+0x2d4>)
 80065ee:	fba3 2301 	umull	r2, r3, r3, r1
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	2264      	movs	r2, #100	; 0x64
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	1acb      	subs	r3, r1, r3
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006602:	4b36      	ldr	r3, [pc, #216]	; (80066dc <UART_SetConfig+0x2d4>)
 8006604:	fba3 2302 	umull	r2, r3, r3, r2
 8006608:	095b      	lsrs	r3, r3, #5
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006610:	441c      	add	r4, r3
 8006612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006616:	2200      	movs	r2, #0
 8006618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800661c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	1891      	adds	r1, r2, r2
 800662a:	63b9      	str	r1, [r7, #56]	; 0x38
 800662c:	415b      	adcs	r3, r3
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006634:	4641      	mov	r1, r8
 8006636:	1851      	adds	r1, r2, r1
 8006638:	6339      	str	r1, [r7, #48]	; 0x30
 800663a:	4649      	mov	r1, r9
 800663c:	414b      	adcs	r3, r1
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800664c:	4659      	mov	r1, fp
 800664e:	00cb      	lsls	r3, r1, #3
 8006650:	4651      	mov	r1, sl
 8006652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006656:	4651      	mov	r1, sl
 8006658:	00ca      	lsls	r2, r1, #3
 800665a:	4610      	mov	r0, r2
 800665c:	4619      	mov	r1, r3
 800665e:	4603      	mov	r3, r0
 8006660:	4642      	mov	r2, r8
 8006662:	189b      	adds	r3, r3, r2
 8006664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006668:	464b      	mov	r3, r9
 800666a:	460a      	mov	r2, r1
 800666c:	eb42 0303 	adc.w	r3, r2, r3
 8006670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006680:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006688:	460b      	mov	r3, r1
 800668a:	18db      	adds	r3, r3, r3
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
 800668e:	4613      	mov	r3, r2
 8006690:	eb42 0303 	adc.w	r3, r2, r3
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800669a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800669e:	f7fa fa8b 	bl	8000bb8 <__aeabi_uldivmod>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4b0d      	ldr	r3, [pc, #52]	; (80066dc <UART_SetConfig+0x2d4>)
 80066a8:	fba3 1302 	umull	r1, r3, r3, r2
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	2164      	movs	r1, #100	; 0x64
 80066b0:	fb01 f303 	mul.w	r3, r1, r3
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	3332      	adds	r3, #50	; 0x32
 80066ba:	4a08      	ldr	r2, [pc, #32]	; (80066dc <UART_SetConfig+0x2d4>)
 80066bc:	fba2 2303 	umull	r2, r3, r2, r3
 80066c0:	095b      	lsrs	r3, r3, #5
 80066c2:	f003 0207 	and.w	r2, r3, #7
 80066c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4422      	add	r2, r4
 80066ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066d0:	e105      	b.n	80068de <UART_SetConfig+0x4d6>
 80066d2:	bf00      	nop
 80066d4:	40011000 	.word	0x40011000
 80066d8:	40011400 	.word	0x40011400
 80066dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066f2:	4642      	mov	r2, r8
 80066f4:	464b      	mov	r3, r9
 80066f6:	1891      	adds	r1, r2, r2
 80066f8:	6239      	str	r1, [r7, #32]
 80066fa:	415b      	adcs	r3, r3
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
 80066fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006702:	4641      	mov	r1, r8
 8006704:	1854      	adds	r4, r2, r1
 8006706:	4649      	mov	r1, r9
 8006708:	eb43 0501 	adc.w	r5, r3, r1
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	00eb      	lsls	r3, r5, #3
 8006716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800671a:	00e2      	lsls	r2, r4, #3
 800671c:	4614      	mov	r4, r2
 800671e:	461d      	mov	r5, r3
 8006720:	4643      	mov	r3, r8
 8006722:	18e3      	adds	r3, r4, r3
 8006724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006728:	464b      	mov	r3, r9
 800672a:	eb45 0303 	adc.w	r3, r5, r3
 800672e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800673e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800674e:	4629      	mov	r1, r5
 8006750:	008b      	lsls	r3, r1, #2
 8006752:	4621      	mov	r1, r4
 8006754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006758:	4621      	mov	r1, r4
 800675a:	008a      	lsls	r2, r1, #2
 800675c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006760:	f7fa fa2a 	bl	8000bb8 <__aeabi_uldivmod>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4b60      	ldr	r3, [pc, #384]	; (80068ec <UART_SetConfig+0x4e4>)
 800676a:	fba3 2302 	umull	r2, r3, r3, r2
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	011c      	lsls	r4, r3, #4
 8006772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006776:	2200      	movs	r2, #0
 8006778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800677c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006784:	4642      	mov	r2, r8
 8006786:	464b      	mov	r3, r9
 8006788:	1891      	adds	r1, r2, r2
 800678a:	61b9      	str	r1, [r7, #24]
 800678c:	415b      	adcs	r3, r3
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006794:	4641      	mov	r1, r8
 8006796:	1851      	adds	r1, r2, r1
 8006798:	6139      	str	r1, [r7, #16]
 800679a:	4649      	mov	r1, r9
 800679c:	414b      	adcs	r3, r1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	f04f 0300 	mov.w	r3, #0
 80067a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067ac:	4659      	mov	r1, fp
 80067ae:	00cb      	lsls	r3, r1, #3
 80067b0:	4651      	mov	r1, sl
 80067b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067b6:	4651      	mov	r1, sl
 80067b8:	00ca      	lsls	r2, r1, #3
 80067ba:	4610      	mov	r0, r2
 80067bc:	4619      	mov	r1, r3
 80067be:	4603      	mov	r3, r0
 80067c0:	4642      	mov	r2, r8
 80067c2:	189b      	adds	r3, r3, r2
 80067c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067c8:	464b      	mov	r3, r9
 80067ca:	460a      	mov	r2, r1
 80067cc:	eb42 0303 	adc.w	r3, r2, r3
 80067d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80067de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067ec:	4649      	mov	r1, r9
 80067ee:	008b      	lsls	r3, r1, #2
 80067f0:	4641      	mov	r1, r8
 80067f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067f6:	4641      	mov	r1, r8
 80067f8:	008a      	lsls	r2, r1, #2
 80067fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067fe:	f7fa f9db 	bl	8000bb8 <__aeabi_uldivmod>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4b39      	ldr	r3, [pc, #228]	; (80068ec <UART_SetConfig+0x4e4>)
 8006808:	fba3 1302 	umull	r1, r3, r3, r2
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	2164      	movs	r1, #100	; 0x64
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	3332      	adds	r3, #50	; 0x32
 800681a:	4a34      	ldr	r2, [pc, #208]	; (80068ec <UART_SetConfig+0x4e4>)
 800681c:	fba2 2303 	umull	r2, r3, r2, r3
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006826:	441c      	add	r4, r3
 8006828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800682c:	2200      	movs	r2, #0
 800682e:	673b      	str	r3, [r7, #112]	; 0x70
 8006830:	677a      	str	r2, [r7, #116]	; 0x74
 8006832:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006836:	4642      	mov	r2, r8
 8006838:	464b      	mov	r3, r9
 800683a:	1891      	adds	r1, r2, r2
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	415b      	adcs	r3, r3
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006846:	4641      	mov	r1, r8
 8006848:	1851      	adds	r1, r2, r1
 800684a:	6039      	str	r1, [r7, #0]
 800684c:	4649      	mov	r1, r9
 800684e:	414b      	adcs	r3, r1
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800685e:	4659      	mov	r1, fp
 8006860:	00cb      	lsls	r3, r1, #3
 8006862:	4651      	mov	r1, sl
 8006864:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006868:	4651      	mov	r1, sl
 800686a:	00ca      	lsls	r2, r1, #3
 800686c:	4610      	mov	r0, r2
 800686e:	4619      	mov	r1, r3
 8006870:	4603      	mov	r3, r0
 8006872:	4642      	mov	r2, r8
 8006874:	189b      	adds	r3, r3, r2
 8006876:	66bb      	str	r3, [r7, #104]	; 0x68
 8006878:	464b      	mov	r3, r9
 800687a:	460a      	mov	r2, r1
 800687c:	eb42 0303 	adc.w	r3, r2, r3
 8006880:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	663b      	str	r3, [r7, #96]	; 0x60
 800688c:	667a      	str	r2, [r7, #100]	; 0x64
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800689a:	4649      	mov	r1, r9
 800689c:	008b      	lsls	r3, r1, #2
 800689e:	4641      	mov	r1, r8
 80068a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068a4:	4641      	mov	r1, r8
 80068a6:	008a      	lsls	r2, r1, #2
 80068a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068ac:	f7fa f984 	bl	8000bb8 <__aeabi_uldivmod>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <UART_SetConfig+0x4e4>)
 80068b6:	fba3 1302 	umull	r1, r3, r3, r2
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	2164      	movs	r1, #100	; 0x64
 80068be:	fb01 f303 	mul.w	r3, r1, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	3332      	adds	r3, #50	; 0x32
 80068c8:	4a08      	ldr	r2, [pc, #32]	; (80068ec <UART_SetConfig+0x4e4>)
 80068ca:	fba2 2303 	umull	r2, r3, r2, r3
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	f003 020f 	and.w	r2, r3, #15
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4422      	add	r2, r4
 80068dc:	609a      	str	r2, [r3, #8]
}
 80068de:	bf00      	nop
 80068e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068e4:	46bd      	mov	sp, r7
 80068e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ea:	bf00      	nop
 80068ec:	51eb851f 	.word	0x51eb851f

080068f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068f4:	4904      	ldr	r1, [pc, #16]	; (8006908 <MX_FATFS_Init+0x18>)
 80068f6:	4805      	ldr	r0, [pc, #20]	; (800690c <MX_FATFS_Init+0x1c>)
 80068f8:	f000 f8b2 	bl	8006a60 <FATFS_LinkDriver>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	4b03      	ldr	r3, [pc, #12]	; (8006910 <MX_FATFS_Init+0x20>)
 8006902:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006904:	bf00      	nop
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20000578 	.word	0x20000578
 800690c:	20000010 	.word	0x20000010
 8006910:	20000574 	.word	0x20000574

08006914 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	4618      	mov	r0, r3
 8006922:	f7fa fc7f 	bl	8001224 <SD_disk_initialize>
 8006926:	4603      	mov	r3, r0
 8006928:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	4603      	mov	r3, r0
 800693a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	4618      	mov	r0, r3
 8006940:	f7fa fd56 	bl	80013f0 <SD_disk_status>
 8006944:	4603      	mov	r3, r0
 8006946:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006960:	7bf8      	ldrb	r0, [r7, #15]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	f7fa fd58 	bl	800141c <SD_disk_read>
 800696c:	4603      	mov	r3, r0
 800696e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	607a      	str	r2, [r7, #4]
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	4603      	mov	r3, r0
 8006986:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006988:	7bf8      	ldrb	r0, [r7, #15]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	f7fa fdae 	bl	80014f0 <SD_disk_write>
 8006994:	4603      	mov	r3, r0
 8006996:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	603a      	str	r2, [r7, #0]
 80069aa:	71fb      	strb	r3, [r7, #7]
 80069ac:	460b      	mov	r3, r1
 80069ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	79b9      	ldrb	r1, [r7, #6]
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fa fe1e 	bl	80015f8 <SD_disk_ioctl>
 80069bc:	4603      	mov	r3, r0
 80069be:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80069d6:	2301      	movs	r3, #1
 80069d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80069de:	4b1f      	ldr	r3, [pc, #124]	; (8006a5c <FATFS_LinkDriverEx+0x94>)
 80069e0:	7a5b      	ldrb	r3, [r3, #9]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d131      	bne.n	8006a4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80069e8:	4b1c      	ldr	r3, [pc, #112]	; (8006a5c <FATFS_LinkDriverEx+0x94>)
 80069ea:	7a5b      	ldrb	r3, [r3, #9]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	4b1a      	ldr	r3, [pc, #104]	; (8006a5c <FATFS_LinkDriverEx+0x94>)
 80069f2:	2100      	movs	r1, #0
 80069f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80069f6:	4b19      	ldr	r3, [pc, #100]	; (8006a5c <FATFS_LinkDriverEx+0x94>)
 80069f8:	7a5b      	ldrb	r3, [r3, #9]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	4a17      	ldr	r2, [pc, #92]	; (8006a5c <FATFS_LinkDriverEx+0x94>)
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006a06:	4b15      	ldr	r3, [pc, #84]	; (8006a5c <FATFS_LinkDriverEx+0x94>)
 8006a08:	7a5b      	ldrb	r3, [r3, #9]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4b13      	ldr	r3, [pc, #76]	; (8006a5c <FATFS_LinkDriverEx+0x94>)
 8006a10:	4413      	add	r3, r2
 8006a12:	79fa      	ldrb	r2, [r7, #7]
 8006a14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a16:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <FATFS_LinkDriverEx+0x94>)
 8006a18:	7a5b      	ldrb	r3, [r3, #9]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	b2d1      	uxtb	r1, r2
 8006a20:	4a0e      	ldr	r2, [pc, #56]	; (8006a5c <FATFS_LinkDriverEx+0x94>)
 8006a22:	7251      	strb	r1, [r2, #9]
 8006a24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006a26:	7dbb      	ldrb	r3, [r7, #22]
 8006a28:	3330      	adds	r3, #48	; 0x30
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	3301      	adds	r3, #1
 8006a34:	223a      	movs	r2, #58	; 0x3a
 8006a36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	3302      	adds	r3, #2
 8006a3c:	222f      	movs	r2, #47	; 0x2f
 8006a3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	3303      	adds	r3, #3
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	2000057c 	.word	0x2000057c

08006a60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff ffaa 	bl	80069c8 <FATFS_LinkDriverEx>
 8006a74:	4603      	mov	r3, r0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <__errno>:
 8006a80:	4b01      	ldr	r3, [pc, #4]	; (8006a88 <__errno+0x8>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	20000024 	.word	0x20000024

08006a8c <__libc_init_array>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4d0d      	ldr	r5, [pc, #52]	; (8006ac4 <__libc_init_array+0x38>)
 8006a90:	4c0d      	ldr	r4, [pc, #52]	; (8006ac8 <__libc_init_array+0x3c>)
 8006a92:	1b64      	subs	r4, r4, r5
 8006a94:	10a4      	asrs	r4, r4, #2
 8006a96:	2600      	movs	r6, #0
 8006a98:	42a6      	cmp	r6, r4
 8006a9a:	d109      	bne.n	8006ab0 <__libc_init_array+0x24>
 8006a9c:	4d0b      	ldr	r5, [pc, #44]	; (8006acc <__libc_init_array+0x40>)
 8006a9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ad0 <__libc_init_array+0x44>)
 8006aa0:	f002 fdc4 	bl	800962c <_init>
 8006aa4:	1b64      	subs	r4, r4, r5
 8006aa6:	10a4      	asrs	r4, r4, #2
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	42a6      	cmp	r6, r4
 8006aac:	d105      	bne.n	8006aba <__libc_init_array+0x2e>
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab4:	4798      	blx	r3
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	e7ee      	b.n	8006a98 <__libc_init_array+0xc>
 8006aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abe:	4798      	blx	r3
 8006ac0:	3601      	adds	r6, #1
 8006ac2:	e7f2      	b.n	8006aaa <__libc_init_array+0x1e>
 8006ac4:	08009af4 	.word	0x08009af4
 8006ac8:	08009af4 	.word	0x08009af4
 8006acc:	08009af4 	.word	0x08009af4
 8006ad0:	08009af8 	.word	0x08009af8

08006ad4 <memset>:
 8006ad4:	4402      	add	r2, r0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d100      	bne.n	8006ade <memset+0xa>
 8006adc:	4770      	bx	lr
 8006ade:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae2:	e7f9      	b.n	8006ad8 <memset+0x4>

08006ae4 <__cvt>:
 8006ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	ec55 4b10 	vmov	r4, r5, d0
 8006aec:	2d00      	cmp	r5, #0
 8006aee:	460e      	mov	r6, r1
 8006af0:	4619      	mov	r1, r3
 8006af2:	462b      	mov	r3, r5
 8006af4:	bfbb      	ittet	lt
 8006af6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006afa:	461d      	movlt	r5, r3
 8006afc:	2300      	movge	r3, #0
 8006afe:	232d      	movlt	r3, #45	; 0x2d
 8006b00:	700b      	strb	r3, [r1, #0]
 8006b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b08:	4691      	mov	r9, r2
 8006b0a:	f023 0820 	bic.w	r8, r3, #32
 8006b0e:	bfbc      	itt	lt
 8006b10:	4622      	movlt	r2, r4
 8006b12:	4614      	movlt	r4, r2
 8006b14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b18:	d005      	beq.n	8006b26 <__cvt+0x42>
 8006b1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b1e:	d100      	bne.n	8006b22 <__cvt+0x3e>
 8006b20:	3601      	adds	r6, #1
 8006b22:	2102      	movs	r1, #2
 8006b24:	e000      	b.n	8006b28 <__cvt+0x44>
 8006b26:	2103      	movs	r1, #3
 8006b28:	ab03      	add	r3, sp, #12
 8006b2a:	9301      	str	r3, [sp, #4]
 8006b2c:	ab02      	add	r3, sp, #8
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	ec45 4b10 	vmov	d0, r4, r5
 8006b34:	4653      	mov	r3, sl
 8006b36:	4632      	mov	r2, r6
 8006b38:	f000 fe1a 	bl	8007770 <_dtoa_r>
 8006b3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b40:	4607      	mov	r7, r0
 8006b42:	d102      	bne.n	8006b4a <__cvt+0x66>
 8006b44:	f019 0f01 	tst.w	r9, #1
 8006b48:	d022      	beq.n	8006b90 <__cvt+0xac>
 8006b4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b4e:	eb07 0906 	add.w	r9, r7, r6
 8006b52:	d110      	bne.n	8006b76 <__cvt+0x92>
 8006b54:	783b      	ldrb	r3, [r7, #0]
 8006b56:	2b30      	cmp	r3, #48	; 0x30
 8006b58:	d10a      	bne.n	8006b70 <__cvt+0x8c>
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	4620      	mov	r0, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	f7f9 ffb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b66:	b918      	cbnz	r0, 8006b70 <__cvt+0x8c>
 8006b68:	f1c6 0601 	rsb	r6, r6, #1
 8006b6c:	f8ca 6000 	str.w	r6, [sl]
 8006b70:	f8da 3000 	ldr.w	r3, [sl]
 8006b74:	4499      	add	r9, r3
 8006b76:	2200      	movs	r2, #0
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	f7f9 ffab 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b82:	b108      	cbz	r0, 8006b88 <__cvt+0xa4>
 8006b84:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b88:	2230      	movs	r2, #48	; 0x30
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	454b      	cmp	r3, r9
 8006b8e:	d307      	bcc.n	8006ba0 <__cvt+0xbc>
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b94:	1bdb      	subs	r3, r3, r7
 8006b96:	4638      	mov	r0, r7
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	b004      	add	sp, #16
 8006b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	9103      	str	r1, [sp, #12]
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	e7f0      	b.n	8006b8a <__cvt+0xa6>

08006ba8 <__exponent>:
 8006ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006baa:	4603      	mov	r3, r0
 8006bac:	2900      	cmp	r1, #0
 8006bae:	bfb8      	it	lt
 8006bb0:	4249      	neglt	r1, r1
 8006bb2:	f803 2b02 	strb.w	r2, [r3], #2
 8006bb6:	bfb4      	ite	lt
 8006bb8:	222d      	movlt	r2, #45	; 0x2d
 8006bba:	222b      	movge	r2, #43	; 0x2b
 8006bbc:	2909      	cmp	r1, #9
 8006bbe:	7042      	strb	r2, [r0, #1]
 8006bc0:	dd2a      	ble.n	8006c18 <__exponent+0x70>
 8006bc2:	f10d 0407 	add.w	r4, sp, #7
 8006bc6:	46a4      	mov	ip, r4
 8006bc8:	270a      	movs	r7, #10
 8006bca:	46a6      	mov	lr, r4
 8006bcc:	460a      	mov	r2, r1
 8006bce:	fb91 f6f7 	sdiv	r6, r1, r7
 8006bd2:	fb07 1516 	mls	r5, r7, r6, r1
 8006bd6:	3530      	adds	r5, #48	; 0x30
 8006bd8:	2a63      	cmp	r2, #99	; 0x63
 8006bda:	f104 34ff 	add.w	r4, r4, #4294967295
 8006bde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006be2:	4631      	mov	r1, r6
 8006be4:	dcf1      	bgt.n	8006bca <__exponent+0x22>
 8006be6:	3130      	adds	r1, #48	; 0x30
 8006be8:	f1ae 0502 	sub.w	r5, lr, #2
 8006bec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006bf0:	1c44      	adds	r4, r0, #1
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4561      	cmp	r1, ip
 8006bf6:	d30a      	bcc.n	8006c0e <__exponent+0x66>
 8006bf8:	f10d 0209 	add.w	r2, sp, #9
 8006bfc:	eba2 020e 	sub.w	r2, r2, lr
 8006c00:	4565      	cmp	r5, ip
 8006c02:	bf88      	it	hi
 8006c04:	2200      	movhi	r2, #0
 8006c06:	4413      	add	r3, r2
 8006c08:	1a18      	subs	r0, r3, r0
 8006c0a:	b003      	add	sp, #12
 8006c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c16:	e7ed      	b.n	8006bf4 <__exponent+0x4c>
 8006c18:	2330      	movs	r3, #48	; 0x30
 8006c1a:	3130      	adds	r1, #48	; 0x30
 8006c1c:	7083      	strb	r3, [r0, #2]
 8006c1e:	70c1      	strb	r1, [r0, #3]
 8006c20:	1d03      	adds	r3, r0, #4
 8006c22:	e7f1      	b.n	8006c08 <__exponent+0x60>

08006c24 <_printf_float>:
 8006c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c28:	ed2d 8b02 	vpush	{d8}
 8006c2c:	b08d      	sub	sp, #52	; 0x34
 8006c2e:	460c      	mov	r4, r1
 8006c30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c34:	4616      	mov	r6, r2
 8006c36:	461f      	mov	r7, r3
 8006c38:	4605      	mov	r5, r0
 8006c3a:	f001 fd3f 	bl	80086bc <_localeconv_r>
 8006c3e:	f8d0 a000 	ldr.w	sl, [r0]
 8006c42:	4650      	mov	r0, sl
 8006c44:	f7f9 facc 	bl	80001e0 <strlen>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	9305      	str	r3, [sp, #20]
 8006c50:	f8d8 3000 	ldr.w	r3, [r8]
 8006c54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c58:	3307      	adds	r3, #7
 8006c5a:	f023 0307 	bic.w	r3, r3, #7
 8006c5e:	f103 0208 	add.w	r2, r3, #8
 8006c62:	f8c8 2000 	str.w	r2, [r8]
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c76:	9307      	str	r3, [sp, #28]
 8006c78:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c7c:	ee08 0a10 	vmov	s16, r0
 8006c80:	4b9f      	ldr	r3, [pc, #636]	; (8006f00 <_printf_float+0x2dc>)
 8006c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c86:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8a:	f7f9 ff57 	bl	8000b3c <__aeabi_dcmpun>
 8006c8e:	bb88      	cbnz	r0, 8006cf4 <_printf_float+0xd0>
 8006c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c94:	4b9a      	ldr	r3, [pc, #616]	; (8006f00 <_printf_float+0x2dc>)
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	f7f9 ff31 	bl	8000b00 <__aeabi_dcmple>
 8006c9e:	bb48      	cbnz	r0, 8006cf4 <_printf_float+0xd0>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	f7f9 ff20 	bl	8000aec <__aeabi_dcmplt>
 8006cac:	b110      	cbz	r0, 8006cb4 <_printf_float+0x90>
 8006cae:	232d      	movs	r3, #45	; 0x2d
 8006cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb4:	4b93      	ldr	r3, [pc, #588]	; (8006f04 <_printf_float+0x2e0>)
 8006cb6:	4894      	ldr	r0, [pc, #592]	; (8006f08 <_printf_float+0x2e4>)
 8006cb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006cbc:	bf94      	ite	ls
 8006cbe:	4698      	movls	r8, r3
 8006cc0:	4680      	movhi	r8, r0
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	6123      	str	r3, [r4, #16]
 8006cc6:	9b05      	ldr	r3, [sp, #20]
 8006cc8:	f023 0204 	bic.w	r2, r3, #4
 8006ccc:	6022      	str	r2, [r4, #0]
 8006cce:	f04f 0900 	mov.w	r9, #0
 8006cd2:	9700      	str	r7, [sp, #0]
 8006cd4:	4633      	mov	r3, r6
 8006cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f000 f9d8 	bl	8007090 <_printf_common>
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	f040 8090 	bne.w	8006e06 <_printf_float+0x1e2>
 8006ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cea:	b00d      	add	sp, #52	; 0x34
 8006cec:	ecbd 8b02 	vpop	{d8}
 8006cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	f7f9 ff1e 	bl	8000b3c <__aeabi_dcmpun>
 8006d00:	b140      	cbz	r0, 8006d14 <_printf_float+0xf0>
 8006d02:	464b      	mov	r3, r9
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	bfbc      	itt	lt
 8006d08:	232d      	movlt	r3, #45	; 0x2d
 8006d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d0e:	487f      	ldr	r0, [pc, #508]	; (8006f0c <_printf_float+0x2e8>)
 8006d10:	4b7f      	ldr	r3, [pc, #508]	; (8006f10 <_printf_float+0x2ec>)
 8006d12:	e7d1      	b.n	8006cb8 <_printf_float+0x94>
 8006d14:	6863      	ldr	r3, [r4, #4]
 8006d16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d1a:	9206      	str	r2, [sp, #24]
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	d13f      	bne.n	8006da0 <_printf_float+0x17c>
 8006d20:	2306      	movs	r3, #6
 8006d22:	6063      	str	r3, [r4, #4]
 8006d24:	9b05      	ldr	r3, [sp, #20]
 8006d26:	6861      	ldr	r1, [r4, #4]
 8006d28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9303      	str	r3, [sp, #12]
 8006d30:	ab0a      	add	r3, sp, #40	; 0x28
 8006d32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d36:	ab09      	add	r3, sp, #36	; 0x24
 8006d38:	ec49 8b10 	vmov	d0, r8, r9
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	6022      	str	r2, [r4, #0]
 8006d40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d44:	4628      	mov	r0, r5
 8006d46:	f7ff fecd 	bl	8006ae4 <__cvt>
 8006d4a:	9b06      	ldr	r3, [sp, #24]
 8006d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d4e:	2b47      	cmp	r3, #71	; 0x47
 8006d50:	4680      	mov	r8, r0
 8006d52:	d108      	bne.n	8006d66 <_printf_float+0x142>
 8006d54:	1cc8      	adds	r0, r1, #3
 8006d56:	db02      	blt.n	8006d5e <_printf_float+0x13a>
 8006d58:	6863      	ldr	r3, [r4, #4]
 8006d5a:	4299      	cmp	r1, r3
 8006d5c:	dd41      	ble.n	8006de2 <_printf_float+0x1be>
 8006d5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d62:	fa5f fb8b 	uxtb.w	fp, fp
 8006d66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d6a:	d820      	bhi.n	8006dae <_printf_float+0x18a>
 8006d6c:	3901      	subs	r1, #1
 8006d6e:	465a      	mov	r2, fp
 8006d70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d74:	9109      	str	r1, [sp, #36]	; 0x24
 8006d76:	f7ff ff17 	bl	8006ba8 <__exponent>
 8006d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d7c:	1813      	adds	r3, r2, r0
 8006d7e:	2a01      	cmp	r2, #1
 8006d80:	4681      	mov	r9, r0
 8006d82:	6123      	str	r3, [r4, #16]
 8006d84:	dc02      	bgt.n	8006d8c <_printf_float+0x168>
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	07d2      	lsls	r2, r2, #31
 8006d8a:	d501      	bpl.n	8006d90 <_printf_float+0x16c>
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d09c      	beq.n	8006cd2 <_printf_float+0xae>
 8006d98:	232d      	movs	r3, #45	; 0x2d
 8006d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d9e:	e798      	b.n	8006cd2 <_printf_float+0xae>
 8006da0:	9a06      	ldr	r2, [sp, #24]
 8006da2:	2a47      	cmp	r2, #71	; 0x47
 8006da4:	d1be      	bne.n	8006d24 <_printf_float+0x100>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1bc      	bne.n	8006d24 <_printf_float+0x100>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e7b9      	b.n	8006d22 <_printf_float+0xfe>
 8006dae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006db2:	d118      	bne.n	8006de6 <_printf_float+0x1c2>
 8006db4:	2900      	cmp	r1, #0
 8006db6:	6863      	ldr	r3, [r4, #4]
 8006db8:	dd0b      	ble.n	8006dd2 <_printf_float+0x1ae>
 8006dba:	6121      	str	r1, [r4, #16]
 8006dbc:	b913      	cbnz	r3, 8006dc4 <_printf_float+0x1a0>
 8006dbe:	6822      	ldr	r2, [r4, #0]
 8006dc0:	07d0      	lsls	r0, r2, #31
 8006dc2:	d502      	bpl.n	8006dca <_printf_float+0x1a6>
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	440b      	add	r3, r1
 8006dc8:	6123      	str	r3, [r4, #16]
 8006dca:	65a1      	str	r1, [r4, #88]	; 0x58
 8006dcc:	f04f 0900 	mov.w	r9, #0
 8006dd0:	e7de      	b.n	8006d90 <_printf_float+0x16c>
 8006dd2:	b913      	cbnz	r3, 8006dda <_printf_float+0x1b6>
 8006dd4:	6822      	ldr	r2, [r4, #0]
 8006dd6:	07d2      	lsls	r2, r2, #31
 8006dd8:	d501      	bpl.n	8006dde <_printf_float+0x1ba>
 8006dda:	3302      	adds	r3, #2
 8006ddc:	e7f4      	b.n	8006dc8 <_printf_float+0x1a4>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e7f2      	b.n	8006dc8 <_printf_float+0x1a4>
 8006de2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de8:	4299      	cmp	r1, r3
 8006dea:	db05      	blt.n	8006df8 <_printf_float+0x1d4>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	6121      	str	r1, [r4, #16]
 8006df0:	07d8      	lsls	r0, r3, #31
 8006df2:	d5ea      	bpl.n	8006dca <_printf_float+0x1a6>
 8006df4:	1c4b      	adds	r3, r1, #1
 8006df6:	e7e7      	b.n	8006dc8 <_printf_float+0x1a4>
 8006df8:	2900      	cmp	r1, #0
 8006dfa:	bfd4      	ite	le
 8006dfc:	f1c1 0202 	rsble	r2, r1, #2
 8006e00:	2201      	movgt	r2, #1
 8006e02:	4413      	add	r3, r2
 8006e04:	e7e0      	b.n	8006dc8 <_printf_float+0x1a4>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	055a      	lsls	r2, r3, #21
 8006e0a:	d407      	bmi.n	8006e1c <_printf_float+0x1f8>
 8006e0c:	6923      	ldr	r3, [r4, #16]
 8006e0e:	4642      	mov	r2, r8
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b8      	blx	r7
 8006e16:	3001      	adds	r0, #1
 8006e18:	d12c      	bne.n	8006e74 <_printf_float+0x250>
 8006e1a:	e764      	b.n	8006ce6 <_printf_float+0xc2>
 8006e1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e20:	f240 80e0 	bls.w	8006fe4 <_printf_float+0x3c0>
 8006e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f7f9 fe54 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d034      	beq.n	8006e9e <_printf_float+0x27a>
 8006e34:	4a37      	ldr	r2, [pc, #220]	; (8006f14 <_printf_float+0x2f0>)
 8006e36:	2301      	movs	r3, #1
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f af51 	beq.w	8006ce6 <_printf_float+0xc2>
 8006e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	db02      	blt.n	8006e52 <_printf_float+0x22e>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	07d8      	lsls	r0, r3, #31
 8006e50:	d510      	bpl.n	8006e74 <_printf_float+0x250>
 8006e52:	ee18 3a10 	vmov	r3, s16
 8006e56:	4652      	mov	r2, sl
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	47b8      	blx	r7
 8006e5e:	3001      	adds	r0, #1
 8006e60:	f43f af41 	beq.w	8006ce6 <_printf_float+0xc2>
 8006e64:	f04f 0800 	mov.w	r8, #0
 8006e68:	f104 091a 	add.w	r9, r4, #26
 8006e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	4543      	cmp	r3, r8
 8006e72:	dc09      	bgt.n	8006e88 <_printf_float+0x264>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	079b      	lsls	r3, r3, #30
 8006e78:	f100 8105 	bmi.w	8007086 <_printf_float+0x462>
 8006e7c:	68e0      	ldr	r0, [r4, #12]
 8006e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e80:	4298      	cmp	r0, r3
 8006e82:	bfb8      	it	lt
 8006e84:	4618      	movlt	r0, r3
 8006e86:	e730      	b.n	8006cea <_printf_float+0xc6>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	464a      	mov	r2, r9
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	4628      	mov	r0, r5
 8006e90:	47b8      	blx	r7
 8006e92:	3001      	adds	r0, #1
 8006e94:	f43f af27 	beq.w	8006ce6 <_printf_float+0xc2>
 8006e98:	f108 0801 	add.w	r8, r8, #1
 8006e9c:	e7e6      	b.n	8006e6c <_printf_float+0x248>
 8006e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dc39      	bgt.n	8006f18 <_printf_float+0x2f4>
 8006ea4:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <_printf_float+0x2f0>)
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4628      	mov	r0, r5
 8006eac:	47b8      	blx	r7
 8006eae:	3001      	adds	r0, #1
 8006eb0:	f43f af19 	beq.w	8006ce6 <_printf_float+0xc2>
 8006eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	d102      	bne.n	8006ec2 <_printf_float+0x29e>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	07d9      	lsls	r1, r3, #31
 8006ec0:	d5d8      	bpl.n	8006e74 <_printf_float+0x250>
 8006ec2:	ee18 3a10 	vmov	r3, s16
 8006ec6:	4652      	mov	r2, sl
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	f43f af09 	beq.w	8006ce6 <_printf_float+0xc2>
 8006ed4:	f04f 0900 	mov.w	r9, #0
 8006ed8:	f104 0a1a 	add.w	sl, r4, #26
 8006edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ede:	425b      	negs	r3, r3
 8006ee0:	454b      	cmp	r3, r9
 8006ee2:	dc01      	bgt.n	8006ee8 <_printf_float+0x2c4>
 8006ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee6:	e792      	b.n	8006e0e <_printf_float+0x1ea>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	4652      	mov	r2, sl
 8006eec:	4631      	mov	r1, r6
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	f43f aef7 	beq.w	8006ce6 <_printf_float+0xc2>
 8006ef8:	f109 0901 	add.w	r9, r9, #1
 8006efc:	e7ee      	b.n	8006edc <_printf_float+0x2b8>
 8006efe:	bf00      	nop
 8006f00:	7fefffff 	.word	0x7fefffff
 8006f04:	08009714 	.word	0x08009714
 8006f08:	08009718 	.word	0x08009718
 8006f0c:	08009720 	.word	0x08009720
 8006f10:	0800971c 	.word	0x0800971c
 8006f14:	08009724 	.word	0x08009724
 8006f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	bfa8      	it	ge
 8006f20:	461a      	movge	r2, r3
 8006f22:	2a00      	cmp	r2, #0
 8006f24:	4691      	mov	r9, r2
 8006f26:	dc37      	bgt.n	8006f98 <_printf_float+0x374>
 8006f28:	f04f 0b00 	mov.w	fp, #0
 8006f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f30:	f104 021a 	add.w	r2, r4, #26
 8006f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f36:	9305      	str	r3, [sp, #20]
 8006f38:	eba3 0309 	sub.w	r3, r3, r9
 8006f3c:	455b      	cmp	r3, fp
 8006f3e:	dc33      	bgt.n	8006fa8 <_printf_float+0x384>
 8006f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f44:	429a      	cmp	r2, r3
 8006f46:	db3b      	blt.n	8006fc0 <_printf_float+0x39c>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	07da      	lsls	r2, r3, #31
 8006f4c:	d438      	bmi.n	8006fc0 <_printf_float+0x39c>
 8006f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f50:	9a05      	ldr	r2, [sp, #20]
 8006f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f54:	1a9a      	subs	r2, r3, r2
 8006f56:	eba3 0901 	sub.w	r9, r3, r1
 8006f5a:	4591      	cmp	r9, r2
 8006f5c:	bfa8      	it	ge
 8006f5e:	4691      	movge	r9, r2
 8006f60:	f1b9 0f00 	cmp.w	r9, #0
 8006f64:	dc35      	bgt.n	8006fd2 <_printf_float+0x3ae>
 8006f66:	f04f 0800 	mov.w	r8, #0
 8006f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f6e:	f104 0a1a 	add.w	sl, r4, #26
 8006f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	eba3 0309 	sub.w	r3, r3, r9
 8006f7c:	4543      	cmp	r3, r8
 8006f7e:	f77f af79 	ble.w	8006e74 <_printf_float+0x250>
 8006f82:	2301      	movs	r3, #1
 8006f84:	4652      	mov	r2, sl
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f aeaa 	beq.w	8006ce6 <_printf_float+0xc2>
 8006f92:	f108 0801 	add.w	r8, r8, #1
 8006f96:	e7ec      	b.n	8006f72 <_printf_float+0x34e>
 8006f98:	4613      	mov	r3, r2
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	47b8      	blx	r7
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d1c0      	bne.n	8006f28 <_printf_float+0x304>
 8006fa6:	e69e      	b.n	8006ce6 <_printf_float+0xc2>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	9205      	str	r2, [sp, #20]
 8006fb0:	47b8      	blx	r7
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	f43f ae97 	beq.w	8006ce6 <_printf_float+0xc2>
 8006fb8:	9a05      	ldr	r2, [sp, #20]
 8006fba:	f10b 0b01 	add.w	fp, fp, #1
 8006fbe:	e7b9      	b.n	8006f34 <_printf_float+0x310>
 8006fc0:	ee18 3a10 	vmov	r3, s16
 8006fc4:	4652      	mov	r2, sl
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4628      	mov	r0, r5
 8006fca:	47b8      	blx	r7
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d1be      	bne.n	8006f4e <_printf_float+0x32a>
 8006fd0:	e689      	b.n	8006ce6 <_printf_float+0xc2>
 8006fd2:	9a05      	ldr	r2, [sp, #20]
 8006fd4:	464b      	mov	r3, r9
 8006fd6:	4442      	add	r2, r8
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4628      	mov	r0, r5
 8006fdc:	47b8      	blx	r7
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d1c1      	bne.n	8006f66 <_printf_float+0x342>
 8006fe2:	e680      	b.n	8006ce6 <_printf_float+0xc2>
 8006fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fe6:	2a01      	cmp	r2, #1
 8006fe8:	dc01      	bgt.n	8006fee <_printf_float+0x3ca>
 8006fea:	07db      	lsls	r3, r3, #31
 8006fec:	d538      	bpl.n	8007060 <_printf_float+0x43c>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4642      	mov	r2, r8
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b8      	blx	r7
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f43f ae74 	beq.w	8006ce6 <_printf_float+0xc2>
 8006ffe:	ee18 3a10 	vmov	r3, s16
 8007002:	4652      	mov	r2, sl
 8007004:	4631      	mov	r1, r6
 8007006:	4628      	mov	r0, r5
 8007008:	47b8      	blx	r7
 800700a:	3001      	adds	r0, #1
 800700c:	f43f ae6b 	beq.w	8006ce6 <_printf_float+0xc2>
 8007010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007014:	2200      	movs	r2, #0
 8007016:	2300      	movs	r3, #0
 8007018:	f7f9 fd5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800701c:	b9d8      	cbnz	r0, 8007056 <_printf_float+0x432>
 800701e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007020:	f108 0201 	add.w	r2, r8, #1
 8007024:	3b01      	subs	r3, #1
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	d10e      	bne.n	800704e <_printf_float+0x42a>
 8007030:	e659      	b.n	8006ce6 <_printf_float+0xc2>
 8007032:	2301      	movs	r3, #1
 8007034:	4652      	mov	r2, sl
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	47b8      	blx	r7
 800703c:	3001      	adds	r0, #1
 800703e:	f43f ae52 	beq.w	8006ce6 <_printf_float+0xc2>
 8007042:	f108 0801 	add.w	r8, r8, #1
 8007046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007048:	3b01      	subs	r3, #1
 800704a:	4543      	cmp	r3, r8
 800704c:	dcf1      	bgt.n	8007032 <_printf_float+0x40e>
 800704e:	464b      	mov	r3, r9
 8007050:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007054:	e6dc      	b.n	8006e10 <_printf_float+0x1ec>
 8007056:	f04f 0800 	mov.w	r8, #0
 800705a:	f104 0a1a 	add.w	sl, r4, #26
 800705e:	e7f2      	b.n	8007046 <_printf_float+0x422>
 8007060:	2301      	movs	r3, #1
 8007062:	4642      	mov	r2, r8
 8007064:	e7df      	b.n	8007026 <_printf_float+0x402>
 8007066:	2301      	movs	r3, #1
 8007068:	464a      	mov	r2, r9
 800706a:	4631      	mov	r1, r6
 800706c:	4628      	mov	r0, r5
 800706e:	47b8      	blx	r7
 8007070:	3001      	adds	r0, #1
 8007072:	f43f ae38 	beq.w	8006ce6 <_printf_float+0xc2>
 8007076:	f108 0801 	add.w	r8, r8, #1
 800707a:	68e3      	ldr	r3, [r4, #12]
 800707c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800707e:	1a5b      	subs	r3, r3, r1
 8007080:	4543      	cmp	r3, r8
 8007082:	dcf0      	bgt.n	8007066 <_printf_float+0x442>
 8007084:	e6fa      	b.n	8006e7c <_printf_float+0x258>
 8007086:	f04f 0800 	mov.w	r8, #0
 800708a:	f104 0919 	add.w	r9, r4, #25
 800708e:	e7f4      	b.n	800707a <_printf_float+0x456>

08007090 <_printf_common>:
 8007090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007094:	4616      	mov	r6, r2
 8007096:	4699      	mov	r9, r3
 8007098:	688a      	ldr	r2, [r1, #8]
 800709a:	690b      	ldr	r3, [r1, #16]
 800709c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070a0:	4293      	cmp	r3, r2
 80070a2:	bfb8      	it	lt
 80070a4:	4613      	movlt	r3, r2
 80070a6:	6033      	str	r3, [r6, #0]
 80070a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070ac:	4607      	mov	r7, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	b10a      	cbz	r2, 80070b6 <_printf_common+0x26>
 80070b2:	3301      	adds	r3, #1
 80070b4:	6033      	str	r3, [r6, #0]
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	0699      	lsls	r1, r3, #26
 80070ba:	bf42      	ittt	mi
 80070bc:	6833      	ldrmi	r3, [r6, #0]
 80070be:	3302      	addmi	r3, #2
 80070c0:	6033      	strmi	r3, [r6, #0]
 80070c2:	6825      	ldr	r5, [r4, #0]
 80070c4:	f015 0506 	ands.w	r5, r5, #6
 80070c8:	d106      	bne.n	80070d8 <_printf_common+0x48>
 80070ca:	f104 0a19 	add.w	sl, r4, #25
 80070ce:	68e3      	ldr	r3, [r4, #12]
 80070d0:	6832      	ldr	r2, [r6, #0]
 80070d2:	1a9b      	subs	r3, r3, r2
 80070d4:	42ab      	cmp	r3, r5
 80070d6:	dc26      	bgt.n	8007126 <_printf_common+0x96>
 80070d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070dc:	1e13      	subs	r3, r2, #0
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	bf18      	it	ne
 80070e2:	2301      	movne	r3, #1
 80070e4:	0692      	lsls	r2, r2, #26
 80070e6:	d42b      	bmi.n	8007140 <_printf_common+0xb0>
 80070e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070ec:	4649      	mov	r1, r9
 80070ee:	4638      	mov	r0, r7
 80070f0:	47c0      	blx	r8
 80070f2:	3001      	adds	r0, #1
 80070f4:	d01e      	beq.n	8007134 <_printf_common+0xa4>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	68e5      	ldr	r5, [r4, #12]
 80070fa:	6832      	ldr	r2, [r6, #0]
 80070fc:	f003 0306 	and.w	r3, r3, #6
 8007100:	2b04      	cmp	r3, #4
 8007102:	bf08      	it	eq
 8007104:	1aad      	subeq	r5, r5, r2
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	6922      	ldr	r2, [r4, #16]
 800710a:	bf0c      	ite	eq
 800710c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007110:	2500      	movne	r5, #0
 8007112:	4293      	cmp	r3, r2
 8007114:	bfc4      	itt	gt
 8007116:	1a9b      	subgt	r3, r3, r2
 8007118:	18ed      	addgt	r5, r5, r3
 800711a:	2600      	movs	r6, #0
 800711c:	341a      	adds	r4, #26
 800711e:	42b5      	cmp	r5, r6
 8007120:	d11a      	bne.n	8007158 <_printf_common+0xc8>
 8007122:	2000      	movs	r0, #0
 8007124:	e008      	b.n	8007138 <_printf_common+0xa8>
 8007126:	2301      	movs	r3, #1
 8007128:	4652      	mov	r2, sl
 800712a:	4649      	mov	r1, r9
 800712c:	4638      	mov	r0, r7
 800712e:	47c0      	blx	r8
 8007130:	3001      	adds	r0, #1
 8007132:	d103      	bne.n	800713c <_printf_common+0xac>
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713c:	3501      	adds	r5, #1
 800713e:	e7c6      	b.n	80070ce <_printf_common+0x3e>
 8007140:	18e1      	adds	r1, r4, r3
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	2030      	movs	r0, #48	; 0x30
 8007146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800714a:	4422      	add	r2, r4
 800714c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007154:	3302      	adds	r3, #2
 8007156:	e7c7      	b.n	80070e8 <_printf_common+0x58>
 8007158:	2301      	movs	r3, #1
 800715a:	4622      	mov	r2, r4
 800715c:	4649      	mov	r1, r9
 800715e:	4638      	mov	r0, r7
 8007160:	47c0      	blx	r8
 8007162:	3001      	adds	r0, #1
 8007164:	d0e6      	beq.n	8007134 <_printf_common+0xa4>
 8007166:	3601      	adds	r6, #1
 8007168:	e7d9      	b.n	800711e <_printf_common+0x8e>
	...

0800716c <_printf_i>:
 800716c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007170:	7e0f      	ldrb	r7, [r1, #24]
 8007172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007174:	2f78      	cmp	r7, #120	; 0x78
 8007176:	4691      	mov	r9, r2
 8007178:	4680      	mov	r8, r0
 800717a:	460c      	mov	r4, r1
 800717c:	469a      	mov	sl, r3
 800717e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007182:	d807      	bhi.n	8007194 <_printf_i+0x28>
 8007184:	2f62      	cmp	r7, #98	; 0x62
 8007186:	d80a      	bhi.n	800719e <_printf_i+0x32>
 8007188:	2f00      	cmp	r7, #0
 800718a:	f000 80d8 	beq.w	800733e <_printf_i+0x1d2>
 800718e:	2f58      	cmp	r7, #88	; 0x58
 8007190:	f000 80a3 	beq.w	80072da <_printf_i+0x16e>
 8007194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800719c:	e03a      	b.n	8007214 <_printf_i+0xa8>
 800719e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071a2:	2b15      	cmp	r3, #21
 80071a4:	d8f6      	bhi.n	8007194 <_printf_i+0x28>
 80071a6:	a101      	add	r1, pc, #4	; (adr r1, 80071ac <_printf_i+0x40>)
 80071a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071ac:	08007205 	.word	0x08007205
 80071b0:	08007219 	.word	0x08007219
 80071b4:	08007195 	.word	0x08007195
 80071b8:	08007195 	.word	0x08007195
 80071bc:	08007195 	.word	0x08007195
 80071c0:	08007195 	.word	0x08007195
 80071c4:	08007219 	.word	0x08007219
 80071c8:	08007195 	.word	0x08007195
 80071cc:	08007195 	.word	0x08007195
 80071d0:	08007195 	.word	0x08007195
 80071d4:	08007195 	.word	0x08007195
 80071d8:	08007325 	.word	0x08007325
 80071dc:	08007249 	.word	0x08007249
 80071e0:	08007307 	.word	0x08007307
 80071e4:	08007195 	.word	0x08007195
 80071e8:	08007195 	.word	0x08007195
 80071ec:	08007347 	.word	0x08007347
 80071f0:	08007195 	.word	0x08007195
 80071f4:	08007249 	.word	0x08007249
 80071f8:	08007195 	.word	0x08007195
 80071fc:	08007195 	.word	0x08007195
 8007200:	0800730f 	.word	0x0800730f
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	1d1a      	adds	r2, r3, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	602a      	str	r2, [r5, #0]
 800720c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007214:	2301      	movs	r3, #1
 8007216:	e0a3      	b.n	8007360 <_printf_i+0x1f4>
 8007218:	6820      	ldr	r0, [r4, #0]
 800721a:	6829      	ldr	r1, [r5, #0]
 800721c:	0606      	lsls	r6, r0, #24
 800721e:	f101 0304 	add.w	r3, r1, #4
 8007222:	d50a      	bpl.n	800723a <_printf_i+0xce>
 8007224:	680e      	ldr	r6, [r1, #0]
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	2e00      	cmp	r6, #0
 800722a:	da03      	bge.n	8007234 <_printf_i+0xc8>
 800722c:	232d      	movs	r3, #45	; 0x2d
 800722e:	4276      	negs	r6, r6
 8007230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007234:	485e      	ldr	r0, [pc, #376]	; (80073b0 <_printf_i+0x244>)
 8007236:	230a      	movs	r3, #10
 8007238:	e019      	b.n	800726e <_printf_i+0x102>
 800723a:	680e      	ldr	r6, [r1, #0]
 800723c:	602b      	str	r3, [r5, #0]
 800723e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007242:	bf18      	it	ne
 8007244:	b236      	sxthne	r6, r6
 8007246:	e7ef      	b.n	8007228 <_printf_i+0xbc>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	6820      	ldr	r0, [r4, #0]
 800724c:	1d19      	adds	r1, r3, #4
 800724e:	6029      	str	r1, [r5, #0]
 8007250:	0601      	lsls	r1, r0, #24
 8007252:	d501      	bpl.n	8007258 <_printf_i+0xec>
 8007254:	681e      	ldr	r6, [r3, #0]
 8007256:	e002      	b.n	800725e <_printf_i+0xf2>
 8007258:	0646      	lsls	r6, r0, #25
 800725a:	d5fb      	bpl.n	8007254 <_printf_i+0xe8>
 800725c:	881e      	ldrh	r6, [r3, #0]
 800725e:	4854      	ldr	r0, [pc, #336]	; (80073b0 <_printf_i+0x244>)
 8007260:	2f6f      	cmp	r7, #111	; 0x6f
 8007262:	bf0c      	ite	eq
 8007264:	2308      	moveq	r3, #8
 8007266:	230a      	movne	r3, #10
 8007268:	2100      	movs	r1, #0
 800726a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800726e:	6865      	ldr	r5, [r4, #4]
 8007270:	60a5      	str	r5, [r4, #8]
 8007272:	2d00      	cmp	r5, #0
 8007274:	bfa2      	ittt	ge
 8007276:	6821      	ldrge	r1, [r4, #0]
 8007278:	f021 0104 	bicge.w	r1, r1, #4
 800727c:	6021      	strge	r1, [r4, #0]
 800727e:	b90e      	cbnz	r6, 8007284 <_printf_i+0x118>
 8007280:	2d00      	cmp	r5, #0
 8007282:	d04d      	beq.n	8007320 <_printf_i+0x1b4>
 8007284:	4615      	mov	r5, r2
 8007286:	fbb6 f1f3 	udiv	r1, r6, r3
 800728a:	fb03 6711 	mls	r7, r3, r1, r6
 800728e:	5dc7      	ldrb	r7, [r0, r7]
 8007290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007294:	4637      	mov	r7, r6
 8007296:	42bb      	cmp	r3, r7
 8007298:	460e      	mov	r6, r1
 800729a:	d9f4      	bls.n	8007286 <_printf_i+0x11a>
 800729c:	2b08      	cmp	r3, #8
 800729e:	d10b      	bne.n	80072b8 <_printf_i+0x14c>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	07de      	lsls	r6, r3, #31
 80072a4:	d508      	bpl.n	80072b8 <_printf_i+0x14c>
 80072a6:	6923      	ldr	r3, [r4, #16]
 80072a8:	6861      	ldr	r1, [r4, #4]
 80072aa:	4299      	cmp	r1, r3
 80072ac:	bfde      	ittt	le
 80072ae:	2330      	movle	r3, #48	; 0x30
 80072b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072b8:	1b52      	subs	r2, r2, r5
 80072ba:	6122      	str	r2, [r4, #16]
 80072bc:	f8cd a000 	str.w	sl, [sp]
 80072c0:	464b      	mov	r3, r9
 80072c2:	aa03      	add	r2, sp, #12
 80072c4:	4621      	mov	r1, r4
 80072c6:	4640      	mov	r0, r8
 80072c8:	f7ff fee2 	bl	8007090 <_printf_common>
 80072cc:	3001      	adds	r0, #1
 80072ce:	d14c      	bne.n	800736a <_printf_i+0x1fe>
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
 80072d4:	b004      	add	sp, #16
 80072d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072da:	4835      	ldr	r0, [pc, #212]	; (80073b0 <_printf_i+0x244>)
 80072dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072e0:	6829      	ldr	r1, [r5, #0]
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80072e8:	6029      	str	r1, [r5, #0]
 80072ea:	061d      	lsls	r5, r3, #24
 80072ec:	d514      	bpl.n	8007318 <_printf_i+0x1ac>
 80072ee:	07df      	lsls	r7, r3, #31
 80072f0:	bf44      	itt	mi
 80072f2:	f043 0320 	orrmi.w	r3, r3, #32
 80072f6:	6023      	strmi	r3, [r4, #0]
 80072f8:	b91e      	cbnz	r6, 8007302 <_printf_i+0x196>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	f023 0320 	bic.w	r3, r3, #32
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	2310      	movs	r3, #16
 8007304:	e7b0      	b.n	8007268 <_printf_i+0xfc>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	f043 0320 	orr.w	r3, r3, #32
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	2378      	movs	r3, #120	; 0x78
 8007310:	4828      	ldr	r0, [pc, #160]	; (80073b4 <_printf_i+0x248>)
 8007312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007316:	e7e3      	b.n	80072e0 <_printf_i+0x174>
 8007318:	0659      	lsls	r1, r3, #25
 800731a:	bf48      	it	mi
 800731c:	b2b6      	uxthmi	r6, r6
 800731e:	e7e6      	b.n	80072ee <_printf_i+0x182>
 8007320:	4615      	mov	r5, r2
 8007322:	e7bb      	b.n	800729c <_printf_i+0x130>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	6826      	ldr	r6, [r4, #0]
 8007328:	6961      	ldr	r1, [r4, #20]
 800732a:	1d18      	adds	r0, r3, #4
 800732c:	6028      	str	r0, [r5, #0]
 800732e:	0635      	lsls	r5, r6, #24
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	d501      	bpl.n	8007338 <_printf_i+0x1cc>
 8007334:	6019      	str	r1, [r3, #0]
 8007336:	e002      	b.n	800733e <_printf_i+0x1d2>
 8007338:	0670      	lsls	r0, r6, #25
 800733a:	d5fb      	bpl.n	8007334 <_printf_i+0x1c8>
 800733c:	8019      	strh	r1, [r3, #0]
 800733e:	2300      	movs	r3, #0
 8007340:	6123      	str	r3, [r4, #16]
 8007342:	4615      	mov	r5, r2
 8007344:	e7ba      	b.n	80072bc <_printf_i+0x150>
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	1d1a      	adds	r2, r3, #4
 800734a:	602a      	str	r2, [r5, #0]
 800734c:	681d      	ldr	r5, [r3, #0]
 800734e:	6862      	ldr	r2, [r4, #4]
 8007350:	2100      	movs	r1, #0
 8007352:	4628      	mov	r0, r5
 8007354:	f7f8 ff4c 	bl	80001f0 <memchr>
 8007358:	b108      	cbz	r0, 800735e <_printf_i+0x1f2>
 800735a:	1b40      	subs	r0, r0, r5
 800735c:	6060      	str	r0, [r4, #4]
 800735e:	6863      	ldr	r3, [r4, #4]
 8007360:	6123      	str	r3, [r4, #16]
 8007362:	2300      	movs	r3, #0
 8007364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007368:	e7a8      	b.n	80072bc <_printf_i+0x150>
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	462a      	mov	r2, r5
 800736e:	4649      	mov	r1, r9
 8007370:	4640      	mov	r0, r8
 8007372:	47d0      	blx	sl
 8007374:	3001      	adds	r0, #1
 8007376:	d0ab      	beq.n	80072d0 <_printf_i+0x164>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	079b      	lsls	r3, r3, #30
 800737c:	d413      	bmi.n	80073a6 <_printf_i+0x23a>
 800737e:	68e0      	ldr	r0, [r4, #12]
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	4298      	cmp	r0, r3
 8007384:	bfb8      	it	lt
 8007386:	4618      	movlt	r0, r3
 8007388:	e7a4      	b.n	80072d4 <_printf_i+0x168>
 800738a:	2301      	movs	r3, #1
 800738c:	4632      	mov	r2, r6
 800738e:	4649      	mov	r1, r9
 8007390:	4640      	mov	r0, r8
 8007392:	47d0      	blx	sl
 8007394:	3001      	adds	r0, #1
 8007396:	d09b      	beq.n	80072d0 <_printf_i+0x164>
 8007398:	3501      	adds	r5, #1
 800739a:	68e3      	ldr	r3, [r4, #12]
 800739c:	9903      	ldr	r1, [sp, #12]
 800739e:	1a5b      	subs	r3, r3, r1
 80073a0:	42ab      	cmp	r3, r5
 80073a2:	dcf2      	bgt.n	800738a <_printf_i+0x21e>
 80073a4:	e7eb      	b.n	800737e <_printf_i+0x212>
 80073a6:	2500      	movs	r5, #0
 80073a8:	f104 0619 	add.w	r6, r4, #25
 80073ac:	e7f5      	b.n	800739a <_printf_i+0x22e>
 80073ae:	bf00      	nop
 80073b0:	08009726 	.word	0x08009726
 80073b4:	08009737 	.word	0x08009737

080073b8 <iprintf>:
 80073b8:	b40f      	push	{r0, r1, r2, r3}
 80073ba:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <iprintf+0x2c>)
 80073bc:	b513      	push	{r0, r1, r4, lr}
 80073be:	681c      	ldr	r4, [r3, #0]
 80073c0:	b124      	cbz	r4, 80073cc <iprintf+0x14>
 80073c2:	69a3      	ldr	r3, [r4, #24]
 80073c4:	b913      	cbnz	r3, 80073cc <iprintf+0x14>
 80073c6:	4620      	mov	r0, r4
 80073c8:	f001 f8da 	bl	8008580 <__sinit>
 80073cc:	ab05      	add	r3, sp, #20
 80073ce:	9a04      	ldr	r2, [sp, #16]
 80073d0:	68a1      	ldr	r1, [r4, #8]
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	4620      	mov	r0, r4
 80073d6:	f001 fe97 	bl	8009108 <_vfiprintf_r>
 80073da:	b002      	add	sp, #8
 80073dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073e0:	b004      	add	sp, #16
 80073e2:	4770      	bx	lr
 80073e4:	20000024 	.word	0x20000024

080073e8 <_puts_r>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	460e      	mov	r6, r1
 80073ec:	4605      	mov	r5, r0
 80073ee:	b118      	cbz	r0, 80073f8 <_puts_r+0x10>
 80073f0:	6983      	ldr	r3, [r0, #24]
 80073f2:	b90b      	cbnz	r3, 80073f8 <_puts_r+0x10>
 80073f4:	f001 f8c4 	bl	8008580 <__sinit>
 80073f8:	69ab      	ldr	r3, [r5, #24]
 80073fa:	68ac      	ldr	r4, [r5, #8]
 80073fc:	b913      	cbnz	r3, 8007404 <_puts_r+0x1c>
 80073fe:	4628      	mov	r0, r5
 8007400:	f001 f8be 	bl	8008580 <__sinit>
 8007404:	4b2c      	ldr	r3, [pc, #176]	; (80074b8 <_puts_r+0xd0>)
 8007406:	429c      	cmp	r4, r3
 8007408:	d120      	bne.n	800744c <_puts_r+0x64>
 800740a:	686c      	ldr	r4, [r5, #4]
 800740c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800740e:	07db      	lsls	r3, r3, #31
 8007410:	d405      	bmi.n	800741e <_puts_r+0x36>
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	0598      	lsls	r0, r3, #22
 8007416:	d402      	bmi.n	800741e <_puts_r+0x36>
 8007418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800741a:	f001 f954 	bl	80086c6 <__retarget_lock_acquire_recursive>
 800741e:	89a3      	ldrh	r3, [r4, #12]
 8007420:	0719      	lsls	r1, r3, #28
 8007422:	d51d      	bpl.n	8007460 <_puts_r+0x78>
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	b1db      	cbz	r3, 8007460 <_puts_r+0x78>
 8007428:	3e01      	subs	r6, #1
 800742a:	68a3      	ldr	r3, [r4, #8]
 800742c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007430:	3b01      	subs	r3, #1
 8007432:	60a3      	str	r3, [r4, #8]
 8007434:	bb39      	cbnz	r1, 8007486 <_puts_r+0x9e>
 8007436:	2b00      	cmp	r3, #0
 8007438:	da38      	bge.n	80074ac <_puts_r+0xc4>
 800743a:	4622      	mov	r2, r4
 800743c:	210a      	movs	r1, #10
 800743e:	4628      	mov	r0, r5
 8007440:	f000 f848 	bl	80074d4 <__swbuf_r>
 8007444:	3001      	adds	r0, #1
 8007446:	d011      	beq.n	800746c <_puts_r+0x84>
 8007448:	250a      	movs	r5, #10
 800744a:	e011      	b.n	8007470 <_puts_r+0x88>
 800744c:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <_puts_r+0xd4>)
 800744e:	429c      	cmp	r4, r3
 8007450:	d101      	bne.n	8007456 <_puts_r+0x6e>
 8007452:	68ac      	ldr	r4, [r5, #8]
 8007454:	e7da      	b.n	800740c <_puts_r+0x24>
 8007456:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <_puts_r+0xd8>)
 8007458:	429c      	cmp	r4, r3
 800745a:	bf08      	it	eq
 800745c:	68ec      	ldreq	r4, [r5, #12]
 800745e:	e7d5      	b.n	800740c <_puts_r+0x24>
 8007460:	4621      	mov	r1, r4
 8007462:	4628      	mov	r0, r5
 8007464:	f000 f888 	bl	8007578 <__swsetup_r>
 8007468:	2800      	cmp	r0, #0
 800746a:	d0dd      	beq.n	8007428 <_puts_r+0x40>
 800746c:	f04f 35ff 	mov.w	r5, #4294967295
 8007470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007472:	07da      	lsls	r2, r3, #31
 8007474:	d405      	bmi.n	8007482 <_puts_r+0x9a>
 8007476:	89a3      	ldrh	r3, [r4, #12]
 8007478:	059b      	lsls	r3, r3, #22
 800747a:	d402      	bmi.n	8007482 <_puts_r+0x9a>
 800747c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800747e:	f001 f923 	bl	80086c8 <__retarget_lock_release_recursive>
 8007482:	4628      	mov	r0, r5
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	2b00      	cmp	r3, #0
 8007488:	da04      	bge.n	8007494 <_puts_r+0xac>
 800748a:	69a2      	ldr	r2, [r4, #24]
 800748c:	429a      	cmp	r2, r3
 800748e:	dc06      	bgt.n	800749e <_puts_r+0xb6>
 8007490:	290a      	cmp	r1, #10
 8007492:	d004      	beq.n	800749e <_puts_r+0xb6>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	6022      	str	r2, [r4, #0]
 800749a:	7019      	strb	r1, [r3, #0]
 800749c:	e7c5      	b.n	800742a <_puts_r+0x42>
 800749e:	4622      	mov	r2, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 f817 	bl	80074d4 <__swbuf_r>
 80074a6:	3001      	adds	r0, #1
 80074a8:	d1bf      	bne.n	800742a <_puts_r+0x42>
 80074aa:	e7df      	b.n	800746c <_puts_r+0x84>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	250a      	movs	r5, #10
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	6022      	str	r2, [r4, #0]
 80074b4:	701d      	strb	r5, [r3, #0]
 80074b6:	e7db      	b.n	8007470 <_puts_r+0x88>
 80074b8:	080097f8 	.word	0x080097f8
 80074bc:	08009818 	.word	0x08009818
 80074c0:	080097d8 	.word	0x080097d8

080074c4 <puts>:
 80074c4:	4b02      	ldr	r3, [pc, #8]	; (80074d0 <puts+0xc>)
 80074c6:	4601      	mov	r1, r0
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f7ff bf8d 	b.w	80073e8 <_puts_r>
 80074ce:	bf00      	nop
 80074d0:	20000024 	.word	0x20000024

080074d4 <__swbuf_r>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	460e      	mov	r6, r1
 80074d8:	4614      	mov	r4, r2
 80074da:	4605      	mov	r5, r0
 80074dc:	b118      	cbz	r0, 80074e6 <__swbuf_r+0x12>
 80074de:	6983      	ldr	r3, [r0, #24]
 80074e0:	b90b      	cbnz	r3, 80074e6 <__swbuf_r+0x12>
 80074e2:	f001 f84d 	bl	8008580 <__sinit>
 80074e6:	4b21      	ldr	r3, [pc, #132]	; (800756c <__swbuf_r+0x98>)
 80074e8:	429c      	cmp	r4, r3
 80074ea:	d12b      	bne.n	8007544 <__swbuf_r+0x70>
 80074ec:	686c      	ldr	r4, [r5, #4]
 80074ee:	69a3      	ldr	r3, [r4, #24]
 80074f0:	60a3      	str	r3, [r4, #8]
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	071a      	lsls	r2, r3, #28
 80074f6:	d52f      	bpl.n	8007558 <__swbuf_r+0x84>
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	b36b      	cbz	r3, 8007558 <__swbuf_r+0x84>
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	6820      	ldr	r0, [r4, #0]
 8007500:	1ac0      	subs	r0, r0, r3
 8007502:	6963      	ldr	r3, [r4, #20]
 8007504:	b2f6      	uxtb	r6, r6
 8007506:	4283      	cmp	r3, r0
 8007508:	4637      	mov	r7, r6
 800750a:	dc04      	bgt.n	8007516 <__swbuf_r+0x42>
 800750c:	4621      	mov	r1, r4
 800750e:	4628      	mov	r0, r5
 8007510:	f000 ffa2 	bl	8008458 <_fflush_r>
 8007514:	bb30      	cbnz	r0, 8007564 <__swbuf_r+0x90>
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	3b01      	subs	r3, #1
 800751a:	60a3      	str	r3, [r4, #8]
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	6022      	str	r2, [r4, #0]
 8007522:	701e      	strb	r6, [r3, #0]
 8007524:	6963      	ldr	r3, [r4, #20]
 8007526:	3001      	adds	r0, #1
 8007528:	4283      	cmp	r3, r0
 800752a:	d004      	beq.n	8007536 <__swbuf_r+0x62>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	07db      	lsls	r3, r3, #31
 8007530:	d506      	bpl.n	8007540 <__swbuf_r+0x6c>
 8007532:	2e0a      	cmp	r6, #10
 8007534:	d104      	bne.n	8007540 <__swbuf_r+0x6c>
 8007536:	4621      	mov	r1, r4
 8007538:	4628      	mov	r0, r5
 800753a:	f000 ff8d 	bl	8008458 <_fflush_r>
 800753e:	b988      	cbnz	r0, 8007564 <__swbuf_r+0x90>
 8007540:	4638      	mov	r0, r7
 8007542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007544:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <__swbuf_r+0x9c>)
 8007546:	429c      	cmp	r4, r3
 8007548:	d101      	bne.n	800754e <__swbuf_r+0x7a>
 800754a:	68ac      	ldr	r4, [r5, #8]
 800754c:	e7cf      	b.n	80074ee <__swbuf_r+0x1a>
 800754e:	4b09      	ldr	r3, [pc, #36]	; (8007574 <__swbuf_r+0xa0>)
 8007550:	429c      	cmp	r4, r3
 8007552:	bf08      	it	eq
 8007554:	68ec      	ldreq	r4, [r5, #12]
 8007556:	e7ca      	b.n	80074ee <__swbuf_r+0x1a>
 8007558:	4621      	mov	r1, r4
 800755a:	4628      	mov	r0, r5
 800755c:	f000 f80c 	bl	8007578 <__swsetup_r>
 8007560:	2800      	cmp	r0, #0
 8007562:	d0cb      	beq.n	80074fc <__swbuf_r+0x28>
 8007564:	f04f 37ff 	mov.w	r7, #4294967295
 8007568:	e7ea      	b.n	8007540 <__swbuf_r+0x6c>
 800756a:	bf00      	nop
 800756c:	080097f8 	.word	0x080097f8
 8007570:	08009818 	.word	0x08009818
 8007574:	080097d8 	.word	0x080097d8

08007578 <__swsetup_r>:
 8007578:	4b32      	ldr	r3, [pc, #200]	; (8007644 <__swsetup_r+0xcc>)
 800757a:	b570      	push	{r4, r5, r6, lr}
 800757c:	681d      	ldr	r5, [r3, #0]
 800757e:	4606      	mov	r6, r0
 8007580:	460c      	mov	r4, r1
 8007582:	b125      	cbz	r5, 800758e <__swsetup_r+0x16>
 8007584:	69ab      	ldr	r3, [r5, #24]
 8007586:	b913      	cbnz	r3, 800758e <__swsetup_r+0x16>
 8007588:	4628      	mov	r0, r5
 800758a:	f000 fff9 	bl	8008580 <__sinit>
 800758e:	4b2e      	ldr	r3, [pc, #184]	; (8007648 <__swsetup_r+0xd0>)
 8007590:	429c      	cmp	r4, r3
 8007592:	d10f      	bne.n	80075b4 <__swsetup_r+0x3c>
 8007594:	686c      	ldr	r4, [r5, #4]
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800759c:	0719      	lsls	r1, r3, #28
 800759e:	d42c      	bmi.n	80075fa <__swsetup_r+0x82>
 80075a0:	06dd      	lsls	r5, r3, #27
 80075a2:	d411      	bmi.n	80075c8 <__swsetup_r+0x50>
 80075a4:	2309      	movs	r3, #9
 80075a6:	6033      	str	r3, [r6, #0]
 80075a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075ac:	81a3      	strh	r3, [r4, #12]
 80075ae:	f04f 30ff 	mov.w	r0, #4294967295
 80075b2:	e03e      	b.n	8007632 <__swsetup_r+0xba>
 80075b4:	4b25      	ldr	r3, [pc, #148]	; (800764c <__swsetup_r+0xd4>)
 80075b6:	429c      	cmp	r4, r3
 80075b8:	d101      	bne.n	80075be <__swsetup_r+0x46>
 80075ba:	68ac      	ldr	r4, [r5, #8]
 80075bc:	e7eb      	b.n	8007596 <__swsetup_r+0x1e>
 80075be:	4b24      	ldr	r3, [pc, #144]	; (8007650 <__swsetup_r+0xd8>)
 80075c0:	429c      	cmp	r4, r3
 80075c2:	bf08      	it	eq
 80075c4:	68ec      	ldreq	r4, [r5, #12]
 80075c6:	e7e6      	b.n	8007596 <__swsetup_r+0x1e>
 80075c8:	0758      	lsls	r0, r3, #29
 80075ca:	d512      	bpl.n	80075f2 <__swsetup_r+0x7a>
 80075cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ce:	b141      	cbz	r1, 80075e2 <__swsetup_r+0x6a>
 80075d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075d4:	4299      	cmp	r1, r3
 80075d6:	d002      	beq.n	80075de <__swsetup_r+0x66>
 80075d8:	4630      	mov	r0, r6
 80075da:	f001 fc8b 	bl	8008ef4 <_free_r>
 80075de:	2300      	movs	r3, #0
 80075e0:	6363      	str	r3, [r4, #52]	; 0x34
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	2300      	movs	r3, #0
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	f043 0308 	orr.w	r3, r3, #8
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	b94b      	cbnz	r3, 8007612 <__swsetup_r+0x9a>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007608:	d003      	beq.n	8007612 <__swsetup_r+0x9a>
 800760a:	4621      	mov	r1, r4
 800760c:	4630      	mov	r0, r6
 800760e:	f001 f881 	bl	8008714 <__smakebuf_r>
 8007612:	89a0      	ldrh	r0, [r4, #12]
 8007614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007618:	f010 0301 	ands.w	r3, r0, #1
 800761c:	d00a      	beq.n	8007634 <__swsetup_r+0xbc>
 800761e:	2300      	movs	r3, #0
 8007620:	60a3      	str	r3, [r4, #8]
 8007622:	6963      	ldr	r3, [r4, #20]
 8007624:	425b      	negs	r3, r3
 8007626:	61a3      	str	r3, [r4, #24]
 8007628:	6923      	ldr	r3, [r4, #16]
 800762a:	b943      	cbnz	r3, 800763e <__swsetup_r+0xc6>
 800762c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007630:	d1ba      	bne.n	80075a8 <__swsetup_r+0x30>
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	0781      	lsls	r1, r0, #30
 8007636:	bf58      	it	pl
 8007638:	6963      	ldrpl	r3, [r4, #20]
 800763a:	60a3      	str	r3, [r4, #8]
 800763c:	e7f4      	b.n	8007628 <__swsetup_r+0xb0>
 800763e:	2000      	movs	r0, #0
 8007640:	e7f7      	b.n	8007632 <__swsetup_r+0xba>
 8007642:	bf00      	nop
 8007644:	20000024 	.word	0x20000024
 8007648:	080097f8 	.word	0x080097f8
 800764c:	08009818 	.word	0x08009818
 8007650:	080097d8 	.word	0x080097d8

08007654 <quorem>:
 8007654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007658:	6903      	ldr	r3, [r0, #16]
 800765a:	690c      	ldr	r4, [r1, #16]
 800765c:	42a3      	cmp	r3, r4
 800765e:	4607      	mov	r7, r0
 8007660:	f2c0 8081 	blt.w	8007766 <quorem+0x112>
 8007664:	3c01      	subs	r4, #1
 8007666:	f101 0814 	add.w	r8, r1, #20
 800766a:	f100 0514 	add.w	r5, r0, #20
 800766e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007678:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800767c:	3301      	adds	r3, #1
 800767e:	429a      	cmp	r2, r3
 8007680:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007684:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007688:	fbb2 f6f3 	udiv	r6, r2, r3
 800768c:	d331      	bcc.n	80076f2 <quorem+0x9e>
 800768e:	f04f 0e00 	mov.w	lr, #0
 8007692:	4640      	mov	r0, r8
 8007694:	46ac      	mov	ip, r5
 8007696:	46f2      	mov	sl, lr
 8007698:	f850 2b04 	ldr.w	r2, [r0], #4
 800769c:	b293      	uxth	r3, r2
 800769e:	fb06 e303 	mla	r3, r6, r3, lr
 80076a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	ebaa 0303 	sub.w	r3, sl, r3
 80076ac:	f8dc a000 	ldr.w	sl, [ip]
 80076b0:	0c12      	lsrs	r2, r2, #16
 80076b2:	fa13 f38a 	uxtah	r3, r3, sl
 80076b6:	fb06 e202 	mla	r2, r6, r2, lr
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076c2:	b292      	uxth	r2, r2
 80076c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80076d0:	4581      	cmp	r9, r0
 80076d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076d6:	f84c 3b04 	str.w	r3, [ip], #4
 80076da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076de:	d2db      	bcs.n	8007698 <quorem+0x44>
 80076e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80076e4:	b92b      	cbnz	r3, 80076f2 <quorem+0x9e>
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	3b04      	subs	r3, #4
 80076ea:	429d      	cmp	r5, r3
 80076ec:	461a      	mov	r2, r3
 80076ee:	d32e      	bcc.n	800774e <quorem+0xfa>
 80076f0:	613c      	str	r4, [r7, #16]
 80076f2:	4638      	mov	r0, r7
 80076f4:	f001 fae6 	bl	8008cc4 <__mcmp>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	db24      	blt.n	8007746 <quorem+0xf2>
 80076fc:	3601      	adds	r6, #1
 80076fe:	4628      	mov	r0, r5
 8007700:	f04f 0c00 	mov.w	ip, #0
 8007704:	f858 2b04 	ldr.w	r2, [r8], #4
 8007708:	f8d0 e000 	ldr.w	lr, [r0]
 800770c:	b293      	uxth	r3, r2
 800770e:	ebac 0303 	sub.w	r3, ip, r3
 8007712:	0c12      	lsrs	r2, r2, #16
 8007714:	fa13 f38e 	uxtah	r3, r3, lr
 8007718:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800771c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007720:	b29b      	uxth	r3, r3
 8007722:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007726:	45c1      	cmp	r9, r8
 8007728:	f840 3b04 	str.w	r3, [r0], #4
 800772c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007730:	d2e8      	bcs.n	8007704 <quorem+0xb0>
 8007732:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007736:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800773a:	b922      	cbnz	r2, 8007746 <quorem+0xf2>
 800773c:	3b04      	subs	r3, #4
 800773e:	429d      	cmp	r5, r3
 8007740:	461a      	mov	r2, r3
 8007742:	d30a      	bcc.n	800775a <quorem+0x106>
 8007744:	613c      	str	r4, [r7, #16]
 8007746:	4630      	mov	r0, r6
 8007748:	b003      	add	sp, #12
 800774a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774e:	6812      	ldr	r2, [r2, #0]
 8007750:	3b04      	subs	r3, #4
 8007752:	2a00      	cmp	r2, #0
 8007754:	d1cc      	bne.n	80076f0 <quorem+0x9c>
 8007756:	3c01      	subs	r4, #1
 8007758:	e7c7      	b.n	80076ea <quorem+0x96>
 800775a:	6812      	ldr	r2, [r2, #0]
 800775c:	3b04      	subs	r3, #4
 800775e:	2a00      	cmp	r2, #0
 8007760:	d1f0      	bne.n	8007744 <quorem+0xf0>
 8007762:	3c01      	subs	r4, #1
 8007764:	e7eb      	b.n	800773e <quorem+0xea>
 8007766:	2000      	movs	r0, #0
 8007768:	e7ee      	b.n	8007748 <quorem+0xf4>
 800776a:	0000      	movs	r0, r0
 800776c:	0000      	movs	r0, r0
	...

08007770 <_dtoa_r>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	ed2d 8b04 	vpush	{d8-d9}
 8007778:	ec57 6b10 	vmov	r6, r7, d0
 800777c:	b093      	sub	sp, #76	; 0x4c
 800777e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007780:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007784:	9106      	str	r1, [sp, #24]
 8007786:	ee10 aa10 	vmov	sl, s0
 800778a:	4604      	mov	r4, r0
 800778c:	9209      	str	r2, [sp, #36]	; 0x24
 800778e:	930c      	str	r3, [sp, #48]	; 0x30
 8007790:	46bb      	mov	fp, r7
 8007792:	b975      	cbnz	r5, 80077b2 <_dtoa_r+0x42>
 8007794:	2010      	movs	r0, #16
 8007796:	f000 fffd 	bl	8008794 <malloc>
 800779a:	4602      	mov	r2, r0
 800779c:	6260      	str	r0, [r4, #36]	; 0x24
 800779e:	b920      	cbnz	r0, 80077aa <_dtoa_r+0x3a>
 80077a0:	4ba7      	ldr	r3, [pc, #668]	; (8007a40 <_dtoa_r+0x2d0>)
 80077a2:	21ea      	movs	r1, #234	; 0xea
 80077a4:	48a7      	ldr	r0, [pc, #668]	; (8007a44 <_dtoa_r+0x2d4>)
 80077a6:	f001 fe45 	bl	8009434 <__assert_func>
 80077aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077ae:	6005      	str	r5, [r0, #0]
 80077b0:	60c5      	str	r5, [r0, #12]
 80077b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b4:	6819      	ldr	r1, [r3, #0]
 80077b6:	b151      	cbz	r1, 80077ce <_dtoa_r+0x5e>
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	604a      	str	r2, [r1, #4]
 80077bc:	2301      	movs	r3, #1
 80077be:	4093      	lsls	r3, r2
 80077c0:	608b      	str	r3, [r1, #8]
 80077c2:	4620      	mov	r0, r4
 80077c4:	f001 f83c 	bl	8008840 <_Bfree>
 80077c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	1e3b      	subs	r3, r7, #0
 80077d0:	bfaa      	itet	ge
 80077d2:	2300      	movge	r3, #0
 80077d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80077d8:	f8c8 3000 	strge.w	r3, [r8]
 80077dc:	4b9a      	ldr	r3, [pc, #616]	; (8007a48 <_dtoa_r+0x2d8>)
 80077de:	bfbc      	itt	lt
 80077e0:	2201      	movlt	r2, #1
 80077e2:	f8c8 2000 	strlt.w	r2, [r8]
 80077e6:	ea33 030b 	bics.w	r3, r3, fp
 80077ea:	d11b      	bne.n	8007824 <_dtoa_r+0xb4>
 80077ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077f8:	4333      	orrs	r3, r6
 80077fa:	f000 8592 	beq.w	8008322 <_dtoa_r+0xbb2>
 80077fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007800:	b963      	cbnz	r3, 800781c <_dtoa_r+0xac>
 8007802:	4b92      	ldr	r3, [pc, #584]	; (8007a4c <_dtoa_r+0x2dc>)
 8007804:	e022      	b.n	800784c <_dtoa_r+0xdc>
 8007806:	4b92      	ldr	r3, [pc, #584]	; (8007a50 <_dtoa_r+0x2e0>)
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	3308      	adds	r3, #8
 800780c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	9801      	ldr	r0, [sp, #4]
 8007812:	b013      	add	sp, #76	; 0x4c
 8007814:	ecbd 8b04 	vpop	{d8-d9}
 8007818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781c:	4b8b      	ldr	r3, [pc, #556]	; (8007a4c <_dtoa_r+0x2dc>)
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	3303      	adds	r3, #3
 8007822:	e7f3      	b.n	800780c <_dtoa_r+0x9c>
 8007824:	2200      	movs	r2, #0
 8007826:	2300      	movs	r3, #0
 8007828:	4650      	mov	r0, sl
 800782a:	4659      	mov	r1, fp
 800782c:	f7f9 f954 	bl	8000ad8 <__aeabi_dcmpeq>
 8007830:	ec4b ab19 	vmov	d9, sl, fp
 8007834:	4680      	mov	r8, r0
 8007836:	b158      	cbz	r0, 8007850 <_dtoa_r+0xe0>
 8007838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800783a:	2301      	movs	r3, #1
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 856b 	beq.w	800831c <_dtoa_r+0xbac>
 8007846:	4883      	ldr	r0, [pc, #524]	; (8007a54 <_dtoa_r+0x2e4>)
 8007848:	6018      	str	r0, [r3, #0]
 800784a:	1e43      	subs	r3, r0, #1
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	e7df      	b.n	8007810 <_dtoa_r+0xa0>
 8007850:	ec4b ab10 	vmov	d0, sl, fp
 8007854:	aa10      	add	r2, sp, #64	; 0x40
 8007856:	a911      	add	r1, sp, #68	; 0x44
 8007858:	4620      	mov	r0, r4
 800785a:	f001 fad9 	bl	8008e10 <__d2b>
 800785e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007862:	ee08 0a10 	vmov	s16, r0
 8007866:	2d00      	cmp	r5, #0
 8007868:	f000 8084 	beq.w	8007974 <_dtoa_r+0x204>
 800786c:	ee19 3a90 	vmov	r3, s19
 8007870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007874:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007878:	4656      	mov	r6, sl
 800787a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800787e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007882:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007886:	4b74      	ldr	r3, [pc, #464]	; (8007a58 <_dtoa_r+0x2e8>)
 8007888:	2200      	movs	r2, #0
 800788a:	4630      	mov	r0, r6
 800788c:	4639      	mov	r1, r7
 800788e:	f7f8 fd03 	bl	8000298 <__aeabi_dsub>
 8007892:	a365      	add	r3, pc, #404	; (adr r3, 8007a28 <_dtoa_r+0x2b8>)
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f7f8 feb6 	bl	8000608 <__aeabi_dmul>
 800789c:	a364      	add	r3, pc, #400	; (adr r3, 8007a30 <_dtoa_r+0x2c0>)
 800789e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a2:	f7f8 fcfb 	bl	800029c <__adddf3>
 80078a6:	4606      	mov	r6, r0
 80078a8:	4628      	mov	r0, r5
 80078aa:	460f      	mov	r7, r1
 80078ac:	f7f8 fe42 	bl	8000534 <__aeabi_i2d>
 80078b0:	a361      	add	r3, pc, #388	; (adr r3, 8007a38 <_dtoa_r+0x2c8>)
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	f7f8 fea7 	bl	8000608 <__aeabi_dmul>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4630      	mov	r0, r6
 80078c0:	4639      	mov	r1, r7
 80078c2:	f7f8 fceb 	bl	800029c <__adddf3>
 80078c6:	4606      	mov	r6, r0
 80078c8:	460f      	mov	r7, r1
 80078ca:	f7f9 f94d 	bl	8000b68 <__aeabi_d2iz>
 80078ce:	2200      	movs	r2, #0
 80078d0:	9000      	str	r0, [sp, #0]
 80078d2:	2300      	movs	r3, #0
 80078d4:	4630      	mov	r0, r6
 80078d6:	4639      	mov	r1, r7
 80078d8:	f7f9 f908 	bl	8000aec <__aeabi_dcmplt>
 80078dc:	b150      	cbz	r0, 80078f4 <_dtoa_r+0x184>
 80078de:	9800      	ldr	r0, [sp, #0]
 80078e0:	f7f8 fe28 	bl	8000534 <__aeabi_i2d>
 80078e4:	4632      	mov	r2, r6
 80078e6:	463b      	mov	r3, r7
 80078e8:	f7f9 f8f6 	bl	8000ad8 <__aeabi_dcmpeq>
 80078ec:	b910      	cbnz	r0, 80078f4 <_dtoa_r+0x184>
 80078ee:	9b00      	ldr	r3, [sp, #0]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	9b00      	ldr	r3, [sp, #0]
 80078f6:	2b16      	cmp	r3, #22
 80078f8:	d85a      	bhi.n	80079b0 <_dtoa_r+0x240>
 80078fa:	9a00      	ldr	r2, [sp, #0]
 80078fc:	4b57      	ldr	r3, [pc, #348]	; (8007a5c <_dtoa_r+0x2ec>)
 80078fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	ec51 0b19 	vmov	r0, r1, d9
 800790a:	f7f9 f8ef 	bl	8000aec <__aeabi_dcmplt>
 800790e:	2800      	cmp	r0, #0
 8007910:	d050      	beq.n	80079b4 <_dtoa_r+0x244>
 8007912:	9b00      	ldr	r3, [sp, #0]
 8007914:	3b01      	subs	r3, #1
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	2300      	movs	r3, #0
 800791a:	930b      	str	r3, [sp, #44]	; 0x2c
 800791c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800791e:	1b5d      	subs	r5, r3, r5
 8007920:	1e6b      	subs	r3, r5, #1
 8007922:	9305      	str	r3, [sp, #20]
 8007924:	bf45      	ittet	mi
 8007926:	f1c5 0301 	rsbmi	r3, r5, #1
 800792a:	9304      	strmi	r3, [sp, #16]
 800792c:	2300      	movpl	r3, #0
 800792e:	2300      	movmi	r3, #0
 8007930:	bf4c      	ite	mi
 8007932:	9305      	strmi	r3, [sp, #20]
 8007934:	9304      	strpl	r3, [sp, #16]
 8007936:	9b00      	ldr	r3, [sp, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	db3d      	blt.n	80079b8 <_dtoa_r+0x248>
 800793c:	9b05      	ldr	r3, [sp, #20]
 800793e:	9a00      	ldr	r2, [sp, #0]
 8007940:	920a      	str	r2, [sp, #40]	; 0x28
 8007942:	4413      	add	r3, r2
 8007944:	9305      	str	r3, [sp, #20]
 8007946:	2300      	movs	r3, #0
 8007948:	9307      	str	r3, [sp, #28]
 800794a:	9b06      	ldr	r3, [sp, #24]
 800794c:	2b09      	cmp	r3, #9
 800794e:	f200 8089 	bhi.w	8007a64 <_dtoa_r+0x2f4>
 8007952:	2b05      	cmp	r3, #5
 8007954:	bfc4      	itt	gt
 8007956:	3b04      	subgt	r3, #4
 8007958:	9306      	strgt	r3, [sp, #24]
 800795a:	9b06      	ldr	r3, [sp, #24]
 800795c:	f1a3 0302 	sub.w	r3, r3, #2
 8007960:	bfcc      	ite	gt
 8007962:	2500      	movgt	r5, #0
 8007964:	2501      	movle	r5, #1
 8007966:	2b03      	cmp	r3, #3
 8007968:	f200 8087 	bhi.w	8007a7a <_dtoa_r+0x30a>
 800796c:	e8df f003 	tbb	[pc, r3]
 8007970:	59383a2d 	.word	0x59383a2d
 8007974:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007978:	441d      	add	r5, r3
 800797a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800797e:	2b20      	cmp	r3, #32
 8007980:	bfc1      	itttt	gt
 8007982:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007986:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800798a:	fa0b f303 	lslgt.w	r3, fp, r3
 800798e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007992:	bfda      	itte	le
 8007994:	f1c3 0320 	rsble	r3, r3, #32
 8007998:	fa06 f003 	lslle.w	r0, r6, r3
 800799c:	4318      	orrgt	r0, r3
 800799e:	f7f8 fdb9 	bl	8000514 <__aeabi_ui2d>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4606      	mov	r6, r0
 80079a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80079aa:	3d01      	subs	r5, #1
 80079ac:	930e      	str	r3, [sp, #56]	; 0x38
 80079ae:	e76a      	b.n	8007886 <_dtoa_r+0x116>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e7b2      	b.n	800791a <_dtoa_r+0x1aa>
 80079b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80079b6:	e7b1      	b.n	800791c <_dtoa_r+0x1ac>
 80079b8:	9b04      	ldr	r3, [sp, #16]
 80079ba:	9a00      	ldr	r2, [sp, #0]
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	9304      	str	r3, [sp, #16]
 80079c0:	4253      	negs	r3, r2
 80079c2:	9307      	str	r3, [sp, #28]
 80079c4:	2300      	movs	r3, #0
 80079c6:	930a      	str	r3, [sp, #40]	; 0x28
 80079c8:	e7bf      	b.n	800794a <_dtoa_r+0x1da>
 80079ca:	2300      	movs	r3, #0
 80079cc:	9308      	str	r3, [sp, #32]
 80079ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dc55      	bgt.n	8007a80 <_dtoa_r+0x310>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079da:	461a      	mov	r2, r3
 80079dc:	9209      	str	r2, [sp, #36]	; 0x24
 80079de:	e00c      	b.n	80079fa <_dtoa_r+0x28a>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e7f3      	b.n	80079cc <_dtoa_r+0x25c>
 80079e4:	2300      	movs	r3, #0
 80079e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079e8:	9308      	str	r3, [sp, #32]
 80079ea:	9b00      	ldr	r3, [sp, #0]
 80079ec:	4413      	add	r3, r2
 80079ee:	9302      	str	r3, [sp, #8]
 80079f0:	3301      	adds	r3, #1
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	9303      	str	r3, [sp, #12]
 80079f6:	bfb8      	it	lt
 80079f8:	2301      	movlt	r3, #1
 80079fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079fc:	2200      	movs	r2, #0
 80079fe:	6042      	str	r2, [r0, #4]
 8007a00:	2204      	movs	r2, #4
 8007a02:	f102 0614 	add.w	r6, r2, #20
 8007a06:	429e      	cmp	r6, r3
 8007a08:	6841      	ldr	r1, [r0, #4]
 8007a0a:	d93d      	bls.n	8007a88 <_dtoa_r+0x318>
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f000 fed7 	bl	80087c0 <_Balloc>
 8007a12:	9001      	str	r0, [sp, #4]
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d13b      	bne.n	8007a90 <_dtoa_r+0x320>
 8007a18:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <_dtoa_r+0x2f0>)
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a20:	e6c0      	b.n	80077a4 <_dtoa_r+0x34>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e7df      	b.n	80079e6 <_dtoa_r+0x276>
 8007a26:	bf00      	nop
 8007a28:	636f4361 	.word	0x636f4361
 8007a2c:	3fd287a7 	.word	0x3fd287a7
 8007a30:	8b60c8b3 	.word	0x8b60c8b3
 8007a34:	3fc68a28 	.word	0x3fc68a28
 8007a38:	509f79fb 	.word	0x509f79fb
 8007a3c:	3fd34413 	.word	0x3fd34413
 8007a40:	08009755 	.word	0x08009755
 8007a44:	0800976c 	.word	0x0800976c
 8007a48:	7ff00000 	.word	0x7ff00000
 8007a4c:	08009751 	.word	0x08009751
 8007a50:	08009748 	.word	0x08009748
 8007a54:	08009725 	.word	0x08009725
 8007a58:	3ff80000 	.word	0x3ff80000
 8007a5c:	080098c0 	.word	0x080098c0
 8007a60:	080097c7 	.word	0x080097c7
 8007a64:	2501      	movs	r5, #1
 8007a66:	2300      	movs	r3, #0
 8007a68:	9306      	str	r3, [sp, #24]
 8007a6a:	9508      	str	r5, [sp, #32]
 8007a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a74:	2200      	movs	r2, #0
 8007a76:	2312      	movs	r3, #18
 8007a78:	e7b0      	b.n	80079dc <_dtoa_r+0x26c>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	9308      	str	r3, [sp, #32]
 8007a7e:	e7f5      	b.n	8007a6c <_dtoa_r+0x2fc>
 8007a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a86:	e7b8      	b.n	80079fa <_dtoa_r+0x28a>
 8007a88:	3101      	adds	r1, #1
 8007a8a:	6041      	str	r1, [r0, #4]
 8007a8c:	0052      	lsls	r2, r2, #1
 8007a8e:	e7b8      	b.n	8007a02 <_dtoa_r+0x292>
 8007a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a92:	9a01      	ldr	r2, [sp, #4]
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	2b0e      	cmp	r3, #14
 8007a9a:	f200 809d 	bhi.w	8007bd8 <_dtoa_r+0x468>
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	f000 809a 	beq.w	8007bd8 <_dtoa_r+0x468>
 8007aa4:	9b00      	ldr	r3, [sp, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	dd32      	ble.n	8007b10 <_dtoa_r+0x3a0>
 8007aaa:	4ab7      	ldr	r2, [pc, #732]	; (8007d88 <_dtoa_r+0x618>)
 8007aac:	f003 030f 	and.w	r3, r3, #15
 8007ab0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ab4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ab8:	9b00      	ldr	r3, [sp, #0]
 8007aba:	05d8      	lsls	r0, r3, #23
 8007abc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ac0:	d516      	bpl.n	8007af0 <_dtoa_r+0x380>
 8007ac2:	4bb2      	ldr	r3, [pc, #712]	; (8007d8c <_dtoa_r+0x61c>)
 8007ac4:	ec51 0b19 	vmov	r0, r1, d9
 8007ac8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007acc:	f7f8 fec6 	bl	800085c <__aeabi_ddiv>
 8007ad0:	f007 070f 	and.w	r7, r7, #15
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	468b      	mov	fp, r1
 8007ad8:	2503      	movs	r5, #3
 8007ada:	4eac      	ldr	r6, [pc, #688]	; (8007d8c <_dtoa_r+0x61c>)
 8007adc:	b957      	cbnz	r7, 8007af4 <_dtoa_r+0x384>
 8007ade:	4642      	mov	r2, r8
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	f7f8 feb9 	bl	800085c <__aeabi_ddiv>
 8007aea:	4682      	mov	sl, r0
 8007aec:	468b      	mov	fp, r1
 8007aee:	e028      	b.n	8007b42 <_dtoa_r+0x3d2>
 8007af0:	2502      	movs	r5, #2
 8007af2:	e7f2      	b.n	8007ada <_dtoa_r+0x36a>
 8007af4:	07f9      	lsls	r1, r7, #31
 8007af6:	d508      	bpl.n	8007b0a <_dtoa_r+0x39a>
 8007af8:	4640      	mov	r0, r8
 8007afa:	4649      	mov	r1, r9
 8007afc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b00:	f7f8 fd82 	bl	8000608 <__aeabi_dmul>
 8007b04:	3501      	adds	r5, #1
 8007b06:	4680      	mov	r8, r0
 8007b08:	4689      	mov	r9, r1
 8007b0a:	107f      	asrs	r7, r7, #1
 8007b0c:	3608      	adds	r6, #8
 8007b0e:	e7e5      	b.n	8007adc <_dtoa_r+0x36c>
 8007b10:	f000 809b 	beq.w	8007c4a <_dtoa_r+0x4da>
 8007b14:	9b00      	ldr	r3, [sp, #0]
 8007b16:	4f9d      	ldr	r7, [pc, #628]	; (8007d8c <_dtoa_r+0x61c>)
 8007b18:	425e      	negs	r6, r3
 8007b1a:	4b9b      	ldr	r3, [pc, #620]	; (8007d88 <_dtoa_r+0x618>)
 8007b1c:	f006 020f 	and.w	r2, r6, #15
 8007b20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	ec51 0b19 	vmov	r0, r1, d9
 8007b2c:	f7f8 fd6c 	bl	8000608 <__aeabi_dmul>
 8007b30:	1136      	asrs	r6, r6, #4
 8007b32:	4682      	mov	sl, r0
 8007b34:	468b      	mov	fp, r1
 8007b36:	2300      	movs	r3, #0
 8007b38:	2502      	movs	r5, #2
 8007b3a:	2e00      	cmp	r6, #0
 8007b3c:	d17a      	bne.n	8007c34 <_dtoa_r+0x4c4>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1d3      	bne.n	8007aea <_dtoa_r+0x37a>
 8007b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 8082 	beq.w	8007c4e <_dtoa_r+0x4de>
 8007b4a:	4b91      	ldr	r3, [pc, #580]	; (8007d90 <_dtoa_r+0x620>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4650      	mov	r0, sl
 8007b50:	4659      	mov	r1, fp
 8007b52:	f7f8 ffcb 	bl	8000aec <__aeabi_dcmplt>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d079      	beq.n	8007c4e <_dtoa_r+0x4de>
 8007b5a:	9b03      	ldr	r3, [sp, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d076      	beq.n	8007c4e <_dtoa_r+0x4de>
 8007b60:	9b02      	ldr	r3, [sp, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dd36      	ble.n	8007bd4 <_dtoa_r+0x464>
 8007b66:	9b00      	ldr	r3, [sp, #0]
 8007b68:	4650      	mov	r0, sl
 8007b6a:	4659      	mov	r1, fp
 8007b6c:	1e5f      	subs	r7, r3, #1
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4b88      	ldr	r3, [pc, #544]	; (8007d94 <_dtoa_r+0x624>)
 8007b72:	f7f8 fd49 	bl	8000608 <__aeabi_dmul>
 8007b76:	9e02      	ldr	r6, [sp, #8]
 8007b78:	4682      	mov	sl, r0
 8007b7a:	468b      	mov	fp, r1
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f7f8 fcd8 	bl	8000534 <__aeabi_i2d>
 8007b84:	4652      	mov	r2, sl
 8007b86:	465b      	mov	r3, fp
 8007b88:	f7f8 fd3e 	bl	8000608 <__aeabi_dmul>
 8007b8c:	4b82      	ldr	r3, [pc, #520]	; (8007d98 <_dtoa_r+0x628>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f7f8 fb84 	bl	800029c <__adddf3>
 8007b94:	46d0      	mov	r8, sl
 8007b96:	46d9      	mov	r9, fp
 8007b98:	4682      	mov	sl, r0
 8007b9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	d158      	bne.n	8007c54 <_dtoa_r+0x4e4>
 8007ba2:	4b7e      	ldr	r3, [pc, #504]	; (8007d9c <_dtoa_r+0x62c>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	4649      	mov	r1, r9
 8007baa:	f7f8 fb75 	bl	8000298 <__aeabi_dsub>
 8007bae:	4652      	mov	r2, sl
 8007bb0:	465b      	mov	r3, fp
 8007bb2:	4680      	mov	r8, r0
 8007bb4:	4689      	mov	r9, r1
 8007bb6:	f7f8 ffb7 	bl	8000b28 <__aeabi_dcmpgt>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f040 8295 	bne.w	80080ea <_dtoa_r+0x97a>
 8007bc0:	4652      	mov	r2, sl
 8007bc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	4649      	mov	r1, r9
 8007bca:	f7f8 ff8f 	bl	8000aec <__aeabi_dcmplt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f040 8289 	bne.w	80080e6 <_dtoa_r+0x976>
 8007bd4:	ec5b ab19 	vmov	sl, fp, d9
 8007bd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f2c0 8148 	blt.w	8007e70 <_dtoa_r+0x700>
 8007be0:	9a00      	ldr	r2, [sp, #0]
 8007be2:	2a0e      	cmp	r2, #14
 8007be4:	f300 8144 	bgt.w	8007e70 <_dtoa_r+0x700>
 8007be8:	4b67      	ldr	r3, [pc, #412]	; (8007d88 <_dtoa_r+0x618>)
 8007bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f280 80d5 	bge.w	8007da4 <_dtoa_r+0x634>
 8007bfa:	9b03      	ldr	r3, [sp, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f300 80d1 	bgt.w	8007da4 <_dtoa_r+0x634>
 8007c02:	f040 826f 	bne.w	80080e4 <_dtoa_r+0x974>
 8007c06:	4b65      	ldr	r3, [pc, #404]	; (8007d9c <_dtoa_r+0x62c>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	f7f8 fcfb 	bl	8000608 <__aeabi_dmul>
 8007c12:	4652      	mov	r2, sl
 8007c14:	465b      	mov	r3, fp
 8007c16:	f7f8 ff7d 	bl	8000b14 <__aeabi_dcmpge>
 8007c1a:	9e03      	ldr	r6, [sp, #12]
 8007c1c:	4637      	mov	r7, r6
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f040 8245 	bne.w	80080ae <_dtoa_r+0x93e>
 8007c24:	9d01      	ldr	r5, [sp, #4]
 8007c26:	2331      	movs	r3, #49	; 0x31
 8007c28:	f805 3b01 	strb.w	r3, [r5], #1
 8007c2c:	9b00      	ldr	r3, [sp, #0]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	e240      	b.n	80080b6 <_dtoa_r+0x946>
 8007c34:	07f2      	lsls	r2, r6, #31
 8007c36:	d505      	bpl.n	8007c44 <_dtoa_r+0x4d4>
 8007c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c3c:	f7f8 fce4 	bl	8000608 <__aeabi_dmul>
 8007c40:	3501      	adds	r5, #1
 8007c42:	2301      	movs	r3, #1
 8007c44:	1076      	asrs	r6, r6, #1
 8007c46:	3708      	adds	r7, #8
 8007c48:	e777      	b.n	8007b3a <_dtoa_r+0x3ca>
 8007c4a:	2502      	movs	r5, #2
 8007c4c:	e779      	b.n	8007b42 <_dtoa_r+0x3d2>
 8007c4e:	9f00      	ldr	r7, [sp, #0]
 8007c50:	9e03      	ldr	r6, [sp, #12]
 8007c52:	e794      	b.n	8007b7e <_dtoa_r+0x40e>
 8007c54:	9901      	ldr	r1, [sp, #4]
 8007c56:	4b4c      	ldr	r3, [pc, #304]	; (8007d88 <_dtoa_r+0x618>)
 8007c58:	4431      	add	r1, r6
 8007c5a:	910d      	str	r1, [sp, #52]	; 0x34
 8007c5c:	9908      	ldr	r1, [sp, #32]
 8007c5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c66:	2900      	cmp	r1, #0
 8007c68:	d043      	beq.n	8007cf2 <_dtoa_r+0x582>
 8007c6a:	494d      	ldr	r1, [pc, #308]	; (8007da0 <_dtoa_r+0x630>)
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	f7f8 fdf5 	bl	800085c <__aeabi_ddiv>
 8007c72:	4652      	mov	r2, sl
 8007c74:	465b      	mov	r3, fp
 8007c76:	f7f8 fb0f 	bl	8000298 <__aeabi_dsub>
 8007c7a:	9d01      	ldr	r5, [sp, #4]
 8007c7c:	4682      	mov	sl, r0
 8007c7e:	468b      	mov	fp, r1
 8007c80:	4649      	mov	r1, r9
 8007c82:	4640      	mov	r0, r8
 8007c84:	f7f8 ff70 	bl	8000b68 <__aeabi_d2iz>
 8007c88:	4606      	mov	r6, r0
 8007c8a:	f7f8 fc53 	bl	8000534 <__aeabi_i2d>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4640      	mov	r0, r8
 8007c94:	4649      	mov	r1, r9
 8007c96:	f7f8 faff 	bl	8000298 <__aeabi_dsub>
 8007c9a:	3630      	adds	r6, #48	; 0x30
 8007c9c:	f805 6b01 	strb.w	r6, [r5], #1
 8007ca0:	4652      	mov	r2, sl
 8007ca2:	465b      	mov	r3, fp
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	4689      	mov	r9, r1
 8007ca8:	f7f8 ff20 	bl	8000aec <__aeabi_dcmplt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d163      	bne.n	8007d78 <_dtoa_r+0x608>
 8007cb0:	4642      	mov	r2, r8
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	4936      	ldr	r1, [pc, #216]	; (8007d90 <_dtoa_r+0x620>)
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	f7f8 faee 	bl	8000298 <__aeabi_dsub>
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	465b      	mov	r3, fp
 8007cc0:	f7f8 ff14 	bl	8000aec <__aeabi_dcmplt>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f040 80b5 	bne.w	8007e34 <_dtoa_r+0x6c4>
 8007cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ccc:	429d      	cmp	r5, r3
 8007cce:	d081      	beq.n	8007bd4 <_dtoa_r+0x464>
 8007cd0:	4b30      	ldr	r3, [pc, #192]	; (8007d94 <_dtoa_r+0x624>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4650      	mov	r0, sl
 8007cd6:	4659      	mov	r1, fp
 8007cd8:	f7f8 fc96 	bl	8000608 <__aeabi_dmul>
 8007cdc:	4b2d      	ldr	r3, [pc, #180]	; (8007d94 <_dtoa_r+0x624>)
 8007cde:	4682      	mov	sl, r0
 8007ce0:	468b      	mov	fp, r1
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f7f8 fc8e 	bl	8000608 <__aeabi_dmul>
 8007cec:	4680      	mov	r8, r0
 8007cee:	4689      	mov	r9, r1
 8007cf0:	e7c6      	b.n	8007c80 <_dtoa_r+0x510>
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	f7f8 fc87 	bl	8000608 <__aeabi_dmul>
 8007cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cfc:	9d01      	ldr	r5, [sp, #4]
 8007cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d00:	4682      	mov	sl, r0
 8007d02:	468b      	mov	fp, r1
 8007d04:	4649      	mov	r1, r9
 8007d06:	4640      	mov	r0, r8
 8007d08:	f7f8 ff2e 	bl	8000b68 <__aeabi_d2iz>
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	f7f8 fc11 	bl	8000534 <__aeabi_i2d>
 8007d12:	3630      	adds	r6, #48	; 0x30
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4640      	mov	r0, r8
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	f7f8 fabc 	bl	8000298 <__aeabi_dsub>
 8007d20:	f805 6b01 	strb.w	r6, [r5], #1
 8007d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d26:	429d      	cmp	r5, r3
 8007d28:	4680      	mov	r8, r0
 8007d2a:	4689      	mov	r9, r1
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	d124      	bne.n	8007d7c <_dtoa_r+0x60c>
 8007d32:	4b1b      	ldr	r3, [pc, #108]	; (8007da0 <_dtoa_r+0x630>)
 8007d34:	4650      	mov	r0, sl
 8007d36:	4659      	mov	r1, fp
 8007d38:	f7f8 fab0 	bl	800029c <__adddf3>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4640      	mov	r0, r8
 8007d42:	4649      	mov	r1, r9
 8007d44:	f7f8 fef0 	bl	8000b28 <__aeabi_dcmpgt>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d173      	bne.n	8007e34 <_dtoa_r+0x6c4>
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	465b      	mov	r3, fp
 8007d50:	4913      	ldr	r1, [pc, #76]	; (8007da0 <_dtoa_r+0x630>)
 8007d52:	2000      	movs	r0, #0
 8007d54:	f7f8 faa0 	bl	8000298 <__aeabi_dsub>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	4649      	mov	r1, r9
 8007d60:	f7f8 fec4 	bl	8000aec <__aeabi_dcmplt>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	f43f af35 	beq.w	8007bd4 <_dtoa_r+0x464>
 8007d6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d6c:	1e6b      	subs	r3, r5, #1
 8007d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d74:	2b30      	cmp	r3, #48	; 0x30
 8007d76:	d0f8      	beq.n	8007d6a <_dtoa_r+0x5fa>
 8007d78:	9700      	str	r7, [sp, #0]
 8007d7a:	e049      	b.n	8007e10 <_dtoa_r+0x6a0>
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <_dtoa_r+0x624>)
 8007d7e:	f7f8 fc43 	bl	8000608 <__aeabi_dmul>
 8007d82:	4680      	mov	r8, r0
 8007d84:	4689      	mov	r9, r1
 8007d86:	e7bd      	b.n	8007d04 <_dtoa_r+0x594>
 8007d88:	080098c0 	.word	0x080098c0
 8007d8c:	08009898 	.word	0x08009898
 8007d90:	3ff00000 	.word	0x3ff00000
 8007d94:	40240000 	.word	0x40240000
 8007d98:	401c0000 	.word	0x401c0000
 8007d9c:	40140000 	.word	0x40140000
 8007da0:	3fe00000 	.word	0x3fe00000
 8007da4:	9d01      	ldr	r5, [sp, #4]
 8007da6:	4656      	mov	r6, sl
 8007da8:	465f      	mov	r7, fp
 8007daa:	4642      	mov	r2, r8
 8007dac:	464b      	mov	r3, r9
 8007dae:	4630      	mov	r0, r6
 8007db0:	4639      	mov	r1, r7
 8007db2:	f7f8 fd53 	bl	800085c <__aeabi_ddiv>
 8007db6:	f7f8 fed7 	bl	8000b68 <__aeabi_d2iz>
 8007dba:	4682      	mov	sl, r0
 8007dbc:	f7f8 fbba 	bl	8000534 <__aeabi_i2d>
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	f7f8 fc20 	bl	8000608 <__aeabi_dmul>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4630      	mov	r0, r6
 8007dce:	4639      	mov	r1, r7
 8007dd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007dd4:	f7f8 fa60 	bl	8000298 <__aeabi_dsub>
 8007dd8:	f805 6b01 	strb.w	r6, [r5], #1
 8007ddc:	9e01      	ldr	r6, [sp, #4]
 8007dde:	9f03      	ldr	r7, [sp, #12]
 8007de0:	1bae      	subs	r6, r5, r6
 8007de2:	42b7      	cmp	r7, r6
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	d135      	bne.n	8007e56 <_dtoa_r+0x6e6>
 8007dea:	f7f8 fa57 	bl	800029c <__adddf3>
 8007dee:	4642      	mov	r2, r8
 8007df0:	464b      	mov	r3, r9
 8007df2:	4606      	mov	r6, r0
 8007df4:	460f      	mov	r7, r1
 8007df6:	f7f8 fe97 	bl	8000b28 <__aeabi_dcmpgt>
 8007dfa:	b9d0      	cbnz	r0, 8007e32 <_dtoa_r+0x6c2>
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	464b      	mov	r3, r9
 8007e00:	4630      	mov	r0, r6
 8007e02:	4639      	mov	r1, r7
 8007e04:	f7f8 fe68 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e08:	b110      	cbz	r0, 8007e10 <_dtoa_r+0x6a0>
 8007e0a:	f01a 0f01 	tst.w	sl, #1
 8007e0e:	d110      	bne.n	8007e32 <_dtoa_r+0x6c2>
 8007e10:	4620      	mov	r0, r4
 8007e12:	ee18 1a10 	vmov	r1, s16
 8007e16:	f000 fd13 	bl	8008840 <_Bfree>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9800      	ldr	r0, [sp, #0]
 8007e1e:	702b      	strb	r3, [r5, #0]
 8007e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e22:	3001      	adds	r0, #1
 8007e24:	6018      	str	r0, [r3, #0]
 8007e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f43f acf1 	beq.w	8007810 <_dtoa_r+0xa0>
 8007e2e:	601d      	str	r5, [r3, #0]
 8007e30:	e4ee      	b.n	8007810 <_dtoa_r+0xa0>
 8007e32:	9f00      	ldr	r7, [sp, #0]
 8007e34:	462b      	mov	r3, r5
 8007e36:	461d      	mov	r5, r3
 8007e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e3c:	2a39      	cmp	r2, #57	; 0x39
 8007e3e:	d106      	bne.n	8007e4e <_dtoa_r+0x6de>
 8007e40:	9a01      	ldr	r2, [sp, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d1f7      	bne.n	8007e36 <_dtoa_r+0x6c6>
 8007e46:	9901      	ldr	r1, [sp, #4]
 8007e48:	2230      	movs	r2, #48	; 0x30
 8007e4a:	3701      	adds	r7, #1
 8007e4c:	700a      	strb	r2, [r1, #0]
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	3201      	adds	r2, #1
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	e790      	b.n	8007d78 <_dtoa_r+0x608>
 8007e56:	4ba6      	ldr	r3, [pc, #664]	; (80080f0 <_dtoa_r+0x980>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f7f8 fbd5 	bl	8000608 <__aeabi_dmul>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2300      	movs	r3, #0
 8007e62:	4606      	mov	r6, r0
 8007e64:	460f      	mov	r7, r1
 8007e66:	f7f8 fe37 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d09d      	beq.n	8007daa <_dtoa_r+0x63a>
 8007e6e:	e7cf      	b.n	8007e10 <_dtoa_r+0x6a0>
 8007e70:	9a08      	ldr	r2, [sp, #32]
 8007e72:	2a00      	cmp	r2, #0
 8007e74:	f000 80d7 	beq.w	8008026 <_dtoa_r+0x8b6>
 8007e78:	9a06      	ldr	r2, [sp, #24]
 8007e7a:	2a01      	cmp	r2, #1
 8007e7c:	f300 80ba 	bgt.w	8007ff4 <_dtoa_r+0x884>
 8007e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	f000 80b2 	beq.w	8007fec <_dtoa_r+0x87c>
 8007e88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e8c:	9e07      	ldr	r6, [sp, #28]
 8007e8e:	9d04      	ldr	r5, [sp, #16]
 8007e90:	9a04      	ldr	r2, [sp, #16]
 8007e92:	441a      	add	r2, r3
 8007e94:	9204      	str	r2, [sp, #16]
 8007e96:	9a05      	ldr	r2, [sp, #20]
 8007e98:	2101      	movs	r1, #1
 8007e9a:	441a      	add	r2, r3
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	9205      	str	r2, [sp, #20]
 8007ea0:	f000 fd86 	bl	80089b0 <__i2b>
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	2d00      	cmp	r5, #0
 8007ea8:	dd0c      	ble.n	8007ec4 <_dtoa_r+0x754>
 8007eaa:	9b05      	ldr	r3, [sp, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dd09      	ble.n	8007ec4 <_dtoa_r+0x754>
 8007eb0:	42ab      	cmp	r3, r5
 8007eb2:	9a04      	ldr	r2, [sp, #16]
 8007eb4:	bfa8      	it	ge
 8007eb6:	462b      	movge	r3, r5
 8007eb8:	1ad2      	subs	r2, r2, r3
 8007eba:	9204      	str	r2, [sp, #16]
 8007ebc:	9a05      	ldr	r2, [sp, #20]
 8007ebe:	1aed      	subs	r5, r5, r3
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	b31b      	cbz	r3, 8007f10 <_dtoa_r+0x7a0>
 8007ec8:	9b08      	ldr	r3, [sp, #32]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80af 	beq.w	800802e <_dtoa_r+0x8be>
 8007ed0:	2e00      	cmp	r6, #0
 8007ed2:	dd13      	ble.n	8007efc <_dtoa_r+0x78c>
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 fe29 	bl	8008b30 <__pow5mult>
 8007ede:	ee18 2a10 	vmov	r2, s16
 8007ee2:	4601      	mov	r1, r0
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fd78 	bl	80089dc <__multiply>
 8007eec:	ee18 1a10 	vmov	r1, s16
 8007ef0:	4680      	mov	r8, r0
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 fca4 	bl	8008840 <_Bfree>
 8007ef8:	ee08 8a10 	vmov	s16, r8
 8007efc:	9b07      	ldr	r3, [sp, #28]
 8007efe:	1b9a      	subs	r2, r3, r6
 8007f00:	d006      	beq.n	8007f10 <_dtoa_r+0x7a0>
 8007f02:	ee18 1a10 	vmov	r1, s16
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 fe12 	bl	8008b30 <__pow5mult>
 8007f0c:	ee08 0a10 	vmov	s16, r0
 8007f10:	2101      	movs	r1, #1
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 fd4c 	bl	80089b0 <__i2b>
 8007f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	f340 8088 	ble.w	8008032 <_dtoa_r+0x8c2>
 8007f22:	461a      	mov	r2, r3
 8007f24:	4601      	mov	r1, r0
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 fe02 	bl	8008b30 <__pow5mult>
 8007f2c:	9b06      	ldr	r3, [sp, #24]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	4606      	mov	r6, r0
 8007f32:	f340 8081 	ble.w	8008038 <_dtoa_r+0x8c8>
 8007f36:	f04f 0800 	mov.w	r8, #0
 8007f3a:	6933      	ldr	r3, [r6, #16]
 8007f3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f40:	6918      	ldr	r0, [r3, #16]
 8007f42:	f000 fce5 	bl	8008910 <__hi0bits>
 8007f46:	f1c0 0020 	rsb	r0, r0, #32
 8007f4a:	9b05      	ldr	r3, [sp, #20]
 8007f4c:	4418      	add	r0, r3
 8007f4e:	f010 001f 	ands.w	r0, r0, #31
 8007f52:	f000 8092 	beq.w	800807a <_dtoa_r+0x90a>
 8007f56:	f1c0 0320 	rsb	r3, r0, #32
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	f340 808a 	ble.w	8008074 <_dtoa_r+0x904>
 8007f60:	f1c0 001c 	rsb	r0, r0, #28
 8007f64:	9b04      	ldr	r3, [sp, #16]
 8007f66:	4403      	add	r3, r0
 8007f68:	9304      	str	r3, [sp, #16]
 8007f6a:	9b05      	ldr	r3, [sp, #20]
 8007f6c:	4403      	add	r3, r0
 8007f6e:	4405      	add	r5, r0
 8007f70:	9305      	str	r3, [sp, #20]
 8007f72:	9b04      	ldr	r3, [sp, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dd07      	ble.n	8007f88 <_dtoa_r+0x818>
 8007f78:	ee18 1a10 	vmov	r1, s16
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 fe30 	bl	8008be4 <__lshift>
 8007f84:	ee08 0a10 	vmov	s16, r0
 8007f88:	9b05      	ldr	r3, [sp, #20]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dd05      	ble.n	8007f9a <_dtoa_r+0x82a>
 8007f8e:	4631      	mov	r1, r6
 8007f90:	461a      	mov	r2, r3
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fe26 	bl	8008be4 <__lshift>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d06e      	beq.n	800807e <_dtoa_r+0x90e>
 8007fa0:	ee18 0a10 	vmov	r0, s16
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	f000 fe8d 	bl	8008cc4 <__mcmp>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	da67      	bge.n	800807e <_dtoa_r+0x90e>
 8007fae:	9b00      	ldr	r3, [sp, #0]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	ee18 1a10 	vmov	r1, s16
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	220a      	movs	r2, #10
 8007fba:	2300      	movs	r3, #0
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f000 fc61 	bl	8008884 <__multadd>
 8007fc2:	9b08      	ldr	r3, [sp, #32]
 8007fc4:	ee08 0a10 	vmov	s16, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 81b1 	beq.w	8008330 <_dtoa_r+0xbc0>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	220a      	movs	r2, #10
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f000 fc55 	bl	8008884 <__multadd>
 8007fda:	9b02      	ldr	r3, [sp, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	4607      	mov	r7, r0
 8007fe0:	f300 808e 	bgt.w	8008100 <_dtoa_r+0x990>
 8007fe4:	9b06      	ldr	r3, [sp, #24]
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	dc51      	bgt.n	800808e <_dtoa_r+0x91e>
 8007fea:	e089      	b.n	8008100 <_dtoa_r+0x990>
 8007fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ff2:	e74b      	b.n	8007e8c <_dtoa_r+0x71c>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	1e5e      	subs	r6, r3, #1
 8007ff8:	9b07      	ldr	r3, [sp, #28]
 8007ffa:	42b3      	cmp	r3, r6
 8007ffc:	bfbf      	itttt	lt
 8007ffe:	9b07      	ldrlt	r3, [sp, #28]
 8008000:	9607      	strlt	r6, [sp, #28]
 8008002:	1af2      	sublt	r2, r6, r3
 8008004:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008006:	bfb6      	itet	lt
 8008008:	189b      	addlt	r3, r3, r2
 800800a:	1b9e      	subge	r6, r3, r6
 800800c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	bfb8      	it	lt
 8008012:	2600      	movlt	r6, #0
 8008014:	2b00      	cmp	r3, #0
 8008016:	bfb7      	itett	lt
 8008018:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800801c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008020:	1a9d      	sublt	r5, r3, r2
 8008022:	2300      	movlt	r3, #0
 8008024:	e734      	b.n	8007e90 <_dtoa_r+0x720>
 8008026:	9e07      	ldr	r6, [sp, #28]
 8008028:	9d04      	ldr	r5, [sp, #16]
 800802a:	9f08      	ldr	r7, [sp, #32]
 800802c:	e73b      	b.n	8007ea6 <_dtoa_r+0x736>
 800802e:	9a07      	ldr	r2, [sp, #28]
 8008030:	e767      	b.n	8007f02 <_dtoa_r+0x792>
 8008032:	9b06      	ldr	r3, [sp, #24]
 8008034:	2b01      	cmp	r3, #1
 8008036:	dc18      	bgt.n	800806a <_dtoa_r+0x8fa>
 8008038:	f1ba 0f00 	cmp.w	sl, #0
 800803c:	d115      	bne.n	800806a <_dtoa_r+0x8fa>
 800803e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008042:	b993      	cbnz	r3, 800806a <_dtoa_r+0x8fa>
 8008044:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008048:	0d1b      	lsrs	r3, r3, #20
 800804a:	051b      	lsls	r3, r3, #20
 800804c:	b183      	cbz	r3, 8008070 <_dtoa_r+0x900>
 800804e:	9b04      	ldr	r3, [sp, #16]
 8008050:	3301      	adds	r3, #1
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	9b05      	ldr	r3, [sp, #20]
 8008056:	3301      	adds	r3, #1
 8008058:	9305      	str	r3, [sp, #20]
 800805a:	f04f 0801 	mov.w	r8, #1
 800805e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008060:	2b00      	cmp	r3, #0
 8008062:	f47f af6a 	bne.w	8007f3a <_dtoa_r+0x7ca>
 8008066:	2001      	movs	r0, #1
 8008068:	e76f      	b.n	8007f4a <_dtoa_r+0x7da>
 800806a:	f04f 0800 	mov.w	r8, #0
 800806e:	e7f6      	b.n	800805e <_dtoa_r+0x8ee>
 8008070:	4698      	mov	r8, r3
 8008072:	e7f4      	b.n	800805e <_dtoa_r+0x8ee>
 8008074:	f43f af7d 	beq.w	8007f72 <_dtoa_r+0x802>
 8008078:	4618      	mov	r0, r3
 800807a:	301c      	adds	r0, #28
 800807c:	e772      	b.n	8007f64 <_dtoa_r+0x7f4>
 800807e:	9b03      	ldr	r3, [sp, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	dc37      	bgt.n	80080f4 <_dtoa_r+0x984>
 8008084:	9b06      	ldr	r3, [sp, #24]
 8008086:	2b02      	cmp	r3, #2
 8008088:	dd34      	ble.n	80080f4 <_dtoa_r+0x984>
 800808a:	9b03      	ldr	r3, [sp, #12]
 800808c:	9302      	str	r3, [sp, #8]
 800808e:	9b02      	ldr	r3, [sp, #8]
 8008090:	b96b      	cbnz	r3, 80080ae <_dtoa_r+0x93e>
 8008092:	4631      	mov	r1, r6
 8008094:	2205      	movs	r2, #5
 8008096:	4620      	mov	r0, r4
 8008098:	f000 fbf4 	bl	8008884 <__multadd>
 800809c:	4601      	mov	r1, r0
 800809e:	4606      	mov	r6, r0
 80080a0:	ee18 0a10 	vmov	r0, s16
 80080a4:	f000 fe0e 	bl	8008cc4 <__mcmp>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	f73f adbb 	bgt.w	8007c24 <_dtoa_r+0x4b4>
 80080ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b0:	9d01      	ldr	r5, [sp, #4]
 80080b2:	43db      	mvns	r3, r3
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	f04f 0800 	mov.w	r8, #0
 80080ba:	4631      	mov	r1, r6
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fbbf 	bl	8008840 <_Bfree>
 80080c2:	2f00      	cmp	r7, #0
 80080c4:	f43f aea4 	beq.w	8007e10 <_dtoa_r+0x6a0>
 80080c8:	f1b8 0f00 	cmp.w	r8, #0
 80080cc:	d005      	beq.n	80080da <_dtoa_r+0x96a>
 80080ce:	45b8      	cmp	r8, r7
 80080d0:	d003      	beq.n	80080da <_dtoa_r+0x96a>
 80080d2:	4641      	mov	r1, r8
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fbb3 	bl	8008840 <_Bfree>
 80080da:	4639      	mov	r1, r7
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 fbaf 	bl	8008840 <_Bfree>
 80080e2:	e695      	b.n	8007e10 <_dtoa_r+0x6a0>
 80080e4:	2600      	movs	r6, #0
 80080e6:	4637      	mov	r7, r6
 80080e8:	e7e1      	b.n	80080ae <_dtoa_r+0x93e>
 80080ea:	9700      	str	r7, [sp, #0]
 80080ec:	4637      	mov	r7, r6
 80080ee:	e599      	b.n	8007c24 <_dtoa_r+0x4b4>
 80080f0:	40240000 	.word	0x40240000
 80080f4:	9b08      	ldr	r3, [sp, #32]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 80ca 	beq.w	8008290 <_dtoa_r+0xb20>
 80080fc:	9b03      	ldr	r3, [sp, #12]
 80080fe:	9302      	str	r3, [sp, #8]
 8008100:	2d00      	cmp	r5, #0
 8008102:	dd05      	ble.n	8008110 <_dtoa_r+0x9a0>
 8008104:	4639      	mov	r1, r7
 8008106:	462a      	mov	r2, r5
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fd6b 	bl	8008be4 <__lshift>
 800810e:	4607      	mov	r7, r0
 8008110:	f1b8 0f00 	cmp.w	r8, #0
 8008114:	d05b      	beq.n	80081ce <_dtoa_r+0xa5e>
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fb51 	bl	80087c0 <_Balloc>
 800811e:	4605      	mov	r5, r0
 8008120:	b928      	cbnz	r0, 800812e <_dtoa_r+0x9be>
 8008122:	4b87      	ldr	r3, [pc, #540]	; (8008340 <_dtoa_r+0xbd0>)
 8008124:	4602      	mov	r2, r0
 8008126:	f240 21ea 	movw	r1, #746	; 0x2ea
 800812a:	f7ff bb3b 	b.w	80077a4 <_dtoa_r+0x34>
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	3202      	adds	r2, #2
 8008132:	0092      	lsls	r2, r2, #2
 8008134:	f107 010c 	add.w	r1, r7, #12
 8008138:	300c      	adds	r0, #12
 800813a:	f000 fb33 	bl	80087a4 <memcpy>
 800813e:	2201      	movs	r2, #1
 8008140:	4629      	mov	r1, r5
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fd4e 	bl	8008be4 <__lshift>
 8008148:	9b01      	ldr	r3, [sp, #4]
 800814a:	f103 0901 	add.w	r9, r3, #1
 800814e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008152:	4413      	add	r3, r2
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	f00a 0301 	and.w	r3, sl, #1
 800815a:	46b8      	mov	r8, r7
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	4607      	mov	r7, r0
 8008160:	4631      	mov	r1, r6
 8008162:	ee18 0a10 	vmov	r0, s16
 8008166:	f7ff fa75 	bl	8007654 <quorem>
 800816a:	4641      	mov	r1, r8
 800816c:	9002      	str	r0, [sp, #8]
 800816e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008172:	ee18 0a10 	vmov	r0, s16
 8008176:	f000 fda5 	bl	8008cc4 <__mcmp>
 800817a:	463a      	mov	r2, r7
 800817c:	9003      	str	r0, [sp, #12]
 800817e:	4631      	mov	r1, r6
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fdbb 	bl	8008cfc <__mdiff>
 8008186:	68c2      	ldr	r2, [r0, #12]
 8008188:	f109 3bff 	add.w	fp, r9, #4294967295
 800818c:	4605      	mov	r5, r0
 800818e:	bb02      	cbnz	r2, 80081d2 <_dtoa_r+0xa62>
 8008190:	4601      	mov	r1, r0
 8008192:	ee18 0a10 	vmov	r0, s16
 8008196:	f000 fd95 	bl	8008cc4 <__mcmp>
 800819a:	4602      	mov	r2, r0
 800819c:	4629      	mov	r1, r5
 800819e:	4620      	mov	r0, r4
 80081a0:	9207      	str	r2, [sp, #28]
 80081a2:	f000 fb4d 	bl	8008840 <_Bfree>
 80081a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80081aa:	ea43 0102 	orr.w	r1, r3, r2
 80081ae:	9b04      	ldr	r3, [sp, #16]
 80081b0:	430b      	orrs	r3, r1
 80081b2:	464d      	mov	r5, r9
 80081b4:	d10f      	bne.n	80081d6 <_dtoa_r+0xa66>
 80081b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081ba:	d02a      	beq.n	8008212 <_dtoa_r+0xaa2>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	dd02      	ble.n	80081c8 <_dtoa_r+0xa58>
 80081c2:	9b02      	ldr	r3, [sp, #8]
 80081c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80081c8:	f88b a000 	strb.w	sl, [fp]
 80081cc:	e775      	b.n	80080ba <_dtoa_r+0x94a>
 80081ce:	4638      	mov	r0, r7
 80081d0:	e7ba      	b.n	8008148 <_dtoa_r+0x9d8>
 80081d2:	2201      	movs	r2, #1
 80081d4:	e7e2      	b.n	800819c <_dtoa_r+0xa2c>
 80081d6:	9b03      	ldr	r3, [sp, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	db04      	blt.n	80081e6 <_dtoa_r+0xa76>
 80081dc:	9906      	ldr	r1, [sp, #24]
 80081de:	430b      	orrs	r3, r1
 80081e0:	9904      	ldr	r1, [sp, #16]
 80081e2:	430b      	orrs	r3, r1
 80081e4:	d122      	bne.n	800822c <_dtoa_r+0xabc>
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	ddee      	ble.n	80081c8 <_dtoa_r+0xa58>
 80081ea:	ee18 1a10 	vmov	r1, s16
 80081ee:	2201      	movs	r2, #1
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 fcf7 	bl	8008be4 <__lshift>
 80081f6:	4631      	mov	r1, r6
 80081f8:	ee08 0a10 	vmov	s16, r0
 80081fc:	f000 fd62 	bl	8008cc4 <__mcmp>
 8008200:	2800      	cmp	r0, #0
 8008202:	dc03      	bgt.n	800820c <_dtoa_r+0xa9c>
 8008204:	d1e0      	bne.n	80081c8 <_dtoa_r+0xa58>
 8008206:	f01a 0f01 	tst.w	sl, #1
 800820a:	d0dd      	beq.n	80081c8 <_dtoa_r+0xa58>
 800820c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008210:	d1d7      	bne.n	80081c2 <_dtoa_r+0xa52>
 8008212:	2339      	movs	r3, #57	; 0x39
 8008214:	f88b 3000 	strb.w	r3, [fp]
 8008218:	462b      	mov	r3, r5
 800821a:	461d      	mov	r5, r3
 800821c:	3b01      	subs	r3, #1
 800821e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008222:	2a39      	cmp	r2, #57	; 0x39
 8008224:	d071      	beq.n	800830a <_dtoa_r+0xb9a>
 8008226:	3201      	adds	r2, #1
 8008228:	701a      	strb	r2, [r3, #0]
 800822a:	e746      	b.n	80080ba <_dtoa_r+0x94a>
 800822c:	2a00      	cmp	r2, #0
 800822e:	dd07      	ble.n	8008240 <_dtoa_r+0xad0>
 8008230:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008234:	d0ed      	beq.n	8008212 <_dtoa_r+0xaa2>
 8008236:	f10a 0301 	add.w	r3, sl, #1
 800823a:	f88b 3000 	strb.w	r3, [fp]
 800823e:	e73c      	b.n	80080ba <_dtoa_r+0x94a>
 8008240:	9b05      	ldr	r3, [sp, #20]
 8008242:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008246:	4599      	cmp	r9, r3
 8008248:	d047      	beq.n	80082da <_dtoa_r+0xb6a>
 800824a:	ee18 1a10 	vmov	r1, s16
 800824e:	2300      	movs	r3, #0
 8008250:	220a      	movs	r2, #10
 8008252:	4620      	mov	r0, r4
 8008254:	f000 fb16 	bl	8008884 <__multadd>
 8008258:	45b8      	cmp	r8, r7
 800825a:	ee08 0a10 	vmov	s16, r0
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	f04f 020a 	mov.w	r2, #10
 8008266:	4641      	mov	r1, r8
 8008268:	4620      	mov	r0, r4
 800826a:	d106      	bne.n	800827a <_dtoa_r+0xb0a>
 800826c:	f000 fb0a 	bl	8008884 <__multadd>
 8008270:	4680      	mov	r8, r0
 8008272:	4607      	mov	r7, r0
 8008274:	f109 0901 	add.w	r9, r9, #1
 8008278:	e772      	b.n	8008160 <_dtoa_r+0x9f0>
 800827a:	f000 fb03 	bl	8008884 <__multadd>
 800827e:	4639      	mov	r1, r7
 8008280:	4680      	mov	r8, r0
 8008282:	2300      	movs	r3, #0
 8008284:	220a      	movs	r2, #10
 8008286:	4620      	mov	r0, r4
 8008288:	f000 fafc 	bl	8008884 <__multadd>
 800828c:	4607      	mov	r7, r0
 800828e:	e7f1      	b.n	8008274 <_dtoa_r+0xb04>
 8008290:	9b03      	ldr	r3, [sp, #12]
 8008292:	9302      	str	r3, [sp, #8]
 8008294:	9d01      	ldr	r5, [sp, #4]
 8008296:	ee18 0a10 	vmov	r0, s16
 800829a:	4631      	mov	r1, r6
 800829c:	f7ff f9da 	bl	8007654 <quorem>
 80082a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082a4:	9b01      	ldr	r3, [sp, #4]
 80082a6:	f805 ab01 	strb.w	sl, [r5], #1
 80082aa:	1aea      	subs	r2, r5, r3
 80082ac:	9b02      	ldr	r3, [sp, #8]
 80082ae:	4293      	cmp	r3, r2
 80082b0:	dd09      	ble.n	80082c6 <_dtoa_r+0xb56>
 80082b2:	ee18 1a10 	vmov	r1, s16
 80082b6:	2300      	movs	r3, #0
 80082b8:	220a      	movs	r2, #10
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fae2 	bl	8008884 <__multadd>
 80082c0:	ee08 0a10 	vmov	s16, r0
 80082c4:	e7e7      	b.n	8008296 <_dtoa_r+0xb26>
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	bfc8      	it	gt
 80082cc:	461d      	movgt	r5, r3
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	bfd8      	it	le
 80082d2:	2501      	movle	r5, #1
 80082d4:	441d      	add	r5, r3
 80082d6:	f04f 0800 	mov.w	r8, #0
 80082da:	ee18 1a10 	vmov	r1, s16
 80082de:	2201      	movs	r2, #1
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 fc7f 	bl	8008be4 <__lshift>
 80082e6:	4631      	mov	r1, r6
 80082e8:	ee08 0a10 	vmov	s16, r0
 80082ec:	f000 fcea 	bl	8008cc4 <__mcmp>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	dc91      	bgt.n	8008218 <_dtoa_r+0xaa8>
 80082f4:	d102      	bne.n	80082fc <_dtoa_r+0xb8c>
 80082f6:	f01a 0f01 	tst.w	sl, #1
 80082fa:	d18d      	bne.n	8008218 <_dtoa_r+0xaa8>
 80082fc:	462b      	mov	r3, r5
 80082fe:	461d      	mov	r5, r3
 8008300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008304:	2a30      	cmp	r2, #48	; 0x30
 8008306:	d0fa      	beq.n	80082fe <_dtoa_r+0xb8e>
 8008308:	e6d7      	b.n	80080ba <_dtoa_r+0x94a>
 800830a:	9a01      	ldr	r2, [sp, #4]
 800830c:	429a      	cmp	r2, r3
 800830e:	d184      	bne.n	800821a <_dtoa_r+0xaaa>
 8008310:	9b00      	ldr	r3, [sp, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	2331      	movs	r3, #49	; 0x31
 8008318:	7013      	strb	r3, [r2, #0]
 800831a:	e6ce      	b.n	80080ba <_dtoa_r+0x94a>
 800831c:	4b09      	ldr	r3, [pc, #36]	; (8008344 <_dtoa_r+0xbd4>)
 800831e:	f7ff ba95 	b.w	800784c <_dtoa_r+0xdc>
 8008322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008324:	2b00      	cmp	r3, #0
 8008326:	f47f aa6e 	bne.w	8007806 <_dtoa_r+0x96>
 800832a:	4b07      	ldr	r3, [pc, #28]	; (8008348 <_dtoa_r+0xbd8>)
 800832c:	f7ff ba8e 	b.w	800784c <_dtoa_r+0xdc>
 8008330:	9b02      	ldr	r3, [sp, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	dcae      	bgt.n	8008294 <_dtoa_r+0xb24>
 8008336:	9b06      	ldr	r3, [sp, #24]
 8008338:	2b02      	cmp	r3, #2
 800833a:	f73f aea8 	bgt.w	800808e <_dtoa_r+0x91e>
 800833e:	e7a9      	b.n	8008294 <_dtoa_r+0xb24>
 8008340:	080097c7 	.word	0x080097c7
 8008344:	08009724 	.word	0x08009724
 8008348:	08009748 	.word	0x08009748

0800834c <__sflush_r>:
 800834c:	898a      	ldrh	r2, [r1, #12]
 800834e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008352:	4605      	mov	r5, r0
 8008354:	0710      	lsls	r0, r2, #28
 8008356:	460c      	mov	r4, r1
 8008358:	d458      	bmi.n	800840c <__sflush_r+0xc0>
 800835a:	684b      	ldr	r3, [r1, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	dc05      	bgt.n	800836c <__sflush_r+0x20>
 8008360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	dc02      	bgt.n	800836c <__sflush_r+0x20>
 8008366:	2000      	movs	r0, #0
 8008368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800836c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800836e:	2e00      	cmp	r6, #0
 8008370:	d0f9      	beq.n	8008366 <__sflush_r+0x1a>
 8008372:	2300      	movs	r3, #0
 8008374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008378:	682f      	ldr	r7, [r5, #0]
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	d032      	beq.n	80083e4 <__sflush_r+0x98>
 800837e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	075a      	lsls	r2, r3, #29
 8008384:	d505      	bpl.n	8008392 <__sflush_r+0x46>
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	1ac0      	subs	r0, r0, r3
 800838a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800838c:	b10b      	cbz	r3, 8008392 <__sflush_r+0x46>
 800838e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008390:	1ac0      	subs	r0, r0, r3
 8008392:	2300      	movs	r3, #0
 8008394:	4602      	mov	r2, r0
 8008396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008398:	6a21      	ldr	r1, [r4, #32]
 800839a:	4628      	mov	r0, r5
 800839c:	47b0      	blx	r6
 800839e:	1c43      	adds	r3, r0, #1
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	d106      	bne.n	80083b2 <__sflush_r+0x66>
 80083a4:	6829      	ldr	r1, [r5, #0]
 80083a6:	291d      	cmp	r1, #29
 80083a8:	d82c      	bhi.n	8008404 <__sflush_r+0xb8>
 80083aa:	4a2a      	ldr	r2, [pc, #168]	; (8008454 <__sflush_r+0x108>)
 80083ac:	40ca      	lsrs	r2, r1
 80083ae:	07d6      	lsls	r6, r2, #31
 80083b0:	d528      	bpl.n	8008404 <__sflush_r+0xb8>
 80083b2:	2200      	movs	r2, #0
 80083b4:	6062      	str	r2, [r4, #4]
 80083b6:	04d9      	lsls	r1, r3, #19
 80083b8:	6922      	ldr	r2, [r4, #16]
 80083ba:	6022      	str	r2, [r4, #0]
 80083bc:	d504      	bpl.n	80083c8 <__sflush_r+0x7c>
 80083be:	1c42      	adds	r2, r0, #1
 80083c0:	d101      	bne.n	80083c6 <__sflush_r+0x7a>
 80083c2:	682b      	ldr	r3, [r5, #0]
 80083c4:	b903      	cbnz	r3, 80083c8 <__sflush_r+0x7c>
 80083c6:	6560      	str	r0, [r4, #84]	; 0x54
 80083c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ca:	602f      	str	r7, [r5, #0]
 80083cc:	2900      	cmp	r1, #0
 80083ce:	d0ca      	beq.n	8008366 <__sflush_r+0x1a>
 80083d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083d4:	4299      	cmp	r1, r3
 80083d6:	d002      	beq.n	80083de <__sflush_r+0x92>
 80083d8:	4628      	mov	r0, r5
 80083da:	f000 fd8b 	bl	8008ef4 <_free_r>
 80083de:	2000      	movs	r0, #0
 80083e0:	6360      	str	r0, [r4, #52]	; 0x34
 80083e2:	e7c1      	b.n	8008368 <__sflush_r+0x1c>
 80083e4:	6a21      	ldr	r1, [r4, #32]
 80083e6:	2301      	movs	r3, #1
 80083e8:	4628      	mov	r0, r5
 80083ea:	47b0      	blx	r6
 80083ec:	1c41      	adds	r1, r0, #1
 80083ee:	d1c7      	bne.n	8008380 <__sflush_r+0x34>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0c4      	beq.n	8008380 <__sflush_r+0x34>
 80083f6:	2b1d      	cmp	r3, #29
 80083f8:	d001      	beq.n	80083fe <__sflush_r+0xb2>
 80083fa:	2b16      	cmp	r3, #22
 80083fc:	d101      	bne.n	8008402 <__sflush_r+0xb6>
 80083fe:	602f      	str	r7, [r5, #0]
 8008400:	e7b1      	b.n	8008366 <__sflush_r+0x1a>
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008408:	81a3      	strh	r3, [r4, #12]
 800840a:	e7ad      	b.n	8008368 <__sflush_r+0x1c>
 800840c:	690f      	ldr	r7, [r1, #16]
 800840e:	2f00      	cmp	r7, #0
 8008410:	d0a9      	beq.n	8008366 <__sflush_r+0x1a>
 8008412:	0793      	lsls	r3, r2, #30
 8008414:	680e      	ldr	r6, [r1, #0]
 8008416:	bf08      	it	eq
 8008418:	694b      	ldreq	r3, [r1, #20]
 800841a:	600f      	str	r7, [r1, #0]
 800841c:	bf18      	it	ne
 800841e:	2300      	movne	r3, #0
 8008420:	eba6 0807 	sub.w	r8, r6, r7
 8008424:	608b      	str	r3, [r1, #8]
 8008426:	f1b8 0f00 	cmp.w	r8, #0
 800842a:	dd9c      	ble.n	8008366 <__sflush_r+0x1a>
 800842c:	6a21      	ldr	r1, [r4, #32]
 800842e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008430:	4643      	mov	r3, r8
 8008432:	463a      	mov	r2, r7
 8008434:	4628      	mov	r0, r5
 8008436:	47b0      	blx	r6
 8008438:	2800      	cmp	r0, #0
 800843a:	dc06      	bgt.n	800844a <__sflush_r+0xfe>
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008442:	81a3      	strh	r3, [r4, #12]
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	e78e      	b.n	8008368 <__sflush_r+0x1c>
 800844a:	4407      	add	r7, r0
 800844c:	eba8 0800 	sub.w	r8, r8, r0
 8008450:	e7e9      	b.n	8008426 <__sflush_r+0xda>
 8008452:	bf00      	nop
 8008454:	20400001 	.word	0x20400001

08008458 <_fflush_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	690b      	ldr	r3, [r1, #16]
 800845c:	4605      	mov	r5, r0
 800845e:	460c      	mov	r4, r1
 8008460:	b913      	cbnz	r3, 8008468 <_fflush_r+0x10>
 8008462:	2500      	movs	r5, #0
 8008464:	4628      	mov	r0, r5
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	b118      	cbz	r0, 8008472 <_fflush_r+0x1a>
 800846a:	6983      	ldr	r3, [r0, #24]
 800846c:	b90b      	cbnz	r3, 8008472 <_fflush_r+0x1a>
 800846e:	f000 f887 	bl	8008580 <__sinit>
 8008472:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <_fflush_r+0x6c>)
 8008474:	429c      	cmp	r4, r3
 8008476:	d11b      	bne.n	80084b0 <_fflush_r+0x58>
 8008478:	686c      	ldr	r4, [r5, #4]
 800847a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0ef      	beq.n	8008462 <_fflush_r+0xa>
 8008482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008484:	07d0      	lsls	r0, r2, #31
 8008486:	d404      	bmi.n	8008492 <_fflush_r+0x3a>
 8008488:	0599      	lsls	r1, r3, #22
 800848a:	d402      	bmi.n	8008492 <_fflush_r+0x3a>
 800848c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800848e:	f000 f91a 	bl	80086c6 <__retarget_lock_acquire_recursive>
 8008492:	4628      	mov	r0, r5
 8008494:	4621      	mov	r1, r4
 8008496:	f7ff ff59 	bl	800834c <__sflush_r>
 800849a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800849c:	07da      	lsls	r2, r3, #31
 800849e:	4605      	mov	r5, r0
 80084a0:	d4e0      	bmi.n	8008464 <_fflush_r+0xc>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	059b      	lsls	r3, r3, #22
 80084a6:	d4dd      	bmi.n	8008464 <_fflush_r+0xc>
 80084a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084aa:	f000 f90d 	bl	80086c8 <__retarget_lock_release_recursive>
 80084ae:	e7d9      	b.n	8008464 <_fflush_r+0xc>
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <_fflush_r+0x70>)
 80084b2:	429c      	cmp	r4, r3
 80084b4:	d101      	bne.n	80084ba <_fflush_r+0x62>
 80084b6:	68ac      	ldr	r4, [r5, #8]
 80084b8:	e7df      	b.n	800847a <_fflush_r+0x22>
 80084ba:	4b04      	ldr	r3, [pc, #16]	; (80084cc <_fflush_r+0x74>)
 80084bc:	429c      	cmp	r4, r3
 80084be:	bf08      	it	eq
 80084c0:	68ec      	ldreq	r4, [r5, #12]
 80084c2:	e7da      	b.n	800847a <_fflush_r+0x22>
 80084c4:	080097f8 	.word	0x080097f8
 80084c8:	08009818 	.word	0x08009818
 80084cc:	080097d8 	.word	0x080097d8

080084d0 <std>:
 80084d0:	2300      	movs	r3, #0
 80084d2:	b510      	push	{r4, lr}
 80084d4:	4604      	mov	r4, r0
 80084d6:	e9c0 3300 	strd	r3, r3, [r0]
 80084da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084de:	6083      	str	r3, [r0, #8]
 80084e0:	8181      	strh	r1, [r0, #12]
 80084e2:	6643      	str	r3, [r0, #100]	; 0x64
 80084e4:	81c2      	strh	r2, [r0, #14]
 80084e6:	6183      	str	r3, [r0, #24]
 80084e8:	4619      	mov	r1, r3
 80084ea:	2208      	movs	r2, #8
 80084ec:	305c      	adds	r0, #92	; 0x5c
 80084ee:	f7fe faf1 	bl	8006ad4 <memset>
 80084f2:	4b05      	ldr	r3, [pc, #20]	; (8008508 <std+0x38>)
 80084f4:	6263      	str	r3, [r4, #36]	; 0x24
 80084f6:	4b05      	ldr	r3, [pc, #20]	; (800850c <std+0x3c>)
 80084f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <std+0x40>)
 80084fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084fe:	4b05      	ldr	r3, [pc, #20]	; (8008514 <std+0x44>)
 8008500:	6224      	str	r4, [r4, #32]
 8008502:	6323      	str	r3, [r4, #48]	; 0x30
 8008504:	bd10      	pop	{r4, pc}
 8008506:	bf00      	nop
 8008508:	08009389 	.word	0x08009389
 800850c:	080093ab 	.word	0x080093ab
 8008510:	080093e3 	.word	0x080093e3
 8008514:	08009407 	.word	0x08009407

08008518 <_cleanup_r>:
 8008518:	4901      	ldr	r1, [pc, #4]	; (8008520 <_cleanup_r+0x8>)
 800851a:	f000 b8af 	b.w	800867c <_fwalk_reent>
 800851e:	bf00      	nop
 8008520:	08008459 	.word	0x08008459

08008524 <__sfmoreglue>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	2268      	movs	r2, #104	; 0x68
 8008528:	1e4d      	subs	r5, r1, #1
 800852a:	4355      	muls	r5, r2
 800852c:	460e      	mov	r6, r1
 800852e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008532:	f000 fd4b 	bl	8008fcc <_malloc_r>
 8008536:	4604      	mov	r4, r0
 8008538:	b140      	cbz	r0, 800854c <__sfmoreglue+0x28>
 800853a:	2100      	movs	r1, #0
 800853c:	e9c0 1600 	strd	r1, r6, [r0]
 8008540:	300c      	adds	r0, #12
 8008542:	60a0      	str	r0, [r4, #8]
 8008544:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008548:	f7fe fac4 	bl	8006ad4 <memset>
 800854c:	4620      	mov	r0, r4
 800854e:	bd70      	pop	{r4, r5, r6, pc}

08008550 <__sfp_lock_acquire>:
 8008550:	4801      	ldr	r0, [pc, #4]	; (8008558 <__sfp_lock_acquire+0x8>)
 8008552:	f000 b8b8 	b.w	80086c6 <__retarget_lock_acquire_recursive>
 8008556:	bf00      	nop
 8008558:	20000589 	.word	0x20000589

0800855c <__sfp_lock_release>:
 800855c:	4801      	ldr	r0, [pc, #4]	; (8008564 <__sfp_lock_release+0x8>)
 800855e:	f000 b8b3 	b.w	80086c8 <__retarget_lock_release_recursive>
 8008562:	bf00      	nop
 8008564:	20000589 	.word	0x20000589

08008568 <__sinit_lock_acquire>:
 8008568:	4801      	ldr	r0, [pc, #4]	; (8008570 <__sinit_lock_acquire+0x8>)
 800856a:	f000 b8ac 	b.w	80086c6 <__retarget_lock_acquire_recursive>
 800856e:	bf00      	nop
 8008570:	2000058a 	.word	0x2000058a

08008574 <__sinit_lock_release>:
 8008574:	4801      	ldr	r0, [pc, #4]	; (800857c <__sinit_lock_release+0x8>)
 8008576:	f000 b8a7 	b.w	80086c8 <__retarget_lock_release_recursive>
 800857a:	bf00      	nop
 800857c:	2000058a 	.word	0x2000058a

08008580 <__sinit>:
 8008580:	b510      	push	{r4, lr}
 8008582:	4604      	mov	r4, r0
 8008584:	f7ff fff0 	bl	8008568 <__sinit_lock_acquire>
 8008588:	69a3      	ldr	r3, [r4, #24]
 800858a:	b11b      	cbz	r3, 8008594 <__sinit+0x14>
 800858c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008590:	f7ff bff0 	b.w	8008574 <__sinit_lock_release>
 8008594:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008598:	6523      	str	r3, [r4, #80]	; 0x50
 800859a:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <__sinit+0x68>)
 800859c:	4a13      	ldr	r2, [pc, #76]	; (80085ec <__sinit+0x6c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80085a2:	42a3      	cmp	r3, r4
 80085a4:	bf04      	itt	eq
 80085a6:	2301      	moveq	r3, #1
 80085a8:	61a3      	streq	r3, [r4, #24]
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 f820 	bl	80085f0 <__sfp>
 80085b0:	6060      	str	r0, [r4, #4]
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 f81c 	bl	80085f0 <__sfp>
 80085b8:	60a0      	str	r0, [r4, #8]
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 f818 	bl	80085f0 <__sfp>
 80085c0:	2200      	movs	r2, #0
 80085c2:	60e0      	str	r0, [r4, #12]
 80085c4:	2104      	movs	r1, #4
 80085c6:	6860      	ldr	r0, [r4, #4]
 80085c8:	f7ff ff82 	bl	80084d0 <std>
 80085cc:	68a0      	ldr	r0, [r4, #8]
 80085ce:	2201      	movs	r2, #1
 80085d0:	2109      	movs	r1, #9
 80085d2:	f7ff ff7d 	bl	80084d0 <std>
 80085d6:	68e0      	ldr	r0, [r4, #12]
 80085d8:	2202      	movs	r2, #2
 80085da:	2112      	movs	r1, #18
 80085dc:	f7ff ff78 	bl	80084d0 <std>
 80085e0:	2301      	movs	r3, #1
 80085e2:	61a3      	str	r3, [r4, #24]
 80085e4:	e7d2      	b.n	800858c <__sinit+0xc>
 80085e6:	bf00      	nop
 80085e8:	08009710 	.word	0x08009710
 80085ec:	08008519 	.word	0x08008519

080085f0 <__sfp>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	4607      	mov	r7, r0
 80085f4:	f7ff ffac 	bl	8008550 <__sfp_lock_acquire>
 80085f8:	4b1e      	ldr	r3, [pc, #120]	; (8008674 <__sfp+0x84>)
 80085fa:	681e      	ldr	r6, [r3, #0]
 80085fc:	69b3      	ldr	r3, [r6, #24]
 80085fe:	b913      	cbnz	r3, 8008606 <__sfp+0x16>
 8008600:	4630      	mov	r0, r6
 8008602:	f7ff ffbd 	bl	8008580 <__sinit>
 8008606:	3648      	adds	r6, #72	; 0x48
 8008608:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800860c:	3b01      	subs	r3, #1
 800860e:	d503      	bpl.n	8008618 <__sfp+0x28>
 8008610:	6833      	ldr	r3, [r6, #0]
 8008612:	b30b      	cbz	r3, 8008658 <__sfp+0x68>
 8008614:	6836      	ldr	r6, [r6, #0]
 8008616:	e7f7      	b.n	8008608 <__sfp+0x18>
 8008618:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800861c:	b9d5      	cbnz	r5, 8008654 <__sfp+0x64>
 800861e:	4b16      	ldr	r3, [pc, #88]	; (8008678 <__sfp+0x88>)
 8008620:	60e3      	str	r3, [r4, #12]
 8008622:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008626:	6665      	str	r5, [r4, #100]	; 0x64
 8008628:	f000 f84c 	bl	80086c4 <__retarget_lock_init_recursive>
 800862c:	f7ff ff96 	bl	800855c <__sfp_lock_release>
 8008630:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008634:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008638:	6025      	str	r5, [r4, #0]
 800863a:	61a5      	str	r5, [r4, #24]
 800863c:	2208      	movs	r2, #8
 800863e:	4629      	mov	r1, r5
 8008640:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008644:	f7fe fa46 	bl	8006ad4 <memset>
 8008648:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800864c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008650:	4620      	mov	r0, r4
 8008652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008654:	3468      	adds	r4, #104	; 0x68
 8008656:	e7d9      	b.n	800860c <__sfp+0x1c>
 8008658:	2104      	movs	r1, #4
 800865a:	4638      	mov	r0, r7
 800865c:	f7ff ff62 	bl	8008524 <__sfmoreglue>
 8008660:	4604      	mov	r4, r0
 8008662:	6030      	str	r0, [r6, #0]
 8008664:	2800      	cmp	r0, #0
 8008666:	d1d5      	bne.n	8008614 <__sfp+0x24>
 8008668:	f7ff ff78 	bl	800855c <__sfp_lock_release>
 800866c:	230c      	movs	r3, #12
 800866e:	603b      	str	r3, [r7, #0]
 8008670:	e7ee      	b.n	8008650 <__sfp+0x60>
 8008672:	bf00      	nop
 8008674:	08009710 	.word	0x08009710
 8008678:	ffff0001 	.word	0xffff0001

0800867c <_fwalk_reent>:
 800867c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008680:	4606      	mov	r6, r0
 8008682:	4688      	mov	r8, r1
 8008684:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008688:	2700      	movs	r7, #0
 800868a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800868e:	f1b9 0901 	subs.w	r9, r9, #1
 8008692:	d505      	bpl.n	80086a0 <_fwalk_reent+0x24>
 8008694:	6824      	ldr	r4, [r4, #0]
 8008696:	2c00      	cmp	r4, #0
 8008698:	d1f7      	bne.n	800868a <_fwalk_reent+0xe>
 800869a:	4638      	mov	r0, r7
 800869c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a0:	89ab      	ldrh	r3, [r5, #12]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d907      	bls.n	80086b6 <_fwalk_reent+0x3a>
 80086a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086aa:	3301      	adds	r3, #1
 80086ac:	d003      	beq.n	80086b6 <_fwalk_reent+0x3a>
 80086ae:	4629      	mov	r1, r5
 80086b0:	4630      	mov	r0, r6
 80086b2:	47c0      	blx	r8
 80086b4:	4307      	orrs	r7, r0
 80086b6:	3568      	adds	r5, #104	; 0x68
 80086b8:	e7e9      	b.n	800868e <_fwalk_reent+0x12>
	...

080086bc <_localeconv_r>:
 80086bc:	4800      	ldr	r0, [pc, #0]	; (80086c0 <_localeconv_r+0x4>)
 80086be:	4770      	bx	lr
 80086c0:	20000178 	.word	0x20000178

080086c4 <__retarget_lock_init_recursive>:
 80086c4:	4770      	bx	lr

080086c6 <__retarget_lock_acquire_recursive>:
 80086c6:	4770      	bx	lr

080086c8 <__retarget_lock_release_recursive>:
 80086c8:	4770      	bx	lr

080086ca <__swhatbuf_r>:
 80086ca:	b570      	push	{r4, r5, r6, lr}
 80086cc:	460e      	mov	r6, r1
 80086ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d2:	2900      	cmp	r1, #0
 80086d4:	b096      	sub	sp, #88	; 0x58
 80086d6:	4614      	mov	r4, r2
 80086d8:	461d      	mov	r5, r3
 80086da:	da08      	bge.n	80086ee <__swhatbuf_r+0x24>
 80086dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	602a      	str	r2, [r5, #0]
 80086e4:	061a      	lsls	r2, r3, #24
 80086e6:	d410      	bmi.n	800870a <__swhatbuf_r+0x40>
 80086e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ec:	e00e      	b.n	800870c <__swhatbuf_r+0x42>
 80086ee:	466a      	mov	r2, sp
 80086f0:	f000 fee0 	bl	80094b4 <_fstat_r>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	dbf1      	blt.n	80086dc <__swhatbuf_r+0x12>
 80086f8:	9a01      	ldr	r2, [sp, #4]
 80086fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008702:	425a      	negs	r2, r3
 8008704:	415a      	adcs	r2, r3
 8008706:	602a      	str	r2, [r5, #0]
 8008708:	e7ee      	b.n	80086e8 <__swhatbuf_r+0x1e>
 800870a:	2340      	movs	r3, #64	; 0x40
 800870c:	2000      	movs	r0, #0
 800870e:	6023      	str	r3, [r4, #0]
 8008710:	b016      	add	sp, #88	; 0x58
 8008712:	bd70      	pop	{r4, r5, r6, pc}

08008714 <__smakebuf_r>:
 8008714:	898b      	ldrh	r3, [r1, #12]
 8008716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008718:	079d      	lsls	r5, r3, #30
 800871a:	4606      	mov	r6, r0
 800871c:	460c      	mov	r4, r1
 800871e:	d507      	bpl.n	8008730 <__smakebuf_r+0x1c>
 8008720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	6123      	str	r3, [r4, #16]
 8008728:	2301      	movs	r3, #1
 800872a:	6163      	str	r3, [r4, #20]
 800872c:	b002      	add	sp, #8
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	ab01      	add	r3, sp, #4
 8008732:	466a      	mov	r2, sp
 8008734:	f7ff ffc9 	bl	80086ca <__swhatbuf_r>
 8008738:	9900      	ldr	r1, [sp, #0]
 800873a:	4605      	mov	r5, r0
 800873c:	4630      	mov	r0, r6
 800873e:	f000 fc45 	bl	8008fcc <_malloc_r>
 8008742:	b948      	cbnz	r0, 8008758 <__smakebuf_r+0x44>
 8008744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008748:	059a      	lsls	r2, r3, #22
 800874a:	d4ef      	bmi.n	800872c <__smakebuf_r+0x18>
 800874c:	f023 0303 	bic.w	r3, r3, #3
 8008750:	f043 0302 	orr.w	r3, r3, #2
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	e7e3      	b.n	8008720 <__smakebuf_r+0xc>
 8008758:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <__smakebuf_r+0x7c>)
 800875a:	62b3      	str	r3, [r6, #40]	; 0x28
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	6020      	str	r0, [r4, #0]
 8008760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	9b00      	ldr	r3, [sp, #0]
 8008768:	6163      	str	r3, [r4, #20]
 800876a:	9b01      	ldr	r3, [sp, #4]
 800876c:	6120      	str	r0, [r4, #16]
 800876e:	b15b      	cbz	r3, 8008788 <__smakebuf_r+0x74>
 8008770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008774:	4630      	mov	r0, r6
 8008776:	f000 feaf 	bl	80094d8 <_isatty_r>
 800877a:	b128      	cbz	r0, 8008788 <__smakebuf_r+0x74>
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	f023 0303 	bic.w	r3, r3, #3
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	81a3      	strh	r3, [r4, #12]
 8008788:	89a0      	ldrh	r0, [r4, #12]
 800878a:	4305      	orrs	r5, r0
 800878c:	81a5      	strh	r5, [r4, #12]
 800878e:	e7cd      	b.n	800872c <__smakebuf_r+0x18>
 8008790:	08008519 	.word	0x08008519

08008794 <malloc>:
 8008794:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <malloc+0xc>)
 8008796:	4601      	mov	r1, r0
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	f000 bc17 	b.w	8008fcc <_malloc_r>
 800879e:	bf00      	nop
 80087a0:	20000024 	.word	0x20000024

080087a4 <memcpy>:
 80087a4:	440a      	add	r2, r1
 80087a6:	4291      	cmp	r1, r2
 80087a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80087ac:	d100      	bne.n	80087b0 <memcpy+0xc>
 80087ae:	4770      	bx	lr
 80087b0:	b510      	push	{r4, lr}
 80087b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ba:	4291      	cmp	r1, r2
 80087bc:	d1f9      	bne.n	80087b2 <memcpy+0xe>
 80087be:	bd10      	pop	{r4, pc}

080087c0 <_Balloc>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087c4:	4604      	mov	r4, r0
 80087c6:	460d      	mov	r5, r1
 80087c8:	b976      	cbnz	r6, 80087e8 <_Balloc+0x28>
 80087ca:	2010      	movs	r0, #16
 80087cc:	f7ff ffe2 	bl	8008794 <malloc>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6260      	str	r0, [r4, #36]	; 0x24
 80087d4:	b920      	cbnz	r0, 80087e0 <_Balloc+0x20>
 80087d6:	4b18      	ldr	r3, [pc, #96]	; (8008838 <_Balloc+0x78>)
 80087d8:	4818      	ldr	r0, [pc, #96]	; (800883c <_Balloc+0x7c>)
 80087da:	2166      	movs	r1, #102	; 0x66
 80087dc:	f000 fe2a 	bl	8009434 <__assert_func>
 80087e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087e4:	6006      	str	r6, [r0, #0]
 80087e6:	60c6      	str	r6, [r0, #12]
 80087e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087ea:	68f3      	ldr	r3, [r6, #12]
 80087ec:	b183      	cbz	r3, 8008810 <_Balloc+0x50>
 80087ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087f6:	b9b8      	cbnz	r0, 8008828 <_Balloc+0x68>
 80087f8:	2101      	movs	r1, #1
 80087fa:	fa01 f605 	lsl.w	r6, r1, r5
 80087fe:	1d72      	adds	r2, r6, #5
 8008800:	0092      	lsls	r2, r2, #2
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fb60 	bl	8008ec8 <_calloc_r>
 8008808:	b160      	cbz	r0, 8008824 <_Balloc+0x64>
 800880a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800880e:	e00e      	b.n	800882e <_Balloc+0x6e>
 8008810:	2221      	movs	r2, #33	; 0x21
 8008812:	2104      	movs	r1, #4
 8008814:	4620      	mov	r0, r4
 8008816:	f000 fb57 	bl	8008ec8 <_calloc_r>
 800881a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800881c:	60f0      	str	r0, [r6, #12]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e4      	bne.n	80087ee <_Balloc+0x2e>
 8008824:	2000      	movs	r0, #0
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	6802      	ldr	r2, [r0, #0]
 800882a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800882e:	2300      	movs	r3, #0
 8008830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008834:	e7f7      	b.n	8008826 <_Balloc+0x66>
 8008836:	bf00      	nop
 8008838:	08009755 	.word	0x08009755
 800883c:	08009838 	.word	0x08009838

08008840 <_Bfree>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008844:	4605      	mov	r5, r0
 8008846:	460c      	mov	r4, r1
 8008848:	b976      	cbnz	r6, 8008868 <_Bfree+0x28>
 800884a:	2010      	movs	r0, #16
 800884c:	f7ff ffa2 	bl	8008794 <malloc>
 8008850:	4602      	mov	r2, r0
 8008852:	6268      	str	r0, [r5, #36]	; 0x24
 8008854:	b920      	cbnz	r0, 8008860 <_Bfree+0x20>
 8008856:	4b09      	ldr	r3, [pc, #36]	; (800887c <_Bfree+0x3c>)
 8008858:	4809      	ldr	r0, [pc, #36]	; (8008880 <_Bfree+0x40>)
 800885a:	218a      	movs	r1, #138	; 0x8a
 800885c:	f000 fdea 	bl	8009434 <__assert_func>
 8008860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008864:	6006      	str	r6, [r0, #0]
 8008866:	60c6      	str	r6, [r0, #12]
 8008868:	b13c      	cbz	r4, 800887a <_Bfree+0x3a>
 800886a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800886c:	6862      	ldr	r2, [r4, #4]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008874:	6021      	str	r1, [r4, #0]
 8008876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	08009755 	.word	0x08009755
 8008880:	08009838 	.word	0x08009838

08008884 <__multadd>:
 8008884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008888:	690d      	ldr	r5, [r1, #16]
 800888a:	4607      	mov	r7, r0
 800888c:	460c      	mov	r4, r1
 800888e:	461e      	mov	r6, r3
 8008890:	f101 0c14 	add.w	ip, r1, #20
 8008894:	2000      	movs	r0, #0
 8008896:	f8dc 3000 	ldr.w	r3, [ip]
 800889a:	b299      	uxth	r1, r3
 800889c:	fb02 6101 	mla	r1, r2, r1, r6
 80088a0:	0c1e      	lsrs	r6, r3, #16
 80088a2:	0c0b      	lsrs	r3, r1, #16
 80088a4:	fb02 3306 	mla	r3, r2, r6, r3
 80088a8:	b289      	uxth	r1, r1
 80088aa:	3001      	adds	r0, #1
 80088ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088b0:	4285      	cmp	r5, r0
 80088b2:	f84c 1b04 	str.w	r1, [ip], #4
 80088b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ba:	dcec      	bgt.n	8008896 <__multadd+0x12>
 80088bc:	b30e      	cbz	r6, 8008902 <__multadd+0x7e>
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	dc19      	bgt.n	80088f8 <__multadd+0x74>
 80088c4:	6861      	ldr	r1, [r4, #4]
 80088c6:	4638      	mov	r0, r7
 80088c8:	3101      	adds	r1, #1
 80088ca:	f7ff ff79 	bl	80087c0 <_Balloc>
 80088ce:	4680      	mov	r8, r0
 80088d0:	b928      	cbnz	r0, 80088de <__multadd+0x5a>
 80088d2:	4602      	mov	r2, r0
 80088d4:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <__multadd+0x84>)
 80088d6:	480d      	ldr	r0, [pc, #52]	; (800890c <__multadd+0x88>)
 80088d8:	21b5      	movs	r1, #181	; 0xb5
 80088da:	f000 fdab 	bl	8009434 <__assert_func>
 80088de:	6922      	ldr	r2, [r4, #16]
 80088e0:	3202      	adds	r2, #2
 80088e2:	f104 010c 	add.w	r1, r4, #12
 80088e6:	0092      	lsls	r2, r2, #2
 80088e8:	300c      	adds	r0, #12
 80088ea:	f7ff ff5b 	bl	80087a4 <memcpy>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4638      	mov	r0, r7
 80088f2:	f7ff ffa5 	bl	8008840 <_Bfree>
 80088f6:	4644      	mov	r4, r8
 80088f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088fc:	3501      	adds	r5, #1
 80088fe:	615e      	str	r6, [r3, #20]
 8008900:	6125      	str	r5, [r4, #16]
 8008902:	4620      	mov	r0, r4
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008908:	080097c7 	.word	0x080097c7
 800890c:	08009838 	.word	0x08009838

08008910 <__hi0bits>:
 8008910:	0c03      	lsrs	r3, r0, #16
 8008912:	041b      	lsls	r3, r3, #16
 8008914:	b9d3      	cbnz	r3, 800894c <__hi0bits+0x3c>
 8008916:	0400      	lsls	r0, r0, #16
 8008918:	2310      	movs	r3, #16
 800891a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800891e:	bf04      	itt	eq
 8008920:	0200      	lsleq	r0, r0, #8
 8008922:	3308      	addeq	r3, #8
 8008924:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008928:	bf04      	itt	eq
 800892a:	0100      	lsleq	r0, r0, #4
 800892c:	3304      	addeq	r3, #4
 800892e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008932:	bf04      	itt	eq
 8008934:	0080      	lsleq	r0, r0, #2
 8008936:	3302      	addeq	r3, #2
 8008938:	2800      	cmp	r0, #0
 800893a:	db05      	blt.n	8008948 <__hi0bits+0x38>
 800893c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008940:	f103 0301 	add.w	r3, r3, #1
 8008944:	bf08      	it	eq
 8008946:	2320      	moveq	r3, #32
 8008948:	4618      	mov	r0, r3
 800894a:	4770      	bx	lr
 800894c:	2300      	movs	r3, #0
 800894e:	e7e4      	b.n	800891a <__hi0bits+0xa>

08008950 <__lo0bits>:
 8008950:	6803      	ldr	r3, [r0, #0]
 8008952:	f013 0207 	ands.w	r2, r3, #7
 8008956:	4601      	mov	r1, r0
 8008958:	d00b      	beq.n	8008972 <__lo0bits+0x22>
 800895a:	07da      	lsls	r2, r3, #31
 800895c:	d423      	bmi.n	80089a6 <__lo0bits+0x56>
 800895e:	0798      	lsls	r0, r3, #30
 8008960:	bf49      	itett	mi
 8008962:	085b      	lsrmi	r3, r3, #1
 8008964:	089b      	lsrpl	r3, r3, #2
 8008966:	2001      	movmi	r0, #1
 8008968:	600b      	strmi	r3, [r1, #0]
 800896a:	bf5c      	itt	pl
 800896c:	600b      	strpl	r3, [r1, #0]
 800896e:	2002      	movpl	r0, #2
 8008970:	4770      	bx	lr
 8008972:	b298      	uxth	r0, r3
 8008974:	b9a8      	cbnz	r0, 80089a2 <__lo0bits+0x52>
 8008976:	0c1b      	lsrs	r3, r3, #16
 8008978:	2010      	movs	r0, #16
 800897a:	b2da      	uxtb	r2, r3
 800897c:	b90a      	cbnz	r2, 8008982 <__lo0bits+0x32>
 800897e:	3008      	adds	r0, #8
 8008980:	0a1b      	lsrs	r3, r3, #8
 8008982:	071a      	lsls	r2, r3, #28
 8008984:	bf04      	itt	eq
 8008986:	091b      	lsreq	r3, r3, #4
 8008988:	3004      	addeq	r0, #4
 800898a:	079a      	lsls	r2, r3, #30
 800898c:	bf04      	itt	eq
 800898e:	089b      	lsreq	r3, r3, #2
 8008990:	3002      	addeq	r0, #2
 8008992:	07da      	lsls	r2, r3, #31
 8008994:	d403      	bmi.n	800899e <__lo0bits+0x4e>
 8008996:	085b      	lsrs	r3, r3, #1
 8008998:	f100 0001 	add.w	r0, r0, #1
 800899c:	d005      	beq.n	80089aa <__lo0bits+0x5a>
 800899e:	600b      	str	r3, [r1, #0]
 80089a0:	4770      	bx	lr
 80089a2:	4610      	mov	r0, r2
 80089a4:	e7e9      	b.n	800897a <__lo0bits+0x2a>
 80089a6:	2000      	movs	r0, #0
 80089a8:	4770      	bx	lr
 80089aa:	2020      	movs	r0, #32
 80089ac:	4770      	bx	lr
	...

080089b0 <__i2b>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	460c      	mov	r4, r1
 80089b4:	2101      	movs	r1, #1
 80089b6:	f7ff ff03 	bl	80087c0 <_Balloc>
 80089ba:	4602      	mov	r2, r0
 80089bc:	b928      	cbnz	r0, 80089ca <__i2b+0x1a>
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <__i2b+0x24>)
 80089c0:	4805      	ldr	r0, [pc, #20]	; (80089d8 <__i2b+0x28>)
 80089c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089c6:	f000 fd35 	bl	8009434 <__assert_func>
 80089ca:	2301      	movs	r3, #1
 80089cc:	6144      	str	r4, [r0, #20]
 80089ce:	6103      	str	r3, [r0, #16]
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	bf00      	nop
 80089d4:	080097c7 	.word	0x080097c7
 80089d8:	08009838 	.word	0x08009838

080089dc <__multiply>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	4691      	mov	r9, r2
 80089e2:	690a      	ldr	r2, [r1, #16]
 80089e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	bfb8      	it	lt
 80089ec:	460b      	movlt	r3, r1
 80089ee:	460c      	mov	r4, r1
 80089f0:	bfbc      	itt	lt
 80089f2:	464c      	movlt	r4, r9
 80089f4:	4699      	movlt	r9, r3
 80089f6:	6927      	ldr	r7, [r4, #16]
 80089f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089fc:	68a3      	ldr	r3, [r4, #8]
 80089fe:	6861      	ldr	r1, [r4, #4]
 8008a00:	eb07 060a 	add.w	r6, r7, sl
 8008a04:	42b3      	cmp	r3, r6
 8008a06:	b085      	sub	sp, #20
 8008a08:	bfb8      	it	lt
 8008a0a:	3101      	addlt	r1, #1
 8008a0c:	f7ff fed8 	bl	80087c0 <_Balloc>
 8008a10:	b930      	cbnz	r0, 8008a20 <__multiply+0x44>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4b44      	ldr	r3, [pc, #272]	; (8008b28 <__multiply+0x14c>)
 8008a16:	4845      	ldr	r0, [pc, #276]	; (8008b2c <__multiply+0x150>)
 8008a18:	f240 115d 	movw	r1, #349	; 0x15d
 8008a1c:	f000 fd0a 	bl	8009434 <__assert_func>
 8008a20:	f100 0514 	add.w	r5, r0, #20
 8008a24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a28:	462b      	mov	r3, r5
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4543      	cmp	r3, r8
 8008a2e:	d321      	bcc.n	8008a74 <__multiply+0x98>
 8008a30:	f104 0314 	add.w	r3, r4, #20
 8008a34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a38:	f109 0314 	add.w	r3, r9, #20
 8008a3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a40:	9202      	str	r2, [sp, #8]
 8008a42:	1b3a      	subs	r2, r7, r4
 8008a44:	3a15      	subs	r2, #21
 8008a46:	f022 0203 	bic.w	r2, r2, #3
 8008a4a:	3204      	adds	r2, #4
 8008a4c:	f104 0115 	add.w	r1, r4, #21
 8008a50:	428f      	cmp	r7, r1
 8008a52:	bf38      	it	cc
 8008a54:	2204      	movcc	r2, #4
 8008a56:	9201      	str	r2, [sp, #4]
 8008a58:	9a02      	ldr	r2, [sp, #8]
 8008a5a:	9303      	str	r3, [sp, #12]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d80c      	bhi.n	8008a7a <__multiply+0x9e>
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	dd03      	ble.n	8008a6c <__multiply+0x90>
 8008a64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d05a      	beq.n	8008b22 <__multiply+0x146>
 8008a6c:	6106      	str	r6, [r0, #16]
 8008a6e:	b005      	add	sp, #20
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	f843 2b04 	str.w	r2, [r3], #4
 8008a78:	e7d8      	b.n	8008a2c <__multiply+0x50>
 8008a7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a7e:	f1ba 0f00 	cmp.w	sl, #0
 8008a82:	d024      	beq.n	8008ace <__multiply+0xf2>
 8008a84:	f104 0e14 	add.w	lr, r4, #20
 8008a88:	46a9      	mov	r9, r5
 8008a8a:	f04f 0c00 	mov.w	ip, #0
 8008a8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a92:	f8d9 1000 	ldr.w	r1, [r9]
 8008a96:	fa1f fb82 	uxth.w	fp, r2
 8008a9a:	b289      	uxth	r1, r1
 8008a9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008aa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8008aa8:	4461      	add	r1, ip
 8008aaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008aae:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ab6:	b289      	uxth	r1, r1
 8008ab8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008abc:	4577      	cmp	r7, lr
 8008abe:	f849 1b04 	str.w	r1, [r9], #4
 8008ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ac6:	d8e2      	bhi.n	8008a8e <__multiply+0xb2>
 8008ac8:	9a01      	ldr	r2, [sp, #4]
 8008aca:	f845 c002 	str.w	ip, [r5, r2]
 8008ace:	9a03      	ldr	r2, [sp, #12]
 8008ad0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	f1b9 0f00 	cmp.w	r9, #0
 8008ada:	d020      	beq.n	8008b1e <__multiply+0x142>
 8008adc:	6829      	ldr	r1, [r5, #0]
 8008ade:	f104 0c14 	add.w	ip, r4, #20
 8008ae2:	46ae      	mov	lr, r5
 8008ae4:	f04f 0a00 	mov.w	sl, #0
 8008ae8:	f8bc b000 	ldrh.w	fp, [ip]
 8008aec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008af0:	fb09 220b 	mla	r2, r9, fp, r2
 8008af4:	4492      	add	sl, r2
 8008af6:	b289      	uxth	r1, r1
 8008af8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008afc:	f84e 1b04 	str.w	r1, [lr], #4
 8008b00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b04:	f8be 1000 	ldrh.w	r1, [lr]
 8008b08:	0c12      	lsrs	r2, r2, #16
 8008b0a:	fb09 1102 	mla	r1, r9, r2, r1
 8008b0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b12:	4567      	cmp	r7, ip
 8008b14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b18:	d8e6      	bhi.n	8008ae8 <__multiply+0x10c>
 8008b1a:	9a01      	ldr	r2, [sp, #4]
 8008b1c:	50a9      	str	r1, [r5, r2]
 8008b1e:	3504      	adds	r5, #4
 8008b20:	e79a      	b.n	8008a58 <__multiply+0x7c>
 8008b22:	3e01      	subs	r6, #1
 8008b24:	e79c      	b.n	8008a60 <__multiply+0x84>
 8008b26:	bf00      	nop
 8008b28:	080097c7 	.word	0x080097c7
 8008b2c:	08009838 	.word	0x08009838

08008b30 <__pow5mult>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	4615      	mov	r5, r2
 8008b36:	f012 0203 	ands.w	r2, r2, #3
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	d007      	beq.n	8008b50 <__pow5mult+0x20>
 8008b40:	4c25      	ldr	r4, [pc, #148]	; (8008bd8 <__pow5mult+0xa8>)
 8008b42:	3a01      	subs	r2, #1
 8008b44:	2300      	movs	r3, #0
 8008b46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b4a:	f7ff fe9b 	bl	8008884 <__multadd>
 8008b4e:	4607      	mov	r7, r0
 8008b50:	10ad      	asrs	r5, r5, #2
 8008b52:	d03d      	beq.n	8008bd0 <__pow5mult+0xa0>
 8008b54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b56:	b97c      	cbnz	r4, 8008b78 <__pow5mult+0x48>
 8008b58:	2010      	movs	r0, #16
 8008b5a:	f7ff fe1b 	bl	8008794 <malloc>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	6270      	str	r0, [r6, #36]	; 0x24
 8008b62:	b928      	cbnz	r0, 8008b70 <__pow5mult+0x40>
 8008b64:	4b1d      	ldr	r3, [pc, #116]	; (8008bdc <__pow5mult+0xac>)
 8008b66:	481e      	ldr	r0, [pc, #120]	; (8008be0 <__pow5mult+0xb0>)
 8008b68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b6c:	f000 fc62 	bl	8009434 <__assert_func>
 8008b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b74:	6004      	str	r4, [r0, #0]
 8008b76:	60c4      	str	r4, [r0, #12]
 8008b78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b80:	b94c      	cbnz	r4, 8008b96 <__pow5mult+0x66>
 8008b82:	f240 2171 	movw	r1, #625	; 0x271
 8008b86:	4630      	mov	r0, r6
 8008b88:	f7ff ff12 	bl	80089b0 <__i2b>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b92:	4604      	mov	r4, r0
 8008b94:	6003      	str	r3, [r0, #0]
 8008b96:	f04f 0900 	mov.w	r9, #0
 8008b9a:	07eb      	lsls	r3, r5, #31
 8008b9c:	d50a      	bpl.n	8008bb4 <__pow5mult+0x84>
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ff1a 	bl	80089dc <__multiply>
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4680      	mov	r8, r0
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff fe47 	bl	8008840 <_Bfree>
 8008bb2:	4647      	mov	r7, r8
 8008bb4:	106d      	asrs	r5, r5, #1
 8008bb6:	d00b      	beq.n	8008bd0 <__pow5mult+0xa0>
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	b938      	cbnz	r0, 8008bcc <__pow5mult+0x9c>
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7ff ff0b 	bl	80089dc <__multiply>
 8008bc6:	6020      	str	r0, [r4, #0]
 8008bc8:	f8c0 9000 	str.w	r9, [r0]
 8008bcc:	4604      	mov	r4, r0
 8008bce:	e7e4      	b.n	8008b9a <__pow5mult+0x6a>
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08009988 	.word	0x08009988
 8008bdc:	08009755 	.word	0x08009755
 8008be0:	08009838 	.word	0x08009838

08008be4 <__lshift>:
 8008be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	460c      	mov	r4, r1
 8008bea:	6849      	ldr	r1, [r1, #4]
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	4691      	mov	r9, r2
 8008bf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bfc:	f108 0601 	add.w	r6, r8, #1
 8008c00:	42b3      	cmp	r3, r6
 8008c02:	db0b      	blt.n	8008c1c <__lshift+0x38>
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff fddb 	bl	80087c0 <_Balloc>
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	b948      	cbnz	r0, 8008c22 <__lshift+0x3e>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <__lshift+0xd8>)
 8008c12:	482b      	ldr	r0, [pc, #172]	; (8008cc0 <__lshift+0xdc>)
 8008c14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c18:	f000 fc0c 	bl	8009434 <__assert_func>
 8008c1c:	3101      	adds	r1, #1
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	e7ee      	b.n	8008c00 <__lshift+0x1c>
 8008c22:	2300      	movs	r3, #0
 8008c24:	f100 0114 	add.w	r1, r0, #20
 8008c28:	f100 0210 	add.w	r2, r0, #16
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	4553      	cmp	r3, sl
 8008c30:	db37      	blt.n	8008ca2 <__lshift+0xbe>
 8008c32:	6920      	ldr	r0, [r4, #16]
 8008c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c38:	f104 0314 	add.w	r3, r4, #20
 8008c3c:	f019 091f 	ands.w	r9, r9, #31
 8008c40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c48:	d02f      	beq.n	8008caa <__lshift+0xc6>
 8008c4a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c4e:	468a      	mov	sl, r1
 8008c50:	f04f 0c00 	mov.w	ip, #0
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	fa02 f209 	lsl.w	r2, r2, r9
 8008c5a:	ea42 020c 	orr.w	r2, r2, ip
 8008c5e:	f84a 2b04 	str.w	r2, [sl], #4
 8008c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c66:	4298      	cmp	r0, r3
 8008c68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c6c:	d8f2      	bhi.n	8008c54 <__lshift+0x70>
 8008c6e:	1b03      	subs	r3, r0, r4
 8008c70:	3b15      	subs	r3, #21
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	3304      	adds	r3, #4
 8008c78:	f104 0215 	add.w	r2, r4, #21
 8008c7c:	4290      	cmp	r0, r2
 8008c7e:	bf38      	it	cc
 8008c80:	2304      	movcc	r3, #4
 8008c82:	f841 c003 	str.w	ip, [r1, r3]
 8008c86:	f1bc 0f00 	cmp.w	ip, #0
 8008c8a:	d001      	beq.n	8008c90 <__lshift+0xac>
 8008c8c:	f108 0602 	add.w	r6, r8, #2
 8008c90:	3e01      	subs	r6, #1
 8008c92:	4638      	mov	r0, r7
 8008c94:	612e      	str	r6, [r5, #16]
 8008c96:	4621      	mov	r1, r4
 8008c98:	f7ff fdd2 	bl	8008840 <_Bfree>
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	e7c1      	b.n	8008c2e <__lshift+0x4a>
 8008caa:	3904      	subs	r1, #4
 8008cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cb4:	4298      	cmp	r0, r3
 8008cb6:	d8f9      	bhi.n	8008cac <__lshift+0xc8>
 8008cb8:	e7ea      	b.n	8008c90 <__lshift+0xac>
 8008cba:	bf00      	nop
 8008cbc:	080097c7 	.word	0x080097c7
 8008cc0:	08009838 	.word	0x08009838

08008cc4 <__mcmp>:
 8008cc4:	b530      	push	{r4, r5, lr}
 8008cc6:	6902      	ldr	r2, [r0, #16]
 8008cc8:	690c      	ldr	r4, [r1, #16]
 8008cca:	1b12      	subs	r2, r2, r4
 8008ccc:	d10e      	bne.n	8008cec <__mcmp+0x28>
 8008cce:	f100 0314 	add.w	r3, r0, #20
 8008cd2:	3114      	adds	r1, #20
 8008cd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ce0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ce4:	42a5      	cmp	r5, r4
 8008ce6:	d003      	beq.n	8008cf0 <__mcmp+0x2c>
 8008ce8:	d305      	bcc.n	8008cf6 <__mcmp+0x32>
 8008cea:	2201      	movs	r2, #1
 8008cec:	4610      	mov	r0, r2
 8008cee:	bd30      	pop	{r4, r5, pc}
 8008cf0:	4283      	cmp	r3, r0
 8008cf2:	d3f3      	bcc.n	8008cdc <__mcmp+0x18>
 8008cf4:	e7fa      	b.n	8008cec <__mcmp+0x28>
 8008cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfa:	e7f7      	b.n	8008cec <__mcmp+0x28>

08008cfc <__mdiff>:
 8008cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d00:	460c      	mov	r4, r1
 8008d02:	4606      	mov	r6, r0
 8008d04:	4611      	mov	r1, r2
 8008d06:	4620      	mov	r0, r4
 8008d08:	4690      	mov	r8, r2
 8008d0a:	f7ff ffdb 	bl	8008cc4 <__mcmp>
 8008d0e:	1e05      	subs	r5, r0, #0
 8008d10:	d110      	bne.n	8008d34 <__mdiff+0x38>
 8008d12:	4629      	mov	r1, r5
 8008d14:	4630      	mov	r0, r6
 8008d16:	f7ff fd53 	bl	80087c0 <_Balloc>
 8008d1a:	b930      	cbnz	r0, 8008d2a <__mdiff+0x2e>
 8008d1c:	4b3a      	ldr	r3, [pc, #232]	; (8008e08 <__mdiff+0x10c>)
 8008d1e:	4602      	mov	r2, r0
 8008d20:	f240 2132 	movw	r1, #562	; 0x232
 8008d24:	4839      	ldr	r0, [pc, #228]	; (8008e0c <__mdiff+0x110>)
 8008d26:	f000 fb85 	bl	8009434 <__assert_func>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d34:	bfa4      	itt	ge
 8008d36:	4643      	movge	r3, r8
 8008d38:	46a0      	movge	r8, r4
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d40:	bfa6      	itte	ge
 8008d42:	461c      	movge	r4, r3
 8008d44:	2500      	movge	r5, #0
 8008d46:	2501      	movlt	r5, #1
 8008d48:	f7ff fd3a 	bl	80087c0 <_Balloc>
 8008d4c:	b920      	cbnz	r0, 8008d58 <__mdiff+0x5c>
 8008d4e:	4b2e      	ldr	r3, [pc, #184]	; (8008e08 <__mdiff+0x10c>)
 8008d50:	4602      	mov	r2, r0
 8008d52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d56:	e7e5      	b.n	8008d24 <__mdiff+0x28>
 8008d58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d5c:	6926      	ldr	r6, [r4, #16]
 8008d5e:	60c5      	str	r5, [r0, #12]
 8008d60:	f104 0914 	add.w	r9, r4, #20
 8008d64:	f108 0514 	add.w	r5, r8, #20
 8008d68:	f100 0e14 	add.w	lr, r0, #20
 8008d6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d74:	f108 0210 	add.w	r2, r8, #16
 8008d78:	46f2      	mov	sl, lr
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d84:	fa1f f883 	uxth.w	r8, r3
 8008d88:	fa11 f18b 	uxtah	r1, r1, fp
 8008d8c:	0c1b      	lsrs	r3, r3, #16
 8008d8e:	eba1 0808 	sub.w	r8, r1, r8
 8008d92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d9a:	fa1f f888 	uxth.w	r8, r8
 8008d9e:	1419      	asrs	r1, r3, #16
 8008da0:	454e      	cmp	r6, r9
 8008da2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008da6:	f84a 3b04 	str.w	r3, [sl], #4
 8008daa:	d8e7      	bhi.n	8008d7c <__mdiff+0x80>
 8008dac:	1b33      	subs	r3, r6, r4
 8008dae:	3b15      	subs	r3, #21
 8008db0:	f023 0303 	bic.w	r3, r3, #3
 8008db4:	3304      	adds	r3, #4
 8008db6:	3415      	adds	r4, #21
 8008db8:	42a6      	cmp	r6, r4
 8008dba:	bf38      	it	cc
 8008dbc:	2304      	movcc	r3, #4
 8008dbe:	441d      	add	r5, r3
 8008dc0:	4473      	add	r3, lr
 8008dc2:	469e      	mov	lr, r3
 8008dc4:	462e      	mov	r6, r5
 8008dc6:	4566      	cmp	r6, ip
 8008dc8:	d30e      	bcc.n	8008de8 <__mdiff+0xec>
 8008dca:	f10c 0203 	add.w	r2, ip, #3
 8008dce:	1b52      	subs	r2, r2, r5
 8008dd0:	f022 0203 	bic.w	r2, r2, #3
 8008dd4:	3d03      	subs	r5, #3
 8008dd6:	45ac      	cmp	ip, r5
 8008dd8:	bf38      	it	cc
 8008dda:	2200      	movcc	r2, #0
 8008ddc:	441a      	add	r2, r3
 8008dde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008de2:	b17b      	cbz	r3, 8008e04 <__mdiff+0x108>
 8008de4:	6107      	str	r7, [r0, #16]
 8008de6:	e7a3      	b.n	8008d30 <__mdiff+0x34>
 8008de8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008dec:	fa11 f288 	uxtah	r2, r1, r8
 8008df0:	1414      	asrs	r4, r2, #16
 8008df2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008df6:	b292      	uxth	r2, r2
 8008df8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008dfc:	f84e 2b04 	str.w	r2, [lr], #4
 8008e00:	1421      	asrs	r1, r4, #16
 8008e02:	e7e0      	b.n	8008dc6 <__mdiff+0xca>
 8008e04:	3f01      	subs	r7, #1
 8008e06:	e7ea      	b.n	8008dde <__mdiff+0xe2>
 8008e08:	080097c7 	.word	0x080097c7
 8008e0c:	08009838 	.word	0x08009838

08008e10 <__d2b>:
 8008e10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	4689      	mov	r9, r1
 8008e16:	2101      	movs	r1, #1
 8008e18:	ec57 6b10 	vmov	r6, r7, d0
 8008e1c:	4690      	mov	r8, r2
 8008e1e:	f7ff fccf 	bl	80087c0 <_Balloc>
 8008e22:	4604      	mov	r4, r0
 8008e24:	b930      	cbnz	r0, 8008e34 <__d2b+0x24>
 8008e26:	4602      	mov	r2, r0
 8008e28:	4b25      	ldr	r3, [pc, #148]	; (8008ec0 <__d2b+0xb0>)
 8008e2a:	4826      	ldr	r0, [pc, #152]	; (8008ec4 <__d2b+0xb4>)
 8008e2c:	f240 310a 	movw	r1, #778	; 0x30a
 8008e30:	f000 fb00 	bl	8009434 <__assert_func>
 8008e34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e3c:	bb35      	cbnz	r5, 8008e8c <__d2b+0x7c>
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	d028      	beq.n	8008e96 <__d2b+0x86>
 8008e44:	4668      	mov	r0, sp
 8008e46:	9600      	str	r6, [sp, #0]
 8008e48:	f7ff fd82 	bl	8008950 <__lo0bits>
 8008e4c:	9900      	ldr	r1, [sp, #0]
 8008e4e:	b300      	cbz	r0, 8008e92 <__d2b+0x82>
 8008e50:	9a01      	ldr	r2, [sp, #4]
 8008e52:	f1c0 0320 	rsb	r3, r0, #32
 8008e56:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5a:	430b      	orrs	r3, r1
 8008e5c:	40c2      	lsrs	r2, r0
 8008e5e:	6163      	str	r3, [r4, #20]
 8008e60:	9201      	str	r2, [sp, #4]
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	61a3      	str	r3, [r4, #24]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bf14      	ite	ne
 8008e6a:	2202      	movne	r2, #2
 8008e6c:	2201      	moveq	r2, #1
 8008e6e:	6122      	str	r2, [r4, #16]
 8008e70:	b1d5      	cbz	r5, 8008ea8 <__d2b+0x98>
 8008e72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e76:	4405      	add	r5, r0
 8008e78:	f8c9 5000 	str.w	r5, [r9]
 8008e7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e80:	f8c8 0000 	str.w	r0, [r8]
 8008e84:	4620      	mov	r0, r4
 8008e86:	b003      	add	sp, #12
 8008e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e90:	e7d5      	b.n	8008e3e <__d2b+0x2e>
 8008e92:	6161      	str	r1, [r4, #20]
 8008e94:	e7e5      	b.n	8008e62 <__d2b+0x52>
 8008e96:	a801      	add	r0, sp, #4
 8008e98:	f7ff fd5a 	bl	8008950 <__lo0bits>
 8008e9c:	9b01      	ldr	r3, [sp, #4]
 8008e9e:	6163      	str	r3, [r4, #20]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	6122      	str	r2, [r4, #16]
 8008ea4:	3020      	adds	r0, #32
 8008ea6:	e7e3      	b.n	8008e70 <__d2b+0x60>
 8008ea8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008eac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008eb0:	f8c9 0000 	str.w	r0, [r9]
 8008eb4:	6918      	ldr	r0, [r3, #16]
 8008eb6:	f7ff fd2b 	bl	8008910 <__hi0bits>
 8008eba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ebe:	e7df      	b.n	8008e80 <__d2b+0x70>
 8008ec0:	080097c7 	.word	0x080097c7
 8008ec4:	08009838 	.word	0x08009838

08008ec8 <_calloc_r>:
 8008ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eca:	fba1 2402 	umull	r2, r4, r1, r2
 8008ece:	b94c      	cbnz	r4, 8008ee4 <_calloc_r+0x1c>
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	9201      	str	r2, [sp, #4]
 8008ed4:	f000 f87a 	bl	8008fcc <_malloc_r>
 8008ed8:	9a01      	ldr	r2, [sp, #4]
 8008eda:	4605      	mov	r5, r0
 8008edc:	b930      	cbnz	r0, 8008eec <_calloc_r+0x24>
 8008ede:	4628      	mov	r0, r5
 8008ee0:	b003      	add	sp, #12
 8008ee2:	bd30      	pop	{r4, r5, pc}
 8008ee4:	220c      	movs	r2, #12
 8008ee6:	6002      	str	r2, [r0, #0]
 8008ee8:	2500      	movs	r5, #0
 8008eea:	e7f8      	b.n	8008ede <_calloc_r+0x16>
 8008eec:	4621      	mov	r1, r4
 8008eee:	f7fd fdf1 	bl	8006ad4 <memset>
 8008ef2:	e7f4      	b.n	8008ede <_calloc_r+0x16>

08008ef4 <_free_r>:
 8008ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ef6:	2900      	cmp	r1, #0
 8008ef8:	d044      	beq.n	8008f84 <_free_r+0x90>
 8008efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008efe:	9001      	str	r0, [sp, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f1a1 0404 	sub.w	r4, r1, #4
 8008f06:	bfb8      	it	lt
 8008f08:	18e4      	addlt	r4, r4, r3
 8008f0a:	f000 fb19 	bl	8009540 <__malloc_lock>
 8008f0e:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <_free_r+0x94>)
 8008f10:	9801      	ldr	r0, [sp, #4]
 8008f12:	6813      	ldr	r3, [r2, #0]
 8008f14:	b933      	cbnz	r3, 8008f24 <_free_r+0x30>
 8008f16:	6063      	str	r3, [r4, #4]
 8008f18:	6014      	str	r4, [r2, #0]
 8008f1a:	b003      	add	sp, #12
 8008f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f20:	f000 bb14 	b.w	800954c <__malloc_unlock>
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d908      	bls.n	8008f3a <_free_r+0x46>
 8008f28:	6825      	ldr	r5, [r4, #0]
 8008f2a:	1961      	adds	r1, r4, r5
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf01      	itttt	eq
 8008f30:	6819      	ldreq	r1, [r3, #0]
 8008f32:	685b      	ldreq	r3, [r3, #4]
 8008f34:	1949      	addeq	r1, r1, r5
 8008f36:	6021      	streq	r1, [r4, #0]
 8008f38:	e7ed      	b.n	8008f16 <_free_r+0x22>
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	b10b      	cbz	r3, 8008f44 <_free_r+0x50>
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	d9fa      	bls.n	8008f3a <_free_r+0x46>
 8008f44:	6811      	ldr	r1, [r2, #0]
 8008f46:	1855      	adds	r5, r2, r1
 8008f48:	42a5      	cmp	r5, r4
 8008f4a:	d10b      	bne.n	8008f64 <_free_r+0x70>
 8008f4c:	6824      	ldr	r4, [r4, #0]
 8008f4e:	4421      	add	r1, r4
 8008f50:	1854      	adds	r4, r2, r1
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	d1e0      	bne.n	8008f1a <_free_r+0x26>
 8008f58:	681c      	ldr	r4, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	6053      	str	r3, [r2, #4]
 8008f5e:	4421      	add	r1, r4
 8008f60:	6011      	str	r1, [r2, #0]
 8008f62:	e7da      	b.n	8008f1a <_free_r+0x26>
 8008f64:	d902      	bls.n	8008f6c <_free_r+0x78>
 8008f66:	230c      	movs	r3, #12
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	e7d6      	b.n	8008f1a <_free_r+0x26>
 8008f6c:	6825      	ldr	r5, [r4, #0]
 8008f6e:	1961      	adds	r1, r4, r5
 8008f70:	428b      	cmp	r3, r1
 8008f72:	bf04      	itt	eq
 8008f74:	6819      	ldreq	r1, [r3, #0]
 8008f76:	685b      	ldreq	r3, [r3, #4]
 8008f78:	6063      	str	r3, [r4, #4]
 8008f7a:	bf04      	itt	eq
 8008f7c:	1949      	addeq	r1, r1, r5
 8008f7e:	6021      	streq	r1, [r4, #0]
 8008f80:	6054      	str	r4, [r2, #4]
 8008f82:	e7ca      	b.n	8008f1a <_free_r+0x26>
 8008f84:	b003      	add	sp, #12
 8008f86:	bd30      	pop	{r4, r5, pc}
 8008f88:	2000058c 	.word	0x2000058c

08008f8c <sbrk_aligned>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	4e0e      	ldr	r6, [pc, #56]	; (8008fc8 <sbrk_aligned+0x3c>)
 8008f90:	460c      	mov	r4, r1
 8008f92:	6831      	ldr	r1, [r6, #0]
 8008f94:	4605      	mov	r5, r0
 8008f96:	b911      	cbnz	r1, 8008f9e <sbrk_aligned+0x12>
 8008f98:	f000 f9e6 	bl	8009368 <_sbrk_r>
 8008f9c:	6030      	str	r0, [r6, #0]
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f000 f9e1 	bl	8009368 <_sbrk_r>
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	d00a      	beq.n	8008fc0 <sbrk_aligned+0x34>
 8008faa:	1cc4      	adds	r4, r0, #3
 8008fac:	f024 0403 	bic.w	r4, r4, #3
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d007      	beq.n	8008fc4 <sbrk_aligned+0x38>
 8008fb4:	1a21      	subs	r1, r4, r0
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f000 f9d6 	bl	8009368 <_sbrk_r>
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d101      	bne.n	8008fc4 <sbrk_aligned+0x38>
 8008fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	20000590 	.word	0x20000590

08008fcc <_malloc_r>:
 8008fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd0:	1ccd      	adds	r5, r1, #3
 8008fd2:	f025 0503 	bic.w	r5, r5, #3
 8008fd6:	3508      	adds	r5, #8
 8008fd8:	2d0c      	cmp	r5, #12
 8008fda:	bf38      	it	cc
 8008fdc:	250c      	movcc	r5, #12
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	db01      	blt.n	8008fe8 <_malloc_r+0x1c>
 8008fe4:	42a9      	cmp	r1, r5
 8008fe6:	d905      	bls.n	8008ff4 <_malloc_r+0x28>
 8008fe8:	230c      	movs	r3, #12
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	2600      	movs	r6, #0
 8008fee:	4630      	mov	r0, r6
 8008ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff4:	4e2e      	ldr	r6, [pc, #184]	; (80090b0 <_malloc_r+0xe4>)
 8008ff6:	f000 faa3 	bl	8009540 <__malloc_lock>
 8008ffa:	6833      	ldr	r3, [r6, #0]
 8008ffc:	461c      	mov	r4, r3
 8008ffe:	bb34      	cbnz	r4, 800904e <_malloc_r+0x82>
 8009000:	4629      	mov	r1, r5
 8009002:	4638      	mov	r0, r7
 8009004:	f7ff ffc2 	bl	8008f8c <sbrk_aligned>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	4604      	mov	r4, r0
 800900c:	d14d      	bne.n	80090aa <_malloc_r+0xde>
 800900e:	6834      	ldr	r4, [r6, #0]
 8009010:	4626      	mov	r6, r4
 8009012:	2e00      	cmp	r6, #0
 8009014:	d140      	bne.n	8009098 <_malloc_r+0xcc>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	4631      	mov	r1, r6
 800901a:	4638      	mov	r0, r7
 800901c:	eb04 0803 	add.w	r8, r4, r3
 8009020:	f000 f9a2 	bl	8009368 <_sbrk_r>
 8009024:	4580      	cmp	r8, r0
 8009026:	d13a      	bne.n	800909e <_malloc_r+0xd2>
 8009028:	6821      	ldr	r1, [r4, #0]
 800902a:	3503      	adds	r5, #3
 800902c:	1a6d      	subs	r5, r5, r1
 800902e:	f025 0503 	bic.w	r5, r5, #3
 8009032:	3508      	adds	r5, #8
 8009034:	2d0c      	cmp	r5, #12
 8009036:	bf38      	it	cc
 8009038:	250c      	movcc	r5, #12
 800903a:	4629      	mov	r1, r5
 800903c:	4638      	mov	r0, r7
 800903e:	f7ff ffa5 	bl	8008f8c <sbrk_aligned>
 8009042:	3001      	adds	r0, #1
 8009044:	d02b      	beq.n	800909e <_malloc_r+0xd2>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	442b      	add	r3, r5
 800904a:	6023      	str	r3, [r4, #0]
 800904c:	e00e      	b.n	800906c <_malloc_r+0xa0>
 800904e:	6822      	ldr	r2, [r4, #0]
 8009050:	1b52      	subs	r2, r2, r5
 8009052:	d41e      	bmi.n	8009092 <_malloc_r+0xc6>
 8009054:	2a0b      	cmp	r2, #11
 8009056:	d916      	bls.n	8009086 <_malloc_r+0xba>
 8009058:	1961      	adds	r1, r4, r5
 800905a:	42a3      	cmp	r3, r4
 800905c:	6025      	str	r5, [r4, #0]
 800905e:	bf18      	it	ne
 8009060:	6059      	strne	r1, [r3, #4]
 8009062:	6863      	ldr	r3, [r4, #4]
 8009064:	bf08      	it	eq
 8009066:	6031      	streq	r1, [r6, #0]
 8009068:	5162      	str	r2, [r4, r5]
 800906a:	604b      	str	r3, [r1, #4]
 800906c:	4638      	mov	r0, r7
 800906e:	f104 060b 	add.w	r6, r4, #11
 8009072:	f000 fa6b 	bl	800954c <__malloc_unlock>
 8009076:	f026 0607 	bic.w	r6, r6, #7
 800907a:	1d23      	adds	r3, r4, #4
 800907c:	1af2      	subs	r2, r6, r3
 800907e:	d0b6      	beq.n	8008fee <_malloc_r+0x22>
 8009080:	1b9b      	subs	r3, r3, r6
 8009082:	50a3      	str	r3, [r4, r2]
 8009084:	e7b3      	b.n	8008fee <_malloc_r+0x22>
 8009086:	6862      	ldr	r2, [r4, #4]
 8009088:	42a3      	cmp	r3, r4
 800908a:	bf0c      	ite	eq
 800908c:	6032      	streq	r2, [r6, #0]
 800908e:	605a      	strne	r2, [r3, #4]
 8009090:	e7ec      	b.n	800906c <_malloc_r+0xa0>
 8009092:	4623      	mov	r3, r4
 8009094:	6864      	ldr	r4, [r4, #4]
 8009096:	e7b2      	b.n	8008ffe <_malloc_r+0x32>
 8009098:	4634      	mov	r4, r6
 800909a:	6876      	ldr	r6, [r6, #4]
 800909c:	e7b9      	b.n	8009012 <_malloc_r+0x46>
 800909e:	230c      	movs	r3, #12
 80090a0:	603b      	str	r3, [r7, #0]
 80090a2:	4638      	mov	r0, r7
 80090a4:	f000 fa52 	bl	800954c <__malloc_unlock>
 80090a8:	e7a1      	b.n	8008fee <_malloc_r+0x22>
 80090aa:	6025      	str	r5, [r4, #0]
 80090ac:	e7de      	b.n	800906c <_malloc_r+0xa0>
 80090ae:	bf00      	nop
 80090b0:	2000058c 	.word	0x2000058c

080090b4 <__sfputc_r>:
 80090b4:	6893      	ldr	r3, [r2, #8]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	b410      	push	{r4}
 80090bc:	6093      	str	r3, [r2, #8]
 80090be:	da08      	bge.n	80090d2 <__sfputc_r+0x1e>
 80090c0:	6994      	ldr	r4, [r2, #24]
 80090c2:	42a3      	cmp	r3, r4
 80090c4:	db01      	blt.n	80090ca <__sfputc_r+0x16>
 80090c6:	290a      	cmp	r1, #10
 80090c8:	d103      	bne.n	80090d2 <__sfputc_r+0x1e>
 80090ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ce:	f7fe ba01 	b.w	80074d4 <__swbuf_r>
 80090d2:	6813      	ldr	r3, [r2, #0]
 80090d4:	1c58      	adds	r0, r3, #1
 80090d6:	6010      	str	r0, [r2, #0]
 80090d8:	7019      	strb	r1, [r3, #0]
 80090da:	4608      	mov	r0, r1
 80090dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <__sfputs_r>:
 80090e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e4:	4606      	mov	r6, r0
 80090e6:	460f      	mov	r7, r1
 80090e8:	4614      	mov	r4, r2
 80090ea:	18d5      	adds	r5, r2, r3
 80090ec:	42ac      	cmp	r4, r5
 80090ee:	d101      	bne.n	80090f4 <__sfputs_r+0x12>
 80090f0:	2000      	movs	r0, #0
 80090f2:	e007      	b.n	8009104 <__sfputs_r+0x22>
 80090f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f8:	463a      	mov	r2, r7
 80090fa:	4630      	mov	r0, r6
 80090fc:	f7ff ffda 	bl	80090b4 <__sfputc_r>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d1f3      	bne.n	80090ec <__sfputs_r+0xa>
 8009104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009108 <_vfiprintf_r>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	460d      	mov	r5, r1
 800910e:	b09d      	sub	sp, #116	; 0x74
 8009110:	4614      	mov	r4, r2
 8009112:	4698      	mov	r8, r3
 8009114:	4606      	mov	r6, r0
 8009116:	b118      	cbz	r0, 8009120 <_vfiprintf_r+0x18>
 8009118:	6983      	ldr	r3, [r0, #24]
 800911a:	b90b      	cbnz	r3, 8009120 <_vfiprintf_r+0x18>
 800911c:	f7ff fa30 	bl	8008580 <__sinit>
 8009120:	4b89      	ldr	r3, [pc, #548]	; (8009348 <_vfiprintf_r+0x240>)
 8009122:	429d      	cmp	r5, r3
 8009124:	d11b      	bne.n	800915e <_vfiprintf_r+0x56>
 8009126:	6875      	ldr	r5, [r6, #4]
 8009128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800912a:	07d9      	lsls	r1, r3, #31
 800912c:	d405      	bmi.n	800913a <_vfiprintf_r+0x32>
 800912e:	89ab      	ldrh	r3, [r5, #12]
 8009130:	059a      	lsls	r2, r3, #22
 8009132:	d402      	bmi.n	800913a <_vfiprintf_r+0x32>
 8009134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009136:	f7ff fac6 	bl	80086c6 <__retarget_lock_acquire_recursive>
 800913a:	89ab      	ldrh	r3, [r5, #12]
 800913c:	071b      	lsls	r3, r3, #28
 800913e:	d501      	bpl.n	8009144 <_vfiprintf_r+0x3c>
 8009140:	692b      	ldr	r3, [r5, #16]
 8009142:	b9eb      	cbnz	r3, 8009180 <_vfiprintf_r+0x78>
 8009144:	4629      	mov	r1, r5
 8009146:	4630      	mov	r0, r6
 8009148:	f7fe fa16 	bl	8007578 <__swsetup_r>
 800914c:	b1c0      	cbz	r0, 8009180 <_vfiprintf_r+0x78>
 800914e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009150:	07dc      	lsls	r4, r3, #31
 8009152:	d50e      	bpl.n	8009172 <_vfiprintf_r+0x6a>
 8009154:	f04f 30ff 	mov.w	r0, #4294967295
 8009158:	b01d      	add	sp, #116	; 0x74
 800915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915e:	4b7b      	ldr	r3, [pc, #492]	; (800934c <_vfiprintf_r+0x244>)
 8009160:	429d      	cmp	r5, r3
 8009162:	d101      	bne.n	8009168 <_vfiprintf_r+0x60>
 8009164:	68b5      	ldr	r5, [r6, #8]
 8009166:	e7df      	b.n	8009128 <_vfiprintf_r+0x20>
 8009168:	4b79      	ldr	r3, [pc, #484]	; (8009350 <_vfiprintf_r+0x248>)
 800916a:	429d      	cmp	r5, r3
 800916c:	bf08      	it	eq
 800916e:	68f5      	ldreq	r5, [r6, #12]
 8009170:	e7da      	b.n	8009128 <_vfiprintf_r+0x20>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	0598      	lsls	r0, r3, #22
 8009176:	d4ed      	bmi.n	8009154 <_vfiprintf_r+0x4c>
 8009178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800917a:	f7ff faa5 	bl	80086c8 <__retarget_lock_release_recursive>
 800917e:	e7e9      	b.n	8009154 <_vfiprintf_r+0x4c>
 8009180:	2300      	movs	r3, #0
 8009182:	9309      	str	r3, [sp, #36]	; 0x24
 8009184:	2320      	movs	r3, #32
 8009186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800918a:	f8cd 800c 	str.w	r8, [sp, #12]
 800918e:	2330      	movs	r3, #48	; 0x30
 8009190:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009354 <_vfiprintf_r+0x24c>
 8009194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009198:	f04f 0901 	mov.w	r9, #1
 800919c:	4623      	mov	r3, r4
 800919e:	469a      	mov	sl, r3
 80091a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091a4:	b10a      	cbz	r2, 80091aa <_vfiprintf_r+0xa2>
 80091a6:	2a25      	cmp	r2, #37	; 0x25
 80091a8:	d1f9      	bne.n	800919e <_vfiprintf_r+0x96>
 80091aa:	ebba 0b04 	subs.w	fp, sl, r4
 80091ae:	d00b      	beq.n	80091c8 <_vfiprintf_r+0xc0>
 80091b0:	465b      	mov	r3, fp
 80091b2:	4622      	mov	r2, r4
 80091b4:	4629      	mov	r1, r5
 80091b6:	4630      	mov	r0, r6
 80091b8:	f7ff ff93 	bl	80090e2 <__sfputs_r>
 80091bc:	3001      	adds	r0, #1
 80091be:	f000 80aa 	beq.w	8009316 <_vfiprintf_r+0x20e>
 80091c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091c4:	445a      	add	r2, fp
 80091c6:	9209      	str	r2, [sp, #36]	; 0x24
 80091c8:	f89a 3000 	ldrb.w	r3, [sl]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 80a2 	beq.w	8009316 <_vfiprintf_r+0x20e>
 80091d2:	2300      	movs	r3, #0
 80091d4:	f04f 32ff 	mov.w	r2, #4294967295
 80091d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091dc:	f10a 0a01 	add.w	sl, sl, #1
 80091e0:	9304      	str	r3, [sp, #16]
 80091e2:	9307      	str	r3, [sp, #28]
 80091e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091e8:	931a      	str	r3, [sp, #104]	; 0x68
 80091ea:	4654      	mov	r4, sl
 80091ec:	2205      	movs	r2, #5
 80091ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f2:	4858      	ldr	r0, [pc, #352]	; (8009354 <_vfiprintf_r+0x24c>)
 80091f4:	f7f6 fffc 	bl	80001f0 <memchr>
 80091f8:	9a04      	ldr	r2, [sp, #16]
 80091fa:	b9d8      	cbnz	r0, 8009234 <_vfiprintf_r+0x12c>
 80091fc:	06d1      	lsls	r1, r2, #27
 80091fe:	bf44      	itt	mi
 8009200:	2320      	movmi	r3, #32
 8009202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009206:	0713      	lsls	r3, r2, #28
 8009208:	bf44      	itt	mi
 800920a:	232b      	movmi	r3, #43	; 0x2b
 800920c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009210:	f89a 3000 	ldrb.w	r3, [sl]
 8009214:	2b2a      	cmp	r3, #42	; 0x2a
 8009216:	d015      	beq.n	8009244 <_vfiprintf_r+0x13c>
 8009218:	9a07      	ldr	r2, [sp, #28]
 800921a:	4654      	mov	r4, sl
 800921c:	2000      	movs	r0, #0
 800921e:	f04f 0c0a 	mov.w	ip, #10
 8009222:	4621      	mov	r1, r4
 8009224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009228:	3b30      	subs	r3, #48	; 0x30
 800922a:	2b09      	cmp	r3, #9
 800922c:	d94e      	bls.n	80092cc <_vfiprintf_r+0x1c4>
 800922e:	b1b0      	cbz	r0, 800925e <_vfiprintf_r+0x156>
 8009230:	9207      	str	r2, [sp, #28]
 8009232:	e014      	b.n	800925e <_vfiprintf_r+0x156>
 8009234:	eba0 0308 	sub.w	r3, r0, r8
 8009238:	fa09 f303 	lsl.w	r3, r9, r3
 800923c:	4313      	orrs	r3, r2
 800923e:	9304      	str	r3, [sp, #16]
 8009240:	46a2      	mov	sl, r4
 8009242:	e7d2      	b.n	80091ea <_vfiprintf_r+0xe2>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	1d19      	adds	r1, r3, #4
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	9103      	str	r1, [sp, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	bfbb      	ittet	lt
 8009250:	425b      	neglt	r3, r3
 8009252:	f042 0202 	orrlt.w	r2, r2, #2
 8009256:	9307      	strge	r3, [sp, #28]
 8009258:	9307      	strlt	r3, [sp, #28]
 800925a:	bfb8      	it	lt
 800925c:	9204      	strlt	r2, [sp, #16]
 800925e:	7823      	ldrb	r3, [r4, #0]
 8009260:	2b2e      	cmp	r3, #46	; 0x2e
 8009262:	d10c      	bne.n	800927e <_vfiprintf_r+0x176>
 8009264:	7863      	ldrb	r3, [r4, #1]
 8009266:	2b2a      	cmp	r3, #42	; 0x2a
 8009268:	d135      	bne.n	80092d6 <_vfiprintf_r+0x1ce>
 800926a:	9b03      	ldr	r3, [sp, #12]
 800926c:	1d1a      	adds	r2, r3, #4
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	9203      	str	r2, [sp, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	bfb8      	it	lt
 8009276:	f04f 33ff 	movlt.w	r3, #4294967295
 800927a:	3402      	adds	r4, #2
 800927c:	9305      	str	r3, [sp, #20]
 800927e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009364 <_vfiprintf_r+0x25c>
 8009282:	7821      	ldrb	r1, [r4, #0]
 8009284:	2203      	movs	r2, #3
 8009286:	4650      	mov	r0, sl
 8009288:	f7f6 ffb2 	bl	80001f0 <memchr>
 800928c:	b140      	cbz	r0, 80092a0 <_vfiprintf_r+0x198>
 800928e:	2340      	movs	r3, #64	; 0x40
 8009290:	eba0 000a 	sub.w	r0, r0, sl
 8009294:	fa03 f000 	lsl.w	r0, r3, r0
 8009298:	9b04      	ldr	r3, [sp, #16]
 800929a:	4303      	orrs	r3, r0
 800929c:	3401      	adds	r4, #1
 800929e:	9304      	str	r3, [sp, #16]
 80092a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a4:	482c      	ldr	r0, [pc, #176]	; (8009358 <_vfiprintf_r+0x250>)
 80092a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092aa:	2206      	movs	r2, #6
 80092ac:	f7f6 ffa0 	bl	80001f0 <memchr>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d03f      	beq.n	8009334 <_vfiprintf_r+0x22c>
 80092b4:	4b29      	ldr	r3, [pc, #164]	; (800935c <_vfiprintf_r+0x254>)
 80092b6:	bb1b      	cbnz	r3, 8009300 <_vfiprintf_r+0x1f8>
 80092b8:	9b03      	ldr	r3, [sp, #12]
 80092ba:	3307      	adds	r3, #7
 80092bc:	f023 0307 	bic.w	r3, r3, #7
 80092c0:	3308      	adds	r3, #8
 80092c2:	9303      	str	r3, [sp, #12]
 80092c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c6:	443b      	add	r3, r7
 80092c8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ca:	e767      	b.n	800919c <_vfiprintf_r+0x94>
 80092cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80092d0:	460c      	mov	r4, r1
 80092d2:	2001      	movs	r0, #1
 80092d4:	e7a5      	b.n	8009222 <_vfiprintf_r+0x11a>
 80092d6:	2300      	movs	r3, #0
 80092d8:	3401      	adds	r4, #1
 80092da:	9305      	str	r3, [sp, #20]
 80092dc:	4619      	mov	r1, r3
 80092de:	f04f 0c0a 	mov.w	ip, #10
 80092e2:	4620      	mov	r0, r4
 80092e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092e8:	3a30      	subs	r2, #48	; 0x30
 80092ea:	2a09      	cmp	r2, #9
 80092ec:	d903      	bls.n	80092f6 <_vfiprintf_r+0x1ee>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0c5      	beq.n	800927e <_vfiprintf_r+0x176>
 80092f2:	9105      	str	r1, [sp, #20]
 80092f4:	e7c3      	b.n	800927e <_vfiprintf_r+0x176>
 80092f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80092fa:	4604      	mov	r4, r0
 80092fc:	2301      	movs	r3, #1
 80092fe:	e7f0      	b.n	80092e2 <_vfiprintf_r+0x1da>
 8009300:	ab03      	add	r3, sp, #12
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	462a      	mov	r2, r5
 8009306:	4b16      	ldr	r3, [pc, #88]	; (8009360 <_vfiprintf_r+0x258>)
 8009308:	a904      	add	r1, sp, #16
 800930a:	4630      	mov	r0, r6
 800930c:	f7fd fc8a 	bl	8006c24 <_printf_float>
 8009310:	4607      	mov	r7, r0
 8009312:	1c78      	adds	r0, r7, #1
 8009314:	d1d6      	bne.n	80092c4 <_vfiprintf_r+0x1bc>
 8009316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009318:	07d9      	lsls	r1, r3, #31
 800931a:	d405      	bmi.n	8009328 <_vfiprintf_r+0x220>
 800931c:	89ab      	ldrh	r3, [r5, #12]
 800931e:	059a      	lsls	r2, r3, #22
 8009320:	d402      	bmi.n	8009328 <_vfiprintf_r+0x220>
 8009322:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009324:	f7ff f9d0 	bl	80086c8 <__retarget_lock_release_recursive>
 8009328:	89ab      	ldrh	r3, [r5, #12]
 800932a:	065b      	lsls	r3, r3, #25
 800932c:	f53f af12 	bmi.w	8009154 <_vfiprintf_r+0x4c>
 8009330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009332:	e711      	b.n	8009158 <_vfiprintf_r+0x50>
 8009334:	ab03      	add	r3, sp, #12
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	462a      	mov	r2, r5
 800933a:	4b09      	ldr	r3, [pc, #36]	; (8009360 <_vfiprintf_r+0x258>)
 800933c:	a904      	add	r1, sp, #16
 800933e:	4630      	mov	r0, r6
 8009340:	f7fd ff14 	bl	800716c <_printf_i>
 8009344:	e7e4      	b.n	8009310 <_vfiprintf_r+0x208>
 8009346:	bf00      	nop
 8009348:	080097f8 	.word	0x080097f8
 800934c:	08009818 	.word	0x08009818
 8009350:	080097d8 	.word	0x080097d8
 8009354:	08009994 	.word	0x08009994
 8009358:	0800999e 	.word	0x0800999e
 800935c:	08006c25 	.word	0x08006c25
 8009360:	080090e3 	.word	0x080090e3
 8009364:	0800999a 	.word	0x0800999a

08009368 <_sbrk_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d06      	ldr	r5, [pc, #24]	; (8009384 <_sbrk_r+0x1c>)
 800936c:	2300      	movs	r3, #0
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	f7f9 f924 	bl	80025c0 <_sbrk>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_sbrk_r+0x1a>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_sbrk_r+0x1a>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20000594 	.word	0x20000594

08009388 <__sread>:
 8009388:	b510      	push	{r4, lr}
 800938a:	460c      	mov	r4, r1
 800938c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009390:	f000 f8e2 	bl	8009558 <_read_r>
 8009394:	2800      	cmp	r0, #0
 8009396:	bfab      	itete	ge
 8009398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800939a:	89a3      	ldrhlt	r3, [r4, #12]
 800939c:	181b      	addge	r3, r3, r0
 800939e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093a2:	bfac      	ite	ge
 80093a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80093a6:	81a3      	strhlt	r3, [r4, #12]
 80093a8:	bd10      	pop	{r4, pc}

080093aa <__swrite>:
 80093aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ae:	461f      	mov	r7, r3
 80093b0:	898b      	ldrh	r3, [r1, #12]
 80093b2:	05db      	lsls	r3, r3, #23
 80093b4:	4605      	mov	r5, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	4616      	mov	r6, r2
 80093ba:	d505      	bpl.n	80093c8 <__swrite+0x1e>
 80093bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c0:	2302      	movs	r3, #2
 80093c2:	2200      	movs	r2, #0
 80093c4:	f000 f898 	bl	80094f8 <_lseek_r>
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093d2:	81a3      	strh	r3, [r4, #12]
 80093d4:	4632      	mov	r2, r6
 80093d6:	463b      	mov	r3, r7
 80093d8:	4628      	mov	r0, r5
 80093da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093de:	f000 b817 	b.w	8009410 <_write_r>

080093e2 <__sseek>:
 80093e2:	b510      	push	{r4, lr}
 80093e4:	460c      	mov	r4, r1
 80093e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ea:	f000 f885 	bl	80094f8 <_lseek_r>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	bf15      	itete	ne
 80093f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80093f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093fe:	81a3      	strheq	r3, [r4, #12]
 8009400:	bf18      	it	ne
 8009402:	81a3      	strhne	r3, [r4, #12]
 8009404:	bd10      	pop	{r4, pc}

08009406 <__sclose>:
 8009406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940a:	f000 b831 	b.w	8009470 <_close_r>
	...

08009410 <_write_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d07      	ldr	r5, [pc, #28]	; (8009430 <_write_r+0x20>)
 8009414:	4604      	mov	r4, r0
 8009416:	4608      	mov	r0, r1
 8009418:	4611      	mov	r1, r2
 800941a:	2200      	movs	r2, #0
 800941c:	602a      	str	r2, [r5, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	f7f9 f87d 	bl	800251e <_write>
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d102      	bne.n	800942e <_write_r+0x1e>
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	b103      	cbz	r3, 800942e <_write_r+0x1e>
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	20000594 	.word	0x20000594

08009434 <__assert_func>:
 8009434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009436:	4614      	mov	r4, r2
 8009438:	461a      	mov	r2, r3
 800943a:	4b09      	ldr	r3, [pc, #36]	; (8009460 <__assert_func+0x2c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4605      	mov	r5, r0
 8009440:	68d8      	ldr	r0, [r3, #12]
 8009442:	b14c      	cbz	r4, 8009458 <__assert_func+0x24>
 8009444:	4b07      	ldr	r3, [pc, #28]	; (8009464 <__assert_func+0x30>)
 8009446:	9100      	str	r1, [sp, #0]
 8009448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800944c:	4906      	ldr	r1, [pc, #24]	; (8009468 <__assert_func+0x34>)
 800944e:	462b      	mov	r3, r5
 8009450:	f000 f81e 	bl	8009490 <fiprintf>
 8009454:	f000 f89f 	bl	8009596 <abort>
 8009458:	4b04      	ldr	r3, [pc, #16]	; (800946c <__assert_func+0x38>)
 800945a:	461c      	mov	r4, r3
 800945c:	e7f3      	b.n	8009446 <__assert_func+0x12>
 800945e:	bf00      	nop
 8009460:	20000024 	.word	0x20000024
 8009464:	080099a5 	.word	0x080099a5
 8009468:	080099b2 	.word	0x080099b2
 800946c:	080099e0 	.word	0x080099e0

08009470 <_close_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4d06      	ldr	r5, [pc, #24]	; (800948c <_close_r+0x1c>)
 8009474:	2300      	movs	r3, #0
 8009476:	4604      	mov	r4, r0
 8009478:	4608      	mov	r0, r1
 800947a:	602b      	str	r3, [r5, #0]
 800947c:	f7f9 f86b 	bl	8002556 <_close>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_close_r+0x1a>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	b103      	cbz	r3, 800948a <_close_r+0x1a>
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	20000594 	.word	0x20000594

08009490 <fiprintf>:
 8009490:	b40e      	push	{r1, r2, r3}
 8009492:	b503      	push	{r0, r1, lr}
 8009494:	4601      	mov	r1, r0
 8009496:	ab03      	add	r3, sp, #12
 8009498:	4805      	ldr	r0, [pc, #20]	; (80094b0 <fiprintf+0x20>)
 800949a:	f853 2b04 	ldr.w	r2, [r3], #4
 800949e:	6800      	ldr	r0, [r0, #0]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	f7ff fe31 	bl	8009108 <_vfiprintf_r>
 80094a6:	b002      	add	sp, #8
 80094a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094ac:	b003      	add	sp, #12
 80094ae:	4770      	bx	lr
 80094b0:	20000024 	.word	0x20000024

080094b4 <_fstat_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4d07      	ldr	r5, [pc, #28]	; (80094d4 <_fstat_r+0x20>)
 80094b8:	2300      	movs	r3, #0
 80094ba:	4604      	mov	r4, r0
 80094bc:	4608      	mov	r0, r1
 80094be:	4611      	mov	r1, r2
 80094c0:	602b      	str	r3, [r5, #0]
 80094c2:	f7f9 f854 	bl	800256e <_fstat>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	d102      	bne.n	80094d0 <_fstat_r+0x1c>
 80094ca:	682b      	ldr	r3, [r5, #0]
 80094cc:	b103      	cbz	r3, 80094d0 <_fstat_r+0x1c>
 80094ce:	6023      	str	r3, [r4, #0]
 80094d0:	bd38      	pop	{r3, r4, r5, pc}
 80094d2:	bf00      	nop
 80094d4:	20000594 	.word	0x20000594

080094d8 <_isatty_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d06      	ldr	r5, [pc, #24]	; (80094f4 <_isatty_r+0x1c>)
 80094dc:	2300      	movs	r3, #0
 80094de:	4604      	mov	r4, r0
 80094e0:	4608      	mov	r0, r1
 80094e2:	602b      	str	r3, [r5, #0]
 80094e4:	f7f9 f853 	bl	800258e <_isatty>
 80094e8:	1c43      	adds	r3, r0, #1
 80094ea:	d102      	bne.n	80094f2 <_isatty_r+0x1a>
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	b103      	cbz	r3, 80094f2 <_isatty_r+0x1a>
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	20000594 	.word	0x20000594

080094f8 <_lseek_r>:
 80094f8:	b538      	push	{r3, r4, r5, lr}
 80094fa:	4d07      	ldr	r5, [pc, #28]	; (8009518 <_lseek_r+0x20>)
 80094fc:	4604      	mov	r4, r0
 80094fe:	4608      	mov	r0, r1
 8009500:	4611      	mov	r1, r2
 8009502:	2200      	movs	r2, #0
 8009504:	602a      	str	r2, [r5, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	f7f9 f84c 	bl	80025a4 <_lseek>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d102      	bne.n	8009516 <_lseek_r+0x1e>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	b103      	cbz	r3, 8009516 <_lseek_r+0x1e>
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	20000594 	.word	0x20000594

0800951c <__ascii_mbtowc>:
 800951c:	b082      	sub	sp, #8
 800951e:	b901      	cbnz	r1, 8009522 <__ascii_mbtowc+0x6>
 8009520:	a901      	add	r1, sp, #4
 8009522:	b142      	cbz	r2, 8009536 <__ascii_mbtowc+0x1a>
 8009524:	b14b      	cbz	r3, 800953a <__ascii_mbtowc+0x1e>
 8009526:	7813      	ldrb	r3, [r2, #0]
 8009528:	600b      	str	r3, [r1, #0]
 800952a:	7812      	ldrb	r2, [r2, #0]
 800952c:	1e10      	subs	r0, r2, #0
 800952e:	bf18      	it	ne
 8009530:	2001      	movne	r0, #1
 8009532:	b002      	add	sp, #8
 8009534:	4770      	bx	lr
 8009536:	4610      	mov	r0, r2
 8009538:	e7fb      	b.n	8009532 <__ascii_mbtowc+0x16>
 800953a:	f06f 0001 	mvn.w	r0, #1
 800953e:	e7f8      	b.n	8009532 <__ascii_mbtowc+0x16>

08009540 <__malloc_lock>:
 8009540:	4801      	ldr	r0, [pc, #4]	; (8009548 <__malloc_lock+0x8>)
 8009542:	f7ff b8c0 	b.w	80086c6 <__retarget_lock_acquire_recursive>
 8009546:	bf00      	nop
 8009548:	20000588 	.word	0x20000588

0800954c <__malloc_unlock>:
 800954c:	4801      	ldr	r0, [pc, #4]	; (8009554 <__malloc_unlock+0x8>)
 800954e:	f7ff b8bb 	b.w	80086c8 <__retarget_lock_release_recursive>
 8009552:	bf00      	nop
 8009554:	20000588 	.word	0x20000588

08009558 <_read_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	; (8009578 <_read_r+0x20>)
 800955c:	4604      	mov	r4, r0
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	2200      	movs	r2, #0
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7f8 ffbc 	bl	80024e4 <_read>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_read_r+0x1e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_read_r+0x1e>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	20000594 	.word	0x20000594

0800957c <__ascii_wctomb>:
 800957c:	b149      	cbz	r1, 8009592 <__ascii_wctomb+0x16>
 800957e:	2aff      	cmp	r2, #255	; 0xff
 8009580:	bf85      	ittet	hi
 8009582:	238a      	movhi	r3, #138	; 0x8a
 8009584:	6003      	strhi	r3, [r0, #0]
 8009586:	700a      	strbls	r2, [r1, #0]
 8009588:	f04f 30ff 	movhi.w	r0, #4294967295
 800958c:	bf98      	it	ls
 800958e:	2001      	movls	r0, #1
 8009590:	4770      	bx	lr
 8009592:	4608      	mov	r0, r1
 8009594:	4770      	bx	lr

08009596 <abort>:
 8009596:	b508      	push	{r3, lr}
 8009598:	2006      	movs	r0, #6
 800959a:	f000 f82b 	bl	80095f4 <raise>
 800959e:	2001      	movs	r0, #1
 80095a0:	f7f8 ff96 	bl	80024d0 <_exit>

080095a4 <_raise_r>:
 80095a4:	291f      	cmp	r1, #31
 80095a6:	b538      	push	{r3, r4, r5, lr}
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	d904      	bls.n	80095b8 <_raise_r+0x14>
 80095ae:	2316      	movs	r3, #22
 80095b0:	6003      	str	r3, [r0, #0]
 80095b2:	f04f 30ff 	mov.w	r0, #4294967295
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095ba:	b112      	cbz	r2, 80095c2 <_raise_r+0x1e>
 80095bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095c0:	b94b      	cbnz	r3, 80095d6 <_raise_r+0x32>
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 f830 	bl	8009628 <_getpid_r>
 80095c8:	462a      	mov	r2, r5
 80095ca:	4601      	mov	r1, r0
 80095cc:	4620      	mov	r0, r4
 80095ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d2:	f000 b817 	b.w	8009604 <_kill_r>
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d00a      	beq.n	80095f0 <_raise_r+0x4c>
 80095da:	1c59      	adds	r1, r3, #1
 80095dc:	d103      	bne.n	80095e6 <_raise_r+0x42>
 80095de:	2316      	movs	r3, #22
 80095e0:	6003      	str	r3, [r0, #0]
 80095e2:	2001      	movs	r0, #1
 80095e4:	e7e7      	b.n	80095b6 <_raise_r+0x12>
 80095e6:	2400      	movs	r4, #0
 80095e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095ec:	4628      	mov	r0, r5
 80095ee:	4798      	blx	r3
 80095f0:	2000      	movs	r0, #0
 80095f2:	e7e0      	b.n	80095b6 <_raise_r+0x12>

080095f4 <raise>:
 80095f4:	4b02      	ldr	r3, [pc, #8]	; (8009600 <raise+0xc>)
 80095f6:	4601      	mov	r1, r0
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	f7ff bfd3 	b.w	80095a4 <_raise_r>
 80095fe:	bf00      	nop
 8009600:	20000024 	.word	0x20000024

08009604 <_kill_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d07      	ldr	r5, [pc, #28]	; (8009624 <_kill_r+0x20>)
 8009608:	2300      	movs	r3, #0
 800960a:	4604      	mov	r4, r0
 800960c:	4608      	mov	r0, r1
 800960e:	4611      	mov	r1, r2
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	f7f8 ff4d 	bl	80024b0 <_kill>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	d102      	bne.n	8009620 <_kill_r+0x1c>
 800961a:	682b      	ldr	r3, [r5, #0]
 800961c:	b103      	cbz	r3, 8009620 <_kill_r+0x1c>
 800961e:	6023      	str	r3, [r4, #0]
 8009620:	bd38      	pop	{r3, r4, r5, pc}
 8009622:	bf00      	nop
 8009624:	20000594 	.word	0x20000594

08009628 <_getpid_r>:
 8009628:	f7f8 bf3a 	b.w	80024a0 <_getpid>

0800962c <_init>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	bf00      	nop
 8009630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009632:	bc08      	pop	{r3}
 8009634:	469e      	mov	lr, r3
 8009636:	4770      	bx	lr

08009638 <_fini>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	bf00      	nop
 800963c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963e:	bc08      	pop	{r3}
 8009640:	469e      	mov	lr, r3
 8009642:	4770      	bx	lr
